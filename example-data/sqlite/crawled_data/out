If the threading mode is Single-thread or Multi-thread this routine returns a NULL pointer||||null
This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized||||null
The current value of the requested counter be returned by sqlite3_stmt_status_APIName||||null
This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName||||null
See also||||null
The first argument is the prepared statement object to be interrogated||||null
The extended result codes are disabled by default for historical compatibility||||null
These counters can be used to monitor the performance characteristics of the prepared statements||||null
This interface is used to retrieve and reset counter values from a prepared statement||||null
sqlite3_status_APIName and sqlite3_db_status_APIName||||null
The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite||||null
If the sqlite3_stmt_status_APIParam_3 is true, the counter is reset to zero after this interface call returns||||null
The application must ensure that the 1_APIConstant parameter to sqlite3_exec_APIName is a valid and open database connection||||null
The sqlite3_set_last_insert_rowid method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database||||null
The second argument is an integer code for a specific SQLITE_STMTSTATUS counter to be interrogated||||null
These routines return information about a single column of the current result row of a query||||null
Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations||||null
The first six interfaces  each return the value of a result column in a specific data format||||null
The leftmost column of the result set has the index 0||||null
These routines may only be called when the most recent call to sqlite3_step_APIName has returned SQLITE_ROW_API_constant and neither sqlite3_reset_APIName nor sqlite3_finalize_APIName have been called subsequently||||null
The number of columns in the result can be determined using sqlite3_column_count_APIName||||null
If any of these routines are called after sqlite3_reset_APIName or sqlite3_finalize_APIName or after sqlite3_step_APIName has returned something other than SQLITE_ROW_API_constant, the results are undefined||||null
The sqlite3_column_type_APIName routine returns the datatype code for the initial data type of the result column||||null
sqlite3_column_type_APIParam_0 is one of SQLITE_INTEGER_API_constant , SQLITE_FLOAT_API_constant , SQLITE_TEXT_API_constant , SQLITE_BLOB_API_constant , or SQLITE_NULL_API_constant||||null
If the result is NULL, sqlite3_column_bytes_APIName returns zero||||null
The value returned by sqlite3_column_type_APIName is only meaningful if no automatic type conversions have occurred for the value in question||||null
The return value of sqlite3_column_type_APIName can be used to decide which of the first six interface should be used to extract the column value||||null
If the result is NULL, sqlite3_column_bytes16_APIName returns zero||||null
Future versions of SQLite may change the behavior of sqlite3_column_type_APIName following a type conversion||||null
If the result is a BLOB or UTF-8 string the sqlite3_column_bytes_APIName routine returns the number of bytes in that BLOB or string||||null
If the result is a UTF-16 string, sqlite3_column_bytes_APIName converts the string to UTF-8 and returns the number of bytes||||null
In every case sqlite3_column_int_APIParam_1 is a pointer to the prepared statement that is being evaluated and sqlite3_column_int_APIParam_2 is the index of the column||||null
If the result is a UTF-8 string, sqlite3_column_bytes16_APIName converts the string to UTF-16 and returns the number of bytes||||null
The values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName do not include the zero terminators at the end of the string||||null
If the result is a BLOB or UTF-16 string the sqlite3_column_bytes16_APIName routine returns the number of bytes in that BLOB or string||||null
If the result is a numeric value sqlite3_column_bytes_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-8 string and returns the number of bytes in that string||||null
The object returned by sqlite3_column_value_APIName is an unprotected sqlite3_value object||||null
The return value from sqlite3_column_blob_APIName for a zero-length BLOB is a NULL pointer||||null
Strings returned by sqlite3_column_text_APIName and sqlite3_column_text16_APIName, even empty strings, are always zero-terminated||||null
If the result is a numeric value sqlite3_column_bytes16_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-16 string and returns the number of bytes in that string||||null
an automatic type conversion is performed||||If the result column is not initially in the requested format
or if the column index is out of range||||If the SQL statement does not currently point to a valid row
the result is undefined||||null
the results are undefined||||If sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName are called from a different thread while any of these routines are pending
Note that when type conversions occur, pointers returned by prior calls to sqlite3_column_blob_APIName, sqlite3_column_text_APIName, and/or sqlite3_column_text16_APIName may be invalidated||||null
For clarity||||null
the values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName are the number of bytes in the string, not the number of characters||||null
The following table details the conversions that are applied||||null
The these routines may attempt to convert the datatype of the result||||null
In a multithreaded environment , an unprotected sqlite3_value object may only be used safely with sqlite3_bind_value_APIName and sqlite3_result_value_APIName||||null
Type conversions and pointer invalidations might occur in the following cases||||null
The safest policy is to invoke these routines in one of the following ways||||null
into sqlite3_free_APIName||||null
If the unprotected sqlite3_value object returned by sqlite3_column_value_APIName is used in any other way, including calls to routines like sqlite3_value_int_APIName, sqlite3_value_text_APIName, or sqlite3_value_bytes_APIName, the behavior is not threadsafe||||null
Do not pass the pointers returned from sqlite3_column_blob_APIName, sqlite3_column_text_APIName, etc||||null
The pointers returned are valid until a type conversion occurs as described above, or until sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName is called||||null
The memory space used to hold strings and BLOBs is freed automatically||||null
If an out-of-memory error occurs, the return value from these routines is the same as if the column had contained an SQL NULL value||||null
In the legacy interface, the return value will be either SQLITE_BUSY_API_constant, SQLITE_DONE_API_constant, SQLITE_ROW_API_constant, SQLITE_ERROR_API_constant, or SQLITE_MISUSE_API_constant||||null
Only the following subset of interfaces are subject to out-of-memory errors||||null
Hence , the sqlite3_column_value_APIName interface is normally only useful within the implementation of application-defined SQL functions or virtual tables , not within top-level application code||||null
With the "v2" interface, any of the other result codes or extended result codes might be returned as well||||null
SQLITE_DONE_API_constant means that the statement has finished executing successfully||||null
that would tend to indicate that the prepared statement is using a full table scan rather than an index||||if the number of table steps greatly exceeds the number of table searches or result rows
Do not mix calls to sqlite3_column_text_APIName or sqlite3_column_blob_APIName with calls to sqlite3_column_bytes16_APIName , and do not mix calls to sqlite3_column_text16_APIName with calls to sqlite3_column_bytes_APIName||||null
the sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName interfaces can be used to determine the size of that BLOB or string||||If the result is a BLOB or a TEXT string
The values may be accessed using the column access functions||||null
The use of the new `` vX '' interface is recommended for new applications but the legacy interface will continue to be supported||||null
sqlite3_step_APIName is called again to retrieve the next row of data||||null
SQLITE_BUSY_API_constant means that the database engine was unable to acquire the database locks it needs to do its job||||null
SQLITE_ERROR_API_constant means that a run-time error has occurred||||null
sqlite3_snprintf_APIName is used internally to perform the conversion automatically||||if the internal representation is FLOAT and a text result is requested
Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection||||null
sqlite3_step_APIName should not be called again on the VM||||null
More information may be found by calling sqlite3_errmsg_APIName||||null
In the "v2" interface, the more specific error code be returned by sqlite3_step_APIName directly by sqlite3_step_APIName||||null
SQLITE_MISUSE_API_constant means that the this routine was called inappropriately||||null
If the SQL statement being executed returns any data, SQLITE_ROW_API_constant be returned by sqlite3_step_APIName each time a new row of data is ready for processing by the caller||||null
The details of the behavior of the sqlite3_step_APIName interface depend on||||null
Failure to reset the prepared statement using sqlite3_reset_APIName would result in an SQLITE_MISUSE_API_constant return from sqlite3_step_APIName||||null
As long as the input parameters are correct , these routines will only fail||||if an out-of-memory error occurs during a format conversion
Other kinds of conversion are done in place||||when it is possible
but sometimes they are not possible and in those cases prior pointers are invalidated||||null
Perhaps it was called on a prepared statement that has already been finalized or on one that had previously returned SQLITE_ERROR_API_constant or SQLITE_DONE_API_constant||||null
sqlite3_step_APIName should not be called again on this virtual machine without first calling sqlite3_reset_APIName to reset the virtual machine back to its initial state||||null
But after version 3.6.23.1 (2010-03-26, sqlite3_step_APIName began calling sqlite3_reset_APIName automatically in this circumstance rather than returning SQLITE_MISUSE_API_constant||||null
The SQLITE_OMIT_AUTORESET compile-time option can be used to restore the legacy behavior||||null
We admit that this is a goofy design||||null
you should rollback the transaction before continuing||||If the statement is not a COMMIT and occurs within an explicit transaction
With the legacy interface , a more specific error code can be obtained by calling sqlite3_reset_APIName on the prepared statement||||null
you can retry the statement||||If the statement is a COMMIT or occurs outside of an explicit transaction
you should call sqlite3_column_text_APIName , sqlite3_column_blob_APIName , or sqlite3_column_text16_APIName first to force the result into the desired format , invoke sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName to find the size of the result||||null
The problem has been fixed with the `` v2 '' interface||||null
For all versions of SQLite up to and including 3.6.23.1, a call to sqlite3_reset_APIName was required after sqlite3_step_APIName returned anything other than SQLITE_ROW_API_constant before any subsequent invocation of sqlite3_step_APIName||||null
You must call sqlite3_reset_APIName or sqlite3_finalize_APIName||||null
The use of the `` vX '' interfaces is recommended||||null
If you prepare all of your SQL statements using sqlite3_prepare_v3_APIName or sqlite3_prepare_v2_APIName or sqlite3_prepare16_v2_APIName or sqlite3_prepare16_v3_APIName instead of the legacy sqlite3_prepare_APIName and sqlite3_prepare16_APIName interfaces, the more specific error codes be returned by sqlite3_step_APIName directly by sqlite3_step_APIName||||null
Goofy Interface Alert||||null
In the legacy interface, the sqlite3_step_APIName API always returns a generic error code, SQLITE_ERROR_API_constant, following any error other than SQLITE_BUSY_API_constant and SQLITE_MISUSE_API_constant||||null
The first parameter is a prepared statement||||null
sqlite3_column_decltype16_APIParam_0 is always UTF-8 encoded||||null
given the database schema||||null
Or it could be the case that the same database connection is being used by two or more threads at the same moment in time||||null
After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName , sqlite3_step_APIName must be called one or more times to evaluate the statement||||null
CREATE TABLE t1||||null
the following statement to be compiled||||null
If the Nth column of the result set is an expression or subquery, a NULL pointer be returned by sqlite3_column_decltype16_APIName||||null
SELECT c1 + 1 , c1 FROM t1||||null
SQLite uses dynamic run-time typing||||null
this routine would return the string "VARIANT" for the second result column , and a NULL pointer for the first result column||||null
SQLite is strongly typed , but the typing is dynamic not static||||null
If this statement is a SELECT statement and the Nth column of sqlite3_column_decltype_APIParam_0 set of that SELECT is a table column  the declared type of the table column be returned by sqlite3_column_decltype_APIName||||null
Type is associated with individual values , not with the containers used to hold those values||||null
Use sqlite3_clear_bindings_APIName to reset the bindings||||null
So just a particular type does not mean that the data stored in that column is of the declared type||||null
On success, sqlite3_blob_write_APIName returns SQLITE_OK_API_constant||||null
The sqlite3_reset_APIName interface resets the prepared statement S back to the beginning of its program||||null
Any SQL statement variables that had values bound to them using the sqlite3_bind _ * _ APIName API retain their values||||null
The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state , ready to be re-executed||||null
If sqlite3_deserialize_APIName fails for any reason and if the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in argument F, sqlite3_free_APIName is invoked on argument sqlite3_deserialize_APIParam_3 prior to returning||||null
If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 indicated an error, sqlite3_reset_APIName returns an appropriate error code||||null
sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer||||null
This interface is only available||||if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option
The sqlite3_reset_APIName interface does not change the values of any bindings on the prepared statement S||||null
Otherwise, an  error code or an extended error code be returned by sqlite3_blob_write_APIName||||null
If the BLOB handle passed as sqlite3_blob_write_APIParam_1 was not opened for writing , sqlite3_blob_write_APIName returns SQLITE_READ_API_constantONLY||||null
The sqlite3_deserialize_APIName interface causes the database connection sqlite3_deserialize_APIParam_1 to disconnect from database sqlite3_deserialize_APIParam_2 and reopen sqlite3_deserialize_APIParam_2 as an in-memory database based on the serialization contained in sqlite3_deserialize_APIParam_3||||null
Unless SQLITE_MISUSE_API_constant be returned by sqlite3_blob_write_APIName, sqlite3_blob_write_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions||||null
SQLite will invoke sqlite3_free_APIName on the serialization buffer when the database connection closes||||If the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in F
If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 returned SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if sqlite3_step_APIName has never before been called on sqlite3_reset_APIParam_1, sqlite3_reset_APIName returns SQLITE_OK_API_constant||||null
If N or sqlite3_blob_write_APIParam_4 are less than zero SQLITE_ERROR_API_constant be returned by sqlite3_blob_write_APIName and no data is written||||null
N bytes of data are copied from the buffer Z into the open BLOB , starting at offset sqlite3_blob_write_APIParam_4||||null
The size of the BLOB can be determined using the sqlite3_blob_bytes_APIName interface||||null
sqlite3_blob_write_APIName may only modify the contents of the BLOB||||null
See also||||null
The sqlite3_deserialize_APIName interface will fail with SQLITE_BUSY_API_constant or is involved in a backup operation||||if the database is currently in a read transaction
If offset sqlite3_blob_write_APIParam_4 is less than N bytes from the end of the BLOB, SQLITE_ERROR_API_constant be returned by sqlite3_blob_write_APIName and no data is written||||null
it is not possible to increase the size of a BLOB using this API||||null
An attempt to write to an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant||||null
The number of milliseconds of sleep actually requested from the operating system be returned by sqlite3_sleep_APIName||||null
The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs||||null
Passing any other pointer in to this routine results in undefined and probably undesirable behavior||||null
Use the sqlite3_result_subtype_APIName routine to set the subtype for the return value of an SQL function||||null
SQLite implements this interface by calling the xSleep_APIName method of the default sqlite3_vfs object||||null
The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.  The subtype information can be used to pass a limited amount of context from one SQL function to another||||null
The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter||||null
A call to either function replaces the existing collation-needed callback||||null
This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName||||null
The second argument is the database connection||||null
SQLite will try to increase the buffer size using sqlite3_realloc64_APIName if writes on the database cause it to grow larger than M bytes||||If the SQLITE_DESERIALIZE_RESIZEABLE_API_constant bit is set
The database connection returned by sqlite3_db_handle is the same database connection that was sqlite3_db_handle_APIParam_1 to the sqlite3_prepare_v2_APIName call  that was used to create the statement in the first place||||null
The fourth parameter is the name of the required collation sequence||||null
The callback function should register the desired collation using sqlite3_create_collation_APIName , sqlite3_create_collation16_APIName , or sqlite3_create_collation_v2_APIName||||null
This interface allows applications to access the same PRNG for other purposes||||null
The PRNG is also used for the build-in random_APIName and randomblob_APIName SQL functions||||null
The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2_APIName||||null
the names are passed as UTF-16 in machine native byte order||||If sqlite3_collation_needed16_APIName is used
the time will be rounded up to the nearest second||||If the operating system does not support sleep requests with millisecond time resolution
Writes to the BLOB that occurred before the BLOB handle expired are not rolled back by the expiration of the handle||||null
See the checkpointing documentation for addition information||||null
The third argument is one of SQLITE_UTF8_API_constant , SQLITE_UTF16_API_constantBE , or SQLITE_UTF16_API_constantLE , indicating the most desirable form of the collation sequence function required||||null
A call to this routine stores sqlite3_randomness_APIParam_1 bytes of randomness into buffer sqlite3_randomness_APIParam_2||||null
M is the size of the buffer P , which might be larger than N||||null
But the newer and more powerful sqlite3_wal_checkpoint_v2_APIName interface was added||||null
This interface used to be the only way to cause a checkpoint to occur||||null
See the built-in printf_APIName documentation for details||||null
the first argument passed is a copy of the second argument to sqlite3_collation_needed_APIName or sqlite3_collation_needed16_APIName||||When the callback is invoked
The sqlite3_cancel_auto_extension_APIName interface unregisters the initialization routine X that was registered using a prior call to sqlite3_auto_extension_APIName||||null
The strings returned by these two routines should be released by sqlite3_free_APIName||||null
it is passed the names of undefined collation sequences as strings encoded in UTF-8||||If the function is registered using the sqlite3_collation_needed_APIName API
These routines are work-alikes of the "printf_APIName '' family of functions from the standard C library||||null
The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines write their results into memory obtained from sqlite3_malloc64_APIName||||null
These routines understand most of the common formatting options from the standard library printf_APIName plus some additional non-standard formats||||null
The sqlite3_snprintf_APIName routine is similar to "snprintf_APIName '' from the standard C library||||null
Both routines return a NULL pointer if sqlite3_malloc64_APIName is unable to allocate enough memory to hold the resulting string||||null
Note that the order of the first two parameters is reversed from snprintf_APIName||||null
The sqlite3_cancel_auto_extension_APIName routine returns 1 if initialization routine X was successfully unregistered and it returns 0 if X was not on the list of initialization routines||||null
Note also that sqlite3_snprintf_APIName returns a pointer to its buffer instead of the number of characters actually written into the buffer||||null
The result is written into the buffer supplied as sqlite3_snprintf_APIParam_2 whose size is given by sqlite3_snprintf_APIParam_1||||null
SQLite contains a high-quality pseudo-random number generator used to select random ROWIDs||||when inserting new records into a table that already uses the largest possible ROWID
See also||||null
This is an historical accident that can not be fixed without breaking backwards compatibility||||null
built-in printf_APIName , printf_APIName SQL function||||null
the behavior of sqlite3_sleep_APIName may deviate from the description in the previous paragraphs||||If the xSleep_APIName method of the default VFS is not implemented correctly , or not implemented at all
The sqlite3_vsnprintf_APIName routine is a varargs version of sqlite3_snprintf_APIName||||null
So the longest string that can be completely written will be n-1 characters||||null
To avoid having to register all collation sequences before a database can be used , a single callback function may be registered with the database connection to be invoked||||null
Recognized integer codes are of the form SQLITE_STATUS _||||null
As long as the buffer size is greater than zero , sqlite3_snprintf_APIName guarantees that the buffer is always zero-terminated||||null
We admit that the number of characters written would be a more useful return value but we cannot change the implementation of sqlite3_snprintf_APIName now without breaking compatibility||||null
The current value of the parameter be returned by sqlite3_status_APIName into *pCurrent||||null
The first argument is an integer code for the specific parameter to measure||||null
The highest recorded value be returned by sqlite3_status_APIName in *pHighwater||||null
In brief , sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database sqlite3_wal_checkpoint_APIParam_2 on database connection sqlite3_wal_checkpoint_APIParam_1 to be transferred into the database file and for the write-ahead log to be reset||||null
The first parameter `` n '' is the total size of the buffer , including space for the zero terminator||||null
This interface is retained for backwards compatibility and as a convenience for applications that need to manually start a callback but which do not need the full power of sqlite3_wal_checkpoint_v2_APIName||||null
Some parameters do not record the highest value||||null
For those parameters nothing is written into * pHighwater and the sqlite3_status64_APIParam_4 is ignored||||null
These interfaces are used to retrieve runtime status information about the performance of SQLite , and optionally to reset various highwater marks||||null
The sqlite3_status_APIName and sqlite3_status64_APIName routines return SQLITE_OK_API_constant on success and a non-zero error code on failure||||null
For these latter parameters nothing is written into * pCurrent||||null
Other parameters record only the highwater mark and not the current value||||null
See also||||null
the pseudo-randomness is generated internally and without recourse to the sqlite3_vfs xRandomness method||||If the previous call to this routine had an sqlite3_randomness_APIParam_1 of 1 or more and a non-NULL sqlite3_randomness_APIParam_2
The following must be true for sqlite3_snapshot_get_APIName to succeed||||null
the highest record value is reset after * pHighwater is written||||If the sqlite3_status64_APIParam_4 is true
sqlite3_vfs object||||If this routine has not been previously called or if the previous call had sqlite3_randomness_APIParam_1 less than one or a NULL pointer for sqlite3_randomness_APIParam_2 , the PRNG is seeded using randomness obtained from the xRandomness method of the default
sqlite3_snapshot_get_APIName may also return SQLITE_NOMEM_API_constant||||null
If any of the following statements are false when sqlite3_snapshot_get_APIName is called, SQLITE_ERROR_API_constant be returned by sqlite3_snapshot_get_APIName||||null
If either the current value or the highwater mark is too large to be represented by a 32-bit integer, the values returned by sqlite3_status_APIName are undefined||||null
The final value of * P is undefined||||null
The sqlite3_snapshot object returned from a successful call to sqlite3_snapshot_get_APIName must be freed using sqlite3_snapshot_free_APIName to avoid a memory leak||||null
If sqlite3_malloc_APIName is unable to obtain sufficient free memory, sqlite3_malloc_APIName returns a NULL pointer||||null
The SQLite core uses these three routines for all of its own internal memory allocation needs||||null
`` Core '' in the previous sentence does not include operating-system specific VFS implementation||||null
The Windows VFS uses native malloc_APIName and free_APIName for some operations||||null
If the parameter N to sqlite3_malloc_APIName is zero or negative sqlite3_malloc_APIName returns a NULL pointer||||null
one is opened automatically||||If there is not already a read-transaction open on schema sqlite3_snapshot_get_APIParam_2 when sqlite3_snapshot_get_APIName is called
The sqlite3_malloc_APIName routine returns a pointer to a block of memory at least N bytes in length, where N is the parameter||||null
Passing a NULL pointer to sqlite3_free_APIName is harmless||||null
Calling sqlite3_free_APIName with a pointer previously returned by sqlite3_malloc_APIName or sqlite3_realloc_APIName releases that memory so that it might be reused||||null
After being freed , memory should neither be read nor written||||null
The sqlite3_snapshot_get_APIName interface is only available||||when the SQLITE_ENABLE_SNAPSHOT compile-time option is used
The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema sqlite3_snapshot_get_APIParam_2 in database connection D.  On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into *P and returns SQLITE_OK_API_constant||||null
Even reading previously freed memory might result in a segmentation fault or other severe error||||null
If sqlite3_realloc_APIName returns NULL and sqlite3_realloc_APIParam_2 is positive, the prior allocation is not freed||||null
If sqlite3_msize_APIParam_1 is a NULL pointer sqlite3_msize_APIName returns zero||||null
The sqlite3_realloc_APIName interface attempts to resize a prior memory allocation sqlite3_realloc_APIParam_1 to be at least sqlite3_realloc_APIParam_2 bytes||||null
sqlite3_realloc_APIName returns a pointer to a memory allocation of at least sqlite3_realloc_APIParam_2 bytes in size or NULL if insufficient memory is available||||null
The sqlite3_malloc64_APIName routine works just like sqlite3_malloc_APIName except that sqlite3_malloc_APIParam_1 is an unsigned 64-bit integer instead of a signed 32-bit integer||||null
The value returned by sqlite3_msize_APIName might be larger than the number of bytes requested when sqlite3_msize_APIParam_1 was allocated||||null
The sqlite3_free_APIName routine is a no-op||||if is called with a NULL pointer
is undefined||||If it is called with the database handle in autocommit mode but fails for some other reason
That capability is no longer provided||||null
If sqlite3_msize_APIParam_1 is a memory allocation previously obtained from sqlite3_malloc_APIName, sqlite3_malloc64_APIName, sqlite3_realloc_APIName, or sqlite3_realloc64_APIName, sqlite3_msize_APIName returns the size of that memory allocation in bytes||||null
Only built-in memory allocators can be used||||null
If min_APIParam_2 is the size of the prior allocation, min_APIName bytes of the prior allocation are copied into the beginning of buffer returned by sqlite3_realloc_APIName and the prior allocation is freed||||null
The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding||||null
The sqlite3_realloc64_APIName interfaces works the same as sqlite3_realloc_APIName except that sqlite3_realloc_APIParam_2 is a 64-bit unsigned integer instead of a 32-bit signed integer||||null
The value returned by sqlite3_memory_highwater_APIName is the high-water mark prior to the reset||||null
Memory allocation errors were detected , but they were reported back as SQLITE_CANTOPEN_API_constant or SQLITE_IOERR_API_constant rather than SQLITE_NOMEM_API_constant||||null
its behavior is identical to calling sqlite3_malloc_APIName||||If the sqlite3_realloc_APIParam_1 parameter to sqlite3_realloc_APIName is a NULL pointer
In SQLite version 3.5.0 and 3.5.1 , it was possible to define the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in implementation of these routines to be omitted||||null
the behavior is exactly the same as calling sqlite3_free_APIName||||If the sqlite3_realloc_APIParam_2 parameter to sqlite3_realloc_APIName is zero or negative
These functions are used to add SQL functions or aggregates or to redefine the behavior of existing SQL functions or aggregates||||null
The application must not read or write any part of a block of memory after it has been released using sqlite3_free_APIName or sqlite3_realloc_APIName||||null
The first parameter is the database connection to which the SQL function is to be added||||null
The memory returned by sqlite3_malloc_APIName, sqlite3_realloc_APIName, sqlite3_malloc64_APIName, and sqlite3_realloc64_APIName is always aligned to at least an 8 byte boundary, or to a 4 byte boundary if the SQLITE_4_BYTE_ALIGNED_MALLOC compile-time option is used||||null
The second parameter is the name of the SQL function to be created or redefined||||null
The values returned by sqlite3_memory_used_APIName and sqlite3_memory_highwater_APIName include any overhead added by SQLite in its implementation of sqlite3_malloc_APIName, but not overhead added by the any underlying system library routines that sqlite3_malloc_APIName may call||||null
Any attempt to create a function with a longer name will result in SQLITE_MISUSE_API_constant being returned||||null
Memory corruption , a segmentation fault , or other severe error might result||||if sqlite3_free_APIName is called with a non-NULL pointer that was not obtained from sqlite3_malloc_APIName or sqlite3_realloc_APIName
Function sqlite3_create_window_function_APIName is similar , but allows the user to supply the extra callback functions needed by aggregate window functions||||null
The pointer arguments to sqlite3_free_APIName and sqlite3_realloc_APIName must be either NULL or else pointers obtained from a prior invocation of sqlite3_malloc_APIName or sqlite3_realloc_APIName that have not yet been released||||null
The third parameter is the number of arguments that the SQL function or aggregate takes||||null
SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName , sqlite3_free_APIName , and sqlite3_realloc_APIName routines , which form the built-in memory allocation subsystem||||null
Note that the name length limit is in UTF-8 bytes , not characters nor UTF-16 bytes||||null
The length of the name is limited to 255 bytes in a UTF-8 representation , exclusive of the zero-terminator||||null
The memory high-water mark is reset to the current value of sqlite3_memory_used_APIName if the parameter to sqlite3_memory_highwater_APIName is true||||if and only
Most SQL functions are deterministic||||null
The fourth parameter , eTextRep , specifies what text encoding this SQL function prefers for its parameters||||null
The fifth parameter is an arbitrary pointer||||null
The built-in random_APIName SQL function is an example of a function that is not deterministic||||null
application-defined SQL functions must be added to each database connection separately||||If an application uses more than one database connection
The fourth parameter may optionally be ORed with SQLITE_DETERMINISTIC_API_constant to signal that the function will always return the same result given the same inputs within a single SQL statement||||null
The same SQL function may be registered multiple times using different preferred text encodings , with different implementations for each encoding||||null
The implementation of the function can gain access to this pointer using sqlite3_user_data_APIName||||null
The only differences between the three `` sqlite3_create_function * '' routines are the text encoding expected for the second parameter and the presence or absence of a destructor callback for the application data pointer||||null
For security reasons , the SQLITE_DIRECTONLY_API_constant flag is recommended for any application-defined SQL function that has side-effects||||null
xStep and xFinal must both be non-NULL||||null
the behavior is undefined||||If the third parameter is less than -1 or greater than 127
To delete an existing SQL function or aggregate , pass NULL pointers for all three function callbacks||||null
A scalar SQL function requires an implementation of the xFunc callback only||||null
More details regarding the implementation of aggregate window functions are available here||||null
The SQLite query planner is able to perform additional optimizations on deterministic functions , so use of the SQLITE_DETERMINISTIC_API_constant flag is recommended where possible||||null
An aggregate SQL function requires an implementation of xStep and xFinal and NULL pointer must be passed for xFunc||||null
NULL pointers must be passed as the xStep and xFinal parameters||||null
The sixth , seventh , eighth and ninth parameters passed to sqlite3_create_window_function are pointers to C-language callbacks that implement the new function||||null
SQLite will pick the one that involves the least amount of data conversion||||When multiple implementations of the same function are available
the SQL function or aggregate may take any number of arguments between 0 and the limit set by sqlite3_limit_APIName||||If this parameter is -1
Built-in functions may be overloaded by new application-defined functions||||null
An application-defined function is permitted to call other SQLite interfaces||||null
SQLite will use the implementation that most closely matches the way in which the SQL function is used||||null
the behavior of sqlite3_msize_APIName is undefined and possibly harmful||||If sqlite3_msize_APIParam_1 points to something that is not the beginning of memory allocation , or if it points to a formerly valid memory allocation that has now been freed
The destructor is also invoked||||if the call to sqlite3_create_function_v2_APIName fails
Prior to SQLite version 3.7.10 , the Windows OS interface layer called the system malloc_APIName and free_APIName directly and||||when converting filenames between the UTF-8 encoding used by SQLite
The fourth parameter may also optionally include the SQLITE_DIRECTONLY_API_constant flag||||which if present prevents the function from being invoked from within VIEWs or TRIGGERs
A function implementation with a non-negative nArg parameter is a better match than a function implementation with a negative nArg||||null
These functions may be used by SQL functions to associate metadata with argument values||||null
An example of where this might be useful is in a regular-expression matching function||||null
A function where the preferred text encoding matches the database encoding is a better match than a function where the encoding is different||||null
The destructor is invoked or||||when the function is deleted , either by being overloaded
The sqlite3_get_auxdata_APIName interface returns a pointer to the metadata associated by the sqlite3_set_auxdata_APIName function with the Nth argument value to the application-defined function||||null
The sixth , seventh and eighth parameters passed to the three `` sqlite3_create_function * '' functions , xFunc , xStep and xFinal , are pointers to C-language functions that implement the SQL function or aggregate||||null
N is zero for the left-most function argument||||null
It is permitted to register multiple implementations of the same functions with the same name but with either differing numbers of arguments or differing preferred text encodings||||null
it is destructor for the application data pointer||||If the final parameter to sqlite3_create_function_v2_APIName or sqlite3_create_window_function_APIName is not NULL
If there is no metadata associated with the function argument, the sqlite3_get_auxdata_APIName interface returns a NULL pointer||||null
However , such calls must not close the database connection nor finalize or reset the prepared statement in which the function is running||||null
The compiled version of the regular expression can be stored as metadata associated with the pattern string||||null
Note the last bullet||||null
A function where the encoding difference is between UTF16le and UTF16be is a closer match than a function where the encoding difference is between UTF8 and UTF16||||null
Subsequent calls to sqlite3_get_auxdata_APIName return sqlite3_set_auxdata_APIParam_3 from the most recent sqlite3_set_auxdata_APIName call if the metadata is still valid or NULL if the metadata has been discarded||||null
The sqlite3_set_auxdata_APIName interface saves P as metadata for the N-th argument of the application-defined function||||null
SQLite is free to discard the metadata at any time , including||||null
as long as the pattern string remains the same , the compiled regular expression can be reused on multiple invocations of the same function||||null
it is passed a single argument which is a copy of the application data pointer which was the fifth parameter to sqlite3_create_function_v2_APIName||||When the destructor callback is invoked
under some circumstances the associated metadata may be preserved||||If the same value is passed to multiple invocations of the same SQL function during query execution
xValue and xInverse may either both be NULL , in which case a regular aggregate function is created , or must both be non-NULL , in which case the new function may be used as either an aggregate or aggregate window function||||null
The destructor X in sqlite3_set_auxdata_APIName might be called immediately, before the sqlite3_set_auxdata_APIName interface even returns||||null
The value of the sqlite3_get_auxdata_APIParam_2 parameter to these interfaces should be non-negative||||null
These routines are deprecated||||null
These routines must be called from the same thread in which the SQL function is running||||null
Use the sqlite3_trace_v2_APIName interface instead of the routines described here||||null
The number of subtype bytes preserved by SQLite might increase in future releases of SQLite||||null
Future enhancements may make use of negative N values to define new kinds of function caching behavior||||null
Additional sqlite3_trace_APIName callbacks might occur as each triggered subprogram is entered||||null
These routines register callback functions that can be used for tracing and profiling the execution of SQL statements||||null
The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger||||null
The callback function registered by sqlite3_profile_APIName is invoked as each SQL statement finishes||||null
In practice , metadata is preserved between function calls for function parameters that are compile-time constants , including literal values and parameters and expressions composed from the same||||null
The sqlite3_trace_APIName callback is invoked with a UTF-8 rendering of the SQL statement text as the statement first begins executing||||null
Future versions of SQLite might provide greater resolution on the profiler callback||||null
Invoking either sqlite3_trace_APIName or sqlite3_trace_v2_APIName will cancel the profile callback||||null
The error-code preserving interfaces are||||null
The values returned by sqlite3_errcode_APIName and/or sqlite3_extended_errcode_APIName might change with each API call||||null
The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option can be used to limit the length of bound parameter expansion in the output of sqlite3_trace_APIName||||null
Hence sqlite3_set_auxdata_APIName should be called near the end of the function implementation and the function implementation should not make any use of P after sqlite3_set_auxdata_APIName has been called||||null
After each call to sqlite3_set_auxdata_APIName where X is not NULL , SQLite will invoke the destructor function X with parameter P exactly once||||when the metadata is discarded
The sqlite3_errmsg_APIName and sqlite3_errmsg16_APIName return English-language text that describes the error, as either UTF-8 or UTF-16 respectively||||null
Memory to hold the error message string is managed internally||||null
The sqlite3_extended_errcode_APIName interface is the same except that it always returns the extended result code even when extended result codes are disabled||||null
The callback function registered by sqlite3_trace_APIName is invoked at various times||||when an SQL statement is being run by sqlite3_step_APIName
Except , there are some interfaces that are guaranteed to never change the value of the error code||||null
The sqlite3_errstr_APIName interface returns the English-language text that describes the result code, as UTF-8||||null
The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context sqlite3_result_subtype_APIParam_1 to be the value sqlite3_result_subtype_APIParam_2||||null
The application does not need to worry about freeing the result||||null
higher order bits are discarded||||null
The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run||||null
If the most recent sqlite3_* API call associated with database connection sqlite3_errcode_APIParam_1 failed, the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call||||null
Memory to hold the error message string is managed internally and must not be freed by the application||||null
However , the error string might be overwritten or deallocated by subsequent calls to other SQLite interface functions||||null
The sqlite3_keyword_count_APIName interface returns the number of distinct keywords understood by SQLite||||null
The sqlite3_keyword_name_APIName routine returns SQLITE_OK_API_constant if sqlite3_keyword_name_APIParam_1 is within bounds and SQLITE_ERROR_API_constant if not||||null
In that case , the error code and message may or may not be set||||null
These routines provide access to the set of SQL language keywords recognized by SQLite||||null
The parser used by SQLite is forgiving||||null
Applications can uses these routines to determine||||null
Common techniques used to avoid keyword name collisions include||||null
Nevertheless , best practice is to avoid using keywords as identifiers||||null
the second error will be reported||||When that happens
The profile callback time is in units of nanoseconds , however the current implementation is only capable of millisecond resolution so the six least significant digits in the time are meaningless||||null
that means the interface was invoked incorrectly by the application||||If an interface fails with SQLITE_MISUSE_API_constant
Also , new keywords may be added to future releases of SQLite||||null
Note that the number of keywords understood by SQLite can depend on compile-time options||||null
The sqlite3_keyword_check_APIName interface checks to see||||null
the statement `` CREATE TABLE BEGIN_APIName||||null
The sqlite3_snapshot_cmp interface is used to compare the ages of two valid snapshot handles||||null
It is often possible to use a keyword as an identifier as long as such use does not result in a parsing ambiguity||||null
If either snapshot handle was obtained before the wal file was last deleted, the value returned by sqlite3_snapshot_cmp_APIName is undefined||||null
This is a legacy interface that is preserved for backwards compatibility||||null
pointers calls to sqlite3_keyword_name_APIName result in undefined behavior||||If either Z or sqlite3_keyword_name_APIParam_3 are NULL or invalid
Use of this interface is not recommended||||null
The sqlite3_keyword_name_APIName interface finds the N-th keyword and makes * Z point to that keyword expressed as UTF8 and writes the number of bytes in the keyword into * L||||null
A result table is memory data structure created by the sqlite3_get_table_APIName interface||||null
A result table records the complete query results from one or more queries||||null
The table conceptually has a number of rows and columns||||null
These numbers are obtained separately||||null
But these numbers are not part of the result table itself||||null
There are * M elements in the array||||null
`` VACUUM '' is not a keyword||||if SQLite is compiled with the - DSQLITE_OMIT_VACUUM option
Let N be the number of rows and M be the number of columns||||null
NULL values sqlite3_free_table_APIParam_1 in NULL pointers||||null
A result table is an array of pointers to zero-terminated UTF-8 strings||||null
This interface is only available||||if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option
All other values are in their UTF-8 zero-terminated string representation as returned by sqlite3_column_text_APIName||||null
The remaining entries all point to query results||||null
the result of the comparison is undefined||||If the two snapshot handles are not associated with the same database file
The first M pointers point to zero-terminated strings that contain the names of the columns||||null
A sqlite3_free_table_APIParam_1 table should be deallocated using sqlite3_free_table_APIName||||null
A sqlite3_free_table_APIParam_1 table might consist of one or more memory allocations||||null
The wal file is deleted or||||when the database is changed back to rollback mode
There are two column and three rows||||null
The sqlite3_db_readonly_APIName interface returns 1 if the database sqlite3_db_readonly_APIParam_2 of connection sqlite3_db_readonly_APIParam_1 is read-only, 0 if it is read/write, or -1 if sqlite3_db_readonly_APIParam_2 is not the name of a database on connection sqlite3_db_readonly_APIParam_1||||null
It is not safe to pass a sqlite3_free_table_APIParam_1 table directly to sqlite3_free_APIName||||null
it might be the case that a second error occurs on a separate thread in between the time of the first error and the call to these interfaces||||When the serialized threading mode is in use
Thus the result table has 8 entries||||null
azResult holds this content||||null
As an example of the result table format , suppose a query result is as follows||||null
Otherwise, this API returns a negative value if P1 refers to an older snapshot than P2, zero if the two handles refer to the same database snapshot, and a positive value if P1 is a newer snapshot than P2||||null
Suppose the sqlite3_free_table_APIParam_1 table is stored in an array names azResult||||null
Only sqlite3_free_table_APIName is able to release the memory properly and safely||||null
The sqlite3_get_table_APIName interface is implemented as a wrapper around sqlite3_exec_APIName||||null
It uses only the public interface defined here||||null
These routines return the name assigned to a particular column in the result set of a SELECT statement||||null
The second parameter is the column number||||null
the calling function must not try to call sqlite3_free_APIName directly||||null
The sqlite3_get_table_APIName function evaluates one or more semicolon-separated SQL statements in the zero-terminated UTF-8 string of its 2_APIConstant parameter and returns a result table to the pointer given in its 3_APIConstant parameter||||null
The leftmost column is number 0||||null
The sqlite3_get_table_APIName routine does not have access to any internal data structures of SQLite||||null
The sqlite3_column_name_APIName interface returns a pointer to a zero-terminated UTF-8 string and sqlite3_column_name16_APIName returns a pointer to a zero-terminated UTF-16 string||||null
The first parameter is the prepared statement that implements the SELECT statement||||null
If sqlite3_malloc_APIName fails during the processing of either routine  a NULL pointer be returned by sqlite3_column_name_APIName||||null
Otherwise, if no error occurs, sqlite3_db_cacheflush_APIName returns SQLITE_OK_API_constant||||null
After the application has finished with the result from sqlite3_get_table_APIName , it must pass the result table pointer to sqlite3_free_table_APIName||||null
The sqlite3_db_cacheflush_APIName interface flushes caches for all schemas - `` main '' , `` temp '' , and any attached databases||||null
As a consequence , errors that occur in the wrapper layer outside of the internal sqlite3_exec_APIName call are not reflected in subsequent calls to sqlite3_errcode_APIName or sqlite3_errmsg_APIName||||null
it does so||||If sqlite3_db_cacheflush_APIName needs to obtain extra database locks before dirty pages can be flushed to disk
The name of a result column is the value of the `` AS '' clause for that column||||if there is an AS clause
the name of the column is unspecified and may change from one release of SQLite to the next||||If there is no AS clause
'' is accepted by SQLite , and creates a new table named `` BEGIN '' with three columns named `` REPLACE '' , `` PRAGMA '' , and `` END ''||||null
Use this routine to reset all host parameters to NULL||||null
See also||||null
sqlite3_db_cacheflush_APIName does not set the database handle error code or message returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions||||null
Zero all sqlite3_stmt_scanstatus_APIName related event counters||||null
If any other error occurs while flushing dirty pages to disk , processing is abandoned and an SQLite error code be returned by sqlite3_db_cacheflush_APIName to the caller immediately||||null
This interface loads an SQLite extension library from the named file||||null
Contrary to the intuition of many , sqlite3_reset_APIName does not reset the bindings on a prepared statement||||null
The entry point is sqlite3_load_extension_APIParam_3||||null
It first tries `` sqlite3_extension_init ''||||null
The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2||||null
omitting any initial `` lib ''||||null
The sqlite3_load_extension_APIName interface returns SQLITE_OK_API_constant on success and SQLITE_ERROR_API_constant if something goes wrong||||null
it is invoked in the usual manner||||If those locks can not be obtained immediately and there is a busy-handler callback configured
Security warning||||null
The calling function should free this memory by calling sqlite3_free_APIName||||null
zProc may be 0 , in which case SQLite will try to come up with an entry point name on its own||||null
See also the load_extension_APIName SQL function||||null
It is recommended that the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method be used to enable only this interface||||null
This API is only available||||if the library is built with pre-processor symbol SQLITE_ENABLE_STMT_SCANSTATUS defined
The use of the sqlite3_enable_load_extension_APIName interface should be avoided||||null
or if it is page 1 of a database file||||if a database cursor created by an active SQL statement is reading from it
A dirty page may be in use||||null
These routines work only with protected sqlite3_value objects||||null
any dirty pages in the pager-cache that are not currently in use are written out to disk||||If a write-transaction is open on database connection sqlite3_db_cacheflush_APIParam_1 when the sqlite3_db_cacheflush_APIName interface invoked
the database is skipped and an attempt made to flush any dirty pages belonging to the next database||||If the required lock still can not be obtained
These routines extract type , size , and content information from protected sqlite3_value objects||||null
Any attempt to use these routines on an unprotected sqlite3_value is not threadsafe||||null
This will keep the SQL function load_extension_APIName disabled and prevent SQL injections from giving attackers access to extension loading capabilities||||null
attempts are made to load with various operating-system specific extensions added||||If the file can not be loaded directly
Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables||||null
The sqlite3_value_text16_APIName interface extracts a UTF-16 string in the native byte-order of the host machine||||null
Other interfaces might change the datatype for an sqlite3_value object||||null
The sqlite3_value_text16be_APIName and sqlite3_value_text16le_APIName interfaces extract UTF-16 strings as big-endian and little-endian respectively||||null
The sqlite3_bind_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0||||null
Otherwise no conversion occurs||||null
The sqlite3_value_numeric_type_APIName interface attempts to apply numeric affinity to the value||||null
The datatype after conversion be returned by sqlite3_value_numeric_type_APIName||||null
The sqlite3_value_type_APIName interface returns the datatype code for the initial datatype of the sqlite3_value object V. sqlite3_value_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant||||null
This means that an attempt is made to convert the value to an integer or floating point||||null
if the datatype is initially SQLITE_INTEGER_API_constant and sqlite3_value_text_APIName is called to extract a text value for that integer, subsequent calls to sqlite3_value_type_APIName might return SQLITE_TEXT_API_constant||||null
is undefined and may change from one release of SQLite to the next||||null
The sqlite3_value_frombind_APIName interface returns non-zero if the value sqlite3_value_frombind_APIParam_1 originated from one of the sqlite3_bind_APIName interfaces||||null
If sqlite3_value object sqlite3_value_pointer_APIParam_1 was initialized using sqlite3_bind_pointer_APIName or sqlite3_result_pointer_APIName and if strcmp_APIParam_1 and sqlite3_value_pointer_APIParam_2 are strings that compare equal according to strcmp_APIName, sqlite3_value_pointer_APIName will return the pointer P.  Otherwise, sqlite3_value_pointer_APIName returns a NULL||||null
If sqlite3_value_nochange_APIName is invoked anywhere other than within an xUpdate method call for an UPDATE statement, the return value is arbitrary and meaningless||||null
Within an xUpdate method , any value appear to be a NULL value||||null
Only the following subset of interfaces are subject to out-of-memory errors||||null
If sqlite3_value_frombind_APIParam_1 comes from an SQL literal value, or a table column, and expression, sqlite3_value_frombind_APIName returns zero||||null
the sqlite3_load_extension_APIName interface shall attempt to fill * pzErrMsg with error message text stored in memory obtained from sqlite3_malloc_APIName||||If an error occurs and sqlite3_load_extension_APIParam_4 is not 0
The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D. Unlike the sqlite3_release_memory_APIName interface , this interface is in effect||||even when the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is omitted
These routines work just like the corresponding column access functions except that these routines take a single protected sqlite3_value object pointer instead of a sqlite3_stmt * pointer and an integer column number||||null
The SQLite core uses these routines for thread synchronization||||null
The sqlite3_str_finish_APIName interface may return a NULL pointer if any errors were encountered during construction of the string||||null
sqlite3_column_name_APIParam_0 pointer is valid until either the prepared statement is destroyed by sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the next call to sqlite3_column_name_APIName or sqlite3_column_name16_APIName on the same column||||null
the conversion is performed||||If such a conversion is possible without loss of information
These routines must be called from the same thread as the SQL function that supplied the sqlite3_value * parameters||||null
If an out-of-memory error occurs, the return value from these routines is the same as if the column had contained an SQL NULL value||||null
The calling application should pass sqlite3_str_finish_APIParam_0 value to sqlite3_free_APIName to avoid a memory leak||||null
The sqlite3_str_finish_APIName interface will also return a NULL pointer if the string in sqlite3_str object sqlite3_str_finish_APIParam_1 is zero bytes long||||null
The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string||||null
The SQLite source code contains multiple implementations of these mutex routines||||null
An appropriate implementation is selected automatically at compile-time||||null
it constructs a name `` sqlite3_X_init '' where the X is consists of the lower-case equivalent of all ASCII alphabetic characters in the filename from the last '' / '' to the first following '' . ''||||If that does not work
Please pay particular attention to the fact that the pointer returned from sqlite3_value_blob_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName can be invalidated by a subsequent call to sqlite3_value_bytes_APIName, sqlite3_value_bytes16_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName||||null
The following implementations are available in the SQLite core||||null
Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection||||null
The sqlite3_mutex_alloc_APIName routine allocates a new mutex and returns a pointer to it||||null
code that links against SQLite is permitted to use any of these routines||||null
The SQLITE_MUTEX_PTHREADS and SQLITE_MUTEX_W32 implementations are appropriate for use on Unix and Windows||||null
The sqlite3_mutex_alloc_APIName routine returns NULL if it is unable to allocate the requested mutex||||null
The argument to sqlite3_mutex_alloc_APIName must one of these integer constants||||null
The first two constants cause sqlite3_mutex_alloc_APIName to create a new mutex||||null
As long as the input parameter is correct , these routines can only fail||||if an out-of-memory error occurs during a format conversion
The SQLITE_MUTEX_NOOP implementation is a set of routines that does no real locking and is appropriate for use in a single-threaded application||||null
The other allowed parameters to sqlite3_mutex_alloc_APIName  each return a pointer to a static preexisting mutex||||null
SQLite will only request a recursive mutex in cases where it really needs one||||null
Nine static mutexes are used by the current version of SQLite||||null
Future versions of SQLite may add additional static mutexes||||null
If a faster non-recursive mutex implementation is available on the host platform, the mutex subsystem might return such a mutex in response to SQLITE_MUTEX_FAST_API_constant||||null
Static mutexes are for internal use by SQLite only||||null
Applications that use SQLite mutexes should use only the dynamic mutexes returned by SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant||||null
The sqlite3_mutex_free_APIName routine deallocates a previously allocated dynamic mutex||||null
Note that if one of the dynamic mutex parameters  is used sqlite3_mutex_alloc_APIName returns a different mutex on every call||||null
The sqlite3_mutex_try_APIName interface returns SQLITE_OK_API_constant upon successful entry||||null
Attempting to deallocate a static mutex results in undefined behavior||||null
The sqlite3_mutex_enter_APIName and sqlite3_mutex_try_APIName routines attempt to enter a mutex||||null
For the static mutex types, the same mutex be returned by sqlite3_mutex_alloc_APIName on every call that has the same type number||||null
no mutex implementation is included with the library||||If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined
The new mutex is recursive||||when SQLITE_MUTEX_RECURSIVE_API_constant is used but not necessarily so when SQLITE_MUTEX_FAST_API_constant is used
If another thread is already within the mutex, sqlite3_mutex_enter_APIName will block and sqlite3_mutex_try_APIName will return SQLITE_BUSY_API_constant||||null
Within the xUpdate method of a virtual table, the sqlite3_value_nochange_APIName interface returns true if and only if the column corresponding to sqlite3_value_nochange_APIParam_1 is unchanged by the UPDATE operation that the xUpdate method call was invoked to implement and if and the prior xColumn method call that was invoked to extracted the value for that column returned without setting a result||||null
The mutex implementation does not need to make a distinction between SQLITE_MUTEX_RECURSIVE_API_constant and SQLITE_MUTEX_FAST_API_constant||||if it does not want to
On those systems, sqlite3_mutex_try_APIName will always return SQLITE_BUSY_API_constant||||null
Mutexes created using SQLITE_MUTEX_RECURSIVE_API_constant can be entered multiple times by the same thread||||null
Some systems do not support the operation implemented by sqlite3_mutex_try_APIName||||null
the application must supply a custom mutex implementation using the SQLITE_CONFIG_MUTEX_API_constant option of the sqlite3_config_APIName function before calling sqlite3_initialize_APIName or any other public sqlite3 _ function that calls sqlite3_initialize_APIName||||null
See also||||null
sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName||||null
The sqlite3_mutex_leave_APIName routine exits a mutex that was previously entered by the same thread||||null
The SQLite core only ever uses sqlite3_mutex_try_APIName as an optimization so this is acceptable behavior||||null
the mutex must be exited an equal number of times before another thread can enter||||null
the behavior is undefined||||If the same thread tries to enter any mutex other than an SQLITE_MUTEX_RECURSIVE_API_constant more than once
The behavior is undefined||||if the mutex is not currently entered by the calling thread or is not currently allocated
The 4_APIConstant argument to sqlite3_exec_APIName is relayed through to the 1_APIConstant argument of each callback invocation||||null
The 2_APIConstant argument to the sqlite3_exec_APIName callback function is the number of columns in the result||||null
If an sqlite3_exec_APIName callback returns non-zero, the sqlite3_exec_APIName routine returns SQLITE_ABORT_API_constant without invoking the callback again and without running any subsequent SQL statements||||null
Only the row can be changed||||null
If the 5_APIConstant parameter to sqlite3_exec_APIName is not NULL and no errors occur, sqlite3_exec_APIName sets the pointer in its 5_APIConstant parameter to NULL before returning||||null
To avoid memory leaks, the application should invoke sqlite3_free_APIName on error message strings returned through the 5_APIConstant parameter of sqlite3_exec_APIName after the error message string is no longer needed||||null
The new row is identified by the rowid value passed as sqlite3_blob_reopen_APIParam_2||||null
no callback is ever invoked and result rows are ignored||||If the callback pointer to sqlite3_exec_APIName is NULL
all three routines behave as no-ops||||If the argument to sqlite3_mutex_enter_APIName , sqlite3_mutex_try_APIName , or sqlite3_mutex_leave_APIName is a NULL pointer
Calling sqlite3_blob_bytes_APIName on an aborted blob handle always returns zero||||null
sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table||||null
The sqlite3_exec_APIName interface runs zero or more UTF-8 encoded , semicolon-separate SQL statements passed into its 2_APIConstant argument , in the context of the database connection passed in as its 1_APIConstant argument||||null
The database , table and column on which the blob handle is open remain the same||||null
All subsequent calls to sqlite3_blob_read_APIName, sqlite3_blob_write_APIName or sqlite3_blob_reopen_APIName on an aborted blob handle immediately return SQLITE_ABORT_API_constant||||null
sqlite3_blob_reopen_APIName sets the database handle error code and message||||null
The sqlite3_exec_APIName interface is a convenience wrapper around sqlite3_prepare_v2_APIName , sqlite3_step_APIName , and sqlite3_finalize_APIName , that allows an application to run multiple statements of SQL without having to use a lot of C code||||null
execution of the current statement stops||||If an error occurs while evaluating the SQL statements passed into sqlite3_exec_APIName
and subsequent statements are skipped||||null
The following interfaces are provided||||null
Moving an existing BLOB handle to a new row is faster than closing the existing handle and opening a new one||||null
New VFSes can be registered and existing VFSes can be unregistered||||null
Names are case sensitive||||null
any error message is written into memory obtained from sqlite3_malloc_APIName and passed back through the 5_APIConstant parameter||||If the 5_APIConstant parameter to sqlite3_exec_APIName is not NULL
Names are zero-terminated UTF-8 strings||||null
The sqlite3_vfs_find_APIName interface returns a pointer to a VFS given its name||||null
it is invoked for each result row coming out of the evaluated SQL statements||||If the callback function of the 3_APIConstant argument to sqlite3_exec_APIName is not NULL
If there is no match, a NULL pointer be returned by sqlite3_vfs_find_APIName||||null
A virtual filesystem is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system||||null
Most SQLite builds come with a single default VFS that is appropriate for the host computer||||null
If sqlite3_vfs_find_APIParam_1 is NULL the default VFS be returned by sqlite3_vfs_find_APIName||||null
New VFSes are registered with sqlite3_vfs_register_APIName||||null
the corresponding string pointer for the sqlite3_exec_APIName callback is a NULL pointer||||If an element of a result row is NULL
The 4_APIConstant argument to the sqlite3_exec_APIName callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from sqlite3_column_name_APIName||||null
The same VFS can be registered multiple times without injury||||null
The 3_APIConstant argument to the sqlite3_exec_APIName callback is an array of pointers to strings obtained from sqlite3_column_text_APIName , one for each column||||as if
Unregister a VFS with the sqlite3_vfs_unregister_APIName interface||||null
The choice for the new VFS is arbitrary||||null
The new row must meet the same criteria as for sqlite3_blob_open_APIName - it must exist and there must be either a blob or text value stored in the nominated column||||null
To make an existing VFS into the default VFS , register it again with the sqlite3_vfs_register_APIParam_2 flag set||||null
The sqlite3_db_status_APIName routine returns SQLITE_OK_API_constant on success and a non-zero error code on failure||||null
See also||||null
The first argument is the database connection object to be interrogated||||null
sqlite3_status_APIName and sqlite3_stmt_status_APIName||||null
This interface is used to retrieve runtime status information about a single database connection||||null
The set of SQLITE_DBSTATUS options is likely to grow in future releases of SQLite||||null
Each new VFS becomes the default VFS||||if the sqlite3_vfs_register_APIParam_2 flag is set
the behavior is undefined||||If two different VFSes with the same name are registered
These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName||||null
S must contain at least sqlite3_str_append_APIParam_3 non-zero bytes of content||||null
If the new row is not present in the table, or if it does not contain a blob or text value, or if another error occurs, an SQLite error code be returned by sqlite3_blob_reopen_APIName and the blob handle is considered aborted||||null
The second argument is an integer constant , taken from the set of SQLITE_DBSTATUS options , that determines the parameter to interrogate||||null
another VFS is chosen as the default||||If the default VFS is unregistered
These methods do not return a result code||||null
The current value of the requested parameter is written into * pCur and the highest instantaneous value is written into * pHiwtr||||null
To append a zero-terminated string in its entirety , use the sqlite3_str_appendall_APIName method instead||||null
the behavior is undefined||||If a VFS is registered with a name that is NULL or an empty string
This routine actually returns the index of the largest  parameter||||null
The sqlite3_str_appendf and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X||||null
The sqlite3_str_appendall_APIName method appends the complete content of zero-terminated string sqlite3_str_appendall_APIParam_2 onto the end of sqlite3_str object X||||null
SQL parameters are tokens of the form '' ?||||null
The sqlite3_str_appendchar_APIName method appends sqlite3_str_append_APIParam_3 copies of the single-byte character sqlite3_str_appendchar_APIParam_3 onto the end of sqlite3_str object X||||null
the highest instantaneous value is reset back down to the current value||||If the sqlite3_db_status_APIParam_5 is true
For all forms except ?||||null
This routine can be used to find the number of SQL parameters in a prepared statement||||null
The sqlite3_str_reset_APIName method resets the string under construction inside sqlite3_str object sqlite3_str_reset_APIParam_1 back to zero bytes in length||||null
See also||||null
The sqlite3_str_append_APIName method appends exactly sqlite3_str_append_APIParam_3 bytes from string S onto the end of the sqlite3_str object X. sqlite3_str_append_APIParam_3 must be non-negative||||null
sqlite3_bind_APIName , sqlite3_bind_parameter_name_APIName , and sqlite3_bind_parameter_index_APIName||||null
Callback implementations should return zero to ensure future compatibility||||null
The M argument should be the bitwise OR-ed combination of zero or more SQLITE_TRACE_API_constant constants||||null
The integer return value from the callback is currently ignored||||null
Each call to either sqlite3_trace_APIName or sqlite3_trace_v2_APIName overrides any prior calls to sqlite3_trace_APIName or sqlite3_trace_v2_APIName||||null
A trace callback is invoked with four arguments||||null
The C argument is a copy of the context pointer||||null
The return value is OS-dependent||||null
Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file||||null
?||||If parameters of the
The T argument is one of the SQLITE_TRACE_API_constant constants to indicate why the callback was invoked||||null
The P and X arguments are pointers whose meanings depend on T||||null
The return value of the xFileControl method becomes the return value of this routine||||null
that fact is recorded in the sqlite3_str object and can be recovered by a subsequent call to sqlite3_str_errcode_APIName||||If an error occurs
no SQL statements are evaluated and the database is not changed||||If the 2_APIConstant parameter to sqlite3_exec_APIName is a NULL pointer , a pointer to an empty string , or a pointer that contains only whitespace and/or SQL comments
The sqlite3_trace_v2_APIName interface is intended to replace the legacy interfaces sqlite3_trace_APIName and sqlite3_profile_APIName , both of which are deprecated||||null
A NULL pointer can be used in place of `` main '' to refer to the main database file||||null
The X callback is invoked||||whenever any of the events identified by mask M occur
on unix systems, after sqlite3_open_v2_APIName returns SQLITE_CANTOPEN_API_constant, this interface could be called to get back the underlying "errno" that caused the problem, such as ENOSPC, EAUTH, EISDIR, and so forth||||null
The SQLITE_FCNTL_DATA_VERSION_API_constant returns the data version counter from the pager||||null
A few opcodes for sqlite3_file_control_APIName are handled directly by the SQLite core and never invoke the sqlite3_io_methods||||null
The SQLITE_FCNTL_VFS_POINTER_API_constant opcode returns a pointer to the underlying sqlite3_vfs object for the file||||null
The underlying xFileControl method might also return SQLITE_ERROR_API_constant||||null
'' , '' ?||||null
The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2||||null
The sqlite3_trace_v2_APIName interface registers a trace callback function X against database connection D , using property mask M and context pointer P||||null
The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method||||null
The SQLITE_FCNTL_JOURNAL_POINTER_API_constant works similarly except that sqlite3_file_control_APIName returns the sqlite3_file object associated with the journal file instead of the main database||||null
See also||||null
If sqlite3_file_control_APIParam_2  does not match the name of any open database file, SQLITE_ERROR_API_constant be returned by sqlite3_file_control_APIName||||null
file control opcodes||||null
There is no way to distinguish between an incorrect sqlite3_file_control_APIParam_2 and an SQLITE_ERROR_API_constant return from the underlying xFileControl method||||null
The sqlite3_snapshot_open_APIName interface returns SQLITE_OK_API_constant on success or an appropriate error code if it fails||||null
This error code is not remembered and will not be recalled by sqlite3_errcode_APIName or sqlite3_errmsg_APIName||||null
The SQLITE_FCNTL_FILE_POINTER_API_constant value for the sqlite3_file_control_APIParam_3 parameter causes a pointer to the underlying sqlite3_file object to be written into the space pointed to by the 4_APIConstant parameter||||null
the database connection must not be in autocommit mode||||when sqlite3_snapshot_open_APIName is called
||||null
The name of the database is `` main '' for the main database or `` temp '' for the TEMP database , or the name that appears after the AS keyword for databases that are added using the ATTACH SQL command||||null
AAA '' , `` $ AAA '' , or '' @AAA '' that serve as placeholders for values that are bound to the parameters at a later time||||null
SQLITE_ERROR_API_constant_SNAPSHOT be returned by sqlite3_snapshot_open_APIName||||null
If SQLITE_OK_API_constant be returned by sqlite3_snapshot_open_APIName, the read transaction is now open on database snapshot P||||null
sqlite3_blob_close_APIName closes an open BLOB handle||||null
SQLITE_ERROR_API_constant be returned by sqlite3_snapshot_open_APIName if either of these conditions is violated, or if schema sqlite3_snapshot_open_APIParam_2 does not exist, or if the snapshot object is invalid||||null
The BLOB handle is closed unconditionally||||null
is still closed||||null
If there is already a read transaction open when sqlite3_snapshot_open_APIName is invoked, the same read transaction remains open  if SQLITE_ERROR_API_constant, SQLITE_BUSY_API_constant or SQLITE_ERROR_API_constant_SNAPSHOT be returned by sqlite3_snapshot_open_APIName||||null
If an error occurs while committing the transaction, an error code be returned by sqlite3_blob_close_APIName and the transaction rolled back||||null
Calling this routine with a null pointer is a harmless no-op||||null
In that case, sqlite3_value_nochange_APIName will return true for the same column in the xUpdate method||||null
Otherwise, if sqlite3_blob_close_APIName is passed a valid open blob handle, the values returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions are set before returning||||null
The sqlite3_finalize_APIName function is called to delete a prepared statement||||null
A call to sqlite3_snapshot_open_APIName will fail to open||||if the specified snapshot has been overwritten by a checkpoint
The sqlite3_finalize_APIName routine can be called before statement sqlite3_finalize_APIParam_1 is ever evaluated||||null
Calling sqlite3_blob_close_APIName with an argument that is not a NULL pointer or an open blob handle results in undefined behaviour||||null
Applications might use this to substitute a return value that is less expensive to compute and that the corresponding xUpdate method understands as a "no-change" value||||null
Invoking sqlite3_finalize_APIName on a NULL pointer is a harmless no-op||||null
The sqlite3_snapshot_open_APIName interface is only available||||when the SQLITE_ENABLE_SNAPSHOT compile-time option is used
must have no active statements||||If there is already a read transaction open on schema S , the database handle
The sqlite3_finalize_APIName routine can be called after one or more calls to sqlite3_reset_APIName||||null
If the most recent evaluation of the statement encountered no errors or if the statement is never been evaluated, sqlite3_finalize_APIName returns SQLITE_OK_API_constant||||null
The application must finalize every prepared statement||||null
If the most recent evaluation of statement sqlite3_finalize_APIParam_1 failed, sqlite3_finalize_APIName returns the appropriate error code or extended error code||||null
The sqlite3_finalize_APIName routine can be called after any call to sqlite3_step_APIName regardless of||||null
The parameter P is passed through as the only parameter to the callback function X||||null
A call to sqlite3_snapshot_open_APIName will fail||||if the database connection sqlite3_snapshot_open_APIParam_1 does not know that the database file for schema sqlite3_snapshot_open_APIParam_2 is in WAL mode
Setting parameter X to NULL disables the progress handler||||null
If the progress callback returns non-zero, the operation is interrupted||||null
It is a grievous error for the application to try to use a prepared statement after it has been finalized||||null
If the xColumn method calls sqlite3_vtab_nochange_APIName and finds that the column is not changed by the UPDATE statement, the xColumn method can optionally return without setting a result, without calling any of the sqlite3_result_xxxxx_APIName interfaces||||null
The parameter N is the approximate number of virtual machine instructions that are evaluated between successive invocations of the callback X||||null
The progress handler is also disabled by setting N to a value less than 1||||null
Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption||||null
the progress handler is disabled||||If N is less than one
The sqlite3_expanded_sql_APIName interface returns a pointer to a UTF-8 string containing the SQL text of prepared statement sqlite3_normalized_sql_APIParam_1 with bound parameters expanded||||null
Only a single progress handler may be defined at one time per database connection||||null
The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema sqlite3_snapshot_open_APIParam_2 of database connection sqlite3_snapshot_open_APIParam_1 such that the read transaction refers to historical snapshot P , rather than the most recent change to the database||||null
This feature can be used to implement a `` Cancel '' button on a GUI progress dialog box||||null
At a minimum , literal values will be replaced with suitable placeholders||||null
setting a new progress handler cancels the old one||||null
The sqlite3_normalized_sql_APIName interface returns a pointer to a UTF-8 string containing the normalized SQL text of prepared statement P.  The semantics used to normalize a SQL statement are unspecified and subject to change||||null
The progress handler callback must not do anything that will modify the database connection that invoked the progress handler||||null
Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of `` modify '' in this paragraph||||null
The SQLITE_OMIT_TRACE compile-time option causes sqlite3_expanded_sql_APIName to always return NULL||||null
The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option limits the size of bound parameter expansions||||null
If the sqlite3_vtab_nochange_APIName routine is called within the xColumn method of a virtual table, sqlite3_vtab_nochange_APIName returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change||||null
The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement sqlite3_normalized_sql_APIParam_1 if sqlite3_normalized_sql_APIParam_1 was created by sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName||||null
Collation names that compare equal according to sqlite3_strnicmp_APIName are considered to be the same name||||null
The strings returned by sqlite3_sql_APIName and sqlite3_normalized_sql_APIName are managed by SQLite and are automatically freed when the prepared statement is finalized||||null
The sqlite3_expanded_sql_APIName interface returns NULL if insufficient memory is available to hold the result, or if the result would exceed the the maximum string length determined by the SQLITE_LIMIT_LENGTH_API_constant||||null
The third argument must be one of the constants||||null
These functions add , remove , or modify a collation associated with the database connection specified as the first argument||||null
The string returned by sqlite3_expanded_sql_APIName, on the other hand, is obtained from sqlite3_malloc_APIName and must be free by the application by passing it to sqlite3_free_APIName||||null
The fifth argument , xCallback , is a pointer to the collating function||||null
A collating function must always return the same answer given the same inputs||||null
The name of the collation is a UTF-8 string for sqlite3_create_collation_APIName and sqlite3_create_collation_v2_APIName and a UTF-16 string in native byte order for sqlite3_create_collation16_APIName||||null
the current transaction is committed||||If the blob handle being closed was opened for read-write access , and if the database is in auto-commit mode and there are no other open read-write blob handles or active write statements
the callback function X to be invoked periodically||||during long running calls to sqlite3_exec_APIName , sqlite3_step_APIName and sqlite3_get_table_APIName for database connection D
The sqlite3_progress_handler_APIName interface causes||||null
The fourth argument , pArg , is an application data pointer that is passed through as the first argument to the collating function callback||||null
This is different from every other SQLite interface||||null
is deleted||||If the xCallback argument is NULL the collating function
See also||||null
The collating function must obey the following properties for all strings A , B , and C||||null
sqlite3_collation_needed_APIName and sqlite3_collation_needed16_APIName||||null
Multiple collating functions can be registered using the same name but with different eTextRep parameters and SQLite will use whichever function requires the least amount of data transformation||||null
The collating function must return an integer that is negative, zero, or positive if the first string is less than, equal to, or greater than the second, respectively||||null
The inconsistency is unfortunate but can not be changed without breaking backwards compatibility||||null
or if the database entered WAL mode after the most recent I/O on the database connection||||if there has been no prior I/O on that database connection
A database connection might not know that the database file is in WAL mode||||null
that collation is no longer usable||||When all collating functions having the same name are deleted
The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument||||null
The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements||||null
Applications that invoke sqlite3_create_collation_v2_APIName with a non-NULL xDestroy argument should check the return code and dispose of the application data pointer themselves rather than expecting SQLite to deal with it for them||||null
The xDestroy callback is not called||||if the sqlite3_create_collation_v2_APIName function fails
These routines should return true if the mutex in their argument is held or not held, respectively, by the calling thread||||null
If the argument to sqlite3_mutex_held_APIName is a NULL pointer the routine should return 1||||null
The implementation is not required to provide versions of these routines that actually work||||null
The SQLite core never uses these routines except inside an assert_APIName and applications are advised to follow the lead of the core||||null
This seems counter-intuitive||||null
The sqlite3_mutex_notheld_APIName interface should also return 1 when given a NULL pointer||||null
all must give an equivalent answer when invoked with equivalent strings||||If two or more collating functions are registered to the same collation name
But the reason the mutex does not exist is||||null
the xDestroy callback is invoked on pArg||||when the collating function is deleted
The sqlite3_create_collation_v2_APIName works like sqlite3_create_collation_APIName with the addition that||||null
And we do not want the assert_APIName containing the call to sqlite3_mutex_held_APIName to fail, so a non-zero return is the appropriate thing to do||||null
If the implementation does not provide working versions of these routines, it should at least provide stubs that always return true so that one does not get spurious assertion failures||||null
Collating functions are deleted||||when they are overridden by later calls to the collation creation functions or when the database connection is closed using sqlite3_close_APIName
The SQLite core only provides implementations for these routines||||when it is compiled with the SQLITE_DEBUG flag
The callback function should normally return SQLITE_OK_API_constant||||null
The second is a copy of the database handle||||null
External mutex implementations are only required to provide these routines and||||if SQLITE_DEBUG is defined
Calling sqlite3_wal_hook_APIName replaces any previously registered write-ahead log callback||||null
the behavior of SQLite is undefined||||If a collating function fails any of the above constraints and that collating function is registered and used
The sqlite3_wal_hook_APIName function is used to register a callback that is invoked each time data is committed to a database in wal mode||||null
The name of the database or table or column can be returned as either a UTF-8 or UTF-16 string||||null
A single database handle may have at most a single write-ahead log callback registered at one time||||null
The names returned are the original un-aliased names of the database, table, and column||||null
The third parameter is the name of the database that was written to - either `` main '' or the name of an ATTACH-ed database||||null
The first argument to these interfaces is a prepared statement||||null
||||if a prepared statement is created using the SQL text `` SELECT $ abc
Note that the sqlite3_wal_autocheckpoint_APIName interface and the wal_autocheckpoint pragma both invoke sqlite3_wal_hook_APIName and will overwrite any prior sqlite3_wal_hook_APIName settings||||null
The fourth parameter is the number of pages currently in the write-ahead log file , including those that were just committed||||null
The left-most column is column 0 for these routines||||null
xyz '' and $ abc is bound to integer 2345 and parameter||||if parameter
xyz is unbound, sqlite3_sql_APIName will return the original string, "SELECT $abc||||null
xyz" but sqlite3_expanded_sql_APIName will return "SELECT 2345,NULL"||||null
The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released , so the implementation may read , write or checkpoint the database as required||||null
passed to the callback function||||when it is invoked
The first parameter is a copy of the third parameter passed to sqlite3_wal_hook_APIName when registering the callback||||null
These routine might also return NULL if a memory allocation error occurs||||null
If the callback returns SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if it returns a value that does not correspond to any valid SQLite error code, the results are undefined||||null
These functions return information about the Nth result column returned by the statement, where N is the second function argument||||null
The _database_ routines return the database name, the _table_ routines return the table name, and the origin_ routines return the column name||||null
Otherwise, they return the name of the attached database, table, or column that query result column was extracted from||||null
As with all other SQLite APIs, those whose names end with "16" return UTF-16 encoded strings and the other functions return UTF-8||||null
If the Nth column returned by the statement is an expression or subquery and is not a column value, all of these functions return NULL||||null
If an error code is returned by sqlite3_wal_hook_APIName , that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error ,  will have still occurred||||null
The sqlite3_value returned is a protected sqlite3_value object||||null
These routines provide a means to determine the database , table , and table column that is the origin of a particular result column in SELECT statement||||null
The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy||||null
The sqlite3_value_dup_APIName interface returns NULL if sqlite3_value_dup_APIParam_1 is NULL or if a memory allocation fails||||null
The sqlite3_value_free_APIName interface frees an sqlite3_value object previously obtained from sqlite3_value_dup_APIName||||null
This interface is not for use by applications||||null
These APIs are only available||||if the library was compiled with the SQLITE_ENABLE_COLUMN_METADATA C-preprocessor symbol
It exists solely for verifying the correct operation of the SQLite library||||null
Depending on how the SQLite library is compiled , this interface might not exist||||null
The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes||||null
The value returned is one of SQLITE_ROLLBACK_API_constant, SQLITE_IGNORE_API_constant, SQLITE_FAIL_API_constant, SQLITE_ABORT_API_constant, or SQLITE_REPLACE_API_constant, according to the ON CONFLICT mode of the SQL statement that triggered the call to the xUpdate method of the virtual table||||null
These routines are used to register a new virtual table module name||||null
The name of the module is given by the second parameter||||null
sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation||||null
sqlite3_value_free_APIName is a harmless no-op||||If sqlite3_value_free_APIParam_1 is a NULL pointer
The module name is registered on the database connection specified by sqlite3_create_module_APIParam_1||||null
The first parameter is an operation code that determines the number , meaning , and operation of all subsequent parameters||||null
The third parameter is a pointer to the implementation of the virtual table module||||null
Unlike most of the SQLite API , sqlite3_test_control_APIName is not guaranteed to operate consistently from one release to the next||||null
See also||||null
Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module||||null
The sqlite3_create_module_APIName interface is equivalent to sqlite3_create_module_v2_APIName with a NULL destructor||||null
the soft heap limit is advisory only||||null
The sqlite3_create_module_v2_APIName interface has a fifth parameter which is a pointer to a destructor for the sqlite3_create_module_APIParam_4||||null
The details of the operation codes , their meanings , the parameters they take , and what they do are all subject to change without notice||||null
the results are undefined||||If two or more threads call one or more column metadata interfaces for the same prepared statement and result column at the same time
the results are undefined||||If two or more threads call one or more of these routines against the same prepared statement and column at the same time
The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite||||null
SQLite will invoke the destructor function||||when SQLite no longer needs the sqlite3_create_module_APIParam_4 pointer
With SQLITE_ENABLE_MEMORY_MANAGEMENT , the soft heap limit is enforced on every memory allocation||||null
The destructor will also be invoked||||if the call to sqlite3_create_module_v2_APIName fails
sqlite3_column_origin_name_APIParam_0 is valid until the prepared statement is destroyed using sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the same information is requested again in a different encoding||||null
The return value from sqlite3_soft_heap_limit64_APIName is the size of the soft heap limit prior to the call, or negative in the case of an error||||null
Hence , the current size of the soft heap limit can be determined by invoking sqlite3_soft_heap_limit64_APIName with a negative argument||||null
These routines return 1 if the input string appears to be a complete SQL statement||||null
the soft heap limit is disabled||||If the argument sqlite3_soft_heap_limit64_APIParam_1 is zero
These routines return 0 if the statement is incomplete||||null
no new module is create||||If sqlite3_create_module_APIParam_3 is NULL
and any existing modules with the same name are dropped||||null
Beginning with SQLite version 3.7.3 , the soft heap limit is enforced regardless of||||null
If a memory allocation fails, SQLITE_NOMEM_API_constant be returned by sqlite3_complete16_APIName||||null
Whitespace and comments that follow the final semicolon are ignored||||null
The circumstances under which SQLite will enforce the soft heap limit may changes in future releases of SQLite||||null
no change is made to the soft heap limit||||If the argument sqlite3_soft_heap_limit64_APIParam_1 is negative
The input to sqlite3_complete_APIName must be a zero-terminated UTF-8 string||||null
SQLite strives to keep heap memory utilization below the soft heap limit by reducing the number of pages held in the page cache as heap memory usages approaches the limit||||null
These routines do not parse the SQL statements thus will not detect syntactically incorrect SQL||||null
Testing suggests that , most applications will achieve adequate soft heap limit enforcement without the use of SQLITE_ENABLE_MEMORY_MANAGEMENT||||null
Without SQLITE_ENABLE_MEMORY_MANAGEMENT , the soft heap limit is only enforced||||when memory is allocated by the page cache
If that initialization fails , the return value from sqlite3_complete16_APIName will be non-zero regardless of||||null
The input to sqlite3_complete16_APIName must be a zero-terminated UTF-16 string in native byte order||||null
The soft heap limit is not enforced in the current implementation||||if one or more of following conditions are true
If sqlite3_uri_boolean_APIParam_1 is a NULL pointer, sqlite3_uri_parameter_APIName returns NULL and sqlite3_uri_boolean_APIName returns B||||null
See the URI filename documentation for additional information||||null
On second and subsequent calls to sqlite3_aggregate_context_APIName for the same aggregate function instance, the same buffer be returned by sqlite3_aggregate_context_APIName||||null
Implementations of aggregate SQL functions use this routine to allocate memory for storing their state||||null
If the value of sqlite3_uri_int64_APIParam_2 is something other than an integer, zero be returned by sqlite3_uri_int64_APIName||||null
Semicolons that are embedded within string literals or quoted identifier names or comments are not independent tokens and thus do not count as a statement terminator||||null
In those cases , sqlite3_aggregate_context_APIName might be called for the first time from within xFinal_APIName||||null
If sqlite3_uri_boolean_APIParam_2 is not a query parameter on sqlite3_uri_boolean_APIParam_1 or if the value of sqlite3_uri_boolean_APIParam_2 is does not match any of the above, sqlite3_uri_boolean_APIName returns||||null
The amount of space allocated by sqlite3_aggregate_context_APIName is determined by the sqlite3_aggregate_context_APIParam_2 parameter on first successful call||||null
is passed through into the xCreate and xConnect methods of the virtual table module||||when a new virtual table is be being created or reinitialized
The fourth parameter is an arbitrary client data pointer that||||null
This routine must be called from the same thread in which the aggregate SQL function is running||||null
The sqlite3_uri_int64_APIName routine converts the value of sqlite3_uri_int64_APIParam_2 into a 64-bit signed integer and returns that integer, or sqlite3_uri_int64_APIParam_3 if sqlite3_uri_int64_APIParam_2 does not exist||||null
sqlite3_initialize_APIName is invoked automatically by sqlite3_complete16_APIName||||If SQLite has not been initialized using sqlite3_initialize_APIName prior to invoking sqlite3_complete16_APIName
The sqlite3_aggregate_context_APIName routine returns a NULL pointer when first called if sqlite3_aggregate_context_APIParam_2 is less than or equal to zero or if a memory allocate error occurs||||null
The sqlite3_uri_boolean_APIName routines returns false  if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "no", "false", or "off" in any case or if the value begins with a numeric zero||||null
A statement is judged to be complete||||if it ends with a semicolon token and is not a prefix of a well-formed CREATE TRIGGER statement
These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing||||null
The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates sqlite3_aggregate_context_APIParam_2 of memory, zeroes out that memory, and returns a pointer to the new memory||||null
SQLite automatically frees the memory allocated by sqlite3_aggregate_context_APIName||||when the aggregate query concludes
Within the xFinal callback , it is customary to set N = 0 in calls to sqlite3_aggregate_context_APIName so that no pointless memory allocations occur||||null
The sqlite3_uri_boolean_APIName routine assumes that sqlite3_uri_boolean_APIParam_2 is a boolean parameter and returns true  or false  according to the value of sqlite3_uri_boolean_APIParam_2.  The sqlite3_uri_boolean_APIName routine returns true  if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number||||null
Changing the value of sqlite3_aggregate_context_APIParam_2 in subsequent call to sqlite3_aggregate_context_APIName within the same aggregate function instance will not resize the memory allocation||||null
If sqlite3_uri_parameter_APIParam_1 is the database filename pointer passed into the xOpen_APIName method of a VFS implementation when the flags parameter to xOpen_APIName has one or more of the SQLITE_OPEN_URI_API_constant or SQLITE_OPEN_MAIN_DB_API_constant bits set and sqlite3_uri_parameter_APIParam_2 is the name of the query parameter, sqlite3_uri_parameter_APIName returns the value of the sqlite3_uri_parameter_APIParam_2 parameter if it exists or a NULL pointer if sqlite3_uri_parameter_APIParam_2 does not appear as a query parameter on sqlite3_uri_parameter_APIParam_1.  If sqlite3_uri_parameter_APIParam_2 is a query parameter of sqlite3_uri_parameter_APIParam_1 has no explicit value, sqlite3_uri_parameter_APIName returns a pointer to an empty string||||null
Extension loading is off by default||||null
Use sqlite3_db_config to enable or disable only the C-API||||null
The first parameter must be a copy of the SQL function context that is sqlite3_aggregate_context_APIParam_1 to the xStep or xFinal callback routine that implements the aggregate function||||null
This interface enables or disables both the C-API sqlite3_load_extension_APIName and the SQL function load_extension_APIName||||null
The sqlite3_stmt_isexplain_APIName interface returns 0 if sqlite3_stmt_isexplain_APIParam_1 is an ordinary statement or a NULL pointer||||null
the xStep_APIName callback of the aggregate function implementation is never called and xFinal_APIName is called exactly once||||When no rows match an aggregate query
The sqlite3_libversion_number_APIName function returns an integer equal to SQLITE_VERSION_API_constant_NUMBER||||null
Sqlite3_aggregate_context_APIName is normally called once for each invocation of the xStep callback and one last time||||when the xFinal callback is invoked
This will prevent SQL injections from giving attackers access to extension loading capabilities||||null
The sqlite3_stmt_isexplain_APIName interface returns 1 if the prepared statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN statement, or 2 if the statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN QUERY PLAN||||null
Security warning||||null
sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity||||null
See also||||null
sqlite_version_APIName and sqlite_source_id_APIName||||null
The sqlite3_libversion_APIName function is provided for use in DLLs||||null
Call the sqlite3_enable_load_extension_APIName routine with onoff == 1 to turn extension loading on and call it with onoff == 0 to turn it back off again||||null
It is recommended that extension loading be disabled using the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method rather than this interface , so the load_extension_APIName SQL function remains disabled||||null
These interfaces provide the same information as the SQLITE_VERSION_API_constant , SQLITE_VERSION_API_constant_NUMBER , and SQLITE_SOURCE_ID_API_constant C preprocessor macros but are associated with the library instead of the header file||||null
the behavior of this routine is undefined and probably undesirable||||If sqlite3_uri_boolean_APIParam_1 is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method
SQLite uses internally||||when comparing identifiers
The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion , using the same definition of `` case independence '' that||||null
check to see||||if a database file was a URI that contained a specific query parameter
These are utility routines , useful to VFS implementations , that , and if so obtains the value of that query parameter||||null
The sqlite3_sourceid_APIName function returns a pointer to a string constant whose value is the same as the SQLITE_SOURCE_ID_API_constant C preprocessor macro||||null
An SQL operation that is interrupted will return SQLITE_INTERRUPT_API_constant||||null
But it is not safe to call this routine with a database connection that is closed or might close before sqlite3_interrupt_APIName returns||||null
Cautious programmers might include assert_APIName statements in their application to verify that values returned by these interfaces match the macros in the header, and thus ensure that the application is compiled with matching library and header files||||null
The sqlite3_interrupt_APIName call is in effect until all currently running SQL statements on database connection sqlite3_interrupt_APIParam_1 complete||||null
It is safe to call this routine from a thread different from the thread that is currently running the database operation||||null
The sqlite3_table_column_metadata_APIName interface returns SQLITE_ERROR_API_constant and if the specified column does not exist||||null
New SQL statements that are started after the running statement count reaches zero are not effected by the sqlite3_interrupt_APIName||||null
A call to sqlite3_interrupt_APIName that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after the sqlite3_interrupt_APIName call returns||||null
The sqlite3_libversion_APIName function returns a pointer to the to the sqlite3_version[] string constant||||null
The sqlite3_table_column_metadata routine returns information about column C of table T in database D on database connection X||||null
This routine is typically called in response to a user action such as pressing `` Cancel '' or Ctrl-C where the user wants a long query operation to halt immediately||||null
The sqlite3_table_column_metadata_APIName interface returns SQLITE_OK_API_constant and fills in the non-NULL pointers in the final five arguments with appropriate values if the specified column exists||||null
sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName||||null
The column is identified by the second , third and fourth parameters to sqlite3_table_column_metadata_APIName||||null
`` main '' , `` temp '' , or an attached database -RRB- containing the specified table or NULL||||null
Metadata is returned by sqlite3_table_column_metadata_APIName by writing to the memory locations passed as the 5_APIConstant and subsequent parameters to sqlite3_table_column_metadata_APIName||||null
the last four characters of the hash might be different from SQLITE_SOURCE_ID_API_constant||||Except if SQLite is built using an edited copy of the amalgamation
If the specified table is actually a view, an error code be returned by sqlite3_table_column_metadata_APIName||||null
The sqlite3_version -LSB- -RSB- string constant contains the text of SQLITE_VERSION_API_constant macro||||null
This interface is only available||||if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option
or if the database is not a WAL mode database||||if there is already a read transaction open on the database
It is an error||||null
The third and fourth parameters to sqlite3_table_column_metadata_APIName are the table and column name of the desired column , respectively||||null
The index value returned is suitable for use as the second parameter to sqlite3_bind_APIName||||null
Any of these arguments may be NULL , in which case the corresponding element of metadata is omitted||||null
Return the index of an SQL parameter given its name||||null
A zero be returned by sqlite3_bind_parameter_index_APIName if no matching parameter is found||||null
The memory pointed to by the character pointers returned for the declaration type and collation sequence is valid until the next call to any SQLite API function||||null
See also||||null
If the column-name parameter to sqlite3_table_column_metadata_APIName is a NULL pointer, this routine simply checks for the existence of the table and returns SQLITE_OK_API_constant if the table exists and SQLITE_ERROR_API_constant if it does not||||null
sqlite3_bind_APIName , sqlite3_bind_parameter_count_APIName , and sqlite3_bind_parameter_name_APIName||||null
the entire transaction will be rolled back automatically||||If the interrupted SQL operation is an INSERT , UPDATE , or DELETE that is inside an explicit transaction
it might not have an opportunity to be interrupted and might continue to completion||||If an SQL operation is very nearly finished at the time when sqlite3_interrupt_APIName is called
Any new SQL statements that are started after the sqlite3_interrupt_APIName call and before the running statements reaches zero are interrupted as||||if they had been running prior to the sqlite3_interrupt_APIName call
the result is undefined behavior||||If the table name parameter T in a call to sqlite3_table_column_metadata is NULL
The parameter name must be given in UTF-8||||null
See also||||null
The sqlite3_strlike_APIName function matches Unicode characters||||null
See also||||null
For `` X LIKE P '' without the ESCAPE clause , set the sqlite3_strlike_APIParam_3 parameter of sqlite3_strlike_APIName to 0||||null
The sqlite3_release_memory_APIName routine is a no-op returning zero if SQLite is not compiled with SQLITE_ENABLE_MEMORY_MANAGEMENT||||null
sqlite3_release_memory_APIName returns the number of bytes actually freed, which might be more or less than the amount requested||||null
Memory used to cache database pages to improve performance is an example of non-essential memory||||null
sqlite3_table_column_metadata_APIName causes all database schemas to be read from disk and parsed, if that has not already been done, and returns an error if any errors are encountered while loading the schema||||null
databases are searched for the table using the same algorithm used by the database engine to resolve unqualified table references||||If it is NULL , all attached
the outputs for the rowid are set as follows||||If there is no INTEGER PRIMARY KEY column
Note that this routine returns zero on a match and non-zero if the strings do not match, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName||||null
The second parameter is either the name of the database -LRB- i.e||||null
Executing any other type of SQL statement does not modify the value returned by sqlite3_changes_APIName||||null
The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library||||null
Only changes made to real tables are counted||||null
As with the LIKE operator , the sqlite3_strlike_APIName function is case insensitive - equivalent upper and lower case ASCII characters match one another||||null
The sqlite3_strlike_APIName interface returns zero if and only if string sqlite3_strlike_APIParam_2 matches the LIKE pattern sqlite3_strlike_APIParam_1 with escape character E. The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE sqlite3_strlike_APIParam_1 ESCAPE E" operator in the SQL dialect understood by SQLite||||null
Changes to a view that are intercepted by INSTEAD OF triggers are not counted||||null
The value returned by sqlite3_changes_APIName immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero||||null
See also||||null
So as not to open security holes in older applications that are unprepared to deal with extension loading , and as a means of disabling extension loading , the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off||||while evaluating user-entered SQL
sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter||||null
The sqlite3_strglob_APIName function is case sensitive||||null
If a separate thread makes changes on the same database connection while sqlite3_changes_APIName is running the value returned is unpredictable and not meaningful||||null
See also||||null
These interfaces are available only on Windows||||null
or if some other callback function invokes sqlite3_changes_APIName directly||||if the program uses the changes_APIName SQL function
This may happen||||null
WinRT and UWP||||null
This means that if the changes_APIName SQL function  is used by the first INSERT, UPDATE or DELETE statement within a trigger, it returns the value as set when the calling statement began executing||||null
Note that this routine returns zero on a match and non-zero if the strings do not match, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName||||null
See sqlite3_create_function_APIName and sqlite3_create_function16_APIName for additional information||||null
Things are more complicated||||if the sqlite3_changes_APIName function is executed while a trigger program is running
The sqlite3_strglob_APIName interface returns zero if and only if string sqlite3_strglob_APIParam_2 matches the GLOB pattern P. The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite||||null
Only changes made directly by the INSERT , UPDATE or DELETE statement are considered - auxiliary changes caused by triggers , foreign key actions or REPLACE constraint resolution are not counted||||null
These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates||||null
The sqlite3_win32_set_directory interface returns SQLITE_OK_API_constant to indicate success, SQLITE_ERROR_API_constant if the sqlite3_win32_set_directory_APIParam_1 is unsupported, or SQLITE_NOMEM_API_constant if memory could not be allocated||||null
Refer to the SQL parameter documentation for additional information||||null
If it is used by the second or subsequent such statement within a trigger program, the value returned reflects the number of rows modified by the previous INSERT, UPDATE or DELETE statement within the same trigger||||null
The sqlite3_result_error_APIName and sqlite3_result_error16_APIName functions cause the implemented SQL function to throw an exception||||null
The sqlite3_win32_set_directory_APIParam_2 parameter should be NULL to cause the previous value to be freed via sqlite3_free||||null
SQLite interprets the error message string from sqlite3_result_error_APIName as UTF-8||||null
a non-NULL value will be copied into memory obtained from sqlite3_malloc prior to being used||||null
The sqlite3_win32_set_directory interface is used to set the value associated with the sqlite3_temp_directory or sqlite3_data_directory variable , to sqlite3_win32_set_directory_APIParam_2 , depending on the value of the sqlite3_win32_set_directory_APIParam_1 parameter||||null
The sqlite3_win32_set_directory8 and sqlite3_win32_set_directory16 interfaces behave exactly the same as the sqlite3_win32_set_directory interface except the string parameter must be UTF-8 or UTF-16 , respectively||||null
The sqlite3_result_double_APIName interface sets the result from an application-defined function to be a floating point value specified by its 2_APIConstant argument||||null
The sqlite3_result_error_APIName and sqlite3_result_error16_APIName routines make a private copy of the error message text before they return||||null
By default , the error code is SQLITE_ERROR_API_constant||||null
These functions work very much like the parameter binding family of functions used to bind values to host parameters in prepared statements||||null
SQLite interprets the string from sqlite3_result_error16_APIName as UTF-16 in native byte order||||null
Hence, the calling function can deallocate or modify the text after they return without harm||||null
SQLite uses the string pointed to by the 2_APIConstant parameter of sqlite3_result_error_APIName or sqlite3_result_error16_APIName as the text of an error message||||null
The sqlite3_result_zeroblob_APIName and sqlite3_result_zeroblob64_APIName interfaces set the result of the application-defined function to be a BLOB containing all zero bytes and sqlite3_result_zeroblob64_APIParam_2 bytes in size||||null
rowid _ '' and the table is not a WITHOUT ROWID table||||If the specified column is `` rowid '' , `` oid '' or '' _
and an INTEGER PRIMARY KEY column has been explicitly declared , the output parameters are set for the explicitly declared column||||null
The sqlite3_result_error_code_APIName function changes the error code returned by SQLite as a result of an error in a function||||null
The sqlite3_result_null_APIName interface sets the return value of the application-defined function to be NULL||||null
A subsequent call to sqlite3_result_error_APIName or sqlite3_result_error16_APIName resets the error code to SQLITE_ERROR_API_constant||||null
The value of the sqlite3_data_directory variable is intended to act as a replacement for the current directory on the sub-platforms of Win32 where that concept is not present , e.g||||null
The sqlite3_result_int_APIName interface sets the return value of the application-defined function to be the 32-bit signed integer value given in the 2_APIConstant argument||||null
The sqlite3_result_error_nomem_APIName interface causes SQLite to throw an error indicating that a memory allocation failed||||null
The sqlite3_result_int64_APIName interface sets the return value of the application-defined function to be the 64-bit signed integer value given in the 2_APIConstant argument||||null
The sqlite3_result_blob_APIName interface sets the result from an application-defined function to be the BLOB whose content is pointed to by the second parameter and which is N bytes long where N is the third parameter||||null
The sqlite3_result_error_toobig_APIName interface causes SQLite to throw an error indicating that a string or BLOB is too long to represent||||null
SQLite takes the text result from the application from the 2_APIConstant parameter of the sqlite3_result_text * interfaces||||null
SQLite takes that many bytes from the 2_APIConstant parameter as the error message||||If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is non-negative
SQLite takes as the error message all text up through the first zero character||||If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is negative
SQLite takes result text from the 2_APIConstant parameter through the first zero character||||If the 3_APIConstant parameter to the sqlite3_result_text * interfaces is negative
The sqlite3_result_value_APIName interface makes a copy of the sqlite3_value so that the sqlite3_value specified in the parameter may change or be deallocated after sqlite3_result_value_APIName returns without harm||||null
If the 4_APIConstant parameter to the sqlite3_result_text* interfaces or sqlite3_result_blob is the special constant SQLITE_TRANSIENT_API_constant SQLite makes a copy of the result into space obtained from sqlite3_malloc_APIName before it returns||||null
The sqlite3_result_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0||||null
The sqlite3_result_value_APIName interface sets the result of the application-defined function to be a copy of the unprotected sqlite3_value object specified by the 2_APIConstant parameter||||null
See Also||||null
See SQLite Shared-Cache Mode for a description of shared-cache locking||||null
Using the SQLite Unlock Notification Feature||||null
The sqlite3_result_text64_APIName interface sets the return value of an application-defined function to be a text string in an encoding specified by the fifth  parameter, which must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE||||null
The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P||||null
The sqlite3_snapshot_free_APIName interface is only available||||when the SQLITE_ENABLE_SNAPSHOT compile-time option is used
A protected sqlite3_value object may always be used where an unprotected sqlite3_value object is required , so either kind of sqlite3_value object can be used with this interface||||null
The sqlite3_result_text_APIName, sqlite3_result_text16_APIName, sqlite3_result_text16le_APIName, and sqlite3_result_text16be_APIName interfaces set the return value of the application-defined function to be a text string which is represented as UTF-8, UTF-16 native byte order, UTF-16 little endian, or UTF-16 big endian, respectively||||null
it is a pointer to a destructor for the sqlite3_result_pointer_APIParam_2 parameter||||If the sqlite3_result_pointer_APIParam_4 parameter is not NULL
it must be the byte offset into the string where the NUL terminator would appear if the string where NUL terminated||||If the 3_APIConstant parameter is non-negative
SQLite invokes sqlite3_result_pointer_APIParam_4 with sqlite3_result_pointer_APIParam_2 as its only argument||||when SQLite is finished with sqlite3_result_pointer_APIParam_2
The unlock-notify callback is not reentrant||||null
The callback is invoked from within the sqlite3_step or sqlite3_close call that concludes the blocking connections transaction||||null
There may be at most one unlock-notify callback registered by a blocked connection||||null
The blocked connections unlock-notify callback may also be canceled by closing the blocked connection using sqlite3_close_APIName||||null
This API is only available||||if the library was compiled with the SQLITE_ENABLE_UNLOCK_NOTIFY C-preprocessor symbol defined
Unless deadlock is detected , sqlite3_unlock_notify_APIName always returns SQLITE_OK_API_constant||||null
SQLite will invoke||||when the connection currently holding the required lock relinquishes it
This API may be used to register a callback that||||null
Callback Invocation Details||||null
result||||If the 3_APIConstant parameter to the sqlite3_result_text * interfaces is non-negative , as many bytes of the text pointed to by the 2_APIConstant parameter are taken as the application-defined function
Shared-cache locks are released , either by committing it or rolling it back||||when a database connection concludes its current transaction
When a connection  fails to obtain a shared-cache lock and SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName to the caller, the identity of the database connection  that has locked the required resource is stored internally||||null
Deadlock Detection||||null
the results are undefined||||If these routines are called from within the different thread than the one containing the application-defined function that received the sqlite3_context pointer
the specified callback is invoked immediately , from within the call to sqlite3_unlock_notify_APIName||||If this happens
any existing unlock-notify callback is canceled||||If sqlite3_unlock_notify_APIName is called with a NULL pointer as its second argument
the new callback replaces the old||||If sqlite3_unlock_notify_APIName is called when the blocked connection already has a registered unlock-notify callback
However , the signature of the callback function allows SQLite to pass it an array of void * context pointers||||null
To avoid this scenario , the sqlite3_unlock_notify_APIName performs deadlock detection||||null
Any number of levels of indirection are allowed||||null
The `` DROP TABLE '' Exception||||null
This gives the application an opportunity to prioritize any actions related to the set of unblocked database connections||||null
a database operation may fail with an SQLITE_LOCKED_API_constant error if the required locks on the shared-cache or individual tables within the shared-cache can not be obtained||||When running in shared-cache mode
There is however , one exception||||null
When a call to sqlite3_step_APIName returns SQLITE_LOCKED_API_constant, it is almost always appropriate to call sqlite3_unlock_notify_APIName||||null
If there are, SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName||||null
a crash or deadlock may be the result||||If an application invokes any sqlite3_xxx API functions from within an unlock-notify callback
SQLite calls that function as the destructor on the text or BLOB result when it has finished using that result||||If the 4_APIConstant parameter to the sqlite3_result_text * interfaces or sqlite3_result_blob is a non-NULL pointer
If a given call to sqlite3_unlock_notify_APIName would put the system in a deadlocked state, SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName and no unlock-notify callback is registered||||null
One way around this problem is to check the extended error code returned by an sqlite3_step_APIName call||||null
there is a chance that the blocking connection will have already concluded its transaction by the time sqlite3_unlock_notify_APIName is invoked||||If sqlite3_unlock_notify_APIName is called in a multi-threaded application
there is no `` blocking connection '' , so invoking sqlite3_unlock_notify_APIName results in the unlock-notify callback being invoked immediately||||null
the application provides a single void * pointer||||When an unlock-notify callback is registered
that is passed to the callback when it is invoked||||null
there may be more than one blocked connection that has registered for an unlock-notify callback||||When a blocking connections transaction is concluded
Otherwise , in the special `` DROP TABLE/INDEX '' case , the extended error code is just SQLITE_LOCKED_API_constant||||null
The first argument passed to an unlock-notify callback is a pointer to an array of void * pointers , and the second is the number of entries in the array||||null
For the main database file , the database name is `` main ''||||null
Assuming that after registering for an unlock-notify callback a database waits for the callback to be issued before taking any further action , using this API may cause the application to deadlock||||null
On success, SQLITE_OK_API_constant be returned by sqlite3_blob_open_APIName and the new BLOB handle is stored in *ppBlob||||null
For attached databases , this is the name that appears after the AS keyword in the ATTACH statement||||null
is set to SQLITE_LOCKED_API_constant_SHAREDCACHE||||If there is a blocking connection , the extended error code
When executing a `` DROP TABLE '' or `` DROP INDEX '' statement , SQLite checks if there are any currently executing SELECT statements that belong to the same connection||||null
For TEMP tables , the database name is `` temp ''||||null
the resulting string will contain embedded NULs and the result of expressions operating on strings with embedded NULs is undefined||||If any NUL characters occur in the string at a byte offset that is less than the value of the 3_APIConstant parameter
will be invoked||||when the blocking connections current transaction is concluded
After an application receives an SQLITE_LOCKED_API_constant error , it may call the sqlite3_unlock_notify_APIName method with the blocked connection handle as the first argument to register for a callback that||||null
Otherwise an error code be returned by sqlite3_blob_open_APIName and, unless the error code is SQLITE_MISUSE_API_constant, *ppBlob is set to NULL||||null
an infinite loop might be the result||||If the application re-attempts the `` DROP TABLE '' or `` DROP INDEX '' query
Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database , but rather the symbolic name of the database||||null
This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close_APIName on *ppBlob after sqlite3_blob_open_APIName sqlite3_blob_open_APIName returns||||null
Unless sqlite3_blob_open_APIName returns SQLITE_MISUSE_API_constant, sqlite3_blob_open_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions||||null
A BLOB referenced by sqlite3_blob_open_APIName may be read using the sqlite3_blob_read_APIName interface and modified by using sqlite3_blob_write_APIName||||null
The sqlite3_result_pointer_APIName interface sets the result to an SQL NULL value , just like sqlite3_result_null_APIName , except that it also associates the host-language pointer sqlite3_result_pointer_APIParam_2 or type sqlite3_result_pointer_APIParam_3 with that NULL value such that the pointer can be retrieved within an application-defined SQL function using sqlite3_value_pointer_APIName||||null
Calls to sqlite3_blob_read_APIName and sqlite3_blob_write_APIName for an expired BLOB handle fail with a return code of SQLITE_ABORT_API_constant||||null
the BLOB is opened for read-only access||||If the sqlite3_blob_open_APIParam_6 parameter is zero
The BLOB handle can be moved to a different row of the same table using the sqlite3_blob_reopen_APIName interface||||null
sqlite3_blob_open_APIName fails with SQLITE_ERROR_API_constant||||if any of the following are true
the BLOB is opened for read and write access||||If the sqlite3_blob_open_APIParam_6 parameter is non-zero
Use the sqlite3_blob_bytes_APIName interface to determine the size of the opened blob||||null
This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5 , column sqlite3_blob_open_APIParam_4 , table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2||||null
The size of a blob may not be changed by this interface||||null
However , the column , table , or database of a BLOB handle can not be changed after the BLOB handle is opened||||null
the same BLOB that would be selected by||||null
Use the UPDATE SQL command to change the size of a blob||||null
See also||||null
Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB||||null
sqlite3_blob_close_APIName , sqlite3_blob_reopen_APIName , sqlite3_blob_read_APIName , sqlite3_blob_bytes_APIName , sqlite3_blob_write_APIName||||null
Such changes will eventually commit||||if the transaction continues to completion
After at least "ms" milliseconds of sleeping, the handler returns 0 which causes sqlite3_step_APIName to return SQLITE_BUSY_API_constant||||null
See also||||null
PRAGMA busy_timeout||||null
The handler will sleep multiple times until at least `` ms '' milliseconds of sleeping have accumulated||||null
To avoid a resource leak , every open BLOB handle should eventually be released by a call to sqlite3_blob_close_APIName||||null
If this routine returns 0, that means the prepared statement returns no data||||null
Return the number of columns in the result set returned by the prepared statement||||null
The sqlite3_bind_zeroblob_APIName and sqlite3_result_zeroblob_APIName interfaces and the built-in zeroblob SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface||||null
the system is also considered to be deadlocked||||if connection B has registered for an unlock-notify callback on the conclusion of connection C 's transaction
Indirect deadlock is also detected , so , where connection C is waiting on connection A||||null
Calling this routine with an argument less than or equal to zero turns off all busy handlers||||null
There can only be a single busy handler for a particular database connection at any given moment||||null
See also||||null
SQLite assumes that the text or BLOB result is in constant space and does not copy the content of the parameter nor call a destructor on the content when it has finished using that result||||If the 4_APIConstant parameter to the sqlite3_result_text * interfaces or to sqlite3_result_blob is the special constant SQLITE_STATIC_API_constant
The preferred routine to use is sqlite3_prepare_v2_APIName||||null
neither connection will proceed and the system may remain deadlocked indefinitely||||if connection X is waiting for connection Y 's transaction to be concluded , and similarly connection Y is waiting on connection X 's transaction
Or , , these routines are constructors for the prepared statement object||||null
The sqlite3_prepare_APIName interface is legacy and should be avoided||||null
This is true||||if any column of the row is changed , even a column other than the one the BLOB handle is open on
SQLite arbitrarily selects one of the other connections to use as the blocking connection||||If the blocked connection is attempting to obtain a write-lock on a shared-cache table , and more than one other connection currently holds a read-lock on the same table
sleeps for a specified amount of time||||when a table is locked
This routine sets a busy handler that||||null
handle is marked as `` expired ''||||If the row that a BLOB handle points to is modified by an UPDATE , DELETE , or by ON CONFLICT side-effects the BLOB
that other busy handler is cleared||||If another busy handler was defined prior to calling this routine
The system is said to be in a deadlocked state||||if connection A has registered for an unlock-notify callback on the conclusion of connection B 's transaction
and connection B has itself registered for an unlock-notify callback when connection A 's transaction is concluded||||null
it is invoked once with the set of void * context pointers specified by the blocked connections bundled together into an array||||If two or more such blocked connections have specified the same callback function , instead of invoking the callback function multiple times
The UTF-16 interfaces are provided as a convenience||||null
A SELECT statement will always have a positive sqlite3_column_count_APIName but depending on the WHERE clause constraints and the table content, it might return no rows||||null
sqlite3_prepare_v3_APIName has an extra `` prepFlags '' option that is used for special purposes||||null
To execute an SQL statement , it must first be compiled into a byte-code program using one of these routines||||null
The database connection must not have been closed||||null
The use of the UTF-8 interfaces is preferred , as SQLite currently does all parsing using UTF-8||||null
The UTF-16 interfaces work by converting the input text into UTF-8 , invoking the corresponding UTF-8 interface||||null
The sqlite3_prepare_APIName , sqlite3_prepare_v2_APIName , and sqlite3_prepare_v3_APIName interfaces use UTF-8 , and sqlite3_prepare16_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName use UTF-16||||null
The second argument , `` zSql '' , is the statement to be compiled , encoded as either UTF-8 or UTF-16||||null
* ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step_APIName||||null
ppStmt may not be NULL||||null
The first argument , `` db '' , is a database connection obtained from a prior successful call to sqlite3_open_APIName , sqlite3_open_v2_APIName or sqlite3_open16_APIName||||null
no prepared statement is generated||||If sqlite3_prepare16_APIParam_3 is zero
These routines only compile the first statement in sqlite3_prepare16_APIParam_2 , so * pzTail is left pointing to what remains uncompiled||||null
In the "vX" interfaces, the prepared statement that be returned by sqlite3_prepare_APIName  contains a copy of the original SQL text||||null
The calling procedure is responsible for deleting the compiled SQL statement using sqlite3_finalize_APIName after it has finished with it||||null
it is the number of bytes read from sqlite3_prepare_v2_APIParam_2||||If sqlite3_prepare_v2_APIParam_3 is positive
The sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName interfaces are recommended for all new programs||||null
This causes the sqlite3_step_APIName interface to behave differently in three ways||||null
sqlite3_prepare_APIParam_2 is read up to the first zero terminator||||If the sqlite3_prepare_APIParam_3 argument is negative
The sqlite3_prepare_v2_APIName interface works exactly the same as sqlite3_prepare_v3_APIName with a zero prepFlags parameter||||null
* ppStmt is set to NULL||||If there is an error
If no prepared statement satisfies the conditions of this routine, sqlite3_next_stmt_APIName returns NULL||||null
is set to NULL||||If the input text contains no SQL * ppStmt
This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1||||null
Passing any other pointer in to this routine results in undefined and probably undesirable behavior||||null
If sqlite3_next_stmt_APIParam_2 is NULL this interface returns a pointer to the first prepared statement associated with the database connection sqlite3_next_stmt_APIParam_1||||null
Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument||||null
The incremental blob I/O routines can only read or overwriting existing blob content||||null
But  , sqlite3_stmt_readonly_APIName would still return true||||null
they can not change the size of a blob||||null
The sqlite3_stmt_readonly_APIName interface returns true  if and only if the prepared statement sqlite3_stmt_readonly_APIParam_1 makes no direct changes to the content of the database file||||null
Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect||||null
is made to point to the first byte past the end of the first SQL statement in sqlite3_prepare_APIParam_2||||If sqlite3_prepare_APIParam_5 is not NULL * pzTail
The sqlite3_data_count_APIName routine also returns 0 if sqlite3_step_APIParam_1 is a NULL pointer||||null
sqlite3_prepare_v3_APIName differs from sqlite3_prepare_v2_APIName only in having the extra prepFlags parameter , which is a bit array consisting of zero or more of the SQLITE_PREPARE _ * flags||||null
sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table||||null
The sqlite3_data_count_APIName routine returns 0 if the previous call to sqlite3_step_APIName returned SQLITE_DONE_API_constant||||null
See also||||null
sqlite3_vtab_collation_APIName returns a pointer to a buffer containing the name of the collation sequence for the corresponding constraint||||null
This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName||||null
The first argument must be the sqlite3_index_info object that is the first parameter to the xBestIndex_APIName method||||null
This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1||||null
The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement sqlite3_step_APIParam_1. If prepared statement sqlite3_step_APIParam_1 does not have results ready to return  sqlite3_data_count_APIName returns 0||||null
The "iScanStatusOp" parameter determines which status information to return||||null
The database connection pointer sqlite3_next_stmt_APIParam_1 in a call to sqlite3_next_stmt_APIName must refer to an open database connection and must not be a NULL pointer||||null
Loops are numbered starting from zero||||null
there is a small performance advantage to passing an sqlite3_prepare16_v2_APIParam_3 parameter that is the number of bytes in the input string including the nul-terminator||||If the caller knows that the supplied string is nul-terminated
Parameter `` idx '' identifies the specific loop to retrieve statistics for||||null
The `` iScanStatusOp '' must be one of the scanstatus options or the behavior of this interface is undefined||||null
The requested measurement is written into a variable pointed to by the `` pOut '' parameter||||null
See also||||null
The sqlite3_stmt_readonly_APIName interface returns true for BEGIN  , but the BEGIN IMMEDIATE and BEGIN EXCLUSIVE commands do touch the database and so sqlite3_stmt_readonly_APIName returns false for those commands||||null
Statistics might not be available for all loops in all statements||||null
the following SQL statement would change the database file through side-effects||||if an application defines a function "eval_APIName '' that calls sqlite3_exec_APIName
The third parameter to sqlite3_preupdate_hook_APIName is passed through as sqlite3_preupdate_depth_APIParam_1 to callbacks||||null
The preupdate hook is disabled by invoking sqlite3_preupdate_hook_APIName with a NULL pointer as sqlite3_preupdate_count_APIParam_2||||null
Transaction control statements such as BEGIN , COMMIT , ROLLBACK , SAVEPOINT , and RELEASE cause sqlite3_stmt_readonly_APIName to return true||||null
it is only available||||if SQLite is compiled using the SQLITE_ENABLE_STMT_SCANSTATUS compile-time option
||||null
The second parameter to the preupdate callback is a pointer to the database connection that registered the preupdate hook||||null
In cases where there exist loops with no available statistics, sqlite3_stmt_scanstatus_APIName behaves as if the loop did not exist - sqlite3_stmt_scanstatus_APIName returns non-zero and leave the variable that sqlite3_stmt_scanstatus_APIParam_4 points to unchanged||||null
At most one preupdate hook may be registered at a time on a single database connection||||null
The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT , UPDATE , and DELETE operation on a database table||||null
each call to sqlite3_preupdate_hook_APIName overrides the previous setting||||null
the measured performance and issue warnings and/or rerun ANALYZE||||if discrepancies are found
Advanced applications can use this interface to compare the predicted and||||null
These routines may only be called from within a preupdate callback||||null
The fifth parameter to the preupdate callback is the name of the table that is being modified||||null
These interfaces are only available||||if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option
The fourth parameter to the preupdate callback is the name of the database within the database connection that is being modified||||null
The preupdate hook only fires for changes to real database tables||||null
The sqlite3_preupdate_old_APIName , sqlite3_preupdate_new_APIName , sqlite3_preupdate_count_APIName , and sqlite3_preupdate_depth_APIName interfaces provide additional information about a preupdate event||||null
The sqlite3_preupdate_count_APIName interface returns the number of columns in the row that is being inserted, updated, or deleted||||null
the preupdate hook is not invoked for changes to virtual tables or to system tables like sqlite_master or sqlite_stat1||||null
If sqlite3_stmt_scanstatus_APIParam_2 is out of range - less than zero or greater than or equal to the total number of loops used to implement the statement - a non-zero value be returned by sqlite3_stmt_scanstatus_APIName and the variable that sqlite3_stmt_scanstatus_APIParam_4 points to is unchanged||||null
For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated||||null
The sqlite3_value that P points to will be destroyed when the preupdate callback returns||||null
The sqlite3_value that P points to will be destroyed when the preupdate callback returns||||null
The third parameter to the preupdate callback is one of the constants SQLITE_INSERT_API_constant , SQLITE_DELETE_API_constant , or SQLITE_UPDATE_API_constant to identify the kind of update operation that is about to occur||||null
The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined||||null
For an UPDATE or DELETE operation on a rowid table , the sixth parameter passed to the preupdate callback is the initial rowid of the row being modified or deleted||||null
See also||||null
This will be `` main '' for the main database or `` temp '' for TEMP tables or the name given after the AS keyword in the ATTACH statement for attached databases||||null
This must only be used within SQLITE_UPDATE_API_constant and SQLITE_DELETE_API_constant preupdate callbacks||||null
The leftmost SQL parameter has an index of 1||||null
The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables , or for INSERT operations on rowid tables||||null
For an INSERT operation on a rowid table , or any operation on a WITHOUT ROWID table , the value of the sixth parameter is undefined||||null
The sqlite3_preupdate_old_APIName interface writes into sqlite3_preupdate_old_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row before it is updated||||null
In the templates above , NNN represents an integer literal , and VVV represents an alphanumeric identifier||||null
The second argument is the index of the SQL parameter to be set||||null
This must only be used within SQLITE_INSERT_API_constant and SQLITE_UPDATE_API_constant preupdate callbacks||||null
The index for '' ?||||null
The values of these parameters can be set using the sqlite3_bind _ * _ APIName routines defined here||||null
The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined||||null
The NNN value must be between 1 and the sqlite3_limit_APIName parameter SQLITE_LIMIT_VARIABLE_NUMBER_API_constant||||null
The sqlite3_preupdate_new_APIName interface writes into sqlite3_preupdate_new_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row after it is updated||||null
The first argument to the sqlite3_bind_*_APIName routines is always a pointer to the sqlite3_stmt object returned from sqlite3_prepare_v2_APIName or its variants||||null
the behavior is undefined||||if it is used by an SQLITE_INSERT_API_constant callback
The third argument is the value to bind to the parameter||||null
In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants , literals may be replaced by a parameter that matches one of following templates||||null
In those routines that have a fourth argument , its value is the number of bytes in the parameter||||null
Invoking any of these routines from outside of a preupdate callback or with a database connection pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior||||null
the behavior is undefined||||if it is used by an SQLITE_DELETE_API_constant callback
using the sqlite3_bind_parameter_index_APIName API||||if desired
The index for named parameters can be looked up||||null
second and subsequent occurrences have the same index as the first occurrence||||When the same named SQL parameter is used more than once
The second argument must be an index into the aConstraint -LSB- -RSB- array belonging to the sqlite3_index_info structure passed to xBestIndex||||null
SQLITE_NOMEM_API_constant be returned by sqlite3_bind_value_APIName if malloc_APIName fails||||null
Unbound parameters are interpreted as NULL||||null
Bindings are not cleared by the sqlite3_reset_APIName routine||||null
A negative value for the zeroblob results in a zero-length BLOB||||null
To be clear||||null
See also||||null
sqlite3_bind_parameter_count_APIName , sqlite3_bind_parameter_name_APIName , and sqlite3_bind_parameter_index_APIName||||null
SQLITE_RANGE_API_constant is returned by sqlite3_bind_text_APIName if the parameter index is out of range||||null
The result of expressions involving strings with embedded NULs is undefined||||null
But global versions of those functions must exist||||null
The sqlite3_bind_* routines return SQLITE_OK_API_constant on success or an error code if anything goes wrong||||null
the value is the number of bytes in the value , not the number of characters||||null
The sqlite3_bind_zeroblob_APIName routine binds a BLOB of length N that is filled with zeroes||||null
Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module||||null
the behavior is undefined||||If the fourth parameter to sqlite3_bind_blob_APIName is negative
The sqlite3_bind_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0||||null
So the new function is not good for anything by itself||||null
The implementation of the new function always causes an exception to be thrown||||null
SQLITE_TOOBIG_API_constant might be returned if the size of a string or BLOB exceeds limits imposed by sqlite3_limit_APIName or SQLITE_MAX_LENGTH||||null
If sqlite3_bind_value_APIParam_5 has the value SQLITE_TRANSIENT_API_constant, SQLite makes its own private copy of the data immediately, before the sqlite3_bind_*_APIName routine returns||||null
Zeroblobs are intended to serve as placeholders for BLOBs whose content is later written using incremental BLOB I/O routines||||null
This API makes sure a global version of a function with a particular name and number of parameters exists||||null
a new function is created||||If no such function exists before this API is called
A zeroblob uses a fixed amount of memory||||while it is being processed
Its only purpose is to be a placeholder function that can be overloaded by a virtual table||||null
the result is undefined and probably harmful||||If any sqlite3_bind__APIName routine is passed a prepared statement that has been finalized
The callback registered by sqlite3_wal_autocheckpoint_APIName replaces any existing callback registered using sqlite3_wal_hook_APIName||||null
Checkpoints initiated by this mechanism are PASSIVE||||null
Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely||||null
The wal_autocheckpoint pragma can be used to invoke this interface from SQL||||null
See also||||null
On success, sqlite3_blob_read_APIName returns SQLITE_OK_API_constant||||null
Likewise , registering a callback using sqlite3_wal_hook_APIName disables the automatic checkpoint mechanism configured by sqlite3_wal_autocheckpoint_APIName||||null
The fifth argument to the BLOB and string binding interfaces is a destructor used to dispose of the BLOB or string after SQLite has finished with it||||null
the fourth parameter is ignored||||If the third parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_blob_APIName is a NULL pointer
and the end result is the same as sqlite3_bind_null_APIName||||null
Otherwise, an error code or an extended error code be returned by sqlite3_blob_read_APIName||||null
Every new database connection defaults to having the auto-checkpoint enabled with a threshold of 1000 or SQLITE_DEFAULT_WAL_AUTOCHECKPOINT pages||||null
The size of the blob can be determined using the sqlite3_blob_bytes_APIName interface||||null
sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer||||null
Further options may be added in the future||||null
The sixth argument to sqlite3_bind_text64_APIName must be one of SQLITE_UTF8_API_constant , SQLITE_UTF16_API_constant , SQLITE_UTF16_API_constantBE , or SQLITE_UTF16_API_constantLE to specify the encoding of the text in the third parameter||||null
will contain embedded NULs||||If any NUL characters occur at byte offsets less than the value of the fourth parameter the resulting string value
The third parameter is the new limit for that construct||||null
At present , there is only one option that may be configured using sqlite3_vtab_config_APIName||||null
the length of the string is the number of bytes up to the first zero terminator||||If the fourth parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName is negative
If sqlite3_blob_read_APIParam_3 or sqlite3_blob_read_APIParam_4 is less than zero, SQLITE_ERROR_API_constant be returned by sqlite3_blob_read_APIName and no data is read||||null
SQLite assumes that the information is in static , unmanaged space and does not need to be freed||||If the fifth argument is the special value SQLITE_STATIC_API_constant
N bytes of data are copied into buffer sqlite3_blob_read_APIParam_2 from the open BLOB , starting at offset sqlite3_blob_read_APIParam_4||||null
Passing any other pointer in to this routine results in undefined and probably undesirable behavior||||null
An attempt to read from an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant||||null
The internal databases can be given the large , default limits||||null
Developers might also want to use the sqlite3_set_authorizer_APIName interface to further control untrusted SQL||||null
The first parameter is the database connection whose limit is to be set or queried||||null
Attempts to increase a limit above its hard upper bound are silently truncated to the hard upper bound||||null
offset where the NUL terminator would occur assuming the string were NUL terminated||||If a non-negative fourth parameter is provided to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_text64_APIName that parameter must be the byte
If offset sqlite3_blob_read_APIParam_4 is less than sqlite3_blob_read_APIParam_3 bytes from the end of the BLOB, SQLITE_ERROR_API_constant be returned by sqlite3_blob_read_APIName and no data is read||||null
the limit is unchanged||||If the new limit is a negative number
The pArg argument is passed through to the callback||||null
New run-time limit categories may be added in future releases||||null
The size of the database created by an untrusted script can be contained using the max_page_count PRAGMA||||null
If any of the sqlite3_bind _ * _ APIName routines are called with a NULL pointer for the prepared statement or with a prepared statement  , the call will return SQLITE_MISUSE_API_constant||||null
The use of this interface is only necessary||||if the default setting is found to be suboptimal for a particular application
Any callback set by a previous call to sqlite3_rollback_hook_APIName for the same database connection is overridden||||null
a callback function to be invoked||||whenever a transaction is committed
Any callback set by a previous call to sqlite3_commit_hook_APIName for the same database connection is overridden||||null
The sqlite3_commit_hook_APIName interface registers||||null
This interface allows the size of various constructs to be limited on a connection by connection basis||||null
Databases managed by external sources can be given much smaller limits designed to prevent a denial of service attack||||null
The second parameter is one of the limit categories that define a class of constructs to be size limited||||null
a callback function to be invoked||||whenever a transaction is rolled back
The sqlite3_rollback_hook_APIName interface registers||||null
sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface||||null
The sqlite3_preupdate_depth_APIName interface returns 0 if the preupdate callback was invoked as a result of a direct insert, update, or delete operation||||null
For each limit category SQLITE_LIMIT_NAME there is a hard upper bound set at compile-time by a C preprocessor macro called SQLITE_MAX_NAME||||null
Hence , to find the current value of a limit without changing it , simply invoke this interface with sqlite3_limit_APIParam_3 set to -1||||null
or 1 for inserts , updates , or deletes invoked by top-level triggers||||null
If the callback on a commit hook function returns non-zero, the commit is converted into a rollback||||null
The commit and rollback hook callbacks are not reentrant||||null
An example application might be a web browser that has its own databases for storing history and separate databases controlled by JavaScript applications downloaded off the Internet||||null
or 2 for changes resulting from triggers called by top-level triggers||||null
and so forth||||null
committing a transaction||||if there are sqlite3_wal_autocheckpoint_APIParam_2 or more frames in the write-ahead log file
The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after||||null
Registering a NULL function disables the callback||||null
When the commit hook callback routine returns zero, the COMMIT operation is allowed to continue normally||||null
Run-time limits are intended for use in applications that manage both their own internal database and also databases that are controlled by untrusted external sources||||null
If the commit hook returns non-zero, the COMMIT is converted into a ROLLBACK||||null
or if the text encoding is different from the encoding specified by the sixth parameter||||If the sixth argument to sqlite3_bind_text64_APIName is not one of the allowed values shown above
the behavior is undefined||||null
See also the sqlite3_update_hook_APIName interface||||null
The callback implementation must not do anything that will modify the database connection that invoked the callback||||null
This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName||||null
the behavior is undefined||||If this interface is invoked outside the context of an xConnect or xCreate virtual table method
The rollback hook is invoked on a rollback that results from a commit hook returning non-zero, just as it would be with any other rollback||||null
SQLite will invoke sqlite3_free_APIName on *pzErrMsg after xEntryPoint_APIName returns||||null
This interface causes the xEntryPoint_APIName function to be invoked for each new database connection that is created||||null
SQLite ensures that * pzErrMsg is NULL before calling the xEntryPoint_APIName||||null
If any xEntryPoint_APIName returns an error, the sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName call that provoked the xEntryPoint_APIName will fail||||null
See also||||null
sqlite3_reset_auto_extension_APIName and sqlite3_cancel_auto_extension_APIName||||null
If the xEntryPoint routine encounters an error, it should make *pzErrMsg point to an appropriate error message  and return an appropriate error code||||null
the destructor is not called||||if sqlite3_bind_int_APIParam_3 is a NULL pointer or the fourth parameter is negative
The destructor is called to dispose of the BLOB or string , except||||null
Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the commit or rollback hook in the first place||||null
The sqlite3_commit_hook_APIName and sqlite3_rollback_hook_APIName functions return the P argument from the previous call of the same function on the same database connection D, or NULL for the first call for each function on D||||null
The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object||||null
No entry point will be called more than once for each database connection that is opened||||null
The rollback callback is not invoked||||if a transaction is automatically rolled back
Note that running any other SQL statements , including SELECT statements , or merely calling sqlite3_prepare_v2_APIName and sqlite3_step_APIName will modify the database connections for the meaning of `` modify '' in this paragraph||||null
The idea here is that xEntryPoint_APIName is the entry point for a statically linked SQLite extension that is to be automatically loaded into all new database connections||||null
Calling sqlite3_auto_extension_APIName with an entry point X that is already on the list of automatic extensions is a harmless no-op||||null
P. SQLite will invoke the destructor D with a single argument of P||||when it is finished using P
The sqlite3_bind_pointer_APIName routine causes the I-th parameter in prepared statement S to have an SQL value of NULL , but to also be associated with the pointer P of type T. D is either a NULL pointer or a pointer to a destructor function for||||null
If the database connection is associated with unfinalized prepared statements or unfinished sqlite3_backup objects sqlite3_close_APIName will leave the database connection open and return SQLITE_BUSY_API_constant||||null
Calls to sqlite3_close_APIName and sqlite3_close_v2_APIName return SQLITE_OK_API_constant if the sqlite3 object is successfully destroyed and all associated resources are deallocated||||null
Calling sqlite3_close_APIName or sqlite3_close_v2_APIName with a NULL pointer argument is a harmless no-op||||null
Any callback set by a previous call to sqlite3_update_hook_APIName for the same database connection is overridden||||null
The final callback parameter is the rowid of the row||||null
The first argument to the callback is a copy of the third argument to sqlite3_update_hook_APIName||||null
The sqlite3_close_v2_APIName interface is intended for use with host languages that are garbage collected , and where the order in which destructors are called is arbitrary||||null
In the case of an update , this is the rowid after the update takes place||||null
sqlite_master and sqlite_sequence -RRB-||||null
The third and fourth arguments to the callback contain pointers to the database and table name containing the affected row||||null
Applications should finalize all prepared statements , close all BLOB handles , and finish all sqlite3_backup objects associated with the sqlite3 object prior to attempting to close the object||||null
The exceptions defined in this paragraph might change in a future release of SQLite||||null
the transaction is automatically rolled back||||If an sqlite3 object is destroyed while a transaction is open
Parameters of the form '' ? ''||||null
See also||||null
See also the sqlite3_commit_hook_APIName , sqlite3_rollback_hook_APIName , and sqlite3_preupdate_hook_APIName interfaces||||null
sqlite3_bind_APIName , sqlite3_bind_parameter_count_APIName , and sqlite3_bind_parameter_index_APIName||||null
The length returned by sqlite3_str_length_APIName does not include the zero-termination byte||||null
is included as part of the name||||null
The second callback argument is one of SQLITE_INSERT_API_constant , SQLITE_DELETE_API_constant , or SQLITE_UPDATE_API_constant , depending on the operation that caused the callback to be invoked||||null
These interfaces return the current status of an sqlite3_str object||||null
hook is not invoked||||when WITHOUT ROWID tables are modified
The update||||null
If sqlite3_compileoption_get_APIParam_1 is out of range, sqlite3_compileoption_get_APIName returns a NULL pointer||||null
The second argument is a pointer to the function to invoke||||when a row is updated , inserted or deleted in a rowid table
The SQLITE _ prefix may be omitted from the option name passed to sqlite3_compileoption_used_APIName||||null
hook invoked||||when rows are deleted using the truncate optimization
Nor is the update||||null
The SQLITE_ prefix is omitted from any strings returned by sqlite3_compileoption_get_APIName||||null
The sqlite3_close_v2_APIParam_1 parameter to sqlite3_close_APIName and sqlite3_close_v2_APIName must be either a NULL pointer or an sqlite3 object pointer obtained from sqlite3_open_APIName , sqlite3_open16_APIName , or sqlite3_open_v2_APIName , and not previously closed||||null
a transaction is said to have been rolled back||||if an explicit `` ROLLBACK '' statement is executed
For the purposes of this API , , or an error or constraint causes an implicit rollback to occur||||null
Autocommit mode is disabled by a BEGIN statement||||null
Autocommit mode is on by default||||null
See also||||null
The sqlite3_str_value_APIName method returns a pointer to the current content of the dynamic string under construction in X||||null
SQL functions sqlite_compileoption_used_APIName and sqlite_compileoption_get_APIName and the compile_options pragma||||null
Autocommit mode is re-enabled by a COMMIT or ROLLBACK||||null
Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of `` modify '' in this paragraph||||null
The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating  compile time||||null
The first host parameter has an index of 1 , not 0||||null
The sqlite3_str_length_APIName method returns the current length, in bytes, of the dynamic string under construction in sqlite3_str object X||||null
The update hook implementation must not do anything that will modify the database connection that invoked the update hook||||null
Applications must not used the pointer returned sqlite3_str_value_APIName after any subsequent method call on the same object||||null
The sqlite3_compileoption_get_APIName function allows iterating over the list of options that were defined at compile time by returning the N-th compile time option string||||null
without a following integer have no name and are referred to as `` nameless '' or `` anonymous parameters ''||||null
If the value N is out of range or if the N-th parameter is nameless, NULL be returned by sqlite3_bind_parameter_name_APIName||||null
Support for the diagnostic functions sqlite3_compileoption_used_APIName and sqlite3_compileoption_get_APIName may be omitted by specifying the SQLITE_OMIT_COMPILEOPTION_DIAGS option at compile time||||null
The sqlite3_update_hook_APIName interface registers a callback function with the database connection identified by the first argument to be invoked||||whenever a row is updated , inserted or deleted in a rowid table
Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the update hook||||null
The only way to find out is to use sqlite3_get_autocommit_APIName||||null
sqlite3_bind_parameter_name_APIParam_0 is always in UTF-8 encoding||||null
the database connection becomes an unusable `` zombie '' which will automatically be deallocated when the last prepared statement is finalized or the last sqlite3_backup is finished||||If sqlite3_close_v2_APIName is called with unfinalized prepared statements and/or unfinished sqlite3_backups
If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, the sqlite3_str_errcode_APIName method will return an appropriate error code||||null
The sqlite3_busy_handler_APIName interface is used to implement sqlite3_busy_timeout_APIName and PRAGMA busy_timeout||||null
The value returned by sqlite3_str_value_APIName is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same sqlite3_str object||||null
The sqlite3_get_autocommit_APIName interface returns non-zero or zero if the given database connection is or is not in autocommit mode, respectively||||null
The sqlite3_update_hook_APIName function returns the P argument from the previous call on the same database connection D, or NULL for the first call on D||||null
The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection  of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function||||null
If sqlite3_close_v2_APIName is called on a database connection that still has outstanding prepared statements, BLOB handles, and/or sqlite3_backup objects sqlite3_close_APIName returns SQLITE_OK_API_constant and the deallocation of resources is deferred until all prepared statements, BLOB handles, and sqlite3_backup objects are also destroyed||||null
The sqlite3_str_errcode_APIName method returns SQLITE_NOMEM_API_constant following any out-of-memory error, or SQLITE_TOOBIG_API_constant if the size of the dynamic string exceeds SQLITE_MAX_LENGTH, or SQLITE_OK_API_constant if there have been no errors||||null
If another thread changes the autocommit status of the database connection while this routine is running, the return value is undefined||||null
If the busy callback is NULL, SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName immediately upon encountering the lock||||null
If the callback returns non-zero, another attempt is made to access the database and the cycle repeats||||null
The default busy callback is NULL||||null
If the busy callback returns 0, no additional attempts are made to access the database and SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName to the application||||null
Applications may change the content of the string returned by sqlite3_str_value_APIName as long as they do not write into any bytes outside the range of 0 to sqlite3_str_length_APIName and do not read or write any byte after any subsequent sqlite3_str method call||||null
There can only be a single busy handler defined for each database connection||||null
If SQLite determines that invoking the busy handler could result in a deadlock, it will go ahead and return SQLITE_BUSY_API_constant to the application instead of invoking the busy handler||||null
the transaction might be rolled back automatically||||If certain kinds of errors occur on a statement within a multi-statement transaction
The first argument to the busy handler is a copy of the void * pointer which is the third argument to sqlite3_busy_handler_APIName||||null
SQLite returns SQLITE_BUSY_API_constant for the first process, hoping that this will induce the first process to release its read lock and allow the second process to proceed||||null
the callback might be invoked with two arguments||||If the busy callback is not NULL
The first process can not proceed and the second process can not proceed||||null
The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P. SQL parameters of the form "?NNN" or "||||null
the initial ''||||null
neither will make any progress||||If both processes invoke the busy handlers
The second argument to the busy handler callback is the number of times that the busy handler has been invoked previously for the same locking event||||null
Setting a new busy handler clears any previously set handler||||null
Any such actions result in undefined behavior||||null
the busy handler is not reentrant||||null
it will be invoked||||when there is lock contention
The presence of a busy handler does not guarantee that||||null
SQLITE_BUSY_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName||||null
it will not be invoked||||null
The busy callback should not take any actions which modify the database connection that invoked the busy handler||||null
All calls obtain an exclusive `` checkpoint '' lock on the database file||||null
A busy handler must not close the database connection or prepared statement that invoked the busy handler||||null
If any other process is running a checkpoint operation at the same time, the lock cannot be obtained and SQLITE_BUSY_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName||||null
Note that calling sqlite3_busy_timeout_APIName or evaluating PRAGMA busy_timeout = N will change the busy handler and thus clear any previously set busy handler||||null
If no error  is encountered while processing the attached databases, SQLITE_OK_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName||||null
The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database sqlite3_wal_checkpoint_v2_APIParam_2 of database connection sqlite3_wal_checkpoint_v2_APIParam_1 in mode sqlite3_wal_checkpoint_v2_APIParam_3||||null
'' or `` $ '' or '' @ '' or '' ? ''||||null
The SQLITE_CHECKPOINT_FULL_API_constant , RESTART and TRUNCATE modes also obtain the exclusive `` writer '' lock on the database file||||null
the values written to output parameters * pnLog and * pnCkpt are undefined||||null
If any other error occurs while processing an attached database, processing is abandoned and the error code be returned by sqlite3_wal_checkpoint_v2_APIName to the caller immediately||||null
The PRAGMA wal_checkpoint command can be used to invoke this interface from SQL||||null
hook is not invoked||||when internal system tables are modified -LRB- i.e
The update||||null
Unless sqlite3_wal_checkpoint_v2_APIName returns SQLITE_MISUSE_API_constant, the sqlite3_wal_checkpoint_v2_APIName interface sets the error information that is queried by sqlite3_errcode_APIName and sqlite3_errmsg_APIName||||null
If sqlite3_wal_checkpoint_v2_APIParam_2 is not NULL  and is not the name of any attached database, SQLITE_ERROR_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName to the caller||||null
The sqlite3_log_APIParam_2 string must not be NULL||||null
The busy-handler is also invoked||||while waiting for database readers as described above
Consider a scenario where one process is holding a read lock that it is trying to promote to a reserved lock and a second process is holding a reserved lock that it is trying to promote to an exclusive lock||||null
The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG_API_constant option to sqlite3_config_APIName||||null
might be invoked with argument P||||whenever an attempt is made to access a database table associated with database connection D when another thread or process has the table locked
The sqlite3_busy_handler_APIName routine sets a callback function X that||||null
Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE_API_constant , the log file will have been truncated to zero bytes and so both * pnLog and * pnCkpt will be set to zero||||null
the specified operation is attempted on all WAL databases attached to database connection sqlite3_wal_checkpoint_v2_APIParam_1||||If parameter sqlite3_wal_checkpoint_v2_APIParam_2 is NULL or points to a zero length string
the sqlite3_log_APIParam_2 string and subsequent arguments are used with sqlite3_snprintf_APIName to generate the final output string||||If logging is enabled
AAA '' or '' @AAA '' or `` $ AAA '' have a name which is the string '' ?||||null
AAA '' or '' @AAA '' or `` $ AAA '' respectively||||null
If the writer lock cannot be obtained immediately, and a busy-handler is configured, it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained||||null
If database sqlite3_wal_checkpoint_v2_APIParam_2 is the name of an attached database that is not in WAL mode, SQLITE_OK_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName and both *pnLog and *pnCkpt set to -1||||null
To avoid deadlocks and other threading problems , the sqlite3_log_APIName routine will not use dynamically allocated memory||||null
The log message is stored in a fixed-length buffer on the stack||||null
The sqlite3_log_APIName interface is intended for use by extensions such as virtual tables , collating functions , and SQL functions||||null
If an SQLITE_BUSY_API_constant error is encountered when processing one or more of the attached WAL databases, the operation is still attempted on any remaining attached databases and SQLITE_BUSY_API_constant be returned by sqlite3_wal_checkpoint_v2_APIName at the end||||null
to flush data accumulated in memory to disk -RRB-||||null
If the busy-handler returns 0 before the writer lock is obtained or while waiting for database readers, the checkpoint operation proceeds from that point in the same way as SQLITE_CHECKPOINT_PASSIVE_API_constant - checkpointing as many frames as possible without blocking any further||||null
If no successful INSERTs into rowid tables have ever occurred on the database connection D, sqlite3_last_insert_rowid_APIName returns zero||||null
Each entry in most SQLite tables has a unique 64-bit signed integer key called the `` rowid ''||||null
As well as being set automatically as rows are inserted into database tables, the value returned by sqlite3_last_insert_rowid_APIName may be set explicitly by sqlite3_set_last_insert_rowid_APIName||||null
subsequent calls to sqlite3_last_insert_rowid_APIName return the rowid associated with these internal INSERT operations, which leads to unintuitive results||||null
doing so is considered bad form||||While there is nothing to prevent an application from calling sqlite3_log_APIName
sqlite3_last_insert_rowid_APIName is accessible to SQL statements via the last_insert_rowid_APIName SQL function||||null
If an INSERT occurs within a trigger this routine will return the rowid of the inserted row as long as the trigger is running||||null
Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired||||null
Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using sqlite3_set_last_insert_rowid_APIName before returning control to the user||||null
SQLite can be compiled with or without mutexes||||null
The INSERT continues to completion after deleting rows that caused the constraint problem so INSERT OR REPLACE will always change the return value of this interface||||null
The sqlite3_last_insert_rowid_APIName interface usually returns the rowid of the most recent successful INSERT into a rowid table or virtual table on database connection D. Inserts into WITHOUT ROWID tables are not recorded||||null
Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK, and INSERT OR ABORT make no changes to the return value of this routine when their insertion fails||||null
For the purposes of this routine , an INSERT is considered to be successful||||null
it will be truncated to the length of the buffer||||If the log message is longer than a few hundred characters
Enabling mutexes incurs a measurable performance penalty||||null
that column is another alias for the rowid||||If the table has a column of type INTEGER PRIMARY KEY
But for maximum safety , mutexes should be enabled||||null
it does not fail||||When INSERT OR REPLACE encounters a constraint violation
The rowid is always available as an undeclared column named ROWID , OID , or _ ROWID _ as long as those names are not also used by explicitly declared columns||||null
The default behavior is for mutexes to be enabled||||null
Without the mutexes , it is not safe to use SQLite concurrently from more than one thread||||null
the return value from sqlite3_threadsafe_APIName is unchanged by calls to sqlite3_config_APIName||||null
See the threading mode documentation for additional information||||null
Executing any other type of SQL statement does not affect the value returned by sqlite3_total_changes_APIName||||null
This interface only reports on the compile-time mutex setting of the SQLITE_THREADSAFE flag||||null
* pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or||||If sqlite3_wal_checkpoint_v2_APIParam_4 is not NULL
the mutexes are omitted||||When the SQLITE_THREADSAFE macro is 0
The return value of the sqlite3_threadsafe_APIName function shows only the compile-time setting of thread safety, not any run-time changes to that setting made by sqlite3_config_APIName||||null
See also||||null
Changes to a view that are intercepted by INSTEAD OF triggers are not counted||||null
* pnCkpt is set to the total number of checkpointed frames in the log file or to -1 if the checkpoint could not run due to an error or||||If sqlite3_wal_checkpoint_v2_APIParam_5 is not NULL
mutexes are enabled||||When the SQLITE_THREADSAFE C preprocessor macro is 1 or 2
and SQLite is threadsafe||||null
The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object||||null
The sqlite3_str_new_APIParam_1 parameter to sqlite3_str_new_APIName may be NULL||||null
To avoid memory leaks, the object returned by sqlite3_str_new_APIName must be freed by a subsequent call to sqlite3_str_finish_APIName||||null
If a separate thread makes changes on the same database connection while sqlite3_total_changes_APIName is running the value returned is unpredictable and not meaningful||||null
sqlite3_total_changes_APIName returns the total number of rows inserted , modified or deleted by all INSERT , UPDATE or DELETE statements completed||||null
So , it makes sense to disable the mutexes||||if speed is of utmost importance
It is always safe to use the value returned by sqlite3_str_new_APIName as the sqlite3_str parameter to any of the other sqlite3_str methods||||null
To detect changes against a database file from other database connections use the PRAGMA data_version command or the SQLITE_FCNTL_DATA_VERSION_API_constant file control||||null
When the callback returns SQLITE_OK_API_constant, that means the operation requested is ok||||null
Changes made as part of foreign key actions are included in the count , but those made as part of REPLACE constraint resolution are not||||null
When the callback returns SQLITE_DENY_API_constant, the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message explaining that access is denied||||null
This interface can be used by an application to make sure that the version of SQLite that it is linking against was compiled with the desired setting of the SQLITE_THREADSAFE macro||||null
If a separate thread performs a new INSERT on the same database connection while the sqlite3_last_insert_rowid_APIName function is running and thus changes the last insert rowid, the value returned by sqlite3_last_insert_rowid_APIName is unpredictable and might not equal either the old or the new last insert rowid||||null
This routine registers an authorizer callback with a particular database connection , supplied in the first argument||||null
The SQLITE_IGNORE_API_constant return can be used to deny an untrusted user access to individual columns of a table||||null
The first parameter to the authorizer callback is a copy of the third parameter to the sqlite3_set_authorizer_APIName interface||||null
The second parameter to the callback is an integer action code that specifies the particular action to be authorized||||null
The authorizer callback is invoked as SQL statements are being compiled by sqlite3_prepare_APIName or its variants sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName||||null
If the authorizer callback returns any value other than SQLITE_IGNORE_API_constant, SQLITE_OK_API_constant, or SQLITE_DENY_API_constant the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message||||null
The authorizer callback should return SQLITE_OK_API_constant to allow the action, SQLITE_IGNORE_API_constant to disallow the specific action but allow the SQL statement to continue to be compiled, or SQLITE_DENY_API_constant to cause the entire SQL statement to be rejected with an error||||null
If the action code is SQLITE_DELETE_API_constant and the callback returns SQLITE_IGNORE_API_constant the DELETE operation proceeds but the truncate optimization is disabled and all rows are deleted individually||||null
Applications must always be prepared to encounter a NULL pointer in any of the third through the sixth parameters of the authorization callback||||null
If the action code is SQLITE_READ_API_constant and the callback returns SQLITE_IGNORE_API_constant the prepared statement statement is constructed to substitute a NULL value in place of the table column that would have been read if SQLITE_OK_API_constant had been returned||||null
an application may allow a user to enter arbitrary SQL queries for evaluation by a database||||null
The sqlite3_str_new_APIName interface always returns a pointer to a valid sqlite3_str object||||null
But the application does not want the user to be able to make arbitrary changes to the database||||null
The third through sixth parameters to the callback are either NULL pointers or zero-terminated strings that contain additional details about the action to be authorized||||null
Each call to sqlite3_set_authorizer overrides the previous call||||null
The authorizer is disabled by default||||null
Disable the authorizer by installing a NULL callback||||null
Only a single authorizer can be in place on a database connection at a time||||null
Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction -LRB- e.g||||null
The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback||||null
A database connection handle is usually returned in * ppDb||||null
If the database is opened  successfully, SQLITE_OK_API_constant be returned by sqlite3_open_APIName||||null
= 1 or = 2 mutexes are enabled by default but can be fully or partially disabled using a call to sqlite3_config_APIName with the verbs SQLITE_CONFIG_SINGLETHREAD_API_constant , SQLITE_CONFIG_MULTITHREAD_API_constant , or SQLITE_CONFIG_SERIALIZED_API_constant||||If SQLite is compiled with SQLITE_THREADSAFE
Otherwise an error code be returned by sqlite3_open_APIName||||null
Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of `` modify '' in this paragraph||||null
These routines open an SQLite database file as specified by the sqlite3_open_APIParam_1 argument||||null
At various points , as logic is being created to perform various actions , the authorizer callback is invoked to see if those actions are allowed||||during the compilation process
the maximum length of the string contained in the sqlite3_str object will be the value set for sqlite3_limit_APIName instead of SQLITE_MAX_LENGTH||||If the D parameter in sqlite3_str_new_APIName is not NULL
An authorizer could be put in place||||while the user-entered SQL is being prepared that disallows everything except SELECT statements
The default encoding will be UTF-8 for databases created using sqlite3_open_APIName or sqlite3_open_v2_APIName||||null
The default encoding for databases created using sqlite3_open16_APIName will be UTF-16 in the native byte order||||null
the authorizer callback is invoked only||||during sqlite3_prepare_APIName or its variants
Note that||||null
Applications that need to process SQL from untrusted sources might also consider lowering resource limits using sqlite3_limit_APIName and limiting database size using the max_page_count PRAGMA in addition to using an authorizer||||null
The sqlite3_open_APIParam_1 argument is interpreted as UTF-8 for sqlite3_open_APIName and sqlite3_open_v2_APIName and as UTF-16 in the native byte order for sqlite3_open16_APIName||||null
The sqlite3_open_v2_APIName interface works like sqlite3_open_APIName except that it accepts two additional parameters for additional control over the new database connection||||null
the correct authorizer callback remains in place||||during the sqlite3_step_APIName
Hence , the application should ensure that||||null
The sqlite3_errmsg_APIName or sqlite3_errmsg16_APIName routines can be used to obtain an English language description of the error following a failure of any of the sqlite3_open_APIName routines||||null
The SQLITE_OPEN_PRIVATECACHE_API_constant flag causes the database connection to not participate in shared cache mode||||null
the SQLITE_READ_API_constant authorizer callback is invoked once for that table with a column name that is an empty string||||When a table is referenced by a SELECT but no column values are extracted from that table FROM tab '' -RRB-
This in-memory database will vanish||||when the database connection is closed
The flags parameter to sqlite3_open_v2_APIName can take one of the following three values , optionally combined with the SQLITE_OPEN_NOMUTEX_API_constant , SQLITE_OPEN_FULLMUTEX_API_constant , SQLITE_OPEN_SHAREDCACHE_API_constant , SQLITE_OPEN_PRIVATECACHE_API_constant , and/or SQLITE_OPEN_URI_API_constant flags||||null
resources associated with sqlite3 should be released by passing sqlite3 to sqlite3_close_APIName||||when it is no longer required
Authorization is not performed , unless as stated in the previous paragraph , sqlite3_step_APIName invokes sqlite3_prepare_v2_APIName to reprepare a statement after a schema change||||during statement evaluation in sqlite3_step_APIName
the default sqlite3_vfs object is used||||If the fourth parameter is a NULL pointer
An authorizer is used , to ensure that the SQL statements do not try to access data they are not allowed to see , or that they do not try to execute malicious statements that damage the database||||when preparing SQL statements from an untrusted source
the behavior is undefined||||If the 3_APIConstant parameter to sqlite3_open_v2_APIName is not one of the combinations shown above optionally combined with other SQLITE_OPEN _ * bits
a NULL will be written into * ppDb instead of a pointer to the sqlite3 object||||if SQLite is unable to allocate memory to hold the sqlite3 object
The only exception is that||||null
Future versions of SQLite might make use of additional special filenames that begin with the ''||||null
'' character||||null
This private database will be automatically deleted as soon as the database connection is closed||||null
See `` URI filenames '' for additional information||||null
URI filenames are parsed according to RFC 3986||||null
The SQLITE_OPEN_SHAREDCACHE_API_constant flag causes the database connection to be eligible to use shared cache mode , regardless of||||null
The fourth parameter to sqlite3_open_v2_APIName is the name of the sqlite3_vfs object that defines the operating system interface that the new database connection should use||||null
If the authority is not an empty string or "localhost", an error be returned by sqlite3_open16_APIName to the caller||||null
URI sqlite3_open_APIParam_1 interpretation is turned off by default , but future releases of SQLite might enable URI sqlite3_open_APIParam_1 interpretation by default||||null
SQLite and its built-in VFSes interpret the following query parameters||||null
a private , temporary on-disk database will be created||||If the sqlite3_open_APIParam_1 is an empty string
Future versions of SQLite might understand additional query parameters||||null
the database connection opens in the serialized threading mode unless single-thread was previously selected at compile-time or start-time||||If the SQLITE_OPEN_FULLMUTEX_API_constant flag is set
See `` query parameters with special meaning to SQLite '' for additional information||||null
SQLite uses the path component of the URI as the name of the disk file which contains the database||||null
Specifying an unknown parameter in the query component of a URI is not an error||||null
The fragment component of a URI , , is ignored||||if present
'' , the sqlite3_open_APIParam_1 is interpreted as a URI||||null
See also||||null
URI hexadecimal escape sequences are supported within the path and query components of a URI||||null
It is recommended||||that when a database sqlite3_open_v2_APIParam_1 actually does begin with a ''
it must be either an empty string or the string `` localhost ''||||If the URI contains an authority
The query component of a URI may contain parameters that are interpreted either by SQLite itself , or by a custom VFS implementation||||null
Note to Windows Runtime users||||null
Filenames containing international characters must be converted to UTF-8 prior to passing them into sqlite3_open_APIName or sqlite3_open_v2_APIName||||null
Otherwise , various features that require the use of temporary files may fail||||null
the database connection opens in the multi-thread threading mode as long as the single-thread mode has not been set at compile-time or start-time||||If the SQLITE_OPEN_NOMUTEX_API_constant flag is set
It is provided to support rare applications with unusual needs||||null
The sqlite3_config_APIName interface is not threadsafe||||null
The temporary directory must be set prior to calling sqlite3_open_APIName or sqlite3_open_v2_APIName||||null
'' character you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as ''||||null
Note to Windows users||||null
The sqlite3_config_APIName interface is used to make global configuration changes to SQLite||||null
If sqlite3_config_APIName is called after sqlite3_initialize_APIName and before sqlite3_shutdown_APIName it will return SQLITE_MISUSE_API_constant||||null
The default configuration is recommended for most applications and so this routine is usually not necessary||||null
the results are undefined||||If this process generates an invalid UTF-8 encoding
When a configuration option is set, sqlite3_config_APIName returns SQLITE_OK_API_constant||||null
The encoding used for the sqlite3_open_APIParam_1 argument of sqlite3_open_APIName and sqlite3_open_v2_APIName must be UTF-8 , not whatever codepage is currently defined||||null
The sqlite3_stmt_busy_APIName interface returns false if sqlite3_stmt_busy_APIParam_1 is a NULL pointer||||null
Subsequent arguments vary depending on the configuration option in sqlite3_config_APIParam_1||||null
If the option is unknown or SQLite is unable to set the option this routine returns a non-zero error code||||null
The sqlite3_config_APIName interface may only be invoked prior to library initialization using sqlite3_initialize_APIName or after shutdown by sqlite3_shutdown_APIName||||null
Note , however , that sqlite3_config_APIName can be called as part of the implementation of an application-defined sqlite3_os_init_APIName||||null
The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection||||null
Subsequent arguments vary depending on the configuration verb||||null
Calls to sqlite3_db_config_APIName return SQLITE_OK_API_constant if and only if the call is considered successful||||null
The first argument to sqlite3_config_APIName is an integer configuration option that determines what property of SQLite is to be configured||||null
or if it has been enabled globally using the SQLITE_CONFIG_URI_API_constant option with the sqlite3_config_APIName method or by the SQLITE_USE_URI compile-time option||||if the SQLITE_OPEN_URI_API_constant flag is set in sqlite3_open_APIParam_3 to sqlite3_open_v2_APIName
URI sqlite3_open_APIParam_1 interpretation is enabled||||null
See also||||null
no other SQLite interfaces are invoked by other threads||||while sqlite3_config_APIName is running
The application must ensure that||||null
The sqlite3_stmt_busy_APIName interface returns true  if the prepared statement sqlite3_stmt_busy_APIParam_1 has been stepped at least once using sqlite3_step_APIName but has neither run to completion  nor been reset using sqlite3_reset_APIName||||null
The interface is similar to sqlite3_config_APIName except that the changes apply to a single database connection||||null
Before the path or query components of a URI sqlite3_open16_APIParam_1 are interpreted , they are encoded using UTF-8 and all hexadecimal escape sequences replaced by a single byte containing the corresponding octet||||null
The caller is responsible for freeing sqlite3_serialize_APIParam_0 to avoid a memory leak||||null
For an ordinary on-disk database file , the serialization is just a copy of the disk file||||null
This interface can be used in combination sqlite3_next_stmt_APIName to locate all prepared statements associated with a database connection that are in need of being reset||||null
The second argument to sqlite3_db_config is the configuration verb - an integer code that indicates what aspect of the database connection is being configured||||null
The usual case is that sqlite3_serialize_APIName copies the serialization of the database into memory obtained from sqlite3_malloc64_APIName and returns a pointer to that memory||||null
A call to sqlite3_serialize_APIName might return NULL||||null
Cache sharing is enabled and disabled for an entire process||||null
The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the sqlite3_serialize_APIParam_2 database on database connection D. If sqlite3_serialize_APIParam_3 is not a NULL pointer, the size of the database in bytes is written into *P||||null
all virtual table modules are removed||||If the sqlite3_drop_modules_APIParam_2 parameter is NULL
However, if the F argument contains the SQLITE_SERIALIZE_NOCOPY_API_constant bit, no memory allocations are made, and the sqlite3_serialize_APIName function will return a pointer to the contiguous memory representation of the database that SQLite is currently using for that database, or NULL if the no such contiguous memory representation of the database exists||||null
This interface is only available||||if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option
On windows , the first component of an absolute path is a drive specification -LRB- e.g||||null
This is a change as of SQLite version 3.5.0||||null
This routine returns SQLITE_OK_API_constant if shared cache was enabled or disabled successfully||||null
This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database||||null
The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection sqlite3_drop_modules_APIParam_1 except those named on list sqlite3_drop_modules_APIParam_2||||null
In prior versions of SQLite , sharing was enabled or disabled for each thread separately||||null
Shared cache is disabled by default||||null
Sharing is enabled and disabled if the argument is false||||if the argument is true
Existing database connections continue use the sharing mode that was in effect at the time they were opened||||null
But this might change in future releases of SQLite||||null
the behavior is undefined and probably undesirable||||If sqlite3_stmt_busy_APIParam_1 is not a NULL pointer and is not a pointer to a valid prepared statement object
See Also||||null
SQLite Shared-Cache Mode||||null
This method is disabled on MacOS X 10.7 and iOS version 5.0 and will always return SQLITE_MISUSE_API_constant||||null
Applications that care about shared cache setting should set it explicitly||||null
The cache sharing mode set by this interface effects all subsequent calls to sqlite3_open_APIName , sqlite3_open_v2_APIName , and sqlite3_open16_APIName||||null
'' , a private , temporary in-memory database is created for the connection||||null
On those systems , shared cache mode should be enabled per-database connection via sqlite3_open_v2_APIName with SQLITE_OPEN_SHAREDCACHE_API_constant||||null
This interface is threadsafe on processors where writing a 32-bit integer is atomic||||null
The filename returned by sqlite3_db_filename_APIName is the output of the xFullPathname method of the VFS||||null
The sqlite3_initialize_APIName routine initializes the SQLite library||||null
The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database sqlite3_db_filename_APIParam_2 of connection D.  The main database file has the name "main"||||null
This routine must be called from the same thread in which the application-defined function is running||||null
The sqlite3_shutdown_APIName routine deallocates any resources that were allocated by sqlite3_initialize_APIName||||null
The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter  of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function||||null
All other calls are harmless no-ops||||null
These routines are designed to aid in process initialization and shutdown on embedded systems||||null
Workstation applications using SQLite normally do not need to invoke either of these routines||||null
would be written to disk where backed up to disk||||if that database
For an in-memory database or a `` TEMP '' database , the serialization is the same sequence of bytes which||||null
Only an effective call of sqlite3_initialize_APIName does any initialization||||null
Only an effective call to sqlite3_shutdown_APIName does any deinitialization||||null
All other valid calls to sqlite3_shutdown_APIName are harmless no-ops||||null
The xCreate and xConnect methods of a virtual table module call this interface to declare the format of the virtual tables they implement||||null
The sqlite3_initialize_APIName interface is threadsafe , but sqlite3_shutdown_APIName is not||||null
The sqlite3_shutdown_APIName interface must only be called from a single thread||||null
Among other things , sqlite3_initialize_APIName will invoke sqlite3_os_init_APIName||||null
the filename will be an absolute pathname||||null
Similarly , sqlite3_shutdown_APIName will invoke sqlite3_os_end_APIName||||null
it is interpreted as an absolute path||||If the path begins with a ' / ' character
the path is interpreted as a relative path||||If the path does not begin with a ' / '
A hexadecimal escape sequence consists of a percent sign - '' % '' - followed by exactly two hexadecimal digits specifying an octet value||||null
The sqlite3_initialize_APIName routine returns SQLITE_OK_API_constant on success||||null
If for some reason, sqlite3_initialize_APIName is unable to initialize the library  sqlite3_initialize_APIName returns an error code other than SQLITE_OK_API_constant||||null
If there is no attached database sqlite3_db_filename_APIParam_2 on the database connection D, or if database sqlite3_db_filename_APIParam_2 is a temporary or in-memory database, sqlite3_db_filename_APIName will return either a NULL pointer or an empty string||||null
Future releases of SQLite may require this||||null
The sqlite3_os_init_APIName routine does operating-system specific initialization of the SQLite library||||null
All open database connections must be closed and all other SQLite resources must be deallocated prior to invoking sqlite3_shutdown_APIName||||null
The sqlite3_os_end_APIName routine undoes the effect of sqlite3_os_init_APIName||||null
The application should never invoke either sqlite3_os_init_APIName or sqlite3_os_end_APIName directly||||null
An application-supplied implementation of sqlite3_os_init_APIName or sqlite3_os_end_APIName must return SQLITE_OK_API_constant on success and some other error code upon failure||||null
The application should only invoke sqlite3_initialize_APIName and sqlite3_shutdown_APIName||||null
For maximum portability , it is recommended that applications always invoke sqlite3_initialize_APIName directly prior to using any other SQLite interface||||null
The sqlite3_os_init_APIName interface is called automatically by sqlite3_initialize_APIName and sqlite3_os_end_APIName is called by sqlite3_shutdown_APIName||||null
The sqlite3_initialize_APIName routine is called internally by many other SQLite interfaces so that an application usually does not need to invoke sqlite3_initialize_APIName directly||||null
the application must supply a suitable implementation for sqlite3_os_init_APIName and sqlite3_os_end_APIName||||When built for other platforms
Typical tasks performed by these routines include allocation or deallocation of static resources , initialization of global variables , setting up a default sqlite3_vfs module , or setting up a default configuration using sqlite3_config_APIName||||null
the SQLite library will be automatically initialized||||when sqlite3_open_APIName is called if it has not be initialized already
sqlite3_open_APIName calls sqlite3_initialize_APIName so||||null
might become the default behavior in some future release of SQLite||||when SQLite is compiled with SQLITE_OMIT_AUTOINIT
the behavior exhibited||||null
or if it is the first time sqlite3_initialize_APIName is invoked following a call to sqlite3_shutdown_APIName||||if it is the first time sqlite3_initialize_APIName is invoked during the lifetime of the process
A call to sqlite3_initialize_APIName is an `` effective '' call||||null
Appropriate implementations for sqlite3_os_init_APIName and sqlite3_os_end_APIName are built into SQLite||||when it is compiled for Unix , Windows , or OS/2
the automatic calls to sqlite3_initialize_APIName are omitted||||if SQLite is compiled with the SQLITE_OMIT_AUTOINIT compile-time option
However , and the application must call sqlite3_initialize_APIName directly prior to using any other SQLite interface||||null
