[{"prop": "The application must ensure that the 1_APIConstant parameter to sqlite3_exec_APIName is a valid and open database connection", "cond": "null"}, {"prop": "resources associated with the sqlite3_open_v2_APIParam_2 should be released by passing sqlite3_open_v2_APIParam_2 to sqlite3_close_APIName.", "cond": "null"}, {"prop": "resources associated with the sqlite3_open_APIParam_2 should be released by passing sqlite3_open_APIParam_2 to sqlite3_close_APIName.", "cond": "null"}, {"prop": "Any such actions result in undefined behavior", "cond": "null"}, {"prop": "But for maximum safety , mutexes should be enabled", "cond": "null"}, {"prop": "The incremental blob I/O routines can only read or overwriting existing blob content", "cond": "null"}, {"prop": "The safest policy is to invoke these routines in one of the following ways", "cond": "null"}, {"prop": "Only the row can be changed", "cond": "null"}, {"prop": "The only way to find out whether SQLite automatically rolled back the transaction after an error is to use sqlite3_get_autocommit_APIName", "cond": "null"}, {"prop": "Only built-in memory allocators can be used", "cond": "null"}, {"prop": "The following must be true for sqlite3_snapshot_get_APIName to succeed", "cond": "null"}, {"prop": "Applications that need to process SQL from untrusted sources might also consider lowering resource limits using sqlite3_limit_APIName and limiting database size using the max_page_count PRAGMA in addition to using an authorizer", "cond": "null"}, {"prop": "the database connection must not be in autocommit mode", "cond": "when sqlite3_snapshot_open_APIName is called"}, {"prop": "Only an effective call to sqlite3_shutdown_APIName does any deinitialization", "cond": "null"}, {"prop": "the database handle must have no active statements", "cond": "null"}, {"prop": "the result is undefined and probably harmful", "cond": "If any sqlite3_bind__APIName routine is passed a prepared statement that has been finalized"}, {"prop": "There can only be a single busy handler for a particular database connection at any given moment", "cond": "null"}, {"prop": "the application must supply a suitable implementation for sqlite3_os_init_APIName and sqlite3_os_end_APIName", "cond": "When built for other platforms"}, {"prop": "As long as the input parameter is correct , these routines can only fail", "cond": "if an out-of-memory error occurs during a format conversion"}, {"prop": "The unlock-notify callback is not reentrant", "cond": "null"}, {"prop": "The callback function should normally return SQLITE_OK_API_constant", "cond": "null"}, {"prop": "Callback implementations should return zero to ensure future compatibility", "cond": "null"}, {"prop": "Applications must always be prepared to encounter a NULL pointer in any of the third through the sixth parameters of the authorization callback", "cond": "null"}, {"prop": "The authorizer callback should return SQLITE_OK_API_constant to allow the action, SQLITE_IGNORE_API_constant to disallow the specific action but allow the SQL statement to continue to be compiled, or SQLITE_DENY_API_constant to cause the entire SQL statement to be rejected with an error", "cond": "null"}, {"prop": "Applications must not used the pointer returned by sqlite3_str_value_APIName after any subsequent method call on the same object", "cond": "null"}, {"prop": "Applications that invoke sqlite3_create_collation_v2_APIName with a non-NULL xDestroy argument should check the return code and dispose of the application data pointer themselves rather than expecting SQLite to deal with it for them", "cond": "null"}, {"prop": "sqlite3_uri_parameter_APIName returns NULL and sqlite3_uri_boolean_APIName returns B", "cond": "null"}, {"prop": "The sqlite3_uri_boolean_APIName routine returns true if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of \"yes\", \"true\", or \"on\" in any case or if the value begins with a non-zero number", "cond": "null"}, {"prop": "the value returned is unpredictable and not meaningful", "cond": "null"}, {"prop": "the value returned is unpredictable and not meaningful", "cond": "null"}, {"prop": "The collating function must return an integer that is negative, zero, or positive", "cond": "null"}, {"prop": "zero is returned by sqlite3_uri_int64_APIName", "cond": "null"}, {"prop": "SQLITE_NOMEM_API_constant is returned by sqlite3_bind_value_APIName if malloc_APIName fails", "cond": "null"}, {"prop": "SQLITE_RANGE_API_constant is returned by sqlite3_bind_text_APIName ", "cond": "null"}, {"prop": "SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_open_APIName", "cond": "null"}, {"prop": "A zero is returned by sqlite3_bind_parameter_index_APIName", "cond": "null"}, {"prop": "SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_get_APIName", "cond": "null"}, {"prop": "SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName", "cond": "null"}, {"prop": "SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName", "cond": "null"}, {"prop": "SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName", "cond": "null"}, {"prop": "SQLITE_NOMEM_API_constant is returned by sqlite3_complete16_APIName", "cond": "null"}, {"prop": "SQLITE_OK_API_constant is returned by sqlite3_open_APIName", "cond": "null"}, {"prop": "then SQLITE_ERROR_API_constant is returned by sqlite3_file_control_APIName", "cond": "null"}, {"prop": "The sqlite3_mutex_notheld_APIName interface should also return 1 when given a NULL pointer", "cond": "null"}, {"prop": "These routines should return true", "cond": "null"}, {"prop": "the routine should return 1", "cond": "null"}, {"prop": "The sqlite3_value_dup_APIName interface returns NULL if sqlite3_value_dup_APIParam_1 is NULL or if a memory allocation fails", "cond": "null"}, {"prop": "sqlite3_next_stmt_APIName returns NULL", "cond": "null"}, {"prop": "sqlite3_column_database_name_APIName sqlite3_column_database_name16_APIName sqlite3_column_table_name_APIName sqlite3_column_table_name16_APIName sqlite3_column_origin_name_APIName sqlite3_column_origin_name16_APIName return NULL", "cond": "null"}, {"prop": "sqlite3_realloc_APIName returns NULL", "cond": "null"}, {"prop": "The sqlite3_expanded_sql_APIName interface returns NULL ", "cond": "null"}, {"prop": "The sqlite3_mutex_alloc_APIName routine returns NULL", "cond": "null"}, {"prop": "sqlite3_uri_boolean_APIName returns (B!=0).", "cond": "null"}, {"prop": "sqlite3_value_frombind_APIName returns zero", "cond": "null"}, {"prop": "sqlite3_column_bytes_APIName returns zero", "cond": "null"}, {"prop": "sqlite3_column_bytes16_APIName returns zero", "cond": "null"}, {"prop": "sqlite3_finalize_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "The sqlite3_strglob_APIName interface returns zero", "cond": "null"}, {"prop": "The sqlite3_stmt_readonly_APIName interface returns true", "cond": "null"}, {"prop": "The sqlite3_strlike_APIName interface returns zero", "cond": "null"}, {"prop": "sqlite3_blob_write_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "sqlite3_config_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "The sqlite3_data_count_APIName routine also returns 0 ", "cond": "null"}, {"prop": "The sqlite3_data_count_APIName routine returns 0 ", "cond": "null"}, {"prop": "The sqlite3_cancel_auto_extension_APIName routine returns 0", "cond": "null"}, {"prop": "The sqlite3_cancel_auto_extension_APIName routine returns 1", "cond": "null"}, {"prop": "sqlite3_data_count_APIName returns 0", "cond": "null"}, {"prop": "This routine returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "The sqlite3_db_readonly_APIName interface returns 1 if the database sqlite3_db_readonly_APIParam_2 of connection sqlite3_db_readonly_APIParam_1 is read-only, 0 if it is read/write, or -1 if sqlite3_db_readonly_APIParam_2 is not the name of a database on connection sqlite3_db_readonly_APIParam_1", "cond": "null"}, {"prop": "sqlite3_last_insert_rowid_APIName returns zero", "cond": "null"}, {"prop": "The sqlite3_stmt_busy_APIName interface returns false", "cond": "null"}, {"prop": "The sqlite3_stmt_isexplain_APIName interface returns 0 ", "cond": "null"}, {"prop": "The sqlite3_stmt_busy_APIName interface returns true", "cond": "null"}, {"prop": "The sqlite3_stmt_isexplain_APIName interface returns 1", "cond": "null"}, {"prop": "The sqlite3_table_column_metadata_APIName interface returns SQLITE_ERROR_API_constant and if the specified column does not exist", "cond": "null"}, {"prop": "sqlite3_complete_APIName and sqlite3_complete16_APIName return 0", "cond": "null"}, {"prop": "These routines return 1", "cond": "null"}, {"prop": "sqlite3_msize_APIName returns zero", "cond": "null"}, {"prop": "The sqlite3_keyword_name_APIName routine returns SQLITE_OK_API_constant if sqlite3_keyword_name_APIParam_1 is within bounds and SQLITE_ERROR_API_constant if not", "cond": "null"}, {"prop": "The sqlite3_keyword_check_APIName returning zero ", "cond": "null"}, {"prop": "The sqlite3_preupdate_depth_APIName interface returns 0 ", "cond": "null"}, {"prop": "The sqlite3_preupdate_depth_APIName interface returns 1", "cond": "null"}, {"prop": "The sqlite3_preupdate_depth_APIName interface returns 2", "cond": "null"}, {"prop": "The sqlite3_uri_boolean_APIName routines returns false ", "cond": "null"}, {"prop": "sqlite3_reset_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "a NULL pointer is returned by sqlite3_vfs_find_APIName", "cond": "null"}, {"prop": "a NULL pointer is returned by sqlite3_column_name_APIName", "cond": "null"}, {"prop": "a NULL pointer is returned by sqlite3_column_decltype16_APIName", "cond": "null"}, {"prop": "subsequent calls to sqlite3_value_type_APIName might return SQLITE_TEXT_API_constant", "cond": "null"}, {"prop": "The sqlite3_str_errcode_APIName method returns SQLITE_NOMEM_API_constant following any out-of-memory error, or SQLITE_TOOBIG_API_constant if the size of the dynamic string exceeds SQLITE_MAX_LENGTH, or SQLITE_OK_API_constant if there have been no errors", "cond": "null"}, {"prop": " sqlite3_value_pointer_APIName will return the pointer P. Otherwise, sqlite3_value_pointer_APIName returns a NULL", "cond": "null"}, {"prop": "The sqlite3_win32_set_directory interface returns SQLITE_OK_API_constant to indicate success, SQLITE_ERROR_API_constant if the sqlite3_win32_set_directory_APIParam_1 is unsupported, or SQLITE_NOMEM_API_constant if memory could not be allocated", "cond": "null"}, {"prop": "The sqlite3_bind_ routines return SQLITE_OK_API_constant on success or an error code if anything goes wrong", "cond": "null"}, {"prop": "then the call will return SQLITE_MISUSE_API_constant .", "cond": "null"}, {"prop": " no additional attempts are made to access the database and SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName to the application", "cond": "null"}, {"prop": "The return value from sqlite3_column_blob_APIName for a zero-length BLOB is a NULL pointer", "cond": "null"}, {"prop": "The underlying xFileControl method might also return SQLITE_ERROR_API_constant", "cond": "null"}, {"prop": "the value returned by sqlite3_snapshot_cmp_APIName is undefined", "cond": "null"}, {"prop": "the values returned by sqlite3_status_APIName are undefined", "cond": "null"}, {"prop": "sqlite3_db_filename_APIName will return either a NULL pointer or an empty string", "cond": "null"}, {"prop": "In the legacy interface, the return value will be either SQLITE_BUSY_API_constant, SQLITE_DONE_API_constant, SQLITE_ROW_API_constant, SQLITE_ERROR_API_constant, or SQLITE_MISUSE_API_constant", "cond": "null"}, {"prop": "the lock cannot be obtained and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName", "cond": "null"}, {"prop": "sqlite3_vtab_nochange_APIName returns true, during which the column value will not change", "cond": "null"}, {"prop": "The only exception is that if SQLite is unable to allocate memory to hold the sqlite3 object, a NULL will be written into *ppDb instead of a pointer to the sqlite3 object.", "cond": "null"}, {"prop": "The value returned by sqlite3_column_type_APIName is only meaningful", "cond": "null"}, {"prop": "NULL is returned by sqlite3_bind_parameter_name_APIName", "cond": "null"}, {"prop": "On success, sqlite3_blob_read_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "On success, SQLITE_OK_API_constant is returned by sqlite3_blob_open_APIName and the new BLOB handle is stored in ppBlob", "cond": "null"}, {"prop": "The sqlite3_aggregate_context_APIName routine returns a NULL pointer when first called if sqlite3_aggregate_context_APIParam_2 is less than or equal to zero or if a memory allocate error occurs", "cond": "null"}, {"prop": "Otherwise, an error code or an extended error code is returned by sqlite3_blob_read_APIName", "cond": "null"}, {"prop": "Otherwise, an error code or an extended error code is returned by sqlite3_blob_write_APIName", "cond": "null"}, {"prop": "Within the xUpdate method of a virtual table, the sqlite3_value_nochange_APIName interface returns true if and only if the column corresponding to sqlite3_value_nochange_APIParam_1 is unchanged by the UPDATE operation that the xUpdate method call was invoked to implement and if and the prior xColumn method call that was invoked to extracted the value for that column returned without setting a result", "cond": "null"}, {"prop": "SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read", "cond": "null"}, {"prop": "Calls to sqlite3_blob_read_APIName and sqlite3_blob_write_APIName for an expired BLOB handle fail with a return code of SQLITE_ABORT_API_constant", "cond": "null"}, {"prop": "All subsequent calls to sqlite3_blob_read_APIName, sqlite3_blob_write_APIName or sqlite3_blob_reopen_APIName on an aborted blob handle immediately return SQLITE_ABORT_API_constant", "cond": "null"}, {"prop": "an SQLite error code is returned by sqlite3_blob_reopen_APIName and the blob handle is considered aborted", "cond": "null"}, {"prop": "Calling sqlite3_blob_bytes_APIName on an aborted blob handle always returns zero", "cond": "null"}, {"prop": "sqlite3_blob_write_APIName returns SQLITE_READ_API_constantONLY", "cond": "null"}, {"prop": "it will return SQLITE_MISUSE_API_constant", "cond": "null"}, {"prop": "After at least \"ms\" milliseconds of sleeping, the handler returns 0 which causes sqlite3_step_APIName to return SQLITE_BUSY_API_constant", "cond": "null"}, {"prop": "SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written", "cond": "null"}, {"prop": "The value returned by sqlite3_changes_APIName immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero", "cond": "null"}, {"prop": "this routine returns a non-zero error code", "cond": "null"}, {"prop": "Otherwise, sqlite3_db_cacheflush_APIName returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "sqlite3_db_mutex_APIName returns a NULL pointer", "cond": "null"}, {"prop": "The sqlite3_str_finish_APIName interface will also return a NULL pointer", "cond": "null"}, {"prop": "sqlite3_compileoption_get_APIName returns a NULL pointer", "cond": "null"}, {"prop": "sqlite3_malloc_APIName returns a NULL pointer", "cond": "null"}, {"prop": "the sqlite3_get_auxdata_APIName interface returns a NULL pointer", "cond": "null"}, {"prop": "The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines return a NULL pointer ", "cond": "null"}, {"prop": "The sqlite3_db_status_APIName routine returns SQLITE_OK_API_constant on success and a non-zero error code on failure", "cond": "null"}, {"prop": "The sqlite3_status_APIName and sqlite3_status64_APIName routines return SQLITE_OK_API_constant on success and a non-zero error code on failure", "cond": "null"}, {"prop": "sqlite3_finalize_APIName returns the appropriate error code or extended error code", "cond": "null"}, {"prop": "An SQL operation that is interrupted will return SQLITE_INTERRUPT_API_constant", "cond": "null"}, {"prop": "the sqlite3_exec_APIName routine returns SQLITE_ABORT_API_constant without invoking the callback again and without running any subsequent SQL statements", "cond": "null"}, {"prop": "A call to sqlite3_serialize_APIName might return NULL", "cond": "null"}, {"prop": "The sqlite3_load_extension_APIName interface returns SQLITE_OK_API_constant on success and SQLITE_ERROR_API_constant if something goes wrong", "cond": "null"}, {"prop": "sqlite3_reset_APIName returns an appropriate error code", "cond": "null"}, {"prop": "the sqlite3_str_errcode_APIName method will return an appropriate error code", "cond": "null"}, {"prop": "The sqlite3_release_memory_APIName routine is a no-op returning zero", "cond": "null"}, {"prop": "sqlite3_snapshot_get_APIName may also return SQLITE_NOMEM_API_constant", "cond": "null"}, {"prop": "Otherwise, this API returns a negative value if P1 refers to an older snapshot than P2, zero if the two handles refer to the same database snapshot, and a positive value if P1 is a newer snapshot than P2", "cond": "null"}, {"prop": "no memory allocations are made, and the sqlite3_serialize_APIName function will return a pointer to the contiguous memory representation of the database that SQLite is currently using for that database, or NULL if the no such contiguous memory representation of the database exists", "cond": "null"}, {"prop": "Failure to reset the prepared statement using sqlite3_reset_APIName would result in an SQLITE_MISUSE_API_constant return from sqlite3_step_APIName", "cond": "null"}, {"prop": "In the \"v2\" interface, the more specific error code is returned directly by sqlite3_step_APIName", "cond": "null"}, {"prop": "The sqlite3_snapshot_open_APIName interface returns SQLITE_OK_API_constant on success or an appropriate error code if it fails", "cond": "null"}, {"prop": "But , sqlite3_stmt_readonly_APIName would still return true", "cond": "null"}, {"prop": "In the legacy interface, the sqlite3_step_APIName API always returns a generic error code, SQLITE_ERROR_API_constant, following any error other than SQLITE_BUSY_API_constant and SQLITE_MISUSE_API_constant", "cond": "null"}, {"prop": "The sqlite3_stmt_readonly_APIName interface returns true for BEGIN , but the BEGIN IMMEDIATE and BEGIN EXCLUSIVE commands do touch the database and so sqlite3_stmt_readonly_APIName returns false for those commands", "cond": "null"}, {"prop": "Transaction control statements such as BEGIN , COMMIT , ROLLBACK , SAVEPOINT , and RELEASE cause sqlite3_stmt_readonly_APIName to return true", "cond": "null"}, {"prop": "The sqlite3_str_finish_APIName interface may return a NULL pointer if any errors were encountered during construction of the string", "cond": "null"}, {"prop": "Note that sqlite3_strglob_APIName returns zero on a match and non-zero, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName", "cond": "null"}, {"prop": "sqlite3_table_column_metadata_APIName returns an error ", "cond": "null"}, {"prop": "sqlite3_unlock_notify_APIName always returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "In that case, sqlite3_value_nochange_APIName will return true for the same column in the xUpdate method", "cond": "null"}, {"prop": "SQLITE_ERROR_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName to the caller", "cond": "null"}, {"prop": "The sqlite3_update_hook_APIName function returns the P argument from the previous call on the same database connection D, or NULL for the first call on D", "cond": "null"}, {"prop": "These routine sqlite3_column_database_name_APIName sqlite3_column_database_name16_APIName sqlite3_column_table_name_APIName sqlite3_column_table_name16_APIName sqlite3_column_origin_name_APIName sqlite3_column_origin_name16_APIName might also return NULL", "cond": "null"}, {"prop": "SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName and both pnLog and pnCkpt set to -1", "cond": "null"}, {"prop": "Calls to sqlite3_close_APIName and sqlite3_close_v2_APIName return SQLITE_OK_API_constant ", "cond": "null"}, {"prop": "Calls to sqlite3_db_config_APIName return SQLITE_OK_API_constant", "cond": "null"}, {"prop": "sqlite3_close_APIName will leave the database connection open and return SQLITE_BUSY_API_constant", "cond": "null"}, {"prop": "The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time", "cond": "null"}, {"prop": "sqlite3_close_v2_APIName returns SQLITE_OK_API_constant and the deallocation of resources is deferred until all prepared statements, BLOB handles, and sqlite3_backup objects are also destroyed", "cond": "null"}, {"prop": "it returns a NULL pointer", "cond": "null"}, {"prop": "The SQLITE_OMIT_TRACE compile-time option causes sqlite3_expanded_sql_APIName to always return NULL", "cond": "null"}, {"prop": "The sqlite3_commit_hook_APIName and sqlite3_rollback_hook_APIName functions return the P argument from the previous call of the same function on the same database connection D, or NULL for the first call for each function on D", "cond": "null"}, {"prop": "The sqlite3_initialize_APIName routine returns SQLITE_OK_API_constant on success", "cond": "null"}, {"prop": "sqlite3_initialize_APIName returns an error code other than SQLITE_OK_API_constant", "cond": "null"}, {"prop": "sqlite3_sql_APIName will return the original string, \"SELECT $abc,:xyz\" but sqlite3_expanded_sql_APIName will return \"SELECT 2345,NULL\".", "cond": "null"}, {"prop": "Subsequent calls to sqlite3_get_auxdata_APIName return NULL", "cond": "null"}, {"prop": "On those systems, sqlite3_mutex_try_APIName will always return SQLITE_BUSY_API_constant", "cond": "null"}, {"prop": "The sqlite3_mutex_try_APIName interface returns SQLITE_OK_API_constant upon successful entry", "cond": "null"}, {"prop": "sqlite3_mutex_enter_APIName will block and sqlite3_mutex_try_APIName will return SQLITE_BUSY_API_constant", "cond": "null"}, {"prop": "an error is returned by sqlite3_open16_APIName to the caller", "cond": "null"}, {"prop": " the return value is arbitrary and meaningless", "cond": "null"}, {"prop": "sqlite3_value_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant", "cond": "null"}, {"prop": "sqlite3_column_type_APIParam_0 is one of SQLITE_INTEGER_API_constant , SQLITE_FLOAT_API_constant , SQLITE_TEXT_API_constant , SQLITE_BLOB_API_constant , or SQLITE_NULL_API_constant", "cond": "null"}, {"prop": "Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection", "cond": "null"}, {"prop": "Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection", "cond": "null"}, {"prop": "Any attempt to create a function with a longer name will result in SQLITE_MISUSE_API_constant being returned", "cond": "null"}, {"prop": "The sqlite3_get_autocommit_APIName interface returns non-zero or zero ", "cond": "null"}, {"prop": "the return value is undefined", "cond": "null"}, {"prop": "Strings returned by sqlite3_column_text_APIName and sqlite3_column_text16_APIName, even empty strings, are always zero-terminated", "cond": "null"}, {"prop": "pointers returned by prior calls to sqlite3_column_blob_APIName, sqlite3_column_text_APIName, and/or sqlite3_column_text16_APIName may be invalidated", "cond": "null"}, {"prop": "The pointers returned are valid until a type conversion occurs as described above, or until sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName is called", "cond": "null"}, {"prop": "An application-supplied implementation of sqlite3_os_init_APIName or sqlite3_os_end_APIName must return SQLITE_OK_API_constant on success and some other error code upon failure", "cond": "null"}, {"prop": "this routine simply checks for the existence of the table and returns SQLITE_OK_API_constant ", "cond": "null"}, {"prop": "this routine simply checks for the existence of the table and returns SQLITE_ERROR_API_constant ", "cond": "null"}, {"prop": "it will go ahead and return SQLITE_BUSY_API_constant to the application instead of invoking the busy handler", "cond": "null"}, {"prop": "The application should only invoke sqlite3_initialize_APIName and sqlite3_shutdown_APIName", "cond": "null"}, {"prop": "sqlite3_aggregate_context_APIName must be called from the same thread in which the aggregate SQL function is running", "cond": "null"}, {"prop": "These routines must be called from the same thread in which the SQL function is running", "cond": "null"}, {"prop": "A collating function must always return the same answer given the same inputs", "cond": "null"}, {"prop": "To avoid a resource leak , every open BLOB handle should eventually be released by a call to sqlite3_blob_close_APIName", "cond": "null"}, {"prop": "This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName", "cond": "null"}, {"prop": "This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName", "cond": "null"}, {"prop": "This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName", "cond": "null"}, {"prop": "The collating function must obey the following properties for all strings A , B , and C", "cond": "null"}, {"prop": "The application must finalize every prepared statement", "cond": "null"}, {"prop": "The sqlite3_config_APIName interface may only be invoked prior to library initialization using sqlite3_initialize_APIName or after shutdown by sqlite3_shutdown_APIName", "cond": "null"}, {"prop": "Applications that care about shared cache setting should set it explicitly", "cond": "null"}, {"prop": "The use of the sqlite3_enable_load_extension_APIName interface should be avoided", "cond": "null"}, {"prop": "It is recommended that the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method be used to enable only this interface", "cond": "null"}, {"prop": "The progress handler callback must not do anything that will modify the database connection that invoked the progress handler", "cond": "null"}, {"prop": "This interface sqlite3_deserialize_APIName is only available", "cond": "null"}, {"prop": "The sqlite3_snapshot_free_APIName interface is only available", "cond": "when the SQLITE_ENABLE_SNAPSHOT compile-time option is used"}, {"prop": "The sqlite3_snapshot_get_APIName interface is only available", "cond": "when the SQLITE_ENABLE_SNAPSHOT compile-time option is used"}, {"prop": "The sqlite3_snapshot_open_APIName interface is only available", "cond": "when the SQLITE_ENABLE_SNAPSHOT compile-time option is used"}, {"prop": "This interface sqlite3_snapshot_recover_APIName is only available", "cond": "null"}, {"prop": "This API sqlite3_stmt_scanstatus_reset_APIName is only available", "cond": "null"}, {"prop": "sqlite3_stmt_scanstatus_APIName is only available", "cond": "null"}, {"prop": "This API sqlite3_unlock_notify_APIName is only available", "cond": "null"}, {"prop": "These interfaces are only available", "cond": "if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option"}, {"prop": "This interface is only available", "cond": "if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option"}, {"prop": "This interface is only available", "cond": "if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option"}, {"prop": "This interface is only available", "cond": "if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option"}, {"prop": "This interface is only available", "cond": "if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option"}, {"prop": "sqlite3_step_APIName should not be called again on the VM", "cond": "null"}, {"prop": "You must call sqlite3_reset_APIName or sqlite3_finalize_APIName", "cond": "null"}, {"prop": "sqlite3_step_APIName should not be called again on this virtual machine without first calling sqlite3_reset_APIName to reset the virtual machine back to its initial state", "cond": "null"}, {"prop": "you should rollback the transaction before continuing", "cond": "If the statement is not a COMMIT and occurs within an explicit transaction"}, {"prop": "The use of this interface is only necessary", "cond": "if the default setting is found to be suboptimal for a particular application"}, {"prop": "After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName , sqlite3_step_APIName must be called one or more times to evaluate the statement", "cond": "null"}, {"prop": "This routine sqlite3_user_data_APIName must be called from the same thread in which the application-defined function is running", "cond": "null"}, {"prop": "The update hook implementation must not do anything that will modify the database connection that invoked the update hook", "cond": "null"}, {"prop": "Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the update hook", "cond": "null"}, {"prop": "The callback function should register the desired collation using sqlite3_create_collation_APIName , sqlite3_create_collation16_APIName , or sqlite3_create_collation_v2_APIName", "cond": "null"}, {"prop": "These APIs are only available", "cond": "if the library was compiled with the SQLITE_ENABLE_COLUMN_METADATA C-preprocessor symbol"}, {"prop": "The callback implementation must not do anything that will modify the database connection that invoked the callback", "cond": "null"}, {"prop": "Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the commit or rollback hook in the first place", "cond": "null"}, {"prop": "Applications should finalize all prepared statements , close all BLOB handles , and finish all sqlite3_backup objects associated with the sqlite3 object prior to attempting to close the object", "cond": "null"}, {"prop": "The application does not need to worry about freeing the result", "cond": "null"}, {"prop": "Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module", "cond": "null"}, {"prop": "After being freed , memory should neither be read nor written", "cond": "null"}, {"prop": "Memory to hold the error message string is managed internally and must not be freed by the application", "cond": "null"}, {"prop": "The string returned by sqlite3_expanded_sql_APIName must be free by the application by passing it to sqlite3_free_APIName", "cond": "null"}, {"prop": "A sqlite3_free_table_APIParam_1 table should be deallocated using sqlite3_free_table_APIName", "cond": "null"}, {"prop": "The sqlite3_shutdown_APIName interface must only be called from a single thread", "cond": "null"}, {"prop": "The application should never invoke either sqlite3_os_init_APIName or sqlite3_os_end_APIName directly", "cond": "null"}, {"prop": "the calling function must not try to call sqlite3_free_APIName directly", "cond": "null"}, {"prop": "After the application has finished with the result from sqlite3_get_table_APIName , it must pass the result table pointer to sqlite3_free_table_APIName", "cond": "null"}, {"prop": "All open database connections must be closed and all other SQLite resources must be deallocated prior to invoking sqlite3_shutdown_APIName", "cond": "null"}, {"prop": "so that an application usually does not need to invoke sqlite3_initialize_APIName directly", "cond": "null"}, {"prop": "The strings returned by these two routines should be released by sqlite3_free_APIName", "cond": "null"}, {"prop": "Hence sqlite3_set_auxdata_APIName should be called near the end of the function implementation and the function implementation should not make any use of P after sqlite3_set_auxdata_APIName has been called", "cond": "null"}, {"prop": "However , and the application must call sqlite3_initialize_APIName directly prior to using any other SQLite interface", "cond": "null"}, {"prop": "Static mutexes are for internal use by SQLite only", "cond": "null"}, {"prop": "Applications that use SQLite mutexes should use only the dynamic mutexes returned by SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant", "cond": "null"}, {"prop": "Some systems do not support the operation implemented by sqlite3_mutex_try_APIName", "cond": "null"}, {"prop": "The SQLite core never uses these routines except inside an assert_APIName and applications are advised to follow the lead of the core", "cond": "null"}, {"prop": "the mutex must be exited an equal number of times before another thread can enter", "cond": "null"}, {"prop": "External mutex implementations are only required to provide these routines", "cond": "null"}, {"prop": "The temporary directory must be set prior to calling sqlite3_open_APIName or sqlite3_open_v2_APIName", "cond": "null"}, {"prop": "This must only be used within SQLITE_UPDATE_API_constant and SQLITE_DELETE_API_constant preupdate callbacks", "cond": "null"}, {"prop": "This must only be used within SQLITE_INSERT_API_constant and SQLITE_UPDATE_API_constant preupdate callbacks", "cond": "null"}, {"prop": "the application must supply a custom mutex implementation using the SQLITE_CONFIG_MUTEX_API_constant option of the sqlite3_config_APIName function before calling sqlite3_initialize_APIName or any other public sqlite3 _ function that calls sqlite3_initialize_APIName", "cond": "null"}, {"prop": "These routines must be called from the same thread as the SQL function that supplied the sqlite3_value parameters", "cond": "null"}, {"prop": "The sqlite3_prepare_APIName interface is legacy and should be avoided", "cond": "null"}, {"prop": "The database connection must not have been closed", "cond": "null"}, {"prop": "application-defined SQL functions must be added to each database connection separately", "cond": "If an application uses more than one database connection"}, {"prop": "To execute an SQL statement , it must first be compiled into a byte-code program using one of these routines", "cond": "null"}, {"prop": "However , such calls must not close the database connection nor finalize or reset the prepared statement in which the function is running", "cond": "null"}, {"prop": "There can only be a single busy handler defined for each database connection", "cond": "null"}, {"prop": "The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback", "cond": "null"}, {"prop": "A busy handler must not close the database connection or prepared statement that invoked the busy handler", "cond": "null"}, {"prop": "The application must ensure that no other SQLite interfaces are invoked by other threads", "cond": "null"}, {"prop": "The busy callback should not take any actions which modify the database connection that invoked the busy handler", "cond": "null"}, {"prop": "you should call sqlite3_column_text_APIName , sqlite3_column_blob_APIName , or sqlite3_column_text16_APIName first to force the result into the desired format , invoke sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName to find the size of the result", "cond": "null"}, {"prop": "Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption", "cond": "null"}, {"prop": "This method is disabled on MacOS X 10.7 and iOS version 5.0 and will always return SQLITE_MISUSE_API_constant", "cond": "null"}, {"prop": "It is recommended that extension loading be disabled using the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method rather than this interface , so the load_extension_APIName SQL function remains disabled", "cond": "null"}, {"prop": "But it is not safe to call this routine with a database connection that is closed or might close before sqlite3_interrupt_APIName returns", "cond": "null"}, {"prop": "It is a grievous error for the application to try to use a prepared statement after it has been finalized", "cond": "null"}, {"prop": "For all versions of SQLite up to and including 3.6.23.1, a call to sqlite3_reset_APIName was required after sqlite3_step_APIName returned anything other than SQLITE_ROW_API_constant before any subsequent invocation of sqlite3_step_APIName", "cond": "null"}, {"prop": "The caller is responsible for freeing sqlite3_serialize_APIParam_0 to avoid a memory leak", "cond": "null"}, {"prop": "sqlite3_test_control_APIName is not for use by applications", "cond": "null"}, {"prop": "Without the mutexes , it is not safe to use SQLite concurrently from more than one thread", "cond": "null"}, {"prop": "Only sqlite3_free_table_APIName is able to release the memory properly and safely", "cond": "null"}, {"prop": "For maximum portability , it is recommended that applications always invoke sqlite3_initialize_APIName directly prior to using any other SQLite interface", "cond": "null"}, {"prop": "These routines sqlite3_trace_APIName and sqlite3_profile_APIName are deprecated", "cond": "null"}, {"prop": "The older interfaces are retained for backwards compatibility , but their use is discouraged", "cond": "null"}, {"prop": "The sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName interfaces are recommended for all new programs", "cond": "null"}, {"prop": "The calling function should free this memory by calling sqlite3_free_APIName", "cond": "null"}, {"prop": "Only the following subset of interfaces are subject to out-of-memory errors", "cond": "null"}, {"prop": "Only the following subset of interfaces are subject to out-of-memory errors", "cond": "null"}, {"prop": "The sqlite3_snapshot object returned from a successful call to sqlite3_snapshot_get_APIName must be freed using sqlite3_snapshot_free_APIName to avoid a memory leak", "cond": "null"}, {"prop": "Calling sqlite3_blob_close_APIName with an argument that is not a NULL pointer or an open blob handle results in undefined behaviour", "cond": "null"}, {"prop": "a crash or deadlock may be the result", "cond": "If an application invokes any sqlite3_xxx API functions from within an unlock-notify callback"}, {"prop": "the behavior is undefined", "cond": "If the third parameter is less than -1 or greater than 127"}, {"prop": "the behavior is undefined", "cond": "If the same thread tries to enter any mutex other than an SQLITE_MUTEX_RECURSIVE_API_constant more than once"}, {"prop": "the behavior is undefined", "cond": "If two different VFSes with the same name are registered"}, {"prop": "the behavior is undefined", "cond": "If a VFS is registered with a name that is NULL or an empty string"}, {"prop": "the behavior is undefined", "cond": "if it is used by an SQLITE_DELETE_API_constant callback"}, {"prop": "the behavior is undefined", "cond": "if it is used by an SQLITE_INSERT_API_constant callback"}, {"prop": "the behavior is undefined", "cond": "If the fourth parameter to sqlite3_bind_blob_APIName is negative"}, {"prop": "the behavior is undefined", "cond": "null"}, {"prop": "the behavior is undefined", "cond": "If this interface is invoked outside the context of an xConnect or xCreate virtual table method"}, {"prop": "the behavior is undefined", "cond": "If the 3_APIConstant parameter to sqlite3_open_v2_APIName is not one of the combinations shown above optionally combined with other SQLITE_OPEN _ * bits"}, {"prop": "the behavior of SQLite is undefined", "cond": "If a collating function fails any of the above constraints and that collating function is registered and used"}, {"prop": "then the behavior is undefined.", "cond": "null"}, {"prop": "the results are undefined", "cond": "If sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName are called from a different thread while any of these routines are pending"}, {"prop": "the results are undefined", "cond": "If two or more threads call one or more of these routines against the same prepared statement and column at the same time"}, {"prop": "the results are undefined", "cond": "If two or more threads call one or more column metadata interfaces for the same prepared statement and result column at the same time"}, {"prop": "the results are undefined", "cond": "If these routines are called from within the different thread than the one containing the application-defined function that received the sqlite3_context pointer"}, {"prop": "the results are undefined", "cond": "If this process generates an invalid UTF-8 encoding"}, {"prop": "the results are undefined", "cond": "If sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName are called from a different thread while any of these routines are pending"}, {"prop": "the results are undefined", "cond": "If two or more threads call one or more of these routines against the same prepared statement and column at the same time"}, {"prop": "the results are undefined", "cond": "If two or more threads call one or more column metadata interfaces for the same prepared statement and result column at the same time"}, {"prop": "the results are undefined", "cond": "If these routines are called from within the different thread than the one containing the application-defined function that received the sqlite3_context pointer"}, {"prop": "the results are undefined", "cond": "If this process generates an invalid UTF-8 encoding"}, {"prop": "the result is undefined", "cond": "null"}, {"prop": " the results are undefined", "cond": "null"}, {"prop": "that collation is no longer usable", "cond": "When all collating functions having the same name are deleted"}, {"prop": "That capability is no longer provided", "cond": "null"}, {"prop": "Use of this interface is not recommended", "cond": "null"}, {"prop": "It is not safe to pass a sqlite3_free_table_APIParam_1 table directly to sqlite3_free_APIName", "cond": "null"}, {"prop": "the behavior of sqlite3_msize_APIName is undefined and possibly harmful", "cond": "If sqlite3_msize_APIParam_1 points to something that is not the beginning of memory allocation , or if it points to a formerly valid memory allocation that has now been freed"}, {"prop": "pointers calls to sqlite3_keyword_name_APIName result in undefined behavior", "cond": "If either Z or sqlite3_keyword_name_APIParam_3 are NULL or invalid"}, {"prop": "Memory corruption , a segmentation fault , or other severe error might result", "cond": "if sqlite3_free_APIName is called with a non-NULL pointer that was not obtained from sqlite3_malloc_APIName or sqlite3_realloc_APIName"}, {"prop": "Attempting to deallocate a static mutex results in undefined behavior", "cond": "null"}, {"prop": "The parameter name must be given in UTF-8", "cond": "null"}, {"prop": "The sqlite3_log_APIParam_2 string must not be NULL", "cond": "null"}, {"prop": "The new row must meet the same criteria as for sqlite3_blob_open_APIName - it must exist and there must be either a blob or text value stored in the nominated column", "cond": "null"}, {"prop": "The `` iScanStatusOp '' must be one of the scanstatus options or the behavior of this interface is undefined", "cond": "null"}, {"prop": "The first parameter must be a copy of the SQL function context that is first parameter to the xStep or xFinal callback routine that implements the aggregate function", "cond": "null"}, {"prop": "To avoid memory leaks, the application should invoke sqlite3_free_APIName on error message strings returned through the 5_APIConstant parameter of sqlite3_exec_APIName after the error message string is no longer needed", "cond": "null"}, {"prop": "The database connection pointer sqlite3_next_stmt_APIParam_1 in a call to sqlite3_next_stmt_APIName must refer to an open database connection and must not be a NULL pointer", "cond": "null"}, {"prop": "The calling application should pass sqlite3_str_finish_APIParam_0 to sqlite3_free_APIName to avoid a memory leak", "cond": "null"}, {"prop": "xBestInde_APIParam_0 must be the sqlite3_index_info object that is the first parameter to the xBestIndex_APIName method", "cond": "null"}, {"prop": "The M argument should be the bitwise OR-ed combination of zero or more SQLITE_TRACE_API_constant constants", "cond": "null"}, {"prop": "To avoid memory leaks, the object returned by sqlite3_str_new_APIName must be freed by a subsequent call to sqlite3_str_finish_APIName", "cond": "null"}, {"prop": "The second argument must be an index into the aConstraint array belonging to the sqlite3_index_info structure passed to xBestIndex", "cond": "null"}, {"prop": "The sqlite3_close_v2_APIParam_1 parameter to sqlite3_close_APIName and sqlite3_close_v2_APIName must be either a NULL pointer or an sqlite3 object pointer obtained from sqlite3_open_APIName , sqlite3_open16_APIName , or sqlite3_open_v2_APIName , and not previously closed", "cond": "null"}, {"prop": "The sqlite3_create_collation_APIParam_3 sqlite3_create_collation_v2_APIParam_3 sqlite3_create_collation16_APIParam_3 must be one of SQLITE_UTF8, SQLITE_UTF16LE, SQLITE_UTF16BE, SQLITE_UTF16, SQLITE_UTF16_ALIGNED.", "cond": "null"}, {"prop": "The input to sqlite3_complete_APIName must be a zero-terminated UTF-8 string", "cond": "null"}, {"prop": "The input to sqlite3_complete16_APIName must be a zero-terminated UTF-16 string in native byte order", "cond": "null"}, {"prop": "The application must not read or write any part of a block of memory after it has been released using sqlite3_free_APIName or sqlite3_realloc_APIName", "cond": "null"}, {"prop": "The value of the sqlite3_get_auxdata_APIParam_2 parameter to these interfaces should be non-negative", "cond": "null"}, {"prop": "The pointer arguments to sqlite3_free_APIName and sqlite3_realloc_APIName must be either NULL or else pointers obtained from a prior invocation of sqlite3_malloc_APIName or sqlite3_realloc_APIName that have not yet been released", "cond": "null"}, {"prop": "The argument to sqlite3_mutex_alloc_APIName must be one of these integer constants", "cond": "null"}, {"prop": "The encoding used for the sqlite3_open_APIParam_1 argument of sqlite3_open_APIName and sqlite3_open_v2_APIName must be UTF-8 , not whatever codepage is currently defined", "cond": "null"}, {"prop": "Filenames containing international characters must be converted to UTF-8 prior to passing them into sqlite3_open_APIName or sqlite3_open_v2_APIName", "cond": "null"}, {"prop": "it must be either an empty string or the string `` localhost ''", "cond": "If the URI contains an authority"}, {"prop": "It is recommended that when a database sqlite3_open_v2_APIParam_1 actually does begin with a \":\" character you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as \"./\" to avoid ambiguity.", "cond": "null"}, {"prop": "The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined", "cond": "null"}, {"prop": "The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined", "cond": "null"}, {"prop": "it must be the byte offset into the string where the NULL terminator would appear if the string where NULL terminated", "cond": "null"}, {"prop": "sqlite3_str_append_APIParam_2 must contain at least sqlite3_str_append_APIParam_3 non-zero bytes of content", "cond": "null"}, {"prop": "The NNN value must be between 1 and the sqlite3_limit_APIName parameter SQLITE_LIMIT_VARIABLE_NUMBER_API_constant", "cond": "null"}, {"prop": "The sqlite3_win32_set_directory_APIParam_2 parameter should be NULL to cause the previous value to be freed via sqlite3_free", "cond": "null"}, {"prop": "The sqlite3_result_text64_APIName interface sets the return value of an application-defined function to be a text string in an encoding specified by the fifth parameter, which must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE", "cond": "null"}, {"prop": "sqlite3_str_append_APIParam_3 must be non-negative", "cond": "null"}, {"prop": "sqlite3_create_function_APIParam_7 and sqlite3_create_function_APIParam_8 must both be non-NULL", "cond": "null"}, {"prop": "The sqlite3_bind_text64_APIParam_6 must be one of SQLITE_UTF8_API_constant , SQLITE_UTF16_API_constant , SQLITE_UTF16_API_constantBE , or SQLITE_UTF16_API_constantLE to specify the encoding of the text in the third parameter", "cond": "null"}, {"prop": "An aggregate SQL function requires an implementation of xStep and xFinal and NULL pointer must be passed for xFunc", "cond": "null"}, {"prop": "The sqlite3_win32_set_directory8 and sqlite3_win32_set_directory16 interfaces behave exactly the same as the sqlite3_win32_set_directory interface except the string parameter must be UTF-8 or UTF-16 , respectively", "cond": "null"}, {"prop": "NULL pointers must be passed as sqlite3_create_function_APIParam_7 and sqlite3_create_function_APIParam_8", "cond": "null"}, {"prop": "sqlite3_bind_pointer_APIParam_5 is either a NULL pointer or a pointer to a destructor function for sqlite3_bind_pointer_APIParam_3", "cond": "null"}, {"prop": "Hence, the application should ensure that the correct authorizer callback remains in place during the sqlite3_step_APIName.", "cond": "null"}, {"prop": "sqlite3_prepare_v3_APIName differs from sqlite3_prepare_v2_APIName only in having the extra sqlite3_prepare_v3_APIParam_4 , which is a bit array consisting of zero or more of the SQLITE_PREPARE_PERSISTENT, SQLITE_PREPARE_NORMALIZE and SQLITE_PREPARE_NO_VTAB", "cond": "null"}, {"prop": "In a multithreaded environment , an unprotected sqlite3_value object may only be used safely with sqlite3_bind_value_APIName and sqlite3_result_value_APIName", "cond": "null"}, {"prop": "The first host parameter has an index of 1 , not 0", "cond": "null"}, {"prop": "However , the column , table , or database of a BLOB handle can not be changed after the BLOB handle is opened", "cond": "null"}, {"prop": "sqlite3_create_window_function_APIParam_8 and sqlite3_create_window_function_APIParam_9 may either both be NULL , in which case a regular aggregate function is created , or must both be non-NULL , in which case the new function may be used as either an aggregate or aggregate window function", "cond": "null"}, {"prop": "Testing suggests that , most applications will achieve adequate soft heap limit enforcement without the use of SQLITE_ENABLE_MEMORY_MANAGEMENT", "cond": "null"}, {"prop": "It is recommended that you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as \"./\" to avoid ambiguity.", "cond": "null"}, {"prop": "To delete an existing SQL function or aggregate , pass NULL pointers for all three function callbacks", "cond": "null"}, {"prop": "The length of the name is limited to 255 bytes in a UTF-8 representation , exclusive of the zero-terminator", "cond": "null"}, {"prop": " that parameter must be the byte offset where the NUL terminator would occur assuming the string were NUL terminated.", "cond": "null"}, {"prop": "For security reasons , the SQLITE_DIRECTONLY_API_constant flag is recommended for any application-defined SQL function that has side-effects", "cond": "null"}, {"prop": "At present , there is only one option that may be configured using sqlite3_vtab_config_APIName", "cond": "null"}, {"prop": "The SQLite query planner is able to perform additional optimizations on deterministic functions , so use of the SQLITE_DETERMINISTIC_API_constant flag is recommended where possible", "cond": "null"}, {"prop": "A call to sqlite3_snapshot_open_APIName will fail", "cond": "if the database connection sqlite3_snapshot_open_APIParam_1 does not know that the database file for schema sqlite3_snapshot_open_APIParam_2 is in WAL mode"}, {"prop": "the behavior is undefined and probably undesirable", "cond": "If sqlite3_stmt_busy_APIParam_1 is not a NULL pointer and is not a pointer to a valid prepared statement object"}, {"prop": "the result is undefined behavior", "cond": "If the table name parameter T in a call to sqlite3_table_column_metadata is NULL"}, {"prop": "the busy handler is not reentrant", "cond": "null"}, {"prop": "Type conversions and pointer invalidations might occur in the following cases", "cond": "null"}, {"prop": "On those systems , shared cache mode should be enabled per-database connection via sqlite3_open_v2_APIName with SQLITE_OPEN_SHAREDCACHE_API_constant", "cond": "null"}, {"prop": "Developers might also want to use the sqlite3_set_authorizer_APIName interface to further control untrusted SQL", "cond": "null"}, {"prop": "The sqlite3_finalize_APIName routine can be called at any point after any call to sqlite3_step_APIName regardless of ", "cond": "null"}, {"prop": "the result of the comparison is undefined", "cond": "If the two snapshot handles are not associated with the same database file"}, {"prop": "Passing any other pointer into this routine results in undefined and probably undesirable behavior", "cond": "null"}, {"prop": "Even reading previously freed memory might result in a segmentation fault or other severe error", "cond": "null"}, {"prop": "The calling procedure is responsible for deleting the compiled SQL statement using sqlite3_finalize_APIName after it has finished with it", "cond": "null"}, {"prop": "the resulting string will contain embedded NULs and the result of expressions operating on strings with embedded NULs is undefined", "cond": "If any NUL characters occur in the string at a byte offset that is less than the value of the 3_APIConstant parameter"}, {"prop": "The result of expressions involving strings with embedded NULs is undefined", "cond": "null"}, {"prop": "the behavior of this routine is undefined and probably undesirable", "cond": "If sqlite3_uri_boolean_APIParam_1 is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method"}, {"prop": "sqlite3_blob_open_APIName fails with SQLITE_ERROR_API_constant", "cond": "if any of the following are true"}, {"prop": "Do not mix calls to sqlite3_column_text_APIName or sqlite3_column_blob_APIName with calls to sqlite3_column_bytes16_APIName , and do not mix calls to sqlite3_column_text16_APIName with calls to sqlite3_column_bytes_APIName", "cond": "null"}, {"prop": "ppBlob is set to NULL", "cond": "null"}, {"prop": "ppStmt is set to NULL", "cond": "null"}, {"prop": "sqlite3_blob_write_APIName may only modify the contents of the BLOB", "cond": "null"}, {"prop": "Perhaps it was called on a prepared statement that has already been finalized or on one that had previously returned SQLITE_ERROR_API_constant or SQLITE_DONE_API_constant", "cond": "null"}, {"prop": "Workstation applications using SQLite normally do not need to invoke either of these routines", "cond": "null"}, {"prop": "SQLite will only request a recursive mutex in cases where it really needs one", "cond": "null"}, {"prop": "The sqlite3_uri_int64_APIName routine converts the value of sqlite3_uri_int64_APIParam_2 into a 64-bit signed integer and returns that integer, or sqlite3_uri_int64_APIParam_3 if sqlite3_uri_int64_APIParam_2 does not exist", "cond": "null"}, {"prop": " the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message explaining that access is denied", "cond": "null"}, {"prop": "the more specific error codes are returned directly by sqlite3_step_APIName", "cond": "null"}, {"prop": "The return value from sqlite3_soft_heap_limit64_APIName is the size of the soft heap limit prior to the call, or negative in the case of an error", "cond": "null"}, {"prop": "SQLITE_TOOBIG_API_constant might be returned", "cond": "null"}, {"prop": "The default configuration is recommended for most applications and so this routine is usually not necessary", "cond": "null"}, {"prop": "sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table", "cond": "null"}, {"prop": "A call to sqlite3_initialize_APIName is an \"effective\" call", "cond": "null"}, {"prop": "sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation", "cond": "null"}, {"prop": "These routines may only be called when the most recent call to sqlite3_step_APIName has returned SQLITE_ROW_API_constant and neither sqlite3_reset_APIName nor sqlite3_finalize_APIName have been called subsequently", "cond": "null"}, {"prop": "The SQLITE_IGNORE_API_constant return can be used to deny an untrusted user access to individual columns of a table", "cond": "null"}, {"prop": "This error code is not remembered and will not be recalled by sqlite3_errcode_APIName or sqlite3_errmsg_APIName", "cond": "null"}, {"prop": "the maximum length of the string contained in the sqlite3_str object will be the value set for sqlite3_limit_APIName instead of SQLITE_MAX_LENGTH", "cond": "If the D parameter in sqlite3_str_new_APIName is not NULL"}, {"prop": "It is permitted to register multiple implementations of the same functions with the same name but with either differing numbers of arguments or differing preferred text encodings", "cond": "null"}, {"prop": "the length of sqlite3_bind_text_APIParam_4 and sqlite3_bind_text16_APIParam_4 is the number of bytes up to the first zero terminator", "cond": "null"}, {"prop": "Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file", "cond": "null"}, {"prop": "Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument", "cond": "null"}, {"prop": "The following interfaces are provided", "cond": "null"}, {"prop": "The problem has been fixed with the `` v2 '' interface", "cond": "null"}, {"prop": "The SQLITE_FCNTL_DATA_VERSION_API_constant returns the data version counter from the pager", "cond": "null"}, {"prop": "`` VACUUM '' is not a keyword", "cond": "if SQLite is compiled with the - DSQLITE_OMIT_VACUUM option"}, {"prop": "It is provided to support rare applications with unusual needs", "cond": "null"}, {"prop": "SQLITE_BUSY_API_constant means that the database engine was unable to acquire the database locks it needs to do its job", "cond": "null"}, {"prop": "This interface used to be the only way to cause a checkpoint to occur", "cond": "null"}, {"prop": "it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained", "cond": "null"}, {"prop": "This interface is retained for backwards compatibility and as a convenience for applications that need to manually start a callback but which do not need the full power of sqlite3_wal_checkpoint_v2_APIName", "cond": "null"}, {"prop": "The SQLite core only ever uses sqlite3_mutex_try_APIName as an optimization so this is acceptable behavior", "cond": "null"}, {"prop": "The mutex implementation does not need to make a distinction between SQLITE_MUTEX_RECURSIVE_API_constant and SQLITE_MUTEX_FAST_API_constant", "cond": "if it does not want to"}, {"prop": "These routines only compile the first statement in sqlite3_prepare16_APIParam_2 , so pzTail is left pointing to what remains uncompiled", "cond": "null"}, {"prop": "A protected sqlite3_value object may always be used where an unprotected sqlite3_value object is required , so either kind of sqlite3_value object can be used with this interface", "cond": "null"}, {"prop": "The sqlite3_bind_pointer_APIName routine causes the I-th parameter in prepared statement S to have an SQL value of NULL , but to also be associated with the pointer P of type T.", "cond": "null"}, {"prop": "But the application does not want the user to be able to make arbitrary changes to the database", "cond": "null"}, {"prop": "The return value of sqlite3_column_type_APIName can be used to decide which of the first six interface should be used to extract the column value", "cond": "null"}, {"prop": "SQLite will invoke sqlite3_free_APIName on pzErrMsg after xEntryPoint_APIName returns", "cond": "null"}, {"prop": "SQLite ensures that pzErrMsg is NULL before calling the xEntryPoint_APIName", "cond": "null"}, {"prop": "the sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName call that provoked the xEntryPoint_APIName will fail", "cond": "null"}, {"prop": "Calling this routine with a null pointer is a harmless no-op", "cond": "null"}, {"prop": "Parameters of the form \"?\" without a following integer have no name and are referred to as `` nameless '' or `` anonymous parameters ''", "cond": "null"}, {"prop": "they can not change the size of a blob", "cond": "null"}, {"prop": "This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close_APIName on ppBlob after sqlite3_blob_open_APIName it returns", "cond": "null"}, {"prop": "that means the prepared statement returns no data", "cond": "null"}, {"prop": "Executing any other type of SQL statement does not modify the value returned by sqlite3_changes_APIName", "cond": "null"}, {"prop": "Use this routine to reset all host parameters to NULL", "cond": "null"}, {"prop": "Calling this routine with an argument less than or equal to zero turns off all busy handlers", "cond": "null"}, {"prop": "A SELECT statement will always have a positive sqlite3_column_count_APIName but depending on the WHERE clause constraints and the table content, it might return no rows", "cond": "null"}, {"prop": "This means that if the changes_APIName SQL function is used by the first INSERT, UPDATE or DELETE statement within a trigger, it returns the value as set when the calling statement began executing", "cond": "null"}, {"prop": "The set of SQLITE_DBSTATUS options is likely to grow in future releases of SQLite", "cond": "null"}, {"prop": "the filename will be an absolute pathname", "cond": "null"}, {"prop": "The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite", "cond": "null"}, {"prop": "sqlite3_exec_APIName sets the pointer in its 5th parameter to NULL before returning", "cond": "null"}, {"prop": "A call to sqlite3_interrupt_APIName that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after the sqlite3_interrupt_APIName call returns", "cond": "null"}, {"prop": "subsequent calls to sqlite3_last_insert_rowid_APIName return the rowid associated with these internal INSERT operations, which leads to unintuitive results", "cond": "null"}, {"prop": "this routine will return the rowid of the inserted row as long as the trigger is running", "cond": "null"}, {"prop": "The sqlite3_last_insert_rowid_APIName interface usually returns the rowid of the most recent successful INSERT into a rowid table or virtual table on database connection D.", "cond": "null"}, {"prop": "it does not fail", "cond": "When INSERT OR REPLACE encounters a constraint violation"}, {"prop": "New run-time limit categories may be added in future releases", "cond": "null"}, {"prop": "The sqlite3_exec_APIName interface is a convenience wrapper around sqlite3_prepare_v2_APIName , sqlite3_step_APIName , and sqlite3_finalize_APIName , that allows an application to run multiple statements of SQL without having to use a lot of C code", "cond": "null"}, {"prop": "The rowid is always available as an undeclared column named ROWID , OID , or _ ROWID _ as long as those names are not also used by explicitly declared columns", "cond": "null"}, {"prop": "it might not have an opportunity to be interrupted and might continue to completion", "cond": "If an SQL operation is very nearly finished at the time when sqlite3_interrupt_APIName is called"}, {"prop": "before statement sqlite3_finalize_APIParam_1 is ever evaluated , after one or more calls to sqlite3_reset_APIName , or after any call to sqlite3_step_APIName regardless of whether or not the statement has completed execution", "cond": "null"}, {"prop": "Any new SQL statements that are started after the sqlite3_interrupt_APIName call and before the running statements reaches zero are interrupted as if they had been running prior to the sqlite3_interrupt_APIName call.", "cond": "null"}, {"prop": "So as not to open security holes in older applications that are unprepared to deal with extension loading , and as a means of disabling extension loading , the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off", "cond": "while evaluating user-entered SQL"}, {"prop": "Setting parameter X to NULL disables the progress handler", "cond": "null"}, {"prop": "To avoid deadlocks and other threading problems , the sqlite3_log_APIName routine will not use dynamically allocated memory", "cond": "null"}, {"prop": "This interface allows applications to access the same PRNG for other purposes", "cond": "null"}, {"prop": "This feature can be used to implement a `` Cancel '' button on a GUI progress dialog box", "cond": "null"}, {"prop": "This API makes sure a global version of a function with a particular name and number of parameters exists", "cond": "null"}, {"prop": "The final value of P is undefined", "cond": "null"}, {"prop": "The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema sqlite3_snapshot_get_APIParam_2 in database connection D. On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into P and returns SQLITE_OK_API_constant", "cond": "null"}, {"prop": "SQLITE_DONE_API_constant means that the statement has finished executing successfully", "cond": "null"}, {"prop": "The values may be accessed using the column access functions", "cond": "null"}, {"prop": "With the \"v2\" interface, any of the other result codes or extended result codes might be returned as well", "cond": "null"}, {"prop": "SQLITE_MISUSE_API_constant means that the this routine was called inappropriately", "cond": "null"}, {"prop": "But after version 3.6.23.1,sqlite3_step_APIName began calling sqlite3_reset_APIName automatically in this circumstance rather than returning SQLITE_MISUSE_API_constant", "cond": "null"}, {"prop": "Loops are numbered starting from zero", "cond": "null"}, {"prop": "Statistics might not be available for all loops in all statements", "cond": "null"}, {"prop": "you can retry the statement", "cond": "If the statement is a COMMIT or occurs outside of an explicit transaction"}, {"prop": "The sqlite3_str_new_APIParam_1 parameter to sqlite3_str_new_APIName may be NULL", "cond": "null"}, {"prop": "SQLite can be compiled with or without mutexes", "cond": "null"}, {"prop": "Executing any other type of SQL statement does not affect the value returned by sqlite3_total_changes_APIName", "cond": "null"}, {"prop": "So , it makes sense to disable the mutexes", "cond": "if speed is of utmost importance"}, {"prop": "This interface can be used by an application to make sure that the version of SQLite that it is linking against was compiled with the desired setting of the SQLITE_THREADSAFE macro", "cond": "null"}, {"prop": "then mutexes are enabled by default but can be fully or partially disabled using a call to sqlite3_config_APIName with the verbs SQLITE_CONFIG_SINGLETHREAD_API_constant, SQLITE_CONFIG_MULTITHREAD_API_constant, or SQLITE_CONFIG_SERIALIZED_API_constant.", "cond": "null"}, {"prop": "on unix systems, after sqlite3_open_v2_APIName returns SQLITE_CANTOPEN_API_constant, this interface could be called to get back the underlying \"errno\" that caused the problem, such as ENOSPC, EAUTH, EISDIR, and so forth", "cond": "null"}, {"prop": "SQLite checks if there are any currently executing SELECT statements that belong to the same connection", "cond": "null"}, {"prop": "the values written to output parameters pnLog and pnCkpt are undefined", "cond": "null"}, {"prop": "Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE_API_constant , the log file will have been truncated to zero bytes and so both pnLog and pnCkpt will be set to zero", "cond": "null"}, {"prop": "Calling sqlite3_close_APIName or sqlite3_close_v2_APIName with a NULL pointer argument is a harmless no-op", "cond": "null"}, {"prop": "the following statement to be compiled", "cond": "null"}, {"prop": "SQLite is strongly typed , but the typing is dynamic not static", "cond": "null"}, {"prop": "The commit and rollback hook callbacks are not reentrant", "cond": "null"}, {"prop": "These routines do not parse the SQL statements thus will not detect syntactically incorrect SQL", "cond": "null"}, {"prop": "The inconsistency is unfortunate but can not be changed without breaking backwards compatibility", "cond": "null"}, {"prop": "The sqlite3_create_module_APIName interface is equivalent to sqlite3_create_module_v2_APIName with a NULL destructor", "cond": "null"}, {"prop": "Passing a NULL pointer to sqlite3_free_APIName is harmless", "cond": "null"}, {"prop": "The sqlite3_extended_errcode_APIName interface is the same except that it always returns the extended result code even when extended result codes are disabled", "cond": "null"}, {"prop": "In that case , the error code and message may or may not be set", "cond": "null"}, {"prop": "The sqlite3_normalized_sql_APIName interface returns a pointer to a UTF-8 string containing the normalized SQL text of prepared statement P. The semantics used to normalize a SQL statement are unspecified and subject to change", "cond": "null"}, {"prop": "Calling sqlite3_free_APIName with a pointer previously returned by sqlite3_malloc_APIName or sqlite3_realloc_APIName releases that memory so that it might be reused", "cond": "null"}, {"prop": "Memory allocation errors were detected , but they were reported back as SQLITE_CANTOPEN_API_constant or SQLITE_IOERR_API_constant rather than SQLITE_NOMEM_API_constant", "cond": "null"}, {"prop": "The memory returned by sqlite3_malloc_APIName, sqlite3_realloc_APIName, sqlite3_malloc64_APIName, and sqlite3_realloc64_APIName is always aligned to at least an 8 byte boundary, or to a 4 byte boundary", "cond": "null"}, {"prop": "Only an effective call of sqlite3_initialize_APIName does any initialization", "cond": "null"}, {"prop": "The destructor X in sqlite3_set_auxdata_APIName might be called immediately, before the sqlite3_set_auxdata_APIName interface even returns", "cond": "null"}, {"prop": "Subsequent calls to sqlite3_get_auxdata_APIName return sqlite3_set_auxdata_APIParam_3 from the most recent sqlite3_set_auxdata_APIName call", "cond": "null"}, {"prop": "Also , new keywords may be added to future releases of SQLite", "cond": "null"}, {"prop": "as long as the pattern string remains the same , the compiled regular expression can be reused on multiple invocations of the same function", "cond": "null"}, {"prop": "As a consequence , errors that occur in the wrapper layer outside of the internal sqlite3_exec_APIName call are not reflected in subsequent calls to sqlite3_errcode_APIName or sqlite3_errmsg_APIName", "cond": "null"}, {"prop": "The sqlite3_libversion_APIName function returns a pointer to the to the sqlite3_version[] string constant", "cond": "null"}, {"prop": "Cautious programmers might include assert_APIName statements in their application to verify that values returned by these interfaces match the macros in the header, and thus ensure that the application is compiled with matching library and header files", "cond": "null"}, {"prop": "Applications can uses these routines to determine whether or not a specific identifier needs to be escaped so as not to confuse the parser", "cond": "null"}, {"prop": "This is an historical accident that can not be fixed without breaking backwards compatibility", "cond": "null"}, {"prop": "The following implementations are available in the SQLite core", "cond": "null"}, {"prop": "After each call to sqlite3_set_auxdata_APIName where X is not NULL , SQLite will invoke the destructor function X with parameter P exactly once", "cond": "when the metadata is discarded"}, {"prop": "The SQLite source code contains multiple implementations of these mutex routines", "cond": "null"}, {"prop": "the behavior exhibited might become the default behavior in some future release of SQLite.", "cond": "null"}, {"prop": "The other allowed parameters to sqlite3_mutex_alloc_APIName each return a pointer to a static preexisting mutex", "cond": "null"}, {"prop": "The first two constants cause sqlite3_mutex_alloc_APIName to create a new mutex", "cond": "null"}, {"prop": "The sqlite3_mutex_enter_APIName and sqlite3_mutex_try_APIName routines attempt to enter a mutex", "cond": "null"}, {"prop": "code that links against SQLite is permitted to use any of these routines", "cond": "null"}, {"prop": "Note that sqlite3_mutex_alloc_APIName returns a different mutex on every call", "cond": "null"}, {"prop": "Mutexes created using SQLITE_MUTEX_RECURSIVE_API_constant can be entered multiple times by the same thread", "cond": "null"}, {"prop": "the mutex subsystem might return such a mutex in response to SQLITE_MUTEX_FAST_API_constant", "cond": "null"}, {"prop": "The sqlite3_mutex_leave_APIName routine exits a mutex that was previously entered by the same thread", "cond": "null"}, {"prop": "The implementation is not required to provide versions of these routines that actually work", "cond": "null"}, {"prop": "A database connection handle is usually returned in ppDb", "cond": "null"}, {"prop": "The sqlite3_errmsg_APIName or sqlite3_errmsg16_APIName routines can be used to obtain an English language description of the error following a failure of any of the sqlite3_open_APIName routines", "cond": "null"}, {"prop": "Additional sqlite3_trace_APIName callbacks might occur as each triggered subprogram is entered", "cond": "null"}, {"prop": "Hence, the calling function can deallocate or modify the text after they return without harm", "cond": "null"}, {"prop": "The sqlite3_result_null_APIName interface sets the return value of the application-defined function to be NULL", "cond": "null"}, {"prop": "The sqlite3_result_error_code_APIName function changes the error code returned by SQLite as a result of an error in a function", "cond": "null"}, {"prop": "The sqlite3_result_error_nomem_APIName interface causes SQLite to throw an error indicating that a memory allocation failed", "cond": "null"}, {"prop": "These methods do not return a result code", "cond": "null"}, {"prop": "The sqlite3_result_error_toobig_APIName interface causes SQLite to throw an error indicating that a string or BLOB is too long to represent", "cond": "null"}, {"prop": "Invoking any of these routines from outside of a preupdate callback or with a database connection pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior", "cond": "null"}, {"prop": "Otherwise no conversion occurs", "cond": "null"}, {"prop": "SQLite assumes that the text or BLOB result is in constant space and does not copy the content of the parameter nor call a destructor on the content when it has finished using that result", "cond": "If the 4_APIConstant parameter to the sqlite3_result_text * interfaces or to sqlite3_result_blob is the special constant SQLITE_STATIC_API_constant"}, {"prop": "Please pay particular attention to the fact that the pointer returned from sqlite3_value_blob_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName can be invalidated by a subsequent call to sqlite3_value_bytes_APIName, sqlite3_value_bytes16_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName", "cond": "null"}, {"prop": "Whether or not a persistent internal datatype conversion occurs is undefined and may change from one release of SQLite to the next", "cond": "null"}, {"prop": "ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step_APIName", "cond": "null"}, {"prop": "The implementation of the function can gain access to this pointer using sqlite3_user_data_APIName", "cond": "null"}, {"prop": "an application may allow a user to enter arbitrary SQL queries for evaluation by a database", "cond": "null"}, {"prop": "Future versions of SQLite may change the behavior of sqlite3_column_type_APIName following a type conversion", "cond": "null"}, {"prop": "The first process can not proceed and the second process can not proceed", "cond": "null"}, {"prop": "An authorizer is used , to ensure that the SQL statements do not try to access data they are not allowed to see , or that they do not try to execute malicious statements that damage the database", "cond": "when preparing SQL statements from an untrusted source"}, {"prop": "There is no way to distinguish between an incorrect sqlite3_file_control_APIParam_2 and an SQLITE_ERROR_API_constant return from the underlying xFileControl method", "cond": "null"}, {"prop": "Future releases of SQLite may require this", "cond": "null"}]