['The application must ensure that the 1_APIConstant parameter to sqlite3_exec_APIName is a valid and open database connection', 'application must ensure constant param api be valid open database connection']
['resources associated with the sqlite3_open_v2_APIParam_2 should be released by passing sqlite3_open_v2_APIParam_2 to sqlite3_close_APIName.', 'resource associate param should be release by pass param api']
['resources associated with the sqlite3_open_APIParam_2 should be released by passing sqlite3_open_APIParam_2 to sqlite3_close_APIName.', 'resource associate param should be release by pass param api']
['Any such actions result in undefined behavior', 'action result undefined behavior']
['One way around this problem is to check the extended error code returned by an sqlite3_step_APIName call', 'one way around problem be check extended error code return by api call']
['The use of the UTF-8 interfaces is preferred , as SQLite currently does all parsing using UTF-8', 'use param api be prefer , as currently do parse use param']
['But for maximum safety , mutexes should be enabled', 'but maximum , should be enable']
['The incremental blob I/O routines can only read or overwriting existing blob content', 'incremental api can only read overwrite exist content']
['The safest policy is to invoke these routines in one of the following ways', 'safe policy be invoke api one follow way']
['Only the row can be changed', 'only can be change']
['The only way to find out whether SQLite automatically rolled back the transaction after an error is to use sqlite3_get_autocommit_APIName', 'only way find whether automatically roll back after error be use api']
['Any attempt to use these routines on an unprotected sqlite3_value is not threadsafe', 'attempt use api unprotected param be not']
['Only built-in memory allocators can be used', 'only param memory can be use']
['The following must be true for sqlite3_snapshot_get_APIName to succeed', 'follow must be constant api succeed']
['Applications that need to process SQL from untrusted sources might also consider lowering resource limits using sqlite3_limit_APIName and limiting database size using the max_page_count PRAGMA in addition to using an authorizer', 'application need process untrusted source may consider lower resource limit use api limit database size use param addition use']
['the database connection must not be in autocommit mode', 'database connection must not be mode']
['Only an effective call to sqlite3_shutdown_APIName does any deinitialization', 'only effective call api do']
['the database handle must have no active statements', 'database handle must have no active']
['Nevertheless , best practice is to avoid using keywords as identifiers', 'nevertheless , good practice be avoid use as identifier']
['the result is undefined and probably harmful', 'result be undefined probably harmful']
['There can only be a single busy handler for a particular database connection at any given moment', 'can only be single busy handler particular database connection give moment']
['Only a single authorizer can be in place on a database connection at a time', 'only single can be place database connection time']
['the application must supply a suitable implementation for sqlite3_os_init_APIName and sqlite3_os_end_APIName', 'application must supply suitable implementation api']
['As long as the input parameter is correct , these routines can only fail', 'as long as input param be correct , api can only fail']
['The unlock-notify callback is not reentrant', 'param callback be not reentrant']
['The callback function should normally return SQLITE_OK_API_constant', 'callback function should normally return constant']
['The third and fourth parameters to sqlite3_table_column_metadata_APIName are the table and column name of the desired column , respectively', 'third fourth param api be table name desire , respectively']
['Callback implementations should return zero to ensure future compatibility', 'callback implementation should return constant ensure future compatibility']
['Applications must always be prepared to encounter a NULL pointer in any of the third through the sixth parameters of the authorization callback', 'application must always be prepare null pointer third sixth param authorization callback']
['The authorizer callback should return SQLITE_OK_API_constant to allow the action, SQLITE_IGNORE_API_constant to disallow the specific action but allow the SQL statement to continue to be compiled, or SQLITE_DENY_API_constant to cause the entire SQL statement to be rejected with an error', 'callback should return constant allow action , constant disallow specific action but allow continue be compile , constant entire be reject error']
['Applications must not used the pointer returned by sqlite3_str_value_APIName after any subsequent method call on the same object', 'application must not use pointer return by api after subsequent api call object']
['Applications that invoke sqlite3_create_collation_v2_APIName with a non-NULL xDestroy argument should check the return code and dispose of the application data pointer themselves rather than expecting SQLite to deal with it for them', 'application invoke api param should check return code dispose application datum pointer rather expect deal']
['The sqlite3_uri_boolean_APIName routine assumes that sqlite3_uri_boolean_APIParam_2 is a boolean parameter and returns true or false according to the value of sqlite3_uri_boolean_APIParam_2.', 'api assume param be boolean param return constant accord value param']
['sqlite3_uri_parameter_APIName returns NULL and sqlite3_uri_boolean_APIName returns B', 'api return null api return']
['The sqlite3_uri_boolean_APIName routine returns true if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number', 'api return constant , case']
['the value returned is unpredictable and not meaningful', 'value return be unpredictable not meaningful']
['The collating function must return an integer that is negative, zero, or positive', 'collate function must return integer negative , constant , positive']
['zero is returned by sqlite3_uri_int64_APIName', 'constant be return by api']
['The sqlite3_mutex_notheld_APIName interface should also return 1 when given a NULL pointer', 'api should return constant give null pointer']
['These routines should return true', 'api should return constant']
['The sqlite3_value_frombind_APIName interface returns non-zero if the value sqlite3_value_frombind_APIParam_1 originated from one of the sqlite3_bind_APIName interfaces', 'api return param']
['The sqlite3_value_dup_APIName interface returns NULL if sqlite3_value_dup_APIParam_1 is NULL or if a memory allocation fails', 'api return null']
['sqlite3_uri_boolean_APIName returns (B!=0).', 'api return constant']
['sqlite3_value_frombind_APIName returns zero', 'api return constant']
['a NULL pointer is returned by sqlite3_vfs_find_APIName', 'null pointer be return by api']
['subsequent calls to sqlite3_value_type_APIName might return SQLITE_TEXT_API_constant', 'subsequent call api may return constant']
['sqlite3_uri_parameter_APIName returns the value of the sqlite3_uri_parameter_APIParam_2 parameter if it exists or a NULL pointer if sqlite3_uri_parameter_APIParam_2 does not appear as a query parameter on sqlite3_uri_parameter_APIParam_1. ', 'api return value param']
['The sqlite3_str_errcode_APIName method returns SQLITE_NOMEM_API_constant following any out-of-memory error, or SQLITE_TOOBIG_API_constant if the size of the dynamic string exceeds SQLITE_MAX_LENGTH, or SQLITE_OK_API_constant if there have been no errors', 'api return constant following param error , constant if have be no error']
[' sqlite3_value_pointer_APIName will return the pointer P. Otherwise, sqlite3_value_pointer_APIName returns a NULL', 'api return pointer p. otherwise , api return null']
['If sqlite3_uri_parameter_APIParam_2 is a query parameter of sqlite3_uri_parameter_APIParam_1 has no explicit value, sqlite3_uri_parameter_APIName returns a pointer to an empty string', 'if param be query param have no explicit value , api return pointer empty string']
['SQLITE_NOMEM_API_constant is returned by sqlite3_bind_value_APIName if malloc_APIName fails', 'constant be return by api']
['SQLITE_RANGE_API_constant is returned by sqlite3_bind_text_APIName ', 'constant be return by api']
['The sqlite3_win32_set_directory interface returns SQLITE_OK_API_constant to indicate success, SQLITE_ERROR_API_constant if the sqlite3_win32_set_directory_APIParam_1 is unsupported, or SQLITE_NOMEM_API_constant if memory could not be allocated', 'api return constant indicate success , constant']
['The sqlite3_bind_ routines return SQLITE_OK_API_constant on success or an error code if anything goes wrong', 'param api return constant success error code if anything go wrong']
['SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName immediately upon encountering the lock', 'constant be return by api immediately upon lock']
['then the call will return SQLITE_MISUSE_API_constant .', 'call return constant']
['sqlite3_column_bytes_APIName returns zero', 'api return constant']
[' no additional attempts are made to access the database and SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName to the application', 'no additional attempt be make access database constant be return by api application']
['sqlite3_column_bytes16_APIName returns zero', 'api return constant']
['The return value from sqlite3_column_blob_APIName for a zero-length BLOB is a NULL pointer', 'return value api param be null pointer']
['The values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName do not include the zero terminators at the end of the string', 'value return by api not include constant end string']
['The underlying xFileControl method might also return SQLITE_ERROR_API_constant', 'underlie api may return constant']
['the value returned by sqlite3_snapshot_cmp_APIName is undefined', 'value return by api be undefined']
['sqlite3_db_filename_APIName will return either a NULL pointer or an empty string', 'api return either null pointer empty string']
['sqlite3_finalize_APIName returns SQLITE_OK_API_constant', 'api return constant']
['SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_open_APIName', 'constant be return by api']
['The sqlite3_strglob_APIName interface returns zero', 'api return constant']
['The sqlite3_stmt_readonly_APIName interface returns true', 'api return constant']
['In the legacy interface, the return value will be either SQLITE_BUSY_API_constant, SQLITE_DONE_API_constant, SQLITE_ROW_API_constant, SQLITE_ERROR_API_constant, or SQLITE_MISUSE_API_constant', 'api , return value be either constant']
['The sqlite3_strlike_APIName interface returns zero', 'api return constant']
['the lock cannot be obtained and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName', 'lock can not be obtain constant be return by api']
['sqlite3_vtab_nochange_APIName returns true, during which the column value will not change', 'api return constant , during which value not change']
['The name of the database or table or column can be returned as either a UTF-8 or UTF-16 string', 'name database table can be return as either param string']
['a NULL pointer is returned by sqlite3_column_name_APIName', 'null pointer be return by api']
['the routine should return 1', 'api should return constant']
['The only exception is that if SQLite is unable to allocate memory to hold the sqlite3 object, a NULL will be written into *ppDb instead of a pointer to the sqlite3 object.', 'only exception be  , null be write instead pointer object']
['the values returned by sqlite3_status_APIName are undefined', 'value return by api be undefined']
['A zero is returned by sqlite3_bind_parameter_index_APIName', 'constant be return by api']
['The value returned by sqlite3_column_type_APIName is only meaningful', 'value return by api be only meaningful']
['NULL is returned by sqlite3_bind_parameter_name_APIName', 'null be return by api']
['On success, sqlite3_blob_read_APIName returns SQLITE_OK_API_constant', 'success , api return constant']
['On success, SQLITE_OK_API_constant is returned by sqlite3_blob_open_APIName and the new BLOB handle is stored in ppBlob', 'success , constant be return by api handle be store']
['The sqlite3_aggregate_context_APIName routine returns a NULL pointer when first called if sqlite3_aggregate_context_APIParam_2 is less than or equal to zero or if a memory allocate error occurs', 'api return null pointer first call  constant']
['Otherwise, an error code or an extended error code is returned by sqlite3_blob_read_APIName', 'otherwise , error code extend error code be return by api']
['an error code is returned by sqlite3_blob_close_APIName and the transaction rolled back', 'error code be return by api roll back']
['Within the xUpdate method of a virtual table, the sqlite3_value_nochange_APIName interface returns true if and only if the column corresponding to sqlite3_value_nochange_APIParam_1 is unchanged by the UPDATE operation that the xUpdate method call was invoked to implement and if and the prior xColumn method call that was invoked to extracted the value for that column returned without setting a result', 'within api virtual table , api return constant']
['Otherwise an error code is returned by sqlite3_blob_open_APIName', 'otherwise error code be return by api']
['SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read', 'constant be return by api no data be read']
['Calls to sqlite3_blob_read_APIName and sqlite3_blob_write_APIName for an expired BLOB handle fail with a return code of SQLITE_ABORT_API_constant', 'call api expire handle fail return code constant']
['All subsequent calls to sqlite3_blob_read_APIName, sqlite3_blob_write_APIName or sqlite3_blob_reopen_APIName on an aborted blob handle immediately return SQLITE_ABORT_API_constant', 'subsequent call api abort handle immediately return constant']
['an SQLite error code is returned by sqlite3_blob_reopen_APIName and the blob handle is considered aborted', 'error code be return by api handle be consider abort']
['sqlite3_blob_write_APIName returns SQLITE_OK_API_constant', 'api return constant']
['Calling sqlite3_blob_bytes_APIName on an aborted blob handle always returns zero', 'call api abort handle always return constant']
['Otherwise, an error code or an extended error code is returned by sqlite3_blob_write_APIName', 'otherwise , error code extend error code be return by api']
['sqlite3_blob_write_APIName returns SQLITE_READ_API_constantONLY', 'api return constantonly']
['it will return SQLITE_MISUSE_API_constant', 'return constant']
['After at least "ms" milliseconds of sleeping, the handler returns 0 which causes sqlite3_step_APIName to return SQLITE_BUSY_API_constant', 'after least ms millisecond , handler return constant which api return constant']
['sqlite3_config_APIName returns SQLITE_OK_API_constant', 'api return constant']
['The sqlite3_data_count_APIName routine also returns 0 ', 'api return constant']
['SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written', 'constant be return by api no data be write']
['The value returned by sqlite3_changes_APIName immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero', 'value return by api immediately after insert , run be always constant']
['The sqlite3_data_count_APIName routine returns 0 ', 'api return constant']
['The sqlite3_cancel_auto_extension_APIName routine returns 0', 'api return constant']
['The sqlite3_cancel_auto_extension_APIName routine returns 1', 'api return constant']
['this routine returns a non-zero error code', 'api return param error code']
['sqlite3_data_count_APIName returns 0', 'api return constant']
['Otherwise, sqlite3_db_cacheflush_APIName returns SQLITE_OK_API_constant', 'otherwise , api return constant']
['sqlite3_db_mutex_APIName returns a NULL pointer', 'api return null pointer']
['processing is abandoned and an SQLite error code is returned by sqlite3_db_cacheflush_APIName to the caller immediately', 'processing be abandon error code be return by api caller immediately']
['The sqlite3_db_status_APIName routine returns SQLITE_OK_API_constant on success and a non-zero error code on failure', 'api return constant success param error code failure']
['This routine returns SQLITE_OK_API_constant', 'api return constant']
['sqlite3_finalize_APIName returns the appropriate error code or extended error code', 'api return appropriate error code extend error code']
['An SQL operation that is interrupted will return SQLITE_INTERRUPT_API_constant', 'operation interrupt return constant']
['The sqlite3_db_readonly_APIName interface returns 1 if the database sqlite3_db_readonly_APIParam_2 of connection sqlite3_db_readonly_APIParam_1 is read-only, 0 if it is read/write, or -1 if sqlite3_db_readonly_APIParam_2 is not the name of a database on connection sqlite3_db_readonly_APIParam_1', 'api return constant']
['the sqlite3_exec_APIName routine returns SQLITE_ABORT_API_constant without invoking the callback again and without running any subsequent SQL statements', 'api return constant without invoke callback without run subsequent']
['sqlite3_last_insert_rowid_APIName returns zero', 'api return constant']
['A call to sqlite3_serialize_APIName might return NULL', 'call api may return null']
['The sqlite3_load_extension_APIName interface returns SQLITE_OK_API_constant on success and SQLITE_ERROR_API_constant if something goes wrong', 'api return constant success constant']
['sqlite3_next_stmt_APIName returns NULL', 'api return null']
['sqlite3_reset_APIName returns an appropriate error code', 'api return appropriate error code']
['The sqlite3_release_memory_APIName routine is a no-op returning zero', 'api be param return constant']
['sqlite3_snapshot_get_APIName may also return SQLITE_NOMEM_API_constant', 'api may return constant']
['SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_get_APIName', 'constant be return by api']
['Otherwise, this API returns a negative value if P1 refers to an older snapshot than P2, zero if the two handles refer to the same database snapshot, and a positive value if P1 is a newer snapshot than P2', 'otherwise , api return negative value if refer old snapshot , constant  handle refer database snapshot , positive value']
['no memory allocations are made, and the sqlite3_serialize_APIName function will return a pointer to the contiguous memory representation of the database that SQLite is currently using for that database, or NULL if the no such contiguous memory representation of the database exists', 'no memory allocation be make , api function return pointer contiguous memory representation database be currently use database , null']
['Failure to reset the prepared statement using sqlite3_reset_APIName would result in an SQLITE_MISUSE_API_constant return from sqlite3_step_APIName', 'failure reset prepared use api would result constant return api']
['The sqlite3_stmt_busy_APIName interface returns false', 'api return constant']
['The sqlite3_stmt_isexplain_APIName interface returns 0 ', 'api return constant']
['In the "v2" interface, the more specific error code is returned directly by sqlite3_step_APIName', 'api , specific error code be return directly by api']
['The sqlite3_snapshot_open_APIName interface returns SQLITE_OK_API_constant on success or an appropriate error code if it fails', 'api return constant success appropriate error code']
['SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName', 'param be return by api']
['But , sqlite3_stmt_readonly_APIName would still return true', 'but , api would still return constant']
['The sqlite3_stmt_busy_APIName interface returns true', 'api return constant']
['SQLITE_ROW_API_constant is returned each time a new row of data is ready for processing by the caller', 'constant be return time datum be ready processing by caller']
['The sqlite3_stmt_isexplain_APIName interface returns 1', 'api return constant']
['In the legacy interface, the sqlite3_step_APIName API always returns a generic error code, SQLITE_ERROR_API_constant, following any error other than SQLITE_BUSY_API_constant and SQLITE_MISUSE_API_constant', 'api always return generic error code , constant , follow error constant']
['The sqlite3_stmt_readonly_APIName interface returns true for BEGIN , but the BEGIN IMMEDIATE and BEGIN EXCLUSIVE commands do touch the database and so sqlite3_stmt_readonly_APIName returns false for those commands', 'api return constant begin , but begin immediate begin exclusive command touch database api return constant command']
['Transaction control statements such as BEGIN , COMMIT , ROLLBACK , SAVEPOINT , and RELEASE cause sqlite3_stmt_readonly_APIName to return true', 'control as begin , commit , rollback , , release api return constant']
['The sqlite3_str_finish_APIName interface will also return a NULL pointer', 'api return null pointer']
['The sqlite3_str_finish_APIName interface may return a NULL pointer if any errors were encountered during construction of the string', 'api may return null pointer']
['The sqlite3_table_column_metadata_APIName interface returns SQLITE_ERROR_API_constant and if the specified column does not exist', 'api return constant']
['Note that sqlite3_strglob_APIName returns zero on a match and non-zero, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName', 'api return constant match param as api']
['The sqlite3_table_column_metadata_APIName interface returns SQLITE_OK_API_constant and fills in the non-NULL pointers in the final five arguments with appropriate values if the specified column exists', 'api return constant fill param pointer final five param appropriate value']
['The memory pointed to by the character pointers returned for the declaration type and collation sequence is valid until the next call to any SQLite API function', 'memory point by character pointer return declaration type sequence be valid until next call api function']
['sqlite3_table_column_metadata_APIName returns an error ', 'api return error']
['sqlite3_unlock_notify_APIName always returns SQLITE_OK_API_constant', 'api always return constant']
['SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName', 'constant be return by api']
['SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName and no unlock-notify callback is registered', 'constant be return by api no param callback be register']
['In that case, sqlite3_value_nochange_APIName will return true for the same column in the xUpdate method', 'case , api return constant api']
['SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName', 'constant be return by api']
['SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName', 'constant be return by api']
['SQLITE_ERROR_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName to the caller', 'constant be return by api caller']
['The sqlite3_update_hook_APIName function returns the P argument from the previous call on the same database connection D, or NULL for the first call on D', 'api function return param previous call database connection , null first call']
['processing is abandoned and the error code is returned by sqlite3_wal_checkpoint_v2_APIName to the caller immediately', 'processing be abandon error code be return by api caller immediately']
['The value returned by sqlite3_vtab_on_conflict_APIName is one of SQLITE_ROLLBACK_API_constant, SQLITE_IGNORE_API_constant, SQLITE_FAIL_API_constant, SQLITE_ABORT_API_constant, or SQLITE_REPLACE_API_constant, according to the ON CONFLICT mode of the SQL statement that triggered the call to the xUpdate method of the virtual table', 'value return by api be one constant , accord mode call api virtual table']
['These routine sqlite3_column_database_name_APIName sqlite3_column_database_name16_APIName sqlite3_column_table_name_APIName sqlite3_column_table_name16_APIName sqlite3_column_origin_name_APIName sqlite3_column_origin_name16_APIName might also return NULL', 'api may return null']
['SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName and both pnLog and pnCkpt set to -1', 'constant be return by api set constant']
['Calls to sqlite3_close_APIName and sqlite3_close_v2_APIName return SQLITE_OK_API_constant ', 'call api return constant']
['sqlite3_column_database_name_APIName sqlite3_column_database_name16_APIName sqlite3_column_table_name_APIName sqlite3_column_table_name16_APIName sqlite3_column_origin_name_APIName sqlite3_column_origin_name16_APIName return NULL', 'api return null']
['the operation is still attempted on any remaining attached databases and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName at the end', 'operation be still attempt remain attached database constant be return by api end']
['sqlite3_close_APIName will leave the database connection open and return SQLITE_BUSY_API_constant', 'api leave database connection open return constant']
['a NULL pointer is returned by sqlite3_column_decltype16_APIName', 'null pointer be return by api']
['sqlite3_compileoption_get_APIName returns a NULL pointer', 'api return null pointer']
['sqlite3_complete_APIName and sqlite3_complete16_APIName return 0', 'api return constant']
['sqlite3_column_decltype_APIName and sqlite3_column_decltype16_APIName would return the string "VARIANT" for the second result column , and a NULL pointer for the first result column', 'api would return stre variant second result , null pointer first result']
['The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time', 'api function return constant indicating whether specified option be api compile time']
['SQLITE_NOMEM_API_constant is returned by sqlite3_complete16_APIName', 'constant be return by api']
['These routines return 1', 'api return constant']
['sqlite3_close_v2_APIName returns SQLITE_OK_API_constant and the deallocation of resources is deferred until all prepared statements, BLOB handles, and sqlite3_backup objects are also destroyed', 'api return constant resource be defer until prepared , handle , param be destroy']
['it returns a NULL pointer', 'return null pointer']
['The SQLITE_OMIT_TRACE compile-time option causes sqlite3_expanded_sql_APIName to always return NULL', 'constant param option api always return null']
['The sqlite3_commit_hook_APIName and sqlite3_rollback_hook_APIName functions return the P argument from the previous call of the same function on the same database connection D, or NULL for the first call for each function on D', 'api function return param previous call function database connection , null first call function']
['sqlite3_malloc_APIName returns a NULL pointer', 'api return null pointer']
['sqlite3_realloc_APIName returns NULL', 'api return null']
['sqlite3_msize_APIName returns zero', 'api return constant']
['the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call', 'api return numeric result code extend result code api call']
['The sqlite3_initialize_APIName routine returns SQLITE_OK_API_constant on success', 'api return constant success']
['The sqlite3_expanded_sql_APIName interface returns NULL ', 'api return null']
['the sqlite3_get_auxdata_APIName interface returns a NULL pointer', 'api return null pointer']
['sqlite3_initialize_APIName returns an error code other than SQLITE_OK_API_constant', 'api return error code constant']
['sqlite3_sql_APIName will return the original string, "SELECT $abc,:xyz" but sqlite3_expanded_sql_APIName will return "SELECT 2345,NULL".', 'api return original string , select abc , : but api return select 2345 , null']
['Subsequent calls to sqlite3_get_auxdata_APIName return NULL', 'subsequent call api return null']
['The sqlite3_keyword_name_APIName routine returns SQLITE_OK_API_constant if sqlite3_keyword_name_APIParam_1 is within bounds and SQLITE_ERROR_API_constant if not', 'api return constant']
['The sqlite3_libversion_number_APIName function returns an integer equal to SQLITE_VERSION_API_constant_NUMBER', 'api function return integer equal param']
['The sqlite3_keyword_check_APIName returning zero ', 'api return constant']
['The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines return a NULL pointer ', 'api return null pointer']
['On those systems, sqlite3_mutex_try_APIName will always return SQLITE_BUSY_API_constant', 'system , api always return constant']
['The sqlite3_mutex_alloc_APIName routine returns NULL', 'api return null']
['Otherwise an error code is returned by sqlite3_open_APIName', 'otherwise error code be return by api']
['The sqlite3_mutex_try_APIName interface returns SQLITE_OK_API_constant upon successful entry', 'api return constant upon successful entry']
['sqlite3_mutex_enter_APIName will block and sqlite3_mutex_try_APIName will return SQLITE_BUSY_API_constant', 'api block api return constant']
['an error is returned by sqlite3_open16_APIName to the caller', 'error be return by api caller']
['SQLITE_OK_API_constant is returned by sqlite3_open_APIName', 'constant be return by api']
['The sqlite3_status_APIName and sqlite3_status64_APIName routines return SQLITE_OK_API_constant on success and a non-zero error code on failure', 'api return constant success param error code failure']
['The sqlite3_preupdate_depth_APIName interface returns 0 ', 'api return constant']
['The sqlite3_preupdate_depth_APIName interface returns 1', 'api return constant']
['The sqlite3_preupdate_depth_APIName interface returns 2', 'api return constant']
['the sqlite3_str_errcode_APIName method will return an appropriate error code', 'api return appropriate error code']
['The sqlite3_uri_boolean_APIName routines returns false ', 'api return constant']
[' the return value is arbitrary and meaningless', 'return value be arbitrary meaningless']
['sqlite3_value_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant', 'param be one constant']
['Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection', 'valid null return can be distinguish param error by invoke api immediately after suspect return value be obtain before api be call database connection']
['Any attempt to create a function with a longer name will result in SQLITE_MISUSE_API_constant being returned', 'attempt create function long name result constant return']
['The sqlite3_get_autocommit_APIName interface returns non-zero or zero ', 'api return param constant']
['the return value is undefined', 'return value be undefined']
['Strings returned by sqlite3_column_text_APIName and sqlite3_column_text16_APIName, even empty strings, are always zero-terminated', 'string return by api , even empty string , be always param']
['pointers returned by prior calls to sqlite3_column_blob_APIName, sqlite3_column_text_APIName, and/or sqlite3_column_text16_APIName may be invalidated', 'pointer return by prior call api may be invalidate']
['The pointers returned are valid until a type conversion occurs as described above, or until sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName is called', 'pointer return be valid until type conversion occur as describe , until api be call']
['An application-supplied implementation of sqlite3_os_init_APIName or sqlite3_os_end_APIName must return SQLITE_OK_API_constant on success and some other error code upon failure', 'param implementation api must return constant success error code upon failure']
['this routine simply checks for the existence of the table and returns SQLITE_OK_API_constant ', 'api simply check table return constant']
['Calls to sqlite3_db_config_APIName return SQLITE_OK_API_constant', 'call api return constant']
['this routine simply checks for the existence of the table and returns SQLITE_ERROR_API_constant ', 'api simply check table return constant']
['sqlite3_reset_APIName returns SQLITE_OK_API_constant', 'api return constant']
['then SQLITE_ERROR_API_constant is returned by sqlite3_file_control_APIName', 'constant be return by api']
['it will go ahead and return SQLITE_BUSY_API_constant to the application instead of invoking the busy handler', 'go ahead return constant application instead invoke busy handler']
['The application should only invoke sqlite3_initialize_APIName and sqlite3_shutdown_APIName', 'application should only invoke api']
['sqlite3_aggregate_context_APIName must be called from the same thread in which the aggregate SQL function is running', 'api must be call thread which function be run']
['A collating function must always return the same answer given the same inputs', 'collate function must always return give input']
['To avoid a resource leak , every open BLOB handle should eventually be released by a call to sqlite3_blob_close_APIName', 'avoid resource leak , every open handle should eventually be release by call api']
['This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName', 'api only work handle which have be create by prior successful call api which have not be close by api']
['The collating function must obey the following properties for all strings A , B , and C', 'collate function must obey follow property string']
['The application must finalize every prepared statement', 'application must finalize every prepared']
['The sqlite3_config_APIName interface may only be invoked prior to library initialization using sqlite3_initialize_APIName or after shutdown by sqlite3_shutdown_APIName', 'api may only be invoke before library initialization use api after shutdown by api']
['Applications that care about shared cache setting should set it explicitly', 'application care share cache setting should set explicitly']
['The use of the sqlite3_enable_load_extension_APIName interface should be avoided', 'use api should be avoid']
['It is recommended that the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method be used to enable only this interface', 'be recommend constant api be use enable only api']
['The progress handler callback must not do anything that will modify the database connection that invoked the progress handler', 'progress handler callback must not anything modify database connection invoke progress handler']
['This interface sqlite3_deserialize_APIName is only available', 'api be only available']
['The sqlite3_snapshot_free_APIName interface is only available', 'api be only available']
['sqlite3_step_APIName should not be called again on the VM', 'api should not be call']
['The sqlite3_snapshot_get_APIName interface is only available', 'api be only available']
['The sqlite3_snapshot_open_APIName interface is only available', 'api be only available']
['This interface sqlite3_snapshot_recover_APIName is only available', 'api be only available']
['You must call sqlite3_reset_APIName or sqlite3_finalize_APIName', 'PRON- must call api']
['This API sqlite3_stmt_scanstatus_reset_APIName is only available', 'api be only available']
['sqlite3_stmt_scanstatus_APIName is only available', 'api be only available']
['sqlite3_step_APIName should not be called again on this virtual machine without first calling sqlite3_reset_APIName to reset the virtual machine back to its initial state', 'api should not be call virtual machine without first call api reset virtual machine back initial state']
['you should rollback the transaction before continuing', 'PRON- should rollback before continue']
['The use of this interface is only necessary', 'use api be only necessary']
['After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName , sqlite3_step_APIName must be called one or more times to evaluate the statement', 'after prepared have be prepare use api one api must be call one time evaluate']
['This API sqlite3_unlock_notify_APIName is only available', 'api be only available']
['This routine sqlite3_user_data_APIName must be called from the same thread in which the application-defined function is running', 'api must be call thread which param function be run']
['The update hook implementation must not do anything that will modify the database connection that invoked the update hook', 'implementation must not anything modify database connection invoke']
['Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the update hook', 'action modify database connection must be defer until after api call']
['The callback function should register the desired collation using sqlite3_create_collation_APIName , sqlite3_create_collation16_APIName , or sqlite3_create_collation_v2_APIName', 'callback function should register desire use api']
['These APIs are only available', 'apis be only available']
['The callback implementation must not do anything that will modify the database connection that invoked the callback', 'callback implementation must not anything modify database connection invoke callback']
['Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the commit or rollback hook in the first place', 'action modify database connection must be defer until after api call commit rollback first place']
['Applications should finalize all prepared statements , close all BLOB handles , and finish all sqlite3_backup objects associated with the sqlite3 object prior to attempting to close the object', 'application should finalize prepared , close handle , param associate object before attempt close object']
['The application does not need to worry about freeing the result', 'application do not need worry freeing result']
['Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module', 'module name must be register before create virtual table use module before use preexist virtual table module']
['After being freed , memory should neither be read nor written', 'after freed , memory should neither be read nor write']
['sqlite3_column_name_APIParam_0 pointer is valid until either the prepared statement is destroyed by sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the next call to sqlite3_column_name_APIName or sqlite3_column_name16_APIName on the same column', 'param pointer be valid until either prepared be destroy by api until be automatically reprepare by first call api particular run until next call api']
['Memory to hold the error message string is managed internally and must not be freed by the application', 'memory hold error message string be manage internally must not be free by application']
['The string returned by sqlite3_expanded_sql_APIName must be free by the application by passing it to sqlite3_free_APIName', 'string return by api must be free by application by pass api']
['A sqlite3_free_table_APIParam_1 table should be deallocated using sqlite3_free_table_APIName', 'param table should be deallocate use api']
['The sqlite3_shutdown_APIName interface must only be called from a single thread', 'api must only be call single thread']
['The application should never invoke either sqlite3_os_init_APIName or sqlite3_os_end_APIName directly', 'application should never invoke either api directly']
['the calling function must not try to call sqlite3_free_APIName directly', 'call function must not try call api directly']
['These routines must be called from the same thread in which the SQL function is running', 'api must be call thread which function be run']
['After the application has finished with the result from sqlite3_get_table_APIName , it must pass the result table pointer to sqlite3_free_table_APIName', 'after application have result api , must pass result table pointer api']
['All open database connections must be closed and all other SQLite resources must be deallocated prior to invoking sqlite3_shutdown_APIName', 'open database connection must be close resource must be deallocate before invoking api']
['so that an application usually does not need to invoke sqlite3_initialize_APIName directly', 'application usually do not need invoke api directly']
['The strings returned by these two routines should be released by sqlite3_free_APIName', 'string return by two api should be release by api']
['Hence sqlite3_set_auxdata_APIName should be called near the end of the function implementation and the function implementation should not make any use of P after sqlite3_set_auxdata_APIName has been called', 'hence api should be call near end function implementation function implementation should not make use after api have be call']
['However , and the application must call sqlite3_initialize_APIName directly prior to using any other SQLite interface', 'however , application must call api directly before use api']
['Static mutexes are for internal use by SQLite only', 'static be internal use by only']
['Applications that use SQLite mutexes should use only the dynamic mutexes returned by SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant', 'application use should use only dynamic return by constant']
['Some systems do not support the operation implemented by sqlite3_mutex_try_APIName', 'system not support operation implement by api']
['The SQLite core never uses these routines except inside an assert_APIName and applications are advised to follow the lead of the core', 'never use api except inside api application be advise follow']
['the mutex must be exited an equal number of times before another thread can enter', 'mutex must be exit equal number time before another thread can enter']
['These interfaces are only available', 'api be only available']
['External mutex implementations are only required to provide these routines', 'external mutex implementation be only require provide api']
['The temporary directory must be set prior to calling sqlite3_open_APIName or sqlite3_open_v2_APIName', 'temporary directory must be set before call api']
['This must only be used within SQLITE_UPDATE_API_constant and SQLITE_DELETE_API_constant preupdate callbacks', 'must only be use within constant callback']
['Use the sqlite3_trace_v2_APIName interface instead of the routines described here', 'use api instead api describe']
['the application must supply a custom mutex implementation using the SQLITE_CONFIG_MUTEX_API_constant option of the sqlite3_config_APIName function before calling sqlite3_initialize_APIName or any other public sqlite3 _ function that calls sqlite3_initialize_APIName', 'application must supply custom mutex implementation use constant option api function before call api public _ function call api']
['This must only be used within SQLITE_INSERT_API_constant and SQLITE_UPDATE_API_constant preupdate callbacks', 'must only be use within constant callback']
['These routines must be called from the same thread as the SQL function that supplied the sqlite3_value parameters', 'api must be call thread as function supply param']
['These interfaces are available only on Windows', 'api be available only window']
['The sqlite3_prepare_APIName interface is legacy and should be avoided', 'api be should be avoid']
['The database connection must not have been closed', 'database connection must not have be close']
['application-defined SQL functions must be added to each database connection separately', 'param function must be add database connection separately']
['To execute an SQL statement , it must first be compiled into a byte-code program using one of these routines', 'execute , must first be compile param program use one api']
['However , such calls must not close the database connection nor finalize or reset the prepared statement in which the function is running', 'however , call must not close database connection nor finalize reset prepared which function be run']
['There can only be a single busy handler defined for each database connection', 'can only be single busy handler api database connection']
['The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback', 'callback must not anything modify database connection invoke callback']
['A busy handler must not close the database connection or prepared statement that invoked the busy handler', 'busy handler must not close database connection prepare invoke busy handler']
['The application must ensure that no other SQLite interfaces are invoked by other threads', 'application must ensure no api be invoke by thread']
['Hence , the sqlite3_column_value_APIName interface is normally only useful within the implementation of application-defined SQL functions or virtual tables , not within top-level application code', 'hence , api be normally only useful within implementation param function virtual table , not within param application code']
['The busy callback should not take any actions which modify the database connection that invoked the busy handler', 'busy callback should not take action which modify database connection invoke busy handler']
['you should call sqlite3_column_text_APIName , sqlite3_column_blob_APIName , or sqlite3_column_text16_APIName first to force the result into the desired format , invoke sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName to find the size of the result', 'PRON- should call api first force result desire format , invoke api find size result']
['Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption', 'use prepared after have be finalize can result undefined undesirable behavior as']
['This method is disabled on MacOS X 10.7 and iOS version 5.0 and will always return SQLITE_MISUSE_API_constant', 'api be disabled maco constant ios version constant always return constant']
['It is recommended that extension loading be disabled using the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method rather than this interface , so the load_extension_APIName SQL function remains disabled', 'be recommend extension loading be disable use constant api rather api function remain disabled']
['But it is not safe to call this routine with a database connection that is closed or might close before sqlite3_interrupt_APIName returns', 'but be not safe call api database connection close may close before api return']
['doing so is considered bad form', 'do be consider bad form']
['It is a grievous error for the application to try to use a prepared statement after it has been finalized', 'be grievous error application try use prepared after have be finalize']
['For all versions of SQLite up to and including 3.6.23.1, a call to sqlite3_reset_APIName was required after sqlite3_step_APIName returned anything other than SQLITE_ROW_API_constant before any subsequent invocation of sqlite3_step_APIName', 'version include , call api be require after api return anything constant before subsequent api']
['The caller is responsible for freeing sqlite3_serialize_APIParam_0 to avoid a memory leak', 'caller be responsible freeing param avoid memory leak']
['The sqlite3_trace_v2_APIName interface is intended to replace the legacy interfaces sqlite3_trace_APIName and sqlite3_profile_APIName , both of which are deprecated', 'api be intend replace api , which be deprecate']
['sqlite3_test_control_APIName is not for use by applications', 'api be not use by application']
['Without the mutexes , it is not safe to use SQLite concurrently from more than one thread', 'without , be not safe use concurrently one thread']
['Only sqlite3_free_table_APIName is able to release the memory properly and safely', 'only api be able release memory properly safely']
['For maximum portability , it is recommended that applications always invoke sqlite3_initialize_APIName directly prior to using any other SQLite interface', 'maximum , be recommend application always invoke api directly before use api']
['These routines sqlite3_trace_APIName and sqlite3_profile_APIName are deprecated', 'api be deprecate']
['The older interfaces are retained for backwards compatibility , but their use is discouraged', 'old api be retain backwards compatibility , but use be discourage']
['The sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName interfaces are recommended for all new programs', 'api be recommend program']
['This interface is only available', 'api be only available']
['The calling function should free this memory by calling sqlite3_free_APIName', 'call function should free memory by call api']
['Only the following subset of interfaces are subject to out-of-memory errors', 'only follow api be subject param error']
['The implementation of the new function always causes an exception to be thrown', 'implementation function always exception be throw']
['The sqlite3_snapshot object returned from a successful call to sqlite3_snapshot_get_APIName must be freed using sqlite3_snapshot_free_APIName to avoid a memory leak', 'param return successful call api must be free use api avoid memory leak']
['Calling sqlite3_blob_close_APIName with an argument that is not a NULL pointer or an open blob handle results in undefined behaviour', 'call api param not null pointer open handle result undefined behaviour']
['Moving an existing BLOB handle to a new row is faster than closing the existing handle and opening a new one', 'move exist handle be faster close exist handle open one']
['a crash or deadlock may be the result', 'crash may be result']
['An attempt to write to an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant', 'attempt write expire handle fail error code constant']
['The sqlite3_config_APIName interface is not threadsafe', 'api be not']
['the behavior is undefined', 'behavior be undefined']
['an infinite loop might be the result', 'infinite loop may be result']
['Assuming that after registering for an unlock-notify callback a database waits for the callback to be issued before taking any further action , using this API may cause the application to deadlock', 'assume after register param callback database wait callback be issue before take action , use api may application']
['the results are undefined', 'result be undefined']
['that collation is no longer usable', 'be no longer usable']
['That capability is no longer provided', 'be no longer provide']
['Use of this interface is not recommended', 'use api be not recommend']
['It is not safe to pass a sqlite3_free_table_APIParam_1 table directly to sqlite3_free_APIName', 'be not safe pass param table directly api']
['the behavior of SQLite is undefined', 'behavior be undefined']
['the behavior of sqlite3_msize_APIName is undefined and possibly harmful', 'behavior api be undefined possibly harmful']
['pointers calls to sqlite3_keyword_name_APIName result in undefined behavior', 'pointer call api result undefined behavior']
['Memory corruption , a segmentation fault , or other severe error might result', 'memory , , severe error may result']
['Attempting to deallocate a static mutex results in undefined behavior', 'attempt deallocate static mutex result undefined behavior']
['The sqlite3_initialize_APIName interface is threadsafe , but sqlite3_shutdown_APIName is not', 'api be , but api be not']
['The parameter name must be given in UTF-8', 'param name must be give param']
['The sqlite3_log_APIParam_2 string must not be NULL', 'param string must not be null']
['The new row must meet the same criteria as for sqlite3_blob_open_APIName - it must exist and there must be either a blob or text value stored in the nominated column', 'must meet as api _ must exist must be either text value store nominate']
["The `` iScanStatusOp '' must be one of the scanstatus options or the behavior of this interface is undefined", 'must be one option behavior api be undefined']
['The first parameter must be a copy of the SQL function context that is first parameter to the xStep or xFinal callback routine that implements the aggregate function', 'first param must be copy function context first param callback api implement function']
['To avoid memory leaks, the application should invoke sqlite3_free_APIName on error message strings returned through the 5_APIConstant parameter of sqlite3_exec_APIName after the error message string is no longer needed', 'avoid memory leak , application should invoke api error message string return constant param api after error message string be no longer need']
['The database connection pointer sqlite3_next_stmt_APIParam_1 in a call to sqlite3_next_stmt_APIName must refer to an open database connection and must not be a NULL pointer', 'database connection pointer param call api must refer open database connection must not be null pointer']
['The calling application should pass sqlite3_str_finish_APIParam_0 to sqlite3_free_APIName to avoid a memory leak', 'call application should pass param api avoid memory leak']
['xBestInde_APIParam_0 must be the sqlite3_index_info object that is the first parameter to the xBestIndex_APIName method', 'param must be param first param api']
['The M argument should be the bitwise OR-ed combination of zero or more SQLITE_TRACE_API_constant constants', 'param should be bitwise param combination constant']
['To avoid memory leaks, the object returned by sqlite3_str_new_APIName must be freed by a subsequent call to sqlite3_str_finish_APIName', 'avoid memory leak , object return by api must be free by subsequent call api']
['The second argument must be an index into the aConstraint array belonging to the sqlite3_index_info structure passed to xBestIndex', 'second param must be index array belong param pass']
['The sqlite3_close_v2_APIParam_1 parameter to sqlite3_close_APIName and sqlite3_close_v2_APIName must be either a NULL pointer or an sqlite3 object pointer obtained from sqlite3_open_APIName , sqlite3_open16_APIName , or sqlite3_open_v2_APIName , and not previously closed', 'param api must be either null pointer object pointer obtain api , not previously close']
['The sqlite3_create_collation_APIParam_3 sqlite3_create_collation_v2_APIParam_3 sqlite3_create_collation16_APIParam_3 must be one of SQLITE_UTF8, SQLITE_UTF16LE, SQLITE_UTF16BE, SQLITE_UTF16, SQLITE_UTF16_ALIGNED.', 'param must be one constant']
['The input to sqlite3_complete_APIName must be a zero-terminated UTF-8 string', 'input api must be param string']
['The input to sqlite3_complete16_APIName must be a zero-terminated UTF-16 string in native byte order', 'input api must be param stre native byte order']
['The application must not read or write any part of a block of memory after it has been released using sqlite3_free_APIName or sqlite3_realloc_APIName', 'application must not read write part block memory after have be release use api']
['The sqlite3_malloc64_APIName routine works just like sqlite3_malloc_APIName except that sqlite3_malloc_APIParam_1 is an unsigned 64-bit integer instead of a signed 32-bit integer', 'api work like api except param be unsigned param integer instead sign param integer']
['The sqlite3_realloc64_APIName interfaces works the same as sqlite3_realloc_APIName except that sqlite3_realloc_APIParam_2 is a 64-bit unsigned integer instead of a 32-bit signed integer', 'api work as api except param be param unsigned integer instead param sign integer']
['The value of the sqlite3_get_auxdata_APIParam_2 parameter to these interfaces should be non-negative', 'value param api should be param']
['The pointer arguments to sqlite3_free_APIName and sqlite3_realloc_APIName must be either NULL or else pointers obtained from a prior invocation of sqlite3_malloc_APIName or sqlite3_realloc_APIName that have not yet been released', 'pointer param api must be either null else pointer obtain prior api have not yet be release']
['The argument to sqlite3_mutex_alloc_APIName must be one of these integer constants', 'param api must be one integer constant']
['The encoding used for the sqlite3_open_APIParam_1 argument of sqlite3_open_APIName and sqlite3_open_v2_APIName must be UTF-8 , not whatever codepage is currently defined', 'encode use param api must be param , not whatever be currently api']
['Filenames containing international characters must be converted to UTF-8 prior to passing them into sqlite3_open_APIName or sqlite3_open_v2_APIName', 'filename contain international character must be param before pass api']
["it must be either an empty string or the string `` localhost ''", 'must be either empty string string localhost']
['It is recommended that when a database sqlite3_open_v2_APIParam_1 actually does begin with a ":" character you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as "./" to avoid ambiguity.', 'be recommend database param actually do begin : character -PRON- should prefix param as . avoid']
['The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined', 'param must be constant one less number behavior be undefined']
['it must be the byte offset into the string where the NULL terminator would appear if the string where NULL terminated', 'must be byte stre null would appear']
['These routines work only with protected sqlite3_value objects', 'api work only protect param']
['sqlite3_str_append_APIParam_2 must contain at least sqlite3_str_append_APIParam_3 non-zero bytes of content', 'param must contain least param byte content']
['The NNN value must be between 1 and the sqlite3_limit_APIName parameter SQLITE_LIMIT_VARIABLE_NUMBER_API_constant', 'value must be constant api param constant']
['The sqlite3_win32_set_directory_APIParam_2 parameter should be NULL to cause the previous value to be freed via sqlite3_free', 'param should be null previous value be free via api']
['The sqlite3_result_text64_APIName interface sets the return value of an application-defined function to be a text string in an encoding specified by the fifth parameter, which must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE', 'api set return value param function be text string specify by fifth param , which must be one constantbe , constantle']
['sqlite3_str_append_APIParam_3 must be non-negative', 'param must be param']
['sqlite3_create_function_APIParam_7 and sqlite3_create_function_APIParam_8 must both be non-NULL', 'param must be param']
['The sqlite3_bind_text64_APIParam_6 must be one of SQLITE_UTF8_API_constant , SQLITE_UTF16_API_constant , SQLITE_UTF16_API_constantBE , or SQLITE_UTF16_API_constantLE to specify the encoding of the text in the third parameter', 'param must be one constantbe , constantle specify encode text third param']
['An aggregate SQL function requires an implementation of xStep and xFinal and NULL pointer must be passed for xFunc', 'function require implementation null pointer must be pass']
['The sqlite3_win32_set_directory8 and sqlite3_win32_set_directory16 interfaces behave exactly the same as the sqlite3_win32_set_directory interface except the string parameter must be UTF-8 or UTF-16 , respectively', 'param api behave exactly as api except string param must be param , respectively']
['NULL pointers must be passed as sqlite3_create_function_APIParam_7 and sqlite3_create_function_APIParam_8', 'null pointer must be pass as param']
['sqlite3_bind_pointer_APIParam_5 is either a NULL pointer or a pointer to a destructor function for sqlite3_bind_pointer_APIParam_3', 'param be either null pointer pointer function param']
['The third through sixth parameters to the callback are either NULL pointers or zero-terminated strings that contain additional details about the action to be authorized', 'third sixth param callback be either null pointer param string contain additional detail action be authorize']
['Hence, the application should ensure that the correct authorizer callback remains in place during the sqlite3_step_APIName.', 'hence , application should ensure correct callback remain place during api']
['sqlite3_prepare_v3_APIName differs from sqlite3_prepare_v2_APIName only in having the extra sqlite3_prepare_v3_APIParam_4 , which is a bit array consisting of zero or more of the SQLITE_PREPARE_PERSISTENT, SQLITE_PREPARE_NORMALIZE and SQLITE_PREPARE_NO_VTAB', 'api differ api only have extra param , which be bit array consist constant']
['In a multithreaded environment , an unprotected sqlite3_value object may only be used safely with sqlite3_bind_value_APIName and sqlite3_result_value_APIName', 'multithreaded environment , unprotected param may only be use safely api']
['sqlite3_bind_parameter_name_APIParam_0 is always in UTF-8 encoding', 'param be always param']
['The first host parameter has an index of 1 , not 0', 'first host param have index constant , not constant']
['However , the column , table , or database of a BLOB handle can not be changed after the BLOB handle is opened', 'however , , table , database handle can not be change after handle be open']
['sqlite3_create_window_function_APIParam_8 and sqlite3_create_window_function_APIParam_9 may either both be NULL , in which case a regular aggregate function is created , or must both be non-NULL , in which case the new function may be used as either an aggregate or aggregate window function', 'param may either be null , which case regular function be create , must be param , which case function may be use as either window function']
['Testing suggests that , most applications will achieve adequate soft heap limit enforcement without the use of SQLITE_ENABLE_MEMORY_MANAGEMENT', 'suggest , application achieve adequate soft limit without use constant']
["For `` X LIKE P '' without the ESCAPE clause , set the sqlite3_strlike_APIParam_3 parameter of sqlite3_strlike_APIName to 0", 'like without , set param api constant']
['The second callback argument is one of SQLITE_INSERT_API_constant , SQLITE_DELETE_API_constant , or SQLITE_UPDATE_API_constant , depending on the operation that caused the callback to be invoked', 'second callback param be one constant , depend operation callback be invoke']
['sqlite3_column_decltype16_APIParam_0 is always UTF-8 encoded', 'param be always param encode']
['sqlite3_collation_needed_APIParam_2 and sqlite3_collation_needed16_APIParam_2 is one of SQLITE_UTF8_API_constant , SQLITE_UTF16_API_constantBE , or SQLITE_UTF16_API_constantLE , indicating the most desirable form of the collation sequence function required', 'param be one constantbe , constantle , indicate desirable form sequence function require']
['sqlite3_column_origin_name_APIParam_0 is valid until the prepared statement is destroyed using sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the same information is requested again in a different encoding', 'param be valid until prepared be destroy use api until be automatically reprepare by first call api particular run until information be request different']
['The default encoding for databases created using sqlite3_open16_APIName will be UTF-16 in the native byte order', 'default encode database create use api be param native byte order']
['Note that the name length limit is in UTF-8 bytes , not characters nor UTF-16 bytes', 'name length limit be param byte , not character nor param byte']
['It is recommended that you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as "./" to avoid ambiguity.', 'be recommend -PRON- should prefix param as . avoid']
['The flags parameter to sqlite3_open_v2_APIName can take one of the following three values , optionally combined with the SQLITE_OPEN_NOMUTEX_API_constant , SQLITE_OPEN_FULLMUTEX_API_constant , SQLITE_OPEN_SHAREDCACHE_API_constant , SQLITE_OPEN_PRIVATECACHE_API_constant , and/or SQLITE_OPEN_URI_API_constant flags', 'flag param api can take one follow three value , optionally combine constant flag']
['To delete an existing SQL function or aggregate , pass NULL pointers for all three function callbacks', 'exist function , pass null pointer three function callback']
['The length of the name is limited to 255 bytes in a UTF-8 representation , exclusive of the zero-terminator', 'length name be limit constant byte param representation , exclusive param']
['there is a small performance advantage to passing an sqlite3_prepare16_v2_APIParam_3 parameter that is the number of bytes in the input string including the nul-terminator', 'be small performance pass param number byte input string include param']
[' that parameter must be the byte offset where the NUL terminator would occur assuming the string were NUL terminated.', 'param must be byte nul would occur assume string be nul terminate']
['Do not pass the pointers returned from sqlite3_column_blob_APIName, sqlite3_column_text_APIName, etc', 'not pass pointer return api , etc']
['A function implementation with a non-negative nArg parameter is a better match than a function implementation with a negative nArg', 'function implementation param be well match function implementation negative']
['For security reasons , the SQLITE_DIRECTONLY_API_constant flag is recommended for any application-defined SQL function that has side-effects', 'security reason , constant flag be recommend param function have param']
['sqlite3_column_type_APIParam_0 is one of SQLITE_INTEGER_API_constant , SQLITE_FLOAT_API_constant , SQLITE_TEXT_API_constant , SQLITE_BLOB_API_constant , or SQLITE_NULL_API_constant', 'param be one constant']
['At present , there is only one option that may be configured using sqlite3_vtab_config_APIName', 'present , be only one option may be configure use api']
['The third parameter to the preupdate callback is one of the constants SQLITE_INSERT_API_constant , SQLITE_DELETE_API_constant , or SQLITE_UPDATE_API_constant to identify the kind of update operation that is about to occur', 'third param callback be one constant identify kind operation occur']
['The SQLite query planner is able to perform additional optimizations on deterministic functions , so use of the SQLITE_DETERMINISTIC_API_constant flag is recommended where possible', 'query be able perform additional optimization deterministic function , use constant flag be recommend possible']
['the soft heap limit is advisory only', 'soft limit be advisory only']
['A call to sqlite3_snapshot_open_APIName will fail', 'call api fail']
['the behavior is undefined and probably undesirable', 'behavior be undefined probably undesirable']
['the result is undefined behavior', 'result be undefined behavior']
['the busy handler is not reentrant', 'busy handler be not reentrant']
['Type conversions and pointer invalidations might occur in the following cases', 'type conversion pointer may occur follow case']
['On those systems , shared cache mode should be enabled per-database connection via sqlite3_open_v2_APIName with SQLITE_OPEN_SHAREDCACHE_API_constant', 'system , share cache mode should be enable param connection via api constant']
['Developers might also want to use the sqlite3_set_authorizer_APIName interface to further control untrusted SQL', 'developer may want use api control untrusted']
['the value returned by sqlite3_last_insert_rowid_APIName is unpredictable and might not equal either the old or the new last insert rowid', 'value return by api be unpredictable may not equal either old last insert']
['The sqlite3_finalize_APIName routine can be called at any point after any call to sqlite3_step_APIName regardless of ', 'api can be call point after call api regardless']
['the result of the comparison is undefined', 'result comparison be undefined']
['the results are undefined', 'result be undefined']
['Passing any other pointer into this routine results in undefined and probably undesirable behavior', 'pass pointer api result undefined probably undesirable behavior']
['Even reading previously freed memory might result in a segmentation fault or other severe error', 'even read previously free memory may result severe error']
['the value returned is unpredictable and not meaningful', 'value return be unpredictable not meaningful']
['The calling procedure is responsible for deleting the compiled SQL statement using sqlite3_finalize_APIName after it has finished with it', 'call procedure be responsible deleting compile use api after have']
['the resulting string will contain embedded NULs and the result of expressions operating on strings with embedded NULs is undefined', 'result string contain embed nul result operate string embed nul be undefined']
['then the behavior is undefined.', 'behavior be undefined']
['The result of expressions involving strings with embedded NULs is undefined', 'result involve string embed nul be undefined']
['For an INSERT operation on a rowid table , or any operation on a WITHOUT ROWID table , the value of the sixth parameter is undefined', 'insert operation table , operation without table , value sixth param be undefined']
['the behavior of this routine is undefined and probably undesirable', 'behavior api be undefined probably undesirable']
['the result is undefined', 'result be undefined']
[' the results are undefined', 'result be undefined']
['sqlite3_blob_open_APIName fails with SQLITE_ERROR_API_constant', 'api fail constant']
['but sometimes they are not possible and in those cases prior pointers are invalidated', 'but sometimes be not possible case prior pointer be invalidate']
['Do not mix calls to sqlite3_column_text_APIName or sqlite3_column_blob_APIName with calls to sqlite3_column_bytes16_APIName , and do not mix calls to sqlite3_column_text16_APIName with calls to sqlite3_column_bytes_APIName', 'not mix call api call api , not mix call api call api']
