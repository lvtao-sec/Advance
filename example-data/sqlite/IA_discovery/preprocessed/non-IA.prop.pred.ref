["The sixth , seventh and eighth parameters passed to the three `` sqlite3_create_function '' functions , xFunc , xStep and xFinal , are pointers to C-language functions that implement the SQL function or aggregate", 'sixth , seventh eighth param pass three api function , , , be pointer param function implement function']
['ppBlob is set to NULL', 'be set null']
['sqlite3_blob_write_APIName may only modify the contents of the BLOB', 'api may only modify content']
['sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions', 'set database connection error code message accessible via api relate function']
['Perhaps it was called on a prepared statement that has already been finalized or on one that had previously returned SQLITE_ERROR_API_constant or SQLITE_DONE_API_constant', 'perhaps be call prepared have already be finalize one have previously return constant']
['Workstation applications using SQLite normally do not need to invoke either of these routines', 'application use normally not need invoke either api']
['This seems counter-intuitive', 'seem param']
['sqlite3_value_free_APIName is a harmless no-op', 'api be harmless param']
['SQLite will only request a recursive mutex in cases where it really needs one', 'only request recursive mutex case really need one']
['mutexes are enabled and SQLite is threadsafe', 'be enable be']
['The datatype after conversion is returned by sqlite3_value_numeric_type_APIName', 'after conversion be return by api']
['The sqlite3_uri_int64_APIName routine converts the value of sqlite3_uri_int64_APIParam_2 into a 64-bit signed integer and returns that integer, or sqlite3_uri_int64_APIParam_3 if sqlite3_uri_int64_APIParam_2 does not exist', 'api value param sign integer return integer , param']
[' the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message explaining that access is denied', 'api equivalent call fail error message explain access be deny']
['The object returned by sqlite3_column_value_APIName is an unprotected sqlite3_value object', 'object return by api be unprotected param']
['the default VFS is returned by sqlite3_vfs_find_APIName', 'default be return by api']
['In the "vX" interfaces, the prepared statement that is returned by sqlite3_prepare_APIName contains a copy of the original SQL text', 'api , prepared return by api contain copy original text']
['the more specific error codes are returned directly by sqlite3_step_APIName', 'specific error code be return directly by api']
['The return value from sqlite3_soft_heap_limit64_APIName is the size of the soft heap limit prior to the call, or negative in the case of an error', 'return value api be size soft limit before call , negative case error']
['sqlite3_stmt_scanstatus_APIName returns non-zero and leave the variable that sqlite3_stmt_scanstatus_APIParam_4 points to unchanged', 'api return param leave variable param point unchanged']
['a non-zero value is returned by sqlite3_stmt_scanstatus_APIName and the variable that sqlite3_stmt_scanstatus_APIParam_4 points to is unchanged', 'param value be return by api variable param point be unchanged']
['an error code is returned by sqlite3_table_column_metadata_APIName', 'error code be return by api']
['sqlite3_wal_checkpoint_v2_APIParam_4 is set to the total number of checkpointed frames in the log file or to -1', 'param be set total number file constant']
['the sqlite3_wal_checkpoint_v2_APIName interface sets the error information that is queried by sqlite3_errcode_APIName and sqlite3_errmsg_APIName', 'api set error information query by api']
['The sqlite3_str_value_APIName method returns a pointer to the current content of the dynamic string under construction in X', 'api return pointer current content dynamic string construction']
['sqlite3_table_column_metadata_APIName causes all database schemas to be read from disk and parsed,, and returns an error if any errors are encountered while loading the schema.', 'api database be read parse , , return error']
['sqlite3_wal_checkpoint_v2_APIParam_3 is set to the total number of frames in the log file or to -1', 'param be set total number file constant']
['The sqlite3_value returned is a protected sqlite3_value object', 'param return be protect param']
['The sqlite3_str_length_APIName method returns the current length, in bytes, of the dynamic string under construction in sqlite3_str object X', 'api return current length , byte , dynamic string construction param']
['The value returned by sqlite3_str_value_APIName is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same sqlite3_str object', 'value return by api be manage by param may be free alter by subsequent api param']
['The sqlite3_vfs_find_APIName interface returns a pointer to a VFS given its name', 'api return pointer give name']
['Applications may change the content of the string returned by sqlite3_str_value_APIName as long as they do not write into any bytes outside the range of 0 to sqlite3_str_length_APIName and do not read or write any byte after any subsequent sqlite3_str method call', 'application may change content string return by api as long as not write byte range constant api not read write byte after subsequent param api call']
['SQLITE_TOOBIG_API_constant might be returned', 'constant may be return']
['The first six interfaces each return the value of a result column in a specific data format', 'first six api return value result specific datum format']
['the return value from these routines is the same as if the column had contained an SQL NULL value', 'return value api be as if have contain null value']
['The sqlite3_value_type_APIName interface returns the datatype code for the initial datatype of the sqlite3_value object V.', 'api return code initial param']
['These routines return information about a single column of the current result row of a query', 'api return information single current result query']
['The fourth parameter may optionally be ORed with SQLITE_DETERMINISTIC_API_constant to signal that the function will always return the same result given the same inputs within a single SQL statement', 'fourth param may optionally be ore constant signal function always return result give input within single']
['SQLite returns SQLITE_BUSY_API_constant for the first process, hoping that this will induce the first process to release its read lock and allow the second process to proceed', 'return constant first process , hop induce first process release read lock allow second process']
['The sqlite3_column_type_APIName routine returns the datatype code for the initial data type of the result column', 'api return code initial datum type result']
['The SQLITE_FCNTL_VFS_POINTER_API_constant opcode returns a pointer to the underlying sqlite3_vfs object for the file', 'constant return pointer underlie param file']
['The return value of the xFileControl method becomes the return value of this routine', 'return value api become return value api']
['The default configuration is recommended for most applications and so this routine is usually not necessary', 'default configuration be recommend application api be usually not necessary']
['sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table', 'api may only be call within call api virtual table']
['sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface', 'api may be call by either api virtual table implementation configure various virtual table api']
['A call to sqlite3_initialize_APIName is an "effective" call', 'call api be effective call']
['The SQLite core only provides implementations for these routines', 'only provide implementation api']
['sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation', 'api may only be call within call api virtual table implementation insert operation']
['These routines may only be called when the most recent call to sqlite3_step_APIName has returned SQLITE_ROW_API_constant and neither sqlite3_reset_APIName nor sqlite3_finalize_APIName have been called subsequently', 'api may only be call recent call api have return constant neither api nor api have be call subsequently']
['SQLite calls that function as the destructor on the text or BLOB result when it has finished using that result', 'call function as text result have use result']
['An application-defined function is permitted to call other SQLite interfaces', 'param function be permit call api']
['This interface only reports on the compile-time mutex setting of the SQLITE_THREADSAFE flag', 'api only report param mutex set constant flag']
["the database connection becomes an unusable `` zombie '' which will automatically be deallocated", 'database connection become unusable which automatically be deallocate']
['The SQLITE_IGNORE_API_constant return can be used to deny an untrusted user access to individual columns of a table', 'constant return can be use deny untrusted user access individual table']
['The destructor is called to dispose of the BLOB or string except the destructor is not called ', 'be call dispose stre except be not call']
['the callback might be invoked with two arguments', 'callback may be invoke two param']
['The second parameter is either the name of the database containing the specified table or NULL', 'second param be either name database contain specify table null']
['This error code is not remembered and will not be recalled by sqlite3_errcode_APIName or sqlite3_errmsg_APIName', 'error code be not remember not be recall by api']
['At various points , as logic is being created to perform various actions , the authorizer callback is invoked to see if those actions are allowed', 'various point , as be create perform various action , callback be invoke see']
['the maximum length of the string contained in the sqlite3_str object will be the value set for sqlite3_limit_APIName instead of SQLITE_MAX_LENGTH', 'maximum length string contain param be value set api instead constant']
['The third parameter is the name of the database that was written to', 'third param be name database be write']
['These routines work just like the corresponding column access functions except that these routines take a single protected sqlite3_value object pointer instead of a sqlite3_stmt pointer and an integer column number', 'api work like correspond access function except api take single protect param pointer instead param pointer integer number']
['It is permitted to register multiple implementations of the same functions with the same name but with either differing numbers of arguments or differing preferred text encodings', 'be permit regist multiple implementation function name but either differ number param differ preferred text']
['The second argument sqlite3_prepare_APIParam_2, sqlite3_prepare_v2_APIParam_2, sqlite3_prepare_v3_APIParam_2, sqlite3_prepare16_APIParam_2, sqlite3_prepare16_v2_APIParam_2 and sqlite3_prepare16_v3_APIParam_2  is the statement to be compiled , encoded as either UTF-8 or UTF-16', 'second param be be compile , encode as either param']
['The second argument is an integer constant , taken from the set of SQLITE_DBSTATUS options , that determines the parameter to interrogate', 'second param be integer constant , take set constant option , determine param interrogate']
['the BLOB is opened for read-only access', 'be open param access']
['sqlite3_deserialize_APIParam_5 is the size of the buffer sqlite3_deserialize_APIParam_3, which might be larger than sqlite3_deserialize_APIParam_4', 'param be size buffer param which may be large param']
['The 3rd argument to the sqlite3_exec_APIName callback is an array of pointers to strings obtained from sqlite3_column_text_APIName , one for each column', '3rd param api callback be array pointer string obtain api , one']
['the corresponding string pointer for the sqlite3_exec_APIName callback is a NULL pointer', 'corresponding string pointer api callback be null pointer']
['Databases managed by external sources can be given much smaller limits designed to prevent a denial of service attack', 'database manage by external source can be give much small limit design prevent service attack']
['The first argument to the callback is a copy of the third argument to sqlite3_update_hook_APIName', 'first param callback be copy third param api']
['The 4th argument to the sqlite3_exec_APIName callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from sqlite3_column_name_APIName', '4th param api callback be array pointer string entry represent name correspond result as obtain api']
['The parameter sqlite3_progress_handler_APIParam_2 is the approximate number of virtual machine instructions that are evaluated between successive invocations of the callback sqlite3_progress_handler_APIParam_3', 'param be approximate number virtual machine instruction be evaluate successive callback param']
['The sqlite3_exec_APIName interface runs zero or more UTF-8 encoded , semicolon-separate SQL statements passed into its 2nd argument , in the context of the database connection passed in as its 1st argument', 'api run constant param encode , param pass 2nd param , context database connection pass as 1st param']
['The first argument passed to an unlock-notify callback is a pointer to an array of void pointers , and the second is the number of entries in the array', 'first param pass param callback be pointer array void pointer , second be number entry array']
['So the longest string that can be completely written by sqlite3_snprintf_APIName  will be n-1 characters', 'long string can be completely write by api be param character']
['The third argument is the value to bind to the parameter', 'third param be value param']
['another VFS is chosen as the default', 'another be choose as default']
['SQLite makes its own private copy of the data immediately, before the sqlite3_bind__APIName routine returns', 'make private copy datum immediately , before api return']
['The sqlite3_str_reset_APIName method resets the string under construction inside sqlite3_str object sqlite3_str_reset_APIParam_1 back to zero bytes in length', 'api reset stre construction inside param back constant byte length']
['The second parameter is the name of the SQL function to be created or redefined', 'second param be name function be create redefined']
['the fourth argument value of all functions is the number of bytes in the value , not the number of characters', 'fourth param value function be number byte value , not number character']
['The fifth parameter is an arbitrary pointer', 'fifth param be arbitrary pointer']
['The fifth argument to the BLOB and string binding interfaces is a destructor used to dispose of the BLOB or string after SQLite has finished with it', 'fifth param stre api be use dispose string after have']
['The third parameter is the number of arguments that the SQL function or aggregate takes', 'third param be number param function take']
['The first parameter to the authorizer callback is a copy of the third parameter to the sqlite3_set_authorizer_APIName interface', 'first param callback be copy third param api']
['The second parameter to the callback is an integer action code that specifies the particular action to be authorized', 'second param callback be integer action code specifie particular action be authorize']
['A function where the preferred text encoding matches the database encoding is a better match than a function where the encoding is different', 'function prefer text encode match database be well match function encode be different']
['the length of sqlite3_bind_text_APIParam_4 and sqlite3_bind_text16_APIParam_4 is the number of bytes up to the first zero terminator', 'length param be number byte first constant']
['Autocommit mode is re-enabled by a COMMIT or ROLLBACK', 'mode be param by commit rollback']
['A function where the encoding difference is between UTF16le and UTF16be is a closer match than a function where the encoding difference is between UTF8 and UTF16', 'function encode difference be be close match function encode difference be utf8 utf constant']
['The default busy callback is NULL', 'default busy callback be null']
['On windows , the first component of an absolute path is a drive specification -LRB- e.g', 'window , first component absolute path be specification _ lrb _']
['The first argument to the sqlite3_bind__APIName routines is always a pointer to the sqlite3_stmt object returned from sqlite3_prepare_v2_APIName or its variants', 'first param api be always pointer param return api variant']
['The sqlite3_sourceid_APIName function returns a pointer to a string constant whose value is the same as the SQLITE_SOURCE_ID_API_constant C preprocessor macro', 'api function return pointer stre constant whose value be as constant macro']
['The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy', 'api make copy param return pointer copy']
['Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file', 'attempt return underlie operating system error code error number recent error failure open file']
['Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument', 'return size byte accessible via successfully open handle only param']
['Zero all sqlite3_stmt_scanstatus_APIName related event counters', 'constant api related event counter']
['In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants , literals may be replaced by a parameter that matches one of following templates', 'text input api variant , may be replace by param match one follow']
['The following interfaces are provided', 'follow api be provide']
['This causes the sqlite3_step_APIName interface to behave differently in three ways', 'api behave differently three way']
['The following table details the conversions that are applied', 'follow table detail conversion be apply']
["The problem has been fixed with the `` v2 '' interface", 'problem have be fix api']
['Or it could be the case that the same database connection is being used by two or more threads at the same moment in time', 'could be case database connection be use by two thread moment time']
['the return value from sqlite3_complete16_APIName will be non-zero regardless of whether or not the input SQL is complete', 'return value api be param']
['In the templates above , NNN represents an integer literal , and VVV represents an alphanumeric identifier', 'represent integer , represent alphanumeric identifier']
['or if the column index is out of range', 'if index be range']
['it will be invoked', 'be invoke']
['The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method', 'third fourth param api be pass directly second third param api']
['This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1', 'api return information predict measured performance param']
['The SQLITE_FCNTL_DATA_VERSION_API_constant returns the data version counter from the pager', 'constant return datum version counter']
[' sqlite3_column_bytes_APIName converts the string to UTF-8 and returns the number of bytes', 'api string param return number byte']
['the xColumn method can optionally return without setting a result, without calling any of the sqlite3_result_xxxxx_APIName interfaces', 'api can optionally return without set result , without call api']
['ppStmt is set to NULL', 'be set null']
['sqlite3_column_bytes16_APIName converts the string to UTF-16 and returns the number of bytes', 'api string param return number byte']
['The fourth parameter , eTextRep , specifies what text encoding this SQL function prefers for its parameters', 'fourth param , , specifie text encode function prefer param']
['Note also that sqlite3_snprintf_APIName returns a pointer to its buffer instead of the number of characters actually written into the buffer', 'note api return pointer buffer instead number character actually write buffer']
['and the end result is the same as sqlite3_bind_null_APIName', 'end result be as api']
['In those routines that have a fourth argument , its value is the number of bytes in the parameter', 'api have fourth param , value be number byte param']
['The first parameter is the database connection to which the SQL function is to be added', 'first param be database connection which function be be add']
["`` VACUUM '' is not a keyword", 'be not']
['the prepared statement statement is constructed to substitute a NULL value in place of the table column that would have been read if SQLITE_OK_API_constant had been returned', 'prepared be construct substitute null value place table would have be read']
['Most SQL functions are deterministic', 'function be deterministic']
[' the DELETE operation proceeds but the truncate optimization is disabled and all rows are deleted individually', 'operation but optimization be disabled be individually']
['It is provided to support rare applications with unusual needs', 'be provide support rare application unusual need']
['The fourth parameter may also optionally include the SQLITE_DIRECTONLY_API_constant flag', 'fourth param may optionally include constant flag']
['the xStep_APIName callback of the aggregate function implementation is never called and xFinal_APIName is called exactly once', 'api callback function implementation be never call api be call exactly']
['Use sqlite3_db_config to enable or disable only the C-API', 'use api enable disable only param']
['Its only purpose is to be a placeholder function that can be overloaded by a virtual table', 'only purpose be be placehold function can be overload by virtual table']
['The parameter P is passed through as the only parameter to the callback function X', 'param be pass as only param callback function']
['sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter', 'api return number modify , insert by recently complete insert , database connection specify by only param']
['This interface can be used in combination sqlite3_next_stmt_APIName to locate all prepared statements associated with a database connection that are in need of being reset', 'api can be use combination api locate prepared associate database connection be need reset']
['SQLITE_BUSY_API_constant means that the database engine was unable to acquire the database locks it needs to do its job', 'constant mean database engine be unable acquire database lock need job']
['Each call to either sqlite3_trace_APIName or sqlite3_trace_v2_APIName overrides any prior calls to sqlite3_trace_APIName or sqlite3_trace_v2_APIName', 'call either api override prior call api']
['The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema sqlite3_snapshot_open_APIParam_2 of database connection sqlite3_snapshot_open_APIParam_1 such that the read transaction refers to historical snapshot P , rather than the most recent change to the database', 'api either start read exist one param database connection param read refer historical snapshot , rather recent change database']
['The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite', 'definition pattern matching use api be as understand by']
['The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE sqlite3_strlike_APIParam_1 ESCAPE E" operator in the SQL dialect understood by SQLite', 'definition like pattern matching use api be as like param understand by']
['This interface used to be the only way to cause a checkpoint to occur', 'api use be only way occur']
['The return value of the sqlite3_threadsafe_APIName function shows only the compile-time setting of thread safety, not any run-time changes to that setting made by sqlite3_config_APIName', 'return value api function show only param set thread , not param change set make by api']
['it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained', 'be invoke lock retry until either param return constant lock be successfully obtain']
['A call to either function replaces the existing collation-needed callback', 'call either function replace exist param callback']
['The sqlite3_errmsg_APIName and sqlite3_errmsg16_APIName return English-language text that describes the error, as either UTF-8 or UTF-16 respectively', 'api return param text describe error , as either param respectively']
['This interface is retained for backwards compatibility and as a convenience for applications that need to manually start a callback but which do not need the full power of sqlite3_wal_checkpoint_v2_APIName', 'api be retain backwards compatibility as convenience application need manually start callback but which not need full api']
['These interfaces provide the same information as the SQLITE_VERSION_API_constant , SQLITE_VERSION_API_constant_NUMBER , and SQLITE_SOURCE_ID_API_constant C preprocessor macros but are associated with the library instead of the header file', 'api provide information as constant , param , constant macro but be associate library instead header file']
['We admit that the number of characters written would be a more useful return value but we cannot change the implementation of sqlite3_snprintf_APIName now without breaking compatibility', 'admit number character write would be useful return value but can not change implementation api without break compatibility']
['Except , there are some interfaces that are guaranteed to never change the value of the error code', 'except , be api be guarantee never change value error code']
["Note that running any other SQL statements , including SELECT statements , or merely calling sqlite3_prepare_v2_APIName and sqlite3_step_APIName will modify the database connections for the meaning of `` modify '' in this paragraph", 'run , include select , merely call api modify database connection meaning modify']
['The SQLite core only ever uses sqlite3_mutex_try_APIName as an optimization so this is acceptable behavior', 'only ever use api as optimization be acceptable behavior']
['The query component of a URI may contain parameters that are interpreted either by SQLite itself , or by a custom VFS implementation', 'query component uri may contain param be interpret either by , by custom implementation']
['The mutex implementation does not need to make a distinction between SQLITE_MUTEX_RECURSIVE_API_constant and SQLITE_MUTEX_FAST_API_constant', 'mutex implementation do not need make constant']
['SQLite invokes sqlite3_result_pointer_APIParam_4 with sqlite3_result_pointer_APIParam_2 as its only argument', 'invoke param as only param']
['Invoking either sqlite3_trace_APIName or sqlite3_trace_v2_APIName will cancel the profile callback', 'invoke either api cancel callback']
['These routines only compile the first statement in sqlite3_prepare16_APIParam_2 , so pzTail is left pointing to what remains uncompiled', 'api only compile first param , be leave pointing remain uncompiled']
['The only differences between the three sqlite3_create_function routines are the text encoding expected for the second parameter and the presence or absence of a destructor callback for the application data pointer', 'only difference three api be text encode expect second param callback application datum pointer']
['A protected sqlite3_value object may always be used where an unprotected sqlite3_value object is required , so either kind of sqlite3_value object can be used with this interface', 'protect param may always be use unprotected param be require , either kind param can be use api']
['the authorizer callback is invoked only', 'callback be invoke only']
['The sqlite3_bind_pointer_APIName routine causes the I-th parameter in prepared statement S to have an SQL value of NULL , but to also be associated with the pointer P of type T.', 'api param prepare have value null , but be associate pointer type']
['But the application does not want the user to be able to make arbitrary changes to the database', 'but application do not want user be able make arbitrary change database']
['A few opcodes for sqlite3_file_control_APIName are handled directly by the SQLite core and never invoke the sqlite3_io_methods', 'opcodes api be handle directly by never invoke param']
['The SQLITE_FCNTL_JOURNAL_POINTER_API_constant works similarly except that it returns the sqlite3_file object associated with the journal file instead of the main database', 'constant work similarly except return param associate file instead main database']
['The return value of sqlite3_column_type_APIName can be used to decide which of the first six interface should be used to extract the column value', 'return value api can be use decide which first six api should be use extract value']
['SQLite will invoke sqlite3_free_APIName on pzErrMsg after xEntryPoint_APIName returns', 'invoke api after api return']
['This routine actually returns the index of the largest parameter', 'api actually return index large param']
['On second and subsequent calls to sqlite3_aggregate_context_APIName for the same aggregate function instance, the same buffer is returned by sqlite3_aggregate_context_APIName', 'second subsequent call api function instance , buffer be return by api']
['SQLite ensures that pzErrMsg is NULL before calling the xEntryPoint_APIName', 'ensure be null before call api']
['Implementations of aggregate SQL functions use this routine to allocate memory for storing their state', 'implementation function use api allocate memory store state']
['The index value returned is suitable for use as the second parameter to sqlite3_bind_APIName', 'index value return be suitable use as second param api']
['The amount of space allocated by sqlite3_aggregate_context_APIName is determined by the sqlite3_aggregate_context_APIParam_2 parameter on first successful call', 'amount space allocate by api be determine by param first successful call']
['Return the index of an SQL parameter given its name', 'return index param give name']
["Parameters of the form '' ? ''", 'parameter form']
['the sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName call that provoked the xEntryPoint_APIName will fail', 'api call provoke api fail']
['In other words, the initial ":" or "$" or "@" or "?"is included as part of the name.', 'word , initial : be include as part name']
['For all forms except ?NNN, this will correspond to the number of unique parameters.', 'form except , correspond number unique param']
['This interface causes the xEntryPoint_APIName function to be invoked for each new database connection that is created', 'api function be invoke database connection create']
['This routine can be used to find the number of SQL parameters in a prepared statement', 'api can be use find number param prepare']
['No entry point will be called more than once for each database connection that is opened', 'no entry point be call database connection open']
['sqlite3_blob_close_APIName closes an open BLOB handle', 'api close open handle']
['the handle is still closed', 'handle be still close']
['The BLOB handle is closed unconditionally', 'handle be close unconditionally']
['SQLite automatically frees the memory allocated by sqlite3_aggregate_context_APIName', 'automatically free memory allocate by api']
["For TEMP tables , the database name is `` temp ''", 'table , database name be']
['The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates sqlite3_aggregate_context_APIParam_2 of memory, zeroes out that memory, and returns a pointer to the new memory', 'first time api be call particular function , allocate param memory , constante memory , return pointer memory']
['Calling this routine with a null pointer is a harmless no-op', 'call api null pointer be harmless param']
['Changing the value of sqlite3_aggregate_context_APIParam_2 in subsequent call to sqlite3_aggregate_context_APIName within the same aggregate function instance will not resize the memory allocation', 'change value param subsequent call api within function instance not resize memory allocation']
['Calling sqlite3_auto_extension_APIName with an entry point X that is already on the list of automatic extensions is a harmless no-op', 'call api entry point already list automatic extension be harmless param']
['Parameters of the form "?" without a following integer have no name and are referred to as `` nameless \'\' or `` anonymous parameters \'\'', 'parameter form without follow integer have no name be refer as nameless anonymous param']
["For the main database file , the database name is `` main ''", 'main database file , database name be main']
['For attached databases , this is the name that appears after the AS keyword in the ATTACH statement', 'attach database , be name appear after as attach']
['Within the xFinal callback , it is customary to set N = 0 in calls to sqlite3_aggregate_context_APIName so that no pointless memory allocations occur', 'within callback , be customary set constant call api no pointless memory allocation occur']
['they can not change the size of a blob', 'can not change size']
['Use the sqlite3_blob_bytes_APIName interface to determine the size of the opened blob', 'use api determine size open']
['the values returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions are set before returning', 'value return by api function be set before return']
['A BLOB referenced by sqlite3_blob_open_APIName may be read using the sqlite3_blob_read_APIName interface and modified by using sqlite3_blob_write_APIName', 'reference by api may be read use api modify by use api']
['Use the UPDATE SQL command to change the size of a blob', 'use command change size']
['The size of a blob may not be changed by this interface', 'size may not be change by api']
['Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database , but rather the symbolic name of the database', 'paramet param be not filename contain database , but rather symbolic name database']
['The idea here is that xEntryPoint_APIName is the entry point for a statically linked SQLite extension that is to be automatically loaded into all new database connections', 'idea be api be entry point statically link extension be automatically loaded database connection']
['The new row is identified by the rowid value passed as sqlite3_blob_reopen_APIParam_2', 'be identify by value pass as param']
['The size of the blob can be determined using the sqlite3_blob_bytes_APIName interface', 'size can be determine use api']
['The BLOB handle can be moved to a different row of the same table using the sqlite3_blob_reopen_APIName interface', 'handle can be move different table use api']
['This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close_APIName on ppBlob after sqlite3_blob_open_APIName it returns', 'mean , provide api be not misuse , be always safe call api after api return']
['sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer', 'api be use read datum open handle param buffer']
['Sqlite3_aggregate_context_APIName is normally called once for each invocation of the xStep callback and one last time', 'api be normally call callback one last time']
['The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P.', 'api return name param prepare']
['the BLOB is opened for read and write access', 'be open read write access']
['N bytes of data are copied into buffer sqlite3_blob_read_APIParam_2 from the open BLOB , starting at offset sqlite3_blob_read_APIParam_4', 'byte datum be copy buffer param open , start param']
['The database , table and column on which the blob handle is open remain the same', 'database , table which handle be open remain']
['Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB', 'change write before expire be not roll back by']
['sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table', 'api be use move exist handle point different database table']
['Such changes will eventually commit', 'change eventually commit']
['the current transaction is committed', 'current be commit']
['The sqlite3_bind_zeroblob_APIName and sqlite3_result_zeroblob_APIName interfaces and the built-in zeroblob SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface', 'api param constantblob function may be use create param read write use param api']
['the same BLOB that would be selected by', 'would be select by']
['This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5 , column sqlite3_blob_open_APIParam_4 , table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2', 'api open handle locate param , table param database param']
['SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" respectively.', 'param form : have name which be stre : respectively']
["the BLOB handle is marked as `` expired ''", 'handle be mark as expire']
['sqlite3_blob_reopen_APIName sets the database handle error code and message', 'api set database handle error code message']
['sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer', 'api be use write datum open handle param buffer']
['sqlite3_blob_write_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions', 'api set database connection error code message accessible via api relate function']
['that means the prepared statement returns no data', 'mean prepared return no datum']
['Only changes made to real tables are counted', 'only change make real table be count']
['Executing any other type of SQL statement does not modify the value returned by sqlite3_changes_APIName', 'execute type do not modify value return by api']
["The handler will sleep multiple times until at least `` ms '' milliseconds of sleeping have accumulated", 'handler multiple time until least ms millisecond have accumulate']
['Return the number of columns in the result set returned by the prepared statement', 'return number result set return by prepared']
['N bytes of data are copied from the buffer Z into the open BLOB , starting at offset sqlite3_blob_write_APIParam_4', 'byte datum be copy buffer open , start param']
['Use this routine to reset all host parameters to NULL', 'use api reset host param null']
['Changes to a view that are intercepted by INSTEAD OF triggers are not counted', 'change be intercept by instead be not count']
['SQL parameters are tokens of the form "?", "?NNN", ":AAA", "$AAA", or "@AAA" that serve as placeholders for values that are bound to the parameters at a later time.', 'param be form , , : , , serve as value be param later time']
['The sqlite3_cancel_auto_extension_APIName interface unregisters the initialization routine X that was registered using a prior call to sqlite3_auto_extension_APIName', 'api unregister initialization api be register use prior call api']
['Subsequent arguments vary depending on the configuration option in sqlite3_config_APIParam_1', 'subsequent param vary depend configuration option param']
['Calling this routine with an argument less than or equal to zero turns off all busy handlers', 'call api param less equal constant turn busy handler']
['This may happen', 'may happen']
['A SELECT statement will always have a positive sqlite3_column_count_APIName but depending on the WHERE clause constraints and the table content, it might return no rows', 'select always have positive api but depend constraint table content , may return no']
['sqlite3_db_cacheflush_APIName does not set the database handle error code or message returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions', 'api do not set database handle error code message return by api function']
['Subsequent arguments vary depending on the configuration verb', 'subsequent param vary depend configuration']
['Contrary to the intuition of many , sqlite3_reset_APIName does not reset the bindings on a prepared statement', 'contrary many , api do not reset prepare']
['Note , however , that sqlite3_config_APIName can be called as part of the implementation of an application-defined sqlite3_os_init_APIName', 'note , however , api can be call as part implementation param api']
['The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs', 'api return database connection handle which prepare belong']
['The filename returned by sqlite3_db_filename_APIName is the output of the xFullPathname method of the VFS', 'filename return by api be output api']
['The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement sqlite3_step_APIParam_1', 'api return number current result set prepared param']
['The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function', 'api return copy pointer database connection api originally register application api function']
['The interface is similar to sqlite3_config_APIName except that the changes apply to a single database connection', 'api be similar api except change apply single database connection']
['The sqlite3_config_APIName interface is used to make global configuration changes to SQLite', 'api be use make global configuration change']
['The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection', 'api be use make configuration change database connection']
['The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database sqlite3_db_filename_APIParam_2 of connection D. The main database file has the name "main"', 'api return pointer filename associate database param connection d. main database file have name main']
['sleeps for a specified amount of time', 'specify amount time']
['This means that if the changes_APIName SQL function is used by the first INSERT, UPDATE or DELETE statement within a trigger, it returns the value as set when the calling statement began executing', 'mean if api function be use by first insert , within , return value as set call begin execute']
['This routine sets a busy handler that', 'api set busy handler']
["The sqlite3_db_cacheflush_APIName interface flushes caches for all schemas - `` main '' , `` temp '' , and any attached databases", 'api flush cache _ main , , attach database']
['The first argument to sqlite3_config_APIName is an integer configuration option that determines what property of SQLite is to be configured', 'first param api be integer configuration option determine property be be configure']
['The first argument is the database connection object to be interrogated', 'first param be database connection object be interrogate']
['Things are more complicated', 'thing be complicate']
['This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized', 'api return pointer param access database connection give param threading mode be']
['that other busy handler is cleared', 'busy handler be clear']
['the value returned reflects the number of rows modified by the previous INSERT, UPDATE or DELETE statement within the same trigger', 'value return reflect number modify by previous insert , within']
['The set of SQLITE_DBSTATUS options is likely to grow in future releases of SQLite', 'set constant option be likely grow future release']
['Extension loading is off by default', 'extension loading be by default']
['This interface is used to retrieve runtime status information about a single database connection', 'api be use retrieve runtime status information single database connection']
['The database connection returned by sqlite3_db_handle is the same database connection that was sqlite3_db_handle_APIParam_1 to the sqlite3_prepare_v2_APIName call that was used to create the statement in the first place', 'database connection return by api be database connection be param api call be use create first place']
['the filename will be an absolute pathname', 'filename be absolute']
['The current value of the requested parameter is written into pCur and the highest instantaneous value is written into pHiwtr', 'current value request param be write high instantaneous value be write']
['Writes to the BLOB that occurred before the BLOB handle expired are not rolled back by the expiration of the handle', 'write occur before handle expire be not roll back by handle']
['Only changes made directly by the INSERT , UPDATE or DELETE statement are considered - auxiliary changes caused by triggers , foreign key actions or REPLACE constraint resolution are not counted', 'only change make directly by insert , be consider _ auxiliary change by , foreign key action replace constraint resolution be not count']
['all virtual table modules are removed', 'virtual table module be remove']
['A dirty page may be in use', 'dirty page may be use']
['The xCreate and xConnect methods of a virtual table module call this interface to declare the format of the virtual tables they implement', 'api virtual table module call api declare format virtual table implement']
['it is invoked in the usual manner', 'be invoke usual']
['The sqlite3_deserialize_APIName interface causes the database connection sqlite3_deserialize_APIParam_1 to disconnect from database sqlite3_deserialize_APIParam_2 and reopen sqlite3_deserialize_APIParam_2 as an in-memory database based on the serialization contained in sqlite3_deserialize_APIParam_3', 'api database connection param disconnect database param reopen param as param database base serialization contain param']
['the highest instantaneous value is reset back down to the current value', 'high instantaneous value be reset back current value']
['the database is skipped and an attempt made to flush any dirty pages belonging to the next database', 'database be skip attempt make flush dirty page belong next database']
['This is a change as of SQLite version 3.5.0', 'be change as version constant']
['Shared cache is disabled by default', 'share cache be disable by default']
['any dirty pages in the pager-cache that are not currently in use are written out to disk', 'dirty page param be not currently use be write']
['The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D.', 'api attempt free as much memory as possible database connection']
['Cache sharing is enabled and disabled for an entire process', 'cache be enable disabled entire process']
['This interface enables or disables both the C-API sqlite3_load_extension_APIName and the SQL function load_extension_APIName', 'api enable disable param api function api']
['The sqlite3_finalize_APIName function is called to delete a prepared statement', 'api function be call prepared']
['But this might change in future releases of SQLite', 'but may change future release']
['sqlite3_free_APIName is invoked on argument sqlite3_deserialize_APIParam_3 prior to returning', 'api be invoke param before return']
['sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity', 'api pende database operation abort return early']
['In prior versions of SQLite , sharing was enabled or disabled for each thread separately', 'prior version , be enable disabled thread separately']
['This interface is threadsafe on processors where writing a 32-bit integer is atomic', 'api be processor write param integer be atomic']
['The extended result codes are disabled by default for historical compatibility', 'extend result code be disable by default historical compatibility']
['The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite', 'api enable disable extend result code feature']
['Invoking sqlite3_finalize_APIName on a NULL pointer is a harmless no-op', 'invoking api null pointer be harmless param']
['Existing database connections continue use the sharing mode that was in effect at the time they were opened', 'exist database connection continue use mode be effect time be open']
['The cache sharing mode set by this interface effects all subsequent calls to sqlite3_open_APIName , sqlite3_open_v2_APIName , and sqlite3_open16_APIName', 'cache mode set by api effect subsequent call api']
['The 4th argument to sqlite3_exec_APIName is relayed through to the 1st argument of each callback invocation', '4th param api be relay 1st param callback']
['sqlite3_last_insert_rowid_APIName is accessible to SQL statements via the last_insert_rowid_APIName SQL function', 'api be accessible via api function']
['sqlite3_exec_APIName sets the pointer in its 5th parameter to NULL before returning', 'api set pointer param null before return']
['Call the sqlite3_enable_load_extension_APIName routine with onoff == 1 to turn extension loading on and call it with onoff == 0 to turn it back off again', 'call api constant turn extension loading call constant turn back']
['This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database', 'api enable disable share database cache datum structure connection database']
['A call to sqlite3_interrupt_APIName that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after the sqlite3_interrupt_APIName call returns', 'call api occur be no run be param have no effect be start after api call return']
['subsequent calls to sqlite3_last_insert_rowid_APIName return the rowid associated with these internal INSERT operations, which leads to unintuitive results', 'subsequent call api return associate internal insert operation , which unintuitive result']
["Each entry in most SQLite tables has a unique 64-bit signed integer key called the `` rowid ''", 'entry table have unique param sign integer key call']
['this routine will return the rowid of the inserted row as long as the trigger is running', 'api return insert as long as be run']
['Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired', 'program end , value return by api revert be before be fire']
['SQLite will invoke sqlite3_free_APIName on the serialization buffer when the database connection closes', 'invoke api serialization buffer database connection close']
['Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using sqlite3_set_last_insert_rowid_APIName before returning control to the user', 'virtual table implementation write table way can avoid problem by restore original value use api before return control user']
['It is safe to call this routine from a thread different from the thread that is currently running the database operation', 'be safe call api thread different thread currently run database operation']
['As well as being set automatically as rows are inserted into database tables, the value returned by sqlite3_last_insert_rowid_APIName may be set explicitly by sqlite3_set_last_insert_rowid_APIName', 'as well as set automatically as be insert database table , value return by api may be set explicitly by api']
['The internal databases can be given the large , default limits', 'internal database can be give large , default limit']
['no callback is ever invoked and result rows are ignored', 'no callback be ever invoke result be ignore']
['This interface allows the size of various constructs to be limited on a connection by connection basis', 'api allow size various construct be limit connection by connection basis']
['Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK, and INSERT OR ABORT make no changes to the return value of this routine when their insertion fails', 'thus insert fail , insert ignore , insert rollback , insert abort make no change return value api fail']
['The INSERT continues to completion after deleting rows that caused the constraint problem so INSERT OR REPLACE will always change the return value of this interface', 'insert continue after deleting constraint problem insert replace always change return value api']
['The sqlite3_last_insert_rowid_APIName interface usually returns the rowid of the most recent successful INSERT into a rowid table or virtual table on database connection D.', 'api usually return recent successful insert table virtual table database connection']
['Regardless of whether or not the limit was changed, the sqlite3_limit_APIName interface returns the prior value of the limit', 'regardless whether not limit be change , api return prior value limit']
['execution of the current statement stops and subsequent statements are skipped', 'execution current stop subsequent be skip']
['For the purposes of this routine , an INSERT is considered to be successful', 'purpose api , insert be consider be successful']
['it does not fail', 'do not fail']
['the limit is unchanged', 'limit be unchanged']
['that column is another alias for the rowid', 'be another alias']
['any error message is written into memory obtained from sqlite3_malloc_APIName and passed back through the 5th parameter', 'error message be write memory obtain api pass back param']
['New run-time limit categories may be added in future releases', 'param limit may be add future release']
['The entry point is sqlite3_load_extension_APIParam_3', 'entry point be param']
['SQLite will try to increase the buffer size using sqlite3_realloc64_APIName if writes on the database cause it to grow larger than M bytes', 'try increase buffer size use api']
['This interface loads an SQLite extension library from the named file', 'api load extension library name file']
["It first tries `` sqlite3_extension_init ''", 'first try param']
['For each limit category SQLITE_LIMIT_NAME there is a hard upper bound set at compile-time by a C preprocessor macro called SQLITE_MAX_NAME', 'limit constant be hard upper set param by macro call constant']
['The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection sqlite3_drop_modules_APIParam_1 except those named on list sqlite3_drop_modules_APIParam_2', 'api remove virtual table module database connection param except name list param']
['The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2', 'api attempt load extension library contain file param']
['Run-time limits are intended for use in applications that manage both their own internal database and also databases that are controlled by untrusted external sources', 'param limit be intend use application manage internal database database be control by untrusted external source']
['The sqlite3_exec_APIName interface is a convenience wrapper around sqlite3_prepare_v2_APIName , sqlite3_step_APIName , and sqlite3_finalize_APIName , that allows an application to run multiple statements of SQL without having to use a lot of C code', 'api be convenience wrapper around api , allow application run multiple without have use lot code']
['Hence , to find the current value of a limit without changing it , simply invoke this interface with sqlite3_limit_APIParam_3 set to -1', 'hence , find current value limit without change , simply invoke api param set constant']
['The rowid is always available as an undeclared column named ROWID , OID , or _ ROWID _ as long as those names are not also used by explicitly declared columns', 'be always available as undeclared name , , _ _ as long as name be not use by explicitly declare']
['An example application might be a web browser that has its own databases for storing history and separate databases controlled by JavaScript applications downloaded off the Internet', 'example application may be browser have database store separate database control by application download internet']
['it is invoked for each result row coming out of the evaluated SQL statements', 'be invoke result come evaluated']
['it might not have an opportunity to be interrupted and might continue to completion', 'may not have be interrupt may continue']
['the entire transaction will be rolled back automatically', 'entire be roll back automatically']
['no SQL statements are evaluated and the database is not changed', 'no be evaluate database be not change']
['before statement sqlite3_finalize_APIParam_1 is ever evaluated , after one or more calls to sqlite3_reset_APIName , or after any call to sqlite3_step_APIName regardless of whether or not the statement has completed execution', 'before param be ever evaluate , after one call api , after call api']
['Any new SQL statements that are started after the sqlite3_interrupt_APIName call and before the running statements reaches zero are interrupted as if they had been running prior to the sqlite3_interrupt_APIName call.', 'be start after api call before run reach constant be interrupt as if have be run before api call']
['The size of the database created by an untrusted script can be contained using the max_page_count PRAGMA', 'size database create by untrusted script can be contain use param']
['This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1', 'api return pointer next prepared after param associate database connection param']
['Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction', 'virtual table implementation may insert table as part commit']
['The log message is stored in a fixed-length buffer on the stack', 'message be store param buffer stack']
['So the new function is not good for anything by itself', 'function be not good anything by']
['So as not to open security holes in older applications that are unprepared to deal with extension loading , and as a means of disabling extension loading , the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off', 'as not open security old application be unprepared deal extension loading , as mean disable extension loading , follow api be provide turn api mechanism']
['this interface returns a pointer to the first prepared statement associated with the database connection sqlite3_next_stmt_APIParam_1', 'api return pointer first prepared associate database connection param']
['Setting parameter X to NULL disables the progress handler', 'set param null disable progress handler']
['the operation is interrupted', 'operation be interrupt']
['To avoid deadlocks and other threading problems , the sqlite3_log_APIName routine will not use dynamically allocated memory', 'avoid threading problem , api not use dynamically allocate memory']
['The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG_API_constant option to sqlite3_config_APIName', 'api write message error establish by constant option api']
['zProc may be 0 , in which case SQLite will try to come up with an entry point name on its own', 'may be constant , which case try come entry point name']
['Use sqlite3_clear_bindings_APIName to reset the bindings', 'use api reset']
['Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module', 'virtual table can provide alternative implementation function use api virtual table module']
['The sqlite3_log_APIName interface is intended for use by extensions such as virtual tables , collating functions , and SQL functions', 'api be intend use by extension as virtual table , collate function , function']
['sqlite3_release_memory_APIName returns the number of bytes actually freed, which might be more or less than the amount requested', 'api return number byte actually free , which may be less amount request']
['The PRNG is also used for the build-in random_APIName and randomblob_APIName SQL functions', 'be use param api function']
['This interface allows applications to access the same PRNG for other purposes', 'api allow application access purpose']
['The progress handler is also disabled by setting N to a value less than 1', 'progress handler be disable by set value less constant']
['This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName', 'api disable automatic extension previously register use api']
["This feature can be used to implement a `` Cancel '' button on a GUI progress dialog box", 'feature can be use implement cancel button progress']
['The sqlite3_reset_APIName interface does not change the values of any bindings on the prepared statement S', 'api do not change value prepared']
['Memory used to cache database pages to improve performance is an example of non-essential memory', 'memory use cache database page improve performance be example param memory']
['A call to this routine stores sqlite3_randomness_APIParam_1 bytes of randomness into buffer sqlite3_randomness_APIParam_2', 'call api store param byte buffer param']
['The number of subtype bytes preserved by SQLite might increase in future releases of SQLite', 'number byte by may increase future release']
['Only a single progress handler may be defined at one time per database connection', 'only single progress handler may be api one time per database connection']
['The sqlite3_reset_APIName interface resets the prepared statement S back to the beginning of its program', 'api reset prepare back begin program']
["Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of `` modify '' in this paragraph", 'api modify database connection meaning modify']
['This API makes sure a global version of a function with a particular name and number of parameters exists', 'api make sure global version function particular name number param exist']
['setting a new progress handler cancels the old one', 'set progress handler cancel old one']
['SQLite implements this interface by calling the xSleep_APIName method of the default sqlite3_vfs object', 'implement api by call api default param']
['the progress handler is disabled', 'progress handler be disabled']
['a new function is created', 'function be create']
['Any SQL statement variables that had values bound to them using the sqlite3_bind __ APIName API retain their values', 'variable have value use param _ _ apiname api retain value']
['The number of milliseconds of sleep actually requested from the operating system is returned by sqlite3_sleep_APIName', 'number millisecond actually request operating system be return by api']
['attempts are made to load with various operating-system specific extensions added', 'attempt be make load various param specific extension add']
['For an ordinary on-disk database file , the serialization is just a copy of the disk file', 'ordinary param database file , serialization be copy file']
['The sqlite3_snapshot_cmp interface is used to compare the ages of two valid snapshot handles', 'api be use compare two valid snapshot handle']
['The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state , ready to be re-executed', 'api function be call reset prepared object back initial state , ready be param']
['The final value of P is undefined', 'final value be undefined']
['The usual case is that sqlite3_serialize_APIName copies the serialization of the database into memory obtained from sqlite3_malloc64_APIName and returns a pointer to that memory', 'usual case be api copy serialization database memory obtain api return pointer memory']
['the sqlite3_log_APIParam_2 string and subsequent arguments are used with sqlite3_snprintf_APIName to generate the final output string', 'param stre subsequent param be use api generate final output string']
['The sqlite3_set_last_insert_rowid method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database', 'api allow application set value return by call api without insert database']
['The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the sqlite3_serialize_APIParam_2 database on database connection D.', 'api return pointer memory serialization param database database connection']
['The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library', 'api attempt free byte memory by deallocate param memory allocation hold by database library']
['The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P', 'api destroy param']
['The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema sqlite3_snapshot_get_APIParam_2 in database connection D. On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into P and returns SQLITE_OK_API_constant', 'api attempt make param record current state param database connection d. success , api write pointer newly create param return constant']
['one is opened automatically', 'one be open automatically']
['the read transaction is now open on database snapshot P', 'read be open database snapshot']
['The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context sqlite3_result_subtype_APIParam_1 to be the value sqlite3_result_subtype_APIParam_2', 'api function result param function param be value param']
['the sqlite3_load_extension_APIName interface shall attempt to fill pzErrMsg with error message text stored in memory obtained from sqlite3_malloc_APIName', 'api shall attempt fill error message text store memory obtain api']
['higher order bits are discarded', 'high order bit be discard']
['The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter', 'api function current thread suspend execution least number millisecond specify param']
['SQLite contains a high-quality pseudo-random number generator used to select random ROWIDs', 'contain param number use select random']
['The wal file is deleted', 'file be']
['the callback function X to be invoked periodically', 'callback function be invoke periodically']
['the time will be rounded up to the nearest second', 'time be round near second']
["it constructs a name `` sqlite3_X_init '' where the X is consists of the lower-case equivalent of all ASCII alphabetic characters in the filename from the last '' / '' to the first following '' . ''", 'construct name param be consist param equivalent ascii alphabetic character filename last first following']
['The sqlite3_progress_handler_APIName interface causes the callback function X to be invoked periodically during long running calls to sqlite3_exec_APIName, sqlite3_step_APIName and sqlite3_get_table_APIName for database connection D.', 'api callback function be invoke periodically during long running call api database connection']
['would be written to disk where backed up to disk', 'would be write back']
['the behavior of sqlite3_sleep_APIName may deviate from the description in the previous paragraphs', 'behavior api may deviate description previous']
["For an in-memory database or a `` TEMP '' database , the serialization is the same sequence of bytes which", 'param database database , serialization be sequence byte which']
['SQLITE_DONE_API_constant means that the statement has finished executing successfully', 'constant mean have execute successfully']
['With SQLITE_ENABLE_MEMORY_MANAGEMENT , the soft heap limit is enforced on every memory allocation', 'constant , soft limit be enforce every memory allocation']
['the pseudo-randomness is generated internally and without recourse to the sqlite3_vfs xRandomness method  would be written to disk if that database where backed up to disk.', 'param be generate internally without param api would be write  back']
['The values may be accessed using the column access functions', 'value may be access use access function']
['sqlite3_step_APIName is called again to retrieve the next row of data', 'api be call retrieve next datum']
['the same read transaction remains open if SQLITE_ERROR_API_constant, SQLITE_BUSY_API_constant or SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName', 'read remain open']
['More information may be found by calling sqlite3_errmsg_APIName', 'information may be find by call api']
['We admit that this is a goofy design', 'admit be goofy design']
['With the "v2" interface, any of the other result codes or extended result codes might be returned as well', 'api , result code extend result code may be return as well']
['sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName', 'api attempt scan file associate database param database handle param make valid snapshot available api']
['SQLITE_MISUSE_API_constant means that the this routine was called inappropriately', 'constant mean api be call inappropriately']
['The circumstances under which SQLite will enforce the soft heap limit may changes in future releases of SQLite', 'which enforce soft limit may change future release']
['The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite', 'api set query soft limit amount memory may be allocate by']
['Hence , the current size of the soft heap limit can be determined by invoking sqlite3_soft_heap_limit64_APIName with a negative argument', 'hence , current size soft limit can be determine by invoke api negative param']
['The SQLITE_OMIT_AUTORESET compile-time option can be used to restore the legacy behavior', 'constant param option can be use restore behavior']
['The "iScanStatusOp" parameter determines which status information to return', 'param determine which status information return']
['But after version 3.6.23.1,sqlite3_step_APIName began calling sqlite3_reset_APIName automatically in this circumstance rather than returning SQLITE_MISUSE_API_constant', 'but after version api begin call api automatically rather return constant']
["Parameter `` idx '' identifies the specific loop to retrieve statistics for", 'paramet identifie specific loop retrieve statistic']
['Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect', 'param function virtual table may change database indirectly as side effect']
['Loops are numbered starting from zero', 'loop be number start constant']
['Statistics might not be available for all loops in all statements', 'statistic may not be available loop']
['With the legacy interface , a more specific error code can be obtained by calling sqlite3_reset_APIName on the prepared statement', 'api , specific error code can be obtain by call api prepare']
['no change is made to the soft heap limit', 'no change be make soft limit']
["The requested measurement is written into a variable pointed to by the `` pOut '' parameter", 'request be write variable point by param']
['The first argument is the prepared statement object to be interrogated', 'first param be prepare object be interrogate']
['Beginning with SQLite version 3.7.3 , the soft heap limit is enforced regardless of whether or not the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is invoked', 'begin version constant , soft limit be enforce _ time option be invoke']
['This interface is used to retrieve and reset counter values from a prepared statement', 'api be use retrieve reset counter value prepare']
['The soft heap limit is not enforced in the current implementation', 'soft limit be not enforce current implementation']
['These counters can be used to monitor the performance characteristics of the prepared statements', 'counter can be use monitor performance prepare']
['The current value of the requested counter is returned by sqlite3_stmt_status_APIName', 'current value request counter be return by api']
['Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations', 'prepared maintain various constant counter measure number time have perform specific operation']
['you can retry the statement', 'PRON- can retry']
['SQLite strives to keep heap memory utilization below the soft heap limit by reducing the number of pages held in the page cache as heap memory usages approaches the limit', 'strive keep memory soft limit by reduce number page hold page cache as memory usage approach limit']
['The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object', 'api allocate initialize param']
['the counter is reset to zero after this interface call returns', 'counter be reset constant after api call return']
['The return value is OS-dependent', 'return value be param']
['The sqlite3_str_new_APIParam_1 parameter to sqlite3_str_new_APIName may be NULL', 'param api may be null']
['It is always safe to use the value returned by sqlite3_str_new_APIName as the sqlite3_str parameter to any of the other sqlite3_str methods', 'be always safe use value return by api as param api']
['The sqlite3_strlike_APIName function matches Unicode characters', 'api function match unicode character']
['Advanced applications can use this interface to compare the predicted', 'advanced application can use api compare predict']
['The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string', 'api destroy param return pointer memory buffer obtain api contain construct string']
['the measured performance and issue warnings and/or rerun ANALYZE', 'measure performance issue warning analyze']
['the following SQL statement would change the database file through side-effects', 'follow would change database file param']
['SQLite can be compiled with or without mutexes', 'can be compile without']
['The sqlite3_table_column_metadata routine returns information about column C of table T in database D on database connection X', 'api return information table database database connection']
['A database connection might not know that the database file is in WAL mode', 'database connection may not know database file be mode']
['The column is identified by the second , third and fourth parameters to sqlite3_table_column_metadata_APIName', 'be identify by second , third fourth param api']
['that would tend to indicate that the prepared statement is using a full table scan rather than an index', 'would tend indicate prepare be use full table scan rather index']
["The details of the behavior of the sqlite3_step_APIName interface depend on whether the statement was prepared using the newer `` vX '' interfaces sqlite3_prepare_v3_APIName , sqlite3_prepare_v2_APIName , sqlite3_prepare16_v3_APIName , sqlite3_prepare16_v2_APIName or the older legacy interfaces sqlite3_prepare_APIName and sqlite3_prepare16_APIName", 'detail behavior api depend whether be prepare use new api old api']
['Metadata is returned by sqlite3_table_column_metadata_APIName by writing to the memory locations passed as the 5th and subsequent parameters to sqlite3_table_column_metadata_APIName', 'be return by api by write memory location pass as subsequent param api']
['Enabling mutexes incurs a measurable performance penalty', 'enable incur measurable performance']
['The default behavior is for mutexes to be enabled', 'default behavior be be enable']
['Executing any other type of SQL statement does not affect the value returned by sqlite3_total_changes_APIName', 'execute type do not affect value return by api']
['Any of these arguments may be NULL , in which case the corresponding element of metadata is omitted', 'param may be null , which case correspond element be omit']
['the return value from sqlite3_threadsafe_APIName is unchanged by calls to sqlite3_config_APIName', 'return value api be unchanged by call api']
['The integer return value from the callback is currently ignored', 'integer return value callback be currently ignore']
['The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes', 'api be use read internal state inject purpose']
['the mutexes are omitted', 'be omit']
['The C argument is a copy of the context pointer', 'param be copy context pointer']
['A trace callback is invoked with four arguments', 'callback be invoke four param']
['There may be at most one unlock-notify callback registered by a blocked connection', 'may be one param callback register by block connection']
['the identity of the database connection that has locked the required resource is stored internally', 'identity database connection have lock require resource be store internally']
['sqlite3_total_changes_APIName returns the total number of rows inserted , modified or deleted by all INSERT , UPDATE or DELETE statements completed', 'api return total number insert , modify by insert , complete']
['The blocked connections unlock-notify callback may also be canceled by closing the blocked connection using sqlite3_close_APIName', 'block connection param callback may be cancel by close block connection use api']
['The callback is invoked from within the sqlite3_step or sqlite3_close call that concludes the blocking connections transaction', 'callback be invoke within api call conclude block connection']
['To detect changes against a database file from other database connections use the PRAGMA data_version command or the SQLITE_FCNTL_DATA_VERSION_API_constant file control', 'detect change against database file database connection use param command constant file control']
['The sqlite3_str_new_APIName interface always returns a pointer to a valid sqlite3_str object', 'api always return pointer valid param']
['the outputs for the rowid are set as follows', 'output be set as follow']
['As with the LIKE operator , the sqlite3_strlike_APIName function is case insensitive - equivalent upper and lower case ASCII characters match one another', 'as like , api function be case insensitive _ equivalent upper low case ascii character match one another']
['So , it makes sense to disable the mutexes', 'make sense disable']
['The details of the operation codes , their meanings , the parameters they take , and what they do are all subject to change without notice', 'detail operation code , meaning , param take , be subject change without']
['To avoid this scenario , the sqlite3_unlock_notify_APIName performs deadlock detection', 'avoid , api perform detection']
['Changes made as part of foreign key actions are included in the count , but those made as part of REPLACE constraint resolution are not', 'change make as part foreign key action be include count , but make as part replace constraint resolution be not']
['The X callback is invoked', 'callback be invoke']
['The final callback parameter is the rowid of the row', 'final callback param be']
['However , the signature of the callback function allows SQLite to pass it an array of void context pointers', 'however , signature callback function allow pass array void context pointer']
['This gives the application an opportunity to prioritize any actions related to the set of unblocked database connections', 'give application prioritize action relate set unblocked database connection']
['The sqlite3_trace_v2_APIName interface registers a trace callback function X against database connection D , using property mask M and context pointer P', 'api register callback function against database connection , use property mask context pointer']
['the specified callback is invoked immediately , from within the call to sqlite3_unlock_notify_APIName', 'specify callback be invoke immediately , within call api']
['databases are searched for the table using the same algorithm used by the database engine to resolve unqualified table references', 'database be search table use use by database engine resolve unqualified table reference']
['the new callback replaces the old', 'callback replace old']
['This API may be used to register a callback that SQLite will invoke', 'api may be use register callback invoke']
['the extended error code is set to SQLITE_LOCKED_API_constant_SHAREDCACHE', 'extended error code be set param']
['any existing unlock-notify callback is canceled', 'exist param callback be cancel']
['there is a chance that the blocking connection will have already concluded its transaction by the time sqlite3_unlock_notify_APIName is invoked', 'be block connection have already conclude by time api be invoke']
['Any callback set by a previous call to sqlite3_update_hook_APIName for the same database connection is overridden', 'callback set by previous call api database connection be override']
['This interface can be used by an application to make sure that the version of SQLite that it is linking against was compiled with the desired setting of the SQLITE_THREADSAFE macro', 'api can be use by application make sure version be link against be compile desire set constant macro']
['there may be more than one blocked connection that has registered for an unlock-notify callback', 'may be one block connection have register param callback']
['then the output parameters are set for the explicitly declared column.', 'output param be set explicitly declare']
['then mutexes are enabled by default but can be fully or partially disabled using a call to sqlite3_config_APIName with the verbs SQLITE_CONFIG_SINGLETHREAD_API_constant, SQLITE_CONFIG_MULTITHREAD_API_constant, or SQLITE_CONFIG_SERIALIZED_API_constant.', 'be enable by default but can be fully partially disabled use call api constant']
['SQLite arbitrarily selects one of the other connections to use as the blocking connection', 'arbitrarily select one connection use as block connection']
['Further options may be added in the future', 'option may be add future']
['Use the sqlite3_result_subtype_APIName routine to set the subtype for the return value of an SQL function', 'use api set return value function']
['The exceptions defined in this paragraph might change in a future release of SQLite', 'exception api may change future release']
['In the case of an update , this is the rowid after the update takes place', 'case , be after take place']
['sqlite3_vtab_collation_APIName returns a pointer to a buffer containing the name of the collation sequence for the corresponding constraint', 'api return pointer buffer contain name sequence correspond constraint']
['The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2_APIName', 'api be equivalent api']
['Checkpoints initiated by this mechanism are PASSIVE', 'initiate by mechanism be passive']
["there is no `` blocking connection '' , so invoking sqlite3_unlock_notify_APIName results in the unlock-notify callback being invoked immediately", 'be no block connection , invoking api result param callback invoke immediately']
['on unix systems, after sqlite3_open_v2_APIName returns SQLITE_CANTOPEN_API_constant, this interface could be called to get back the underlying "errno" that caused the problem, such as ENOSPC, EAUTH, EISDIR, and so forth', 'unix system , after api return constant , api could be call get back underlie errno problem , as , , , forth']
['The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.', 'api function return param function param']
['The subtype information can be used to pass a limited amount of context from one SQL function to another', 'information can be use pass limited amount context one function another']
['But the newer and more powerful sqlite3_wal_checkpoint_v2_APIName interface was added', 'but new powerful api be add']
['The callback registered by sqlite3_wal_autocheckpoint_APIName replaces any existing callback registered using sqlite3_wal_hook_APIName', 'callback register by api replace exist callback register use api']
['The wal_autocheckpoint pragma can be used to invoke this interface from SQL', 'param can be use invoke api']
['Applications might use this to substitute a return value that is less expensive to compute and that the corresponding xUpdate method understands as a "no-change" value', 'application may use substitute return value less expensive compute correspond api understand as param value']
['Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely', 'pass constant negative value as nframe param disable automatic entirely']
['The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function', 'api return copy pointer be param api originally register application api function']
['it will not be invoked', 'not be invoke']
['Likewise , registering a callback using sqlite3_wal_hook_APIName disables the automatic checkpoint mechanism configured by sqlite3_wal_autocheckpoint_APIName', 'likewise , register callback use api disable automatic mechanism configure by api']
['SQLite checks if there are any currently executing SELECT statements that belong to the same connection', 'check if be currently execute select belong connection']
['The update hook is not invoked', 'be not invoke']
['hook is not invoked', 'be not invoke']
['Every new database connection defaults to having the auto-checkpoint enabled with a threshold of 1000 or SQLITE_DEFAULT_WAL_AUTOCHECKPOINT pages', 'every database connection default have param enable constant page']
['The PRAGMA wal_checkpoint command can be used to invoke this interface from SQL', 'param command can be use invoke api']
["All calls obtain an exclusive `` checkpoint '' lock on the database file", 'call obtain exclusive lock database file']
["The SQLITE_CHECKPOINT_FULL_API_constant , RESTART and TRUNCATE modes also obtain the exclusive `` writer '' lock on the database file", 'constant , restart mode obtain exclusive lock database file']
['the values written to output parameters pnLog and pnCkpt are undefined', 'value write output param be undefined']
['The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object', 'api be object']
['The busy-handler is also invoked', 'param be invoke']
['Calling sqlite3_wal_hook_APIName replaces any previously registered write-ahead log callback', 'call api replace previously register param callback']
['The names returned are the original un-aliased names of the database, table, and column', 'name return be original param name database , table']
['the checkpoint operation proceeds from that point in the same way as SQLITE_CHECKPOINT_PASSIVE_API_constant - checkpointing as many frames as possible without blocking any further', 'operation point way as constant _ checkpointing as many as possible without block']
['The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database sqlite3_wal_checkpoint_v2_APIParam_2 of database connection sqlite3_wal_checkpoint_v2_APIParam_1 in mode sqlite3_wal_checkpoint_v2_APIParam_3', 'api run operation database param database connection param mode param']
['Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE_API_constant , the log file will have been truncated to zero bytes and so both pnLog and pnCkpt will be set to zero', 'upon successful constant , file have be constant byte be set constant']
['The left-most column is column 0 for these routines', 'param be constant api']
['Calling sqlite3_close_APIName or sqlite3_close_v2_APIName with a NULL pointer argument is a harmless no-op', 'call api null pointer param be harmless param']
['Note that the sqlite3_wal_autocheckpoint_APIName interface and the wal_autocheckpoint pragma both invoke sqlite3_wal_hook_APIName and will overwrite any prior sqlite3_wal_hook_APIName settings', 'api param invoke api overwrite prior api setting']
['The sqlite3_wal_hook_APIName function is used to register a callback that is invoked each time data is committed to a database in wal mode', 'api function be use register callback invoke time datum be commit database mode']
['The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after committing a transaction', 'api be wrapper around api database database connection automatically after commit']
['In brief , sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database sqlite3_wal_checkpoint_APIParam_2 on database connection sqlite3_wal_checkpoint_APIParam_1 to be transferred into the database file and for the write-ahead log to be reset', 'api content param database param database connection param be transfer database file param be reset']
['The sqlite3_update_hook_APIName interface registers a callback function with the database connection identified by the first argument to be invoked', 'api register callback function database connection identify by first param be invoke']
['the specified operation is attempted on all WAL databases attached to database connection sqlite3_wal_checkpoint_v2_APIParam_1', 'specify operation be attempt database attach database connection param']
['the first argument passed is a copy of the second argument to sqlite3_collation_needed_APIName or sqlite3_collation_needed16_APIName', 'first param pass be copy second param api']
['the system is also considered to be deadlocked', 'system be consider be deadlocke']
['neither connection will proceed and the system may remain deadlocked indefinitely', 'neither connection system may remain deadlocke indefinitely']
['CREATE TABLE t1', 'create table constant']
['it is invoked once with the set of void context pointers specified by the blocked connections bundled together into an array', 'be invoke set void context pointer specify by block connection bundle together array']
['given the database schema', 'give database']
['the following statement to be compiled', 'follow be compile']
['SQLite uses dynamic run-time typing', 'use dynamic param typing']
['SELECT c1 + 1 , c1 FROM t1', 'select constant']
['As with all other SQLite APIs, those whose names end with "16" return UTF-16 encoded strings and the other functions return UTF-8', 'as api , whose name end constant return param encode string function return param']
['The second parameter is the column number', 'second param be number']
['These functions return information about the Nth result column returned by the statement, where N is the second function argument', 'function return information result return by , be second function param']
['Otherwise, they return the name of the attached database, table, or column that query result column was extracted from', 'otherwise , return name attached database , table , query result be extract']
['SQLite is strongly typed , but the typing is dynamic not static', 'be strongly type , but typing be dynamic not static']
['The first parameter is the prepared statement that implements the SELECT statement', 'first param be prepare implement select']
['These routines return the name assigned to a particular column in the result set of a SELECT statement', 'api return name assign particular result set select']
['Registering a NULL function disables the callback', 'register null function disable callback']
['The commit and rollback hook callbacks are not reentrant', 'commit rollback callback be not reentrant']
['The pArg argument is passed through to the callback', 'param be pass callback']
['The _database_ routines return the database name, the _table_ routines return the table name, and the origin_ routines return the column name', '_ database _ api return database name , _ table _ api return table name , origin _ api return name']
['the commit is converted into a rollback', 'commit be rollback']
['Type is associated with individual values , not with the containers used to hold those values', 'type be associate individual value , not container use hold value']
['the COMMIT is converted into a ROLLBACK', 'commit be rollback']
['the COMMIT operation is allowed to continue normally', 'commit operation be allow continue normally']
['Whitespace and comments that follow the final semicolon are ignored', 'whitespace comment follow final be ignore']
['The sqlite3_column_name_APIName interface returns a pointer to a zero-terminated UTF-8 string and sqlite3_column_name16_APIName returns a pointer to a zero-terminated UTF-16 string', 'api return pointer param string api return pointer param string']
['The SQLITE_ prefix is omitted from any strings returned by sqlite3_compileoption_get_APIName', '_ prefix be omit string return by api']
['The sqlite3_close_v2_APIName interface is intended for use with host languages that are garbage collected , and where the order in which destructors are called is arbitrary', 'api be intend use host language be collect , order which be call be arbitrary']
['Any callback set by a previous call to sqlite3_commit_hook_APIName for the same database connection is overridden', 'callback set by previous call api database connection be override']
['The SQLITE _ prefix may be omitted from the option name passed to sqlite3_compileoption_used_APIName', '_ prefix may be omit option name pass api']
['the declared type of the table column is returned by sqlite3_column_decltype_APIName', 'declare type table be return by api']
['The rollback hook is invoked on a rollback that results from a commit hook returning non-zero, just as it would be with any other rollback', 'rollback be invoke rollback result commit return param as would be rollback']
['The sqlite3_compileoption_get_APIName function allows iterating over the list of options that were defined at compile time by returning the N-th compile time option string', 'api function allow iterate list option be api compile time by return param compile time option string']
['it is passed the names of undefined collation sequences as strings encoded in UTF-8', 'be pass name undefined sequence as string encode param']
['These routines provide a means to determine the database , table , and table column that is the origin of a particular result column in SELECT statement', 'api provide mean determine database , table , table origin particular result select']
['The sqlite3_commit_hook_APIName interface registers a callback function to be invoked', 'api register callback function be invoke']
['that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error , will have still occurred', 'error propagate back code base provoke callback report error , have still occur']
['The rollback callback is not invoked', 'rollback callback be not invoke']
['These routines do not parse the SQL statements thus will not detect syntactically incorrect SQL', 'api not parse thus not detect syntactically incorrect']
['The first parameter passed to the callback function is a copy of the third parameter passed to sqlite3_wal_hook_APIName when registering the callback', 'first param pass callback function be copy third param pass api registering callback']
['This is different from every other SQLite interface', 'be different every api']
['So just a particular type does not mean that the data stored in that column is of the declared type', 'particular type do not mean datum store be declare type']
['The inconsistency is unfortunate but can not be changed without breaking backwards compatibility', 'be unfortunate but can not be change without break backwards compatibility']
['Support for the diagnostic functions sqlite3_compileoption_used_APIName and sqlite3_compileoption_get_APIName may be omitted by specifying the SQLITE_OMIT_COMPILEOPTION_DIAGS option at compile time', 'support diagnostic function api may be omit by specify constant option compile time']
['The name of the module is given by the second parameter', 'name module be give by second param']
['The module name is registered on the database connection specified by sqlite3_create_module_APIParam_1', 'module name be register database connection specify by param']
['The fifth argument , xCallback , is a pointer to the collating function', 'fifth param , , be pointer collate function']
['These functions add , remove , or modify a collation associated with the database connection specified as the first argument', 'function add , remove , modify associate database connection specify as first param']
['These routines are used to register a new virtual table module name', 'api be use register virtual table module name']
['Semicolons that are embedded within string literals or quoted identifier names or comments are not independent tokens and thus do not count as a statement terminator', 'be embed within string quote identifier name comment be not independent thus not count as']
['Collation names that compare equal according to sqlite3_strnicmp_APIName are considered to be the same name', 'name compare equal accord api be consider be name']
['the collating function is deleted', 'collate function be']
['The fourth argument , pArg , is an application data pointer that is passed through as the first argument to the collating function callback', 'fourth param , , be application datum pointer pass as first param collate function callback']
['The xDestroy callback is not called', 'callback be not call']
['sqlite3_initialize_APIName is invoked automatically by sqlite3_complete16_APIName', 'api be invoke automatically by api']
['These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing', 'api be useful during param input determine']
['the name of the column is unspecified and may change from one release of SQLite to the next', 'name be unspecified may change one release next']
['The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released , so the implementation may read , write or checkpoint the database as required', 'callback be invoke by after commit have take place associate param database release , implementation may read , write database as require']
['A statement is judged to be complete', 'be judge be complete']
['The sqlite3_create_module_APIName interface is equivalent to sqlite3_create_module_v2_APIName with a NULL destructor', 'api be equivalent api null']
["The name of a result column is the value of the `` AS '' clause for that column", 'name result be value as']
['For the purposes of this API, a transaction is said to have been rolled back', 'purpose api , be say have be roll back']
['The values returned by sqlite3_errcode_APIName and/or sqlite3_extended_errcode_APIName might change with each API call', 'value return by api may change api call']
['To avoid having to register all collation sequences before a database can be used , a single callback function may be registered with the database connection to be invoked', 'avoid have register sequence before database can be use , single callback function may be register database connection be invoke']
['The third parameter is a pointer to the implementation of the virtual table module', 'third param be pointer implementation virtual table module']
['Memory to hold the error message string is managed internally', 'memory hold error message string be manage internally']
['At a minimum , literal values will be replaced with suitable placeholders', 'minimum , value be replace suitable']
['The sqlite3_errstr_APIName interface returns the English-language text that describes the result code, as UTF-8', 'api return param text describe result code , as param']
['The sqlite3_create_module_v2_APIName interface has a fifth parameter which is a pointer to a destructor for the sqlite3_create_module_APIParam_4', 'api have fifth param which be pointer param']
['Passing a NULL pointer to sqlite3_free_APIName is harmless', 'pass null pointer api be harmless']
["`` Core '' in the previous sentence does not include operating-system specific VFS implementation", 'previous do not include param specific implementation']
['The sqlite3_extended_errcode_APIName interface is the same except that it always returns the extended result code even when extended result codes are disabled', 'api be except always return extended result code even extend result code be disabled']
['The Windows VFS uses native malloc_APIName and free_APIName for some operations', 'window use native api operation']
['The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option limits the size of bound parameter expansions', 'constant param option limit size param']
['The sqlite3_expanded_sql_APIName interface returns a pointer to a UTF-8 string containing the SQL text of prepared statement sqlite3_normalized_sql_APIParam_1 with bound parameters expanded', 'api return pointer param string contain text prepare param expand']
['The strings returned by sqlite3_sql_APIName and sqlite3_normalized_sql_APIName are managed by SQLite and are automatically freed when the prepared statement is finalized', 'string return by api be manage by be automatically free prepared be finalize']
['the prior allocation is not freed', 'prior allocation be not free']
['However , the error string might be overwritten or deallocated by subsequent calls to other SQLite interface functions', 'however , error string may be overwrite deallocate by subsequent call api function']
['In that case , the error code and message may or may not be set', 'case , error code message may may not be set']
['SQLite will invoke the destructor function', 'invoke function']
['The SQLite core uses these three routines for all of its own internal memory allocation needs', 'use three api internal memory allocation need']
['The destructor will also be invoked', 'be invoke']
['The sqlite3_realloc_APIName interface attempts to resize a prior memory allocation sqlite3_realloc_APIParam_1 to be at least sqlite3_realloc_APIParam_2 bytes', 'api attempt resize prior memory allocation param be least param byte']
['The sqlite3_normalized_sql_APIName interface returns a pointer to a UTF-8 string containing the normalized SQL text of prepared statement P. The semantics used to normalize a SQL statement are unspecified and subject to change', 'api return pointer param string contain normalize text prepare p. semantic use normalize be unspecified subject change']
['Calling sqlite3_free_APIName with a pointer previously returned by sqlite3_malloc_APIName or sqlite3_realloc_APIName releases that memory so that it might be reused', 'call api pointer previously return by api release memory may be reuse']
['The value returned by sqlite3_msize_APIName might be larger than the number of bytes requested when sqlite3_msize_APIParam_1 was allocated', 'value return by api may be large number byte request param be allocate']
['The sqlite3_malloc_APIName routine returns a pointer to a block of memory at least N bytes in length, where N is the parameter', 'api return pointer block memory least byte length , be param']
['Multiple collating functions can be registered using the same name but with different eTextRep parameters and SQLite will use whichever function requires the least amount of data transformation', 'multiple collating function can be register use name but different param use whichever function require least amount datum transformation']
['sqlite3_realloc_APIName returns a pointer to a memory allocation of at least sqlite3_realloc_APIParam_2 bytes in size', 'api return pointer memory allocation least param byte size']
['The table conceptually has a number of rows and columns', 'table conceptually have number']
['This is a legacy interface that is preserved for backwards compatibility', 'be api backwards compatibility']
['the xDestroy callback is invoked on pArg', 'callback be invoke']
['The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument', 'collate function callback be invoke copy application datum pointer two string encode specify by param']
['The sqlite3_create_collation_v2_APIName works like sqlite3_create_collation_APIName with the addition that', 'api work like api addition']
['the second error will be reported', 'second error be report']
['A result table records the complete query results from one or more queries', 'result table record complete query result one query']
['The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement sqlite3_normalized_sql_APIParam_1', 'api return pointer copy param text use create prepared param']
['no new module is create', 'no module be create']
['A result table is memory data structure created by the sqlite3_get_table_APIName interface', 'result table be memory datum structure create by api']
['and any existing modules with the same name are dropped', 'exist module name be']
['sqlite3_msize_APIName returns the size of that memory allocation in bytes', 'api return size memory allocation byte']
['Memory allocation errors were detected , but they were reported back as SQLITE_CANTOPEN_API_constant or SQLITE_IOERR_API_constant rather than SQLITE_NOMEM_API_constant', 'memory allocation error be detect , but be report back as constant rather constant']
['The memory returned by sqlite3_malloc_APIName, sqlite3_realloc_APIName, sqlite3_malloc64_APIName, and sqlite3_realloc64_APIName is always aligned to at least an 8 byte boundary, or to a 4 byte boundary', 'memory return by api be always align least constant byte boundary , constant byte boundary']
['that means the interface was invoked incorrectly by the application', 'mean api be invoke incorrectly by application']
['There are (N+1)*M elements in the array.', 'be . element array']
['These numbers are obtained separately', 'number be obtain separately']
['min_APIName bytes of the prior allocation are copied into the beginning of buffer returned by sqlite3_realloc_APIName and the prior allocation is freed', 'api byte prior allocation be copy begin buffer return by api prior allocation be free']
['The sqlite3_free_APIName routine is a no-op', 'api be param']
['azResult holds this content', 'hold content']
['The remaining entries all point to query results', 'remain entry point query result']
['There are two column and three rows', 'be two three']
['But these numbers are not part of the result table itself', 'but number be not part result table']
['Thus the result table has 8 entries', 'thus result table have constant entry']
['A result table is an array of pointers to zero-terminated UTF-8 strings', 'result table be array pointer param string']
['The sqlite3_initialize_APIName routine initializes the SQLite library', 'api initialize library']
['Let N be the number of rows and M be the number of columns', 'let be number be number']
['In SQLite version 3.5.0 and 3.5.1 , it was possible to define the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in implementation of these routines to be omitted', 'version constant , be possible define constant which would param implementation api be omit']
['Note the last bullet', 'note last']
['All other values are in their UTF-8 zero-terminated string representation as returned by sqlite3_column_text_APIName', 'value be param string representation as return by api']
['A sqlite3_free_table_APIParam_1 table might consist of one or more memory allocations', 'param table may consist one memory allocation']
['its behavior is identical to calling sqlite3_malloc_APIName', 'behavior be identical call api']
['The sqlite3_get_table_APIName interface is implemented as a wrapper around sqlite3_exec_APIName', 'api be implement as wrapper around api']
['SQLite is free to discard the metadata at any time , including', 'be free discard time , include']
['the behavior is exactly the same as calling sqlite3_free_APIName', 'behavior be exactly as call api']
['Suppose the sqlite3_free_table_APIParam_1 table is stored in an array names azResult', 'suppose param table be store array name']
['The first M pointers point to zero-terminated strings that contain the names of the columns', 'first pointer point param string contain name']
['The fourth parameter is an arbitrary client data pointer that is passed through into the xCreate and xConnect methods of the virtual table module', 'fourth param be arbitrary client datum pointer pass api virtual table module']
['To avoid this , each thread can obtain exclusive use of the database connection sqlite3_db_mutex_APIParam_1 by invoking sqlite3_mutex_enter before beginning to use sqlite3_db_mutex_APIParam_1 and invoking sqlite3_mutex_leave after all calls to the interfaces listed here are completed', 'avoid , thread can obtain exclusive use database connection param by invoke api before begin use param invoke api after call api list be complete']
['it might be the case that a second error occurs on a separate thread in between the time of the first error and the call to these interfaces', 'may be case second error occur separate thread time first error call api']
['Prior to SQLite version 3.7.10 , the Windows OS interface layer called the system malloc_APIName and free_APIName directly and', 'prior version constant , window os api layer call system api directly']
['All other calls are harmless no-ops', 'call be harmless param']
['Only an effective call of sqlite3_initialize_APIName does any initialization', 'only effective call api do initialization']
['Similarly , sqlite3_shutdown_APIName will invoke sqlite3_os_end_APIName', 'similarly , api invoke api']
['The sqlite3_shutdown_APIName routine deallocates any resources that were allocated by sqlite3_initialize_APIName', 'api deallocate resource be allocate by api']
['The sqlite3_get_table_APIName routine does not have access to any internal data structures of SQLite', 'api do not have access internal datum structure']
['All other valid calls to sqlite3_shutdown_APIName are harmless no-ops', 'valid call api be harmless param']
['These functions may be used by SQL functions to associate metadata with argument values', 'function may be use by function associate param value']
['The destructor X in sqlite3_set_auxdata_APIName might be called immediately, before the sqlite3_set_auxdata_APIName interface even returns', 'api may be call immediately , before api even return']
['The sqlite3_set_auxdata_APIName interface saves P as metadata for the N-th argument of the application-defined function', 'api save as param function']
['Subsequent calls to sqlite3_get_auxdata_APIName return sqlite3_set_auxdata_APIParam_3 from the most recent sqlite3_set_auxdata_APIName call', 'subsequent call api return param recent api call']
['The sqlite3_get_auxdata_APIName interface returns a pointer to the metadata associated by the sqlite3_set_auxdata_APIName function with the Nth argument value to the application-defined function', 'api return pointer associate by api function param value param function']
['Among other things , sqlite3_initialize_APIName will invoke sqlite3_os_init_APIName', 'among thing , api invoke api']
['An example of where this might be useful is in a regular-expression matching function', 'example may be useful be param matching function']
['These routines are designed to aid in process initialization and shutdown on embedded systems', 'api be design aid process initialization shutdown embed system']
['As an example of the result table format , suppose a query result is as follows', 'as example result table format , suppose query result be as follow']
['The sqlite3_get_table_APIName function evaluates one or more semicolon-separated SQL statements in the zero-terminated UTF-8 string of its 2nd parameter and returns a result table to the pointer given in its 3rd parameter', 'api function evaluate one param stre 2nd param return result table pointer give 3rd param']
['The sqlite3_keyword_count_APIName interface returns the number of distinct keywords understood by SQLite', 'api return number distinct understand by']
['The compiled version of the regular expression can be stored as metadata associated with the pattern string', 'compile version regular can be store as associate pattern string']
['Future enhancements may make use of negative N values to define new kinds of function caching behavior', 'future may make use negative value define kind function cache behavior']
['The sqlite3_os_end_APIName routine undoes the effect of sqlite3_os_init_APIName', 'api undoe effect api']
['The parser used by SQLite is forgiving', 'parser use by be forgive']
['The sqlite3_os_init_APIName routine does operating-system specific initialization of the SQLite library', 'api do param specific initialization library']
['Also , new keywords may be added to future releases of SQLite', 'may be add future release']
['The sqlite3_os_init_APIName interface is called automatically by sqlite3_initialize_APIName and sqlite3_os_end_APIName is called by sqlite3_shutdown_APIName', 'api be call automatically by api be call by api']
['These routines provide access to the set of SQL language keywords recognized by SQLite', 'api provide access set language recognize by']
['The sqlite3_keyword_check_APIName returning non-zero', 'api return param']
['as long as the pattern string remains the same , the compiled regular expression can be reused on multiple invocations of the same function', 'as long as pattern string remain , compile regular can be reuse multiple function']
['Note that the number of keywords understood by SQLite can depend on compile-time options', 'number understand by can depend param option']
['The sqlite3_libversion_APIName function is provided for use in DLLs', 'api function be provide use']
['As a consequence , errors that occur in the wrapper layer outside of the internal sqlite3_exec_APIName call are not reflected in subsequent calls to sqlite3_errcode_APIName or sqlite3_errmsg_APIName', 'as consequence , error occur wrapper layer internal api call be not reflect subsequent call api']
['The sqlite3_libversion_APIName function returns a pointer to the to the sqlite3_version[] string constant', 'api function return pointer param string constant']
['Cautious programmers might include assert_APIName statements in their application to verify that values returned by these interfaces match the macros in the header, and thus ensure that the application is compiled with matching library and header files', 'cautious may include api application verify value return by api match macro header , thus ensure application be compile matching library header file']
['the statement "CREATE TABLE BEGIN_APIName;" is accepted by SQLite, and creates a new table named "BEGIN" with three columns named "REPLACE", "PRAGMA", and "END".', 'create table api ; be accept by , create table name begin three name replace , , end']
['In practice , metadata is preserved between function calls for function parameters that are compile-time constants , including literal values and parameters and expressions composed from the same', 'practice , be function call function param be param constant , include value param compose']
['The value returned by sqlite3_memory_highwater_APIName is the high-water mark prior to the reset', 'value return by api be param mark before reset']
['Applications can uses these routines to determine whether or not a specific identifier needs to be escaped so as not to confuse the parser', 'application can use api determine whether not specific identifier need be as not confuse parser']
['The SQLite core uses these routines for thread synchronization', 'us api thread']
['The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines write their results into memory obtained from sqlite3_malloc64_APIName', 'api write result memory obtain api']
["The sqlite3_snprintf_APIName routine is similar to `` snprintf_APIName '' from the standard C library", 'api be similar api standard library']
['This is an historical accident that can not be fixed without breaking backwards compatibility', 'be historical can not be fix without break backwards compatibility']
['the SQLite library will be automatically initialized', 'library be automatically initialize']
['An appropriate implementation is selected automatically at compile-time', 'appropriate implementation be select automatically param']
['Note that the order of the first two parameters is reversed from snprintf_APIName', 'order first two param be reverse api']
['The sqlite3_vsnprintf_APIName routine is a varargs version of sqlite3_snprintf_APIName', 'api be version api']
['The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding', 'api return number byte memory currently outstanding']
['It is often possible to use a keyword as an identifier as long as such use does not result in a parsing ambiguity', 'be often possible use as identifier as long as use do not result parse']
['The result is written into the buffer supplied as sqlite3_snprintf_APIParam_2 whose size is given by sqlite3_snprintf_APIParam_1', 'result be write buffer supply as param whose size be give by param']
['sqlite3_open_APIName calls sqlite3_initialize_APIName so', 'api call api']
["These routines are work-alikes of the `` printf_APIName '' family of functions from the standard C library", 'api be param api function standard library']
['These routines understand most of the common formatting options from the standard library printf_APIName plus some additional non-standard formats', 'api understand common format option standard library api plus additional param format']
['The following implementations are available in the SQLite core', 'follow implementation be available']
['After each call to sqlite3_set_auxdata_APIName where X is not NULL , SQLite will invoke the destructor function X with parameter P exactly once', 'after call api be not null , invoke function param exactly']
['The SQLITE_MUTEX_PTHREADS and SQLITE_MUTEX_W32 implementations are appropriate for use on Unix and Windows', 'constant implementation be appropriate use unix window']
['The SQLite source code contains multiple implementations of these mutex routines', 'source code contain multiple implementation mutex api']
['the behavior exhibited might become the default behavior in some future release of SQLite.', 'behavior exhibit may become default behavior future release']
['Appropriate implementations for sqlite3_os_init_APIName and sqlite3_os_end_APIName are built into SQLite', 'appropriate implementation api be']
['under some circumstances the associated metadata may be preserved', 'associate may be']
['the last four characters of the hash might be different from SQLITE_SOURCE_ID_API_constant', 'last four character hash may be different constant']
['The sqlite3_keyword_name_APIName interface finds the N-th keyword and makes Z point to that keyword expressed as UTF8 and writes the number of bytes in the keyword into L', 'api find param make point express as utf8 write number byte']
["The first parameter `` n '' is the total size of the buffer , including space for the zero terminator", 'first param be total size buffer , include space constant']
['SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName , sqlite3_free_APIName , and sqlite3_realloc_APIName routines , which form the built-in memory allocation subsystem', 'provide two api reporting status api , which form param memory allocation']
['The sqlite3_version -LSB- -RSB- string constant contains the text of SQLITE_VERSION_API_constant macro', 'param _ lsb _ _ rsb _ stre constant contain text constant macro']
['As long as the buffer size is greater than zero , sqlite3_snprintf_APIName guarantees that the buffer is always zero-terminated', 'as long as buffer size be great constant , api guarantee buffer be always param']
['The sqlite3_mutex_alloc_APIName routine allocates a new mutex and returns a pointer to it', 'api allocate mutex return pointer']
['The memory high-water mark is reset to the current value of sqlite3_memory_used_APIName', 'memory param mark be reset current value api']
['the automatic calls to sqlite3_initialize_APIName are omitted', 'automatic call api be omit']
['Typical tasks performed by these routines include allocation or deallocation of static resources , initialization of global variables , setting up a default sqlite3_vfs module , or setting up a default configuration using sqlite3_config_APIName', 'typical perform by api include allocation static resource , initialization global variable , set default param module , set default configuration use api']
['Future versions of SQLite may add additional static mutexes', 'future version may add additional static']
['The other allowed parameters to sqlite3_mutex_alloc_APIName each return a pointer to a static preexisting mutex', 'allow param api return pointer static preexisting mutex']
['Nine static mutexes are used by the current version of SQLite', 'nine static be use by current version']
['The first two constants cause sqlite3_mutex_alloc_APIName to create a new mutex', 'first two constant api create mutex']
['The sqlite3_mutex_enter_APIName and sqlite3_mutex_try_APIName routines attempt to enter a mutex', 'api attempt enter mutex']
['code that links against SQLite is permitted to use any of these routines', 'code link against be permit use api']
['The sqlite3_mutex_free_APIName routine deallocates a previously allocated dynamic mutex', 'api deallocate previously allocate dynamic mutex']
['Note that sqlite3_mutex_alloc_APIName returns a different mutex on every call', 'api return different mutex every call']
['Mutexes created using SQLITE_MUTEX_RECURSIVE_API_constant can be entered multiple times by the same thread', 'create use constant can be enter multiple time by thread']
['The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements', 'api be intend use inside api']
['The values returned by sqlite3_memory_used_APIName and sqlite3_memory_highwater_APIName include any overhead added by SQLite in its implementation of sqlite3_malloc_APIName, but not overhead added by the any underlying system library routines that sqlite3_malloc_APIName may call', 'value return by api include overhead add by implementation api , but not overhead add by underlie system library api may call']
['the mutex subsystem might return such a mutex in response to SQLITE_MUTEX_FAST_API_constant', 'mutex may return mutex response constant']
['The sqlite3_mutex_leave_APIName routine exits a mutex that was previously entered by the same thread', 'api exit mutex be previously enter by thread']
['The implementation is not required to provide versions of these routines that actually work', 'implementation be not require provide version api actually work']
['A database connection handle is usually returned in ppDb', 'database connection handle be usually return']
['These routines open an SQLite database file as specified by the sqlite3_open_APIParam_1 argument', 'api open database file as specify by param']
['For the static mutex types, the same mutex is returned by sqlite3_mutex_alloc_APIName on every call that has the same type number', 'static mutex type , mutex be return by api every call have type number']
['But the reason the mutex does not exist is', 'but reason mutex do not exist be']
['The SQLITE_MUTEX_NOOP implementation is a set of routines that does no real locking and is appropriate for use in a single-threaded application', 'constant implementation be set api do no real locking be appropriate use param application']
['The default encoding will be UTF-8 for databases created using sqlite3_open_APIName or sqlite3_open_v2_APIName', 'default encode be param database create use api']
['This private database will be automatically deleted as soon as the database connection is closed', 'private database be automatically as soon as database connection be close']
['The SQLITE_OPEN_PRIVATECACHE_API_constant flag causes the database connection to not participate in shared cache mode', 'constant flag database connection not participate share cache mode']
['Future versions of SQLite might make use of additional special filenames that begin with the ":" character.', 'future version may make use additional special filename begin : character']
['The new mutex is recursive', 'mutex be recursive']
['no mutex implementation is included with the library', 'no mutex implementation be include library']
['URI filenames are parsed according to RFC 3986', 'uri filename be parse accord rfc constant']
['The sqlite3_open_APIParam_1 argument is interpreted as UTF-8 for sqlite3_open_APIName and sqlite3_open_v2_APIName and as UTF-16 in the native byte order for sqlite3_open16_APIName', 'param be interpret as param api as param native byte order api']
['The sqlite3_errmsg_APIName or sqlite3_errmsg16_APIName routines can be used to obtain an English language description of the error following a failure of any of the sqlite3_open_APIName routines', 'api can be use obtain english language description error follow failure api']
['Future versions of SQLite might understand additional query parameters', 'future version may understand additional query param']
['URI sqlite3_open_APIParam_1 interpretation is turned off by default , but future releases of SQLite might enable URI sqlite3_open_APIParam_1 interpretation by default', 'uri param be turn by default , but future release may enable uri param by default']
['The sqlite3_open_v2_APIName interface works like sqlite3_open_APIName except that it accepts two additional parameters for additional control over the new database connection', 'api work like api except accept two additional param additional control database connection']
['Note to Windows users', 'note window user']
['The third parameter to sqlite3_preupdate_hook_APIName is passed through as sqlite3_preupdate_depth_APIParam_1 to callbacks', 'third param api be pass as param callback']
['Note to Windows Runtime users', 'note window runtime user']
['URI hexadecimal escape sequences are supported within the path and query components of a URI', 'uri sequence be support within path query component uri']
['the default sqlite3_vfs object is used', 'default param be use']
['Specifying an unknown parameter in the query component of a URI is not an error', 'specify unknown param query component uri be not error']
['The SQLITE_OPEN_SHAREDCACHE_API_constant flag causes the database connection to be eligible to use shared cache mode , regardless of whether or not shared cache is enabled using sqlite3_enable_shared_cache_APIName', 'constant flag database connection be eligible use share cache mode']
['The preupdate hook is disabled by invoking sqlite3_preupdate_hook_APIName with a NULL pointer as sqlite3_preupdate_count_APIParam_2', 'be disable by invoke api null pointer as param']
['SQLite uses the path component of the URI as the name of the disk file which contains the database', 'us path component uri as name file which contain database']
['a private , temporary on-disk database will be created', 'private , temporary param database be create']
['all three routines behave as no-ops', 'three api behave as param']
['The fifth parameter to the preupdate callback is the name of the table that is being modified', 'fifth param callback be name table modify']
['The fragment component of a URI , , is ignored', 'fragment component uri , be ignore']
['The second parameter to the preupdate callback is a pointer to the database connection that registered the preupdate hook', 'second param callback be pointer database connection register']
['URI sqlite3_open_APIParam_1 interpretation is enabled ', 'uri param be enable']
['the database connection opens in the serialized threading mode unless single-thread was previously selected at compile-time or start-time', 'database connection open threading mode unless param be previously select param']
['then the sqlite3_open_APIParam_1 is interpreted as a URI.', 'param be interpret as uri']
['a private, temporary in-memory database is created for the connection.', 'private , temporary param database be create connection']
['The sqlite3_value that P points to will be destroyed ', 'param point be destroy']
['The sqlite3_preupdate_count_APIName interface returns the number of columns in the row that is being inserted, updated, or deleted', 'api return number insert']
['the database connection opens in the multi-thread threading mode as long as the single-thread mode has not been set at compile-time or start-time', 'database connection open param threading mode as long as param mode have not be set param']
['At most one preupdate hook may be registered at a time on a single database connection', 'one may be register time single database connection']
['Additional sqlite3_trace_APIName callbacks might occur as each triggered subprogram is entered', 'additional api callback may occur as be enter']
['The sqlite3_preupdate_old_APIName , sqlite3_preupdate_new_APIName , sqlite3_preupdate_count_APIName , and sqlite3_preupdate_depth_APIName interfaces provide additional information about a preupdate event', 'api provide additional information event']
['each call to sqlite3_preupdate_hook_APIName overrides the previous setting', 'call api override previous setting']
['Refer to the SQL parameter documentation for additional information', 'refer param documentation additional information']
['These routines register callback functions that can be used for tracing and profiling the execution of SQL statements', 'api register callback function can be use profiling execution']
['The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger', 'callback contain param comment identifie']
['The fourth parameter to the preupdate callback is the name of the database within the database connection that is being modified', 'fourth param callback be name database within database connection modify']
['The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT , UPDATE , and DELETE operation on a database table', 'api register callback function invoke before insert , , operation database table']
['The callback function registered by sqlite3_profile_APIName is invoked as each SQL statement finishes', 'callback function register by api be invoke as']
['Future versions of SQLite might provide greater resolution on the profiler callback', 'future version may provide great resolution callback']
['By default , the error code is SQLITE_ERROR_API_constant', 'by default , error code be constant']
['Hence, the calling function can deallocate or modify the text after they return without harm', 'hence , call function can deallocate modify text after return without']
['The sqlite3_result_error_APIName and sqlite3_result_error16_APIName routines make a private copy of the error message text before they return', 'api make private copy error message text before return']
['These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates', 'api be use by callback implement function']
['The sqlite3_result_null_APIName interface sets the return value of the application-defined function to be NULL', 'api set return value param function be null']
['For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated', 'insert table seventh param be final value insert']
['The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option can be used to limit the length of bound parameter expansion in the output of sqlite3_trace_APIName', 'constant param option can be use limit length param output api']
['A subsequent call to sqlite3_result_error_APIName or sqlite3_result_error16_APIName resets the error code to SQLITE_ERROR_API_constant', 'subsequent call api reset error code constant']
['The sqlite3_result_error_code_APIName function changes the error code returned by SQLite as a result of an error in a function', 'api function change error code return by as result error function']
['The sqlite3_result_int64_APIName interface sets the return value of the application-defined function to be the 64-bit signed integer value given in the 2nd argument', 'api set return value param function be param sign integer value give 2nd param']
['The sqlite3_result_error_nomem_APIName interface causes SQLite to throw an error indicating that a memory allocation failed', 'api throw error indicate memory allocation fail']
['the preupdate hook is not invoked for changes to virtual tables or to system tables like sqlite_master or sqlite_stat1', 'be not invoke change virtual table system table like param']
['The sqlite3_result_int_APIName interface sets the return value of the application-defined function to be the 32-bit signed integer value given in the 2nd argument', 'api set return value param function be param sign integer value give 2nd param']
['The sqlite3_result_value_APIName interface makes a copy of the sqlite3_value so that the sqlite3_value specified in the parameter may change or be deallocated after sqlite3_result_value_APIName returns without harm', 'api make copy param specify param may change be deallocate after api return without']
['SQLite makes a copy of the result into space obtained from sqlite3_malloc_APIName before it returns', 'make copy result space obtain api before return']
['The callback function registered by sqlite3_trace_APIName is invoked at various times', 'callback function register by api be invoke various time']
['The highest recorded value is returned by sqlite3_status_APIName in pHighwater', 'high record value be return by api']
['The sqlite3_result_text_APIName, sqlite3_result_text16_APIName, sqlite3_result_text16le_APIName, and sqlite3_result_text16be_APIName interfaces set the return value of the application-defined function to be a text string which is represented as UTF-8, UTF-16 native byte order, UTF-16 little endian, or UTF-16 big endian, respectively', 'api set return value param function be text string which be represent as param native byte order , param little endian , param big endian , respectively']
['These methods do not return a result code', 'api not return result code']
['The current value of the parameter is returned by sqlite3_status_APIName into pCurrent', 'current value param be return by api']
['The length returned by sqlite3_str_length_APIName does not include the zero-termination byte', 'length return by api do not include param byte']
['These interfaces return the current status of an sqlite3_str object', 'api return current status param']
['The sqlite3_result_double_APIName interface sets the result from an application-defined function to be a floating point value specified by its 2nd argument', 'api set result param function be point value specify by 2nd param']
['SQLite takes the text result from the application from the 2nd parameter of the sqlite3_result_text interfaces', 'take text result application 2nd param api']
['The sqlite3_result_error_toobig_APIName interface causes SQLite to throw an error indicating that a string or BLOB is too long to represent', 'api throw error indicating string be long represent']
['The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run', 'callback contain original text param time long take run']
['Some parameters do not record the highest value', 'param not record high value']
['The sqlite3_preupdate_old_APIName interface writes into sqlite3_preupdate_old_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row before it is updated', 'api write param pointer protect param contain value table before be']
['For these latter parameters nothing is written into pCurrent', 'latter param nothing be write']
['Recognized integer codes are of the form SQLITE_STATUS _', 'recognize integer code be form constant _']
['These functions work very much like the parameter binding family of functions used to bind values to host parameters in prepared statements', 'function work much like param function use value host param prepare']
['SQLite takes as the error message all text up through the first zero character', 'take as error message text first constant character']
['The first argument is an integer code for the specific parameter to measure', 'first param be integer code specific param measure']
['SQLite uses the string pointed to by the 2nd parameter of sqlite3_result_error_APIName or sqlite3_result_error16_APIName as the text of an error message', 'us string point by 2nd param api as text error message']
['The sqlite3_result_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0', 'api be part pointer pass api add constant']
['SQLite takes that many bytes from the 2nd parameter as the error message', 'take many byte 2nd param as error message']
['The sqlite3_preupdate_new_APIName interface writes into sqlite3_preupdate_new_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row after it is updated', 'api write param pointer protect param contain value table after be']
['For those parameters nothing is written into pHighwater and the sqlite3_status64_APIParam_4 is ignored', 'param nothing be write param be ignore']
['These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName', 'api add content param previously obtain api']
['The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables , or for INSERT operations on rowid tables', 'value seventh param pass callback function be not api operation without table , insert operation table']
['For an UPDATE or DELETE operation on a rowid table , the sixth parameter passed to the preupdate callback is the initial rowid of the row being modified or deleted', 'operation table , sixth param pass callback be initial modify']
["This will be `` main '' for the main database or `` temp '' for TEMP tables or the name given after the AS keyword in the ATTACH statement for attached databases", 'be main main database table name give after as attach attach database']
['The sqlite3_result_zeroblob_APIName and sqlite3_result_zeroblob64_APIName interfaces set the result of the application-defined function to be a BLOB containing all zero bytes and sqlite3_result_zeroblob64_APIParam_2 bytes in size', 'api set result param function be contain constant byte param byte size']
['SQLite takes result text from the 2nd parameter through the first zero character', 'take result text 2nd param first constant character']
['The sqlite3_result_value_APIName interface sets the result of the application-defined function to be a copy of the unprotected sqlite3_value object specified by the 2nd parameter', 'api set result param function be copy unprotected param specify by 2nd param']
['Invoking any of these routines from outside of a preupdate callback or with a database connection pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior', 'invoking api callback database connection pointer different one supply callback result undefined probably undesirable behavior']
['These interfaces are used to retrieve runtime status information about the performance of SQLite , and optionally to reset various highwater marks', 'api be use retrieve runtime status information performance , optionally reset various mark']
['it is a pointer to a destructor for the sqlite3_result_pointer_APIParam_2 parameter', 'be pointer param']
['The sqlite3_result_blob_APIName interface sets the result from an application-defined function to be the BLOB whose content is pointed to by the second parameter and which is N bytes long where N is the third parameter', 'api set result param function be whose content be point by second param which be byte long be third param']
['it is interpreted as an absolute path', 'be interpret as absolute path']
['the highest record value is reset after pHighwater is written', 'high record value be reset after be write']
['then as many bytes (not characters) of the text pointed to by the 2nd parameter are taken as the application-defined function result', 'as many byte character . text point by 2nd param be take as param function result']
['the path is interpreted as a relative path', 'path be interpret as relative path']
['Other interfaces might change the datatype for an sqlite3_value object', 'api may change param']
['These routines extract type , size , and content information from protected sqlite3_value objects', 'api extract type , size , content information protect param']
['Otherwise no conversion occurs', 'otherwise no conversion occur']
["A hexadecimal escape sequence consists of a percent sign - '' % '' - followed by exactly two hexadecimal digits specifying an octet value", 'sequence consist sign _ _ follow by exactly two digit specify octet value']
['SQLite assumes that the text or BLOB result is in constant space and does not copy the content of the parameter nor call a destructor on the content when it has finished using that result', 'assume text result be constant space do not copy content param nor call content have use result']
['The sqlite3_value_numeric_type_APIName interface attempts to apply numeric affinity to the value', 'api attempt apply numeric value']
['The sqlite3_str_appendall_APIName method appends the complete content of zero-terminated string sqlite3_str_appendall_APIParam_2 onto the end of sqlite3_str object X', 'api append complete content param string param onto end param']
['The sqlite3_value_text16be_APIName and sqlite3_value_text16le_APIName interfaces extract UTF-16 strings as big-endian and little-endian respectively', 'api extract param string as param respectively']
['The sqlite3_str_appendchar_APIName method appends sqlite3_str_append_APIParam_3 copies of the single-byte character sqlite3_str_appendchar_APIParam_3 onto the end of sqlite3_str object X', 'api append param copy param character param onto end param']
['The sqlite3_bind_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0', 'api be part pointer pass api add constant']
['Names are case sensitive', 'name be case sensitive']
['Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables', 'protect param be use pass param information implementation param function virtual table']
['New VFSes are registered with sqlite3_vfs_register_APIName', 'be register api']
['Please pay particular attention to the fact that the pointer returned from sqlite3_value_blob_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName can be invalidated by a subsequent call to sqlite3_value_bytes_APIName, sqlite3_value_bytes16_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName', 'please particular fact pointer return api can be invalidate by subsequent call api']
['The sqlite3_str_appendf and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X', 'api use param printf functionality append format text onto end param']
['The sqlite3_value_free_APIName interface frees an sqlite3_value object previously obtained from sqlite3_value_dup_APIName', 'api free param previously obtain api']
['The sqlite3_value_text16_APIName interface extracts a UTF-16 string in the native byte-order of the host machine', 'api extract param stre native param host machine']
['Names are zero-terminated UTF-8 strings', 'name be param string']
['Unregister a VFS with the sqlite3_vfs_unregister_APIName interface', 'unregister api']
['The choice for the new VFS is arbitrary', 'choice be arbitrary']
['The same VFS can be registered multiple times without injury', 'can be register multiple time without']
['New VFSes can be registered and existing VFSes can be unregistered', 'can be register exist can be unregistered']
['The index for "?NNN" parameters is the value of NNN.', 'index param be value']
['The leftmost SQL parameter has an index of 1', 'leftmost param have index constant']
['Within an xUpdate method , any value appear to be a NULL value', 'within api , value appear be null value']
['Most SQLite builds come with a single default VFS that is appropriate for the host computer', 'come single default appropriate host']
['This means that an attempt is made to convert the value to an integer or floating point', 'mean attempt be make value integer floating point']
['A negative value for the zeroblob results in a zero-length BLOB', 'negative value constantblob result param']
['Bindings are not cleared by the sqlite3_reset_APIName routine', 'be not clear by api']
['Unbound parameters are interpreted as NULL', 'unbound param be interpret as null']
['The second argument is the index of the SQL parameter to be set', 'second param be index param be set']
['The preferred routine to use is sqlite3_prepare_v2_APIName', 'preferred api use be api']
['A virtual filesystem is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system', 'virtual filesystem be param us interact underlie operating system']
['To make an existing VFS into the default VFS , register it again with the sqlite3_vfs_register_APIParam_2 flag set', 'make exist default , register param flag set']
['The values of these parameters can be set using the sqlite3_bind __ APIName routines defined here', 'value param can be set use param _ _ apiname api']
['The sqlite3_bind_zeroblob_APIName routine binds a BLOB of length N that is filled with zeroes', 'api length fill constante']
['the conversion is performed', 'conversion be perform']
['Each new VFS becomes the default VFS', 'become default']
['Whether or not a persistent internal datatype conversion occurs is undefined and may change from one release of SQLite to the next', 'whether not persistent internal conversion occur be undefined may change one release next']
['A zeroblob uses a fixed amount of memory', 'constantblob use fix amount memory']
['Zeroblobs are intended to serve as placeholders for BLOBs whose content is later written using incremental BLOB I/O routines', 'constantblob be intend serve as whose content be later write use incremental api']
['The index for named parameters can be looked up using the sqlite3_bind_parameter_index_APIName API', 'index name param can be look use api']
['that fact is recorded in the sqlite3_str object and can be recovered by a subsequent call to sqlite3_str_errcode_APIName', 'fact be record param can be recover by subsequent call api']
['SQLite uses internally', 'us internally']
['These are utility routines , useful to VFS implementations , that , and if so obtains the value of that query parameter', 'be utility api , useful implementation']
["The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion , using the same definition of `` case independence '' that", 'api allow application extension compare content two buffer contain param string param fashion , use definition case']
["sqlite3_prepare_v3_APIName has an extra `` prepFlags '' option that is used for special purposes", 'api have extra option use special purpose']
['The UTF-16 interfaces are provided as a convenience', 'param api be provide as convenience']
['ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step_APIName', 'be leave point compile prepared can be execute use api']
['The sqlite3_prepare_v2_APIName interface works exactly the same as sqlite3_prepare_v3_APIName with a zero prepFlags parameter', 'api work exactly as api constant param']
['Or, in other words, these routines are constructors for the prepared statement object.', 'word , api be prepare object']
['The UTF-16 interfaces work by converting the input text into UTF-8 , invoking the corresponding UTF-8 interface', 'param api work by input text param , invoke correspond param api']
['The sqlite3_prepare_APIName , sqlite3_prepare_v2_APIName , and sqlite3_prepare_v3_APIName interfaces use UTF-8 , and sqlite3_prepare16_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName use UTF-16', 'api use param , api use param']
['The sqlite3_result_pointer_APIName interface sets the result to an SQL NULL value , just like sqlite3_result_null_APIName , except that it also associates the host-language pointer sqlite3_result_pointer_APIParam_2 or type sqlite3_result_pointer_APIParam_3 with that NULL value such that the pointer can be retrieved within an application-defined SQL function using sqlite3_value_pointer_APIName', 'api set result null value , like api , except associate param pointer param type param null value pointer can be retrieve within param function use api']
['a non-NULL value will be copied into memory obtained from sqlite3_malloc prior to being used', 'param value be copy memory obtain api before use']
['no prepared statement is generated', 'no prepared be generate']
['sqlite3_prepare_APIParam_2 is read up to the first zero terminator', 'param be read first constant']
['second and subsequent occurrences have the same index as the first occurrence', 'second subsequent have index as first']
['then the resulting string value will contain embedded NULs', 'result string value contain embed nul']
['it is the number of bytes read from sqlite3_prepare_v2_APIParam_2', 'be number byte read param']
["The first argument , `` db '' , is a database connection obtained from a prior successful call to sqlite3_open_APIName , sqlite3_open_v2_APIName or sqlite3_open16_APIName", 'first param , , be database connection obtain prior successful call api']
['The sqlite3_win32_set_directory interface is used to set the value associated with the sqlite3_temp_directory or sqlite3_data_directory variable , to sqlite3_win32_set_directory_APIParam_2 , depending on the value of the sqlite3_win32_set_directory_APIParam_1 parameter', 'api be use set value associate param variable , param , depend value param']
['The built-in random_APIName SQL function is an example of a function that is not deterministic', 'param api function be example function not deterministic']
['These functions are used to add SQL functions or aggregates or to redefine the behavior of existing SQL functions or aggregates', 'function be use add function redefine behavior exist function']
['Built-in functions may be overloaded by new application-defined functions', 'param function may be overload by param function']
['More details regarding the implementation of aggregate window functions are available here', 'detail regard implementation window function be available']
['The implementation of the function can gain access to this pointer using sqlite3_user_data_APIName', 'implementation function can gain access pointer use api']
['The destructor is also invoked', 'be invoke']
['Function sqlite3_create_window_function_APIName is similar , but allows the user to supply the extra callback functions needed by aggregate window functions', 'function api be similar , but allow user supply extra callback function need by window function']
['The same SQL function may be registered multiple times using different preferred text encodings , with different implementations for each encoding', 'function may be register multiple time use different preferred text , different implementation encode']
['The authorizer is disabled by default', 'be disable by default']
['Each call to sqlite3_set_authorizer overrides the previous call', 'call api override previous call']
['This routine registers an authorizer callback with a particular database connection , supplied in the first argument', 'api register callback particular database connection , supply first param']
['Autocommit mode is on by default', 'mode be by default']
['Disable the authorizer by installing a NULL callback', 'disable by instal null callback']
['Autocommit mode is disabled by a BEGIN statement', 'mode be disable by begin']
['SQLite will use the implementation that most closely matches the way in which the SQL function is used', 'use implementation closely match way which function be use']
['The value of the sqlite3_data_directory variable is intended to act as a replacement for the current directory on the sub-platforms of Win32 where that concept is not present , e.g', 'value param variable be intend act as current directory param concept be not present']
['the fourth parameter is ignored', 'fourth param be ignore']
['The sixth , seventh , eighth and ninth parameters passed to sqlite3_create_window_function are pointers to C-language callbacks that implement the new function', 'sixth , seventh , eighth ninth param pass api be pointer param callback implement function']
['pzTail is made to point to the first byte past the end of the first SQL statement in sqlite3_prepare_APIParam_2', 'be make point first byte past end first param']
['The destructor is invoked or', 'be invoke']
['SQLite will pick the one that involves the least amount of data conversion', 'pick one involve least amount datum conversion']
['it is destructor for the application data pointer', 'be application datum pointer']
['P. SQLite will invoke the destructor D with a single argument of P', 'p. invoke single param']
['the SQL function or aggregate may take any number of arguments between 0 and the limit set by sqlite3_limit_APIName', 'function may take number param constant limit set by api']
['an application may allow a user to enter arbitrary SQL queries for evaluation by a database', 'application may allow user enter arbitrary query by database']
['The sqlite3_busy_handler_APIName interface is used to implement sqlite3_busy_timeout_APIName and PRAGMA busy_timeout', 'api be use implement api param']
['Setting a new busy handler clears any previously set handler', 'set busy handler clear previously set handler']
['another attempt is made to access the database and the cycle repeats', 'another attempt be make access database']
[' the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message', 'api equivalent call fail error message']
['The authorizer callback is invoked as SQL statements are being compiled by sqlite3_prepare_APIName or its variants sqlite3_prepare_v2_APIName , sqlite3_prepare_v3_APIName , sqlite3_prepare16_APIName , sqlite3_prepare16_v2_APIName , and sqlite3_prepare16_v3_APIName', 'callback be invoke as be compile by api variant api']
['The leftmost column of the result set has the index 0', 'leftmost result set have index constant']
['The number of columns in the result can be determined using sqlite3_column_count_APIName', 'number result can be determine use api']
['the correct authorizer callback remains in place', 'correct callback remain place']
['Note that the authorizer callback is invoked', 'callback be invoke']
['Future versions of SQLite may change the behavior of sqlite3_column_type_APIName following a type conversion', 'future version may change behavior api follow type conversion']
['The first process can not proceed and the second process can not proceed', 'first process can not second process can not']
['neither will make any progress', 'neither make progress']
['The first argument to the busy handler is a copy of the void pointer which is the third argument to sqlite3_busy_handler_APIName', 'first param busy handler be copy void pointer which be third param api']
['An authorizer could be put in place', 'could be put place']
['Note that calling sqlite3_busy_timeout_APIName or evaluating PRAGMA busy_timeout = N will change the busy handler and thus clear any previously set busy handler', 'call api evaluate param change busy handler thus clear previously set busy handler']
['The presence of a busy handler does not guarantee that', 'busy handler do not guarantee']
['The second argument to the busy handler callback is the number of times that the busy handler has been invoked previously for the same locking event', 'second param busy handler callback be number time busy handler have be invoke previously lock event']
['an automatic type conversion is performed', 'automatic type conversion be perform']
['The memory space used to hold strings and BLOBs is freed automatically', 'memory space use hold string be free automatically']
['The these routines may attempt to convert the datatype of the result', 'api may attempt result']
['In every case sqlite3_column_int_APIParam_1 is a pointer to the prepared statement that is being evaluated and sqlite3_column_int_APIParam_2 is the index of the column', 'every case param be pointer prepare evaluate param be index']
['If the result is a BLOB or UTF-16 string the sqlite3_column_bytes16_APIName routine returns the number of bytes in that BLOB or string', 'if result be param string api return number byte string']
['it is passed a single argument which is a copy of the application data pointer which was the fifth parameter to sqlite3_create_function_v2_APIName', 'be pass single param which be copy application datum pointer which be fifth param api']
["A NULL pointer can be used in place of `` main '' to refer to the main database file", 'null pointer can be use place main refer main database file']
['Consider a scenario where one process is holding a read lock that it is trying to promote to a reserved lock and a second process is holding a reserved lock that it is trying to promote to an exclusive lock', 'consider one process be hold read lock be try promote reserve lock second process be hold reserved lock be try promote exclusive lock']
['might be invoked with argument P', 'may be invoke param']
['the sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName interfaces can be used to determine the size of that BLOB or string', 'api can be use determine size string']
['Authorization is not performed , unless as stated in the previous paragraph , sqlite3_step_APIName invokes sqlite3_prepare_v2_APIName to reprepare a statement after a schema change', 'authorization be not perform , unless as state previous , api invoke api reprepare after change']
['The sqlite3_busy_handler_APIName routine sets a callback function X that', 'api set callback function']
['the SQLITE_READ_API_constant authorizer callback is invoked once for that table with a column name that is an empty string', 'constant callback be invoke table name empty string']
['An authorizer is used , to ensure that the SQL statements do not try to access data they are not allowed to see , or that they do not try to execute malicious statements that damage the database', 'be use , ensure not try access datum be not allow see , not try execute malicious damage database']
['the values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName are the number of bytes in the string, not the number of characters', 'value return by api be number byte string , not number character']
['the sqlite3_column_bytes_APIName routine returns the number of bytes in that BLOB or string', 'api return number byte string']
[' sqlite3_column_bytes_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-8 string and returns the number of bytes in that string', 'api use api value param string return number byte string']
['There is no way to distinguish between an incorrect sqlite3_file_control_APIParam_2 and an SQLITE_ERROR_API_constant return from the underlying xFileControl method', 'be no way distinguish incorrect param constant return underlie api']
['Other kinds of conversion are done in place', 'kind conversion be do place']
['sqlite3_column_bytes16_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-16 string and returns the number of bytes in that string', 'api use api value param string return number byte string']
['The SQLITE_FCNTL_FILE_POINTER_API_constant value for the sqlite3_file_control_APIParam_3 parameter causes a pointer to the underlying sqlite3_file object to be written into the space pointed to by the 4th parameter', 'constant value param pointer underlie param be write space point by 4th param']
['The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2', 'api make direct call api param associate particular database identify by param']
['sqlite3_snprintf_APIName is used internally to perform the conversion automatically', 'api be use internally perform conversion automatically']
['N is zero for the left-most function argument', 'be constant param function param']
['If the unprotected sqlite3_value object returned by sqlite3_column_value_APIName is used in any other way, including calls to routines like sqlite3_value_int_APIName, sqlite3_value_text_APIName, or sqlite3_value_bytes_APIName, the behavior is not threadsafe', 'if unprotected param return by api be use way , include call api like api , behavior be not']
['Future releases of SQLite may require this', 'future release may require']
['the transaction might be rolled back automatically', 'may be roll back automatically']
["The name of the database is `` main '' for the main database or `` temp '' for the TEMP database , or the name that appears after the AS keyword for databases that are added using the ATTACH SQL command", 'name database be main main database database , name appear after as database be add use attach command']
['The leftmost column is number 0', 'leftmost be number constant']
['In those cases , sqlite3_aggregate_context_APIName might be called for the first time from within xFinal_APIName', 'case , api may be call first time within api']
['The name of the collation is a UTF-8 string for sqlite3_create_collation_APIName and sqlite3_create_collation_v2_APIName and a UTF-16 string in native byte order for sqlite3_create_collation16_APIName', 'name be param string api param stre native byte order api']
['Common techniques used to avoid keyword name collisions include', 'common technique use avoid name include']
['SQLite and its built-in VFSes interpret the following query parameters', 'param interpret follow query param']
['The error-code preserving interfaces are', 'param api be']
