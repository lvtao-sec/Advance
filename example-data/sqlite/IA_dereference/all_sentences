The sqlite3_data_count_APIName will return non-zero if previous call to sqlite3_step_APIName returned SQLITE_ROW_API_constant, except in the case of the PRAGMA incremental_vacuum where it always returns zero since each step of that multi-step pragma returns 0 columns of data.
When the callback returns SQLITE_DENY_API_constant, the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message explaining that access is denied.
Likewise, registering a callback using sqlite3_wal_hook_APIName disables the automatic checkpoint mechanism configured by sqlite3_wal_autocheckpoint_APIName.
This is a legacy interface that is preserved for backwards compatibility.
In every case sqlite3_column_int_APIParam_1 is a pointer to the prepared statement that is being evaluated (the sqlite3_stmt* that was returned from sqlite3_prepare_v2_APIName or one of its variants) and sqlite3_column_int_APIParam_2 is the index of the column for which information should be returned.
If the specified column is "rowid", "oid" or "_rowid_" and the table is not a WITHOUT ROWID table and an INTEGER PRIMARY KEY column has been explicitly declared, then the output parameters are set for the explicitly declared column.
But these numbers are not part of the result table itself.
The sqlite3_str_appendall_APIName method appends the complete content of zero-terminated string sqlite3_str_appendall_APIParam_2 onto the end of sqlite3_str object X.
SQLite is free to discard the metadata at any time, including:
In prior versions of SQLite, sharing was enabled or disabled for each thread separately.
The details of the operation codes, their meanings, the parameters they take, and what they do are all subject to change without notice.
The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements.
A BLOB referenced by sqlite3_blob_open_APIName may be read using the sqlite3_blob_read_APIName interface and modified by using sqlite3_blob_write_APIName.
See also: sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName.
The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter.
Calling sqlite3_wal_hook_APIName replaces any previously registered write-ahead log callback.
The sqlite3_table_column_metadata_APIName interface returns SQLITE_ERROR_API_constant and if the specified column does not exist.
The sqlite3_shutdown_APIName interface must only be called from a single thread.
The system is said to be in a deadlocked state if connection A has registered for an unlock-notify callback on the conclusion of connection B's transaction, and connection B has itself registered for an unlock-notify callback when connection A's transaction is concluded.
In this case subsequent calls to sqlite3_last_insert_rowid_APIName return the rowid associated with these internal INSERT operations, which leads to unintuitive results.
The only differences between the three "sqlite3_create_function*" routines are the text encoding expected for the second parameter (the name of the function being created) and the presence or absence of a destructor callback for the application data pointer.
 The xCreate and xConnect methods of a virtual table module call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.
If sqlite3_msize_APIParam_1 is a NULL pointer then sqlite3_msize_APIName returns zero.
This will keep the SQL function load_extension_APIName disabled and prevent SQL injections from giving attackers access to extension loading capabilities.
The first argument to the sqlite3_bind_*_APIName routines is always a pointer to the sqlite3_stmt object returned from sqlite3_prepare_v2_APIName or its variants.
Calling sqlite3_close_APIName or sqlite3_close_v2_APIName with a NULL pointer argument is a harmless no-op.
This routine can be used to find the number of SQL parameters in a prepared statement.
The sqlite3_snprintf_APIName routine is similar to "snprintf_APIName" from the standard C library.
 The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P. The application must eventually free every sqlite3_snapshot object using this routine to avoid a memory leak.The sqlite3_snapshot_free_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.
It is always safe to use the value returned by sqlite3_str_new_APIName as the sqlite3_str parameter to any of the other sqlite3_str methods.
sqlite3_execnot exist in API_info
This is different from every other SQLite interface.
"C:").
Otherwise no conversion occurs.
If there is no AS clause then the name of the column is unspecified and may change from one release of SQLite to the next.
For all forms except ?NNN, this will correspond to the number of unique parameters.
The sqlite3_bind_pointer_APIName routine causes the I-th parameter in prepared statement S to have an SQL value of NULL, but to also be associated with the pointer P of type T.  D is either a NULL pointer or a pointer to a destructor function for P. SQLite will invoke the destructor D with a single argument of P when it is finished using P.  The T parameter should be a static string, preferably a string literal.
The return value from sqlite3_column_blob_APIName for a zero-length BLOB is a NULL pointer.
The sqlite3_interrupt_APIName call is in effect until all currently running SQL statements on database connection sqlite3_interrupt_APIParam_1 complete.
sqlite3_result_blobnot exist in API_info
The value returned by sqlite3_memory_highwater_APIName is the high-water mark prior to the reset.
The SQLITE_MUTEX_NOOP implementation is a set of routines that does no real locking and is appropriate for use in a single-threaded application.
And we do not want the assert_APIName containing the call to sqlite3_mutex_held_APIName to fail, so a non-zero return is the appropriate thing to do.
Hence, the calling function can deallocate or modify the text after they return without harm.
The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time.
Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction (e.g.
The sqlite3_result_error_code_APIName function changes the error code returned by SQLite as a result of an error in a function.
sqlite3_create_function not exist in API_info
This is true if any column of the row is changed, even a column other than the one the BLOB handle is open on.
sqlite3_collation_needednot exist in API_info
The sqlite3_config_APIName interface may only be invoked prior to library initialization using sqlite3_initialize_APIName or after shutdown by sqlite3_shutdown_APIName.
Applications that use SQLite mutexes should use only the dynamic mutexes returned by SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant.
The sqlite3_result_null_APIName interface sets the return value of the application-defined function to be NULL.
Unbound parameters are interpreted as NULL.
Contrary to the intuition of many, sqlite3_reset_APIName does not reset the bindings on a prepared statement.
The names returned are the original un-aliased names of the database, table, and column.
On success, the sqlite3_prepare_APIName family of routines return SQLITE_OK_API_constant; otherwise an error code is returned by sqlite3_prepare_APIName.
The sqlite3_trace_v2_APIName interface registers a trace callback function X against database connection D, using property mask M and context pointer P.  If the X callback is NULL or if the M mask is zero, then tracing is disabled.
The strings returned by these two routines should be released by sqlite3_free_APIName.
If the sqlite3_realloc_APIParam_2 parameter to sqlite3_realloc_APIName is zero or negative then the behavior is exactly the same as calling sqlite3_free_APIName.
If sqlite3_malloc_APIName is unable to obtain sufficient free memory, it returns a NULL pointer.
If the sqlite3_status64_APIParam_4 is true, then the highest record value is reset after *pHighwater is written.
The first two constants (SQLITE_MUTEX_FAST_API_constant and SQLITE_MUTEX_RECURSIVE_API_constant) cause sqlite3_mutex_alloc_APIName to create a new mutex.
If the 2nd parameter to sqlite3_exec_APIName is a NULL pointer, a pointer to an empty string, or a pointer that contains only whitespace and/or SQL comments, then no SQL statements are evaluated and the database is not changed.
sqlite3_result_textnot exist in API_info
Unless it returns SQLITE_MISUSE_API_constant, the sqlite3_wal_checkpoint_v2_APIName interface sets the error information that is queried by sqlite3_errcode_APIName and sqlite3_errmsg_APIName.
Unless SQLITE_MISUSE_API_constant is returned by sqlite3_blob_write_APIName, sqlite3_blob_write_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions.
If the action code is SQLITE_READ_API_constant and the callback returns SQLITE_IGNORE_API_constant then the prepared statement statement is constructed to substitute a NULL value in place of the table column that would have been read if SQLITE_OK_API_constant had been returned.
Invoking either sqlite3_trace_APIName or sqlite3_trace_v2_APIName will cancel the profile callback.
 Return the number of columns in the result set returned by the prepared statement.
When an unlock-notify callback is registered, the application provides a single void* pointer that is passed to the callback when it is invoked.
The result is written into the buffer supplied as sqlite3_snprintf_APIParam_2 whose size is given by sqlite3_snprintf_APIParam_1.
 These routines provide access to the set of SQL language keywords recognized by SQLite.
If any other process is running a checkpoint operation at the same time, the lock cannot be obtained and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName.
The length returned by sqlite3_str_length_APIName does not include the zero-termination byte.
The entry point is sqlite3_load_extension_APIParam_3.
Use sqlite3_clear_bindings_APIName to reset the bindings.
These routines extract type, size, and content information from protected sqlite3_value objects.
The preferred routine to use is sqlite3_prepare_v2_APIName.
The number of milliseconds of sleep actually requested from the operating system is returned by sqlite3_sleep_APIName.
The sqlite3_mutex_try_APIName interface returns SQLITE_OK_API_constant upon successful entry.
The first parameter is the database connection to which the SQL function is to be added.
The sqlite3_str_new_APIParam_1 parameter to sqlite3_str_new_APIName may be NULL.
The circumstances under which SQLite will enforce the soft heap limit may changes in future releases of SQLite.
If the xCallback argument is NULL then the collating function is deleted.
For an in-memory database or a "TEMP" database, the serialization is the same sequence of bytes which would be written to disk if that database where backed up to disk.
However, the column, table, or database of a BLOB handle cannot be changed after the BLOB handle is opened.
 These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName.The sqlite3_str_appendf(X,F,...) and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X.The sqlite3_str_append_APIName method appends exactly N bytes from string S onto the end of the sqlite3_str object X.  N must be non-negative.
The authorizer callback is invoked as SQL statements are being compiled by sqlite3_prepare_APIName or its variants sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName.
SQLITE_DONE_API_constant means that the statement has finished executing successfully.
sqlite3_set_auxdata not exist in API_info
Multiple collating functions can be registered using the same name but with different eTextRep parameters and SQLite will use whichever function requires the least amount of data transformation.
The mutex implementation does not need to make a distinction between SQLITE_MUTEX_RECURSIVE_API_constant and SQLITE_MUTEX_FAST_API_constant if it does not want to.
A trace callback is invoked with four arguments: callback_APIName.
The fourth parameter is an arbitrary client data pointer that is passed through into the xCreate and xConnect methods of the virtual table module when a new virtual table is be being created or reinitialized.
To delete an existing SQL function or aggregate, pass NULL pointers for all three function callbacks.
The fourth parameter is the name of the required collation sequence.
The sqlite3_table_column_metadata(X,D,T,C,....) routine returns information about column C of table T in database D on database connection X.
If sqlite3_prepare16_APIParam_3 is zero, then no prepared statement is generated.
SQLITE_OK_API_constant is returned by sqlite3_snapshot_recover_APIName if successful, or an SQLite error code otherwise.
These functions return information about the Nth result column returned by the statement, where N is the second function argument.
If sqlite3_config_APIName is called after sqlite3_initialize_APIName and before sqlite3_shutdown_APIName then it will return SQLITE_MISUSE_API_constant.
On success, SQLITE_OK_API_constant is returned by sqlite3_blob_open_APIName and the new BLOB handle is stored in *ppBlob.
So the longest string that can be completely written will be n-1 characters.
The profile callback time is in units of nanoseconds, however the current implementation is only capable of millisecond resolution so the six least significant digits in the time are meaningless.
SQLite automatically frees the memory allocated by sqlite3_aggregate_context_APIName when the aggregate query concludes.
Otherwise, if no error occurs, sqlite3_db_cacheflush_APIName returns SQLITE_OK_API_constant.
The sqlite3_close_v2_APIParam_1 parameter to sqlite3_close_APIName and sqlite3_close_v2_APIName must be either a NULL pointer or an sqlite3 object pointer obtained from sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName, and not previously closed.
Databases managed by external sources can be given much smaller limits designed to prevent a denial of service attack.
 This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1.
The second callback argument is one of SQLITE_INSERT_API_constant, SQLITE_DELETE_API_constant, or SQLITE_UPDATE_API_constant, depending on the operation that caused the callback to be invoked.
This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1.
The highest recorded value is returned by sqlite3_status_APIName in *pHighwater.
The log message is stored in a fixed-length buffer on the stack.
Only a single authorizer can be in place on a database connection at a time.
If the blocked connection is attempting to obtain a write-lock on a shared-cache table, and more than one other connection currently holds a read-lock on the same table, then SQLite arbitrarily selects one of the other connections to use as the blocking connection.
The fourth parameter is the number of pages currently in the write-ahead log file, including those that were just committed.
M is the size of the buffer P, which might be larger than N.  If sqlite3_deserialize_APIParam_5 is larger than N, and the SQLITE_DESERIALIZE_READONLY_API_constant bit is not set in F, then SQLite is permitted to add content to the in-memory database as long as the total size does not exceed sqlite3_deserialize_APIParam_5 bytes.
 SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random ROWIDs when inserting new records into a table that already uses the largest possible ROWID.
SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random ROWIDs when inserting new records into a table that already uses the largest possible ROWID.
If the sqlite3_open_APIParam_1 is an empty string, then a private, temporary on-disk database will be created.
The preupdate hook only fires for changes to real database tables; the preupdate hook is not invoked for changes to virtual tables or to system tables like sqlite_master or sqlite_stat1.
SQLite uses the path component of the URI as the name of the disk file which contains the database.
The second argument is a pointer to the function to invoke when a row is updated, inserted or deleted in a rowid table.
If the caller knows that the supplied string is nul-terminated, then there is a small performance advantage to passing an sqlite3_prepare16_v2_APIParam_3 parameter that is the number of bytes in the input string including the nul-terminator.
One way around this problem is to check the extended error code returned by an sqlite3_step_APIName call.
The sqlite3_column_type_APIName routine returns the datatype code for the initial data type of the result column.
If the database is opened (and/or created) successfully, then SQLITE_OK_API_constant is returned by sqlite3_open_APIName.
The integer return value from the callback is currently ignored, though this may change in future releases.
In this case there is no "blocking connection", so invoking sqlite3_unlock_notify_APIName results in the unlock-notify callback being invoked immediately.
When a connection (known as the blocked connection) fails to obtain a shared-cache lock and SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName to the caller, the identity of the database connection (the blocking connection) that has locked the required resource is stored internally.
The application must not read or write any part of a block of memory after it has been released using sqlite3_free_APIName or sqlite3_realloc_APIName.
sqlite3_column_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant.
The value returned by sqlite3_changes_APIName immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero.
SQLite strives to keep heap memory utilization below the soft heap limit by reducing the number of pages held in the page cache as heap memory usages approaches the limit.
For example, the statement "CREATE TABLE BEGIN_APIName;" is accepted by SQLite, and creates a new table named "BEGIN" with three columns named "REPLACE", "PRAGMA", and "END".
Each call to sqlite3_set_authorizer overrides the previous call.
If the callback on a commit hook function returns non-zero, then the commit is converted into a rollback.
The input to sqlite3_complete_APIName must be a zero-terminated UTF-8 string.
In other words, the filename will be an absolute pathname, even if the filename used to open the database originally was a URI or relative pathname.
sqlite3_create_function_v2 not exist in API_info
If a WAL file remains on disk after all database connections close (either through the use of the SQLITE_FCNTL_PERSIST_WAL_API_constant file control or because the last process to have the database opened exited without calling sqlite3_close_APIName) and a new connection is subsequently opened on that database and WAL file, the sqlite3_snapshot_open_APIName interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.
The sqlite3_result_double_APIName interface sets the result from an application-defined function to be a floating point value specified by its 2nd argument.
The sqlite3_str_value_APIName method returns a pointer to the current content of the dynamic string under construction in X.
Use sqlite3_db_config(db,SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant,..) to enable or disable only the C-API.
The name of a result column is the value of the "AS" clause for that column, if there is an AS clause.
The sqlite3_prepare_v2_APIName interface works exactly the same as sqlite3_prepare_v3_APIName with a zero prepFlags parameter.
The sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName interfaces are recommended for all new programs.
The SQLITE_CHECKPOINT_FULL_API_constant, RESTART and TRUNCATE modes also obtain the exclusive "writer" lock on the database file.
 sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer.
The SQLite core uses these three routines for all of its own internal memory allocation needs.
The sqlite3_os_end_APIName routine undoes the effect of sqlite3_os_init_APIName.
The values returned by sqlite3_errcode_APIName and/or sqlite3_extended_errcode_APIName might change with each API call.
The sqlite3_strglob_APIName interface returns zero if and only if string X matches the GLOB pattern P. The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite.
The sqlite3_column_name_APIName interface returns a pointer to a zero-terminated UTF-8 string and sqlite3_column_name16_APIName returns a pointer to a zero-terminated UTF-16 string.
SQLite takes the text result from the application from the 2nd parameter of the sqlite3_result_text* interfaces.
However, such calls must not close the database connection nor finalize or reset the prepared statement in which the function is running.
If the 3rd parameter is non-negative, then it must be the byte offset into the string where the NUL terminator would appear if the string where NUL terminated.
Then azResult holds this content:
The sqlite3_stmt_busy_APIName interface returns true (non-zero) if the prepared statement sqlite3_stmt_busy_APIParam_1 has been stepped at least once using sqlite3_step_APIName but has neither run to completion (returned SQLITE_DONE_API_constant from sqlite3_step_APIName) nor been reset using sqlite3_reset_APIName.
 The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter (the 5th parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.This routine must be called from the same thread in which the application-defined function is running.
 The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite.
The sqlite3_trace_v2_APIName interface is intended to replace the legacy interfaces sqlite3_trace_APIName and sqlite3_profile_APIName, both of which are deprecated.
Whether or not a persistent internal datatype conversion occurs is undefined and may change from one release of SQLite to the next.
If the callback pointer to sqlite3_exec_APIName is NULL, then no callback is ever invoked and result rows are ignored.
This must only be used within SQLITE_INSERT_API_constant and SQLITE_UPDATE_API_constant preupdate callbacks; if it is used by an SQLITE_DELETE_API_constant callback then the behavior is undefined.
The sqlite3_snapshot object returned from a successful call to sqlite3_snapshot_get_APIName must be freed using sqlite3_snapshot_free_APIName to avoid a memory leak.
To avoid having to register all collation sequences before a database can be used, a single callback function may be registered with the database connection to be invoked whenever an undefined collation sequence is required.
The cache sharing mode set by this interface effects all subsequent calls to sqlite3_open_APIName, sqlite3_open_v2_APIName, and sqlite3_open16_APIName.
The sqlite3_create_module_APIName interface is equivalent to sqlite3_create_module_v2_APIName with a NULL destructor.
The pointer arguments to sqlite3_free_APIName and sqlite3_realloc_APIName must be either NULL or else pointers obtained from a prior invocation of sqlite3_malloc_APIName or sqlite3_realloc_APIName that have not yet been released.
 This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5, column sqlite3_blob_open_APIParam_4, table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2; in other words, the same BLOB that would be selected by:Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database, but rather the symbolic name of the database.
The C argument is a copy of the context pointer.
If both processes invoke the busy handlers, neither will make any progress.
The first argument is the prepared statement object to be interrogated.
The implementation is not required to provide versions of these routines that actually work.
The input to sqlite3_complete16_APIName must be a zero-terminated UTF-16 string in native byte order.
These interfaces are only available if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option.
The sqlite3_value_free_APIName interface frees an sqlite3_value object previously obtained from sqlite3_value_dup_APIName.
The values of these parameters (also called "host parameter names" or "SQL parameters") can be set using the sqlite3_bind_*_APIName routines defined here.
However, the signature of the callback function allows SQLite to pass it an array of void* context pointers.
The sqlite3_str_finish_APIName interface may return a NULL pointer if any errors were encountered during construction of the string.
The "DROP TABLE" Exception
If either the current value or the highwater mark is too large to be represented by a 32-bit integer, then the values returned by sqlite3_status_APIName are undefined.
The sqlite3_realloc64_APIName interfaces works the same as sqlite3_realloc_APIName except that sqlite3_realloc_APIParam_2 is a 64-bit unsigned integer instead of a 32-bit signed integer.
 sqlite3_blob_close_APIName closes an open BLOB handle.
These routines must be called from the same thread as the SQL function that supplied the sqlite3_value* parameters.
With the "v2" interface, any of the other result codes or extended result codes might be returned as well.
The commit and rollback hook callbacks are not reentrant.
Its only purpose is to be a placeholder function that can be overloaded by a virtual table.
See also: sqlite3_temp_directory
The sqlite3_str_length_APIName method returns the current length, in bytes, of the dynamic string under construction in sqlite3_str object X.
The callback function registered by sqlite3_trace_APIName is invoked at various times when an SQL statement is being run by sqlite3_step_APIName.
If two or more threads call one or more column metadata interfaces for the same prepared statement and result column at the same time then the results are undefined.
When INSERT OR REPLACE encounters a constraint violation, it does not fail.
The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback.
The sqlite3_reset_APIName interface does not change the values of any bindings on the prepared statement S.
If sqlite3_collation_needed16_APIName is used, the names are passed as UTF-16 in machine native byte order.
If the SQLITE_OPEN_FULLMUTEX_API_constant flag is set then the database connection opens in the serialized threading mode unless single-thread was previously selected at compile-time or start-time.
After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName, sqlite3_step_APIName must be called one or more times to evaluate the statement.
All calls obtain an exclusive "checkpoint" lock on the database file.
For example, if connection X is waiting for connection Y's transaction to be concluded, and similarly connection Y is waiting on connection X's transaction, then neither connection will proceed and the system may remain deadlocked indefinitely.
This interface is not for use by applications.
The SQLite core uses these routines for thread synchronization.
These interfaces are available only on Windows.
sqlite3_total_changes_APIName returns the total number of rows inserted, modified or deleted by all INSERT, UPDATE or DELETE statements completed since the database connection was opened, including those executed as part of trigger programs.
An attempt to write to an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant.
Similarly, sqlite3_shutdown_APIName will invoke sqlite3_os_end_APIName.
A busy handler must not close the database connection or prepared statement that invoked the busy handler.
 The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object.
In those cases, sqlite3_aggregate_context_APIName might be called for the first time from within xFinal_APIName.
The sqlite3_mutex_leave_APIName routine exits a mutex that was previously entered by the same thread.
These functions work very much like the parameter binding family of functions used to bind values to host parameters in prepared statements.
If this interface is invoked outside the context of an xConnect or xCreate virtual table method then the behavior is undefined.
This interface allows applications to access the same PRNG for other purposes.
These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName.
An application-supplied implementation of sqlite3_os_init_APIName or sqlite3_os_end_APIName must return SQLITE_OK_API_constant on success and some other error code upon failure.
The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method.
If the 3rd parameter to the sqlite3_result_text* interfaces is non-negative, then as many bytes (not characters) of the text pointed to by the 2nd parameter are taken as the application-defined function result.
sqlite3_prepare_v3_APIName differs from sqlite3_prepare_v2_APIName only in having the extra prepFlags parameter, which is a bit array consisting of zero or more of the SQLITE_PREPARE_* flags.
A function where the encoding difference is between UTF16le and UTF16be is a closer match than a function where the encoding difference is between UTF8 and UTF16.
Extension loading is off by default.
Note that when type conversions occur, pointers returned by prior calls to sqlite3_column_blob_APIName, sqlite3_column_text_APIName, and/or sqlite3_column_text16_APIName may be invalidated.
The SQLITE_FCNTL_FILE_POINTER_API_constant value for the sqlite3_file_control_APIParam_3 parameter causes a pointer to the underlying sqlite3_file object to be written into the space pointed to by the 4th parameter.
 The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context C to be the value T.  Only the lower 8 bits of the subtype T are preserved in current versions of SQLite; higher order bits are discarded.
The destructor X in sqlite3_set_auxdata_APIName might be called immediately, before the sqlite3_set_auxdata_APIName interface even returns.
There can only be a single busy handler defined for each database connection.
Autocommit mode is disabled by a BEGIN statement.
The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2_APIName.
Except if SQLite is built using an edited copy of the amalgamation, then the last four characters of the hash might be different from SQLITE_SOURCE_ID_API_constant.
See also: sqlite3_db_release_memory_APIName
 The sqlite3_stmt_busy_APIName interface returns true (non-zero) if the prepared statement S has been stepped at least once using sqlite3_step_APIName but has neither run to completion (returned SQLITE_DONE from sqlite3_step_APIName) nor been reset using sqlite3_reset_APIName.
The exceptions defined in this paragraph might change in a future release of SQLite.
SQLite interprets the error message string from sqlite3_result_error_APIName as UTF-8.
The choice for the new VFS is arbitrary.
Any callback set by a previous call to sqlite3_update_hook_APIName for the same database connection is overridden.
As with the LIKE operator, the sqlite3_strlike_APIName function is case insensitive - equivalent upper and lower case ASCII characters match one another.
The database connection pointer sqlite3_next_stmt_APIParam_1 in a call to sqlite3_next_stmt_APIName must refer to an open database connection and in particular must not be a NULL pointer.
If such a conversion is possible without loss of information (in other words, if the value is a string that looks like a number) then the conversion is performed.
When the callback is invoked, the first argument passed is a copy of the second argument to sqlite3_collation_needed_APIName or sqlite3_collation_needed16_APIName.
The sqlite3_result_blob_APIName interface sets the result from an application-defined function to be the BLOB whose content is pointed to by the second parameter and which is N bytes long where N is the third parameter.
 This interface is used to retrieve runtime status information about a single database connection.
Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE_API_constant, the log file will have been truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.
This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName.
The "iScanStatusOp" parameter determines which status information to return.
Subsequent calls to sqlite3_get_auxdata_APIName return sqlite3_set_auxdata_APIParam_3 from the most recent sqlite3_set_auxdata_APIName call if the metadata is still valid or NULL if the metadata has been discarded.
If the most recent evaluation of statement sqlite3_finalize_APIParam_1 failed, then sqlite3_finalize_APIName returns the appropriate error code or extended error code.
If the sqlite3_open_APIParam_1 is ":memory:", then a private, temporary in-memory database is created for the connection.
Details:
Except, there are some interfaces that are guaranteed to never change the value of the error code.
If the progress callback returns non-zero, the operation is interrupted.
On second and subsequent calls to sqlite3_aggregate_context_APIName for the same aggregate function instance, the same buffer is returned by sqlite3_aggregate_context_APIName.
Nor is the update hook invoked when rows are deleted using the truncate optimization.
See also: file control opcodes
If these routines are called from within the different thread than the one containing the application-defined function that received the sqlite3_context pointer, the results are undefined.
The built-in random_APIName SQL function is an example of a function that is not deterministic.
After a type conversion, the result of calling sqlite3_column_type_APIName is undefined, though harmless.
The sqlite3_bind_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0.
This routine is typically called in response to a user action such as pressing "Cancel" or Ctrl-C where the user wants a long query operation to halt immediately.
The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P. SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" respectively.
Most SQL functions are deterministic.
In this case the application must supply a custom mutex implementation using the SQLITE_CONFIG_MUTEX_API_constant option of the sqlite3_config_APIName function before calling sqlite3_initialize_APIName or any other public sqlite3_ function that calls sqlite3_initialize_APIName.
A call to sqlite3_serialize_APIName might return NULL even if the SQLITE_SERIALIZE_NOCOPY_API_constant bit is omitted from argument sqlite3_serialize_APIParam_4 if a memory allocation error occurs.
A protected sqlite3_value object may always be used where an unprotected sqlite3_value object is required, so either kind of sqlite3_value object can be used with this interface.
The sqlite3_mutex_alloc_APIName routine allocates a new mutex and returns a pointer to it.
If the sqlite3_blob_open_APIParam_6 parameter is non-zero, then the BLOB is opened for read and write access.
This interface is used to retrieve runtime status information about a single database connection.
A database connection handle is usually returned in *ppDb, even if an error occurs.
The sqlite3_bind_zeroblob_APIName routine binds a BLOB of length N that is filled with zeroes.
The size of the database created by an untrusted script can be contained using the max_page_count PRAGMA.
The error-code preserving interfaces are:
When a blocking connections transaction is concluded, there may be more than one blocked connection that has registered for an unlock-notify callback.
If the BLOB handle passed as sqlite3_blob_write_APIParam_1 was not opened for writing (the flags parameter to sqlite3_blob_open_APIName was zero), sqlite3_blob_write_APIName returns SQLITE_READ_API_constantONLY.
The values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName do not include the zero terminators at the end of the string.
The value of the sqlite3_data_directory variable is intended to act as a replacement for the current directory on the sub-platforms of Win32 where that concept is not present, e.g.
For example, given the database schema:
These routines work only with protected sqlite3_value objects.
The sqlite3_value_text16be_APIName and sqlite3_value_text16le_APIName interfaces extract UTF-16 strings as big-endian and little-endian respectively.
If any of the sqlite3_bind_*_APIName routines are called with a NULL pointer for the prepared statement or with a prepared statement for which sqlite3_step_APIName has been called more recently than sqlite3_reset_APIName, then the call will return SQLITE_MISUSE_API_constant.
The unlock-notify callback is not reentrant.
See the threading mode documentation for additional information.
The size of a blob may not be changed by this interface.
Memory to hold the error message string is managed internally and must not be freed by the application.
Memory to hold the error message string is managed internally.
 The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after committing a transaction if there are sqlite3_wal_autocheckpoint_APIParam_2 or more frames in the write-ahead log file.
 Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module.
The pArg argument is passed through to the callback.
This interface causes the xEntryPoint_APIName function to be invoked for each new database connection that is created.
If any of these routines are called after sqlite3_reset_APIName or sqlite3_finalize_APIName or after sqlite3_step_APIName has returned something other than SQLITE_ROW_API_constant, the results are undefined.
The X callback is invoked whenever any of the events identified by mask M occur.
Semicolons that are embedded within string literals or quoted identifier names or comments are not independent tokens (they are part of the token in which they are embedded) and thus do not count as a statement terminator.
Type conversions and pointer invalidations might occur in the following cases:
However, if the F argument contains the SQLITE_SERIALIZE_NOCOPY_API_constant bit, then no memory allocations are made, and the sqlite3_serialize_APIName function will return a pointer to the contiguous memory representation of the database that SQLite is currently using for that database, or NULL if the no such contiguous memory representation of the database exists.
N is zero for the left-most function argument.
If the 4th parameter to the sqlite3_result_text* interfaces or to sqlite3_result_blob is the special constant SQLITE_STATIC_API_constant, then SQLite assumes that the text or BLOB result is in constant space and does not copy the content of the parameter nor call a destructor on the content when it has finished using that result.
Additional sqlite3_trace_APIName callbacks might occur as each triggered subprogram is entered.
The sqlite3_snapshot_get_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.
See "URI filenames" for additional information.
sqlite3_bind_pointer not exist in API_info
sqlite3_auto_extensionnot exist in API_info
sqlite3_update_hooknot exist in API_info
After at least "ms" milliseconds of sleeping, the handler returns 0 which causes sqlite3_step_APIName to return SQLITE_BUSY_API_constant.
Note to Windows users:  The encoding used for the sqlite3_open_APIParam_1 argument of sqlite3_open_APIName and sqlite3_open_v2_APIName must be UTF-8, not whatever codepage is currently defined.
These routines return 0 if the statement is incomplete.
If the implementation does not provide working versions of these routines, it should at least provide stubs that always return true so that one does not get spurious assertion failures.
sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table.
 The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes.
The third argument is the value to bind to the parameter.
The second argument is an integer code for a specific SQLITE_STMTSTATUS counter to be interrogated.
The sqlite3_table_column_metadata_APIName interface returns SQLITE_OK_API_constant and fills in the non-NULL pointers in the final five arguments with appropriate values if the specified column exists.
The application should never invoke either sqlite3_os_init_APIName or sqlite3_os_end_APIName directly.
If sqlite3_realloc_APIName returns NULL and sqlite3_realloc_APIParam_2 is positive, then the prior allocation is not freed.
The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after committing a transaction if there are sqlite3_wal_autocheckpoint_APIParam_2 or more frames in the write-ahead log file.
 Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations.
Setting a new busy handler clears any previously set handler.
The leftmost column of the result set has the index 0.
In order to succeed, the database connection must not be in autocommit mode when sqlite3_snapshot_open_APIName is called.
The soft heap limit is "soft" because even though SQLite strives to stay below the limit, it will exceed the limit rather than generate an SQLITE_NOMEM_API_constant error.
The sqlite3_realloc_APIName interface attempts to resize a prior memory allocation sqlite3_realloc_APIParam_1 to be at least sqlite3_realloc_APIParam_2 bytes.
The sqlite3_str_finish_APIName interface will also return a NULL pointer if the string in sqlite3_str object sqlite3_str_finish_APIParam_1 is zero bytes long.
In this case the values written to output parameters *pnLog and *pnCkpt are undefined.
Callback Invocation Details
sqlite3_create_module_v2 not exist in API_info
If the parameter N to sqlite3_malloc_APIName is zero or negative then sqlite3_malloc_APIName returns a NULL pointer.
If sqlite3_malloc_APIName fails during the processing of either routine (for example during a conversion from UTF-8 to UTF-16) then a NULL pointer is returned by sqlite3_column_name_APIName.
The sqlite3_str_errcode_APIName method returns SQLITE_NOMEM_API_constant following any out-of-memory error, or SQLITE_TOOBIG_API_constant if the size of the dynamic string exceeds SQLITE_MAX_LENGTH, or SQLITE_OK_API_constant if there have been no errors.
Support for the diagnostic functions sqlite3_compileoption_used_APIName and sqlite3_compileoption_get_APIName may be omitted by specifying the SQLITE_OMIT_COMPILEOPTION_DIAGS option at compile time.
The SQLITE_OPEN_PRIVATECACHE_API_constant flag causes the database connection to not participate in shared cache mode even if it is enabled.
If the statement is not a COMMIT and occurs within an explicit transaction then you should rollback the transaction before continuing.
The index value returned is suitable for use as the second parameter to sqlite3_bind_APIName.
SQLITE_BUSY_API_constant means that the database engine was unable to acquire the database locks it needs to do its job.
If the blob handle being closed was opened for read-write access, and if the database is in auto-commit mode and there are no other open read-write blob handles or active write statements, the current transaction is committed.
If no such function exists before this API is called, a new function is created.
The safest policy is to invoke these routines in one of the following ways:
If there is already a read transaction open when sqlite3_snapshot_open_APIName is invoked, then the same read transaction remains open (on the same database snapshot) if SQLITE_ERROR_API_constant, SQLITE_BUSY_API_constant or SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName.
More details regarding the implementation of aggregate window functions are available here.
The sqlite3_value returned is a protected sqlite3_value object even if the input is not.
sqlite3_table_column_metadata_APIName causes all database schemas to be read from disk and parsed, if that has not already been done, and returns an error if any errors are encountered while loading the schema.
A sqlite3_free_table_APIParam_1 table might consist of one or more memory allocations.
The sqlite3_open_v2_APIName interface works like sqlite3_open_APIName except that it accepts two additional parameters for additional control over the new database connection.
Registering a NULL function disables the callback.
The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG_API_constant option to sqlite3_config_APIName.
These routines register callback functions that can be used for tracing and profiling the execution of SQL statements.
The sqlite3_bind_zeroblob_APIName and sqlite3_result_zeroblob_APIName interfaces and the built-in zeroblob SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface.
Static mutexes are for internal use by SQLite only.
 These routines are work-alikes of the "printf_APIName" family of functions from the standard C library.
This method can be used, for example, to add whitespace indentation.
If any sqlite3_bind__APIName routine is passed a prepared statement that has been finalized, the result is undefined and probably harmful.
If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically.
These routines are deprecated.
The third and fourth parameters to sqlite3_table_column_metadata_APIName are the table and column name of the desired column, respectively.
It is provided to support rare applications with unusual needs.
xStep and xFinal must both be non-NULL.
The first six interfaces (_blob, _double, _int, _int64, _text, and _text16) each return the value of a result column in a specific data format.
The requested measurement is written into a variable pointed to by the "pOut" parameter.
sqlite3_trace_v2not exist in API_info
As with all other SQLite APIs, those whose names end with "16" return UTF-16 encoded strings and the other functions return UTF-8.
There is no way to distinguish between an incorrect sqlite3_file_control_APIParam_2 and an SQLITE_ERROR_API_constant return from the underlying xFileControl method.
The datatype after conversion is returned by sqlite3_value_numeric_type_APIName.
If sqlite3_wal_checkpoint_v2_APIParam_5 is not NULL,then *pnCkpt is set to the total number of checkpointed frames in the log file (including any that were already checkpointed before the function was called) or to -1 if the checkpoint could not run due to an error or because the database is not in WAL mode.
The fifth parameter to the preupdate callback is the name of the table that is being modified.
Security warning: It is recommended that the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method be used to enable only this interface.
The fourth parameter may optionally be ORed with SQLITE_DETERMINISTIC_API_constant to signal that the function will always return the same result given the same inputs within a single SQL statement.
Warning: The object returned by sqlite3_column_value_APIName is an unprotected sqlite3_value object.
Deadlock Detection
"Core" in the previous sentence does not include operating-system specific VFS implementation.
 The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database N of connection D.  The main database file has the name "main".
These routines provide access to the set of SQL language keywords recognized by SQLite.
Such changes will eventually commit if the transaction continues to completion.
 These routines return the name assigned to a particular column in the result set of a SELECT statement.
If there is no INTEGER PRIMARY KEY column, then the outputs for the rowid are set as follows:
This is a change as of SQLite version 3.5.0 (2007-09-04).
The preupdate hook is disabled by invoking sqlite3_preupdate_hook_APIName with a NULL pointer as sqlite3_preupdate_count_APIParam_2.
Attempts to increase a limit above its hard upper bound are silently truncated to the hard upper bound.
The return value from sqlite3_soft_heap_limit64_APIName is the size of the soft heap limit prior to the call, or negative in the case of an error.
sqlite3_create_window_functionnot exist in API_info
The BLOB handle can be moved to a different row of the same table using the sqlite3_blob_reopen_APIName interface.
Calls to sqlite3_blob_read_APIName and sqlite3_blob_write_APIName for an expired BLOB handle fail with a return code of SQLITE_ABORT_API_constant.
The SQLITE_FCNTL_VFS_POINTER_API_constant opcode returns a pointer to the underlying sqlite3_vfs object for the file.
The busy callback should not take any actions which modify the database connection that invoked the busy handler.
These routines open an SQLite database file as specified by the sqlite3_open_APIParam_1 argument.
The second argument, "zSql", is the statement to be compiled, encoded as either UTF-8 or UTF-16.
Otherwise, an error code or an extended error code is returned by sqlite3_blob_read_APIName.
As a consequence, errors that occur in the wrapper layer outside of the internal sqlite3_exec_APIName call are not reflected in subsequent calls to sqlite3_errcode_APIName or sqlite3_errmsg_APIName.
The implementation of the new function always causes an exception to be thrown.
So for example, if "samplelib" cannot be loaded, then names like "samplelib.so" or "samplelib.dylib" or "samplelib.dll" might be tried also.
When the commit hook callback routine returns zero, the COMMIT operation is allowed to continue normally.
See also: sqlite3_strlike_APIName.
The sqlite3_rollback_hook_APIName interface registers a callback function to be invoked whenever a transaction is rolled back.
If this parameter is -1, then the SQL function or aggregate may take any number of arguments between 0 and the limit set by sqlite3_limit_APIName.
The default busy callback is NULL.
If a non-negative fourth parameter is provided to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_text64_APIName then that parameter must be the byte offset where the NUL terminator would occur assuming the string were NUL terminated.
If the fourth parameter is a NULL pointer then the default sqlite3_vfs object is used.
sqlite3_blob_reopen_APIName sets the database handle error code and message.
The amount of space allocated by sqlite3_aggregate_context_APIName is determined by the sqlite3_aggregate_context_APIParam_2 parameter on first successful call.
The sqlite3_threadsafe_APIName function returns zero if and only if SQLite was compiled with mutexing code omitted due to the SQLITE_THREADSAFE compile-time option being set to 0.
Any attempt to create a function with a longer name will result in SQLITE_MISUSE_API_constant being returned.
Autocommit mode is re-enabled by a COMMIT or ROLLBACK.
These functions add, remove, or modify a collation associated with the database connection specified as the first argument.
 The sqlite3_db_readonly_APIName interface returns 1 if the database N of connection D is read-only, 0 if it is read/write, or -1 if N is not the name of a database on connection D.
Since this interface is expected to be rarely used, it is only available if SQLite is compiled using the SQLITE_ENABLE_STMT_SCANSTATUS compile-time option.
Most SQLite builds come with a single default VFS that is appropriate for the host computer.
Both routines return a NULL pointer if sqlite3_malloc64_APIName is unable to allocate enough memory to hold the resulting string.
The name of the database or table or column can be returned as either a UTF-8 or UTF-16 string.
This interface is retained for backwards compatibility and as a convenience for applications that need to manually start a callback but which do not need the full power (and corresponding complication) of sqlite3_wal_checkpoint_v2_APIName.
This is an historical accident that cannot be fixed without breaking backwards compatibility.
If the result is a numeric value then sqlite3_column_bytes_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-8 string and returns the number of bytes in that string.
Passing any other pointer in to this routine results in undefined and probably undesirable behavior.
If there is not already a read-transaction open on schema sqlite3_snapshot_get_APIParam_2 when sqlite3_snapshot_get_APIName is called, one is opened automatically.
Use the sqlite3_trace_v2_APIName interface instead of the routines described here.
These routines return information about a single column of the current result row of a query.
If offset sqlite3_blob_write_APIParam_4 is less than N bytes from the end of the BLOB, SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written.
The parameter P is passed through as the only parameter to the callback function X.
The second parameter to the preupdate callback is a pointer to the database connection that registered the preupdate hook.
To avoid this, each thread can obtain exclusive use of the database connection sqlite3_db_mutex_APIParam_1 by invoking sqlite3_mutex_enter(sqlite3_db_mutex_APIName) before beginning to use sqlite3_db_mutex_APIParam_1 and invoking sqlite3_mutex_leave(sqlite3_db_mutex_APIName) after all calls to the interfaces listed here are completed.
The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of "case independence" that SQLite uses internally when comparing identifiers.
If the authority is not an empty string or "localhost", an error is returned by sqlite3_open16_APIName to the caller.
 This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database.
This routine sets a busy handler that sleeps for a specified amount of time when a table is locked.
The callback function should normally return SQLITE_OK_API_constant.
 The SQLite core uses these three routines for all of its own internal memory allocation needs.
The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object.
The sqlite3_vsnprintf_APIName routine is a varargs version of sqlite3_snprintf_APIName.
Calling sqlite3_blob_close_APIName with an argument that is not a NULL pointer or an open blob handle results in undefined behaviour.
The sqlite3_str_appendf(X,F,...) and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X.
sqlite3_commit_hooknot exist in API_info
If there is a blocking connection, then the extended error code is set to SQLITE_LOCKED_API_constant_SHAREDCACHE.
These functions (collectively known as "function creation routines") are used to add SQL functions or aggregates or to redefine the behavior of existing SQL functions or aggregates.
If the default VFS is unregistered, another VFS is chosen as the default.
The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement sqlite3_step_APIParam_1. If prepared statement sqlite3_step_APIParam_1 does not have results ready to return (via calls to the sqlite3_column_*_APIName of interfaces) then sqlite3_data_count_APIName returns 0.
If the 3rd parameter to the sqlite3_result_text* interfaces is negative, then SQLite takes result text from the 2nd parameter through the first zero character.
In SQLite version 3.5.0 and 3.5.1, it was possible to define the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in implementation of these routines to be omitted.
The size of the BLOB (and hence the maximum value of N+iOffset) can be determined using the sqlite3_blob_bytes_APIName interface.
The sqlite3_deserialize_APIName interface will fail with SQLITE_BUSY_API_constant if the database is currently in a read transaction or is involved in a backup operation.
If the sixth argument to sqlite3_bind_text64_APIName is not one of the allowed values shown above, or if the text encoding is different from the encoding specified by the sixth parameter, then the behavior is undefined.
If the two snapshot handles are not associated with the same database file, the result of the comparison is undefined.
The first parameter is an operation code that determines the number, meaning, and operation of all subsequent parameters.
There can only be a single busy handler for a particular database connection at any given moment.
The sqlite3_update_hook_APIName interface registers a callback function with the database connection identified by the first argument to be invoked whenever a row is updated, inserted or deleted in a rowid table.
With SQLITE_ENABLE_MEMORY_MANAGEMENT, the soft heap limit is enforced on every memory allocation.
Otherwise, various features that require the use of temporary files may fail.
Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK, and INSERT OR ABORT make no changes to the return value of this routine when their insertion fails.
If this routine returns 0, that means the prepared statement returns no data (for example an UPDATE).
There may be at most one unlock-notify callback registered by a blocked connection.
The SQLITE_MUTEX_PTHREADS and SQLITE_MUTEX_W32 implementations are appropriate for use on Unix and Windows.
Calls to sqlite3_close_APIName and sqlite3_close_v2_APIName return SQLITE_OK_API_constant if the sqlite3 object is successfully destroyed and all associated resources are deallocated.
 SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName, sqlite3_free_APIName, and sqlite3_realloc_APIName routines, which form the built-in memory allocation subsystem.The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding (malloced but not freed).
The following table details the conversions that are applied:
The rollback callback is not invoked if a transaction is automatically rolled back because the database connection is closed.
The update hook is not invoked when WITHOUT ROWID tables are modified.
The third parameter is the new limit for that construct.
Let N be the number of rows and M be the number of columns.
If a collating function fails any of the above constraints and that collating function is  registered and used, then the behavior of SQLite is undefined.
The sqlite3_result_error_APIName and sqlite3_result_error16_APIName routines make a private copy of the error message text before they return.
Cache sharing is enabled and disabled for an entire process.
The SQLITE_FCNTL_DATA_VERSION_API_constant returns the data version counter from the pager.
Note that running any other SQL statements, including SELECT statements, or merely calling sqlite3_prepare_v2_APIName and sqlite3_step_APIName will modify the database connections for the meaning of "modify" in this paragraph.
Collation names that compare equal according to sqlite3_strnicmp_APIName are considered to be the same name.
The new row is identified by the rowid value passed as sqlite3_blob_reopen_APIParam_2.
When the SQLITE_THREADSAFE macro is 0, the mutexes are omitted.
The final value of *P is undefined in this case.
But for maximum safety, mutexes should be enabled.
Each new VFS becomes the default VFS if the sqlite3_vfs_register_APIParam_2 flag is set.
Perhaps it was called on a prepared statement that has already been finalized or on one that had previously returned SQLITE_ERROR_API_constant or SQLITE_DONE_API_constant.
Additionally, the result of the comparison is only valid if both of the snapshot handles were obtained by calling sqlite3_snapshot_get_APIName since the last time the wal file was deleted.
If sqlite3_create_module_APIParam_3 (the pointer to the sqlite3_module object) is NULL then no new module is create and any existing modules with the same name are dropped.
If the operating system does not support sleep requests with millisecond time resolution, then the time will be rounded up to the nearest second.
Common techniques used to avoid keyword name collisions include:
sqlite3_step_APIName is called again to retrieve the next row of data.
If two or more collating functions are registered to the same collation name (using different eTextRep values) then all must give an equivalent answer when invoked with equivalent strings.
The sqlite3_expanded_sql_APIName interface returns a pointer to a UTF-8 string containing the SQL text of prepared statement sqlite3_normalized_sql_APIParam_1 with bound parameters expanded.
If the SQLITE_DESERIALIZE_RESIZEABLE_API_constant bit is set, then SQLite will try to increase the buffer size using sqlite3_realloc64_APIName if writes on the database cause it to grow larger than M bytes.
SQLite will use the implementation that most closely matches the way in which the SQL function is used.
It uses only the public interface defined here.
The sqlite3_result_value_APIName interface makes a copy of the sqlite3_value so that the sqlite3_value specified in the parameter may change or be deallocated after sqlite3_result_value_APIName returns without harm.
If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the sqlite3_str_errcode_APIName method will return an appropriate error code.
An error code is returned by sqlite3_enable_shared_cache_APIName otherwise.
The number of subtype bytes preserved by SQLite might increase in future releases of SQLite.
The parser used by SQLite is forgiving.
The new mutex is recursive when SQLITE_MUTEX_RECURSIVE_API_constant is used but not necessarily so when SQLITE_MUTEX_FAST_API_constant is used.
If the 3rd parameter to sqlite3_open_v2_APIName is not one of the combinations shown above optionally combined with other SQLITE_OPEN_* bits then the behavior is undefined.
*ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step_APIName.
As long as the input parameter is correct, these routines can only fail if an out-of-memory error occurs during a format conversion.
sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer.
The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema sqlite3_snapshot_open_APIParam_2 of database connection sqlite3_snapshot_open_APIParam_1 such that the read transaction refers to historical snapshot P, rather than the most recent change to the database.
Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables.These routines work only with protected sqlite3_value objects.
Implementations of aggregate SQL functions use this routine to allocate memory for storing their state.
If the SQLITE_OPEN_NOMUTEX_API_constant flag is set, then the database connection opens in the multi-thread threading mode as long as the single-thread mode has not been set at compile-time or start-time.
If a VFS is registered with a name that is NULL or an empty string, then the behavior is undefined.
An application-defined function is permitted to call other SQLite interfaces.
When multiple implementations of the same function are available, SQLite will pick the one that involves the least amount of data conversion.
Sharing is enabled if the argument is true and disabled if the argument is false.
Memory allocation errors were detected, but they were reported back as SQLITE_CANTOPEN_API_constant or SQLITE_IOERR_API_constant rather than SQLITE_NOMEM_API_constant.
The sqlite3_busy_handler_APIName interface is used to implement sqlite3_busy_timeout_APIName and PRAGMA busy_timeout.
Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations.
If the result column is not initially in the requested format (for example, if the query returns an integer but the sqlite3_column_text_APIName interface is used to extract the value) then an automatic type conversion is performed.
is included as part of the name.
Security warning: It is recommended that extension loading be disabled using the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method rather than this interface, so the load_extension_APIName SQL function remains disabled.
See also: sqlite3_column_count_APIName
The second argument is an integer constant, taken from the set of SQLITE_DBSTATUS options, that determines the parameter to interrogate.
Even if there is a busy-handler configured, it will not be invoked in this case.
These interfaces provide the same information as the SQLITE_VERSION_API_constant, SQLITE_VERSION_API_constant_NUMBER, and SQLITE_SOURCE_ID_API_constant C preprocessor macros but are associated with the library instead of the header file.
The third parameter is a pointer to the implementation of the virtual table module.
All other valid calls to sqlite3_shutdown_APIName are harmless no-ops.
With the legacy interface, a more specific error code (for example, SQLITE_INTERRUPT_API_constant, SQLITE_SCHEMA_API_constant, SQLITE_CORRUPT_API_constant, and so forth) can be obtained by calling sqlite3_reset_APIName on the prepared statement.
The sqlite3_deserialize_APIName interface causes the database connection sqlite3_deserialize_APIParam_1 to disconnect from database sqlite3_deserialize_APIParam_2 and then reopen sqlite3_deserialize_APIParam_2 as an in-memory database based on the serialization contained in sqlite3_deserialize_APIParam_3.  The serialized database sqlite3_deserialize_APIParam_3 is sqlite3_deserialize_APIParam_4 bytes in size.
If the threading mode is Single-thread or Multi-thread then this routine returns a NULL pointer.
sqlite3_snapshot_get_APIName may also return SQLITE_NOMEM_API_constant.
A zeroblob uses a fixed amount of memory (just an integer to hold its size) while it is being processed.
The wal_autocheckpoint pragma can be used to invoke this interface from SQL.
The callback registered by sqlite3_wal_autocheckpoint_APIName replaces any existing callback registered using sqlite3_wal_hook_APIName.
The SQLITE_ prefix may be omitted from the option name passed to sqlite3_compileoption_used_APIName.
sqlite3_bind_blobnot exist in API_info
If any NUL characters occur in the string at a byte offset that is less than the value of the 3rd parameter, then the resulting string will contain embedded NULs and the result of expressions operating on strings with embedded NULs is undefined.
The 4th argument to the sqlite3_exec_APIName callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from sqlite3_column_name_APIName.
 This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1.
It is permitted to register multiple implementations of the same functions with the same name but with either differing numbers of arguments or differing preferred text encodings.
This routine returns SQLITE_OK_API_constant if shared cache was enabled or disabled successfully.
For all versions of SQLite up to and including 3.6.23.1, a call to sqlite3_reset_APIName was required after sqlite3_step_APIName returned anything other than SQLITE_ROW_API_constant before any subsequent invocation of sqlite3_step_APIName.
to flush data accumulated in memory to disk).
All subsequent calls to sqlite3_blob_read_APIName, sqlite3_blob_write_APIName or sqlite3_blob_reopen_APIName on an aborted blob handle immediately return SQLITE_ABORT_API_constant.
If the file cannot be loaded directly, attempts are made to load with various operating-system specific extensions added.
 The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages of two valid snapshot handles.If the two snapshot handles are not associated with the same database file, the result of the comparison is undefined.Additionally, the result of the comparison is only valid if both of the snapshot handles were obtained by calling sqlite3_snapshot_get_APIName since the last time the wal file was deleted.
In other words, the soft heap limit is advisory only.
 These interfaces are used to retrieve runtime status information about the performance of SQLite, and optionally to reset various highwater marks.
The sqlite3_prepare_APIName interface is legacy and should be avoided.
The second is a copy of the database handle.
 The sqlite3_stmt_readonly_APIName interface returns true (non-zero) if and only if the prepared statement X makes no direct changes to the content of the database file.Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect.
 The sqlite3_config_APIName interface is used to make global configuration changes to SQLite in order to tune SQLite to the specific needs of the application.
Otherwise an error code is returned by sqlite3_open_APIName.
Prior to SQLite version 3.7.10, the Windows OS interface layer called the system malloc_APIName and free_APIName directly when converting filenames between the UTF-8 encoding used by SQLite and whatever filename encoding is used by the particular Windows installation.
A few opcodes for sqlite3_file_control_APIName are handled directly by the SQLite core and never invoke the sqlite3_io_methods.xFileControl method.
Calling this routine with an argument less than or equal to zero turns off all busy handlers.
This will prevent SQL injections from giving attackers access to extension loading capabilities.
The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables, or for INSERT operations on rowid tables.
The same VFS can be registered multiple times without injury.
The sqlite3_cancel_auto_extension_APIName routine returns 1 if initialization routine X was successfully unregistered and it returns 0 if X was not on the list of initialization routines.
The sqlite3_malloc64_APIName routine works just like sqlite3_malloc_APIName except that sqlite3_malloc_APIParam_1 is an unsigned 64-bit integer instead of a signed 32-bit integer.
If a separate thread makes changes on the same database connection while sqlite3_changes_APIName is running then the value returned is unpredictable and not meaningful.
If the fourth parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName is negative, then the length of the string is the number of bytes up to the first zero terminator.
This error code is not remembered and will not be recalled by sqlite3_errcode_APIName or sqlite3_errmsg_APIName.
The sqlite3_errmsg_APIName or sqlite3_errmsg16_APIName routines can be used to obtain an English language description of the error following a failure of any of the sqlite3_open_APIName routines.
URI hexadecimal escape sequences (%HH) are supported within the path and query components of a URI.
The sqlite3_strglob_APIName interface returns zero if and only if string sqlite3_strglob_APIParam_2 matches the GLOB pattern P. The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite.
For "X LIKE P" without the ESCAPE clause, set the sqlite3_strlike_APIParam_3 parameter of sqlite3_strlike_APIName to 0.
The sqlite3_expanded_sql_APIName interface returns NULL if insufficient memory is available to hold the result, or if the result would exceed the the maximum string length determined by the SQLITE_LIMIT_LENGTH_API_constant.
The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection (the 1st parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.
See also: sqlite3_bind_APIName, sqlite3_bind_parameter_count_APIName, and sqlite3_bind_parameter_index_APIName.
It is recommended that when a database sqlite3_open_v2_APIParam_1 actually does begin with a ":" character you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as "./" to avoid ambiguity.
A statement is judged to be complete if it ends with a semicolon token and is not a prefix of a well-formed CREATE TRIGGER statement.
The values may be accessed using the column access functions.
The sqlite3_stmt_readonly_APIName interface returns true (non-zero) if and only if the prepared statement sqlite3_stmt_readonly_APIParam_1 makes no direct changes to the content of the database file.
The xDestroy callback is not called if the sqlite3_create_collation_v2_APIName function fails.
The use of the "vX" interfaces is recommended.
This must only be used within SQLITE_UPDATE_API_constant and SQLITE_DELETE_API_constant preupdate callbacks; if it is used by an SQLITE_INSERT_API_constant callback then the behavior is undefined.
Even though the function prototype shows that xEntryPoint_APIName takes no arguments and returns void, SQLite invokes xEntryPoint_APIName with three arguments and expects an integer result as if the signature of the entry point where as follows:
The interface is similar to sqlite3_config_APIName except that the changes apply to a single database connection (specified in sqlite3_db_config_APIParam_1).
A single database handle may have at most a single write-ahead log callback registered at one time.
If there is no metadata associated with the function argument, the sqlite3_get_auxdata_APIName interface returns a NULL pointer.
The value returned by sqlite3_str_value_APIName is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same sqlite3_str object.
For example, sqlite3_open_APIName calls sqlite3_initialize_APIName so the SQLite library will be automatically initialized when sqlite3_open_APIName is called if it has not be initialized already.
The 3rd argument to the sqlite3_exec_APIName callback is an array of pointers to strings obtained as if from sqlite3_column_text_APIName, one for each column.
The sqlite3_preupdate_old_APIName, sqlite3_preupdate_new_APIName, sqlite3_preupdate_count_APIName, and sqlite3_preupdate_depth_APIName interfaces provide additional information about a preupdate event.
 sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter.
After the application has finished with the result from sqlite3_get_table_APIName, it must pass the result table pointer to sqlite3_free_table_APIName in order to release the memory that was malloced.
In brief, sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database sqlite3_wal_checkpoint_APIParam_2 on database connection sqlite3_wal_checkpoint_APIParam_1 to be transferred into the database file and for the write-ahead log to be reset.
In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants, literals may be replaced by a parameter that matches one of following templates:
All other values are in their UTF-8 zero-terminated string representation as returned by sqlite3_column_text_APIName.
If any of the following statements are false when sqlite3_snapshot_get_APIName is called, SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_get_APIName.
This interface loads an SQLite extension library from the named file.
 The first parameter is a prepared statement.
If sqlite3_unlock_notify_APIName is called with a NULL pointer as its second argument, then any existing unlock-notify callback is canceled.
The sqlite3_initialize_APIName interface is threadsafe, but sqlite3_shutdown_APIName is not.
The sqlite3_keyword_check_APIName interface checks to see whether or not the L-byte UTF8 identifier that sqlite3_keyword_check_APIParam_1 points to is a keyword, returning non-zero if it is and zero if not.
sqlite3_release_memory_APIName returns the number of bytes actually freed, which might be more or less than the amount requested.
The sqlite3_db_cacheflush_APIName interface flushes caches for all schemas - "main", "temp", and any attached databases.
 This interface loads an SQLite extension library from the named file.The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2.
Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module.
Therefore, SQLite returns SQLITE_BUSY_API_constant for the first process, hoping that this will induce the first process to release its read lock and allow the second process to proceed.
At most one preupdate hook may be registered at a time on a single database connection; each call to sqlite3_preupdate_hook_APIName overrides the previous setting.
See also: sqlite3_strglob_APIName.
If this statement is a SELECT statement and the Nth column of sqlite3_column_decltype_APIParam_0 set of that SELECT is a table column (not an expression or subquery) then the declared type of the table column is returned by sqlite3_column_decltype_APIName.
So the new function is not good for anything by itself.
Regardless of whether or not the limit was changed, the sqlite3_limit_APIName interface returns the prior value of the limit.
If sqlite3_unlock_notify_APIName is called when the blocked connection already has a registered unlock-notify callback, then the new callback replaces the old.
If an element of a result row is NULL then the corresponding string pointer for the sqlite3_exec_APIName callback is a NULL pointer.
If the sqlite3_drop_modules_APIParam_2 parameter is NULL, then all virtual table modules are removed.
The second argument to the busy handler callback is the number of times that the busy handler has been invoked previously for the same locking event.
The wal file is deleted when the database is changed back to rollback mode or when the number of database clients drops to zero.
If the application then re-attempts the "DROP TABLE" or "DROP INDEX" query, an infinite loop might be the result.
The application does not need to worry about freeing the result.
 The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy.
The internal databases can be given the large, default limits.
The sqlite3_create_collation_v2_APIName works like sqlite3_create_collation_APIName with the addition that the xDestroy callback is invoked on pArg when the collating function is deleted.
Thus the result table has 8 entries.
sqlite3_prepare_v3_APIName has an extra "prepFlags" option that is used for special purposes.
The new row must meet the same criteria as for sqlite3_blob_open_APIName - it must exist and there must be either a blob or text value stored in the nominated column.
Loops are numbered starting from zero.
The caller is responsible for freeing sqlite3_serialize_APIParam_0 to avoid a memory leak.
In such cases, the mutex must be exited an equal number of times before another thread can enter.
See also: SQL functions sqlite_compileoption_used_APIName and sqlite_compileoption_get_APIName and the compile_options pragma.
The collating function must return an integer that is negative, zero, or positive if the first string is less than, equal to, or greater than the second, respectively.
Passing a NULL pointer to sqlite3_free_APIName is harmless.
An attempt to read from an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant.
SQLite uses the string pointed to by the 2nd parameter of sqlite3_result_error_APIName or sqlite3_result_error16_APIName as the text of an error message.
If the argument to sqlite3_mutex_held_APIName is a NULL pointer then the routine should return 1.
When the same named SQL parameter is used more than once, second and subsequent occurrences have the same index as the first occurrence.
The sqlite3_exec_APIName interface runs zero or more UTF-8 encoded, semicolon-separate SQL statements passed into its 2nd argument, in the context of the database connection passed in as its 1st argument.
SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_open_APIName if either of these conditions is violated, or if schema sqlite3_snapshot_open_APIParam_2 does not exist, or if the snapshot object is invalid.
The fourth parameter may also optionally include the SQLITE_DIRECTONLY_API_constant flag, which if present prevents the function from being invoked from within VIEWs or TRIGGERs.
If min_APIParam_2 is the size of the prior allocation, then min_APIName bytes of the prior allocation are copied into the beginning of buffer returned by sqlite3_realloc_APIName and the prior allocation is freed.
The strings returned by sqlite3_sql_APIName and sqlite3_normalized_sql_APIName are managed by SQLite and are automatically freed when the prepared statement is finalized.
 sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table.
The destructor will also be invoked if the call to sqlite3_create_module_v2_APIName fails.
If SQLite has not been initialized using sqlite3_initialize_APIName prior to invoking sqlite3_complete16_APIName then sqlite3_initialize_APIName is invoked automatically by sqlite3_complete16_APIName.
The first parameter must be a copy of the SQL function context that is sqlite3_aggregate_context_APIParam_1 to the xStep or xFinal callback routine that implements the aggregate function.
sqlite3_vtab_collation_APIName returns a pointer to a buffer containing the name of the collation sequence for the corresponding constraint.
For clarity: the values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName are the number of bytes in the string, not the number of characters.
Strings returned by sqlite3_column_text_APIName and sqlite3_column_text16_APIName, even empty strings, are always zero-terminated.
The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined.
 The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.  The subtype information can be used to pass a limited amount of context from one SQL function to another.
The sqlite3_result_error_nomem_APIName interface causes SQLite to throw an error indicating that a memory allocation failed.
The sqlite3_total_changes_APIName interface only reports the number of rows that changed due to SQL statement run against database connection D.  Any changes by other database connections are ignored.
 The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string.
An appropriate implementation is selected automatically at compile-time.
In the case of an update, this is the rowid after the update takes place.
The sqlite3_mutex_alloc_APIName routine returns NULL if it is unable to allocate the requested mutex.
The first parameter to the authorizer callback is a copy of the third parameter to the sqlite3_set_authorizer_APIName interface.
The current value of the requested parameter is written into *pCur and the highest instantaneous value is written into *pHiwtr.
The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library.
The return value is OS-dependent.
Setting parameter X to NULL disables the progress handler.
Hence, the current size of the soft heap limit can be determined by invoking sqlite3_soft_heap_limit64_APIName with a negative argument.
 The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the S database on database connection D. If P is not a NULL pointer, then the size of the database in bytes is written into *P.For an ordinary on-disk database file, the serialization is just a copy of the disk file.
The older interfaces (sqlite3_prepare_APIName and sqlite3_prepare16_APIName) are retained for backwards compatibility, but their use is discouraged.
The T argument is one of the SQLITE_TRACE_API_constant constants to indicate why the callback was invoked.
Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely.
To execute an SQL statement, it must first be compiled into a byte-code program using one of these routines.
If the D parameter in sqlite3_str_new_APIName is not NULL, then the maximum length of the string contained in the sqlite3_str object will be the value set for sqlite3_limit_APIName instead of SQLITE_MAX_LENGTH.
Applications might use this to substitute a return value that is less expensive to compute and that the corresponding xUpdate method understands as a "no-change" value.
The index for named parameters can be looked up using the sqlite3_bind_parameter_index_APIName API if desired.
Type is associated with individual values, not with the containers used to hold those values.
(See SQLITE_VTAB_CONSTRAINT_SUPPORT_API_constant.)
To avoid this scenario, the sqlite3_unlock_notify_APIName performs deadlock detection.
If another error code - for example SQLITE_PROTOCOL_API_constant or an SQLITE_IOERR_API_constant error code - is returned by sqlite3_snapshot_open_APIName, then the final state of the read transaction is undefined.
The sqlite3_data_count_APIName routine returns 0 if the previous call to sqlite3_step_APIName returned SQLITE_DONE_API_constant.
 sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface.If this interface is invoked outside the context of an xConnect or xCreate virtual table method then the behavior is undefined.At present, there is only one option that may be configured using sqlite3_vtab_config_APIName.
Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument.
If the previous call to this routine had an sqlite3_randomness_APIParam_1 of 1 or more and a non-NULL sqlite3_randomness_APIParam_2 then the pseudo-randomness is generated internally and without recourse to the sqlite3_vfs xRandomness method.
These routine might also return NULL if a memory allocation error occurs.
Hence, the application should ensure that the correct authorizer callback remains in place during the sqlite3_step_APIName.
Only an effective call to sqlite3_shutdown_APIName does any deinitialization.
A negative value for the zeroblob results in a zero-length BLOB.
The return value of the xFileControl method becomes the return value of this routine.
The sqlite3_stmt_busy_APIName interface returns false if sqlite3_stmt_busy_APIParam_1 is a NULL pointer.
Invoking any of these routines from outside of a preupdate callback or with a database connection pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior.
Zeroblobs are intended to serve as placeholders for BLOBs whose content is later written using incremental BLOB I/O routines.
If the result is a numeric value then sqlite3_column_bytes16_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-16 string and returns the number of bytes in that string.
After an application receives an SQLITE_LOCKED_API_constant error, it may call the sqlite3_unlock_notify_APIName method with the blocked connection handle as the first argument to register for a callback that will be invoked when the blocking connections current transaction is concluded.
sqlite3_last_insert_rowid_APIName is accessible to SQL statements via the last_insert_rowid_APIName SQL function.
An aggregate SQL function requires an implementation of xStep and xFinal and NULL pointer must be passed for xFunc.
 The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state, ready to be re-executed.
Advanced applications can use this interface to compare the predicted and the measured performance and issue warnings and/or rerun ANALYZE if discrepancies are found.
This API makes sure a global version of a function with a particular name and number of parameters exists.
Indirect deadlock is also detected, so the system is also considered to be deadlocked if connection B has registered for an unlock-notify callback on the conclusion of connection C's transaction, where connection C is waiting on connection A.
The first argument must be the sqlite3_index_info object that is the first parameter to the xBestIndex_APIName method.
This interface used to be the only way to cause a checkpoint to occur.
Return the number of columns in the result set returned by the prepared statement.
If the value of sqlite3_uri_int64_APIParam_2 is something other than an integer, then zero is returned by sqlite3_uri_int64_APIName.
Any SQL statement variables that had values bound to them using the sqlite3_bind_*_APIName API retain their values.
If the required lock still cannot be obtained, then the database is skipped and an attempt made to flush any dirty pages belonging to the next (if any) database.
If the third parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_blob_APIName is a NULL pointer then the fourth parameter is ignored and the end result is the same as sqlite3_bind_null_APIName.
To make an existing VFS into the default VFS, register it again with the sqlite3_vfs_register_APIParam_2 flag set.
If a separate thread makes changes on the same database connection while sqlite3_total_changes_APIName is running then the value returned is unpredictable and not meaningful.
If an error occurs while evaluating the SQL statements passed into sqlite3_exec_APIName, then execution of the current statement stops and subsequent statements are skipped.
Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module.
 The sqlite3_deserialize_APIName interface causes the database connection D to disconnect from database S and then reopen S as an in-memory database based on the serialization contained in P.  The serialized database P is N bytes in size.
When all collating functions having the same name are deleted, that collation is no longer usable.
ppStmt may not be NULL.
The sqlite3_load_extension_APIName interface returns SQLITE_OK_API_constant on success and SQLITE_ERROR_API_constant if something goes wrong.
The memory pointed to by the character pointers returned for the declaration type and collation sequence is valid until the next call to any SQLite API function.
This API is only available if the library is built with pre-processor symbol SQLITE_ENABLE_STMT_SCANSTATUS defined.
Only changes made to real tables are counted.
The sqlite3_snapshot_open_APIName interface returns SQLITE_OK_API_constant on success or an appropriate error code if it fails.
The SQLITE_ prefix is omitted from any strings returned by sqlite3_compileoption_get_APIName.
 The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time.
Refer to the SQL parameter documentation for additional information.
If sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName are called from a different thread while any of these routines are pending, then the results are undefined.
The filename returned by sqlite3_db_filename_APIName is the output of the xFullPathname method of the VFS.
If sqlite3_prepare_APIParam_5 is not NULL then *pzTail is made to point to the first byte past the end of the first SQL statement in sqlite3_prepare_APIParam_2.
This interface can be used in combination sqlite3_next_stmt_APIName to locate all prepared statements associated with a database connection that are in need of being reset.
The string returned by sqlite3_expanded_sql_APIName, on the other hand, is obtained from sqlite3_malloc_APIName and must be free by the application by passing it to sqlite3_free_APIName.
Statistics might not be available for all loops in all statements.
External mutex implementations are only required to provide these routines if SQLITE_DEBUG is defined and if NDEBUG is not defined.
The only way to find out whether SQLite automatically rolled back the transaction after an error is to use sqlite3_get_autocommit_APIName.
 Each entry in most SQLite tables (except for WITHOUT ROWID tables) has a unique 64-bit signed integer key called the "rowid".
The inconsistency is unfortunate but cannot be changed without breaking backwards compatibility.
 These routines open an SQLite database file as specified by the filename argument.
If N or sqlite3_blob_write_APIParam_4 are less than zero SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written.
If the unprotected sqlite3_value object returned by sqlite3_column_value_APIName is used in any other way, including calls to routines like sqlite3_value_int_APIName, sqlite3_value_text_APIName, or sqlite3_value_bytes_APIName, the behavior is not threadsafe.
The sqlite3_value_text16_APIName interface extracts a UTF-16 string in the native byte-order of the host machine.
The sqlite3_libversion_number_APIName function returns an integer equal to SQLITE_VERSION_API_constant_NUMBER.
The sqlite3_value_frombind_APIName interface returns non-zero if the value sqlite3_value_frombind_APIParam_1 originated from one of the sqlite3_bind_APIName interfaces.
At present, there is only one option that may be configured using sqlite3_vtab_config_APIName.
Hence, to find the current value of a limit without changing it, simply invoke this interface with sqlite3_limit_APIParam_3 set to -1.
The "iScanStatusOp" must be one of the scanstatus options or the behavior of this interface is undefined.
For example, "VACUUM" is not a keyword if SQLite is compiled with the -DSQLITE_OMIT_VACUUM option.
This API is only available if the library was compiled with the SQLITE_ENABLE_UNLOCK_NOTIFY C-preprocessor symbol defined.
 Contrary to the intuition of many, sqlite3_reset_APIName does not reset the bindings on a prepared statement.
Any attempt to use these routines on an unprotected sqlite3_value is not threadsafe.
For the purposes of this API, a transaction is said to have been rolled back if an explicit "ROLLBACK" statement is executed, or an error or constraint causes an implicit rollback to occur.
The update hook implementation must not do anything that will modify the database connection that invoked the update hook.
This private database will be automatically deleted as soon as the database connection is closed.
The following implementations are available in the SQLite core:
Testing suggests that because the page cache is the predominate memory user in SQLite, most applications will achieve adequate soft heap limit enforcement without the use of SQLITE_ENABLE_MEMORY_MANAGEMENT.
Among other things, sqlite3_initialize_APIName will invoke sqlite3_os_init_APIName.
The value of the sqlite3_get_auxdata_APIParam_2 parameter to these interfaces should be non-negative.
This interface enables or disables both the C-API sqlite3_load_extension_APIName and the SQL function load_extension_APIName.
If the sqlite3_stmt_status_APIParam_3 is true, then the counter is reset to zero after this interface call returns.
The sqlite3_strlike_APIName interface returns zero if and only if string X matches the LIKE pattern P with escape character E. The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE P ESCAPE E" operator in the SQL dialect understood by SQLite.
If sqlite3_unlock_notify_APIName is called in a multi-threaded application, there is a chance that the blocking connection will have already concluded its transaction by the time sqlite3_unlock_notify_APIName is invoked.
sqlite3_blob_write_APIName may only modify the contents of the BLOB; it is not possible to increase the size of a BLOB using this API.
The sqlite3_get_table_APIName interface is implemented as a wrapper around sqlite3_exec_APIName.
Applications must always be prepared to encounter a NULL pointer in any of the third through the sixth parameters of the authorization callback.
But after version 3.6.23.1 (2010-03-26, sqlite3_step_APIName began calling sqlite3_reset_APIName automatically in this circumstance rather than returning SQLITE_MISUSE_API_constant.
Because of the way the sqlite3_malloc_APIName happens within sqlite3_get_table_APIName, the calling function must not try to call sqlite3_free_APIName directly.
However, the error string might be overwritten or deallocated by subsequent calls to other SQLite interface functions.
The first parameter "n" is the total size of the buffer, including space for the zero terminator.
The sqlite3_reset_APIName interface resets the prepared statement S back to the beginning of its program.
The sqlite3_open_APIParam_1 argument is interpreted as UTF-8 for sqlite3_open_APIName and sqlite3_open_v2_APIName and as UTF-16 in the native byte order for sqlite3_open16_APIName.
As well as being set automatically as rows are inserted into database tables, the value returned by sqlite3_last_insert_rowid_APIName may be set explicitly by sqlite3_set_last_insert_rowid_APIName
If the path begins with a '/' character, then it is interpreted as an absolute path.
Note to Windows Runtime users:  The temporary directory must be set prior to calling sqlite3_open_APIName or sqlite3_open_v2_APIName.
If the 4th parameter to the sqlite3_result_text* interfaces or sqlite3_result_blob is the special constant SQLITE_TRANSIENT_API_constant then SQLite makes a copy of the result into space obtained from sqlite3_malloc_APIName before it returns.
 The sqlite3_set_last_insert_rowid(D, R) method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database.
The calling function should free this memory by calling sqlite3_free_APIName.
If that does not work, it constructs a name "sqlite3_X_init" where the X is consists of the lower-case equivalent of all ASCII alphabetic characters in the filename from the last "/" to the first following "."
The sqlite3_version[] string constant contains the text of SQLITE_VERSION_API_constant macro.
The sqlite3_errmsg_APIName and sqlite3_errmsg16_APIName return English-language text that describes the error, as either UTF-8 or UTF-16 respectively.
If N is less than one then the progress handler is disabled.
Only a single progress handler may be defined at one time per database connection; setting a new progress handler cancels the old one.
Return the index of an SQL parameter given its name.
A call to sqlite3_shutdown_APIName is an "effective" call if it is the first call to sqlite3_shutdown_APIName since the last sqlite3_initialize_APIName.
 These interfaces provide the same information as the SQLITE_VERSION, SQLITE_VERSION_NUMBER, and SQLITE_SOURCE_ID C preprocessor macros but are associated with the library instead of the header file.
Checkpoints initiated by this mechanism are PASSIVE.
The return value of sqlite3_column_type_APIName can be used to decide which of the first six interface should be used to extract the column value.
If it is called with the database handle in autocommit mode but fails for some other reason, whether or not a read transaction is opened on schema S is undefined.
If sqlite3_uri_boolean_APIParam_2 is not a query parameter on sqlite3_uri_boolean_APIParam_1 or if the value of sqlite3_uri_boolean_APIParam_2 is does not match any of the above, then sqlite3_uri_boolean_APIName returns (B!=0).
The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite.
If the SQL statement being executed returns any data, then SQLITE_ROW_API_constant is returned each time a new row of data is ready for processing by the caller.
The sqlite3_strlike_APIName function matches Unicode characters, though only ASCII characters are case folded.
This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized.
The sqlite3_str_append_APIName method appends exactly sqlite3_str_append_APIParam_3 bytes from string S onto the end of the sqlite3_str object X.  sqlite3_str_append_APIParam_3 must be non-negative.
A sqlite3_free_table_APIParam_1 table should be deallocated using sqlite3_free_table_APIName.
If database sqlite3_wal_checkpoint_v2_APIParam_2 is the name of an attached database that is not in WAL mode, SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName and both *pnLog and *pnCkpt set to -1.
Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect.
SQLite will invoke sqlite3_free_APIName on *pzErrMsg after xEntryPoint_APIName returns.
An authorizer is used when preparing SQL statements from an untrusted source, to ensure that the SQL statements do not try to access data they are not allowed to see, or that they do not try to execute malicious statements that damage the database.
sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table.
See also: sqlite3_drop_modules_APIName
sqlite3_collation_needed not exist in API_info
To append a zero-terminated string in its entirety, use the sqlite3_str_appendall_APIName method instead.
Call the sqlite3_enable_load_extension_APIName routine with onoff==1 to turn extension loading on and call it with onoff==0 to turn it back off again.
In the legacy interface, the return value will be either SQLITE_BUSY_API_constant, SQLITE_DONE_API_constant, SQLITE_ROW_API_constant, SQLITE_ERROR_API_constant, or SQLITE_MISUSE_API_constant.
The sixth argument to sqlite3_bind_text64_APIName must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE to specify the encoding of the text in the third parameter.
 The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema S in database connection D.  On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into *P and returns SQLITE_OK.
So just because a column is declared to contain a particular type does not mean that the data stored in that column is of the declared type.
This means that an attempt is made to convert the value to an integer or floating point.
The application should only invoke sqlite3_initialize_APIName and sqlite3_shutdown_APIName.
The sqlite3_stmt_readonly_APIName interface returns true for BEGIN since BEGIN merely sets internal flags, but the BEGIN IMMEDIATE and BEGIN EXCLUSIVE commands do touch the database and so sqlite3_stmt_readonly_APIName returns false for those commands.
In every case the first argument is a pointer to the prepared statement that is being evaluated (the sqlite3_stmt* that was returned from sqlite3_prepare_v2_APIName or one of its variants) and the second argument is the index of the column for which information should be returned.
The sqlite3_initialize_APIName routine is called internally by many other SQLite interfaces so that an application usually does not need to invoke sqlite3_initialize_APIName directly.
The first argument to the callback is a copy of the third argument to sqlite3_update_hook_APIName.
Extension loading must be enabled using sqlite3_enable_load_extension_APIName or sqlite3_db_config_APIName prior to calling this API, otherwise an error will be returned.
Shared cache is disabled by default.
In the "v2" interface, the more specific error code is returned directly by sqlite3_step_APIName.
The sqlite3_aggregate_context_APIName routine returns a NULL pointer when first called if sqlite3_aggregate_context_APIParam_2 is less than or equal to zero or if a memory allocate error occurs.
A call to sqlite3_snapshot_open_APIName will fail to open if the specified snapshot has been overwritten by a checkpoint.
The memory high-water mark is reset to the current value of sqlite3_memory_used_APIName if and only if the parameter to sqlite3_memory_highwater_APIName is true.
For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated.
If the same value is passed to multiple invocations of the same SQL function during query execution, under some circumstances the associated metadata may be preserved.
If a given call to sqlite3_unlock_notify_APIName would put the system in a deadlocked state, then SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName and no unlock-notify callback is registered.
See the URI filename documentation for additional information.
When a configuration option is set, sqlite3_config_APIName returns SQLITE_OK_API_constant.
Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using sqlite3_set_last_insert_rowid_APIName before returning control to the user.
Callback implementations should return zero to ensure future compatibility.
Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close_APIName when it is no longer required.
But then the newer and more powerful sqlite3_wal_checkpoint_v2_APIName interface was added.
If an error code is returned by sqlite3_wal_hook_APIName, that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error, though the commit will have still occurred.
 These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing.
In those routines that have a fourth argument, its value is the number of bytes in the parameter.
This interface is only available if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option.
Within the xFinal callback, it is customary to set N=0 in calls to sqlite3_aggregate_context_APIName so that no pointless memory allocations occur.
While there is nothing to prevent an application from calling sqlite3_log_APIName, doing so is considered bad form.
The sixth, seventh and eighth parameters passed to the three "sqlite3_create_function*" functions, xFunc, xStep and xFinal, are pointers to C-language functions that implement the SQL function or aggregate.
If the result is a UTF-8 string, then sqlite3_column_bytes16_APIName converts the string to UTF-16 and then returns the number of bytes.
The sqlite3_preupdate_count_APIName interface returns the number of columns in the row that is being inserted, updated, or deleted.
The memory space used to hold strings and BLOBs is freed automatically.
Note that this routine returns zero on a match and non-zero if the strings do not match, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName.
The sqlite3_keyword_count_APIName interface returns the number of distinct keywords understood by SQLite.
These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing.
This causes the sqlite3_step_APIName interface to behave differently in three ways:
The sqlite3_uri_boolean_APIName routines returns false (0) if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "no", "false", or "off" in any case or if the value begins with a numeric zero.
The third argument (eTextRep) must be one of the constants:
Calling sqlite3_blob_bytes_APIName on an aborted blob handle always returns zero.
It is an error if there is already a read transaction open on the database, or if the database is not a WAL mode database.
The second argument to sqlite3_db_config(D,V,...)  is the configuration verb - an integer code that indicates what aspect of the database connection is being configured.
If the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in F, then SQLite will invoke sqlite3_free_APIName on the serialization buffer when the database connection closes.
On success, sqlite3_blob_read_APIName returns SQLITE_OK_API_constant.
Use of this interface is not recommended.
The idea here is that xEntryPoint_APIName is the entry point for a statically linked SQLite extension that is to be automatically loaded into all new database connections.
Any new SQL statements that are started after the sqlite3_interrupt_APIName call and before the running statements reaches zero are interrupted as if they had been running prior to the sqlite3_interrupt_APIName call.
 The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database X of database connection D in mode M.  Status information is written back into integers pointed to by L and C. The M parameter must be a valid checkpoint mode:If sqlite3_wal_checkpoint_v2_APIParam_4 is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in WAL mode.
Hence, the sqlite3_column_value_APIName interface is normally only useful within the implementation of application-defined SQL functions or virtual tables, not within top-level application code.
SQLITE_ERROR_API_constant means that a run-time error (such as a constraint violation) has occurred.
The first argument is an integer code for the specific parameter to measure.
In the templates above, NNN represents an integer literal, and VVV represents an alphanumeric identifier.
The length of the name is limited to 255 bytes in a UTF-8 representation, exclusive of the zero-terminator.
A call to this routine stores sqlite3_randomness_APIParam_1 bytes of randomness into buffer sqlite3_randomness_APIParam_2. The sqlite3_randomness_APIParam_2 parameter can be a NULL pointer.
The same SQL function may be registered multiple times using different preferred text encodings, with different implementations for each encoding.
sqlite3_bind_text not exist in API_info
If an sqlite3 object is destroyed while a transaction is open, the transaction is automatically rolled back.
Before the path or query components of a URI sqlite3_open16_APIParam_1 are interpreted, they are encoded using UTF-8 and all hexadecimal escape sequences replaced by a single byte containing the corresponding octet.
The other allowed parameters to sqlite3_mutex_alloc_APIName (anything other than SQLITE_MUTEX_FAST_API_constant and SQLITE_MUTEX_RECURSIVE_API_constant) each return a pointer to a static preexisting mutex.
Even reading previously freed memory might result in a segmentation fault or other severe error.
 The sqlite3_finalize_APIName function is called to delete a prepared statement.
A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always "in use").
 In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants, literals may be replaced by a parameter that matches one of following templates:In the templates above, NNN represents an integer literal, and VVV represents an alphanumeric identifier.
If sqlite3_deserialize_APIName fails for any reason and if the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in argument F, then sqlite3_free_APIName is invoked on argument sqlite3_deserialize_APIParam_3 prior to returning.
 The sqlite3_get_autocommit_APIName interface returns non-zero or zero if the given database connection is or is not in autocommit mode, respectively.
Conversions between UTF-16be and UTF-16le are always done in place and do not invalidate a prior pointer, though of course the content of the buffer that the prior pointer references will have been modified.
If the busy callback is not NULL, then the callback might be invoked with two arguments.
SQLITE_NOMEM_API_constant is returned by sqlite3_bind_value_APIName if malloc_APIName fails.
In cases where there exist loops with no available statistics, sqlite3_stmt_scanstatus_APIName behaves as if the loop did not exist - it returns non-zero and leave the variable that sqlite3_stmt_scanstatus_APIParam_4 points to unchanged.
If an INSERT occurs within a trigger then this routine will return the rowid of the inserted row as long as the trigger is running.
This seems counter-intuitive since clearly the mutex cannot be held if it does not exist.
sqlite3_tracenot exist in API_info
Moving an existing BLOB handle to a new row is faster than closing the existing handle and opening a new one.
These interfaces are used to retrieve runtime status information about the performance of SQLite, and optionally to reset various highwater marks.
On those systems, shared cache mode should be enabled per-database connection via sqlite3_open_v2_APIName with SQLITE_OPEN_SHAREDCACHE_API_constant.
For example, if a prepared statement is created using the SQL text "SELECT $abc,:xyz" and if parameter $abc is bound to integer 2345 and parameter :xyz is unbound, then sqlite3_sql_APIName will return the original string, "SELECT $abc,:xyz" but sqlite3_expanded_sql_APIName will return "SELECT 2345,NULL".
Executing any other type of SQL statement does not modify the value returned by sqlite3_changes_APIName.
The sqlite3_exec_APIName interface is a convenience wrapper around sqlite3_prepare_v2_APIName, sqlite3_step_APIName, and sqlite3_finalize_APIName, that allows an application to run multiple statements of SQL without having to use a lot of C code.
Within the xUpdate method of a virtual table, the sqlite3_value_nochange_APIName interface returns true if and only if the column corresponding to sqlite3_value_nochange_APIParam_1 is unchanged by the UPDATE operation that the xUpdate method call was invoked to implement and if and the prior xColumn method call that was invoked to extracted the value for that column returned without setting a result (probably because it queried sqlite3_vtab_nochange_APIName and found that the column was unchanging).
A call to sqlite3_interrupt_APIName that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after the sqlite3_interrupt_APIName call returns.
Nine static mutexes are used by the current version of SQLite.
See also: sqlite3_data_count_APIName
The sqlite3_os_init_APIName routine does operating-system specific initialization of the SQLite library.
Future versions of SQLite may add additional static mutexes.
sqlite3_commit_hook not exist in API_info
 Return the index of an SQL parameter given its name.
 sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer.
If sqlite3_close_v2_APIName is called on a database connection that still has outstanding prepared statements, BLOB handles, and/or sqlite3_backup objects then it returns SQLITE_OK_API_constant and the deallocation of resources is deferred until all prepared statements, BLOB handles, and sqlite3_backup objects are also destroyed.
The first argument passed to an unlock-notify callback is a pointer to an array of void* pointers, and the second is the number of entries in the array.
The authorizer is disabled by default.
sqlite3_bind_parameter_name_APIParam_0 is always in UTF-8 encoding even if the named parameter was originally specified as UTF-16 in sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.
Note that the name length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.
These routines are work-alikes of the "printf_APIName" family of functions from the standard C library.
The sqlite3_get_table_APIName routine does not have access to any internal data structures of SQLite.
The UTF-16 interfaces are provided as a convenience.
sqlite3_busy_handlernot exist in API_info
sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter.
See also: sqlite3_blob_write_APIName.
If it is used by the second or subsequent such statement within a trigger program, the value returned reflects the number of rows modified by the previous INSERT, UPDATE or DELETE statement within the same trigger.
The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy.
In that case, sqlite3_value_nochange_APIName will return true for the same column in the xUpdate method.
If either snapshot handle was obtained before the wal file was last deleted, the value returned by sqlite3_snapshot_cmp_APIName is undefined.
These routines provide a means to determine the database, table, and table column that is the origin of a particular result column in SELECT statement.
The second parameter is the name of the SQL function to be created or redefined.
Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of "modify" in this paragraph.
When the serialized threading mode is in use, it might be the case that a second error occurs on a separate thread in between the time of the first error and the call to these interfaces.
The usual case is that sqlite3_serialize_APIName copies the serialization of the database into memory obtained from sqlite3_malloc64_APIName and returns a pointer to that memory.
An example of where this might be useful is in a regular-expression matching function.
For example, if an application defines a function "eval_APIName" that calls sqlite3_exec_APIName, then the following SQL statement would change the database file through side-effects:
sqlite3_rollback_hook not exist in API_info
The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement sqlite3_normalized_sql_APIParam_1 if sqlite3_normalized_sql_APIParam_1 was created by sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.
We admit that this is a goofy design.
In other words, you should call sqlite3_column_text_APIName, sqlite3_column_blob_APIName, or sqlite3_column_text16_APIName first to force the result into the desired format, then invoke sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName to find the size of the result.
SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName, sqlite3_free_APIName, and sqlite3_realloc_APIName routines, which form the built-in memory allocation subsystem.
A call to sqlite3_initialize_APIName is an "effective" call if it is the first time sqlite3_initialize_APIName is invoked during the lifetime of the process, or if it is the first time sqlite3_initialize_APIName is invoked following a call to sqlite3_shutdown_APIName.
SQLite and its built-in VFSes interpret the following query parameters:
All open database connections must be closed and all other SQLite resources must be deallocated prior to invoking sqlite3_shutdown_APIName.
If the callback returns SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if it returns a value that does not correspond to any valid SQLite error code, the results are undefined.
A SELECT statement will always have a positive sqlite3_column_count_APIName but depending on the WHERE clause constraints and the table content, it might return no rows.
It is a grievous error for the application to try to use a prepared statement after it has been finalized.
The sqlite3_release_memory_APIName routine is a no-op returning zero if SQLite is not compiled with SQLITE_ENABLE_MEMORY_MANAGEMENT.
The BLOB handle is closed unconditionally.
The sqlite3_extended_errcode_APIName interface is the same except that it always returns the extended result code even when extended result codes are disabled.
These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates.
For the static mutex types, the same mutex is returned by sqlite3_mutex_alloc_APIName on every call that has the same type number.
Invoking sqlite3_finalize_APIName on a NULL pointer is a harmless no-op.
The name of the database is "main" for the main database or "temp" for the TEMP database, or the name that appears after the AS keyword for databases that are added using the ATTACH SQL command.
The destructor is invoked when the function is deleted, either by being overloaded or when the database connection closes.
SQLite ensures that *pzErrMsg is NULL before calling the xEntryPoint_APIName.
Then as long as the pattern string remains the same, the compiled regular expression can be reused on multiple invocations of the same function.
By default, the error code is SQLITE_ERROR_API_constant.
If another thread is already within the mutex, sqlite3_mutex_enter_APIName will block and sqlite3_mutex_try_APIName will return SQLITE_BUSY_API_constant.
The sqlite3_value that P points to will be destroyed when the preupdate callback returns.
The application should set this parameter to SQLITE_UTF16_API_constantLE if the function implementation invokes sqlite3_value_text16le_APIName on an input, or SQLITE_UTF16_API_constantBE if the implementation invokes sqlite3_value_text16be_APIName on an input, or SQLITE_UTF16_API_constant if sqlite3_value_text16_APIName is used, or SQLITE_UTF8_API_constant otherwise.
If a separate thread performs a new INSERT on the same database connection while the sqlite3_last_insert_rowid_APIName function is running and thus changes the last insert rowid, then the value returned by sqlite3_last_insert_rowid_APIName is unpredictable and might not equal either the old or the new last insert rowid.
If the table has a column of type INTEGER PRIMARY KEY then that column is another alias for the rowid.
This in-memory database will vanish when the database connection is closed.
The busy-handler is also invoked while waiting for database readers as described above.
The sqlite3_db_status_APIName routine returns SQLITE_OK_API_constant on success and a non-zero error code on failure.
See also:  built-in printf_APIName, printf_APIName SQL function
The following interfaces are provided.
When the SQLITE_THREADSAFE C preprocessor macro is 1 or 2, mutexes are enabled and SQLite is threadsafe.
The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger.
If the final parameter to sqlite3_create_function_v2_APIName or sqlite3_create_window_function_APIName is not NULL, then it is destructor for the application data pointer.
 The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter.If the operating system does not support sleep requests with millisecond time resolution, then the time will be rounded up to the nearest second.
The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines write their results into memory obtained from sqlite3_malloc64_APIName.
If sqlite3_prepare_v2_APIParam_3 is positive, then it is the number of bytes read from sqlite3_prepare_v2_APIParam_2.
The sqlite3_data_count_APIName routine also returns 0 if sqlite3_step_APIParam_1 is a NULL pointer.
If logging is enabled, the sqlite3_log_APIParam_2 string and subsequent arguments are used with sqlite3_snprintf_APIName to generate the final output string.
CREATE TABLE t1(c1 VARIANT);
 The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite.
For example, on unix systems, after sqlite3_open_v2_APIName returns SQLITE_CANTOPEN_API_constant, this interface could be called to get back the underlying "errno" that caused the problem, such as ENOSPC, EAUTH, EISDIR, and so forth.
The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument.
 These routines are used to register a new virtual table module name.
This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1.
When built for other platforms (using the SQLITE_OS_OTHER=1 compile-time option) the application must supply a suitable implementation for sqlite3_os_init_APIName and sqlite3_os_end_APIName.
Sqlite3_aggregate_context_APIName is normally called once for each invocation of the xStep callback and then one last time when the xFinal callback is invoked.
Future versions of SQLite might provide greater resolution on the profiler callback.
See also:  sqlite3_update_hook_APIName
A function implementation with a non-negative nArg parameter is a better match than a function implementation with a negative nArg.
 This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName.
sqlite_master and sqlite_sequence).
A function where the preferred text encoding matches the database encoding is a better match than a function where the encoding is different.
Or, in other words, these routines are constructors for the prepared statement object.
Names are zero-terminated UTF-8 strings.
The name of the module is given by the second parameter.
The SQLite core only ever uses sqlite3_mutex_try_APIName as an optimization so this is acceptable behavior.
A zero is returned by sqlite3_bind_parameter_index_APIName if no matching parameter is found.
The sqlite3_busy_handler_APIName routine sets a callback function X that might be invoked with argument P whenever an attempt is made to access a database table associated with database connection D when another thread or process has the table locked.
SQLite is strongly typed, but the typing is dynamic not static.
The compiled version of the regular expression can be stored as metadata associated with the pattern string.
Applications that invoke sqlite3_create_collation_v2_APIName with a non-NULL xDestroy argument should check the return code and dispose of the application data pointer themselves rather than expecting SQLite to deal with it for them.
An authorizer could then be put in place while the user-entered SQL is being prepared that disallows everything except SELECT statements.
without a following integer have no name and are referred to as "nameless" or "anonymous parameters".
If SQLITE_OK_API_constant is returned by sqlite3_snapshot_open_APIName, then the read transaction is now open on database snapshot P.
The leftmost column is number 0.
If sqlite3_stmt_scanstatus_APIParam_2 is out of range - less than zero or greater than or equal to the total number of loops used to implement the statement - a non-zero value is returned by sqlite3_stmt_scanstatus_APIName and the variable that sqlite3_stmt_scanstatus_APIParam_4 points to is unchanged.
If any other error occurs while processing an attached database, processing is abandoned and the error code is returned by sqlite3_wal_checkpoint_v2_APIName to the caller immediately.
Any callback set by a previous call to sqlite3_rollback_hook_APIName for the same database connection is overridden.
This gives the application an opportunity to prioritize any actions related to the set of unblocked database connections.
 Implementations of aggregate SQL functions use this routine to allocate memory for storing their state.The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates N of memory, zeroes out that memory, and returns a pointer to the new memory.
Assuming that after registering for an unlock-notify callback a database waits for the callback to be issued before taking any further action (a reasonable assumption), then using this API may cause the application to deadlock.
SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName in this case.
If the fifth argument is the special value SQLITE_STATIC_API_constant, then SQLite assumes that the information is in static, unmanaged space and does not need to be freed.
New run-time limit categories may be added in future releases.
The sqlite3_snapshot_free_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.
Other kinds of conversion are done in place when it is possible, but sometimes they are not possible and in those cases prior pointers are invalidated.
 If the most recent sqlite3_* API call associated with database connection D failed, then the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call.
If sqlite3_uri_parameter_APIParam_1 is the database filename pointer passed into the xOpen_APIName method of a VFS implementation when the flags parameter to xOpen_APIName has one or more of the SQLITE_OPEN_URI_API_constant or SQLITE_OPEN_MAIN_DB_API_constant bits set and sqlite3_uri_parameter_APIParam_2 is the name of the query parameter, then sqlite3_uri_parameter_APIName returns the value of the sqlite3_uri_parameter_APIParam_2 parameter if it exists or a NULL pointer if sqlite3_uri_parameter_APIParam_2 does not appear as a query parameter on sqlite3_uri_parameter_APIParam_1.  If sqlite3_uri_parameter_APIParam_2 is a query parameter of sqlite3_uri_parameter_APIParam_1 has no explicit value, then sqlite3_uri_parameter_APIName returns a pointer to an empty string.
The parameter N is the approximate number of virtual machine instructions that are evaluated between successive invocations of the callback X.
If the sqlite3_blob_open_APIParam_6 parameter is zero, the BLOB is opened for read-only access.
The first argument to sqlite3_config_APIName is an integer configuration option that determines what property of SQLite is to be configured.
 The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema S of database connection D such that the read transaction refers to historical snapshot P, rather than the most recent change to the database.
Without the mutexes, it is not safe to use SQLite concurrently from more than one thread.
Future enhancements may make use of negative N values to define new kinds of function caching behavior.
The sqlite3_free_APIName routine is a no-op if is called with a NULL pointer.
The SQLite source code contains multiple implementations of these mutex routines.
If an SQLITE_BUSY_API_constant error is encountered when processing one or more of the attached WAL databases, the operation is still attempted on any remaining attached databases and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName at the end.
The sqlite3_vfs_find_APIName interface returns a pointer to a VFS given its name.
These counters can be used to monitor the performance characteristics of the prepared statements.
If the option is unknown or SQLite is unable to set the option then this routine returns a non-zero error code.
A hexadecimal escape sequence consists of a percent sign - "%" - followed by exactly two hexadecimal digits specifying an octet value.
If another busy handler was defined  (using sqlite3_busy_handler_APIName) prior to calling this routine, that other busy handler is cleared.
The destructor is called to dispose of the BLOB or string even if the call to the bind API fails, except the destructor is not called if sqlite3_bind_int_APIParam_3 is a NULL pointer or the fourth parameter is negative.
See also the sqlite3_commit_hook_APIName, sqlite3_rollback_hook_APIName, and sqlite3_preupdate_hook_APIName interfaces.
Unlike most of the SQLite API, sqlite3_test_control_APIName is not guaranteed to operate consistently from one release to the next.
Only the following subset of interfaces are subject to out-of-memory errors:
When the callback returns SQLITE_OK_API_constant, that means the operation requested is ok.
The sqlite3_log_APIParam_2 string must not be NULL.
If SQLite is compiled with SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but can be fully or partially disabled using a call to sqlite3_config_APIName with the verbs SQLITE_CONFIG_SINGLETHREAD_API_constant, SQLITE_CONFIG_MULTITHREAD_API_constant, or SQLITE_CONFIG_SERIALIZED_API_constant.
If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is negative then SQLite takes as the error message all text up through the first zero character.
On windows, the first component of an absolute path is a drive specification (e.g.
sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer.
The sqlite3_result_text64_APIName interface sets the return value of an application-defined function to be a text string in an encoding specified by the fifth (and last) parameter, which must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE.
The sqlite3_set_auxdata_APIName interface saves P as metadata for the N-th argument of the application-defined function.
Transaction control statements such as BEGIN, COMMIT, ROLLBACK, SAVEPOINT, and RELEASE cause sqlite3_stmt_readonly_APIName to return true, since the statements themselves do not actually modify the database but rather they control the timing of when other statements modify the database.
If sqlite3_value_nochange_APIName is invoked anywhere other than within an xUpdate method call for an UPDATE statement, then the return value is arbitrary and meaningless.
Otherwise, if sqlite3_blob_close_APIName is passed a valid open blob handle, the values returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions are set before returning.
The first parameter is a prepared statement.
The second argument is the database connection.
The sqlite3_libversion_APIName function returns a pointer to the to the sqlite3_version[] string constant.
In the current implementation, the update hook is not invoked when conflicting rows are deleted because of an ON CONFLICT REPLACE clause.
 The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P. SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" respectively.
Changes made as part of foreign key actions are included in the count, but those made as part of REPLACE constraint resolution are not.
(The "_LIMIT_" in the name is changed to "_MAX_".)
Executing any other type of SQL statement does not affect the value returned by sqlite3_total_changes_APIName.
See also: sqlite3_db_status_APIName
S must contain at least sqlite3_str_append_APIParam_3 non-zero bytes of content.
Even if this routine returns an error code, the handle is still closed.
If sqlite3_value object sqlite3_value_pointer_APIParam_1 was initialized using sqlite3_bind_pointer_APIName or sqlite3_result_pointer_APIName and if strcmp_APIParam_1 and sqlite3_value_pointer_APIParam_2 are strings that compare equal according to strcmp_APIName, then sqlite3_value_pointer_APIName will return the pointer P.  Otherwise, sqlite3_value_pointer_APIName returns a NULL.
Memory used to cache database pages to improve performance is an example of non-essential memory.
If any xEntryPoint_APIName returns an error, the sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName call that provoked the xEntryPoint_APIName will fail.
For the main database file, the database name is "main".
Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the commit or rollback hook in the first place.
The details of the behavior of the sqlite3_step_APIName interface depend on whether the statement was prepared using the newer "vX" interfaces sqlite3_prepare_v3_APIName, sqlite3_prepare_v2_APIName, sqlite3_prepare16_v3_APIName, sqlite3_prepare16_v2_APIName or the older legacy interfaces sqlite3_prepare_APIName and sqlite3_prepare16_APIName.
If the value N is out of range or if the N-th parameter is nameless, then NULL is returned by sqlite3_bind_parameter_name_APIName.
So as not to open security holes in older applications that are unprepared to deal with extension loading, and as a means of disabling extension loading while evaluating user-entered SQL, the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off.
The sqlite3_log_APIName interface is intended for use by extensions such as virtual tables, collating functions, and SQL functions.
Failure to reset the prepared statement using sqlite3_reset_APIName would result in an SQLITE_MISUSE_API_constant return from sqlite3_step_APIName.
URI filenames are parsed according to RFC 3986.
The database, table and column on which the blob handle is open remain the same.
It is not safe to pass a sqlite3_free_table_APIParam_1 table directly to sqlite3_free_APIName.
This interface allows the size of various constructs to be limited on a connection by connection basis.
The soft heap limit is not enforced in the current implementation if one or more of following conditions are true:
The fifth argument to the BLOB and string binding interfaces is a destructor used to dispose of the BLOB or string after SQLite has finished with it.
Collating functions are deleted when they are overridden by later calls to the collation creation functions or when the database connection is closed using sqlite3_close_APIName.
The third parameter to sqlite3_preupdate_hook_APIName is passed through as sqlite3_preupdate_depth_APIParam_1 to callbacks.
See also the load_extension_APIName SQL function.
 These are utility routines, useful to VFS implementations, that check to see if a database file was a URI that contained a specific query parameter, and if so obtains the value of that query parameter.If F is the database filename pointer passed into the xOpen_APIName method of a VFS implementation when the flags parameter to xOpen_APIName has one or more of the SQLITE_OPEN_URI or SQLITE_OPEN_MAIN_DB bits set and P is the name of the query parameter, then sqlite3_uri_parameter_APIName returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F.  If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter_APIName returns a pointer to an empty string.The sqlite3_uri_boolean_APIName routine assumes that P is a boolean parameter and returns true (1) or false (0) according to the value of P.  The sqlite3_uri_boolean_APIName routine returns true (1) if the value of query parameter P is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number.
An example application might be a web browser that has its own databases for storing history and separate databases controlled by JavaScript applications downloaded off the Internet.
The PRNG is also used for the build-in random_APIName and randomblob_APIName SQL functions.
If that initialization fails, then the return value from sqlite3_complete16_APIName will be non-zero regardless of whether or not the input SQL is complete.
The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P. The application must eventually free every sqlite3_snapshot object using this routine to avoid a memory leak.
The default encoding will be UTF-8 for databases created using sqlite3_open_APIName or sqlite3_open_v2_APIName.
Essentially:
The rollback hook is invoked on a rollback that results from a commit hook returning non-zero, just as it would be with any other rollback.
A call to sqlite3_snapshot_open_APIName will fail if the database connection sqlite3_snapshot_open_APIParam_1 does not know that the database file for schema sqlite3_snapshot_open_APIParam_2 is in WAL mode.
If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value.
Cautious programmers might include assert_APIName statements in their application to verify that values returned by these interfaces match the macros in the header, and thus ensure that the application is compiled with matching library and header files.
If sqlite3_wal_checkpoint_v2_APIParam_4 is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in WAL mode.
But it is not safe to call this routine with a database connection that is closed or might close before sqlite3_interrupt_APIName returns.
If either Z or sqlite3_keyword_name_APIParam_3 are NULL or invalid pointers then calls to sqlite3_keyword_name_APIName result in undefined behavior.
The fourth argument, pArg, is an application data pointer that is passed through as the first argument to the collating function callback.
At a minimum, literal values will be replaced with suitable placeholders.
sqlite3_create_collation not exist in API_info
When executing a "DROP TABLE" or "DROP INDEX" statement, SQLite checks if there are any currently executing SELECT statements that belong to the same connection.
The authorizer callback should return SQLITE_OK_API_constant to allow the action, SQLITE_IGNORE_API_constant to disallow the specific action but allow the SQL statement to continue to be compiled, or SQLITE_DENY_API_constant to cause the entire SQL statement to be rejected with an error.
If sqlite3_vfs_find_APIParam_1 is NULL then the default VFS is returned by sqlite3_vfs_find_APIName.
If SQLite determines that invoking the busy handler could result in a deadlock, it will go ahead and return SQLITE_BUSY_API_constant to the application instead of invoking the busy handler.
The final callback parameter is the rowid of the row.
This interface is only available if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option.
If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with "-DSQLITE_MUTEX_APPDEF=1"), then no mutex implementation is included with the library.
The sqlite3_str_reset_APIName method resets the string under construction inside sqlite3_str object sqlite3_str_reset_APIParam_1 back to zero bytes in length.
 The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2.
The sqlite3_compileoption_get_APIName function allows iterating over the list of options that were defined at compile time by returning the N-th compile time option string.
Otherwise an error code is returned by sqlite3_blob_open_APIName and, unless the error code is SQLITE_MISUSE_API_constant, *ppBlob is set to NULL.
The only exception is that if SQLite is unable to allocate memory to hold the sqlite3 object, a NULL will be written into *ppDb instead of a pointer to the sqlite3 object.
If the third parameter is less than -1 or greater than 127 then the behavior is undefined.
 The SQLite core uses these routines for thread synchronization.
If the URI contains an authority, then it must be either an empty string or the string "localhost".
 These interfaces return the current status of an sqlite3_str object.If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the sqlite3_str_errcode_APIName method will return an appropriate error code.
The sqlite3_malloc_APIName routine returns a pointer to a block of memory at least N bytes in length, where N is the parameter.
The database connection returned by sqlite3_db_handle is the same database connection that was sqlite3_db_handle_APIParam_1 to the sqlite3_prepare_v2_APIName call (or its variants) that was used to create the statement in the first place.
If the SQL statement does not currently point to a valid row, or if the column index is out of range, the result is undefined.
The incremental blob I/O routines can only read or overwriting existing blob content; they cannot change the size of a blob.
The 2nd argument to the sqlite3_exec_APIName callback function is the number of columns in the result.
 sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity.
Only the row can be changed.
Any callback set by a previous call to sqlite3_commit_hook_APIName for the same database connection is overridden.
 The sqlite3_table_column_metadata(X,D,T,C,....) routine returns information about column C of table T in database D on database connection X.
A virtual filesystem (VFS) is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system.
The sqlite3_initialize_APIName routine initializes the SQLite library.
A subsequent call to sqlite3_result_error_APIName or sqlite3_result_error16_APIName resets the error code to SQLITE_ERROR_API_constant.
If no error (SQLITE_BUSY_API_constant or otherwise) is encountered while processing the attached databases, SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName.
Otherwise, they return the name of the attached database, table, or column that query result column was extracted from.
If the callback returns non-zero, then another attempt is made to access the database and the cycle repeats.
The sqlite3_config_APIName interface is used to make global configuration changes to SQLite in order to tune SQLite to the specific needs of the application.
The default configuration is recommended for most applications and so this routine is usually not necessary.
See also:  sqlite3_collation_needed_APIName and sqlite3_collation_needed16_APIName.
sqlite3_set_authorizernot exist in API_info
Note that calling sqlite3_busy_timeout_APIName or evaluating PRAGMA busy_timeout=N will change the busy handler and thus clear any previously set busy handler.
The current value of the requested counter is returned by sqlite3_stmt_status_APIName.
sqlite3_result_pointernot exist in API_info
 Zero all sqlite3_stmt_scanstatus_APIName related event counters.This API is only available if the library is built with pre-processor symbol SQLITE_ENABLE_STMT_SCANSTATUS defined.
If the xEntryPoint routine encounters an error, it should make *pzErrMsg point to an appropriate error message (obtained from sqlite3_mprintf_APIName) and return an appropriate error code.
sqlite3_blob_close_APIName closes an open BLOB handle.
The SQLite core only provides implementations for these routines when it is compiled with the SQLITE_DEBUG flag.
The leftmost SQL parameter has an index of 1.
Otherwise, an  error code or an extended error code is returned by sqlite3_blob_write_APIName.
The sqlite3_shutdown_APIName routine deallocates any resources that were allocated by sqlite3_initialize_APIName.
For security reasons, the SQLITE_DIRECTONLY_API_constant flag is recommended for any application-defined SQL function that has side-effects.
Shared-cache locks are released when a database connection concludes its current transaction, either by committing it or rolling it back.
Other parameters record only the highwater mark and not the current value.
If the xColumn method calls sqlite3_vtab_nochange_APIName and finds that the column is not changed by the UPDATE statement, then the xColumn method can optionally return without setting a result, without calling any of the sqlite3_result_xxxxx_APIName interfaces.
The module name is registered on the database connection specified by sqlite3_create_module_APIParam_1.
 Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file.
See also the sqlite3_update_hook_APIName interface.
The sqlite3_str_new_APIName interface always returns a pointer to a valid sqlite3_str object, though in the event of an out-of-memory error sqlite3_str_new_APIParam_0 might be a special singleton that will silently reject new text, always return SQLITE_NOMEM_API_constant from sqlite3_str_errcode_APIName, always return 0 for sqlite3_str_length_APIName, and always return NULL from sqlite3_str_finish_APIName.
If sqlite3_close_v2_APIName is called with unfinalized prepared statements and/or unfinished sqlite3_backups, then the database connection becomes an unusable "zombie" which will automatically be deallocated when the last prepared statement is finalized or the last sqlite3_backup is finished.
The sqlite3_get_auxdata_APIName interface returns a pointer to the metadata associated by the sqlite3_set_auxdata_APIName function with the Nth argument value to the application-defined function.
The sqlite3_bind_* routines return SQLITE_OK_API_constant on success or an error code if anything goes wrong.
On those systems, sqlite3_mutex_try_APIName will always return SQLITE_BUSY_API_constant.
These routines must be called from the same thread in which the SQL function is running.
It exists solely for verifying the correct operation of the SQLite library.
For maximum portability, it is recommended that applications always invoke sqlite3_initialize_APIName directly prior to using any other SQLite interface.
Note that the number of keywords understood by SQLite can depend on compile-time options.
 A virtual filesystem (VFS) is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system.
The sqlite3_progress_handler_APIName interface causes the callback function X to be invoked periodically during long running calls to sqlite3_exec_APIName, sqlite3_step_APIName and sqlite3_get_table_APIName for database connection D.  An example use for this interface is to keep a GUI updated during a large query.
If the same thread tries to enter any mutex other than an SQLITE_MUTEX_RECURSIVE_API_constant more than once, the behavior is undefined.
The sqlite3_result_zeroblob_APIName and sqlite3_result_zeroblob64_APIName interfaces set the result of the application-defined function to be a BLOB containing all zero bytes and sqlite3_result_zeroblob64_APIParam_2 bytes in size.
The sqlite3_os_init_APIName interface is called automatically by sqlite3_initialize_APIName and sqlite3_os_end_APIName is called by sqlite3_shutdown_APIName.
The fragment component of a URI, if present, is ignored.
The argument to sqlite3_mutex_alloc_APIName must one of these integer constants:
If the argument sqlite3_soft_heap_limit64_APIParam_1 is negative then no change is made to the soft heap limit.
Consider a scenario where one process is holding a read lock that it is trying to promote to a reserved lock and a second process is holding a reserved lock that it is trying to promote to an exclusive lock.
The pointers returned are valid until a type conversion occurs as described above, or until sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName is called.
sqlite3_step_APIName should not be called again on the VM.
If an error occurs, that fact is recorded in the sqlite3_str object and can be recovered by a subsequent call to sqlite3_str_errcode_APIName.
If the input text contains no SQL (if the input is an empty string or a comment) then *ppStmt is set to NULL.
For each limit category SQLITE_LIMIT_NAME there is a hard upper bound set at compile-time by a C preprocessor macro called SQLITE_MAX_NAME.
Existing database connections continue use the sharing mode that was in effect at the time they were opened.
If there is no match, a NULL pointer is returned by sqlite3_vfs_find_APIName.
If the action code is SQLITE_DELETE_API_constant and the callback returns SQLITE_IGNORE_API_constant then the DELETE operation proceeds but the truncate optimization is disabled and all rows are deleted individually.
The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string.
The presence of a busy handler does not guarantee that it will be invoked when there is lock contention.
Changing the value of sqlite3_aggregate_context_APIParam_2 in subsequent call to sqlite3_aggregate_context_APIName within the same aggregate function instance will not resize the memory allocation.
"main", "temp", or an attached database) containing the specified table or NULL.
Enabling mutexes incurs a measurable performance penalty.
This is not considered a compatibility break because any application that ever receives an SQLITE_MISUSE_API_constant error is broken by definition.
Appropriate implementations for sqlite3_os_init_APIName and sqlite3_os_end_APIName are built into SQLite when it is compiled for Unix, Windows, or OS/2.
The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs.
The collating function must obey the following properties for all strings A, B, and C:
If sqlite3_blob_read_APIParam_3 or sqlite3_blob_read_APIParam_4 is less than zero, SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read.
The sqlite3_trace_APIName callback is invoked with a UTF-8 rendering of the SQL statement text as the statement first begins executing.
If an sqlite3_exec_APIName callback returns non-zero, the sqlite3_exec_APIName routine returns SQLITE_ABORT_API_constant without invoking the callback again and without running any subsequent SQL statements.
 The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs.
xValue and xInverse may either both be NULL, in which case a regular aggregate function is created, or must both be non-NULL, in which case the new function may be used as either an aggregate or aggregate window function.
Calls to sqlite3_db_config_APIName return SQLITE_OK_API_constant if and only if the call is considered successful.
definednot exist in API_info
This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName.
For an INSERT operation on a rowid table, or any operation on a WITHOUT ROWID table, the value of the sixth parameter is undefined.
These functions may be used by (non-aggregate) SQL functions to associate metadata with argument values.
If the xSleep_APIName method of the default VFS is not implemented correctly, or not implemented at all, then the behavior of sqlite3_sleep_APIName may deviate from the description in the previous paragraphs.
N bytes of data are copied from the buffer Z into the open BLOB, starting at offset sqlite3_blob_write_APIParam_4.
New VFSes can be registered and existing VFSes can be unregistered.
The third and fourth arguments to the callback contain pointers to the database and table name containing the affected row.
At various points during the compilation process, as logic is being created to perform various actions, the authorizer callback is invoked to see if those actions are allowed.
The SQLITE_OPEN_SHAREDCACHE_API_constant flag causes the database connection to be eligible to use shared cache mode, regardless of whether or not shared cache is enabled using sqlite3_enable_shared_cache_APIName.
But the reason the mutex does not exist is because the build is not using mutexes.
 The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection (the 1st parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.
As long as the input parameters are correct, these routines will only fail if an out-of-memory error occurs during a format conversion.
These are utility routines, useful to VFS implementations, that check to see if a database file was a URI that contained a specific query parameter, and if so obtains the value of that query parameter.
Future versions of SQLite may change the behavior of sqlite3_column_type_APIName following a type conversion.
If it is NULL, then all attached databases are searched for the table using the same algorithm used by the database engine to resolve unqualified table references.
If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite error code is returned by sqlite3_db_cacheflush_APIName to the caller immediately.
See also: sqlite3_bind_APIName, sqlite3_bind_parameter_name_APIName, and sqlite3_bind_parameter_index_APIName.
The sqlite3_errstr_APIName interface returns the English-language text that describes the result code, as UTF-8.
In other words, the initial ":" or "$" or "@" or "?"
This may happen if the program uses the changes_APIName SQL function, or if some other callback function invokes sqlite3_changes_APIName directly.
Goofy Interface Alert: In the legacy interface, the sqlite3_step_APIName API always returns a generic error code, SQLITE_ERROR_API_constant, following any error other than SQLITE_BUSY_API_constant and SQLITE_MISUSE_API_constant.
The sqlite3_stmt_isexplain_APIName interface returns 0 if sqlite3_stmt_isexplain_APIParam_1 is an ordinary statement or a NULL pointer.
A scalar SQL function requires an implementation of the xFunc callback only; NULL pointers must be passed as the xStep and xFinal parameters.
 The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library.
If no successful INSERTs into rowid tables have ever occurred on the database connection D, then sqlite3_last_insert_rowid_APIName returns zero.
A result table is an array of pointers to zero-terminated UTF-8 strings.
If any NUL characters occur at byte offsets less than the value of the fourth parameter then the resulting string value will contain embedded NULs.
 The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement P if P was created by sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.
An SQL operation that is interrupted will return SQLITE_INTERRUPT_API_constant.
Applications may change the content of the string returned by sqlite3_str_value_APIName as long as they do not write into any bytes outside the range of 0 to sqlite3_str_length_APIName and do not read or write any byte after any subsequent sqlite3_str method call.
If sqlite3_msize_APIParam_1 is a memory allocation previously obtained from sqlite3_malloc_APIName, sqlite3_malloc64_APIName, sqlite3_realloc_APIName, or sqlite3_realloc64_APIName, then sqlite3_msize_APIName returns the size of that memory allocation in bytes.
Note: This method is disabled on MacOS X 10.7 and iOS version 5.0 and will always return SQLITE_MISUSE_API_constant.
The sqlite3_status_APIName and sqlite3_status64_APIName routines return SQLITE_OK_API_constant on success and a non-zero error code on failure.
The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter (the 5th parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.
When a table is referenced by a SELECT but no column values are extracted from that table (for example in a query like "SELECT count(*) FROM tab") then the SQLITE_READ_API_constant authorizer callback is invoked once for that table with a column name that is an empty string.
If the statement is a COMMIT or occurs outside of an explicit transaction, then you can retry the statement.
This means that if the changes_APIName SQL function (or similar) is used by the first INSERT, UPDATE or DELETE statement within a trigger, it returns the value as set when the calling statement began executing.
The sqlite3_win32_set_directory_APIParam_2 parameter should be NULL to cause the previous value to be freed via sqlite3_free; a non-NULL value will be copied into memory obtained from sqlite3_malloc prior to being used.
If a memory allocation fails, then SQLITE_NOMEM_API_constant is returned by sqlite3_complete16_APIName.
Some systems (for example, Windows 95) do not support the operation implemented by sqlite3_mutex_try_APIName.
For an UPDATE or DELETE operation on a rowid table, the sixth parameter passed to the preupdate callback is the initial rowid of the row being modified or deleted.
The sqlite3_keyword_name_APIName interface finds the N-th keyword and makes *Z point to that keyword expressed as UTF8 and writes the number of bytes in the keyword into *L.  The string that *Z points to is not zero-terminated.
The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT, UPDATE, and DELETE operation on a database table.
The these routines may attempt to convert the datatype of the result.
 Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument.
into sqlite3_free_APIName.
If offset sqlite3_blob_read_APIParam_4 is less than sqlite3_blob_read_APIParam_3 bytes from the end of the BLOB, SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read.
For example, if the internal representation is FLOAT and a text result is requested, sqlite3_snprintf_APIName is used internally to perform the conversion automatically.
 This is a legacy interface that is preserved for backwards compatibility.
The fourth parameter to sqlite3_open_v2_APIName is the name of the sqlite3_vfs object that defines the operating system interface that the new database connection should use.
The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection sqlite3_drop_modules_APIParam_1 except those named on list sqlite3_drop_modules_APIParam_2. The sqlite3_drop_modules_APIParam_2 parameter must be either NULL or a pointer to an array of pointers to strings where the array is terminated by a single NULL pointer.
If the sqlite3_vtab_nochange_APIName routine is called within the xColumn method of a virtual table, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change.
Writes to the BLOB that occurred before the BLOB handle expired are not rolled back by the expiration of the handle, though of course those changes might have been overwritten by the statement that expired the BLOB handle or by other independent statements.
sqlite3_create_collationnot exist in API_info
The sqlite3_win32_set_directory interface returns SQLITE_OK_API_constant to indicate success, SQLITE_ERROR_API_constant if the sqlite3_win32_set_directory_APIParam_1 is unsupported, or SQLITE_NOMEM_API_constant if memory could not be allocated.
The sqlite3_value_dup_APIName interface returns NULL if sqlite3_value_dup_APIParam_1 is NULL or if a memory allocation fails.
The use of the UTF-8 interfaces is preferred, as SQLite currently does all parsing using UTF-8.
For an ordinary on-disk database file, the serialization is just a copy of the disk file.
SQLite invokes sqlite3_result_pointer_APIParam_4 with sqlite3_result_pointer_APIParam_2 as its only argument when SQLite is finished with sqlite3_result_pointer_APIParam_2.  The sqlite3_result_pointer_APIParam_3 parameter should be a static string and preferably a string literal.
Calling sqlite3_auto_extension_APIName with an entry point X that is already on the list of automatic extensions is a harmless no-op.
Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption.
Note that the authorizer callback is invoked only during sqlite3_prepare_APIName or its variants.
The update hook is not invoked when internal system tables are modified (i.e.
On success, sqlite3_blob_write_APIName returns SQLITE_OK_API_constant.
The second parameter is one of the limit categories that define a class of constructs to be size limited.
The sqlite3_sourceid_APIName function returns a pointer to a string constant whose value is the same as the SQLITE_SOURCE_ID_API_constant C preprocessor macro.
The value returned by sqlite3_msize_APIName might be larger than the number of bytes requested when sqlite3_msize_APIParam_1 was allocated.
But the application does not want the user to be able to make arbitrary changes to the database.
The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes.
The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option limits the size of bound parameter expansions.
The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released, so the implementation may read, write or checkpoint the database as required.
The xCreate and xConnect methods of a virtual table module call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.
Any of these arguments may be NULL, in which case the corresponding element of metadata is omitted.
Metadata is returned by sqlite3_table_column_metadata_APIName by writing to the memory locations passed as the 5th and subsequent parameters to sqlite3_table_column_metadata_APIName.
 The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D. Unlike the sqlite3_release_memory_APIName interface, this interface is in effect even when the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is omitted.See also: sqlite3_release_memory_APIName
The first argument is the database connection object to be interrogated.
zProc may be 0, in which case SQLite will try to come up with an entry point name on its own.
The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the sqlite3_serialize_APIParam_2 database on database connection D. If sqlite3_serialize_APIParam_3 is not a NULL pointer, then the size of the database in bytes is written into *P.
As long as the buffer size is greater than zero, sqlite3_snprintf_APIName guarantees that the buffer is always zero-terminated.
sqlite3_bind_text64 not exist in API_info
See Also:  SQLite Shared-Cache Mode
sqlite3_create_functionnot exist in API_info
This routine registers an authorizer callback with a particular database connection, supplied in the first argument.
This interface can be used by an application to make sure that the version of SQLite that it is linking against was compiled with the desired setting of the SQLITE_THREADSAFE macro.
If the sqlite3_db_status_APIParam_5 is true, then the highest instantaneous value is reset back down to the current value.
Only an effective call of sqlite3_initialize_APIName does any initialization.
In this case SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName.
The sqlite3_result_pointer_APIName interface sets the result to an SQL NULL value, just like sqlite3_result_null_APIName, except that it also associates the host-language pointer sqlite3_result_pointer_APIParam_2 or type sqlite3_result_pointer_APIParam_3 with that NULL value such that the pointer can be retrieved within an application-defined SQL function using sqlite3_value_pointer_APIName.
The progress handler callback must not do anything that will modify the database connection that invoked the progress handler.
That capability is no longer provided.
Please pay particular attention to the fact that the pointer returned from sqlite3_value_blob_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName can be invalidated by a subsequent call to sqlite3_value_bytes_APIName, sqlite3_value_bytes16_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName.
If a faster non-recursive mutex implementation is available on the host platform, the mutex subsystem might return such a mutex in response to SQLITE_MUTEX_FAST_API_constant.
Parameters of the form "?"
If this process generates an invalid UTF-8 encoding, the results are undefined.
The value returned by sqlite3_column_type_APIName is only meaningful if no automatic type conversions have occurred for the value in question.
Only sqlite3_free_table_APIName is able to release the memory properly and safely.
 This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized.
Autocommit mode is on by default.
If an error occurs and sqlite3_load_extension_APIParam_4 is not 0, then the sqlite3_load_extension_APIName interface shall attempt to fill *pzErrMsg with error message text stored in memory obtained from sqlite3_malloc_APIName.
sqlite3_result_blob not exist in API_info
sqlite3_cancel_auto_extensionnot exist in API_info
If the busy callback returns 0, then no additional attempts are made to access the database and SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName to the application.
The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run.
The sqlite3_win32_set_directory interface is used to set the value associated with the sqlite3_temp_directory or sqlite3_data_directory variable, to sqlite3_win32_set_directory_APIParam_2, depending on the value of the sqlite3_win32_set_directory_APIParam_1 parameter.
These routines only compile the first statement in sqlite3_prepare16_APIParam_2, so *pzTail is left pointing to what remains uncompiled.
The extended result codes are disabled by default for historical compatibility.
 The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object.
The sqlite3_config_APIName interface is not threadsafe.
To be clear: the value is the number of bytes in the value, not the number of characters.
If sqlite3_next_stmt_APIParam_2 is NULL then this interface returns a pointer to the first prepared statement associated with the database connection sqlite3_next_stmt_APIParam_1.
The table conceptually has a number of rows and columns.
The database connection must not have been closed.
 sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation.
As an example of the result table format, suppose a query result is as follows:
This API may be used to register a callback that SQLite will invoke when the connection currently holding the required lock relinquishes it.
The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding (malloced but not freed).
The calling application should pass sqlite3_str_finish_APIParam_0 to sqlite3_free_APIName to avoid a memory leak.
Beginning with SQLite version 3.7.3 (2010-10-08), the soft heap limit is enforced regardless of whether or not the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is invoked.
For attached databases, this is the name that appears after the AS keyword in the ATTACH statement.
sqlite3_create_collation_v2 not exist in API_info
The third argument is one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE, indicating the most desirable form of the collation sequence function required.
The values returned by sqlite3_memory_used_APIName and sqlite3_memory_highwater_APIName include any overhead added by SQLite in its implementation of sqlite3_malloc_APIName, but not overhead added by the any underlying system library routines that sqlite3_malloc_APIName may call.
sqlite3_blob_open_APIName fails with SQLITE_ERROR_API_constant if any of the following are true:
If any databases are skipped because locks cannot be obtained, but no other error occurs, sqlite3_db_cacheflush_APIName returns SQLITE_BUSY_API_constant.
To avoid memory leaks, the application should invoke sqlite3_free_APIName on error message strings returned through the 5th parameter of sqlite3_exec_APIName after the error message string is no longer needed.
Nevertheless, best practice is to avoid using keywords as identifiers.
The sqlite3_cancel_auto_extension_APIName interface unregisters the initialization routine X that was registered using a prior call to sqlite3_auto_extension_APIName.
Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.
The column is identified by the second, third and fourth parameters to sqlite3_table_column_metadata_APIName.
If the busy callback is NULL, then SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName immediately upon encountering the lock.
This feature can be used to implement a "Cancel" button on a GUI progress dialog box.
If sqlite3_msize_APIParam_1 points to something that is not the beginning of memory allocation, or if it points to a formerly valid memory allocation that has now been freed, then the behavior of sqlite3_msize_APIName is undefined and possibly harmful.
When running in shared-cache mode, a database operation may fail with an SQLITE_LOCKED_API_constant error if the required locks on the shared-cache or individual tables within the shared-cache cannot be obtained.
If there is no attached database sqlite3_db_filename_APIParam_2 on the database connection D, or if database sqlite3_db_filename_APIParam_2 is a temporary or in-memory database, then sqlite3_db_filename_APIName will return either a NULL pointer or an empty string.
Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB.
 This interface allows the size of various constructs to be limited on a connection by connection basis.
Applications that care about shared cache setting should set it explicitly.
If this happens, then the specified callback is invoked immediately, from within the call to sqlite3_unlock_notify_APIName.
Use the sqlite3_result_subtype_APIName routine to set the subtype for the return value of an SQL function.
The sqlite3_stmt_isexplain_APIName interface returns 1 if the prepared statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN statement, or 2 if the statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN QUERY PLAN.
The return value of the sqlite3_threadsafe_APIName function shows only the compile-time setting of thread safety, not any run-time changes to that setting made by sqlite3_config_APIName.
The rowid is always available as an undeclared column named ROWID, OID, or _ROWID_ as long as those names are not also used by explicitly declared columns.
If the new limit is a negative number, the limit is unchanged.
If the Nth column of the result set is an expression or subquery, then a NULL pointer is returned by sqlite3_column_decltype16_APIName.
See also: sqlite3_blob_read_APIName.
Though they are intended for internal use by SQLite, code that links against SQLite is permitted to use any of these routines.
If the path does not begin with a '/' (meaning that the authority section is omitted from the URI) then the path is interpreted as a relative path.
The sixth, seventh, eighth and ninth parameters (xStep, xFinal, xValue and xInverse) passed to sqlite3_create_window_function are pointers to C-language callbacks that implement the new function.
If another thread changes the autocommit status of the database connection while this routine is running, then the return value is undefined.
Calling this routine with a null pointer (such as would be returned by a failed call to sqlite3_blob_open_APIName) is a harmless no-op.
The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option can be used to limit the length of bound parameter expansion in the output of sqlite3_trace_APIName.
Note also that sqlite3_snprintf_APIName returns a pointer to its buffer instead of the number of characters actually written into the buffer.
sqlite3_bind_pointernot exist in API_info
Also, new keywords may be added to future releases of SQLite.
The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2.
For TEMP tables, the database name is "temp".
If this routine has not been previously called or if the previous call had sqlite3_randomness_APIParam_1 less than one or a NULL pointer for sqlite3_randomness_APIParam_2, then the PRNG is seeded using randomness obtained from the xRandomness method of the default sqlite3_vfs object.
The first argument to these interfaces is a prepared statement.
 The sqlite3_initialize_APIName routine initializes the SQLite library.
The sqlite3_commit_hook_APIName interface registers a callback function to be invoked whenever a transaction is committed.
Use this routine to reset all host parameters to NULL.
SQL parameters are tokens of the form "?
The handler will sleep multiple times until at least "ms" milliseconds of sleeping have accumulated.
The number of columns in the result can be determined using sqlite3_column_count_APIName.
If sqlite3_compileoption_get_APIParam_1 is out of range, sqlite3_compileoption_get_APIName returns a NULL pointer.
This interface only reports on the compile-time mutex setting of the SQLITE_THREADSAFE flag.
If the 5th parameter to sqlite3_exec_APIName is not NULL and no errors occur, then sqlite3_exec_APIName sets the pointer in its 5th parameter to NULL before returning.
No entry point will be called more than once for each database connection that is opened.
Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file.
 To execute an SQL statement, it must first be compiled into a byte-code program using one of these routines.
 The sqlite3_threadsafe_APIName function returns zero if and only if SQLite was compiled with mutexing code omitted due to the SQLITE_THREADSAFE compile-time option being set to 0.SQLite can be compiled with or without mutexes.
Subsequent arguments vary depending on the configuration option in sqlite3_config_APIParam_1.
After being freed, memory should neither be read nor written.
For example, an application may allow a user to enter arbitrary SQL queries for evaluation by a database.
The behavior is undefined if the mutex is not currently entered by the calling thread or is not currently allocated.
Do not mix calls to sqlite3_column_text_APIName or sqlite3_column_blob_APIName with calls to sqlite3_column_bytes16_APIName, and do not mix calls to sqlite3_column_text16_APIName with calls to sqlite3_column_bytes_APIName.
The sqlite3_value_numeric_type_APIName interface attempts to apply numeric affinity to the value.
These routines return 1 if the input string appears to be a complete SQL statement.
If the sqlite3_realloc_APIParam_1 parameter to sqlite3_realloc_APIName is a NULL pointer then its behavior is identical to calling sqlite3_malloc_APIName.
The SQLite core never uses these routines except inside an assert_APIName and applications are advised to follow the lead of the core.
sqlite3_bind_textnot exist in API_info
The result of expressions involving strings with embedded NULs is undefined.
The sqlite3_preupdate_new_APIName interface writes into sqlite3_preupdate_new_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row after it is updated.
If the table name parameter T in a call to sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is undefined behavior.
If an interface fails with SQLITE_MISUSE_API_constant, that means the interface was invoked incorrectly by the application.
 The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG option to sqlite3_config_APIName.
The Windows VFS uses native malloc_APIName and free_APIName for some operations.
This will be "main" for the main database or "temp" for TEMP tables or the name given after the AS keyword in the ATTACH statement for attached databases.
If there is an error, *ppStmt is set to NULL.
and the following statement to be compiled:
defined not exist in API_info
It first tries "sqlite3_extension_init".
See the checkpointing documentation for addition information.
The third parameter to the preupdate callback is one of the constants SQLITE_INSERT_API_constant, SQLITE_DELETE_API_constant, or SQLITE_UPDATE_API_constant to identify the kind of update operation that is about to occur.
The sqlite3_get_table_APIName function evaluates one or more semicolon-separated SQL statements in the zero-terminated UTF-8 string of its 2nd parameter and returns a result table to the pointer given in its 3rd parameter.
The calling procedure is responsible for deleting the compiled SQL statement using sqlite3_finalize_APIName after it has finished with it.
See also: sqlite3_bind_APIName, sqlite3_bind_parameter_count_APIName, and sqlite3_bind_parameter_name_APIName.
These routines work just like the corresponding column access functions except that these routines take a single protected sqlite3_value object pointer instead of a sqlite3_stmt* pointer and an integer column number.
The flags parameter to sqlite3_open_v2_APIName can take one of the following three values, optionally combined with the SQLITE_OPEN_NOMUTEX_API_constant, SQLITE_OPEN_FULLMUTEX_API_constant, SQLITE_OPEN_SHAREDCACHE_API_constant, SQLITE_OPEN_PRIVATECACHE_API_constant, and/or SQLITE_OPEN_URI_API_constant flags:
If the row that a BLOB handle points to is modified by an UPDATE, DELETE, or by ON CONFLICT side-effects then the BLOB handle is marked as "expired".
The sqlite3_result_text_APIName, sqlite3_result_text16_APIName, sqlite3_result_text16le_APIName, and sqlite3_result_text16be_APIName interfaces set the return value of the application-defined function to be a text string which is represented as UTF-8, UTF-16 native byte order, UTF-16 little endian, or UTF-16 big endian, respectively.
and omitting any initial "lib".
Workstation applications using SQLite normally do not need to invoke either of these routines.
Attempting to deallocate a static mutex results in undefined behavior.
If the authorizer callback returns any value other than SQLITE_IGNORE_API_constant, SQLITE_OK_API_constant, or SQLITE_DENY_API_constant then the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message.
There are (N+1)*M elements in the array.
 The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection.
If the sqlite3_prepare_APIParam_3 argument is negative, then sqlite3_prepare_APIParam_2 is read up to the first zero terminator.
N bytes of data are copied into buffer sqlite3_blob_read_APIParam_2 from the open BLOB, starting at offset sqlite3_blob_read_APIParam_4.
sqlite3_unlock_notifynot exist in API_info
If the specified table is actually a view, an error code is returned by sqlite3_table_column_metadata_APIName.
The sqlite3_value_type_APIName interface returns the datatype code for the initial datatype of the sqlite3_value object V. sqlite3_value_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant.
If there is already a read transaction open on schema S, then the database handle must have no active statements (SELECT statements that have been passed to sqlite3_step_APIName but not sqlite3_reset_APIName or sqlite3_finalize_APIName).
The sqlite3_normalized_sql_APIName interface returns a pointer to a UTF-8 string containing the normalized SQL text of prepared statement P.  The semantics used to normalize a SQL statement are unspecified and subject to change.
Suppose the sqlite3_free_table_APIParam_1 table is stored in an array names azResult.
The SQLITE_IGNORE_API_constant return can be used to deny an untrusted user access to individual columns of a table.
The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.  The subtype information can be used to pass a limited amount of context from one SQL function to another.
The third parameter is the name of the database that was written to - either "main" or the name of an ATTACH-ed database.
If sqlite3_uri_boolean_APIParam_1 is a NULL pointer, then sqlite3_uri_parameter_APIName returns NULL and sqlite3_uri_boolean_APIName returns B.
See also: sqlite3_reset_auto_extension_APIName and sqlite3_cancel_auto_extension_APIName
Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection.
The sqlite3_create_module_v2_APIName interface has a fifth parameter which is a pointer to a destructor for the sqlite3_create_module_APIParam_4.
Subsequent arguments vary depending on the configuration verb.
When no rows match an aggregate query, the xStep_APIName callback of the aggregate function implementation is never called and xFinal_APIName is called exactly once.
If the most recent sqlite3_* API call associated with database connection sqlite3_errcode_APIParam_1 failed, then the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call.
See sqlite3_create_function_APIName and sqlite3_create_function16_APIName for additional information.
The first argument to the busy handler is a copy of the void* pointer which is the third argument to sqlite3_busy_handler_APIName.
This routine must be called from the same thread in which the aggregate SQL function is running.
 sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table.The first argument must be the sqlite3_index_info object that is sqlite3_vtab_collation_APIParam_1 to the xBestIndex_APIName method.
The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2.
The sqlite3_result_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0.
Any number of levels of indirection are allowed.
If an application invokes any sqlite3_xxx API functions from within an unlock-notify callback, a crash or deadlock may be the result.
The fifth argument, xCallback, is a pointer to the collating function.
Only changes made directly by the INSERT, UPDATE or DELETE statement are considered - auxiliary changes caused by triggers, foreign key actions or REPLACE constraint resolution are not counted.
The sqlite3_mutex_notheld_APIName interface should also return 1 when given a NULL pointer.
The SQLITE_OMIT_AUTORESET compile-time option can be used to restore the legacy behavior.
The name of the collation is a UTF-8 string for sqlite3_create_collation_APIName and sqlite3_create_collation_v2_APIName and a UTF-16 string in native byte order for sqlite3_create_collation16_APIName.
If an SQL operation is very nearly finished at the time when sqlite3_interrupt_APIName is called, then it might not have an opportunity to be interrupted and might continue to completion.
These routines should return true if the mutex in their argument is held or not held, respectively, by the calling thread.
Note that the sqlite3_wal_autocheckpoint_APIName interface and the wal_autocheckpoint pragma both invoke sqlite3_wal_hook_APIName and will overwrite any prior sqlite3_wal_hook_APIName settings.
The sqlite3_strglob_APIName function is case sensitive.
Each call to either sqlite3_trace_APIName or sqlite3_trace_v2_APIName overrides (cancels) any prior calls to sqlite3_trace_APIName or sqlite3_trace_v2_APIName.
Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant) is used then sqlite3_mutex_alloc_APIName returns a different mutex on every call.
If sqlite3_db_cacheflush_APIName needs to obtain extra database locks before dirty pages can be flushed to disk, it does so.
These routines do not parse the SQL statements thus will not detect syntactically incorrect SQL.
In a multithreaded environment, an unprotected sqlite3_value object may only be used safely with sqlite3_bind_value_APIName and sqlite3_result_value_APIName.
The left-most column is column 0 for these routines.
Things are more complicated if the sqlite3_changes_APIName function is executed while a trigger program is running.
The first M pointers point to zero-terminated strings that  contain the names of the columns.
See "query parameters with special meaning to SQLite" for additional information.
 After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName, sqlite3_step_APIName must be called one or more times to evaluate the statement.The details of the behavior of the sqlite3_step_APIName interface depend on whether the statement was prepared using the newer "vX" interfaces sqlite3_prepare_v3_APIName, sqlite3_prepare_v2_APIName, sqlite3_prepare16_v3_APIName, sqlite3_prepare16_v2_APIName or the older legacy interfaces sqlite3_prepare_APIName and sqlite3_prepare16_APIName.
The destructor is also invoked if the call to sqlite3_create_function_v2_APIName fails.
To avoid a resource leak, every open BLOB handle should eventually be released by a call to sqlite3_blob_close_APIName.
sqlite3_bind_blob not exist in API_info
This interface is threadsafe on processors where writing a 32-bit integer is atomic.
We admit that the number of characters written would be a more useful return value but we cannot change the implementation of sqlite3_snprintf_APIName now without breaking compatibility.
Without SQLITE_ENABLE_MEMORY_MANAGEMENT, the soft heap limit is only enforced when memory is allocated by the page cache.
 These routines provide a means to determine the database, table, and table column that is the origin of a particular result column in SELECT statement.
The ATTACH and DETACH statements also cause sqlite3_stmt_readonly_APIName to return true since, while those statements change the configuration of a database connection, they do not make changes to the content of the database files on disk.
Mutexes created using SQLITE_MUTEX_RECURSIVE_API_constant can be entered multiple times by the same thread.
Unless deadlock is detected (see below), sqlite3_unlock_notify_APIName always returns SQLITE_OK_API_constant.
Summary:
If the log message is longer than a few hundred characters, it will be truncated to the length of the buffer.
 This routine can be used to find the number of SQL parameters in a prepared statement.
sqlite3_progress_handlernot exist in API_info
The third through sixth parameters to the callback are either NULL pointers or zero-terminated strings that contain additional details about the action to be authorized.
Authorization is not performed during statement evaluation in sqlite3_step_APIName, unless as stated in the previous paragraph, sqlite3_step_APIName invokes sqlite3_prepare_v2_APIName to reprepare a statement after a schema change.
So if speed is of utmost importance, it makes sense to disable the mutexes.
Parameter "idx" identifies the specific loop to retrieve statistics for.
For example, if the number of table steps greatly exceeds the number of table searches or result rows, that would tend to indicate that the prepared statement is using a full table scan rather than an index.
If the writer lock cannot be obtained immediately, and a busy-handler is configured, it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained.
 sqlite3_total_changes_APIName returns the total number of rows inserted, modified or deleted by all INSERT, UPDATE or DELETE statements completed since the database connection was opened, including those executed as part of trigger programs.
Run-time limits are intended for use in applications that manage both their own internal database and also databases that are controlled by untrusted external sources.
The sqlite3_win32_set_directory8 and sqlite3_win32_set_directory16 interfaces behave exactly the same as the sqlite3_win32_set_directory interface except the string parameter must be UTF-8 or UTF-16, respectively.
(Hint: Run "PRAGMA application_id" against a newly opened database connection in order to make it ready to use snapshots.)
The blocked connections unlock-notify callback may also be canceled by closing the blocked connection using sqlite3_close_APIName.
The fourth parameter, eTextRep, specifies what text encoding this SQL function prefers for its parameters.
Only built-in memory allocators can be used.
The second parameter is the column number.
Memory corruption, a segmentation fault, or other severe error might result if sqlite3_free_APIName is called with a non-NULL pointer that was not obtained from sqlite3_malloc_APIName or sqlite3_realloc_APIName.
The sqlite3_keyword_name_APIName routine returns SQLITE_OK_API_constant if sqlite3_keyword_name_APIParam_1 is within bounds and SQLITE_ERROR_API_constant if not.
If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is non-negative then SQLite takes that many bytes (not characters) from the 2nd parameter as the error message.
If sqlite3_value_free_APIParam_1 is a NULL pointer then sqlite3_value_free_APIName is a harmless no-op.
If an error occurs while committing the transaction, an error code is returned by sqlite3_blob_close_APIName and the transaction rolled back.
See also:
Developers might also want to use the sqlite3_set_authorizer_APIName interface to further control untrusted SQL.
See the built-in printf_APIName documentation for details.
Recognized integer codes are of the form SQLITE_STATUS_....
These interfaces return the current status of an sqlite3_str object.
But because the SELECT statement does not change the database file directly, sqlite3_stmt_readonly_APIName would still return true.
A database connection might not know that the database file is in WAL mode if there has been no prior I/O on that database connection, or if the database entered WAL mode after the most recent I/O on the database connection.
Typical tasks performed by these routines include allocation or deallocation of static resources, initialization of global variables, setting up a default sqlite3_vfs module, or setting up a default configuration using sqlite3_config_APIName.
The problem has been fixed with the "v2" interface.
The use of the sqlite3_enable_load_extension_APIName interface should be avoided.
SQLite will invoke the destructor function (if it is not NULL) when SQLite no longer needs the sqlite3_create_module_APIParam_4 pointer.
sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName.
When sqlite3_prepare_v2_APIName is used to prepare a statement, the statement might be re-prepared during sqlite3_step_APIName due to a schema change.
If sqlite3_stmt_busy_APIParam_1 is not a NULL pointer and is not a pointer to a valid prepared statement object, then the behavior is undefined and probably undesirable.
The first parameter is the prepared statement that implements the SELECT statement.
However, if SQLite is compiled with the SQLITE_OMIT_AUTOINIT compile-time option, then the automatic calls to sqlite3_initialize_APIName are omitted and the application must call sqlite3_initialize_APIName directly prior to using any other SQLite interface.
 This routine sets a busy handler that sleeps for a specified amount of time when a table is locked.
SQLITE_TOOBIG_API_constant might be returned if the size of a string or BLOB exceeds limits imposed by sqlite3_limit_APIName or SQLITE_MAX_LENGTH.
The third parameter (nArg) is the number of arguments that the SQL function or aggregate takes.
The callback function registered by sqlite3_profile_APIName is invoked as each SQL statement finishes.
For the purposes of this routine, an INSERT is considered to be successful even if it is subsequently rolled back.
this routine would return the string "VARIANT" for the second result column (i==1), and a NULL pointer for the first result column (i==0).
Note that the order of the first two parameters is reversed from snprintf_APIName.
A result table records the complete query results from one or more queries.
In other words, the return value from sqlite3_threadsafe_APIName is unchanged by calls to sqlite3_config_APIName.
These routines are designed to aid in process initialization and shutdown on embedded systems.
The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database sqlite3_db_filename_APIParam_2 of connection D.  The main database file has the name "main".
To avoid deadlocks and other threading problems, the sqlite3_log_APIName routine will not use dynamically allocated memory.
See also:  PRAGMA busy_timeout
The sqlite3_str_appendchar_APIName method appends sqlite3_str_append_APIParam_3 copies of the single-byte character sqlite3_str_appendchar_APIParam_3 onto the end of sqlite3_str object X.
If a write-transaction is open on database connection sqlite3_db_cacheflush_APIParam_1 when the sqlite3_db_cacheflush_APIName interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk.
sqlite3_column_origin_name_APIParam_0 is valid until the prepared statement is destroyed using sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the same information is requested again in a different encoding.
If the fourth parameter to sqlite3_bind_blob_APIName is negative, then the behavior is undefined.
The size of the blob (and hence the maximum value of N+iOffset) can be determined using the sqlite3_blob_bytes_APIName interface.
Further options may be added in the future.
If the callback function of the 3rd argument to sqlite3_exec_APIName is not NULL, then it is invoked for each result row coming out of the evaluated SQL statements.
There is however, one exception.
The first argument, "db", is a database connection obtained from a prior successful call to sqlite3_open_APIName, sqlite3_open_v2_APIName or sqlite3_open16_APIName.
Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the update hook.
If sqlite3_uri_boolean_APIParam_1 is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method, then the behavior of this routine is undefined and probably undesirable.
If parameter sqlite3_wal_checkpoint_v2_APIParam_2 is NULL or points to a zero length string, then the specified operation is attempted on all WAL databases attached to database connection sqlite3_wal_checkpoint_v2_APIParam_1.
The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state, ready to be re-executed.
If two different VFSes with the same name are registered, the behavior is undefined.
If two or more threads call one or more of these routines against the same prepared statement and column at the same time then the results are undefined.
SQLite uses dynamic run-time typing.
URI sqlite3_open_APIParam_1 interpretation is turned off by default, but future releases of SQLite might enable URI sqlite3_open_APIParam_1 interpretation by default.
To avoid memory leaks, the object returned by sqlite3_str_new_APIName must be freed by a subsequent call to sqlite3_str_finish_APIName.
If for some reason, sqlite3_initialize_APIName is unable to initialize the library (perhaps it is unable to allocate a needed resource such as a mutex) it returns an error code other than SQLITE_OK_API_constant.
There are two column (M==2) and three rows (N==3).
The current value of the parameter is returned by sqlite3_status_APIName into *pCurrent.
The sqlite3_wal_hook_APIName function is used to register a callback that is invoked each time data is committed to a database in wal mode.
 The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection D except those named on list L. The L parameter must be either NULL or a pointer to an array of pointers to strings where the array is terminated by a single NULL pointer.
If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes_APIName routine returns the number of bytes in that BLOB or string.
sqlite3_db_cacheflush_APIName does not set the database handle error code or message returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions.
 The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2(D,X,SQLITE_CHECKPOINT_PASSIVE,0,0).In brief, sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database X on database connection D to be transferred into the database file and for the write-ahead log to be reset.
In that case, the error code and message may or may not be set.
If the result is NULL, then sqlite3_column_bytes_APIName returns zero.
Use the UPDATE SQL command to change the size of a blob.
The progress handler is also disabled by setting N to a value less than 1.
The sqlite3_result_value_APIName interface sets the result of the application-defined function to be a copy of the unprotected sqlite3_value object specified by the 2nd parameter.
 If a write-transaction is open on database connection D when the sqlite3_db_cacheflush_APIName interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk.
The sqlite3_memory_highwater_APIName routine returns the maximum value of sqlite3_memory_used_APIName since the high-water mark was last reset.
If the busy-handler returns 0 before the writer lock is obtained or while waiting for database readers, the checkpoint operation proceeds from that point in the same way as SQLITE_CHECKPOINT_PASSIVE_API_constant - checkpointing as many frames as possible without blocking any further.
See also: sqlite3_status_APIName and sqlite3_stmt_status_APIName.
If the commit hook returns non-zero, then the COMMIT is converted into a ROLLBACK.
", "?NNN", ":AAA", "$AAA", or "@AAA" that serve as placeholders for values that are bound to the parameters at a later time.
The use of the new "vX" interface is recommended for new applications but the legacy interface will continue to be supported.
If the 5th parameter to sqlite3_exec_APIName is not NULL then any error message is written into memory obtained from sqlite3_malloc_APIName and passed back through the 5th parameter.
The sqlite3_close_v2_APIName interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.
If sqlite3_value_frombind_APIParam_1 comes from an SQL literal value, or a table column, and expression, then sqlite3_value_frombind_APIName returns zero.
This routine must be called from the same thread in which the application-defined function is running.
Note, however, that sqlite3_config_APIName can be called as part of the implementation of an application-defined sqlite3_os_init_APIName.
The callback function should register the desired collation using sqlite3_create_collation_APIName, sqlite3_create_collation16_APIName, or sqlite3_create_collation_v2_APIName.
Changes to a view that are intercepted by INSTEAD OF triggers are not counted.
The second argument must be an index into the aConstraint[] array belonging to the sqlite3_index_info structure passed to xBestIndex.
This can be used, for example, in diagnostic routines to search for prepared statements that are holding a transaction open.
If the argument sqlite3_soft_heap_limit64_APIParam_1 is zero then the soft heap limit is disabled.
This interface is used to retrieve and reset counter values from a prepared statement.
Any such actions result in undefined behavior.
The following must be true for sqlite3_snapshot_get_APIName to succeed.
The fourth parameter to the preupdate callback is the name of the database within the database connection that is being modified.
In other words, the busy handler is not reentrant.
The default encoding for databases created using sqlite3_open16_APIName will be UTF-16 in the native byte order.
Future releases of SQLite may require this.
 These interfaces are available only on Windows.
The SQLITE_FCNTL_JOURNAL_POINTER_API_constant works similarly except that it returns the sqlite3_file object associated with the journal file instead of the main database.
The callback is invoked from within the sqlite3_step or sqlite3_close call that concludes the blocking connections transaction.
Zero all sqlite3_stmt_scanstatus_APIName related event counters.
The M argument should be the bitwise OR-ed combination of zero or more SQLITE_TRACE_API_constant constants.
The sqlite3_result_int64_APIName interface sets the return value of the application-defined function to be the 64-bit signed integer value given in the 2nd argument.
Future versions of SQLite might make use of additional special filenames that begin with the ":" character.
If those locks cannot be obtained immediately and there is a busy-handler callback configured, it is invoked in the usual manner.
New VFSes are registered with sqlite3_vfs_register_APIName.
The fifth parameter is an arbitrary pointer.
The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object.
The sqlite3_preupdate_old_APIName interface writes into sqlite3_preupdate_old_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row before it is updated.
The sqlite3_strlike_APIName interface returns zero if and only if string sqlite3_strlike_APIParam_2 matches the LIKE pattern sqlite3_strlike_APIParam_1 with escape character E. The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE sqlite3_strlike_APIParam_1 ESCAPE E" operator in the SQL dialect understood by SQLite.
sqlite3_trace not exist in API_info
If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16_APIName routine returns the number of bytes in that BLOB or string.
If sqlite3_wal_checkpoint_v2_APIParam_2 is not NULL (or a zero length string) and is not the name of any attached database, SQLITE_ERROR_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName to the caller.
The set of SQLITE_DBSTATUS options is likely to grow in future releases of SQLite.
These methods do not return a result code.
The sqlite3_prepare_APIName, sqlite3_prepare_v2_APIName, and sqlite3_prepare_v3_APIName interfaces use UTF-8, and sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName use UTF-16.
The second parameter to the callback is an integer action code that specifies the particular action to be authorized.
Depending on how the SQLite library is compiled, this interface might not exist.
sqlite3_profilenot exist in API_info
These routines may only be called from within a preupdate callback.
sqlite3_create_window_function not exist in API_info
SELECT c1 + 1, c1 FROM t1;
 These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates.
See also: sqlite_version_APIName and sqlite_source_id_APIName.
Filenames containing international characters must be converted to UTF-8 prior to passing them into sqlite3_open_APIName or sqlite3_open_v2_APIName.
Other interfaces might change the datatype for an sqlite3_value object.
The application must finalize every prepared statement in order to avoid resource leaks.
See Also: Using the SQLite Unlock Notification Feature.
The sqlite3_finalize_APIName function is called to delete a prepared statement.
 The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement P. If prepared statement P does not have results ready to return (via calls to the sqlite3_column_*_APIName of interfaces) then sqlite3_data_count_APIName returns 0.
See also: sqlite3_blob_close_APIName, sqlite3_blob_reopen_APIName, sqlite3_blob_read_APIName, sqlite3_blob_bytes_APIName, sqlite3_blob_write_APIName.
Definition: A result table is memory data structure created by the sqlite3_get_table_APIName interface.
sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity.
SQLite interprets the string from sqlite3_result_error16_APIName as UTF-16 in native byte order.
SQLITE_MISUSE_API_constant means that the this routine was called inappropriately.
A NULL pointer can be used in place of "main" to refer to the main database file.
NULL values sqlite3_free_table_APIParam_1 in NULL pointers.
Every new database connection defaults to having the auto-checkpoint enabled with a threshold of 1000 or SQLITE_DEFAULT_WAL_AUTOCHECKPOINT pages.
When the destructor callback is invoked, it is passed a single argument which is a copy of the application data pointer which was the fifth parameter to sqlite3_create_function_v2_APIName.
sqlite3_column_name_APIParam_0 pointer is valid until either the prepared statement is destroyed by sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the next call to sqlite3_column_name_APIName or sqlite3_column_name16_APIName on the same column.
Some parameters do not record the highest value.
The P and X arguments are pointers whose meanings depend on T.
sqlite3_realloc_APIName returns a pointer to a memory allocation of at least sqlite3_realloc_APIParam_2 bytes in size or NULL if insufficient memory is available.
Otherwise, in the special "DROP TABLE/INDEX" case, the extended error code is just SQLITE_LOCKED_API_constant.
For these latter parameters nothing is written into *pCurrent.
But global versions of those functions must exist in order to be overloaded.
This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5, column sqlite3_blob_open_APIParam_4, table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2; in other words, the same BLOB that would be selected by:
This routine actually returns the index of the largest (rightmost) parameter.
The application must ensure that no other SQLite interfaces are invoked by other threads while sqlite3_config_APIName is running.
sqlite3_step_APIName should not be called again on this virtual machine without first calling sqlite3_reset_APIName to reset the virtual machine back to its initial state.
 The sqlite3_stmt_isexplain_APIName interface returns 1 if the prepared statement S is an EXPLAIN statement, or 2 if the statement S is an EXPLAIN QUERY PLAN.
sqlite3_create_collation16 not exist in API_info
A contiguous memory representation of the database will usually only exist if there has been a prior call to sqlite3_deserialize(D,S,...) with the same values of D and S. The size of the database is written into *P even if the SQLITE_SERIALIZE_NOCOPY_API_constant bit is set but no contiguous copy of the database exists.
If the sqlite3_result_pointer_APIParam_4 parameter is not NULL, then it is a pointer to a destructor for the sqlite3_result_pointer_APIParam_2 parameter.
The default behavior is for mutexes to be enabled.
sqlite3_column_decltype16_APIParam_0 is always UTF-8 encoded.
If the argument to sqlite3_mutex_enter_APIName, sqlite3_mutex_try_APIName, or sqlite3_mutex_leave_APIName is a NULL pointer, then all three routines behave as no-ops.
Applications should finalize all prepared statements, close all BLOB handles, and finish all sqlite3_backup objects associated with the sqlite3 object prior to attempting to close the object.
SQLITE_RANGE_API_constant is returned by sqlite3_bind_text_APIName if the parameter index is out of range.
The memory returned by sqlite3_malloc_APIName, sqlite3_realloc_APIName, sqlite3_malloc64_APIName, and sqlite3_realloc64_APIName is always aligned to at least an 8 byte boundary, or to a 4 byte boundary if the SQLITE_4_BYTE_ALIGNED_MALLOC compile-time option is used.
sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface.
If the 4th parameter to the sqlite3_result_text* interfaces or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that function as the destructor on the text or BLOB result when it has finished using that result.
This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database.
WinRT and UWP.
The sqlite3_finalize_APIName routine can be called at any point during the life cycle of prepared statement S: before statement sqlite3_finalize_APIParam_1 is ever evaluated, after one or more calls to sqlite3_reset_APIName, or after any call to sqlite3_step_APIName regardless of whether or not the statement has completed execution.
Specifying an unknown parameter in the query component of a URI is not an error.
The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context sqlite3_result_subtype_APIParam_1 to be the value sqlite3_result_subtype_APIParam_2.  Only the lower 8 bits of the subtype sqlite3_result_subtype_APIParam_2 are preserved in current versions of SQLite; higher order bits are discarded.
If you prepare all of your SQL statements using sqlite3_prepare_v3_APIName or sqlite3_prepare_v2_APIName or sqlite3_prepare16_v2_APIName or sqlite3_prepare16_v3_APIName instead of the legacy sqlite3_prepare_APIName and sqlite3_prepare16_APIName interfaces, then the more specific error codes are returned directly by sqlite3_step_APIName.
If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 indicated an error, then sqlite3_reset_APIName returns an appropriate error code.
The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages of two valid snapshot handles.
Future versions of SQLite might understand additional query parameters.
Applications that need to process SQL from untrusted sources might also consider lowering resource limits using sqlite3_limit_APIName and limiting database size using the max_page_count PRAGMA in addition to using an authorizer.
 So as not to open security holes in older applications that are unprepared to deal with extension loading, and as a means of disabling extension loading while evaluating user-entered SQL, the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off.Extension loading is off by default.
The sqlite3_result_error_toobig_APIName interface causes SQLite to throw an error indicating that a string or BLOB is too long to represent.
You must call sqlite3_reset_APIName or sqlite3_finalize_APIName in order to find one of the specific error codes that better describes the error.
 If a WAL file remains on disk after all database connections close (either through the use of the SQLITE_FCNTL_PERSIST_WAL file control or because the last process to have the database opened exited without calling sqlite3_close_APIName) and a new connection is subsequently opened on that database and WAL file, the sqlite3_snapshot_open_APIName interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName.
The SQLITE_OMIT_TRACE compile-time option causes sqlite3_expanded_sql_APIName to always return NULL.
sqlite3_wal_hooknot exist in API_info
Unregister a VFS with the sqlite3_vfs_unregister_APIName interface.
The second argument is the index of the SQL parameter to be set.
The index for "?NNN" parameters is the value of NNN.
Do not pass the pointers returned from sqlite3_column_blob_APIName, sqlite3_column_text_APIName, etc.
SQLite implements this interface by calling the xSleep_APIName method of the default sqlite3_vfs object.
The callback implementation must not do anything that will modify the database connection that invoked the callback.
If certain kinds of errors occur on a statement within a multi-statement transaction (errors including SQLITE_FULL_API_constant, SQLITE_IOERR_API_constant, SQLITE_NOMEM_API_constant, SQLITE_BUSY_API_constant, and SQLITE_INTERRUPT_API_constant) then the transaction might be rolled back automatically.
sqlite3_set_auxdatanot exist in API_info
The query component of a URI may contain parameters that are interpreted either by SQLite itself, or by a custom VFS implementation.
The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema sqlite3_snapshot_get_APIParam_2 in database connection D.  On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into *P and returns SQLITE_OK_API_constant.
But this might change in future releases of SQLite.
In other words, the behavior exhibited when SQLite is compiled with SQLITE_OMIT_AUTOINIT might become the default behavior in some future release of SQLite.
The sqlite3_libversion_APIName function is provided for use in DLLs since DLL users usually do not have direct access to string constants within the DLL.
The PRAGMA wal_checkpoint command can be used to invoke this interface from SQL.
SQLite will only request a recursive mutex in cases where it really needs one.
The sqlite3_commit_hook_APIName and sqlite3_rollback_hook_APIName functions return the P argument from the previous call of the same function on the same database connection D, or NULL for the first call for each function on D.
Disable the authorizer by installing a NULL callback.
The first process cannot proceed because it is blocked by the second and the second process cannot proceed because it is blocked by the first.
The sqlite3_initialize_APIName routine returns SQLITE_OK_API_constant on success.
The sqlite3_last_insert_rowid_APIName interface usually returns the rowid of the most recent successful INSERT into a rowid table or virtual table on database connection D. Inserts into WITHOUT ROWID tables are not recorded.
When a call to sqlite3_step_APIName returns SQLITE_LOCKED_API_constant, it is almost always appropriate to call sqlite3_unlock_notify_APIName.
These APIs are only available if the library was compiled with the SQLITE_ENABLE_COLUMN_METADATA C-preprocessor symbol.
The implementation of the function can gain access to this pointer using sqlite3_user_data_APIName.
See SQLite Shared-Cache Mode for a description of shared-cache locking.
If URI sqlite3_open_APIParam_1 interpretation is enabled, and the sqlite3_open_APIParam_1 argument begins with "file:", then the sqlite3_open_APIParam_1 is interpreted as a URI.
To detect changes against a database file from other database connections use the PRAGMA data_version command or the SQLITE_FCNTL_DATA_VERSION_API_constant file control.
Unless it returns SQLITE_MISUSE_API_constant, sqlite3_blob_open_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions.
A collating function must always return the same answer given the same inputs.
Names are case sensitive.
If sqlite3_bind_value_APIParam_5 has the value SQLITE_TRANSIENT_API_constant, then SQLite makes its own private copy of the data immediately, before the sqlite3_bind_*_APIName routine returns.
 The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements.
The second parameter is either the name of the database (i.e.
The SQLite query planner is able to perform additional optimizations on deterministic functions, so use of the SQLITE_DETERMINISTIC_API_constant flag is recommended where possible.
URI sqlite3_open_APIParam_1 interpretation is enabled if the SQLITE_OPEN_URI_API_constant flag is set in sqlite3_open_APIParam_3 to sqlite3_open_v2_APIName, or if it has been enabled globally using the SQLITE_CONFIG_URI_API_constant option with the sqlite3_config_APIName method or by the SQLITE_USE_URI compile-time option.
See also: sqlite3_bind_parameter_count_APIName, sqlite3_bind_parameter_name_APIName, and sqlite3_bind_parameter_index_APIName.
The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database sqlite3_wal_checkpoint_v2_APIParam_2 of database connection sqlite3_wal_checkpoint_v2_APIParam_1 in mode sqlite3_wal_checkpoint_v2_APIParam_3.  Status information is written back into integers pointed to by sqlite3_wal_checkpoint_v2_APIParam_4 and C. The sqlite3_wal_checkpoint_v2_APIParam_3 parameter must be a valid checkpoint mode:
Built-in functions may be overloaded by new application-defined functions.
 The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of "case independence" that SQLite uses internally when comparing identifiers.
 These interfaces are only available if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option.The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT, UPDATE, and DELETE operation on a database table.
The UTF-16 interfaces work by converting the input text into UTF-8, then invoking the corresponding UTF-8 interface.
These routines are used to register a new virtual table module name.
The parameter name must be given in UTF-8 even if the original statement was prepared from UTF-16 text using sqlite3_prepare16_v2_APIName or sqlite3_prepare16_v3_APIName.
The sqlite3_result_int_APIName interface sets the return value of the application-defined function to be the 32-bit signed integer value given in the 2nd argument.
If the column-name parameter to sqlite3_table_column_metadata_APIName is a NULL pointer, then this routine simply checks for the existence of the table and returns SQLITE_OK_API_constant if the table exists and SQLITE_ERROR_API_constant if it does not.
Within an xUpdate method, any value for which sqlite3_value_nochange_APIName is true will in all other respects appear to be a NULL value.
If two or more such blocked connections have specified the same callback function, then instead of invoking the callback function multiple times, it is invoked once with the set of void* context pointers specified by the blocked connections bundled together into an array.
If the most recent evaluation of the statement encountered no errors or if the statement is never been evaluated, then sqlite3_finalize_APIName returns SQLITE_OK_API_constant.
These routines understand most of the common formatting options from the standard library printf_APIName plus some additional non-standard formats (%q, %Q, %w, and %z).
Otherwise, this API returns a negative value if P1 refers to an older snapshot than P2, zero if the two handles refer to the same database snapshot, and a positive value if P1 is a newer snapshot than P2.
However, just because this routine returns a positive number does not mean that one or more rows of data will be returned.
If sqlite3_file_control_APIParam_2 (zDbName) does not match the name of any open database file, then SQLITE_ERROR_API_constant is returned by sqlite3_file_control_APIName.
See also: sqlite3_create_module_APIName
The sqlite3_db_readonly_APIName interface returns 1 if the database sqlite3_db_readonly_APIParam_2 of connection sqlite3_db_readonly_APIParam_1 is read-only, 0 if it is read/write, or -1 if sqlite3_db_readonly_APIParam_2 is not the name of a database on connection sqlite3_db_readonly_APIParam_1.
See also: sqlite3_release_memory_APIName
For example, if the datatype is initially SQLITE_INTEGER_API_constant and sqlite3_value_text_APIName is called to extract a text value for that integer, then subsequent calls to sqlite3_value_type_APIName might return SQLITE_TEXT_API_constant.
sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation.
The sqlite3_result_error_APIName and sqlite3_result_error16_APIName functions cause the implemented SQL function to throw an exception.
For those parameters nothing is written into *pHighwater and the sqlite3_status64_APIParam_4 is ignored.
These numbers are obtained separately.
SQLite can be compiled with or without mutexes.
The sqlite3_uri_boolean_APIName routine assumes that sqlite3_uri_boolean_APIParam_2 is a boolean parameter and returns true (1) or false (0) according to the value of sqlite3_uri_boolean_APIParam_2.  The sqlite3_uri_boolean_APIName routine returns true (1) if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number.
The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D. Unlike the sqlite3_release_memory_APIName interface, this interface is in effect even when the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is omitted.
If the function is registered using the sqlite3_collation_needed_APIName API, then it is passed the names of undefined collation sequences as strings encoded in UTF-8.
This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close_APIName on *ppBlob after sqlite3_blob_open_APIName it returns.
Restrictions:
The first parameter passed to the callback function when it is invoked is a copy of the third parameter passed to sqlite3_wal_hook_APIName when registering the callback.
Applications can uses these routines to determine whether or not a specific identifier needs to be escaped (for example, by enclosing in double-quotes) so as not to confuse the parser.
Each entry in most SQLite tables (except for WITHOUT ROWID tables) has a unique 64-bit signed integer key called the "rowid".
 These functions may be used by (non-aggregate) SQL functions to associate metadata with argument values.
It is safe to call this routine from a thread different from the thread that is currently running the database operation.
Function sqlite3_create_window_function_APIName is similar, but allows the user to supply the extra callback functions needed by aggregate window functions.
An INSERT that fails due to a constraint violation is not a successful INSERT and does not change the value returned by this routine.
If the database connection is associated with unfinalized prepared statements or unfinished sqlite3_backup objects then sqlite3_close_APIName will leave the database connection open and return SQLITE_BUSY_API_constant.
The first host parameter has an index of 1, not 0.
If the Nth column returned by the statement is an expression or subquery and is not a column value, then all of these functions return NULL.
The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite.
These routines return the name assigned to a particular column in the result set of a SELECT statement.
The NNN value must be between 1 and the sqlite3_limit_APIName parameter SQLITE_LIMIT_VARIABLE_NUMBER_API_constant (default value: 999).
The INSERT continues to completion after deleting rows that caused the constraint problem so INSERT OR REPLACE will always change the return value of this interface.
If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 returned SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if sqlite3_step_APIName has never before been called on sqlite3_reset_APIParam_1, then sqlite3_reset_APIName returns SQLITE_OK_API_constant.
The 4th argument to sqlite3_exec_APIName is relayed through to the 1st argument of each callback invocation.
The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection.
Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables.
Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database, but rather the symbolic name of the database.
If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName interfaces can be used to determine the size of that BLOB or string.
If the result is NULL, then sqlite3_column_bytes16_APIName returns zero.
Applications must not used the pointer returned sqlite3_str_value_APIName after any subsequent method call on the same object.
The sqlite3_set_last_insert_rowid(D, R) method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database.
The sqlite3_uri_int64_APIName routine converts the value of sqlite3_uri_int64_APIParam_2 into a 64-bit signed integer and returns that integer, or sqlite3_uri_int64_APIParam_3 if sqlite3_uri_int64_APIParam_2 does not exist.
Note the last bullet in particular.
If the new row is not present in the table, or if it does not contain a blob or text value, or if another error occurs, an SQLite error code is returned by sqlite3_blob_reopen_APIName and the blob handle is considered aborted.
The underlying xFileControl method might also return SQLITE_ERROR_API_constant.
See also: sqlite3_status_APIName and sqlite3_db_status_APIName.
More information may be found by calling sqlite3_errmsg_APIName.
The value returned is one of SQLITE_ROLLBACK_API_constant, SQLITE_IGNORE_API_constant, SQLITE_FAIL_API_constant, SQLITE_ABORT_API_constant, or SQLITE_REPLACE_API_constant, according to the ON CONFLICT mode of the SQL statement that triggered the call to the xUpdate method of the virtual table.
It is often possible to use a keyword as an identifier as long as such use does not result in a parsing ambiguity.
These routines may only be called when the most recent call to sqlite3_step_APIName has returned SQLITE_ROW_API_constant and neither sqlite3_reset_APIName nor sqlite3_finalize_APIName have been called subsequently.
New SQL statements that are started after the running statement count reaches zero are not effected by the sqlite3_interrupt_APIName.
After each call to sqlite3_set_auxdata_APIName where X is not NULL, SQLite will invoke the destructor function X with parameter P exactly once, when the metadata is discarded.
The sqlite3_update_hook_APIName function returns the P argument from the previous call on the same database connection D, or NULL for the first call on D.
All other calls are harmless no-ops.
The _database_ routines return the database name, the _table_ routines return the table name, and the origin_ routines return the column name.
See also: sqlite3_stmt_scanstatus_reset_APIName
Whitespace and comments that follow the final semicolon are ignored.
If parameters of the ?NNN form are used, there may be gaps in the list.
If no prepared statement satisfies the conditions of this routine, it returns NULL.
 If the sqlite3_vtab_nochange_APIName routine is called within the xColumn method of a virtual table, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change.
In practice, metadata is preserved between function calls for function parameters that are compile-time constants, including literal values and parameters and expressions composed from the same.
sqlite3_create_function16 not exist in API_info
When that happens, the second error will be reported since these interfaces always report the most recent result.
In the "vX" interfaces, the prepared statement that is returned by sqlite3_prepare_APIName (the sqlite3_stmt object) contains a copy of the original SQL text.
Use the sqlite3_blob_bytes_APIName interface to determine the size of the opened blob.
Or it could be the case that the same database connection is being used by two or more threads at the same moment in time.
Bindings are not cleared by the sqlite3_reset_APIName routine.
The use of this interface is only necessary if the default setting is found to be suboptimal for a particular application.
The first parameter is the database connection whose limit is to be set or queried.
If the result is a UTF-16 string, then sqlite3_column_bytes_APIName converts the string to UTF-8 and then returns the number of bytes.
The sqlite3_snapshot_open_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.
The remaining entries all point to query results.
If an application uses more than one database connection then application-defined SQL functions must be added to each database connection separately.
A call to either function replaces the existing collation-needed callback.
sqlite3_rollback_hooknot exist in API_info
The sqlite3_preupdate_depth_APIName interface returns 0 if the preupdate callback was invoked as a result of a direct insert, update, or delete operation; or 1 for inserts, updates, or deletes invoked by top-level triggers; or 2 for changes resulting from triggers called by top-level triggers; and so forth.
If there are, SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName.
Hence sqlite3_set_auxdata_APIName should be called near the end of the function implementation and the function implementation should not make any use of P after sqlite3_set_auxdata_APIName has been called.
The sqlite3_mutex_enter_APIName and sqlite3_mutex_try_APIName routines attempt to enter a mutex.
The sqlite3_get_autocommit_APIName interface returns non-zero or zero if the given database connection is or is not in autocommit mode, respectively.
The sqlite3_mutex_free_APIName routine deallocates a previously allocated dynamic mutex.
The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates sqlite3_aggregate_context_APIParam_2 of memory, zeroes out that memory, and returns a pointer to the new memory.
Calling sqlite3_free_APIName with a pointer previously returned by sqlite3_malloc_APIName or sqlite3_realloc_APIName releases that memory so that it might be reused.
