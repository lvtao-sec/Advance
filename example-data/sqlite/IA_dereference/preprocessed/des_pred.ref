['The sqlite3_data_count_APIName will return non-zero if previous call to sqlite3_step_APIName returned SQLITE_ROW_API_constant, except in the case of the PRAGMA incremental_vacuum where it always returns zero since each step of that multi-step pragma returns 0 columns of data.', 'sqlite3_data_count_apiname return non_zero if previous call sqlite3_step_apiname return sqlite_row_api_constant , except case pragma incremental_vacuum where always return zero since each step multi_step pragma return # column datum']
['When the callback returns SQLITE_DENY_API_constant, the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message explaining that access is denied.', 'when callback return sqlite_deny_api_constant , sqlite3_prepare_v2_apiname or equivalent call trigger authorizer fail error message explain access be deny']
['Likewise, registering a callback using sqlite3_wal_hook_APIName disables the automatic checkpoint mechanism configured by sqlite3_wal_autocheckpoint_APIName.', 'likewise , register callback use sqlite3_wal_hook_apiname disable automatic checkpoint mechanism configure by sqlite3_wal_autocheckpoint_apiname']
['This is a legacy interface that is preserved for backwards compatibility.', 'be legacy interface be preserve backwards compatibility']
['In every case sqlite3_column_int_APIParam_1 is a pointer to the prepared statement that is being evaluated (the sqlite3_stmt* that was returned from sqlite3_prepare_v2_APIName or one of its variants) and sqlite3_column_int_APIParam_2 is the index of the column for which information should be returned.', 'every case sqlite3_column_int_apiparam_1 be pointer prepare statement be evaluate sqlite3_column_int_apiparam_2 be index column which information should be return']
['If the specified column is "rowid", "oid" or "_rowid_" and the table is not a WITHOUT ROWID table and an INTEGER PRIMARY KEY column has been explicitly declared, then the output parameters are set for the explicitly declared column.', 'if specify column be rowid , oid or rowid table be without rowid table integer primary key column have explicitly declare , then output parameter be set explicitly declare column']
['But these numbers are not part of the result table itself.', 'but number be part result table']
['The sqlite3_str_appendall_APIName method appends the complete content of zero-terminated string sqlite3_str_appendall_APIParam_2 onto the end of sqlite3_str object X.', 'sqlite3_str_appendall_apiname method append complete content zero_terminate string sqlite3_str_appendall_apiparam_2 onto end sqlite3_str object x']
['SQLite is free to discard the metadata at any time, including:', 'sqlite be free discard metadata time , include']
['In prior versions of SQLite, sharing was enabled or disabled for each thread separately.', 'prior version sqlite , sharing be enable or disable each thread separately']
['The details of the operation codes, their meanings, the parameters they take, and what they do are all subject to change without notice.', 'detail operation code , meaning , parameter take , what be subject change without notice']
['The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements.', 'sqlite3_mutex_held_apiname sqlite3_mutex_notheld_apiname routine be intend inside assert_apiname statement']
['A BLOB referenced by sqlite3_blob_open_APIName may be read using the sqlite3_blob_read_APIName interface and modified by using sqlite3_blob_write_APIName.', 'blob reference by sqlite3_blob_open_apiname be read use sqlite3_blob_read_apiname interface modify by use sqlite3_blob_write_apiname']
['See also: sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName.', 'see : sqlite3_mutex_held_apiname sqlite3_mutex_notheld_apiname']
['The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter.', 'sqlite3_sleep_apiname function cause current thread suspend execution least number millisecond specify parameter']
['Calling sqlite3_wal_hook_APIName replaces any previously registered write-ahead log callback.', 'call sqlite3_wal_hook_apiname replace previously register write_ahead log callback']
['The sqlite3_table_column_metadata_APIName interface returns SQLITE_ERROR_API_constant and if the specified column does not exist.', 'sqlite3_table_column_metadata_apiname interface return sqlite_error_api_constant if specify column do exist']
['The sqlite3_shutdown_APIName interface must only be called from a single thread.', 'sqlite3_shutdown_apiname interface must only be call single thread']
["The system is said to be in a deadlocked state if connection A has registered for an unlock-notify callback on the conclusion of connection B's transaction, and connection B has itself registered for an unlock-notify callback when connection A's transaction is concluded.", 'system be say be deadlocke state if connection have register unlock_notify callback conclusion connection b transaction , connection b have register unlock_notify callback when connection transaction be conclude']
['In this case subsequent calls to sqlite3_last_insert_rowid_APIName return the rowid associated with these internal INSERT operations, which leads to unintuitive results.', 'case subsequent call sqlite3_last_insert_rowid_apiname return rowid associate internal insert operation , which lead unintuitive result']
['The only differences between the three "sqlite3_create_function*" routines are the text encoding expected for the second parameter (the name of the function being created) and the presence or absence of a destructor callback for the application data pointer.', 'only difference between three sqlite3_create_function routine be text encode expect second paramet presence or absence destructor callback application datum pointer']
[' The xCreate and xConnect methods of a virtual table module call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.', 'xcreate xconnect method virtual table module call interface declare format virtual table implement']
['If sqlite3_msize_APIParam_1 is a NULL pointer then sqlite3_msize_APIName returns zero.', 'if sqlite3_msize_apiparam_1 be null pointer then sqlite3_msize_apiname return zero']
['This will keep the SQL function load_extension_APIName disabled and prevent SQL injections from giving attackers access to extension loading capabilities.', 'keep sql function load_extension_apiname disabled prevent sql injection give attacker access extension loading capability']
['The first argument to the sqlite3_bind_*_APIName routines is always a pointer to the sqlite3_stmt object returned from sqlite3_prepare_v2_APIName or its variants.', 'first argument sqlite3_bind _ apiname routine be always pointer sqlite3_stmt object return sqlite3_prepare_v2_apiname or variant']
['Calling sqlite3_close_APIName or sqlite3_close_v2_APIName with a NULL pointer argument is a harmless no-op.', 'call sqlite3_close_apiname or sqlite3_close_v2_apiname null pointer argument be harmless no_op']
['This routine can be used to find the number of SQL parameters in a prepared statement.', 'routine can be use find number sql parameter prepare statement']
['The sqlite3_snprintf_APIName routine is similar to "snprintf_APIName" from the standard C library.', 'sqlite3_snprintf_apiname routine be similar snprintf_apiname standard c library']
[' The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P. The application must eventually free every sqlite3_snapshot object using this routine to avoid a memory leak.The sqlite3_snapshot_free_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.', 'sqlite3_snapshot_free_apiname interface destroy sqlite3_snapshot p. application must eventually free every sqlite3_snapshot object use routine avoid memory sqlite3_snapshot_free_apiname interface be only available when sqlite_enable_snapshot compile_time option be use']
['It is always safe to use the value returned by sqlite3_str_new_APIName as the sqlite3_str parameter to any of the other sqlite3_str methods.', 'be always safe value return by sqlite3_str_new_apiname as sqlite3_str paramet other sqlite3_str method']
['sqlite3_execnot exist in API_info', 'sqlite3_execnot exist api_info']
['This is different from every other SQLite interface.', 'be different every other sqlite interface']
['Otherwise no conversion occurs.', 'otherwise no conversion occur']
['If there is no AS clause then the name of the column is unspecified and may change from one release of SQLite to the next.', 'if be no as clause then name column be unspecified change one release sqlite next']
['For all forms except ?NNN, this will correspond to the number of unique parameters.', 'form except nnn , correspond number unique parameter']
['The sqlite3_bind_pointer_APIName routine causes the I-th parameter in prepared statement S to have an SQL value of NULL, but to also be associated with the pointer P of type T.  D is either a NULL pointer or a pointer to a destructor function for P. SQLite will invoke the destructor D with a single argument of P when it is finished using P.  The T parameter should be a static string, preferably a string literal.', 'sqlite3_bind_pointer_apiname routine cause i_th parameter prepare statement s have sql value null , but be associate pointer p type t. d be either null pointer or pointer destructor function p. sqlite invoke destructor d single argument p when be finish use p. t parameter should be static string , preferably stre literal']
['The return value from sqlite3_column_blob_APIName for a zero-length BLOB is a NULL pointer.', 'return value sqlite3_column_blob_apiname zero_length blob be null pointer']
['The sqlite3_interrupt_APIName call is in effect until all currently running SQL statements on database connection sqlite3_interrupt_APIParam_1 complete.', 'sqlite3_interrupt_apiname call be effect until currently run sql statement database connection sqlite3_interrupt_apiparam_1 complete']
['sqlite3_result_blobnot exist in API_info', 'sqlite3_result_blobnot exist api_info']
['The value returned by sqlite3_memory_highwater_APIName is the high-water mark prior to the reset.', 'value return by sqlite3_memory_highwater_apiname be high_water mark prior reset']
['The SQLITE_MUTEX_NOOP implementation is a set of routines that does no real locking and is appropriate for use in a single-threaded application.', 'sqlite_mutex_noop implementation be set routine do no real locking be appropriate single_threaded application']
['And we do not want the assert_APIName containing the call to sqlite3_mutex_held_APIName to fail, so a non-zero return is the appropriate thing to do.', 'PRON- want assert_apiname contain call sqlite3_mutex_held_apiname fail , so non_zero return be appropriate thing']
['Hence, the calling function can deallocate or modify the text after they return without harm.', 'hence , call function can deallocate or modify text after return without harm']
['The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time.', 'sqlite3_compileoption_used_apiname function return # or # indicate whether specified option be define compile time']
['Some virtual table implementations may INSERT rows into rowid tables as part of committing a transaction (e.g.', 'virtual table implementation insert row into rowid table as part commit transaction e']
['The sqlite3_result_error_code_APIName function changes the error code returned by SQLite as a result of an error in a function.', 'sqlite3_result_error_code_apiname function change error code return by sqlite as result error function']
['sqlite3_create_function not exist in API_info', 'sqlite3_create_function exist api_info']
['This is true if any column of the row is changed, even a column other than the one the BLOB handle is open on.', 'be true if column row be change , even column other than one blob handle be open']
['sqlite3_collation_needednot exist in API_info', 'sqlite3_collation_needednot exist api_info']
['The sqlite3_config_APIName interface may only be invoked prior to library initialization using sqlite3_initialize_APIName or after shutdown by sqlite3_shutdown_APIName.', 'sqlite3_config_apiname interface only be invoke prior library initialization use sqlite3_initialize_apiname or after shutdown by sqlite3_shutdown_apiname']
['Applications that use SQLite mutexes should use only the dynamic mutexes returned by SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant.', 'application sqlite mutexe should only dynamic mutexe return by sqlite_mutex_fast_api_constant or sqlite_mutex_recursive_api_constant']
['The sqlite3_result_null_APIName interface sets the return value of the application-defined function to be NULL.', 'sqlite3_result_null_apiname interface set return value application_defined function be null']
['Unbound parameters are interpreted as NULL.', 'unbound parameter be interpret as null']
['Contrary to the intuition of many, sqlite3_reset_APIName does not reset the bindings on a prepared statement.', 'contrary intuition many , sqlite3_reset_apiname do reset binding prepare statement']
['The names returned are the original un-aliased names of the database, table, and column.', 'name return be original un_aliased name database , table , column']
['On success, the sqlite3_prepare_APIName family of routines return SQLITE_OK_API_constant; otherwise an error code is returned by sqlite3_prepare_APIName.', 'success , sqlite3_prepare_apiname family routine return sqlite_ok_api_constant ; otherwise error code be return by sqlite3_prepare_apiname']
['The sqlite3_trace_v2_APIName interface registers a trace callback function X against database connection D, using property mask M and context pointer P.  If the X callback is NULL or if the M mask is zero, then tracing is disabled.', 'sqlite3_trace_v2_apiname interface register trace callback function x against database connection d , use property mask m context pointer p. if x callback be null or if m mask be zero , then trace be disabled']
['The strings returned by these two routines should be released by sqlite3_free_APIName.', 'string return by two routine should be release by sqlite3_free_apiname']
['If the sqlite3_realloc_APIParam_2 parameter to sqlite3_realloc_APIName is zero or negative then the behavior is exactly the same as calling sqlite3_free_APIName.', 'if sqlite3_realloc_apiparam_2 parameter sqlite3_realloc_apiname be zero or negative then behavior be exactly as call sqlite3_free_apiname']
['If sqlite3_malloc_APIName is unable to obtain sufficient free memory, it returns a NULL pointer.', 'if sqlite3_malloc_apiname be unable obtain sufficient free memory , return null pointer']
['If the sqlite3_status64_APIParam_4 is true, then the highest record value is reset after *pHighwater is written.', 'if sqlite3_status64_apiparam_4 be true , then high record value be reset after phighwater be write']
['The first two constants (SQLITE_MUTEX_FAST_API_constant and SQLITE_MUTEX_RECURSIVE_API_constant) cause sqlite3_mutex_alloc_APIName to create a new mutex.', 'first two constant cause sqlite3_mutex_alloc_apiname create mutex']
['If the 2nd parameter to sqlite3_exec_APIName is a NULL pointer, a pointer to an empty string, or a pointer that contains only whitespace and/or SQL comments, then no SQL statements are evaluated and the database is not changed.', 'if 2nd parameter sqlite3_exec_apiname be null pointer , pointer empty string , or pointer contain only whitespace sql comment , then no sql statement be evaluate database be change']
['sqlite3_result_textnot exist in API_info', 'sqlite3_result_textnot exist api_info']
['Unless it returns SQLITE_MISUSE_API_constant, the sqlite3_wal_checkpoint_v2_APIName interface sets the error information that is queried by sqlite3_errcode_APIName and sqlite3_errmsg_APIName.', 'unless return sqlite_misuse_api_constant , sqlite3_wal_checkpoint_v2_apiname interface set error information be query by sqlite3_errcode_apiname sqlite3_errmsg_apiname']
['Unless SQLITE_MISUSE_API_constant is returned by sqlite3_blob_write_APIName, sqlite3_blob_write_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions.', 'unless sqlite_misuse_api_constant be return by sqlite3_blob_write_apiname , sqlite3_blob_write_apiname set database connection error code message accessible via sqlite3_errcode_apiname sqlite3_errmsg_apiname relate function']
['If the action code is SQLITE_READ_API_constant and the callback returns SQLITE_IGNORE_API_constant then the prepared statement statement is constructed to substitute a NULL value in place of the table column that would have been read if SQLITE_OK_API_constant had been returned.', 'if action code be sqlite_read_api_constant callback return sqlite_ignore_api_constant then prepare statement statement be construct substitute null value place table column would have read if sqlite_ok_api_constant have return']
['Invoking either sqlite3_trace_APIName or sqlite3_trace_v2_APIName will cancel the profile callback.', 'invoke either sqlite3_trace_apiname or sqlite3_trace_v2_apiname cancel profile callback']
[' Return the number of columns in the result set returned by the prepared statement.', 'return number column result set return by prepared statement']
['When an unlock-notify callback is registered, the application provides a single void* pointer that is passed to the callback when it is invoked.', 'when unlock_notify callback be register , application provide single void pointer be pass callback when be invoke']
['The result is written into the buffer supplied as sqlite3_snprintf_APIParam_2 whose size is given by sqlite3_snprintf_APIParam_1.', 'result be write into buffer supply as sqlite3_snprintf_apiparam_2 whose size be give by sqlite3_snprintf_apiparam_1']
[' These routines provide access to the set of SQL language keywords recognized by SQLite.', 'routine provide access set sql language keyword recognize by sqlite']
['If any other process is running a checkpoint operation at the same time, the lock cannot be obtained and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName.', 'if other process be run checkpoint operation time , lock can be obtain sqlite_busy_api_constant be return by sqlite3_wal_checkpoint_v2_apiname']
['The length returned by sqlite3_str_length_APIName does not include the zero-termination byte.', 'length return by sqlite3_str_length_apiname do include zero_termination byte']
['The entry point is sqlite3_load_extension_APIParam_3.', 'entry point be sqlite3_load_extension_apiparam_3']
['Use sqlite3_clear_bindings_APIName to reset the bindings.', 'sqlite3_clear_bindings_apiname reset binding']
['These routines extract type, size, and content information from protected sqlite3_value objects.', 'routine extract type , size , content information protect sqlite3_value object']
['The preferred routine to use is sqlite3_prepare_v2_APIName.', 'preferred routine be sqlite3_prepare_v2_apiname']
['The number of milliseconds of sleep actually requested from the operating system is returned by sqlite3_sleep_APIName.', 'number millisecond sleep actually request operating system be return by sqlite3_sleep_apiname']
['The sqlite3_mutex_try_APIName interface returns SQLITE_OK_API_constant upon successful entry.', 'sqlite3_mutex_try_apiname interface return sqlite_ok_api_constant upon successful entry']
['The first parameter is the database connection to which the SQL function is to be added.', 'first parameter be database connection which sql function be be add']
['The sqlite3_str_new_APIParam_1 parameter to sqlite3_str_new_APIName may be NULL.', 'sqlite3_str_new_apiparam_1 parameter sqlite3_str_new_apiname be null']
['The circumstances under which SQLite will enforce the soft heap limit may changes in future releases of SQLite.', 'circumstance under which sqlite enforce soft heap limit change future release sqlite']
['If the xCallback argument is NULL then the collating function is deleted.', 'if xcallback argument be null then collate function be delete']
['For an in-memory database or a "TEMP" database, the serialization is the same sequence of bytes which would be written to disk if that database where backed up to disk.', 'in_memory database or temp database , serialization be sequence byte which would be write disk if database where back up disk']
['However, the column, table, or database of a BLOB handle cannot be changed after the BLOB handle is opened.', 'however , column , table , or database blob handle can be change after blob handle be open']
[' These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName.The sqlite3_str_appendf(X,F,...) and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X.The sqlite3_str_append_APIName method appends exactly N bytes from string S onto the end of the sqlite3_str object X.  N must be non-negative.', 'interface add content sqlite3_str object previously obtain sqlite3_str_appendf sqlite3_str_vappendf_apiname interface use built_in printf functionality sqlite append format text onto end sqlite3_str object x sqlite3_str_append_apiname method append exactly n byte stre s onto end sqlite3_str object x. n must be non_negative']
['The authorizer callback is invoked as SQL statements are being compiled by sqlite3_prepare_APIName or its variants sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName.', 'authorizer callback be invoke as sql statement be compile by sqlite3_prepare_apiname or variant sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_apiname , sqlite3_prepare16_v2_apiname , sqlite3_prepare16_v3_apiname']
['SQLITE_DONE_API_constant means that the statement has finished executing successfully.', 'sqlite_done_api_constant mean statement have finish execute successfully']
['sqlite3_set_auxdata not exist in API_info', 'sqlite3_set_auxdata exist api_info']
['Multiple collating functions can be registered using the same name but with different eTextRep parameters and SQLite will use whichever function requires the least amount of data transformation.', 'multiple collating function can be register use name but different etextrep parameter sqlite whichever function require least amount datum transformation']
['The mutex implementation does not need to make a distinction between SQLITE_MUTEX_RECURSIVE_API_constant and SQLITE_MUTEX_FAST_API_constant if it does not want to.', 'mutex implementation do need make distinction between sqlite_mutex_recursive_api_constant sqlite_mutex_fast_api_constant if do want']
['A trace callback is invoked with four arguments: callback_APIName.', 'trace callback be invoke four argument : callback_apiname']
['The fourth parameter is an arbitrary client data pointer that is passed through into the xCreate and xConnect methods of the virtual table module when a new virtual table is be being created or reinitialized.', 'fourth paramet be arbitrary client datum pointer be pass through into xcreate xconnect method virtual table module when virtual table be be create or reinitialize']
['To delete an existing SQL function or aggregate, pass NULL pointers for all three function callbacks.', 'delete exist sql function or aggregate , pass null pointer three function callback']
['The fourth parameter is the name of the required collation sequence.', 'fourth parameter be name require collation sequence']
['The sqlite3_table_column_metadata(X,D,T,C,....) routine returns information about column C of table T in database D on database connection X.', 'sqlite3_table_column_metadata routine return information about column c table t database d database connection x']
['If sqlite3_prepare16_APIParam_3 is zero, then no prepared statement is generated.', 'if sqlite3_prepare16_apiparam_3 be zero , then no prepared statement be generate']
['SQLITE_OK_API_constant is returned by sqlite3_snapshot_recover_APIName if successful, or an SQLite error code otherwise.', 'sqlite_ok_api_constant be return by sqlite3_snapshot_recover_apiname if successful , or sqlite error code otherwise']
['These functions return information about the Nth result column returned by the statement, where N is the second function argument.', 'function return information about nth result column return by statement , where n be second function argument']
['If sqlite3_config_APIName is called after sqlite3_initialize_APIName and before sqlite3_shutdown_APIName then it will return SQLITE_MISUSE_API_constant.', 'if sqlite3_config_apiname be call after sqlite3_initialize_apiname before sqlite3_shutdown_apiname then return sqlite_misuse_api_constant']
['On success, SQLITE_OK_API_constant is returned by sqlite3_blob_open_APIName and the new BLOB handle is stored in *ppBlob.', 'success , sqlite_ok_api_constant be return by sqlite3_blob_open_apiname blob handle be store ppblob']
['So the longest string that can be completely written will be n-1 characters.', 'so long string can be completely write be n_1 character']
['The profile callback time is in units of nanoseconds, however the current implementation is only capable of millisecond resolution so the six least significant digits in the time are meaningless.', 'profile callback time be unit nanosecond , however current implementation be only capable millisecond resolution so six least significant digit time be meaningless']
['SQLite automatically frees the memory allocated by sqlite3_aggregate_context_APIName when the aggregate query concludes.', 'sqlite automatically free memory allocate by sqlite3_aggregate_context_apiname when aggregate query conclude']
['Otherwise, if no error occurs, sqlite3_db_cacheflush_APIName returns SQLITE_OK_API_constant.', 'otherwise , if no error occur , sqlite3_db_cacheflush_apiname return sqlite_ok_api_constant']
['The sqlite3_close_v2_APIParam_1 parameter to sqlite3_close_APIName and sqlite3_close_v2_APIName must be either a NULL pointer or an sqlite3 object pointer obtained from sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName, and not previously closed.', 'sqlite3_close_v2_apiparam_1 parameter sqlite3_close_apiname sqlite3_close_v2_apiname must be either null pointer or sqlite3 object pointer obtain sqlite3_open_apiname , sqlite3_open16_apiname , or sqlite3_open_v2_apiname , previously close']
['Databases managed by external sources can be given much smaller limits designed to prevent a denial of service attack.', 'database manage by external source can be give much small limit design prevent denial service attack']
[' This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1.', 'interface return pointer next prepared statement after sqlite3_next_stmt_apiparam_2 associated database connection sqlite3_next_stmt_apiparam_1']
['The second callback argument is one of SQLITE_INSERT_API_constant, SQLITE_DELETE_API_constant, or SQLITE_UPDATE_API_constant, depending on the operation that caused the callback to be invoked.', 'second callback argument be one sqlite_insert_api_constant , sqlite_delete_api_constant , or sqlite_update_api_constant , depend operation cause callback be invoke']
['This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1.', 'interface return information about predict measured performance sqlite3_stmt_scanstatus_apiparam_1']
['The highest recorded value is returned by sqlite3_status_APIName in *pHighwater.', 'high record value be return by sqlite3_status_apiname phighwater']
['The log message is stored in a fixed-length buffer on the stack.', 'log message be store fixed_length buffer stack']
['Only a single authorizer can be in place on a database connection at a time.', 'only single authorizer can be place database connection time']
['If the blocked connection is attempting to obtain a write-lock on a shared-cache table, and more than one other connection currently holds a read-lock on the same table, then SQLite arbitrarily selects one of the other connections to use as the blocking connection.', 'if block connection be attempt obtain write_lock shared_cache table , more than one other connection currently hold read_lock table , then sqlite arbitrarily select one other connection as block connection']
['The fourth parameter is the number of pages currently in the write-ahead log file, including those that were just committed.', 'fourth paramet be number page currently write_ahead log file , include be just commit']
['M is the size of the buffer P, which might be larger than N.  If sqlite3_deserialize_APIParam_5 is larger than N, and the SQLITE_DESERIALIZE_READONLY_API_constant bit is not set in F, then SQLite is permitted to add content to the in-memory database as long as the total size does not exceed sqlite3_deserialize_APIParam_5 bytes.', 'm be size buffer p , which may be large than n. if sqlite3_deserialize_apiparam_5 be large than n , sqlite_deserialize_readonly_api_constant bit be set f , then sqlite be permit add content in_memory database as long as total size do exceed sqlite3_deserialize_apiparam_5 byte']
[' SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random ROWIDs when inserting new records into a table that already uses the largest possible ROWID.', 'sqlite contain high_quality pseudo_random number generator use select random rowid when insert record into table already use large possible rowid']
['SQLite contains a high-quality pseudo-random number generator (PRNG) used to select random ROWIDs when inserting new records into a table that already uses the largest possible ROWID.', 'sqlite contain high_quality pseudo_random number generator use select random rowid when insert record into table already use large possible rowid']
['If the sqlite3_open_APIParam_1 is an empty string, then a private, temporary on-disk database will be created.', 'if sqlite3_open_apiparam_1 be empty string , then private , temporary on_disk database be create']
['The preupdate hook only fires for changes to real database tables; the preupdate hook is not invoked for changes to virtual tables or to system tables like sqlite_master or sqlite_stat1.', 'preupdate hook only fire change real database table ; preupdate hook be invoke change virtual table or system table like sqlite_master or sqlite_stat1']
['SQLite uses the path component of the URI as the name of the disk file which contains the database.', 'sqlite us path component uri as name disk file which contain database']
['The second argument is a pointer to the function to invoke when a row is updated, inserted or deleted in a rowid table.', 'second argument be pointer function invoke when row be update , insert or delete rowid table']
['If the caller knows that the supplied string is nul-terminated, then there is a small performance advantage to passing an sqlite3_prepare16_v2_APIParam_3 parameter that is the number of bytes in the input string including the nul-terminator.', 'if caller know supply string be nul_terminate , then be small performance advantage pass sqlite3_prepare16_v2_apiparam_3 paramet be number byte input string include nul_terminator']
['One way around this problem is to check the extended error code returned by an sqlite3_step_APIName call.', 'one way around problem be check extended error code return by sqlite3_step_apiname call']
['The sqlite3_column_type_APIName routine returns the datatype code for the initial data type of the result column.', 'sqlite3_column_type_apiname routine return datatype code initial datum type result column']
['If the database is opened (and/or created) successfully, then SQLITE_OK_API_constant is returned by sqlite3_open_APIName.', 'if database be open successfully , then sqlite_ok_api_constant be return by sqlite3_open_apiname']
['The integer return value from the callback is currently ignored, though this may change in future releases.', 'integer return value callback be currently ignore , though change future release']
['In this case there is no "blocking connection", so invoking sqlite3_unlock_notify_APIName results in the unlock-notify callback being invoked immediately.', 'case be no block connection , so invoking sqlite3_unlock_notify_apiname result unlock_notify callback invoke immediately']
['When a connection (known as the blocked connection) fails to obtain a shared-cache lock and SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName to the caller, the identity of the database connection (the blocking connection) that has locked the required resource is stored internally.', 'when connection fail obtain shared_cache lock sqlite_locked_api_constant be return by sqlite3_unlock_notify_apiname caller , identity database connection have lock require resource be store internally']
['The application must not read or write any part of a block of memory after it has been released using sqlite3_free_APIName or sqlite3_realloc_APIName.', 'application must read or write part block memory after have release use sqlite3_free_apiname or sqlite3_realloc_apiname']
['sqlite3_column_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant.', 'sqlite3_column_type_apiparam_0 be one sqlite_integer_api_constant , sqlite_float_api_constant , sqlite_text_api_constant , sqlite_blob_api_constant , or sqlite_null_api_constant']
['The value returned by sqlite3_changes_APIName immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero.', 'value return by sqlite3_changes_apiname immediately after insert , update or delete statement run view be always zero']
['SQLite strives to keep heap memory utilization below the soft heap limit by reducing the number of pages held in the page cache as heap memory usages approaches the limit.', 'sqlite strive keep heap memory utilization below soft heap limit by reduce number page hold page cache as heap memory usage approach limit']
['For example, the statement "CREATE TABLE BEGIN_APIName;" is accepted by SQLite, and creates a new table named "BEGIN" with three columns named "REPLACE", "PRAGMA", and "END".', 'example , statement create table begin_apiname ; be accept by sqlite , create table name begin three column name replace , pragma , end']
['Each call to sqlite3_set_authorizer overrides the previous call.', 'each call sqlite3_set_authorizer override previous call']
['If the callback on a commit hook function returns non-zero, then the commit is converted into a rollback.', 'if callback commit hook function return non_zero , then commit be convert into rollback']
['The input to sqlite3_complete_APIName must be a zero-terminated UTF-8 string.', 'input sqlite3_complete_apiname must be zero_terminate utf_8 string']
['In other words, the filename will be an absolute pathname, even if the filename used to open the database originally was a URI or relative pathname.', 'other word , filename be absolute pathname , even if filename use open database originally be uri or relative pathname']
['sqlite3_create_function_v2 not exist in API_info', 'sqlite3_create_function_v2 exist api_info']
['If a WAL file remains on disk after all database connections close (either through the use of the SQLITE_FCNTL_PERSIST_WAL_API_constant file control or because the last process to have the database opened exited without calling sqlite3_close_APIName) and a new connection is subsequently opened on that database and WAL file, the sqlite3_snapshot_open_APIName interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.', 'if wal file remain disk after database connection close connection be subsequently open database wal file , sqlite3_snapshot_open_apiname interface only be able open last transaction add wal file even though wal file contain other valid transaction']
['The sqlite3_result_double_APIName interface sets the result from an application-defined function to be a floating point value specified by its 2nd argument.', 'sqlite3_result_double_apiname interface set result application_defined function be float point value specify by 2nd argument']
['The sqlite3_str_value_APIName method returns a pointer to the current content of the dynamic string under construction in X.', 'sqlite3_str_value_apiname method return pointer current content dynamic string under construction x']
['Use sqlite3_db_config(db,SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant,..) to enable or disable only the C-API.', 'sqlite3_db_config enable or disable only c_api']
['The name of a result column is the value of the "AS" clause for that column, if there is an AS clause.', 'name result column be value as clause column , if be as clause']
['The sqlite3_prepare_v2_APIName interface works exactly the same as sqlite3_prepare_v3_APIName with a zero prepFlags parameter.', 'sqlite3_prepare_v2_apiname interface work exactly as sqlite3_prepare_v3_apiname zero prepflag parameter']
['The sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName interfaces are recommended for all new programs.', 'sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_v2_apiname , sqlite3_prepare16_v3_apiname interface be recommend program']
['The SQLITE_CHECKPOINT_FULL_API_constant, RESTART and TRUNCATE modes also obtain the exclusive "writer" lock on the database file.', 'sqlite_checkpoint_full_api_constant , restart truncate mode obtain exclusive writer lock database file']
[' sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer.', 'sqlite3_blob_read_apiname be use read datum open blob handle into caller_supplied buffer']
['The SQLite core uses these three routines for all of its own internal memory allocation needs.', 'sqlite core use three routine internal memory allocation need']
['The sqlite3_os_end_APIName routine undoes the effect of sqlite3_os_init_APIName.', 'sqlite3_os_end_apiname routine undoes effect sqlite3_os_init_apiname']
['The values returned by sqlite3_errcode_APIName and/or sqlite3_extended_errcode_APIName might change with each API call.', 'value return by sqlite3_errcode_apiname sqlite3_extended_errcode_apiname may change each api call']
['The sqlite3_strglob_APIName interface returns zero if and only if string X matches the GLOB pattern P. The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite.', 'sqlite3_strglob_apiname interface return zero if only if string x match glob pattern p. definition glob pattern matching use sqlite3_strglob_apiname be as x glob p operator sql dialect understand by sqlite']
['The sqlite3_column_name_APIName interface returns a pointer to a zero-terminated UTF-8 string and sqlite3_column_name16_APIName returns a pointer to a zero-terminated UTF-16 string.', 'sqlite3_column_name_apiname interface return pointer zero_terminate utf_8 string sqlite3_column_name16_apiname return pointer zero_terminate utf_16 string']
['SQLite takes the text result from the application from the 2nd parameter of the sqlite3_result_text* interfaces.', 'sqlite take text result application 2nd parameter sqlite3_result_text interface']
['However, such calls must not close the database connection nor finalize or reset the prepared statement in which the function is running.', 'however , such call must close database connection nor finalize or reset prepared statement which function be run']
['If the 3rd parameter is non-negative, then it must be the byte offset into the string where the NUL terminator would appear if the string where NUL terminated.', 'if 3rd parameter be non_negative , then must be byte offset into string where nul terminator would appear if string where nul terminate']
['Then azResult holds this content:', 'then azresult hold content']
['The sqlite3_stmt_busy_APIName interface returns true (non-zero) if the prepared statement sqlite3_stmt_busy_APIParam_1 has been stepped at least once using sqlite3_step_APIName but has neither run to completion (returned SQLITE_DONE_API_constant from sqlite3_step_APIName) nor been reset using sqlite3_reset_APIName.', 'sqlite3_stmt_busy_apiname interface return true if prepared statement sqlite3_stmt_busy_apiparam_1 have step least once use sqlite3_step_apiname but have neither run completion nor reset use sqlite3_reset_apiname']
[' The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter (the 5th parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.This routine must be called from the same thread in which the application-defined function is running.', 'sqlite3_user_data_apiname interface return copy pointer be puserdata paramet sqlite3_create_function_apiname sqlite3_create_function16_apiname routine originally register application define routine must be call thread which application_defined function be run']
[' The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite.', 'sqlite3_soft_heap_limit64_apiname interface set query soft limit amount heap memory be allocate by sqlite']
['The sqlite3_trace_v2_APIName interface is intended to replace the legacy interfaces sqlite3_trace_APIName and sqlite3_profile_APIName, both of which are deprecated.', 'sqlite3_trace_v2_apiname interface be intend replace legacy interface sqlite3_trace_apiname sqlite3_profile_apiname , both which be deprecate']
['Whether or not a persistent internal datatype conversion occurs is undefined and may change from one release of SQLite to the next.', 'whether or persistent internal datatype conversion occur be undefined change one release sqlite next']
['If the callback pointer to sqlite3_exec_APIName is NULL, then no callback is ever invoked and result rows are ignored.', 'if callback pointer sqlite3_exec_apiname be null , then no callback be ever invoke result row be ignore']
['This must only be used within SQLITE_INSERT_API_constant and SQLITE_UPDATE_API_constant preupdate callbacks; if it is used by an SQLITE_DELETE_API_constant callback then the behavior is undefined.', 'must only be use within sqlite_insert_api_constant sqlite_update_api_constant preupdate callback ; if be use by sqlite_delete_api_constant callback then behavior be undefined']
['The sqlite3_snapshot object returned from a successful call to sqlite3_snapshot_get_APIName must be freed using sqlite3_snapshot_free_APIName to avoid a memory leak.', 'sqlite3_snapshot object return successful call sqlite3_snapshot_get_apiname must be free use sqlite3_snapshot_free_apiname avoid memory leak']
['To avoid having to register all collation sequences before a database can be used, a single callback function may be registered with the database connection to be invoked whenever an undefined collation sequence is required.', 'avoid have register collation sequence before database can be use , single callback function be register database connection be invoke whenever undefined collation sequence be require']
['The cache sharing mode set by this interface effects all subsequent calls to sqlite3_open_APIName, sqlite3_open_v2_APIName, and sqlite3_open16_APIName.', 'cache sharing mode set by interface effect subsequent call sqlite3_open_apiname , sqlite3_open_v2_apiname , sqlite3_open16_apiname']
['The sqlite3_create_module_APIName interface is equivalent to sqlite3_create_module_v2_APIName with a NULL destructor.', 'sqlite3_create_module_apiname interface be equivalent sqlite3_create_module_v2_apiname null destructor']
['The pointer arguments to sqlite3_free_APIName and sqlite3_realloc_APIName must be either NULL or else pointers obtained from a prior invocation of sqlite3_malloc_APIName or sqlite3_realloc_APIName that have not yet been released.', 'pointer argument sqlite3_free_apiname sqlite3_realloc_apiname must be either null or else pointer obtain prior invocation sqlite3_malloc_apiname or sqlite3_realloc_apiname have yet release']
[' This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5, column sqlite3_blob_open_APIParam_4, table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2; in other words, the same BLOB that would be selected by:Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database, but rather the symbolic name of the database.', 'interface open handle blob locate row sqlite3_blob_open_apiparam_5 , column sqlite3_blob_open_apiparam_4 , table sqlite3_blob_open_apiparam_3 database sqlite3_blob_open_apiparam_2 ; other word , blob would be select by : paramet sqlite3_blob_open_apiparam_2 be filename contain database , but rather symbolic name database']
['The C argument is a copy of the context pointer.', 'c argument be copy context pointer']
['If both processes invoke the busy handlers, neither will make any progress.', 'if both process invoke busy handler , neither make progress']
['The first argument is the prepared statement object to be interrogated.', 'first argument be prepare statement object be interrogate']
['The implementation is not required to provide versions of these routines that actually work.', 'implementation be require provide version routine actually work']
['The input to sqlite3_complete16_APIName must be a zero-terminated UTF-16 string in native byte order.', 'input sqlite3_complete16_apiname must be zero_terminate utf_16 stre native byte order']
['These interfaces are only available if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option.', 'interface be only available if sqlite be compile use sqlite_enable_preupdate_hook compile_time option']
['The sqlite3_value_free_APIName interface frees an sqlite3_value object previously obtained from sqlite3_value_dup_APIName.', 'sqlite3_value_free_apiname interface free sqlite3_value object previously obtain sqlite3_value_dup_apiname']
['The values of these parameters (also called "host parameter names" or "SQL parameters") can be set using the sqlite3_bind_*_APIName routines defined here.', 'value parameter can be set use sqlite3_bind _ apiname routine define here']
['However, the signature of the callback function allows SQLite to pass it an array of void* context pointers.', 'however , signature callback function allow sqlite pass array void context pointer']
['The sqlite3_str_finish_APIName interface may return a NULL pointer if any errors were encountered during construction of the string.', 'sqlite3_str_finish_apiname interface return null pointer if error be encounter during construction string']
['The "DROP TABLE" Exception', 'drop table exception']
['If either the current value or the highwater mark is too large to be represented by a 32-bit integer, then the values returned by sqlite3_status_APIName are undefined.', 'if either current value or highwater mark be too large be represent by 32_bit integer , then value return by sqlite3_status_apiname be undefined']
['The sqlite3_realloc64_APIName interfaces works the same as sqlite3_realloc_APIName except that sqlite3_realloc_APIParam_2 is a 64-bit unsigned integer instead of a 32-bit signed integer.', 'sqlite3_realloc64_apiname interface work as sqlite3_realloc_apiname except sqlite3_realloc_apiparam_2 be 64_bit unsigned integer instead 32_bit sign integer']
[' sqlite3_blob_close_APIName closes an open BLOB handle.', 'sqlite3_blob_close_apiname close open blob handle']
['These routines must be called from the same thread as the SQL function that supplied the sqlite3_value* parameters.', 'routine must be call thread as sql function supply sqlite3_value parameter']
['With the "v2" interface, any of the other result codes or extended result codes might be returned as well.', 'v2 interface , other result code or extend result code may be return as well']
['The commit and rollback hook callbacks are not reentrant.', 'commit rollback hook callback be reentrant']
['Its only purpose is to be a placeholder function that can be overloaded by a virtual table.', 'only purpose be be placehold function can be overload by virtual table']
['See also: sqlite3_temp_directory', 'see : sqlite3_temp_directory']
['The sqlite3_str_length_APIName method returns the current length, in bytes, of the dynamic string under construction in sqlite3_str object X.', 'sqlite3_str_length_apiname method return current length , byte , dynamic string under construction sqlite3_str object x']
['The callback function registered by sqlite3_trace_APIName is invoked at various times when an SQL statement is being run by sqlite3_step_APIName.', 'callback function register by sqlite3_trace_apiname be invoke various time when sql statement be run by sqlite3_step_apiname']
['If two or more threads call one or more column metadata interfaces for the same prepared statement and result column at the same time then the results are undefined.', 'if two or more thread call one or more column metadata interface prepare statement result column time then result be undefined']
['When INSERT OR REPLACE encounters a constraint violation, it does not fail.', 'when insert or replace encounter constraint violation , do fail']
['The authorizer callback must not do anything that will modify the database connection that invoked the authorizer callback.', 'authorizer callback must anything modify database connection invoke authorizer callback']
['The sqlite3_reset_APIName interface does not change the values of any bindings on the prepared statement S.', 'sqlite3_reset_apiname interface do change value binding prepared statement s']
['If sqlite3_collation_needed16_APIName is used, the names are passed as UTF-16 in machine native byte order.', 'if sqlite3_collation_needed16_apiname be use , name be pass as utf_16 machine native byte order']
['If the SQLITE_OPEN_FULLMUTEX_API_constant flag is set then the database connection opens in the serialized threading mode unless single-thread was previously selected at compile-time or start-time.', 'if sqlite_open_fullmutex_api_constant flag be set then database connection open serialize threading mode unless single_thread be previously select compile_time or start_time']
['After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName, sqlite3_step_APIName must be called one or more times to evaluate the statement.', 'after prepared statement have prepare use sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_v2_apiname , or sqlite3_prepare16_v3_apiname or one legacy interface sqlite3_prepare_apiname or sqlite3_prepare16_apiname , sqlite3_step_apiname must be call one or more time evaluate statement']
['All calls obtain an exclusive "checkpoint" lock on the database file.', 'call obtain exclusive checkpoint lock database file']
["For example, if connection X is waiting for connection Y's transaction to be concluded, and similarly connection Y is waiting on connection X's transaction, then neither connection will proceed and the system may remain deadlocked indefinitely.", 'example , if connection x be wait connection y transaction be conclude , similarly connection y be wait connection x transaction , then neither connection proceed system remain deadlocke indefinitely']
['This interface is not for use by applications.', 'interface be by application']
['The SQLite core uses these routines for thread synchronization.', 'sqlite core use routine thread synchronization']
['These interfaces are available only on Windows.', 'interface be available only window']
['sqlite3_total_changes_APIName returns the total number of rows inserted, modified or deleted by all INSERT, UPDATE or DELETE statements completed since the database connection was opened, including those executed as part of trigger programs.', 'sqlite3_total_changes_apiname return total number row insert , modify or delete by insert , update or delete statement complete since database connection be open , include execute as part trigger program']
['An attempt to write to an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant.', 'attempt write expire blob handle fail error code sqlite_abort_api_constant']
['Similarly, sqlite3_shutdown_APIName will invoke sqlite3_os_end_APIName.', 'similarly , sqlite3_shutdown_apiname invoke sqlite3_os_end_apiname']
['A busy handler must not close the database connection or prepared statement that invoked the busy handler.', 'busy handler must close database connection or prepare statement invoke busy handler']
[' The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object.', 'sqlite3_str_new_apiname interface allocate initialize sqlite3_str object']
['In those cases, sqlite3_aggregate_context_APIName might be called for the first time from within xFinal_APIName.', 'case , sqlite3_aggregate_context_apiname may be call first time within xfinal_apiname']
['The sqlite3_mutex_leave_APIName routine exits a mutex that was previously entered by the same thread.', 'sqlite3_mutex_leave_apiname routine exit mutex be previously enter by thread']
['These functions work very much like the parameter binding family of functions used to bind values to host parameters in prepared statements.', 'function work much like paramet bind family function use bind value host parameter prepare statement']
['If this interface is invoked outside the context of an xConnect or xCreate virtual table method then the behavior is undefined.', 'if interface be invoke outside context xconnect or xcreate virtual table method then behavior be undefined']
['This interface allows applications to access the same PRNG for other purposes.', 'interface allow application access prng other purpose']
['These interfaces add content to an sqlite3_str object previously obtained from sqlite3_str_new_APIName.', 'interface add content sqlite3_str object previously obtain sqlite3_str_new_apiname']
['An application-supplied implementation of sqlite3_os_init_APIName or sqlite3_os_end_APIName must return SQLITE_OK_API_constant on success and some other error code upon failure.', 'application_supplied implementation sqlite3_os_init_apiname or sqlite3_os_end_apiname must return sqlite_ok_api_constant success other error code upon failure']
['The third and fourth parameters to this routine are passed directly through to the second and third parameters of the xFileControl method.', 'third fourth parameter routine be pass directly through second third parameter xfilecontrol method']
['If the 3rd parameter to the sqlite3_result_text* interfaces is non-negative, then as many bytes (not characters) of the text pointed to by the 2nd parameter are taken as the application-defined function result.', 'if 3rd parameter sqlite3_result_text interface be non_negative , then as many byte text point by 2nd parameter be take as application_defined function result']
['sqlite3_prepare_v3_APIName differs from sqlite3_prepare_v2_APIName only in having the extra prepFlags parameter, which is a bit array consisting of zero or more of the SQLITE_PREPARE_* flags.', 'sqlite3_prepare_v3_apiname differ sqlite3_prepare_v2_apiname only have extra prepflag parameter , which be bit array consist zero or more sqlite_prepare flag']
['A function where the encoding difference is between UTF16le and UTF16be is a closer match than a function where the encoding difference is between UTF8 and UTF16.', 'function where encoding difference be between utf16le utf16be be close match than function where encoding difference be between utf8 utf16']
['Extension loading is off by default.', 'extension loading be off by default']
['Note that when type conversions occur, pointers returned by prior calls to sqlite3_column_blob_APIName, sqlite3_column_text_APIName, and/or sqlite3_column_text16_APIName may be invalidated.', 'note when type conversion occur , pointer return by prior call sqlite3_column_blob_apiname , sqlite3_column_text_apiname , sqlite3_column_text16_apiname be invalidate']
['The SQLITE_FCNTL_FILE_POINTER_API_constant value for the sqlite3_file_control_APIParam_3 parameter causes a pointer to the underlying sqlite3_file object to be written into the space pointed to by the 4th parameter.', 'sqlite_fcntl_file_pointer_api_constant value sqlite3_file_control_apiparam_3 parameter cause pointer underlie sqlite3_file object be write into space point by 4th parameter']
[' The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context C to be the value T.  Only the lower 8 bits of the subtype T are preserved in current versions of SQLite; higher order bits are discarded.', 'sqlite3_result_subtype_apiname function cause subtype result application_defin sql function sqlite3_context c be value t. only low # bit subtype t be preserve current version sqlite ; high order bit be discard']
['The destructor X in sqlite3_set_auxdata_APIName might be called immediately, before the sqlite3_set_auxdata_APIName interface even returns.', 'destructor x sqlite3_set_auxdata_apiname may be call immediately , before sqlite3_set_auxdata_apiname interface even return']
['There can only be a single busy handler defined for each database connection.', 'can only be single busy handler define each database connection']
['Autocommit mode is disabled by a BEGIN statement.', 'autocommit mode be disable by begin statement']
['The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2_APIName.', 'sqlite3_wal_checkpoint_apiname be equivalent sqlite3_wal_checkpoint_v2_apiname']
['Except if SQLite is built using an edited copy of the amalgamation, then the last four characters of the hash might be different from SQLITE_SOURCE_ID_API_constant.', 'except if sqlite be build use edit copy amalgamation , then last four character hash may be different sqlite_source_id_api_constant']
['See also: sqlite3_db_release_memory_APIName', 'see : sqlite3_db_release_memory_apiname']
[' The sqlite3_stmt_busy_APIName interface returns true (non-zero) if the prepared statement S has been stepped at least once using sqlite3_step_APIName but has neither run to completion (returned SQLITE_DONE from sqlite3_step_APIName) nor been reset using sqlite3_reset_APIName.', 'sqlite3_stmt_busy_apiname interface return true if prepared statement s have step least once use sqlite3_step_apiname but have neither run completion nor reset use sqlite3_reset_apiname']
['The exceptions defined in this paragraph might change in a future release of SQLite.', 'exception define paragraph may change future release sqlite']
['SQLite interprets the error message string from sqlite3_result_error_APIName as UTF-8.', 'sqlite interpret error message string sqlite3_result_error_apiname as utf_8']
['The choice for the new VFS is arbitrary.', 'choice vfs be arbitrary']
['Any callback set by a previous call to sqlite3_update_hook_APIName for the same database connection is overridden.', 'callback set by previous call sqlite3_update_hook_apiname database connection be override']
['As with the LIKE operator, the sqlite3_strlike_APIName function is case insensitive - equivalent upper and lower case ASCII characters match one another.', 'as like operator , sqlite3_strlike_apiname function be case insensitive equivalent upper low case ascii character match one another']
['The database connection pointer sqlite3_next_stmt_APIParam_1 in a call to sqlite3_next_stmt_APIName must refer to an open database connection and in particular must not be a NULL pointer.', 'database connection pointer sqlite3_next_stmt_apiparam_1 call sqlite3_next_stmt_apiname must refer open database connection particular must be null pointer']
['If such a conversion is possible without loss of information (in other words, if the value is a string that looks like a number) then the conversion is performed.', 'if such conversion be possible without loss information then conversion be perform']
['When the callback is invoked, the first argument passed is a copy of the second argument to sqlite3_collation_needed_APIName or sqlite3_collation_needed16_APIName.', 'when callback be invoke , first argument pass be copy second argument sqlite3_collation_needed_apiname or sqlite3_collation_needed16_apiname']
['The sqlite3_result_blob_APIName interface sets the result from an application-defined function to be the BLOB whose content is pointed to by the second parameter and which is N bytes long where N is the third parameter.', 'sqlite3_result_blob_apiname interface set result application_defined function be blob whose content be point by second parameter which be n byte long where n be third parameter']
[' This interface is used to retrieve runtime status information about a single database connection.', 'interface be use retrieve runtime status information about single database connection']
['Note that upon successful completion of an SQLITE_CHECKPOINT_TRUNCATE_API_constant, the log file will have been truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.', 'note upon successful completion sqlite_checkpoint_truncate_api_constant , log file have truncate zero byte so both pnlog pnckpt be set zero']
['This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName.', 'interface disable automatic extension previously register use sqlite3_auto_extension_apiname']
['The "iScanStatusOp" parameter determines which status information to return.', 'iscanstatusop parameter determine which status information return']
['Subsequent calls to sqlite3_get_auxdata_APIName return sqlite3_set_auxdata_APIParam_3 from the most recent sqlite3_set_auxdata_APIName call if the metadata is still valid or NULL if the metadata has been discarded.', 'subsequent call sqlite3_get_auxdata_apiname return sqlite3_set_auxdata_apiparam_3 most recent sqlite3_set_auxdata_apiname call if metadata be still valid or null if metadata have discard']
['If the most recent evaluation of statement sqlite3_finalize_APIParam_1 failed, then sqlite3_finalize_APIName returns the appropriate error code or extended error code.', 'if most recent evaluation statement sqlite3_finalize_apiparam_1 fail , then sqlite3_finalize_apiname return appropriate error code or extended error code']
['If the sqlite3_open_APIParam_1 is ":memory:", then a private, temporary in-memory database is created for the connection.', 'if sqlite3_open_apiparam_1 be : memory : , then private , temporary in_memory database be create connection']
['Except, there are some interfaces that are guaranteed to never change the value of the error code.', 'except , be interface be guarantee never change value error code']
['If the progress callback returns non-zero, the operation is interrupted.', 'if progress callback return non_zero , operation be interrupt']
['On second and subsequent calls to sqlite3_aggregate_context_APIName for the same aggregate function instance, the same buffer is returned by sqlite3_aggregate_context_APIName.', 'second subsequent call sqlite3_aggregate_context_apiname aggregate function instance , buffer be return by sqlite3_aggregate_context_apiname']
['Nor is the update hook invoked when rows are deleted using the truncate optimization.', 'nor be update hook invoke when row be delete use truncate optimization']
['See also: file control opcodes', 'see : file control opcode']
['If these routines are called from within the different thread than the one containing the application-defined function that received the sqlite3_context pointer, the results are undefined.', 'if routine be call within different thread than one contain application_defined function receive sqlite3_context pointer , result be undefined']
['The built-in random_APIName SQL function is an example of a function that is not deterministic.', 'built_in random_apiname sql function be example function be deterministic']
['After a type conversion, the result of calling sqlite3_column_type_APIName is undefined, though harmless.', 'after type conversion , result calling sqlite3_column_type_apiname be undefined , though harmless']
['The sqlite3_bind_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0.', 'sqlite3_bind_pointer_apiname routine be part pointer pass interface add sqlite #']
['This routine is typically called in response to a user action such as pressing "Cancel" or Ctrl-C where the user wants a long query operation to halt immediately.', 'routine be typically call response user action such as press cancel or ctrl_c where user want long query operation halt immediately']
['The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P. SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" respectively.', 'sqlite3_bind_parameter_name_apiname interface return name n_th sql paramet prepare statement p. sql parameter form nnn or : aaa or aaa or aaa have name which be stre nnn or : aaa or aaa or aaa respectively']
['Most SQL functions are deterministic.', 'most sql function be deterministic']
['In this case the application must supply a custom mutex implementation using the SQLITE_CONFIG_MUTEX_API_constant option of the sqlite3_config_APIName function before calling sqlite3_initialize_APIName or any other public sqlite3_ function that calls sqlite3_initialize_APIName.', 'case application must supply custom mutex implementation use sqlite_config_mutex_api_constant option sqlite3_config_apiname function before call sqlite3_initialize_apiname or other public sqlite3 function call sqlite3_initialize_apiname']
['A call to sqlite3_serialize_APIName might return NULL even if the SQLITE_SERIALIZE_NOCOPY_API_constant bit is omitted from argument sqlite3_serialize_APIParam_4 if a memory allocation error occurs.', 'call sqlite3_serialize_apiname may return null even if sqlite_serialize_nocopy_api_constant bit be omit argument sqlite3_serialize_apiparam_4 if memory allocation error occur']
['A protected sqlite3_value object may always be used where an unprotected sqlite3_value object is required, so either kind of sqlite3_value object can be used with this interface.', 'protect sqlite3_value object always be use where unprotected sqlite3_value object be require , so either kind sqlite3_value object can be use interface']
['The sqlite3_mutex_alloc_APIName routine allocates a new mutex and returns a pointer to it.', 'sqlite3_mutex_alloc_apiname routine allocate mutex return pointer']
['If the sqlite3_blob_open_APIParam_6 parameter is non-zero, then the BLOB is opened for read and write access.', 'if sqlite3_blob_open_apiparam_6 parameter be non_zero , then blob be open read write access']
['This interface is used to retrieve runtime status information about a single database connection.', 'interface be use retrieve runtime status information about single database connection']
['A database connection handle is usually returned in *ppDb, even if an error occurs.', 'database connection handle be usually return ppdb , even if error occur']
['The sqlite3_bind_zeroblob_APIName routine binds a BLOB of length N that is filled with zeroes.', 'sqlite3_bind_zeroblob_apiname routine bind blob length n be fill zero']
['The size of the database created by an untrusted script can be contained using the max_page_count PRAGMA.', 'size database create by untrusted script can be contain use max_page_count pragma']
['The error-code preserving interfaces are:', 'error_code preserve interface be']
['When a blocking connections transaction is concluded, there may be more than one blocked connection that has registered for an unlock-notify callback.', 'when block connection transaction be conclude , be more than one block connection have register unlock_notify callback']
['If the BLOB handle passed as sqlite3_blob_write_APIParam_1 was not opened for writing (the flags parameter to sqlite3_blob_open_APIName was zero), sqlite3_blob_write_APIName returns SQLITE_READ_API_constantONLY.', 'if blob handle pass as sqlite3_blob_write_apiparam_1 be open writing , sqlite3_blob_write_apiname return sqlite_read_api_constantonly']
['The values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName do not include the zero terminators at the end of the string.', 'value return by sqlite3_column_bytes_apiname sqlite3_column_bytes16_apiname include zero terminator end string']
['The value of the sqlite3_data_directory variable is intended to act as a replacement for the current directory on the sub-platforms of Win32 where that concept is not present, e.g.', 'value sqlite3_data_directory variable be intend act as replacement current directory sub_platforms win32 where concept be present , e']
['For example, given the database schema:', 'example , give database schema']
['These routines work only with protected sqlite3_value objects.', 'routine work only protect sqlite3_value object']
['The sqlite3_value_text16be_APIName and sqlite3_value_text16le_APIName interfaces extract UTF-16 strings as big-endian and little-endian respectively.', 'sqlite3_value_text16be_apiname sqlite3_value_text16le_apiname interface extract utf_16 string as big_endian little_endian respectively']
['If any of the sqlite3_bind_*_APIName routines are called with a NULL pointer for the prepared statement or with a prepared statement for which sqlite3_step_APIName has been called more recently than sqlite3_reset_APIName, then the call will return SQLITE_MISUSE_API_constant.', 'if sqlite3_bind _ apiname routine be call null pointer prepare statement or prepared statement which sqlite3_step_apiname have call more recently than sqlite3_reset_apiname , then call return sqlite_misuse_api_constant']
['The unlock-notify callback is not reentrant.', 'unlock_notify callback be reentrant']
['See the threading mode documentation for additional information.', 'see thread mode documentation additional information']
['The size of a blob may not be changed by this interface.', 'size blob be change by interface']
['Memory to hold the error message string is managed internally and must not be freed by the application.', 'memory hold error message string be manage internally must be free by application']
['Memory to hold the error message string is managed internally.', 'memory hold error message string be manage internally']
[' The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after committing a transaction if there are sqlite3_wal_autocheckpoint_APIParam_2 or more frames in the write-ahead log file.', 'sqlite3_wal_autocheckpoint_apiname be wrapper around sqlite3_wal_hook_apiname cause database database connection d automatically checkpoint after commit transaction if be sqlite3_wal_autocheckpoint_apiparam_2 or more frame write_ahead log file']
[' Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module.', 'virtual table can provide alternative implementation function use xfindfunction method virtual table module']
['The pArg argument is passed through to the callback.', 'parg argument be pass through callback']
['This interface causes the xEntryPoint_APIName function to be invoked for each new database connection that is created.', 'interface cause xentrypoint_apiname function be invoke each database connection be create']
['If any of these routines are called after sqlite3_reset_APIName or sqlite3_finalize_APIName or after sqlite3_step_APIName has returned something other than SQLITE_ROW_API_constant, the results are undefined.', 'if routine be call after sqlite3_reset_apiname or sqlite3_finalize_apiname or after sqlite3_step_apiname have return something other than sqlite_row_api_constant , result be undefined']
['The X callback is invoked whenever any of the events identified by mask M occur.', 'x callback be invoke whenever event identify by mask m occur']
['Semicolons that are embedded within string literals or quoted identifier names or comments are not independent tokens (they are part of the token in which they are embedded) and thus do not count as a statement terminator.', 'semicolon be embed within string literal or quote identifi name or comment be independent token thus count as statement terminator']
['Type conversions and pointer invalidations might occur in the following cases:', 'type conversion pointer invalidation may occur follow case']
['However, if the F argument contains the SQLITE_SERIALIZE_NOCOPY_API_constant bit, then no memory allocations are made, and the sqlite3_serialize_APIName function will return a pointer to the contiguous memory representation of the database that SQLite is currently using for that database, or NULL if the no such contiguous memory representation of the database exists.', 'however , if f argument contain sqlite_serialize_nocopy_api_constant bit , then no memory allocation be make , sqlite3_serialize_apiname function return pointer contiguous memory representation database sqlite be currently use database , or null if no such contiguous memory representation database exist']
['N is zero for the left-most function argument.', 'n be zero left_most function argument']
['If the 4th parameter to the sqlite3_result_text* interfaces or to sqlite3_result_blob is the special constant SQLITE_STATIC_API_constant, then SQLite assumes that the text or BLOB result is in constant space and does not copy the content of the parameter nor call a destructor on the content when it has finished using that result.', 'if 4th parameter sqlite3_result_text interface or sqlite3_result_blob be special constant sqlite_static_api_constant , then sqlite assume text or blob result be constant space do copy content parameter nor call destructor content when have finish use result']
['Additional sqlite3_trace_APIName callbacks might occur as each triggered subprogram is entered.', 'additional sqlite3_trace_apiname callback may occur as each trigger subprogram be enter']
['The sqlite3_snapshot_get_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.', 'sqlite3_snapshot_get_apiname interface be only available when sqlite_enable_snapshot compile_time option be use']
['See "URI filenames" for additional information.', 'see uri filename additional information']
['sqlite3_bind_pointer not exist in API_info', 'sqlite3_bind_pointer exist api_info']
['sqlite3_auto_extensionnot exist in API_info', 'sqlite3_auto_extensionnot exist api_info']
['sqlite3_update_hooknot exist in API_info', 'sqlite3_update_hooknot exist api_info']
['After at least "ms" milliseconds of sleeping, the handler returns 0 which causes sqlite3_step_APIName to return SQLITE_BUSY_API_constant.', 'after least ms millisecond sleep , handler return # which cause sqlite3_step_apiname return sqlite_busy_api_constant']
['Note to Windows users:  The encoding used for the sqlite3_open_APIParam_1 argument of sqlite3_open_APIName and sqlite3_open_v2_APIName must be UTF-8, not whatever codepage is currently defined.', 'note window user : encode use sqlite3_open_apiparam_1 argument sqlite3_open_apiname sqlite3_open_v2_apiname must be utf_8 , whatever codepage be currently define']
['These routines return 0 if the statement is incomplete.', 'routine return # if statement be incomplete']
['If the implementation does not provide working versions of these routines, it should at least provide stubs that always return true so that one does not get spurious assertion failures.', 'if implementation do provide work version routine , should least provide stub always return true so one do get spurious assertion failure']
['sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table.', 'sqlite3_vtab_collation_apiname only be call within call xbestindex method virtual table']
[' The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes.', 'sqlite3_test_control_apiname interface be use read out internal state sqlite inject fault into sqlite testing purpose']
['The third argument is the value to bind to the parameter.', 'third argument be value bind parameter']
['The second argument is an integer code for a specific SQLITE_STMTSTATUS counter to be interrogated.', 'second argument be integer code specific sqlite_stmtstatus counter be interrogate']
['The sqlite3_table_column_metadata_APIName interface returns SQLITE_OK_API_constant and fills in the non-NULL pointers in the final five arguments with appropriate values if the specified column exists.', 'sqlite3_table_column_metadata_apiname interface return sqlite_ok_api_constant fill non_null pointer final five argument appropriate value if specify column exist']
['The application should never invoke either sqlite3_os_init_APIName or sqlite3_os_end_APIName directly.', 'application should never invoke either sqlite3_os_init_apiname or sqlite3_os_end_apiname directly']
['If sqlite3_realloc_APIName returns NULL and sqlite3_realloc_APIParam_2 is positive, then the prior allocation is not freed.', 'if sqlite3_realloc_apiname return null sqlite3_realloc_apiparam_2 be positive , then prior allocation be free']
['The sqlite3_wal_autocheckpoint_APIName is a wrapper around sqlite3_wal_hook_APIName that causes any database on database connection D to automatically checkpoint after committing a transaction if there are sqlite3_wal_autocheckpoint_APIParam_2 or more frames in the write-ahead log file.', 'sqlite3_wal_autocheckpoint_apiname be wrapper around sqlite3_wal_hook_apiname cause database database connection d automatically checkpoint after commit transaction if be sqlite3_wal_autocheckpoint_apiparam_2 or more frame write_ahead log file']
[' Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations.', 'each prepare statement maintain various sqlite_stmtstatus counter measure number time have perform specific operation']
['Setting a new busy handler clears any previously set handler.', 'set busy handler clear previously set handler']
['The leftmost column of the result set has the index 0.', 'leftmost column result set have index #']
['In order to succeed, the database connection must not be in autocommit mode when sqlite3_snapshot_open_APIName is called.', 'order succeed , database connection must be autocommit mode when sqlite3_snapshot_open_apiname be call']
['The soft heap limit is "soft" because even though SQLite strives to stay below the limit, it will exceed the limit rather than generate an SQLITE_NOMEM_API_constant error.', 'soft heap limit be soft because even though sqlite strive stay below limit , exceed limit rather than generate sqlite_nomem_api_constant error']
['The sqlite3_realloc_APIName interface attempts to resize a prior memory allocation sqlite3_realloc_APIParam_1 to be at least sqlite3_realloc_APIParam_2 bytes.', 'sqlite3_realloc_apiname interface attempt resize prior memory allocation sqlite3_realloc_apiparam_1 be least sqlite3_realloc_apiparam_2 byte']
['The sqlite3_str_finish_APIName interface will also return a NULL pointer if the string in sqlite3_str object sqlite3_str_finish_APIParam_1 is zero bytes long.', 'sqlite3_str_finish_apiname interface return null pointer if string sqlite3_str object sqlite3_str_finish_apiparam_1 be zero byte long']
['In this case the values written to output parameters *pnLog and *pnCkpt are undefined.', 'case value write output parameter pnlog pnckpt be undefined']
['Callback Invocation Details', 'callback invocation detail']
['sqlite3_create_module_v2 not exist in API_info', 'sqlite3_create_module_v2 exist api_info']
['If the parameter N to sqlite3_malloc_APIName is zero or negative then sqlite3_malloc_APIName returns a NULL pointer.', 'if paramet n sqlite3_malloc_apiname be zero or negative then sqlite3_malloc_apiname return null pointer']
['If sqlite3_malloc_APIName fails during the processing of either routine (for example during a conversion from UTF-8 to UTF-16) then a NULL pointer is returned by sqlite3_column_name_APIName.', 'if sqlite3_malloc_apiname fail during process either routine then null pointer be return by sqlite3_column_name_apiname']
['The sqlite3_str_errcode_APIName method returns SQLITE_NOMEM_API_constant following any out-of-memory error, or SQLITE_TOOBIG_API_constant if the size of the dynamic string exceeds SQLITE_MAX_LENGTH, or SQLITE_OK_API_constant if there have been no errors.', 'sqlite3_str_errcode_apiname method return sqlite_nomem_api_constant follow out_of_memory error , or sqlite_toobig_api_constant if size dynamic string exceed sqlite_max_length , or sqlite_ok_api_constant if have no error']
['Support for the diagnostic functions sqlite3_compileoption_used_APIName and sqlite3_compileoption_get_APIName may be omitted by specifying the SQLITE_OMIT_COMPILEOPTION_DIAGS option at compile time.', 'support diagnostic function sqlite3_compileoption_used_apiname sqlite3_compileoption_get_apiname be omit by specify sqlite_omit_compileoption_diag option compile time']
['The SQLITE_OPEN_PRIVATECACHE_API_constant flag causes the database connection to not participate in shared cache mode even if it is enabled.', 'sqlite_open_privatecache_api_constant flag cause database connection participate share cache mode even if be enable']
['If the statement is not a COMMIT and occurs within an explicit transaction then you should rollback the transaction before continuing.', 'if statement be commit occur within explicit transaction then -PRON- should rollback transaction before continue']
['The index value returned is suitable for use as the second parameter to sqlite3_bind_APIName.', 'index value return be suitable as second parameter sqlite3_bind_apiname']
['SQLITE_BUSY_API_constant means that the database engine was unable to acquire the database locks it needs to do its job.', 'sqlite_busy_api_constant mean database engine be unable acquire database lock need job']
['If the blob handle being closed was opened for read-write access, and if the database is in auto-commit mode and there are no other open read-write blob handles or active write statements, the current transaction is committed.', 'if blob handle close be open read_write access , if database be auto_commit mode be no other open read_write blob handle or active write statement , current transaction be commit']
['If no such function exists before this API is called, a new function is created.', 'if no such function exist before api be call , function be create']
['The safest policy is to invoke these routines in one of the following ways:', 'safe policy be invoke routine one follow way']
['If there is already a read transaction open when sqlite3_snapshot_open_APIName is invoked, then the same read transaction remains open (on the same database snapshot) if SQLITE_ERROR_API_constant, SQLITE_BUSY_API_constant or SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName.', 'if be already read transaction open when sqlite3_snapshot_open_apiname be invoke , then read transaction remain open if sqlite_error_api_constant , sqlite_busy_api_constant or sqlite_error_api_constant_snapshot be return by sqlite3_snapshot_open_apiname']
['More details regarding the implementation of aggregate window functions are available here.', 'more detail regard implementation aggregate window function be available here']
['The sqlite3_value returned is a protected sqlite3_value object even if the input is not.', 'sqlite3_value return be protect sqlite3_value object even if input be']
['sqlite3_table_column_metadata_APIName causes all database schemas to be read from disk and parsed, if that has not already been done, and returns an error if any errors are encountered while loading the schema.', 'sqlite3_table_column_metadata_apiname cause database schema be read disk parse , if have already do , return error if error be encounter while load schema']
['A sqlite3_free_table_APIParam_1 table might consist of one or more memory allocations.', 'sqlite3_free_table_apiparam_1 table may consist one or more memory allocation']
['The sqlite3_open_v2_APIName interface works like sqlite3_open_APIName except that it accepts two additional parameters for additional control over the new database connection.', 'sqlite3_open_v2_apiname interface work like sqlite3_open_apiname except accept two additional parameter additional control over database connection']
['Registering a NULL function disables the callback.', 'register null function disable callback']
['The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG_API_constant option to sqlite3_config_APIName.', 'sqlite3_log_apiname interface write message into error log establish by sqlite_config_log_api_constant option sqlite3_config_apiname']
['These routines register callback functions that can be used for tracing and profiling the execution of SQL statements.', 'routine register callback function can be use trace profiling execution sql statement']
['The sqlite3_bind_zeroblob_APIName and sqlite3_result_zeroblob_APIName interfaces and the built-in zeroblob SQL function may be used to create a zero-filled blob to read or write using the incremental-blob interface.', 'sqlite3_bind_zeroblob_apiname sqlite3_result_zeroblob_apiname interface built_in zeroblob sql function be use create zero_filled blob read or write use incremental_blob interface']
['Static mutexes are for internal use by SQLite only.', 'static mutexe be internal by sqlite only']
[' These routines are work-alikes of the "printf_APIName" family of functions from the standard C library.', 'routine be work_alikes printf_apiname family function standard c library']
['This method can be used, for example, to add whitespace indentation.', 'method can be use , example , add whitespace indentation']
['If any sqlite3_bind__APIName routine is passed a prepared statement that has been finalized, the result is undefined and probably harmful.', 'if sqlite3_bind__apiname routine be pass prepared statement have finalize , result be undefined probably harmful']
['If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically.', 'if interrupt sql operation be insert , update , or delete be inside explicit transaction , then entire transaction be roll back automatically']
['These routines are deprecated.', 'routine be deprecate']
['The third and fourth parameters to sqlite3_table_column_metadata_APIName are the table and column name of the desired column, respectively.', 'third fourth parameter sqlite3_table_column_metadata_apiname be table column name desire column , respectively']
['It is provided to support rare applications with unusual needs.', 'be provide support rare application unusual need']
['xStep and xFinal must both be non-NULL.', 'xstep xfinal must both be non_null']
['The first six interfaces (_blob, _double, _int, _int64, _text, and _text16) each return the value of a result column in a specific data format.', 'first six interface each return value result column specific datum format']
['The requested measurement is written into a variable pointed to by the "pOut" parameter.', 'request measurement be write into variable point by pout parameter']
['sqlite3_trace_v2not exist in API_info', 'sqlite3_trace_v2not exist api_info']
['As with all other SQLite APIs, those whose names end with "16" return UTF-16 encoded strings and the other functions return UTF-8.', 'as other sqlite api , whose name end 16 return utf_16 encode string other function return utf_8']
['There is no way to distinguish between an incorrect sqlite3_file_control_APIParam_2 and an SQLITE_ERROR_API_constant return from the underlying xFileControl method.', 'be no way distinguish between incorrect sqlite3_file_control_apiparam_2 sqlite_error_api_constant return underlie xfilecontrol method']
['The datatype after conversion is returned by sqlite3_value_numeric_type_APIName.', 'datatype after conversion be return by sqlite3_value_numeric_type_apiname']
['If sqlite3_wal_checkpoint_v2_APIParam_5 is not NULL,then *pnCkpt is set to the total number of checkpointed frames in the log file (including any that were already checkpointed before the function was called) or to -1 if the checkpoint could not run due to an error or because the database is not in WAL mode.', 'if sqlite3_wal_checkpoint_v2_apiparam_5 be null , then pnckpt be set total number checkpointe frame log file or # if checkpoint could run due error or because database be wal mode']
['The fifth parameter to the preupdate callback is the name of the table that is being modified.', 'fifth paramet preupdate callback be name table be modify']
['Security warning: It is recommended that the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method be used to enable only this interface.', 'security warning : be recommend sqlite_dbconfig_enable_load_extension_api_constant method be use enable only interface']
['The fourth parameter may optionally be ORed with SQLITE_DETERMINISTIC_API_constant to signal that the function will always return the same result given the same inputs within a single SQL statement.', 'fourth parameter optionally be ore sqlite_deterministic_api_constant signal function always return result give input within single sql statement']
['Warning: The object returned by sqlite3_column_value_APIName is an unprotected sqlite3_value object.', 'warning : object return by sqlite3_column_value_apiname be unprotected sqlite3_value object']
['Deadlock Detection', 'deadlock detection']
['"Core" in the previous sentence does not include operating-system specific VFS implementation.', 'core previous sentence do include operating_system specific vfs implementation']
[' The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database N of connection D.  The main database file has the name "main".', 'sqlite3_db_filename_apiname interface return pointer filename associate database n connection d. main database file have name main']
['These routines provide access to the set of SQL language keywords recognized by SQLite.', 'routine provide access set sql language keyword recognize by sqlite']
['Such changes will eventually commit if the transaction continues to completion.', 'such change eventually commit if transaction continue completion']
[' These routines return the name assigned to a particular column in the result set of a SELECT statement.', 'routine return name assign particular column result set select statement']
['If there is no INTEGER PRIMARY KEY column, then the outputs for the rowid are set as follows:', 'if be no integer primary key column , then output rowid be set as follow']
['This is a change as of SQLite version 3.5.0 (2007-09-04).', 'be change as sqlite version # 2007_09_04']
['The preupdate hook is disabled by invoking sqlite3_preupdate_hook_APIName with a NULL pointer as sqlite3_preupdate_count_APIParam_2.', 'preupdate hook be disable by invoking sqlite3_preupdate_hook_apiname null pointer as sqlite3_preupdate_count_apiparam_2']
['Attempts to increase a limit above its hard upper bound are silently truncated to the hard upper bound.', 'attempt increase limit above hard upper bound be silently truncate hard upper bound']
['The return value from sqlite3_soft_heap_limit64_APIName is the size of the soft heap limit prior to the call, or negative in the case of an error.', 'return value sqlite3_soft_heap_limit64_apiname be size soft heap limit prior call , or negative case error']
['sqlite3_create_window_functionnot exist in API_info', 'sqlite3_create_window_functionnot exist api_info']
['The BLOB handle can be moved to a different row of the same table using the sqlite3_blob_reopen_APIName interface.', 'blob handle can be move different row table use sqlite3_blob_reopen_apiname interface']
['Calls to sqlite3_blob_read_APIName and sqlite3_blob_write_APIName for an expired BLOB handle fail with a return code of SQLITE_ABORT_API_constant.', 'call sqlite3_blob_read_apiname sqlite3_blob_write_apiname expired blob handle fail return code sqlite_abort_api_constant']
['The SQLITE_FCNTL_VFS_POINTER_API_constant opcode returns a pointer to the underlying sqlite3_vfs object for the file.', 'sqlite_fcntl_vfs_pointer_api_constant opcode return pointer underlie sqlite3_vfs object file']
['The busy callback should not take any actions which modify the database connection that invoked the busy handler.', 'busy callback should take action which modify database connection invoke busy handler']
['These routines open an SQLite database file as specified by the sqlite3_open_APIParam_1 argument.', 'routine open sqlite database file as specify by sqlite3_open_apiparam_1 argument']
['The second argument, "zSql", is the statement to be compiled, encoded as either UTF-8 or UTF-16.', 'second argument , zsql , be statement be compile , encode as either utf_8 or utf_16']
['Otherwise, an error code or an extended error code is returned by sqlite3_blob_read_APIName.', 'otherwise , error code or extended error code be return by sqlite3_blob_read_apiname']
['As a consequence, errors that occur in the wrapper layer outside of the internal sqlite3_exec_APIName call are not reflected in subsequent calls to sqlite3_errcode_APIName or sqlite3_errmsg_APIName.', 'as consequence , error occur wrapper layer outside internal sqlite3_exec_apiname call be reflect subsequent call sqlite3_errcode_apiname or sqlite3_errmsg_apiname']
['The implementation of the new function always causes an exception to be thrown.', 'implementation function always cause exception be throw']
['So for example, if "samplelib" cannot be loaded, then names like "samplelib.so" or "samplelib.dylib" or "samplelib.dll" might be tried also.', 'so example , if samplelib can be load , then name like or or may be try']
['When the commit hook callback routine returns zero, the COMMIT operation is allowed to continue normally.', 'when commit hook callback routine return zero , commit operation be allow continue normally']
['See also: sqlite3_strlike_APIName.', 'see : sqlite3_strlike_apiname']
['The sqlite3_rollback_hook_APIName interface registers a callback function to be invoked whenever a transaction is rolled back.', 'sqlite3_rollback_hook_apiname interface register callback function be invoke whenever transaction be roll back']
['If this parameter is -1, then the SQL function or aggregate may take any number of arguments between 0 and the limit set by sqlite3_limit_APIName.', 'if parameter be 1 , then sql function or aggregate take number argument between # limit set by sqlite3_limit_apiname']
['The default busy callback is NULL.', 'default busy callback be null']
['If a non-negative fourth parameter is provided to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_text64_APIName then that parameter must be the byte offset where the NUL terminator would occur assuming the string were NUL terminated.', 'if non_negative fourth parameter be provide sqlite3_bind_text_apiname or sqlite3_bind_text16_apiname or sqlite3_bind_text64_apiname then parameter must be byte offset where nul terminator would occur assume string be nul terminate']
['If the fourth parameter is a NULL pointer then the default sqlite3_vfs object is used.', 'if fourth paramet be null pointer then default sqlite3_vfs object be use']
['sqlite3_blob_reopen_APIName sets the database handle error code and message.', 'sqlite3_blob_reopen_apiname set database handle error code message']
['The amount of space allocated by sqlite3_aggregate_context_APIName is determined by the sqlite3_aggregate_context_APIParam_2 parameter on first successful call.', 'amount space allocate by sqlite3_aggregate_context_apiname be determine by sqlite3_aggregate_context_apiparam_2 paramet first successful call']
['The sqlite3_threadsafe_APIName function returns zero if and only if SQLite was compiled with mutexing code omitted due to the SQLITE_THREADSAFE compile-time option being set to 0.', 'sqlite3_threadsafe_apiname function return zero if only if sqlite be compile mutexe code omit due sqlite_threadsafe compile_time option set #']
['Any attempt to create a function with a longer name will result in SQLITE_MISUSE_API_constant being returned.', 'attempt create function long name result sqlite_misuse_api_constant return']
['Autocommit mode is re-enabled by a COMMIT or ROLLBACK.', 'autocommit mode be re_enable by commit or rollback']
['These functions add, remove, or modify a collation associated with the database connection specified as the first argument.', 'function add , remove , or modify collation associate database connection specify as first argument']
[' The sqlite3_db_readonly_APIName interface returns 1 if the database N of connection D is read-only, 0 if it is read/write, or -1 if N is not the name of a database on connection D.', 'sqlite3_db_readonly_apiname interface return # if database n connection d be read_only , # if be , or # if n be name database connection d']
['Since this interface is expected to be rarely used, it is only available if SQLite is compiled using the SQLITE_ENABLE_STMT_SCANSTATUS compile-time option.', 'since interface be expect be rarely use , be only available if sqlite be compile use sqlite_enable_stmt_scanstatus compile_time option']
['Most SQLite builds come with a single default VFS that is appropriate for the host computer.', 'most sqlite build come single default vfs be appropriate host computer']
['Both routines return a NULL pointer if sqlite3_malloc64_APIName is unable to allocate enough memory to hold the resulting string.', 'both routine return null pointer if sqlite3_malloc64_apiname be unable allocate enough memory hold result string']
['The name of the database or table or column can be returned as either a UTF-8 or UTF-16 string.', 'name database or table or column can be return as either utf_8 or utf_16 string']
['This interface is retained for backwards compatibility and as a convenience for applications that need to manually start a callback but which do not need the full power (and corresponding complication) of sqlite3_wal_checkpoint_v2_APIName.', 'interface be retain backwards compatibility as convenience application need manually start callback but which need full power sqlite3_wal_checkpoint_v2_apiname']
['This is an historical accident that cannot be fixed without breaking backwards compatibility.', 'be historical accident can be fix without break backwards compatibility']
['If the result is a numeric value then sqlite3_column_bytes_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-8 string and returns the number of bytes in that string.', 'if result be numeric value then sqlite3_column_bytes_apiname use sqlite3_snprintf_apiname convert value utf_8 string return number byte string']
['Passing any other pointer in to this routine results in undefined and probably undesirable behavior.', 'pass other pointer routine result undefine probably undesirable behavior']
['If there is not already a read-transaction open on schema sqlite3_snapshot_get_APIParam_2 when sqlite3_snapshot_get_APIName is called, one is opened automatically.', 'if be already read_transaction open schema sqlite3_snapshot_get_apiparam_2 when sqlite3_snapshot_get_apiname be call , one be open automatically']
['Use the sqlite3_trace_v2_APIName interface instead of the routines described here.', 'sqlite3_trace_v2_apiname interface instead routine describe here']
['These routines return information about a single column of the current result row of a query.', 'routine return information about single column current result row query']
['If offset sqlite3_blob_write_APIParam_4 is less than N bytes from the end of the BLOB, SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written.', 'if offset sqlite3_blob_write_apiparam_4 be less than n byte end blob , sqlite_error_api_constant be return by sqlite3_blob_write_apiname no data be write']
['The parameter P is passed through as the only parameter to the callback function X.', 'paramet p be pass through as only paramet callback function x']
['The second parameter to the preupdate callback is a pointer to the database connection that registered the preupdate hook.', 'second paramet preupdate callback be pointer database connection register preupdate hook']
['To avoid this, each thread can obtain exclusive use of the database connection sqlite3_db_mutex_APIParam_1 by invoking sqlite3_mutex_enter(sqlite3_db_mutex_APIName) before beginning to use sqlite3_db_mutex_APIParam_1 and invoking sqlite3_mutex_leave(sqlite3_db_mutex_APIName) after all calls to the interfaces listed here are completed.', 'avoid , each thread can obtain exclusive database connection sqlite3_db_mutex_apiparam_1 by invoke sqlite3_mutex_enter before begin sqlite3_db_mutex_apiparam_1 invoke sqlite3_mutex_leave after call interface list here be complete']
['The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of "case independence" that SQLite uses internally when comparing identifiers.', 'sqlite3_stricmp_apiname sqlite3_strnicmp_apiname api allow application extension compare content two buffer contain utf_8 string case_independent fashion , use definition case independence sqlite us internally when compare identifier']
['If the authority is not an empty string or "localhost", an error is returned by sqlite3_open16_APIName to the caller.', 'if authority be empty string or localhost , error be return by sqlite3_open16_apiname caller']
[' This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database.', 'routine enable or disable share database cache schema datum structure between connection database']
['This routine sets a busy handler that sleeps for a specified amount of time when a table is locked.', 'routine set busy handler sleep specify amount time when table be lock']
['The callback function should normally return SQLITE_OK_API_constant.', 'callback function should normally return sqlite_ok_api_constant']
[' The SQLite core uses these three routines for all of its own internal memory allocation needs.', 'sqlite core use three routine internal memory allocation need']
['The sqlite3_str_new_APIName interface allocates and initializes a new sqlite3_str object.', 'sqlite3_str_new_apiname interface allocate initialize sqlite3_str object']
['The sqlite3_vsnprintf_APIName routine is a varargs version of sqlite3_snprintf_APIName.', 'sqlite3_vsnprintf_apiname routine be varargs version sqlite3_snprintf_apiname']
['Calling sqlite3_blob_close_APIName with an argument that is not a NULL pointer or an open blob handle results in undefined behaviour.', 'call sqlite3_blob_close_apiname argument be null pointer or open blob handle result undefined behaviour']
['The sqlite3_str_appendf(X,F,...) and sqlite3_str_vappendf_APIName interfaces uses the built-in printf functionality of SQLite to append formatted text onto the end of sqlite3_str object X.', 'sqlite3_str_appendf sqlite3_str_vappendf_apiname interface use built_in printf functionality sqlite append format text onto end sqlite3_str object x']
['sqlite3_commit_hooknot exist in API_info', 'sqlite3_commit_hooknot exist api_info']
['If there is a blocking connection, then the extended error code is set to SQLITE_LOCKED_API_constant_SHAREDCACHE.', 'if be block connection , then extended error code be set sqlite_locked_api_constant_sharedcache']
['These functions (collectively known as "function creation routines") are used to add SQL functions or aggregates or to redefine the behavior of existing SQL functions or aggregates.', 'function be use add sql function or aggregate or redefine behavior exist sql function or aggregate']
['If the default VFS is unregistered, another VFS is chosen as the default.', 'if default vfs be unregistered , another vfs be choose as default']
['The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement sqlite3_step_APIParam_1. If prepared statement sqlite3_step_APIParam_1 does not have results ready to return (via calls to the sqlite3_column_*_APIName of interfaces) then sqlite3_data_count_APIName returns 0.', 'sqlite3_data_count_apiname interface return number column current row result set prepared statement sqlite3_step_apiparam_1 . if prepare statement sqlite3_step_apiparam_1 do have result ready return then sqlite3_data_count_apiname return #']
['If the 3rd parameter to the sqlite3_result_text* interfaces is negative, then SQLite takes result text from the 2nd parameter through the first zero character.', 'if 3rd parameter sqlite3_result_text interface be negative , then sqlite take result text 2nd parameter through first zero character']
['In SQLite version 3.5.0 and 3.5.1, it was possible to define the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in implementation of these routines to be omitted.', 'sqlite version # 3 , be possible define sqlite_omit_memory_allocation which would cause built_in implementation routine be omit']
['The size of the BLOB (and hence the maximum value of N+iOffset) can be determined using the sqlite3_blob_bytes_APIName interface.', 'size blob can be determine use sqlite3_blob_bytes_apiname interface']
['The sqlite3_deserialize_APIName interface will fail with SQLITE_BUSY_API_constant if the database is currently in a read transaction or is involved in a backup operation.', 'sqlite3_deserialize_apiname interface fail sqlite_busy_api_constant if database be currently read transaction or be involve backup operation']
['If the sixth argument to sqlite3_bind_text64_APIName is not one of the allowed values shown above, or if the text encoding is different from the encoding specified by the sixth parameter, then the behavior is undefined.', 'if sixth argument sqlite3_bind_text64_apiname be one allow value show above , or if text encoding be different encoding specify by sixth parameter , then behavior be undefined']
['If the two snapshot handles are not associated with the same database file, the result of the comparison is undefined.', 'if two snapshot handle be associate database file , result comparison be undefined']
['The first parameter is an operation code that determines the number, meaning, and operation of all subsequent parameters.', 'first parameter be operation code determine number , meaning , operation subsequent parameter']
['There can only be a single busy handler for a particular database connection at any given moment.', 'can only be single busy handler particular database connection give moment']
['The sqlite3_update_hook_APIName interface registers a callback function with the database connection identified by the first argument to be invoked whenever a row is updated, inserted or deleted in a rowid table.', 'sqlite3_update_hook_apiname interface register callback function database connection identify by first argument be invoke whenever row be update , insert or delete rowid table']
['With SQLITE_ENABLE_MEMORY_MANAGEMENT, the soft heap limit is enforced on every memory allocation.', 'sqlite_enable_memory_management , soft heap limit be enforce every memory allocation']
['Otherwise, various features that require the use of temporary files may fail.', 'otherwise , various feature require temporary file fail']
['Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK, and INSERT OR ABORT make no changes to the return value of this routine when their insertion fails.', 'thus insert or fail , insert or ignore , insert or rollback , insert or abort make no change return value routine when insertion fail']
['If this routine returns 0, that means the prepared statement returns no data (for example an UPDATE).', 'if routine return 0 , mean prepared statement return no data example update']
['There may be at most one unlock-notify callback registered by a blocked connection.', 'be most one unlock_notify callback register by block connection']
['The SQLITE_MUTEX_PTHREADS and SQLITE_MUTEX_W32 implementations are appropriate for use on Unix and Windows.', 'sqlite_mutex_pthread sqlite_mutex_w32 implementation be appropriate unix window']
['Calls to sqlite3_close_APIName and sqlite3_close_v2_APIName return SQLITE_OK_API_constant if the sqlite3 object is successfully destroyed and all associated resources are deallocated.', 'call sqlite3_close_apiname sqlite3_close_v2_apiname return sqlite_ok_api_constant if sqlite3 object be successfully destroy associate resource be deallocate']
[' SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName, sqlite3_free_APIName, and sqlite3_realloc_APIName routines, which form the built-in memory allocation subsystem.The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding (malloced but not freed).', 'sqlite provide two interface report status sqlite3_malloc_apiname , sqlite3_free_apiname , sqlite3_realloc_apiname routine , which form built_in memory allocation sqlite3_memory_used_apiname routine return number byte memory currently outstanding malloce but free']
['The following table details the conversions that are applied:', 'follow table detail conversion be apply']
['The rollback callback is not invoked if a transaction is automatically rolled back because the database connection is closed.', 'rollback callback be invoke if transaction be automatically roll back because database connection be close']
['The update hook is not invoked when WITHOUT ROWID tables are modified.', 'update hook be invoke when without rowid table be modify']
['The third parameter is the new limit for that construct.', 'third parameter be limit construct']
['Let N be the number of rows and M be the number of columns.', 'let n be number row m be number column']
['If a collating function fails any of the above constraints and that collating function is  registered and used, then the behavior of SQLite is undefined.', 'if collate function fail above constraint collate function be register use , then behavior sqlite be undefined']
['The sqlite3_result_error_APIName and sqlite3_result_error16_APIName routines make a private copy of the error message text before they return.', 'sqlite3_result_error_apiname sqlite3_result_error16_apiname routine make private copy error message text before return']
['Cache sharing is enabled and disabled for an entire process.', 'cache sharing be enable disabled entire process']
['The SQLITE_FCNTL_DATA_VERSION_API_constant returns the data version counter from the pager.', 'sqlite_fcntl_data_version_api_constant return datum version counter pager']
['Note that running any other SQL statements, including SELECT statements, or merely calling sqlite3_prepare_v2_APIName and sqlite3_step_APIName will modify the database connections for the meaning of "modify" in this paragraph.', 'note run other sql statement , include select statement , or merely call sqlite3_prepare_v2_apiname sqlite3_step_apiname modify database connection meaning modify paragraph']
['Collation names that compare equal according to sqlite3_strnicmp_APIName are considered to be the same name.', 'collation name compare equal accord sqlite3_strnicmp_apiname be consider be name']
['The new row is identified by the rowid value passed as sqlite3_blob_reopen_APIParam_2.', 'row be identify by rowid value pass as sqlite3_blob_reopen_apiparam_2']
['When the SQLITE_THREADSAFE macro is 0, the mutexes are omitted.', 'when sqlite_threadsafe macro be 0 , mutexe be omit']
['The final value of *P is undefined in this case.', 'final value p be undefined case']
['But for maximum safety, mutexes should be enabled.', 'but maximum safety , mutexe should be enable']
['Each new VFS becomes the default VFS if the sqlite3_vfs_register_APIParam_2 flag is set.', 'each vfs become default vfs if sqlite3_vfs_register_apiparam_2 flag be set']
['Perhaps it was called on a prepared statement that has already been finalized or on one that had previously returned SQLITE_ERROR_API_constant or SQLITE_DONE_API_constant.', 'perhaps be call prepared statement have already finalize or one have previously return sqlite_error_api_constant or sqlite_done_api_constant']
['Additionally, the result of the comparison is only valid if both of the snapshot handles were obtained by calling sqlite3_snapshot_get_APIName since the last time the wal file was deleted.', 'additionally , result comparison be only valid if both snapshot handle be obtain by call sqlite3_snapshot_get_apiname since last time wal file be delete']
['If sqlite3_create_module_APIParam_3 (the pointer to the sqlite3_module object) is NULL then no new module is create and any existing modules with the same name are dropped.', 'if sqlite3_create_module_apiparam_3 be null then no module be create exist module name be drop']
['If the operating system does not support sleep requests with millisecond time resolution, then the time will be rounded up to the nearest second.', 'if operate system do support sleep request millisecond time resolution , then time be round up nearest second']
['Common techniques used to avoid keyword name collisions include:', 'common technique use avoid keyword name collision include']
['sqlite3_step_APIName is called again to retrieve the next row of data.', 'sqlite3_step_apiname be call again retrieve next row datum']
['If two or more collating functions are registered to the same collation name (using different eTextRep values) then all must give an equivalent answer when invoked with equivalent strings.', 'if two or more collating function be register collation name then must give equivalent answer when invoke equivalent string']
['The sqlite3_expanded_sql_APIName interface returns a pointer to a UTF-8 string containing the SQL text of prepared statement sqlite3_normalized_sql_APIParam_1 with bound parameters expanded.', 'sqlite3_expanded_sql_apiname interface return pointer utf_8 string contain sql text prepare statement sqlite3_normalized_sql_apiparam_1 bind parameter expand']
['If the SQLITE_DESERIALIZE_RESIZEABLE_API_constant bit is set, then SQLite will try to increase the buffer size using sqlite3_realloc64_APIName if writes on the database cause it to grow larger than M bytes.', 'if sqlite_deserialize_resizeable_api_constant bit be set , then sqlite try increase buffer size use sqlite3_realloc64_apiname if write database cause grow large than m byte']
['SQLite will use the implementation that most closely matches the way in which the SQL function is used.', 'sqlite implementation most closely match way which sql function be use']
['It uses only the public interface defined here.', 'use only public interface define here']
['The sqlite3_result_value_APIName interface makes a copy of the sqlite3_value so that the sqlite3_value specified in the parameter may change or be deallocated after sqlite3_result_value_APIName returns without harm.', 'sqlite3_result_value_apiname interface make copy sqlite3_value so sqlite3_value specify paramet change or be deallocate after sqlite3_result_value_apiname return without harm']
['If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the sqlite3_str_errcode_APIName method will return an appropriate error code.', 'if prior error have occur while construct dynamic string sqlite3_str x , then sqlite3_str_errcode_apiname method return appropriate error code']
['An error code is returned by sqlite3_enable_shared_cache_APIName otherwise.', 'error code be return by sqlite3_enable_shared_cache_apiname otherwise']
['The number of subtype bytes preserved by SQLite might increase in future releases of SQLite.', 'number subtype byte preserve by sqlite may increase future release sqlite']
['The parser used by SQLite is forgiving.', 'parser use by sqlite be forgive']
['The new mutex is recursive when SQLITE_MUTEX_RECURSIVE_API_constant is used but not necessarily so when SQLITE_MUTEX_FAST_API_constant is used.', 'mutex be recursive when sqlite_mutex_recursive_api_constant be use but necessarily so when sqlite_mutex_fast_api_constant be use']
['If the 3rd parameter to sqlite3_open_v2_APIName is not one of the combinations shown above optionally combined with other SQLITE_OPEN_* bits then the behavior is undefined.', 'if 3rd parameter sqlite3_open_v2_apiname be one combination show above optionally combine other sqlite_open bit then behavior be undefined']
['*ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step_APIName.', 'ppstmt be leave point compile prepared statement can be execute use sqlite3_step_apiname']
['As long as the input parameter is correct, these routines can only fail if an out-of-memory error occurs during a format conversion.', 'as long as input parameter be correct , routine can only fail if out_of_memory error occur during format conversion']
['sqlite3_blob_read_APIName is used to read data from an open BLOB handle into a caller-supplied buffer.', 'sqlite3_blob_read_apiname be use read datum open blob handle into caller_supplied buffer']
['The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema sqlite3_snapshot_open_APIParam_2 of database connection sqlite3_snapshot_open_APIParam_1 such that the read transaction refers to historical snapshot P, rather than the most recent change to the database.', 'sqlite3_snapshot_open_apiname interface either start read transaction or upgrade exist one schema sqlite3_snapshot_open_apiparam_2 database connection sqlite3_snapshot_open_apiparam_1 such read transaction refer historical snapshot p , rather than most recent change database']
['Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables.These routines work only with protected sqlite3_value objects.', 'protect sqlite3_value object be use pass paramet information into implementation application_defin sql function virtual routine work only protect sqlite3_value object']
['Implementations of aggregate SQL functions use this routine to allocate memory for storing their state.', 'implementation aggregate sql function routine allocate memory store state']
['If the SQLITE_OPEN_NOMUTEX_API_constant flag is set, then the database connection opens in the multi-thread threading mode as long as the single-thread mode has not been set at compile-time or start-time.', 'if sqlite_open_nomutex_api_constant flag be set , then database connection open multi_thread threading mode as long as single_thread mode have set compile_time or start_time']
['If a VFS is registered with a name that is NULL or an empty string, then the behavior is undefined.', 'if vfs be register name be null or empty string , then behavior be undefined']
['An application-defined function is permitted to call other SQLite interfaces.', 'application_defined function be permit call other sqlite interface']
['When multiple implementations of the same function are available, SQLite will pick the one that involves the least amount of data conversion.', 'when multiple implementation function be available , sqlite pick one involve least amount datum conversion']
['Sharing is enabled if the argument is true and disabled if the argument is false.', 'sharing be enable if argument be true disabled if argument be false']
['Memory allocation errors were detected, but they were reported back as SQLITE_CANTOPEN_API_constant or SQLITE_IOERR_API_constant rather than SQLITE_NOMEM_API_constant.', 'memory allocation error be detect , but be report back as sqlite_cantopen_api_constant or sqlite_ioerr_api_constant rather than sqlite_nomem_api_constant']
['The sqlite3_busy_handler_APIName interface is used to implement sqlite3_busy_timeout_APIName and PRAGMA busy_timeout.', 'sqlite3_busy_handler_apiname interface be use implement sqlite3_busy_timeout_apiname pragma busy_timeout']
['Each prepared statement maintains various SQLITE_STMTSTATUS counters that measure the number of times it has performed specific operations.', 'each prepare statement maintain various sqlite_stmtstatus counter measure number time have perform specific operation']
['If the result column is not initially in the requested format (for example, if the query returns an integer but the sqlite3_column_text_APIName interface is used to extract the value) then an automatic type conversion is performed.', 'if result column be initially request format then automatic type conversion be perform']
['is included as part of the name.', 'be include as part name']
['Security warning: It is recommended that extension loading be disabled using the SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION_API_constant method rather than this interface, so the load_extension_APIName SQL function remains disabled.', 'security warning : be recommend extension loading be disable use sqlite_dbconfig_enable_load_extension_api_constant method rather than interface , so load_extension_apiname sql function remain disabled']
['See also: sqlite3_column_count_APIName', 'see : sqlite3_column_count_apiname']
['The second argument is an integer constant, taken from the set of SQLITE_DBSTATUS options, that determines the parameter to interrogate.', 'second argument be integer constant , take set sqlite_dbstatus option , determine parameter interrogate']
['Even if there is a busy-handler configured, it will not be invoked in this case.', 'even if be busy_handler configure , be invoke case']
['These interfaces provide the same information as the SQLITE_VERSION_API_constant, SQLITE_VERSION_API_constant_NUMBER, and SQLITE_SOURCE_ID_API_constant C preprocessor macros but are associated with the library instead of the header file.', 'interface provide information as sqlite_version_api_constant , sqlite_version_api_constant_number , sqlite_source_id_api_constant c preprocessor macro but be associate library instead header file']
['The third parameter is a pointer to the implementation of the virtual table module.', 'third parameter be pointer implementation virtual table module']
['All other valid calls to sqlite3_shutdown_APIName are harmless no-ops.', 'other valid call sqlite3_shutdown_apiname be harmless no_op']
['With the legacy interface, a more specific error code (for example, SQLITE_INTERRUPT_API_constant, SQLITE_SCHEMA_API_constant, SQLITE_CORRUPT_API_constant, and so forth) can be obtained by calling sqlite3_reset_APIName on the prepared statement.', 'legacy interface , more specific error code can be obtain by call sqlite3_reset_apiname prepared statement']
['The sqlite3_deserialize_APIName interface causes the database connection sqlite3_deserialize_APIParam_1 to disconnect from database sqlite3_deserialize_APIParam_2 and then reopen sqlite3_deserialize_APIParam_2 as an in-memory database based on the serialization contained in sqlite3_deserialize_APIParam_3.  The serialized database sqlite3_deserialize_APIParam_3 is sqlite3_deserialize_APIParam_4 bytes in size.', 'sqlite3_deserialize_apiname interface cause database connection sqlite3_deserialize_apiparam_1 disconnect database sqlite3_deserialize_apiparam_2 then reopen sqlite3_deserialize_apiparam_2 as in_memory database base serialization contain sqlite3_deserialize_apiparam_3 . serialize database sqlite3_deserialize_apiparam_3 be sqlite3_deserialize_apiparam_4 byte size']
['If the threading mode is Single-thread or Multi-thread then this routine returns a NULL pointer.', 'if thread mode be single_thread or multi_thread then routine return null pointer']
['sqlite3_snapshot_get_APIName may also return SQLITE_NOMEM_API_constant.', 'sqlite3_snapshot_get_apiname return sqlite_nomem_api_constant']
['A zeroblob uses a fixed amount of memory (just an integer to hold its size) while it is being processed.', 'zeroblob use fix amount memory while be process']
['The wal_autocheckpoint pragma can be used to invoke this interface from SQL.', 'wal_autocheckpoint pragma can be use invoke interface sql']
['The callback registered by sqlite3_wal_autocheckpoint_APIName replaces any existing callback registered using sqlite3_wal_hook_APIName.', 'callback register by sqlite3_wal_autocheckpoint_apiname replace exist callback register use sqlite3_wal_hook_apiname']
['The SQLITE_ prefix may be omitted from the option name passed to sqlite3_compileoption_used_APIName.', 'sqlite prefix be omit option name pass sqlite3_compileoption_used_apiname']
['sqlite3_bind_blobnot exist in API_info', 'sqlite3_bind_blobnot exist api_info']
['If any NUL characters occur in the string at a byte offset that is less than the value of the 3rd parameter, then the resulting string will contain embedded NULs and the result of expressions operating on strings with embedded NULs is undefined.', 'if nul character occur string byte offset be less than value 3rd parameter , then result string contain embed nul result expression operate string embed nul be undefined']
['The 4th argument to the sqlite3_exec_APIName callback is an array of pointers to strings where each entry represents the name of corresponding result column as obtained from sqlite3_column_name_APIName.', '4th argument sqlite3_exec_apiname callback be array pointer string where each entry represent name correspond result column as obtain sqlite3_column_name_apiname']
[' This interface returns information about the predicted and measured performance for sqlite3_stmt_scanstatus_APIParam_1.', 'interface return information about predict measured performance sqlite3_stmt_scanstatus_apiparam_1']
['It is permitted to register multiple implementations of the same functions with the same name but with either differing numbers of arguments or differing preferred text encodings.', 'be permit regist multiple implementation function name but either differ number argument or differ preferred text encoding']
['This routine returns SQLITE_OK_API_constant if shared cache was enabled or disabled successfully.', 'routine return sqlite_ok_api_constant if share cache be enable or disable successfully']
['For all versions of SQLite up to and including 3.6.23.1, a call to sqlite3_reset_APIName was required after sqlite3_step_APIName returned anything other than SQLITE_ROW_API_constant before any subsequent invocation of sqlite3_step_APIName.', 'version sqlite up include 3 , call sqlite3_reset_apiname be require after sqlite3_step_apiname return anything other than sqlite_row_api_constant before subsequent invocation sqlite3_step_apiname']
['to flush data accumulated in memory to disk).', 'flush datum accumulate memory disk']
['All subsequent calls to sqlite3_blob_read_APIName, sqlite3_blob_write_APIName or sqlite3_blob_reopen_APIName on an aborted blob handle immediately return SQLITE_ABORT_API_constant.', 'subsequent call sqlite3_blob_read_apiname , sqlite3_blob_write_apiname or sqlite3_blob_reopen_apiname aborted blob handle immediately return sqlite_abort_api_constant']
['If the file cannot be loaded directly, attempts are made to load with various operating-system specific extensions added.', 'if file can be load directly , attempt be make load various operating_system specific extension add']
[' The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages of two valid snapshot handles.If the two snapshot handles are not associated with the same database file, the result of the comparison is undefined.Additionally, the result of the comparison is only valid if both of the snapshot handles were obtained by calling sqlite3_snapshot_get_APIName since the last time the wal file was deleted.', 'sqlite3_snapshot_cmp interface be use compare age two valid snapshot two snapshot handle be associate database file , result comparison be , result comparison be only valid if both snapshot handle be obtain by call sqlite3_snapshot_get_apiname since last time wal file be delete']
['In other words, the soft heap limit is advisory only.', 'other word , soft heap limit be advisory only']
[' These interfaces are used to retrieve runtime status information about the performance of SQLite, and optionally to reset various highwater marks.', 'interface be use retrieve runtime status information about performance sqlite , optionally reset various highwater mark']
['The sqlite3_prepare_APIName interface is legacy and should be avoided.', 'sqlite3_prepare_apiname interface be legacy should be avoid']
['The second is a copy of the database handle.', 'second be copy database handle']
[' The sqlite3_stmt_readonly_APIName interface returns true (non-zero) if and only if the prepared statement X makes no direct changes to the content of the database file.Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect.', 'sqlite3_stmt_readonly_apiname interface return true if only if prepare statement x make no direct change content database application_defin sql function or virtual table may change database indirectly as side effect']
[' The sqlite3_config_APIName interface is used to make global configuration changes to SQLite in order to tune SQLite to the specific needs of the application.', 'sqlite3_config_apiname interface be use make global configuration change sqlite order tune sqlite specific need application']
['Otherwise an error code is returned by sqlite3_open_APIName.', 'otherwise error code be return by sqlite3_open_apiname']
['Prior to SQLite version 3.7.10, the Windows OS interface layer called the system malloc_APIName and free_APIName directly when converting filenames between the UTF-8 encoding used by SQLite and whatever filename encoding is used by the particular Windows installation.', 'prior sqlite version 3 , window os interface layer call system malloc_apiname free_apiname directly when convert filename between utf_8 encoding use by sqlite whatever filename encoding be use by particular window installation']
['A few opcodes for sqlite3_file_control_APIName are handled directly by the SQLite core and never invoke the sqlite3_io_methods.xFileControl method.', 'few opcode sqlite3_file_control_apiname be handle directly by sqlite core never invoke method']
['Calling this routine with an argument less than or equal to zero turns off all busy handlers.', 'call routine argument less than or equal zero turn off busy handler']
['This will prevent SQL injections from giving attackers access to extension loading capabilities.', 'prevent sql injection give attacker access extension loading capability']
['The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables, or for INSERT operations on rowid tables.', 'value seventh paramet pass callback function be define operation without rowid table , or insert operation rowid table']
['The same VFS can be registered multiple times without injury.', 'vfs can be register multiple time without injury']
['The sqlite3_cancel_auto_extension_APIName routine returns 1 if initialization routine X was successfully unregistered and it returns 0 if X was not on the list of initialization routines.', 'sqlite3_cancel_auto_extension_apiname routine return # if initialization routine x be successfully unregistered return # if x be list initialization routine']
['The sqlite3_malloc64_APIName routine works just like sqlite3_malloc_APIName except that sqlite3_malloc_APIParam_1 is an unsigned 64-bit integer instead of a signed 32-bit integer.', 'sqlite3_malloc64_apiname routine work just like sqlite3_malloc_apiname except sqlite3_malloc_apiparam_1 be unsigned 64_bit integer instead sign 32_bit integer']
['If a separate thread makes changes on the same database connection while sqlite3_changes_APIName is running then the value returned is unpredictable and not meaningful.', 'if separate thread make change database connection while sqlite3_changes_apiname be run then value return be unpredictable meaningful']
['If the fourth parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName is negative, then the length of the string is the number of bytes up to the first zero terminator.', 'if fourth paramet sqlite3_bind_text_apiname or sqlite3_bind_text16_apiname be negative , then length string be number byte up first zero terminator']
['This error code is not remembered and will not be recalled by sqlite3_errcode_APIName or sqlite3_errmsg_APIName.', 'error code be remember be recall by sqlite3_errcode_apiname or sqlite3_errmsg_apiname']
['The sqlite3_errmsg_APIName or sqlite3_errmsg16_APIName routines can be used to obtain an English language description of the error following a failure of any of the sqlite3_open_APIName routines.', 'sqlite3_errmsg_apiname or sqlite3_errmsg16_apiname routine can be use obtain english language description error follow failure sqlite3_open_apiname routine']
['URI hexadecimal escape sequences (%HH) are supported within the path and query components of a URI.', 'uri hexadecimal escape sequence be support within path query component uri']
['The sqlite3_strglob_APIName interface returns zero if and only if string sqlite3_strglob_APIParam_2 matches the GLOB pattern P. The definition of GLOB pattern matching used in sqlite3_strglob_APIName is the same as for the "X GLOB P" operator in the SQL dialect understood by SQLite.', 'sqlite3_strglob_apiname interface return zero if only if string sqlite3_strglob_apiparam_2 match glob pattern p. definition glob pattern matching use sqlite3_strglob_apiname be as x glob p operator sql dialect understand by sqlite']
['For "X LIKE P" without the ESCAPE clause, set the sqlite3_strlike_APIParam_3 parameter of sqlite3_strlike_APIName to 0.', 'x like p without escape clause , set sqlite3_strlike_apiparam_3 paramet sqlite3_strlike_apiname #']
['The sqlite3_expanded_sql_APIName interface returns NULL if insufficient memory is available to hold the result, or if the result would exceed the the maximum string length determined by the SQLITE_LIMIT_LENGTH_API_constant.', 'sqlite3_expanded_sql_apiname interface return null if insufficient memory be available hold result , or if result would exceed maximum string length determine by sqlite_limit_length_api_constant']
['The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection (the 1st parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.', 'sqlite3_context_db_handle_apiname interface return copy pointer database connection sqlite3_create_function_apiname sqlite3_create_function16_apiname routine originally register application define function']
['See also: sqlite3_bind_APIName, sqlite3_bind_parameter_count_APIName, and sqlite3_bind_parameter_index_APIName.', 'see : sqlite3_bind_apiname , sqlite3_bind_parameter_count_apiname , sqlite3_bind_parameter_index_apiname']
['It is recommended that when a database sqlite3_open_v2_APIParam_1 actually does begin with a ":" character you should prefix the sqlite3_open_v2_APIParam_1 with a pathname such as "./" to avoid ambiguity.', 'be recommend when database sqlite3_open_v2_apiparam_1 actually do begin : character -PRON- should prefix sqlite3_open_v2_apiparam_1 pathname such as . avoid ambiguity']
['A statement is judged to be complete if it ends with a semicolon token and is not a prefix of a well-formed CREATE TRIGGER statement.', 'statement be judge be complete if end semicolon token be prefix well_forme create trigger statement']
['The values may be accessed using the column access functions.', 'value be access use column access function']
['The sqlite3_stmt_readonly_APIName interface returns true (non-zero) if and only if the prepared statement sqlite3_stmt_readonly_APIParam_1 makes no direct changes to the content of the database file.', 'sqlite3_stmt_readonly_apiname interface return true if only if prepare statement sqlite3_stmt_readonly_apiparam_1 make no direct change content database file']
['The xDestroy callback is not called if the sqlite3_create_collation_v2_APIName function fails.', 'xdestroy callback be call if sqlite3_create_collation_v2_apiname function fail']
['The use of the "vX" interfaces is recommended.', 'vx interface be recommend']
['This must only be used within SQLITE_UPDATE_API_constant and SQLITE_DELETE_API_constant preupdate callbacks; if it is used by an SQLITE_INSERT_API_constant callback then the behavior is undefined.', 'must only be use within sqlite_update_api_constant sqlite_delete_api_constant preupdate callback ; if be use by sqlite_insert_api_constant callback then behavior be undefined']
['Even though the function prototype shows that xEntryPoint_APIName takes no arguments and returns void, SQLite invokes xEntryPoint_APIName with three arguments and expects an integer result as if the signature of the entry point where as follows:', 'even though function prototype show xentrypoint_apiname take no argument return void , sqlite invoke xentrypoint_apiname three argument expect integer result as if signature entry point where as follow']
['The interface is similar to sqlite3_config_APIName except that the changes apply to a single database connection (specified in sqlite3_db_config_APIParam_1).', 'interface be similar sqlite3_config_apiname except change apply single database connection specify sqlite3_db_config_apiparam_1']
['A single database handle may have at most a single write-ahead log callback registered at one time.', 'single database handle have most single write_ahead log callback register one time']
['If there is no metadata associated with the function argument, the sqlite3_get_auxdata_APIName interface returns a NULL pointer.', 'if be no metadata associate function argument , sqlite3_get_auxdata_apiname interface return null pointer']
['The value returned by sqlite3_str_value_APIName is managed by the sqlite3_str object X and might be freed or altered by any subsequent method on the same sqlite3_str object.', 'value return by sqlite3_str_value_apiname be manage by sqlite3_str object x may be free or alter by subsequent method sqlite3_str object']
['For example, sqlite3_open_APIName calls sqlite3_initialize_APIName so the SQLite library will be automatically initialized when sqlite3_open_APIName is called if it has not be initialized already.', 'example , sqlite3_open_apiname call sqlite3_initialize_apiname so sqlite library be automatically initialize when sqlite3_open_apiname be call if have be initialize already']
['The 3rd argument to the sqlite3_exec_APIName callback is an array of pointers to strings obtained as if from sqlite3_column_text_APIName, one for each column.', '3rd argument sqlite3_exec_apiname callback be array pointer string obtain as if sqlite3_column_text_apiname , one each column']
['The sqlite3_preupdate_old_APIName, sqlite3_preupdate_new_APIName, sqlite3_preupdate_count_APIName, and sqlite3_preupdate_depth_APIName interfaces provide additional information about a preupdate event.', 'sqlite3_preupdate_old_apiname , sqlite3_preupdate_new_apiname , sqlite3_preupdate_count_apiname , sqlite3_preupdate_depth_apiname interface provide additional information about preupdate event']
[' sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter.', 'sqlite3_changes_apiname return number row modify , insert or delete by most recently complete insert , update or delete statement database connection specify by only parameter']
['After the application has finished with the result from sqlite3_get_table_APIName, it must pass the result table pointer to sqlite3_free_table_APIName in order to release the memory that was malloced.', 'after application have finish result sqlite3_get_table_apiname , must pass result table pointer sqlite3_free_table_apiname order release memory be malloce']
['In brief, sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database sqlite3_wal_checkpoint_APIParam_2 on database connection sqlite3_wal_checkpoint_APIParam_1 to be transferred into the database file and for the write-ahead log to be reset.', 'brief , sqlite3_wal_checkpoint_apiname cause content write_ahead log database sqlite3_wal_checkpoint_apiparam_2 database connection sqlite3_wal_checkpoint_apiparam_1 be transfer into database file write_ahead log be reset']
['In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants, literals may be replaced by a parameter that matches one of following templates:', 'sql statement text input sqlite3_prepare_v2_apiname variant , literal be replace by paramet match one follow template']
['All other values are in their UTF-8 zero-terminated string representation as returned by sqlite3_column_text_APIName.', 'other value be utf_8 zero_terminated string representation as return by sqlite3_column_text_apiname']
['If any of the following statements are false when sqlite3_snapshot_get_APIName is called, SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_get_APIName.', 'if follow statement be false when sqlite3_snapshot_get_apiname be call , sqlite_error_api_constant be return by sqlite3_snapshot_get_apiname']
['This interface loads an SQLite extension library from the named file.', 'interface load sqlite extension library name file']
[' The first parameter is a prepared statement.', 'first parameter be prepare statement']
['If sqlite3_unlock_notify_APIName is called with a NULL pointer as its second argument, then any existing unlock-notify callback is canceled.', 'if sqlite3_unlock_notify_apiname be call null pointer as second argument , then exist unlock_notify callback be cancel']
['The sqlite3_initialize_APIName interface is threadsafe, but sqlite3_shutdown_APIName is not.', 'sqlite3_initialize_apiname interface be threadsafe , but sqlite3_shutdown_apiname be']
['The sqlite3_keyword_check_APIName interface checks to see whether or not the L-byte UTF8 identifier that sqlite3_keyword_check_APIParam_1 points to is a keyword, returning non-zero if it is and zero if not.', 'sqlite3_keyword_check_apiname interface check see whether or l_byte utf8 identifi sqlite3_keyword_check_apiparam_1 point be keyword , return non_zero if be zero if']
['sqlite3_release_memory_APIName returns the number of bytes actually freed, which might be more or less than the amount requested.', 'sqlite3_release_memory_apiname return number byte actually free , which may be more or less than amount request']
['The sqlite3_db_cacheflush_APIName interface flushes caches for all schemas - "main", "temp", and any attached databases.', 'sqlite3_db_cacheflush_apiname interface flush cache schema main , temp , attach database']
[' This interface loads an SQLite extension library from the named file.The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2.', 'interface load sqlite extension library name sqlite3_load_extension_apiname interface attempt load sqlite extension library contain file sqlite3_load_extension_apiparam_2']
['Virtual tables can provide alternative implementations of functions using the xFindFunction method of the virtual table module.', 'virtual table can provide alternative implementation function use xfindfunction method virtual table module']
['Therefore, SQLite returns SQLITE_BUSY_API_constant for the first process, hoping that this will induce the first process to release its read lock and allow the second process to proceed.', 'therefore , sqlite return sqlite_busy_api_constant first process , hop induce first process release read lock allow second process proceed']
['At most one preupdate hook may be registered at a time on a single database connection; each call to sqlite3_preupdate_hook_APIName overrides the previous setting.', 'most one preupdate hook be register time single database connection ; each call sqlite3_preupdate_hook_apiname override previous setting']
['See also: sqlite3_strglob_APIName.', 'see : sqlite3_strglob_apiname']
['If this statement is a SELECT statement and the Nth column of sqlite3_column_decltype_APIParam_0 set of that SELECT is a table column (not an expression or subquery) then the declared type of the table column is returned by sqlite3_column_decltype_APIName.', 'if statement be select statement nth column sqlite3_column_decltype_apiparam_0 set select be table column then declare type table column be return by sqlite3_column_decltype_apiname']
['So the new function is not good for anything by itself.', 'so function be good anything by']
['Regardless of whether or not the limit was changed, the sqlite3_limit_APIName interface returns the prior value of the limit.', 'regardless whether or limit be change , sqlite3_limit_apiname interface return prior value limit']
['If sqlite3_unlock_notify_APIName is called when the blocked connection already has a registered unlock-notify callback, then the new callback replaces the old.', 'if sqlite3_unlock_notify_apiname be call when block connection already have register unlock_notify callback , then callback replace old']
['If an element of a result row is NULL then the corresponding string pointer for the sqlite3_exec_APIName callback is a NULL pointer.', 'if element result row be null then correspond string pointer sqlite3_exec_apiname callback be null pointer']
['If the sqlite3_drop_modules_APIParam_2 parameter is NULL, then all virtual table modules are removed.', 'if sqlite3_drop_modules_apiparam_2 parameter be null , then virtual table module be remove']
['The second argument to the busy handler callback is the number of times that the busy handler has been invoked previously for the same locking event.', 'second argument busy handler callback be number time busy handler have invoke previously lock event']
['The wal file is deleted when the database is changed back to rollback mode or when the number of database clients drops to zero.', 'wal file be delete when database be change back rollback mode or when number database client drop zero']
['If the application then re-attempts the "DROP TABLE" or "DROP INDEX" query, an infinite loop might be the result.', 'if application then re_attempts drop table or drop index query , infinite loop may be result']
['The application does not need to worry about freeing the result.', 'application do need worry about free result']
[' The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy.', 'sqlite3_value_dup_apiname interface make copy sqlite3_value object d return pointer copy']
['The internal databases can be given the large, default limits.', 'internal database can be give large , default limit']
['The sqlite3_create_collation_v2_APIName works like sqlite3_create_collation_APIName with the addition that the xDestroy callback is invoked on pArg when the collating function is deleted.', 'sqlite3_create_collation_v2_apiname work like sqlite3_create_collation_apiname addition xdestroy callback be invoke parg when collate function be delete']
['Thus the result table has 8 entries.', 'thus result table have # entry']
['sqlite3_prepare_v3_APIName has an extra "prepFlags" option that is used for special purposes.', 'sqlite3_prepare_v3_apiname have extra prepflag option be use special purpose']
['The new row must meet the same criteria as for sqlite3_blob_open_APIName - it must exist and there must be either a blob or text value stored in the nominated column.', 'row must meet criterion as sqlite3_blob_open_apiname must exist must be either blob or text value store nominate column']
['Loops are numbered starting from zero.', 'loop be number start zero']
['The caller is responsible for freeing sqlite3_serialize_APIParam_0 to avoid a memory leak.', 'caller be responsible free sqlite3_serialize_apiparam_0 avoid memory leak']
['In such cases, the mutex must be exited an equal number of times before another thread can enter.', 'such case , mutex must be exit equal number time before another thread can enter']
['See also: SQL functions sqlite_compileoption_used_APIName and sqlite_compileoption_get_APIName and the compile_options pragma.', 'see : sql function sqlite_compileoption_used_apiname sqlite_compileoption_get_apiname compile_option pragma']
['The collating function must return an integer that is negative, zero, or positive if the first string is less than, equal to, or greater than the second, respectively.', 'collate function must return integer be negative , zero , or positive if first string be less than , equal , or great than second , respectively']
['Passing a NULL pointer to sqlite3_free_APIName is harmless.', 'pass null pointer sqlite3_free_apiname be harmless']
['An attempt to read from an expired BLOB handle fails with an error code of SQLITE_ABORT_API_constant.', 'attempt read expire blob handle fail error code sqlite_abort_api_constant']
['SQLite uses the string pointed to by the 2nd parameter of sqlite3_result_error_APIName or sqlite3_result_error16_APIName as the text of an error message.', 'sqlite us string point by 2nd parameter sqlite3_result_error_apiname or sqlite3_result_error16_apiname as text error message']
['If the argument to sqlite3_mutex_held_APIName is a NULL pointer then the routine should return 1.', 'if argument sqlite3_mutex_held_apiname be null pointer then routine should return #']
['When the same named SQL parameter is used more than once, second and subsequent occurrences have the same index as the first occurrence.', 'when name sql parameter be use more than once , second subsequent occurrence have index as first occurrence']
['The sqlite3_exec_APIName interface runs zero or more UTF-8 encoded, semicolon-separate SQL statements passed into its 2nd argument, in the context of the database connection passed in as its 1st argument.', 'sqlite3_exec_apiname interface run zero or more utf_8 encode , semicolon_separate sql statement pass into 2nd argument , context database connection pass as 1st argument']
['SQLITE_ERROR_API_constant is returned by sqlite3_snapshot_open_APIName if either of these conditions is violated, or if schema sqlite3_snapshot_open_APIParam_2 does not exist, or if the snapshot object is invalid.', 'sqlite_error_api_constant be return by sqlite3_snapshot_open_apiname if either condition be violate , or if schema sqlite3_snapshot_open_apiparam_2 do exist , or if snapshot object be invalid']
['The fourth parameter may also optionally include the SQLITE_DIRECTONLY_API_constant flag, which if present prevents the function from being invoked from within VIEWs or TRIGGERs.', 'fourth parameter optionally include sqlite_directonly_api_constant flag , which if present prevent function invoke within view or trigger']
['If min_APIParam_2 is the size of the prior allocation, then min_APIName bytes of the prior allocation are copied into the beginning of buffer returned by sqlite3_realloc_APIName and the prior allocation is freed.', 'if min_apiparam_2 be size prior allocation , then min_apiname byte prior allocation be copy into begin buffer return by sqlite3_realloc_apiname prior allocation be free']
['The strings returned by sqlite3_sql_APIName and sqlite3_normalized_sql_APIName are managed by SQLite and are automatically freed when the prepared statement is finalized.', 'string return by sqlite3_sql_apiname sqlite3_normalized_sql_apiname be manage by sqlite be automatically free when prepared statement be finalize']
[' sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table.', 'sqlite3_blob_reopen_apiname be use move exist blob handle so point different row database table']
['The destructor will also be invoked if the call to sqlite3_create_module_v2_APIName fails.', 'destructor be invoke if call sqlite3_create_module_v2_apiname fail']
['If SQLite has not been initialized using sqlite3_initialize_APIName prior to invoking sqlite3_complete16_APIName then sqlite3_initialize_APIName is invoked automatically by sqlite3_complete16_APIName.', 'if sqlite have initialize use sqlite3_initialize_apiname prior invoking sqlite3_complete16_apiname then sqlite3_initialize_apiname be invoke automatically by sqlite3_complete16_apiname']
['The first parameter must be a copy of the SQL function context that is sqlite3_aggregate_context_APIParam_1 to the xStep or xFinal callback routine that implements the aggregate function.', 'first parameter must be copy sql function context be sqlite3_aggregate_context_apiparam_1 xstep or xfinal callback routine implement aggregate function']
['sqlite3_vtab_collation_APIName returns a pointer to a buffer containing the name of the collation sequence for the corresponding constraint.', 'sqlite3_vtab_collation_apiname return pointer buffer contain name collation sequence correspond constraint']
['For clarity: the values returned by sqlite3_column_bytes_APIName and sqlite3_column_bytes16_APIName are the number of bytes in the string, not the number of characters.', 'clarity : value return by sqlite3_column_bytes_apiname sqlite3_column_bytes16_apiname be number byte string , number character']
['Strings returned by sqlite3_column_text_APIName and sqlite3_column_text16_APIName, even empty strings, are always zero-terminated.', 'string return by sqlite3_column_text_apiname sqlite3_column_text16_apiname , even empty string , be always zero_terminate']
['The N parameter must be between 0 and one less than the number of columns or the behavior will be undefined.', 'n parameter must be between # one less than number column or behavior be undefined']
[' The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.  The subtype information can be used to pass a limited amount of context from one SQL function to another.', 'sqlite3_value_subtype_apiname function return subtype application_defin sql function argument v. subtype information can be use pass limited amount context one sql function another']
['The sqlite3_result_error_nomem_APIName interface causes SQLite to throw an error indicating that a memory allocation failed.', 'sqlite3_result_error_nomem_apiname interface cause sqlite throw error indicate memory allocation fail']
['The sqlite3_total_changes_APIName interface only reports the number of rows that changed due to SQL statement run against database connection D.  Any changes by other database connections are ignored.', 'sqlite3_total_changes_apiname interface only report number row change due sql statement run against database connection d. change by other database connection be ignore']
[' The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string.', 'sqlite3_str_finish_apiname interface destroy sqlite3_str object x return pointer memory buffer obtain sqlite3_malloc64_apiname contain construct string']
['An appropriate implementation is selected automatically at compile-time.', 'appropriate implementation be select automatically compile_time']
['In the case of an update, this is the rowid after the update takes place.', 'case update , be rowid after update take place']
['The sqlite3_mutex_alloc_APIName routine returns NULL if it is unable to allocate the requested mutex.', 'sqlite3_mutex_alloc_apiname routine return null if be unable allocate request mutex']
['The first parameter to the authorizer callback is a copy of the third parameter to the sqlite3_set_authorizer_APIName interface.', 'first paramet authorizer callback be copy third paramet sqlite3_set_authorizer_apiname interface']
['The current value of the requested parameter is written into *pCur and the highest instantaneous value is written into *pHiwtr.', 'current value request parameter be write into pcur high instantaneous value be write into phiwtr']
['The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library.', 'sqlite3_release_memory_apiname interface attempt free n byte heap memory by deallocate non_essential memory allocation hold by database library']
['The return value is OS-dependent.', 'return value be os_dependent']
['Setting parameter X to NULL disables the progress handler.', 'set paramet x null disable progress handler']
['Hence, the current size of the soft heap limit can be determined by invoking sqlite3_soft_heap_limit64_APIName with a negative argument.', 'hence , current size soft heap limit can be determine by invoke sqlite3_soft_heap_limit64_apiname negative argument']
[' The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the S database on database connection D. If P is not a NULL pointer, then the size of the database in bytes is written into *P.For an ordinary on-disk database file, the serialization is just a copy of the disk file.', 'sqlite3_serialize_apiname interface return pointer memory be serialization s database database connection d. if p be null pointer , then size database byte be write into p ordinary on_disk database file , serialization be just copy disk file']
['The older interfaces (sqlite3_prepare_APIName and sqlite3_prepare16_APIName) are retained for backwards compatibility, but their use is discouraged.', 'old interface be retain backwards compatibility , but be discourage']
['The T argument is one of the SQLITE_TRACE_API_constant constants to indicate why the callback was invoked.', 't argument be one sqlite_trace_api_constant constant indicate why callback be invoke']
['Passing zero or a negative value as the nFrame parameter disables automatic checkpoints entirely.', 'pass zero or negative value as nframe paramet disable automatic checkpoint entirely']
['To execute an SQL statement, it must first be compiled into a byte-code program using one of these routines.', 'execute sql statement , must first be compile into byte_code program use one routine']
['If the D parameter in sqlite3_str_new_APIName is not NULL, then the maximum length of the string contained in the sqlite3_str object will be the value set for sqlite3_limit_APIName instead of SQLITE_MAX_LENGTH.', 'if d paramet sqlite3_str_new_apiname be null , then maximum length string contain sqlite3_str object be value set sqlite3_limit_apiname instead sqlite_max_length']
['Applications might use this to substitute a return value that is less expensive to compute and that the corresponding xUpdate method understands as a "no-change" value.', 'application may substitute return value be less expensive compute correspond xupdate method understand as no_change value']
['The index for named parameters can be looked up using the sqlite3_bind_parameter_index_APIName API if desired.', 'index name parameter can be look up use sqlite3_bind_parameter_index_apiname api if desire']
['Type is associated with individual values, not with the containers used to hold those values.', 'type be associate individual value , container use hold value']
['(See SQLITE_VTAB_CONSTRAINT_SUPPORT_API_constant.)', 'see sqlite_vtab_constraint_support_api_constant']
['To avoid this scenario, the sqlite3_unlock_notify_APIName performs deadlock detection.', 'avoid scenario , sqlite3_unlock_notify_apiname perform deadlock detection']
['If another error code - for example SQLITE_PROTOCOL_API_constant or an SQLITE_IOERR_API_constant error code - is returned by sqlite3_snapshot_open_APIName, then the final state of the read transaction is undefined.', 'if another error code example sqlite_protocol_api_constant or sqlite_ioerr_api_constant error code be return by sqlite3_snapshot_open_apiname , then final state read transaction be undefined']
['The sqlite3_data_count_APIName routine returns 0 if the previous call to sqlite3_step_APIName returned SQLITE_DONE_API_constant.', 'sqlite3_data_count_apiname routine return # if previous call sqlite3_step_apiname return sqlite_done_api_constant']
[' sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface.If this interface is invoked outside the context of an xConnect or xCreate virtual table method then the behavior is undefined.At present, there is only one option that may be configured using sqlite3_vtab_config_APIName.', 'sqlite3_vtab_config_apiname be call by either xconnect or xcreate method virtual table implementation configure various facet virtual table interface be invoke outside context xconnect or xcreate virtual table method then behavior be present , be only one option be configure use sqlite3_vtab_config_apiname']
['Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument.', 'return size byte blob accessible via successfully open blob handle only argument']
['If the previous call to this routine had an sqlite3_randomness_APIParam_1 of 1 or more and a non-NULL sqlite3_randomness_APIParam_2 then the pseudo-randomness is generated internally and without recourse to the sqlite3_vfs xRandomness method.', 'if previous call routine have sqlite3_randomness_apiparam_1 # or more non_null sqlite3_randomness_apiparam_2 then pseudo_randomness be generate internally without recourse sqlite3_vfs xrandomness method']
['These routine might also return NULL if a memory allocation error occurs.', 'routine may return null if memory allocation error occur']
['Hence, the application should ensure that the correct authorizer callback remains in place during the sqlite3_step_APIName.', 'hence , application should ensure correct authorizer callback remain place during sqlite3_step_apiname']
['Only an effective call to sqlite3_shutdown_APIName does any deinitialization.', 'only effective call sqlite3_shutdown_apiname do deinitialization']
['A negative value for the zeroblob results in a zero-length BLOB.', 'negative value zeroblob result zero_length blob']
['The return value of the xFileControl method becomes the return value of this routine.', 'return value xfilecontrol method become return value routine']
['The sqlite3_stmt_busy_APIName interface returns false if sqlite3_stmt_busy_APIParam_1 is a NULL pointer.', 'sqlite3_stmt_busy_apiname interface return false if sqlite3_stmt_busy_apiparam_1 be null pointer']
['Invoking any of these routines from outside of a preupdate callback or with a database connection pointer that is different from the one supplied to the preupdate callback results in undefined and probably undesirable behavior.', 'invoking routine outside preupdate callback or database connection pointer be different one supply preupdate callback result undefined probably undesirable behavior']
['Zeroblobs are intended to serve as placeholders for BLOBs whose content is later written using incremental BLOB I/O routines.', 'zeroblob be intend serve as placeholder blob whose content be later write use incremental blob routine']
['If the result is a numeric value then sqlite3_column_bytes16_APIName uses sqlite3_snprintf_APIName to convert that value to a UTF-16 string and returns the number of bytes in that string.', 'if result be numeric value then sqlite3_column_bytes16_apiname use sqlite3_snprintf_apiname convert value utf_16 string return number byte string']
['After an application receives an SQLITE_LOCKED_API_constant error, it may call the sqlite3_unlock_notify_APIName method with the blocked connection handle as the first argument to register for a callback that will be invoked when the blocking connections current transaction is concluded.', 'after application receive sqlite_locked_api_constant error , call sqlite3_unlock_notify_apiname method block connection handle as first argument register callback be invoke when block connection current transaction be conclude']
['sqlite3_last_insert_rowid_APIName is accessible to SQL statements via the last_insert_rowid_APIName SQL function.', 'sqlite3_last_insert_rowid_apiname be accessible sql statement via last_insert_rowid_apiname sql function']
['An aggregate SQL function requires an implementation of xStep and xFinal and NULL pointer must be passed for xFunc.', 'aggregate sql function require implementation xstep xfinal null pointer must be pass xfunc']
[' The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state, ready to be re-executed.', 'sqlite3_reset_apiname function be call reset prepared statement object back initial state , ready be re_execut']
['Advanced applications can use this interface to compare the predicted and the measured performance and issue warnings and/or rerun ANALYZE if discrepancies are found.', 'advanced application can interface compare predict measured performance issue warning rerun analyze if discrepancy be find']
['This API makes sure a global version of a function with a particular name and number of parameters exists.', 'api make sure global version function particular name number parameter exist']
["Indirect deadlock is also detected, so the system is also considered to be deadlocked if connection B has registered for an unlock-notify callback on the conclusion of connection C's transaction, where connection C is waiting on connection A.", 'indirect deadlock be detect , so system be consider be deadlocke if connection b have register unlock_notify callback conclusion connection c transaction , where connection c be wait connection']
['The first argument must be the sqlite3_index_info object that is the first parameter to the xBestIndex_APIName method.', 'first argument must be sqlite3_index_info object be first paramet xbestindex_apiname method']
['This interface used to be the only way to cause a checkpoint to occur.', 'interface use be only way cause checkpoint occur']
['Return the number of columns in the result set returned by the prepared statement.', 'return number column result set return by prepared statement']
['If the value of sqlite3_uri_int64_APIParam_2 is something other than an integer, then zero is returned by sqlite3_uri_int64_APIName.', 'if value sqlite3_uri_int64_apiparam_2 be something other than integer , then zero be return by sqlite3_uri_int64_apiname']
['Any SQL statement variables that had values bound to them using the sqlite3_bind_*_APIName API retain their values.', 'sql statement variable have value bind -PRON- use sqlite3_bind _ apiname api retain value']
['If the required lock still cannot be obtained, then the database is skipped and an attempt made to flush any dirty pages belonging to the next (if any) database.', 'if require lock still can be obtain , then database be skip attempt make flush dirty page belong next database']
['If the third parameter to sqlite3_bind_text_APIName or sqlite3_bind_text16_APIName or sqlite3_bind_blob_APIName is a NULL pointer then the fourth parameter is ignored and the end result is the same as sqlite3_bind_null_APIName.', 'if third parameter sqlite3_bind_text_apiname or sqlite3_bind_text16_apiname or sqlite3_bind_blob_apiname be null pointer then fourth parameter be ignore end result be as sqlite3_bind_null_apiname']
['To make an existing VFS into the default VFS, register it again with the sqlite3_vfs_register_APIParam_2 flag set.', 'make exist vfs into default vfs , register again sqlite3_vfs_register_apiparam_2 flag set']
['If a separate thread makes changes on the same database connection while sqlite3_total_changes_APIName is running then the value returned is unpredictable and not meaningful.', 'if separate thread make change database connection while sqlite3_total_changes_apiname be run then value return be unpredictable meaningful']
['If an error occurs while evaluating the SQL statements passed into sqlite3_exec_APIName, then execution of the current statement stops and subsequent statements are skipped.', 'if error occur while evaluate sql statement pass into sqlite3_exec_apiname , then execution current statement stop subsequent statement be skip']
['Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module.', 'module name must be register before create virtual table use module before use preexist virtual table module']
[' The sqlite3_deserialize_APIName interface causes the database connection D to disconnect from database S and then reopen S as an in-memory database based on the serialization contained in P.  The serialized database P is N bytes in size.', 'sqlite3_deserialize_apiname interface cause database connection d disconnect database s then reopen s as in_memory database base serialization contain p. serialize database p be n byte size']
['When all collating functions having the same name are deleted, that collation is no longer usable.', 'when collate function have name be delete , collation be no longer usable']
['ppStmt may not be NULL.', 'ppstmt be null']
['The sqlite3_load_extension_APIName interface returns SQLITE_OK_API_constant on success and SQLITE_ERROR_API_constant if something goes wrong.', 'sqlite3_load_extension_apiname interface return sqlite_ok_api_constant success sqlite_error_api_constant if something go wrong']
['The memory pointed to by the character pointers returned for the declaration type and collation sequence is valid until the next call to any SQLite API function.', 'memory point by character pointer return declaration type collation sequence be valid until next call sqlite api function']
['This API is only available if the library is built with pre-processor symbol SQLITE_ENABLE_STMT_SCANSTATUS defined.', 'api be only available if library be build pre_processor symbol sqlite_enable_stmt_scanstatus define']
['Only changes made to real tables are counted.', 'only change make real table be count']
['The sqlite3_snapshot_open_APIName interface returns SQLITE_OK_API_constant on success or an appropriate error code if it fails.', 'sqlite3_snapshot_open_apiname interface return sqlite_ok_api_constant success or appropriate error code if fail']
['The SQLITE_ prefix is omitted from any strings returned by sqlite3_compileoption_get_APIName.', 'sqlite prefix be omit string return by sqlite3_compileoption_get_apiname']
[' The sqlite3_compileoption_used_APIName function returns 0 or 1 indicating whether the specified option was defined at compile time.', 'sqlite3_compileoption_used_apiname function return # or # indicate whether specified option be define compile time']
['Refer to the SQL parameter documentation for additional information.', 'refer sql paramet documentation additional information']
['If sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName are called from a different thread while any of these routines are pending, then the results are undefined.', 'if sqlite3_step_apiname or sqlite3_reset_apiname or sqlite3_finalize_apiname be call different thread while routine be pende , then result be undefined']
['The filename returned by sqlite3_db_filename_APIName is the output of the xFullPathname method of the VFS.', 'filename return by sqlite3_db_filename_apiname be output xfullpathname method vfs']
['If sqlite3_prepare_APIParam_5 is not NULL then *pzTail is made to point to the first byte past the end of the first SQL statement in sqlite3_prepare_APIParam_2.', 'if sqlite3_prepare_apiparam_5 be null then pztail be make point first byte past end first sql statement sqlite3_prepare_apiparam_2']
['This interface can be used in combination sqlite3_next_stmt_APIName to locate all prepared statements associated with a database connection that are in need of being reset.', 'interface can be use combination sqlite3_next_stmt_apiname locate prepared statement associate database connection be need reset']
['The string returned by sqlite3_expanded_sql_APIName, on the other hand, is obtained from sqlite3_malloc_APIName and must be free by the application by passing it to sqlite3_free_APIName.', 'string return by sqlite3_expanded_sql_apiname , other hand , be obtain sqlite3_malloc_apiname must be free by application by pass sqlite3_free_apiname']
['Statistics might not be available for all loops in all statements.', 'statistic may be available loop statement']
['External mutex implementations are only required to provide these routines if SQLITE_DEBUG is defined and if NDEBUG is not defined.', 'external mutex implementation be only require provide routine if sqlite_debug be define if ndebug be define']
['The only way to find out whether SQLite automatically rolled back the transaction after an error is to use sqlite3_get_autocommit_APIName.', 'only way find out whether sqlite automatically roll back transaction after error be sqlite3_get_autocommit_apiname']
[' Each entry in most SQLite tables (except for WITHOUT ROWID tables) has a unique 64-bit signed integer key called the "rowid".', 'each entry most sqlite table have unique 64_bit sign integer key call rowid']
['The inconsistency is unfortunate but cannot be changed without breaking backwards compatibility.', 'inconsistency be unfortunate but can be change without break backwards compatibility']
[' These routines open an SQLite database file as specified by the filename argument.', 'routine open sqlite database file as specify by filename argument']
['If N or sqlite3_blob_write_APIParam_4 are less than zero SQLITE_ERROR_API_constant is returned by sqlite3_blob_write_APIName and no data is written.', 'if n or sqlite3_blob_write_apiparam_4 be less than zero sqlite_error_api_constant be return by sqlite3_blob_write_apiname no data be write']
['If the unprotected sqlite3_value object returned by sqlite3_column_value_APIName is used in any other way, including calls to routines like sqlite3_value_int_APIName, sqlite3_value_text_APIName, or sqlite3_value_bytes_APIName, the behavior is not threadsafe.', 'if unprotected sqlite3_value object return by sqlite3_column_value_apiname be use other way , include call routine like sqlite3_value_int_apiname , sqlite3_value_text_apiname , or sqlite3_value_bytes_apiname , behavior be threadsafe']
['The sqlite3_value_text16_APIName interface extracts a UTF-16 string in the native byte-order of the host machine.', 'sqlite3_value_text16_apiname interface extract utf_16 stre native byte_order host machine']
['The sqlite3_libversion_number_APIName function returns an integer equal to SQLITE_VERSION_API_constant_NUMBER.', 'sqlite3_libversion_number_apiname function return integer equal sqlite_version_api_constant_number']
['The sqlite3_value_frombind_APIName interface returns non-zero if the value sqlite3_value_frombind_APIParam_1 originated from one of the sqlite3_bind_APIName interfaces.', 'sqlite3_value_frombind_apiname interface return non_zero if value sqlite3_value_frombind_apiparam_1 originate one sqlite3_bind_apiname interface']
['At present, there is only one option that may be configured using sqlite3_vtab_config_APIName.', 'present , be only one option be configure use sqlite3_vtab_config_apiname']
['Hence, to find the current value of a limit without changing it, simply invoke this interface with sqlite3_limit_APIParam_3 set to -1.', 'hence , find current value limit without change , simply invoke interface sqlite3_limit_apiparam_3 set #']
['The "iScanStatusOp" must be one of the scanstatus options or the behavior of this interface is undefined.', 'iscanstatusop must be one scanstatus option or behavior interface be undefined']
['For example, "VACUUM" is not a keyword if SQLite is compiled with the -DSQLITE_OMIT_VACUUM option.', 'example , vacuum be keyword if sqlite be compile dsqlite_omit_vacuum option']
['This API is only available if the library was compiled with the SQLITE_ENABLE_UNLOCK_NOTIFY C-preprocessor symbol defined.', 'api be only available if library be compile sqlite_enable_unlock_notify c_preprocessor symbol define']
[' Contrary to the intuition of many, sqlite3_reset_APIName does not reset the bindings on a prepared statement.', 'contrary intuition many , sqlite3_reset_apiname do reset binding prepare statement']
['Any attempt to use these routines on an unprotected sqlite3_value is not threadsafe.', 'attempt routine unprotecte sqlite3_value be threadsafe']
['For the purposes of this API, a transaction is said to have been rolled back if an explicit "ROLLBACK" statement is executed, or an error or constraint causes an implicit rollback to occur.', 'purpose api , transaction be say have roll back if explicit rollback statement be execute , or error or constraint cause implicit rollback occur']
['The update hook implementation must not do anything that will modify the database connection that invoked the update hook.', 'update hook implementation must anything modify database connection invoke update hook']
['This private database will be automatically deleted as soon as the database connection is closed.', 'private database be automatically delete as soon as database connection be close']
['The following implementations are available in the SQLite core:', 'follow implementation be available sqlite core']
['Testing suggests that because the page cache is the predominate memory user in SQLite, most applications will achieve adequate soft heap limit enforcement without the use of SQLITE_ENABLE_MEMORY_MANAGEMENT.', 'testing suggest because page cache be predominate memory user sqlite , most application achieve adequate soft heap limit enforcement without sqlite_enable_memory_management']
['Among other things, sqlite3_initialize_APIName will invoke sqlite3_os_init_APIName.', 'among other thing , sqlite3_initialize_apiname invoke sqlite3_os_init_apiname']
['The value of the sqlite3_get_auxdata_APIParam_2 parameter to these interfaces should be non-negative.', 'value sqlite3_get_auxdata_apiparam_2 parameter interface should be non_negative']
['This interface enables or disables both the C-API sqlite3_load_extension_APIName and the SQL function load_extension_APIName.', 'interface enable or disable both c_api sqlite3_load_extension_apiname sql function load_extension_apiname']
['If the sqlite3_stmt_status_APIParam_3 is true, then the counter is reset to zero after this interface call returns.', 'if sqlite3_stmt_status_apiparam_3 be true , then counter be reset zero after interface call return']
['The sqlite3_strlike_APIName interface returns zero if and only if string X matches the LIKE pattern P with escape character E. The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE P ESCAPE E" operator in the SQL dialect understood by SQLite.', 'sqlite3_strlike_apiname interface return zero if only if string x match like pattern p escape character e. definition like pattern matching use sqlite3_strlike_apiname be as x like p escape e operator sql dialect understand by sqlite']
['If sqlite3_unlock_notify_APIName is called in a multi-threaded application, there is a chance that the blocking connection will have already concluded its transaction by the time sqlite3_unlock_notify_APIName is invoked.', 'if sqlite3_unlock_notify_apiname be call multi_threaded application , be chance block connection have already conclude transaction by time sqlite3_unlock_notify_apiname be invoke']
['sqlite3_blob_write_APIName may only modify the contents of the BLOB; it is not possible to increase the size of a BLOB using this API.', 'sqlite3_blob_write_apiname only modify content blob ; be possible increase size blob use api']
['The sqlite3_get_table_APIName interface is implemented as a wrapper around sqlite3_exec_APIName.', 'sqlite3_get_table_apiname interface be implement as wrapper around sqlite3_exec_apiname']
['Applications must always be prepared to encounter a NULL pointer in any of the third through the sixth parameters of the authorization callback.', 'application must always be prepare encounter null pointer third through sixth parameter authorization callback']
['But after version 3.6.23.1 (2010-03-26, sqlite3_step_APIName began calling sqlite3_reset_APIName automatically in this circumstance rather than returning SQLITE_MISUSE_API_constant.', 'but after version # 2010_03_26 , sqlite3_step_apiname begin call sqlite3_reset_apiname automatically circumstance rather than return sqlite_misuse_api_constant']
['Because of the way the sqlite3_malloc_APIName happens within sqlite3_get_table_APIName, the calling function must not try to call sqlite3_free_APIName directly.', 'because way sqlite3_malloc_apiname happen within sqlite3_get_table_apiname , call function must try call sqlite3_free_apiname directly']
['However, the error string might be overwritten or deallocated by subsequent calls to other SQLite interface functions.', 'however , error string may be overwrite or deallocate by subsequent call other sqlite interface function']
['The first parameter "n" is the total size of the buffer, including space for the zero terminator.', 'first paramet n be total size buffer , include space zero terminator']
['The sqlite3_reset_APIName interface resets the prepared statement S back to the beginning of its program.', 'sqlite3_reset_apiname interface reset prepared statement s back begin program']
['The sqlite3_open_APIParam_1 argument is interpreted as UTF-8 for sqlite3_open_APIName and sqlite3_open_v2_APIName and as UTF-16 in the native byte order for sqlite3_open16_APIName.', 'sqlite3_open_apiparam_1 argument be interpret as utf_8 sqlite3_open_apiname sqlite3_open_v2_apiname as utf_16 native byte order sqlite3_open16_apiname']
['As well as being set automatically as rows are inserted into database tables, the value returned by sqlite3_last_insert_rowid_APIName may be set explicitly by sqlite3_set_last_insert_rowid_APIName', 'as well as set automatically as row be insert into database table , value return by sqlite3_last_insert_rowid_apiname be set explicitly by sqlite3_set_last_insert_rowid_apiname']
["If the path begins with a '/' character, then it is interpreted as an absolute path.", 'if path begin character , then be interpret as absolute path']
['Note to Windows Runtime users:  The temporary directory must be set prior to calling sqlite3_open_APIName or sqlite3_open_v2_APIName.', 'note window runtime user : temporary directory must be set prior call sqlite3_open_apiname or sqlite3_open_v2_apiname']
['If the 4th parameter to the sqlite3_result_text* interfaces or sqlite3_result_blob is the special constant SQLITE_TRANSIENT_API_constant then SQLite makes a copy of the result into space obtained from sqlite3_malloc_APIName before it returns.', 'if 4th parameter sqlite3_result_text interface or sqlite3_result_blob be special constant sqlite_transient_api_constant then sqlite make copy result into space obtain sqlite3_malloc_apiname before return']
[' The sqlite3_set_last_insert_rowid(D, R) method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database.', 'sqlite3_set_last_insert_rowid method allow application set value return by call sqlite3_last_insert_rowid_apiname r without insert row into database']
['The calling function should free this memory by calling sqlite3_free_APIName.', 'call function should free memory by call sqlite3_free_apiname']
['If that does not work, it constructs a name "sqlite3_X_init" where the X is consists of the lower-case equivalent of all ASCII alphabetic characters in the filename from the last "/" to the first following "."', 'if do work , construct name sqlite3_x_init where x be consist lower_case equivalent ascii alphabetic character filename last first following']
['The sqlite3_version[] string constant contains the text of SQLITE_VERSION_API_constant macro.', 'sqlite3_version stre constant contain text sqlite_version_api_constant macro']
['The sqlite3_errmsg_APIName and sqlite3_errmsg16_APIName return English-language text that describes the error, as either UTF-8 or UTF-16 respectively.', 'sqlite3_errmsg_apiname sqlite3_errmsg16_apiname return english_language text describe error , as either utf_8 or utf_16 respectively']
['If N is less than one then the progress handler is disabled.', 'if n be less than one then progress handler be disabled']
['Only a single progress handler may be defined at one time per database connection; setting a new progress handler cancels the old one.', 'only single progress handler be define one time per database connection ; set progress handler cancel old one']
['Return the index of an SQL parameter given its name.', 'return index sql paramet give name']
['A call to sqlite3_shutdown_APIName is an "effective" call if it is the first call to sqlite3_shutdown_APIName since the last sqlite3_initialize_APIName.', 'call sqlite3_shutdown_apiname be effective call if be first call sqlite3_shutdown_apiname since last sqlite3_initialize_apiname']
[' These interfaces provide the same information as the SQLITE_VERSION, SQLITE_VERSION_NUMBER, and SQLITE_SOURCE_ID C preprocessor macros but are associated with the library instead of the header file.', 'interface provide information as sqlite_version , sqlite_version_number , sqlite_source_id c preprocessor macro but be associate library instead header file']
['Checkpoints initiated by this mechanism are PASSIVE.', 'checkpoint initiate by mechanism be passive']
['The return value of sqlite3_column_type_APIName can be used to decide which of the first six interface should be used to extract the column value.', 'return value sqlite3_column_type_apiname can be use decide which first six interface should be use extract column value']
['If it is called with the database handle in autocommit mode but fails for some other reason, whether or not a read transaction is opened on schema S is undefined.', 'if be call database handle autocommit mode but fail other reason , whether or read transaction be open schema s be undefined']
['If sqlite3_uri_boolean_APIParam_2 is not a query parameter on sqlite3_uri_boolean_APIParam_1 or if the value of sqlite3_uri_boolean_APIParam_2 is does not match any of the above, then sqlite3_uri_boolean_APIName returns (B!=0).', 'if sqlite3_uri_boolean_apiparam_2 be query parameter sqlite3_uri_boolean_apiparam_1 or if value sqlite3_uri_boolean_apiparam_2 be do match above , then sqlite3_uri_boolean_apiname return b 0']
['The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite.', 'sqlite3_extended_result_codes_apiname routine enable or disable extended result code feature sqlite']
['If the SQL statement being executed returns any data, then SQLITE_ROW_API_constant is returned each time a new row of data is ready for processing by the caller.', 'if sql statement execute return datum , then sqlite_row_api_constant be return each time row datum be ready processing by caller']
['The sqlite3_strlike_APIName function matches Unicode characters, though only ASCII characters are case folded.', 'sqlite3_strlike_apiname function match unicode character , though only ascii character be case fold']
['This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized.', 'interface return pointer sqlite3_mutex object serialize access database connection give argument when thread mode be serialize']
['The sqlite3_str_append_APIName method appends exactly sqlite3_str_append_APIParam_3 bytes from string S onto the end of the sqlite3_str object X.  sqlite3_str_append_APIParam_3 must be non-negative.', 'sqlite3_str_append_apiname method append exactly sqlite3_str_append_apiparam_3 byte stre s onto end sqlite3_str object x. sqlite3_str_append_apiparam_3 must be non_negative']
['A sqlite3_free_table_APIParam_1 table should be deallocated using sqlite3_free_table_APIName.', 'sqlite3_free_table_apiparam_1 table should be deallocate use sqlite3_free_table_apiname']
['If database sqlite3_wal_checkpoint_v2_APIParam_2 is the name of an attached database that is not in WAL mode, SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName and both *pnLog and *pnCkpt set to -1.', 'if database sqlite3_wal_checkpoint_v2_apiparam_2 be name attached database be wal mode , sqlite_ok_api_constant be return by sqlite3_wal_checkpoint_v2_apiname both pnlog pnckpt set #']
['Note that application-defined SQL functions or virtual tables might change the database indirectly as a side effect.', 'note application_defin sql function or virtual table may change database indirectly as side effect']
['SQLite will invoke sqlite3_free_APIName on *pzErrMsg after xEntryPoint_APIName returns.', 'sqlite invoke sqlite3_free_apiname pzerrmsg after xentrypoint_apiname return']
['An authorizer is used when preparing SQL statements from an untrusted source, to ensure that the SQL statements do not try to access data they are not allowed to see, or that they do not try to execute malicious statements that damage the database.', 'authorizer be use when prepare sql statement untrusted source , ensure sql statement try access datum be allow see , or try execute malicious statement damage database']
['sqlite3_blob_reopen_APIName is used to move an existing BLOB handle so that it points to a different row of the same database table.', 'sqlite3_blob_reopen_apiname be use move exist blob handle so point different row database table']
['See also: sqlite3_drop_modules_APIName', 'see : sqlite3_drop_modules_apiname']
['sqlite3_collation_needed not exist in API_info', 'sqlite3_collation_neede exist api_info']
['To append a zero-terminated string in its entirety, use the sqlite3_str_appendall_APIName method instead.', 'append zero_terminate string entirety , sqlite3_str_appendall_apiname method instead']
['Call the sqlite3_enable_load_extension_APIName routine with onoff==1 to turn extension loading on and call it with onoff==0 to turn it back off again.', 'call sqlite3_enable_load_extension_apiname routine onoff 1 turn extension loading call onoff 0 turn back off again']
['In the legacy interface, the return value will be either SQLITE_BUSY_API_constant, SQLITE_DONE_API_constant, SQLITE_ROW_API_constant, SQLITE_ERROR_API_constant, or SQLITE_MISUSE_API_constant.', 'legacy interface , return value be either sqlite_busy_api_constant , sqlite_done_api_constant , sqlite_row_api_constant , sqlite_error_api_constant , or sqlite_misuse_api_constant']
['The sixth argument to sqlite3_bind_text64_APIName must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE to specify the encoding of the text in the third parameter.', 'sixth argument sqlite3_bind_text64_apiname must be one sqlite_utf8_api_constant , sqlite_utf16_api_constant , sqlite_utf16_api_constantbe , or sqlite_utf16_api_constantle specify encode text third parameter']
[' The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema S in database connection D.  On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into *P and returns SQLITE_OK.', 'sqlite3_snapshot_get_apiname interface attempt make sqlite3_snapshot object record current state schema s database connection d. success , sqlite3_snapshot_get_apiname interface write pointer newly create sqlite3_snapshot object into p return sqlite_ok']
['So just because a column is declared to contain a particular type does not mean that the data stored in that column is of the declared type.', 'so just because column be declare contain particular type do mean datum store column be declare type']
['This means that an attempt is made to convert the value to an integer or floating point.', 'mean attempt be make convert value integer or float point']
['The application should only invoke sqlite3_initialize_APIName and sqlite3_shutdown_APIName.', 'application should only invoke sqlite3_initialize_apiname sqlite3_shutdown_apiname']
['The sqlite3_stmt_readonly_APIName interface returns true for BEGIN since BEGIN merely sets internal flags, but the BEGIN IMMEDIATE and BEGIN EXCLUSIVE commands do touch the database and so sqlite3_stmt_readonly_APIName returns false for those commands.', 'sqlite3_stmt_readonly_apiname interface return true begin since begin merely set internal flag , but begin immediate begin exclusive command touch database so sqlite3_stmt_readonly_apiname return false command']
['In every case the first argument is a pointer to the prepared statement that is being evaluated (the sqlite3_stmt* that was returned from sqlite3_prepare_v2_APIName or one of its variants) and the second argument is the index of the column for which information should be returned.', 'every case first argument be pointer prepare statement be evaluate second argument be index column which information should be return']
['The sqlite3_initialize_APIName routine is called internally by many other SQLite interfaces so that an application usually does not need to invoke sqlite3_initialize_APIName directly.', 'sqlite3_initialize_apiname routine be call internally by many other sqlite interface so application usually do need invoke sqlite3_initialize_apiname directly']
['The first argument to the callback is a copy of the third argument to sqlite3_update_hook_APIName.', 'first argument callback be copy third argument sqlite3_update_hook_apiname']
['Extension loading must be enabled using sqlite3_enable_load_extension_APIName or sqlite3_db_config_APIName prior to calling this API, otherwise an error will be returned.', 'extension loading must be enable use sqlite3_enable_load_extension_apiname or sqlite3_db_config_apiname prior call api , otherwise error be return']
['Shared cache is disabled by default.', 'share cache be disable by default']
['In the "v2" interface, the more specific error code is returned directly by sqlite3_step_APIName.', 'v2 interface , more specific error code be return directly by sqlite3_step_apiname']
['The sqlite3_aggregate_context_APIName routine returns a NULL pointer when first called if sqlite3_aggregate_context_APIParam_2 is less than or equal to zero or if a memory allocate error occurs.', 'sqlite3_aggregate_context_apiname routine return null pointer when first call if sqlite3_aggregate_context_apiparam_2 be less than or equal zero or if memory allocate error occur']
['A call to sqlite3_snapshot_open_APIName will fail to open if the specified snapshot has been overwritten by a checkpoint.', 'call sqlite3_snapshot_open_apiname fail open if specify snapshot have overwrite by checkpoint']
['The memory high-water mark is reset to the current value of sqlite3_memory_used_APIName if and only if the parameter to sqlite3_memory_highwater_APIName is true.', 'memory high_water mark be reset current value sqlite3_memory_used_apiname if only if parameter sqlite3_memory_highwater_apiname be true']
['For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated.', 'insert or update rowid table seventh parameter be final rowid value row insert or update']
['If the same value is passed to multiple invocations of the same SQL function during query execution, under some circumstances the associated metadata may be preserved.', 'if value be pass multiple invocation sql function during query execution , under circumstance associate metadata be preserve']
['If a given call to sqlite3_unlock_notify_APIName would put the system in a deadlocked state, then SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName and no unlock-notify callback is registered.', 'if give call sqlite3_unlock_notify_apiname would put system deadlocke state , then sqlite_locked_api_constant be return by sqlite3_unlock_notify_apiname no unlock_notify callback be register']
['See the URI filename documentation for additional information.', 'see uri filename documentation additional information']
['When a configuration option is set, sqlite3_config_APIName returns SQLITE_OK_API_constant.', 'when configuration option be set , sqlite3_config_apiname return sqlite_ok_api_constant']
['Virtual table implementations that do write to rowid tables in this way can avoid this problem by restoring the original rowid value using sqlite3_set_last_insert_rowid_APIName before returning control to the user.', 'virtual table implementation write rowid table way can avoid problem by restore original rowid value use sqlite3_set_last_insert_rowid_apiname before return control user']
['Callback implementations should return zero to ensure future compatibility.', 'callback implementation should return zero ensure future compatibility']
['Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close_APIName when it is no longer required.', 'whether or error occur when be open , resource associate database connection handle should be release by pass sqlite3_close_apiname when be no longer require']
['But then the newer and more powerful sqlite3_wal_checkpoint_v2_APIName interface was added.', 'but then newer more powerful sqlite3_wal_checkpoint_v2_apiname interface be add']
['If an error code is returned by sqlite3_wal_hook_APIName, that error will propagate back up through the SQLite code base to cause the statement that provoked the callback to report an error, though the commit will have still occurred.', 'if error code be return by sqlite3_wal_hook_apiname , error propagate back up through sqlite code base cause statement provoke callback report error , though commit have still occur']
[' These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing.', 'routine be useful during command_line input determine if currently enter text seem form complete sql statement or if additional input be need before send text into sqlite parsing']
['In those routines that have a fourth argument, its value is the number of bytes in the parameter.', 'routine have fourth argument , value be number byte parameter']
['This interface is only available if SQLite is compiled with the SQLITE_ENABLE_SNAPSHOT option.', 'interface be only available if sqlite be compile sqlite_enable_snapshot option']
['Within the xFinal callback, it is customary to set N=0 in calls to sqlite3_aggregate_context_APIName so that no pointless memory allocations occur.', 'within xfinal callback , be customary set n 0 call sqlite3_aggregate_context_apiname so no pointless memory allocation occur']
['While there is nothing to prevent an application from calling sqlite3_log_APIName, doing so is considered bad form.', 'while be nothing prevent application call sqlite3_log_apiname , do so be consider bad form']
['The sixth, seventh and eighth parameters passed to the three "sqlite3_create_function*" functions, xFunc, xStep and xFinal, are pointers to C-language functions that implement the SQL function or aggregate.', 'sixth , seventh eighth parameter pass three sqlite3_create_function function , xfunc , xstep xfinal , be pointer c_language function implement sql function or aggregate']
['If the result is a UTF-8 string, then sqlite3_column_bytes16_APIName converts the string to UTF-16 and then returns the number of bytes.', 'if result be utf_8 string , then sqlite3_column_bytes16_apiname convert string utf_16 then return number byte']
['The sqlite3_preupdate_count_APIName interface returns the number of columns in the row that is being inserted, updated, or deleted.', 'sqlite3_preupdate_count_apiname interface return number column row be insert , update , or delete']
['The memory space used to hold strings and BLOBs is freed automatically.', 'memory space use hold string blob be free automatically']
['Note that this routine returns zero on a match and non-zero if the strings do not match, the same as sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName.', 'note routine return zero match non_zero if string match , as sqlite3_stricmp_apiname sqlite3_strnicmp_apiname']
['The sqlite3_keyword_count_APIName interface returns the number of distinct keywords understood by SQLite.', 'sqlite3_keyword_count_apiname interface return number distinct keyword understand by sqlite']
['These routines are useful during command-line input to determine if the currently entered text seems to form a complete SQL statement or if additional input is needed before sending the text into SQLite for parsing.', 'routine be useful during command_line input determine if currently enter text seem form complete sql statement or if additional input be need before send text into sqlite parsing']
['This causes the sqlite3_step_APIName interface to behave differently in three ways:', 'cause sqlite3_step_apiname interface behave differently three way']
['The sqlite3_uri_boolean_APIName routines returns false (0) if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "no", "false", or "off" in any case or if the value begins with a numeric zero.', 'sqlite3_uri_boolean_apiname routine return false if value query paramet sqlite3_uri_boolean_apiparam_2 be one no , false , or off case or if value begin numeric zero']
['The third argument (eTextRep) must be one of the constants:', 'third argument must be one constant']
['Calling sqlite3_blob_bytes_APIName on an aborted blob handle always returns zero.', 'call sqlite3_blob_bytes_apiname aborted blob handle always return zero']
['It is an error if there is already a read transaction open on the database, or if the database is not a WAL mode database.', 'be error if be already read transaction open database , or if database be wal mode database']
['The second argument to sqlite3_db_config(D,V,...)  is the configuration verb - an integer code that indicates what aspect of the database connection is being configured.', 'second argument sqlite3_db_config be configuration verb integer code indicate what aspect database connection be configure']
['If the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in F, then SQLite will invoke sqlite3_free_APIName on the serialization buffer when the database connection closes.', 'if sqlite_deserialize_freeonclose_api_constant bit be set f , then sqlite invoke sqlite3_free_apiname serialization buffer when database connection close']
['On success, sqlite3_blob_read_APIName returns SQLITE_OK_API_constant.', 'success , sqlite3_blob_read_apiname return sqlite_ok_api_constant']
['Use of this interface is not recommended.', 'interface be recommend']
['The idea here is that xEntryPoint_APIName is the entry point for a statically linked SQLite extension that is to be automatically loaded into all new database connections.', 'idea here be xentrypoint_apiname be entry point statically link sqlite extension be be automatically load into database connection']
['Any new SQL statements that are started after the sqlite3_interrupt_APIName call and before the running statements reaches zero are interrupted as if they had been running prior to the sqlite3_interrupt_APIName call.', 'sql statement be start after sqlite3_interrupt_apiname call before run statement reach zero be interrupt as if have run prior sqlite3_interrupt_apiname call']
[' The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database X of database connection D in mode M.  Status information is written back into integers pointed to by L and C. The M parameter must be a valid checkpoint mode:If sqlite3_wal_checkpoint_v2_APIParam_4 is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in WAL mode.', 'sqlite3_wal_checkpoint_v2_apiname interface run checkpoint operation database x database connection d mode m. status information be write back into integer point by l c. m parameter must be valid checkpoint mode : if sqlite3_wal_checkpoint_v2_apiparam_4 be null , then pnlog be set total number frame log file or # if checkpoint could run because error or because database be wal mode']
['Hence, the sqlite3_column_value_APIName interface is normally only useful within the implementation of application-defined SQL functions or virtual tables, not within top-level application code.', 'hence , sqlite3_column_value_apiname interface be normally only useful within implementation application_defin sql function or virtual table , within top_level application code']
['SQLITE_ERROR_API_constant means that a run-time error (such as a constraint violation) has occurred.', 'sqlite_error_api_constant mean run_time error have occur']
['The first argument is an integer code for the specific parameter to measure.', 'first argument be integer code specific paramet measure']
['In the templates above, NNN represents an integer literal, and VVV represents an alphanumeric identifier.', 'template above , nnn represent integer literal , vvv represent alphanumeric identifier']
['The length of the name is limited to 255 bytes in a UTF-8 representation, exclusive of the zero-terminator.', 'length name be limit # byte utf_8 representation , exclusive zero_terminator']
['A call to this routine stores sqlite3_randomness_APIParam_1 bytes of randomness into buffer sqlite3_randomness_APIParam_2. The sqlite3_randomness_APIParam_2 parameter can be a NULL pointer.', 'call routine store sqlite3_randomness_apiparam_1 byte randomness into buffer sqlite3_randomness_apiparam_2 . sqlite3_randomness_apiparam_2 parameter can be null pointer']
['The same SQL function may be registered multiple times using different preferred text encodings, with different implementations for each encoding.', 'sql function be register multiple time use different preferred text encoding , different implementation each encoding']
['sqlite3_bind_text not exist in API_info', 'sqlite3_bind_text exist api_info']
['If an sqlite3 object is destroyed while a transaction is open, the transaction is automatically rolled back.', 'if sqlite3 object be destroy while transaction be open , transaction be automatically roll back']
['Before the path or query components of a URI sqlite3_open16_APIParam_1 are interpreted, they are encoded using UTF-8 and all hexadecimal escape sequences replaced by a single byte containing the corresponding octet.', 'before path or query component uri sqlite3_open16_apiparam_1 be interpret , be encode use utf_8 hexadecimal escape sequence replace by single byte contain correspond octet']
['The other allowed parameters to sqlite3_mutex_alloc_APIName (anything other than SQLITE_MUTEX_FAST_API_constant and SQLITE_MUTEX_RECURSIVE_API_constant) each return a pointer to a static preexisting mutex.', 'other allow parameter sqlite3_mutex_alloc_apiname each return pointer static preexisting mutex']
['Even reading previously freed memory might result in a segmentation fault or other severe error.', 'even read previously free memory may result segmentation fault or other severe error']
[' The sqlite3_finalize_APIName function is called to delete a prepared statement.', 'sqlite3_finalize_apiname function be call delete prepared statement']
['A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always "in use").', 'dirty page be if database cursor create by active sql statement be read , or if be page # database file page # be always']
[' In the SQL statement text input to sqlite3_prepare_v2_APIName and its variants, literals may be replaced by a parameter that matches one of following templates:In the templates above, NNN represents an integer literal, and VVV represents an alphanumeric identifier.', 'sql statement text input sqlite3_prepare_v2_apiname variant , literal be replace by paramet match one follow template : template above , nnn represent integer literal , vvv represent alphanumeric identifier']
['If sqlite3_deserialize_APIName fails for any reason and if the SQLITE_DESERIALIZE_FREEONCLOSE_API_constant bit is set in argument F, then sqlite3_free_APIName is invoked on argument sqlite3_deserialize_APIParam_3 prior to returning.', 'if sqlite3_deserialize_apiname fail reason if sqlite_deserialize_freeonclose_api_constant bit be set argument f , then sqlite3_free_apiname be invoke argument sqlite3_deserialize_apiparam_3 prior return']
[' The sqlite3_get_autocommit_APIName interface returns non-zero or zero if the given database connection is or is not in autocommit mode, respectively.', 'sqlite3_get_autocommit_apiname interface return non_zero or zero if give database connection be or be autocommit mode , respectively']
['Conversions between UTF-16be and UTF-16le are always done in place and do not invalidate a prior pointer, though of course the content of the buffer that the prior pointer references will have been modified.', 'conversion between utf_16be utf_16le be always do place invalidate prior pointer , though course content buffer prior pointer reference have modify']
['If the busy callback is not NULL, then the callback might be invoked with two arguments.', 'if busy callback be null , then callback may be invoke two argument']
['SQLITE_NOMEM_API_constant is returned by sqlite3_bind_value_APIName if malloc_APIName fails.', 'sqlite_nomem_api_constant be return by sqlite3_bind_value_apiname if malloc_apiname fail']
['In cases where there exist loops with no available statistics, sqlite3_stmt_scanstatus_APIName behaves as if the loop did not exist - it returns non-zero and leave the variable that sqlite3_stmt_scanstatus_APIParam_4 points to unchanged.', 'case where exist loop no available statistic , sqlite3_stmt_scanstatus_apiname behave as if loop do exist return non_zero leave variable sqlite3_stmt_scanstatus_apiparam_4 point unchanged']
['If an INSERT occurs within a trigger then this routine will return the rowid of the inserted row as long as the trigger is running.', 'if insert occur within trigger then routine return rowid insert row as long as trigger be run']
['This seems counter-intuitive since clearly the mutex cannot be held if it does not exist.', 'seem counter_intuitive since clearly mutex can be hold if do exist']
['sqlite3_tracenot exist in API_info', 'sqlite3_tracenot exist api_info']
['Moving an existing BLOB handle to a new row is faster than closing the existing handle and opening a new one.', 'move exist blob handle row be fast than close exist handle open one']
['These interfaces are used to retrieve runtime status information about the performance of SQLite, and optionally to reset various highwater marks.', 'interface be use retrieve runtime status information about performance sqlite , optionally reset various highwater mark']
['On those systems, shared cache mode should be enabled per-database connection via sqlite3_open_v2_APIName with SQLITE_OPEN_SHAREDCACHE_API_constant.', 'system , share cache mode should be enable per_database connection via sqlite3_open_v2_apiname sqlite_open_sharedcache_api_constant']
['For example, if a prepared statement is created using the SQL text "SELECT $abc,:xyz" and if parameter $abc is bound to integer 2345 and parameter :xyz is unbound, then sqlite3_sql_APIName will return the original string, "SELECT $abc,:xyz" but sqlite3_expanded_sql_APIName will return "SELECT 2345,NULL".', 'example , if prepare statement be create use sql text select abc , : xyz if paramet abc be bind integer # parameter : xyz be unbound , then sqlite3_sql_apiname return original string , select abc , : xyz but sqlite3_expanded_sql_apiname return select 2345 , null']
['Executing any other type of SQL statement does not modify the value returned by sqlite3_changes_APIName.', 'execute other type sql statement do modify value return by sqlite3_changes_apiname']
['The sqlite3_exec_APIName interface is a convenience wrapper around sqlite3_prepare_v2_APIName, sqlite3_step_APIName, and sqlite3_finalize_APIName, that allows an application to run multiple statements of SQL without having to use a lot of C code.', 'sqlite3_exec_apiname interface be convenience wrapper around sqlite3_prepare_v2_apiname , sqlite3_step_apiname , sqlite3_finalize_apiname , allow application run multiple statement sql without have lot c code']
['Within the xUpdate method of a virtual table, the sqlite3_value_nochange_APIName interface returns true if and only if the column corresponding to sqlite3_value_nochange_APIParam_1 is unchanged by the UPDATE operation that the xUpdate method call was invoked to implement and if and the prior xColumn method call that was invoked to extracted the value for that column returned without setting a result (probably because it queried sqlite3_vtab_nochange_APIName and found that the column was unchanging).', 'within xupdate method virtual table , sqlite3_value_nochange_apiname interface return true if only if column correspond sqlite3_value_nochange_apiparam_1 be unchanged by update operation xupdate method call be invoke implement if prior xcolumn method call be invoke extract value column return without set result probably because query sqlite3_vtab_nochange_apiname find column be unchanging']
['A call to sqlite3_interrupt_APIName that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after the sqlite3_interrupt_APIName call returns.', 'call sqlite3_interrupt_apiname occur when be no run sql statement be no_op have no effect sql statement be start after sqlite3_interrupt_apiname call return']
['Nine static mutexes are used by the current version of SQLite.', 'nine static mutexe be use by current version sqlite']
['See also: sqlite3_data_count_APIName', 'see : sqlite3_data_count_apiname']
['The sqlite3_os_init_APIName routine does operating-system specific initialization of the SQLite library.', 'sqlite3_os_init_apiname routine do operating_system specific initialization sqlite library']
['Future versions of SQLite may add additional static mutexes.', 'future version sqlite add additional static mutexe']
['sqlite3_commit_hook not exist in API_info', 'sqlite3_commit_hook exist api_info']
[' Return the index of an SQL parameter given its name.', 'return index sql paramet give name']
[' sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer.', 'sqlite3_blob_write_apiname be use write datum into open blob handle caller_supplied buffer']
['If sqlite3_close_v2_APIName is called on a database connection that still has outstanding prepared statements, BLOB handles, and/or sqlite3_backup objects then it returns SQLITE_OK_API_constant and the deallocation of resources is deferred until all prepared statements, BLOB handles, and sqlite3_backup objects are also destroyed.', 'if sqlite3_close_v2_apiname be call database connection still have outstanding prepared statement , blob handle , sqlite3_backup object then return sqlite_ok_api_constant deallocation resource be defer until prepared statement , blob handle , sqlite3_backup object be destroy']
['The first argument passed to an unlock-notify callback is a pointer to an array of void* pointers, and the second is the number of entries in the array.', 'first argument pass unlock_notify callback be pointer array void pointer , second be number entry array']
['The authorizer is disabled by default.', 'authorizer be disable by default']
['sqlite3_bind_parameter_name_APIParam_0 is always in UTF-8 encoding even if the named parameter was originally specified as UTF-16 in sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.', 'sqlite3_bind_parameter_name_apiparam_0 be always utf_8 encode even if name parameter be originally specify as utf_16 sqlite3_prepare16_apiname , sqlite3_prepare16_v2_apiname , or sqlite3_prepare16_v3_apiname']
['Note that the name length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.', 'note name length limit be utf_8 byte , character nor utf_16 byte']
['These routines are work-alikes of the "printf_APIName" family of functions from the standard C library.', 'routine be work_alikes printf_apiname family function standard c library']
['The sqlite3_get_table_APIName routine does not have access to any internal data structures of SQLite.', 'sqlite3_get_table_apiname routine do have access internal datum structure sqlite']
['The UTF-16 interfaces are provided as a convenience.', 'utf_16 interface be provide as convenience']
['sqlite3_busy_handlernot exist in API_info', 'sqlite3_busy_handlernot exist api_info']
['sqlite3_changes_APIName returns the number of rows modified, inserted or deleted by the most recently completed INSERT, UPDATE or DELETE statement on the database connection specified by the only parameter.', 'sqlite3_changes_apiname return number row modify , insert or delete by most recently complete insert , update or delete statement database connection specify by only parameter']
['See also: sqlite3_blob_write_APIName.', 'see : sqlite3_blob_write_apiname']
['If it is used by the second or subsequent such statement within a trigger program, the value returned reflects the number of rows modified by the previous INSERT, UPDATE or DELETE statement within the same trigger.', 'if be use by second or subsequent such statement within trigger program , value return reflect number row modify by previous insert , update or delete statement within trigger']
['The sqlite3_value_dup_APIName interface makes a copy of the sqlite3_value object D and returns a pointer to that copy.', 'sqlite3_value_dup_apiname interface make copy sqlite3_value object d return pointer copy']
['In that case, sqlite3_value_nochange_APIName will return true for the same column in the xUpdate method.', 'case , sqlite3_value_nochange_apiname return true column xupdate method']
['If either snapshot handle was obtained before the wal file was last deleted, the value returned by sqlite3_snapshot_cmp_APIName is undefined.', 'if either snapshot handle be obtain before wal file be last delete , value return by sqlite3_snapshot_cmp_apiname be undefined']
['These routines provide a means to determine the database, table, and table column that is the origin of a particular result column in SELECT statement.', 'routine provide mean determine database , table , table column be origin particular result column select statement']
['The second parameter is the name of the SQL function to be created or redefined.', 'second parameter be name sql function be create or redefine']
['Note that sqlite3_prepare_v2_APIName and sqlite3_step_APIName both modify their database connections for the meaning of "modify" in this paragraph.', 'note sqlite3_prepare_v2_apiname sqlite3_step_apiname both modify database connection meaning modify paragraph']
['When the serialized threading mode is in use, it might be the case that a second error occurs on a separate thread in between the time of the first error and the call to these interfaces.', 'when serialize threading mode be , may be case second error occur separate thread between time first error call interface']
['The usual case is that sqlite3_serialize_APIName copies the serialization of the database into memory obtained from sqlite3_malloc64_APIName and returns a pointer to that memory.', 'usual case be sqlite3_serialize_apiname copy serialization database into memory obtain sqlite3_malloc64_apiname return pointer memory']
['An example of where this might be useful is in a regular-expression matching function.', 'example where may be useful be regular_expression matching function']
['For example, if an application defines a function "eval_APIName" that calls sqlite3_exec_APIName, then the following SQL statement would change the database file through side-effects:', 'example , if application define function eval_apiname call sqlite3_exec_apiname , then follow sql statement would change database file through side_effect']
['sqlite3_rollback_hook not exist in API_info', 'sqlite3_rollback_hook exist api_info']
['The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement sqlite3_normalized_sql_APIParam_1 if sqlite3_normalized_sql_APIParam_1 was created by sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.', 'sqlite3_sql_apiname interface return pointer copy utf_8 sql text use create prepared statement sqlite3_normalized_sql_apiparam_1 if sqlite3_normalized_sql_apiparam_1 be create by sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_v2_apiname , or sqlite3_prepare16_v3_apiname']
['We admit that this is a goofy design.', 'PRON- admit be goofy design']
['In other words, you should call sqlite3_column_text_APIName, sqlite3_column_blob_APIName, or sqlite3_column_text16_APIName first to force the result into the desired format, then invoke sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName to find the size of the result.', 'other word , -PRON- should call sqlite3_column_text_apiname , sqlite3_column_blob_apiname , or sqlite3_column_text16_apiname first force result into desire format , then invoke sqlite3_column_bytes_apiname or sqlite3_column_bytes16_apiname find size result']
['SQLite provides these two interfaces for reporting on the status of the sqlite3_malloc_APIName, sqlite3_free_APIName, and sqlite3_realloc_APIName routines, which form the built-in memory allocation subsystem.', 'sqlite provide two interface report status sqlite3_malloc_apiname , sqlite3_free_apiname , sqlite3_realloc_apiname routine , which form built_in memory allocation subsystem']
['A call to sqlite3_initialize_APIName is an "effective" call if it is the first time sqlite3_initialize_APIName is invoked during the lifetime of the process, or if it is the first time sqlite3_initialize_APIName is invoked following a call to sqlite3_shutdown_APIName.', 'call sqlite3_initialize_apiname be effective call if be first time sqlite3_initialize_apiname be invoke during lifetime process , or if be first time sqlite3_initialize_apiname be invoke follow call sqlite3_shutdown_apiname']
['SQLite and its built-in VFSes interpret the following query parameters:', 'sqlite built_in vfse interpret follow query parameter']
['All open database connections must be closed and all other SQLite resources must be deallocated prior to invoking sqlite3_shutdown_APIName.', 'open database connection must be close other sqlite resource must be deallocate prior invoking sqlite3_shutdown_apiname']
['If the callback returns SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if it returns a value that does not correspond to any valid SQLite error code, the results are undefined.', 'if callback return sqlite_row_api_constant or sqlite_done_api_constant , or if return value do correspond valid sqlite error code , result be undefined']
['A SELECT statement will always have a positive sqlite3_column_count_APIName but depending on the WHERE clause constraints and the table content, it might return no rows.', 'select statement always have positive sqlite3_column_count_apiname but depend where clause constraint table content , may return no row']
['It is a grievous error for the application to try to use a prepared statement after it has been finalized.', 'be grievous error application try prepared statement after have finalize']
['The sqlite3_release_memory_APIName routine is a no-op returning zero if SQLite is not compiled with SQLITE_ENABLE_MEMORY_MANAGEMENT.', 'sqlite3_release_memory_apiname routine be no_op return zero if sqlite be compile sqlite_enable_memory_management']
['The BLOB handle is closed unconditionally.', 'blob handle be close unconditionally']
['The sqlite3_extended_errcode_APIName interface is the same except that it always returns the extended result code even when extended result codes are disabled.', 'sqlite3_extended_errcode_apiname interface be except always return extended result code even when extend result code be disabled']
['These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates.', 'routine be use by xfunc or xfinal callback implement sql function aggregate']
['For the static mutex types, the same mutex is returned by sqlite3_mutex_alloc_APIName on every call that has the same type number.', 'static mutex type , mutex be return by sqlite3_mutex_alloc_apiname every call have type number']
['Invoking sqlite3_finalize_APIName on a NULL pointer is a harmless no-op.', 'invoke sqlite3_finalize_apiname null pointer be harmless no_op']
['The name of the database is "main" for the main database or "temp" for the TEMP database, or the name that appears after the AS keyword for databases that are added using the ATTACH SQL command.', 'name database be main main database or temp temp database , or name appear after as keyword database be add use attach sql command']
['The destructor is invoked when the function is deleted, either by being overloaded or when the database connection closes.', 'destructor be invoke when function be delete , either by overload or when database connection close']
['SQLite ensures that *pzErrMsg is NULL before calling the xEntryPoint_APIName.', 'sqlite ensure pzerrmsg be null before call xentrypoint_apiname']
['Then as long as the pattern string remains the same, the compiled regular expression can be reused on multiple invocations of the same function.', 'then as long as pattern string remain , compile regular expression can be reuse multiple invocation function']
['By default, the error code is SQLITE_ERROR_API_constant.', 'by default , error code be sqlite_error_api_constant']
['If another thread is already within the mutex, sqlite3_mutex_enter_APIName will block and sqlite3_mutex_try_APIName will return SQLITE_BUSY_API_constant.', 'if another thread be already within mutex , sqlite3_mutex_enter_apiname block sqlite3_mutex_try_apiname return sqlite_busy_api_constant']
['The sqlite3_value that P points to will be destroyed when the preupdate callback returns.', 'sqlite3_value p point be destroy when preupdate callback return']
['The application should set this parameter to SQLITE_UTF16_API_constantLE if the function implementation invokes sqlite3_value_text16le_APIName on an input, or SQLITE_UTF16_API_constantBE if the implementation invokes sqlite3_value_text16be_APIName on an input, or SQLITE_UTF16_API_constant if sqlite3_value_text16_APIName is used, or SQLITE_UTF8_API_constant otherwise.', 'application should set parameter sqlite_utf16_api_constantle if function implementation invoke sqlite3_value_text16le_apiname input , or sqlite_utf16_api_constantbe if implementation invoke sqlite3_value_text16be_apiname input , or sqlite_utf16_api_constant if sqlite3_value_text16_apiname be use , or sqlite_utf8_api_constant otherwise']
['If a separate thread performs a new INSERT on the same database connection while the sqlite3_last_insert_rowid_APIName function is running and thus changes the last insert rowid, then the value returned by sqlite3_last_insert_rowid_APIName is unpredictable and might not equal either the old or the new last insert rowid.', 'if separate thread perform insert database connection while sqlite3_last_insert_rowid_apiname function be run thus change last insert rowid , then value return by sqlite3_last_insert_rowid_apiname be unpredictable may equal either old or last insert rowid']
['If the table has a column of type INTEGER PRIMARY KEY then that column is another alias for the rowid.', 'if table have column type integer primary key then column be another alias rowid']
['This in-memory database will vanish when the database connection is closed.', 'in_memory database vanish when database connection be close']
['The busy-handler is also invoked while waiting for database readers as described above.', 'busy_handler be invoke while wait database reader as describe above']
['The sqlite3_db_status_APIName routine returns SQLITE_OK_API_constant on success and a non-zero error code on failure.', 'sqlite3_db_status_apiname routine return sqlite_ok_api_constant success non_zero error code failure']
['See also:  built-in printf_APIName, printf_APIName SQL function', 'see : built_in printf_apiname , printf_apiname sql function']
['The following interfaces are provided.', 'follow interface be provide']
['When the SQLITE_THREADSAFE C preprocessor macro is 1 or 2, mutexes are enabled and SQLite is threadsafe.', 'when sqlite_threadsafe c preprocessor macro be # or 2 , mutexe be enable sqlite be threadsafe']
['The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger.', 'callback trigger contain utf_8 sql comment identifie trigger']
['If the final parameter to sqlite3_create_function_v2_APIName or sqlite3_create_window_function_APIName is not NULL, then it is destructor for the application data pointer.', 'if final paramet sqlite3_create_function_v2_apiname or sqlite3_create_window_function_apiname be null , then be destructor application datum pointer']
[' The sqlite3_sleep_APIName function causes the current thread to suspend execution for at least a number of milliseconds specified in its parameter.If the operating system does not support sleep requests with millisecond time resolution, then the time will be rounded up to the nearest second.', 'sqlite3_sleep_apiname function cause current thread suspend execution least number millisecond specify operating system do support sleep request millisecond time resolution , then time be round up nearest second']
['The sqlite3_mprintf_APIName and sqlite3_vmprintf_APIName routines write their results into memory obtained from sqlite3_malloc64_APIName.', 'sqlite3_mprintf_apiname sqlite3_vmprintf_apiname routine write result into memory obtain sqlite3_malloc64_apiname']
['If sqlite3_prepare_v2_APIParam_3 is positive, then it is the number of bytes read from sqlite3_prepare_v2_APIParam_2.', 'if sqlite3_prepare_v2_apiparam_3 be positive , then be number byte read sqlite3_prepare_v2_apiparam_2']
['The sqlite3_data_count_APIName routine also returns 0 if sqlite3_step_APIParam_1 is a NULL pointer.', 'sqlite3_data_count_apiname routine return # if sqlite3_step_apiparam_1 be null pointer']
['If logging is enabled, the sqlite3_log_APIParam_2 string and subsequent arguments are used with sqlite3_snprintf_APIName to generate the final output string.', 'if logging be enable , sqlite3_log_apiparam_2 stre subsequent argument be use sqlite3_snprintf_apiname generate final output string']
['CREATE TABLE t1(c1 VARIANT);', 'create table t1 c1 variant']
[' The sqlite3_extended_result_codes_APIName routine enables or disables the extended result codes feature of SQLite.', 'sqlite3_extended_result_codes_apiname routine enable or disable extended result code feature sqlite']
['For example, on unix systems, after sqlite3_open_v2_APIName returns SQLITE_CANTOPEN_API_constant, this interface could be called to get back the underlying "errno" that caused the problem, such as ENOSPC, EAUTH, EISDIR, and so forth.', 'example , unix system , after sqlite3_open_v2_apiname return sqlite_cantopen_api_constant , interface could be call get back underlie errno cause problem , such as enospc , eauth , eisdir , so forth']
['The collating function callback is invoked with a copy of the pArg application data pointer and with two strings in the encoding specified by the eTextRep argument.', 'collate function callback be invoke copy parg application datum pointer two string encode specify by etextrep argument']
[' These routines are used to register a new virtual table module name.', 'routine be use register virtual table module name']
['This interface returns a pointer to the next prepared statement after sqlite3_next_stmt_APIParam_2 associated with the database connection sqlite3_next_stmt_APIParam_1.', 'interface return pointer next prepared statement after sqlite3_next_stmt_apiparam_2 associated database connection sqlite3_next_stmt_apiparam_1']
['When built for other platforms (using the SQLITE_OS_OTHER=1 compile-time option) the application must supply a suitable implementation for sqlite3_os_init_APIName and sqlite3_os_end_APIName.', 'when build other platform application must supply suitable implementation sqlite3_os_init_apiname sqlite3_os_end_apiname']
['Sqlite3_aggregate_context_APIName is normally called once for each invocation of the xStep callback and then one last time when the xFinal callback is invoked.', 'sqlite3_aggregate_context_apiname be normally call once each invocation xstep callback then one last time when xfinal callback be invoke']
['Future versions of SQLite might provide greater resolution on the profiler callback.', 'future version sqlite may provide great resolution profiler callback']
['See also:  sqlite3_update_hook_APIName', 'see : sqlite3_update_hook_apiname']
['A function implementation with a non-negative nArg parameter is a better match than a function implementation with a negative nArg.', 'function implementation non_negative narg parameter be well match than function implementation negative narg']
[' This interface disables all automatic extensions previously registered using sqlite3_auto_extension_APIName.', 'interface disable automatic extension previously register use sqlite3_auto_extension_apiname']
['sqlite_master and sqlite_sequence).', 'sqlite_master sqlite_sequence']
['A function where the preferred text encoding matches the database encoding is a better match than a function where the encoding is different.', 'function where preferred text encode match database encoding be well match than function where encoding be different']
['Or, in other words, these routines are constructors for the prepared statement object.', 'or , other word , routine be constructor prepare statement object']
['Names are zero-terminated UTF-8 strings.', 'name be zero_terminate utf_8 string']
['The name of the module is given by the second parameter.', 'name module be give by second parameter']
['The SQLite core only ever uses sqlite3_mutex_try_APIName as an optimization so this is acceptable behavior.', 'sqlite core only ever use sqlite3_mutex_try_apiname as optimization so be acceptable behavior']
['A zero is returned by sqlite3_bind_parameter_index_APIName if no matching parameter is found.', 'zero be return by sqlite3_bind_parameter_index_apiname if no matching parameter be find']
['The sqlite3_busy_handler_APIName routine sets a callback function X that might be invoked with argument P whenever an attempt is made to access a database table associated with database connection D when another thread or process has the table locked.', 'sqlite3_busy_handler_apiname routine set callback function x may be invoke argument p whenever attempt be make access database table associate database connection d when another thread or process have table lock']
['SQLite is strongly typed, but the typing is dynamic not static.', 'sqlite be strongly type , but typing be dynamic static']
['The compiled version of the regular expression can be stored as metadata associated with the pattern string.', 'compile version regular expression can be store as metadata associate pattern string']
['Applications that invoke sqlite3_create_collation_v2_APIName with a non-NULL xDestroy argument should check the return code and dispose of the application data pointer themselves rather than expecting SQLite to deal with it for them.', 'application invoke sqlite3_create_collation_v2_apiname non_null xdestroy argument should check return code dispose application datum pointer rather than expect sqlite deal -PRON']
['An authorizer could then be put in place while the user-entered SQL is being prepared that disallows everything except SELECT statements.', 'authorizer could then be put place while user_entered sql be prepare disallow everything except select statement']
['without a following integer have no name and are referred to as "nameless" or "anonymous parameters".', 'without follow integer have no name be refer as nameless or anonymous parameter']
['If SQLITE_OK_API_constant is returned by sqlite3_snapshot_open_APIName, then the read transaction is now open on database snapshot P.', 'if sqlite_ok_api_constant be return by sqlite3_snapshot_open_apiname , then read transaction be now open database snapshot p']
['The leftmost column is number 0.', 'leftmost column be number #']
['If sqlite3_stmt_scanstatus_APIParam_2 is out of range - less than zero or greater than or equal to the total number of loops used to implement the statement - a non-zero value is returned by sqlite3_stmt_scanstatus_APIName and the variable that sqlite3_stmt_scanstatus_APIParam_4 points to is unchanged.', 'if sqlite3_stmt_scanstatus_apiparam_2 be out range less than zero or great than or equal total number loop use implement statement non_zero value be return by sqlite3_stmt_scanstatus_apiname variable sqlite3_stmt_scanstatus_apiparam_4 point be unchanged']
['If any other error occurs while processing an attached database, processing is abandoned and the error code is returned by sqlite3_wal_checkpoint_v2_APIName to the caller immediately.', 'if other error occur while process attach database , processing be abandon error code be return by sqlite3_wal_checkpoint_v2_apiname caller immediately']
['Any callback set by a previous call to sqlite3_rollback_hook_APIName for the same database connection is overridden.', 'callback set by previous call sqlite3_rollback_hook_apiname database connection be override']
['This gives the application an opportunity to prioritize any actions related to the set of unblocked database connections.', 'give application opportunity prioritize action relate set unblocked database connection']
[' Implementations of aggregate SQL functions use this routine to allocate memory for storing their state.The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates N of memory, zeroes out that memory, and returns a pointer to the new memory.', 'implementation aggregate sql function routine allocate memory store first time sqlite3_aggregate_context_apiname routine be call particular aggregate function , sqlite allocate n memory , zero out memory , return pointer memory']
['Assuming that after registering for an unlock-notify callback a database waits for the callback to be issued before taking any further action (a reasonable assumption), then using this API may cause the application to deadlock.', 'assume after register unlock_notify callback database wait callback be issue before take further action , then use api cause application deadlock']
['SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName in this case.', 'sqlite_busy_api_constant be return by sqlite3_wal_checkpoint_v2_apiname case']
['If the fifth argument is the special value SQLITE_STATIC_API_constant, then SQLite assumes that the information is in static, unmanaged space and does not need to be freed.', 'if fifth argument be special value sqlite_static_api_constant , then sqlite assume information be static , unmanaged space do nee be free']
['New run-time limit categories may be added in future releases.', 'run_time limit category be add future release']
['The sqlite3_snapshot_free_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.', 'sqlite3_snapshot_free_apiname interface be only available when sqlite_enable_snapshot compile_time option be use']
['Other kinds of conversion are done in place when it is possible, but sometimes they are not possible and in those cases prior pointers are invalidated.', 'other kind conversion be do place when be possible , but sometimes be possible case prior pointer be invalidate']
[' If the most recent sqlite3_* API call associated with database connection D failed, then the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call.', 'if most recent sqlite3 api call associated database connection d fail , then sqlite3_errcode_apiname interface return numeric result code or extended result code api call']
['If sqlite3_uri_parameter_APIParam_1 is the database filename pointer passed into the xOpen_APIName method of a VFS implementation when the flags parameter to xOpen_APIName has one or more of the SQLITE_OPEN_URI_API_constant or SQLITE_OPEN_MAIN_DB_API_constant bits set and sqlite3_uri_parameter_APIParam_2 is the name of the query parameter, then sqlite3_uri_parameter_APIName returns the value of the sqlite3_uri_parameter_APIParam_2 parameter if it exists or a NULL pointer if sqlite3_uri_parameter_APIParam_2 does not appear as a query parameter on sqlite3_uri_parameter_APIParam_1.  If sqlite3_uri_parameter_APIParam_2 is a query parameter of sqlite3_uri_parameter_APIParam_1 has no explicit value, then sqlite3_uri_parameter_APIName returns a pointer to an empty string.', 'if sqlite3_uri_parameter_apiparam_1 be database filename pointer pass into xopen_apiname method vfs implementation when flag paramet xopen_apiname have one or more sqlite_open_uri_api_constant or sqlite_open_main_db_api_constant bit set sqlite3_uri_parameter_apiparam_2 be name query paramet , then sqlite3_uri_parameter_apiname return value sqlite3_uri_parameter_apiparam_2 parameter if exist or null pointer if sqlite3_uri_parameter_apiparam_2 do appear as query paramet sqlite3_uri_parameter_apiparam_1 . if sqlite3_uri_parameter_apiparam_2 be query paramet sqlite3_uri_parameter_apiparam_1 have no explicit value , then sqlite3_uri_parameter_apiname return pointer empty string']
['The parameter N is the approximate number of virtual machine instructions that are evaluated between successive invocations of the callback X.', 'parameter n be approximate number virtual machine instruction be evaluate between successive invocation callback x']
['If the sqlite3_blob_open_APIParam_6 parameter is zero, the BLOB is opened for read-only access.', 'if sqlite3_blob_open_apiparam_6 parameter be zero , blob be open read_only access']
['The first argument to sqlite3_config_APIName is an integer configuration option that determines what property of SQLite is to be configured.', 'first argument sqlite3_config_apiname be integer configuration option determine what property sqlite be be configure']
[' The sqlite3_snapshot_open_APIName interface either starts a new read transaction or upgrades an existing one for schema S of database connection D such that the read transaction refers to historical snapshot P, rather than the most recent change to the database.', 'sqlite3_snapshot_open_apiname interface either start read transaction or upgrade exist one schema s database connection d such read transaction refer historical snapshot p , rather than most recent change database']
['Without the mutexes, it is not safe to use SQLite concurrently from more than one thread.', 'without mutexe , be safe sqlite concurrently more than one thread']
['Future enhancements may make use of negative N values to define new kinds of function caching behavior.', 'future enhancement make negative n value define kind function cache behavior']
['The sqlite3_free_APIName routine is a no-op if is called with a NULL pointer.', 'sqlite3_free_apiname routine be no_op if be call null pointer']
['The SQLite source code contains multiple implementations of these mutex routines.', 'sqlite source code contain multiple implementation mutex routine']
['If an SQLITE_BUSY_API_constant error is encountered when processing one or more of the attached WAL databases, the operation is still attempted on any remaining attached databases and SQLITE_BUSY_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName at the end.', 'if sqlite_busy_api_constant error be encounter when process one or more attached wal database , operation be still attempt remain attached database sqlite_busy_api_constant be return by sqlite3_wal_checkpoint_v2_apiname end']
['The sqlite3_vfs_find_APIName interface returns a pointer to a VFS given its name.', 'sqlite3_vfs_find_apiname interface return pointer vfs give name']
['These counters can be used to monitor the performance characteristics of the prepared statements.', 'counter can be use monitor performance characteristic prepare statement']
['If the option is unknown or SQLite is unable to set the option then this routine returns a non-zero error code.', 'if option be unknown or sqlite be unable set option then routine return non_zero error code']
['A hexadecimal escape sequence consists of a percent sign - "%" - followed by exactly two hexadecimal digits specifying an octet value.', 'hexadecimal escape sequence consist percent sign _ follow by exactly two hexadecimal digit specify octet value']
['If another busy handler was defined  (using sqlite3_busy_handler_APIName) prior to calling this routine, that other busy handler is cleared.', 'if another busy handler be define prior call routine , other busy handler be clear']
['The destructor is called to dispose of the BLOB or string even if the call to the bind API fails, except the destructor is not called if sqlite3_bind_int_APIParam_3 is a NULL pointer or the fourth parameter is negative.', 'destructor be call dispose blob or stre even if call bind api fail , except destructor be call if sqlite3_bind_int_apiparam_3 be null pointer or fourth paramet be negative']
['See also the sqlite3_commit_hook_APIName, sqlite3_rollback_hook_APIName, and sqlite3_preupdate_hook_APIName interfaces.', 'see sqlite3_commit_hook_apiname , sqlite3_rollback_hook_apiname , sqlite3_preupdate_hook_apiname interface']
['Unlike most of the SQLite API, sqlite3_test_control_APIName is not guaranteed to operate consistently from one release to the next.', 'unlike most sqlite api , sqlite3_test_control_apiname be guarantee operate consistently one release next']
['Only the following subset of interfaces are subject to out-of-memory errors:', 'only follow subset interface be subject out_of_memory error']
['When the callback returns SQLITE_OK_API_constant, that means the operation requested is ok.', 'when callback return sqlite_ok_api_constant , mean operation request be ok']
['The sqlite3_log_APIParam_2 string must not be NULL.', 'sqlite3_log_apiparam_2 string must be null']
['If SQLite is compiled with SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but can be fully or partially disabled using a call to sqlite3_config_APIName with the verbs SQLITE_CONFIG_SINGLETHREAD_API_constant, SQLITE_CONFIG_MULTITHREAD_API_constant, or SQLITE_CONFIG_SERIALIZED_API_constant.', 'if sqlite be compile sqlite_threadsafe 1 or 2 then mutexe be enable by default but can be fully or partially disabled use call sqlite3_config_apiname verb sqlite_config_singlethread_api_constant , sqlite_config_multithread_api_constant , or sqlite_config_serialized_api_constant']
['If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is negative then SQLite takes as the error message all text up through the first zero character.', 'if sqlite3_result_error_apiparam_3 sqlite3_result_error_apiname or sqlite3_result_error16_apiname be negative then sqlite take as error message text up through first zero character']
['On windows, the first component of an absolute path is a drive specification (e.g.', 'window , first component absolute path be drive specification e']
['sqlite3_blob_write_APIName is used to write data into an open BLOB handle from a caller-supplied buffer.', 'sqlite3_blob_write_apiname be use write datum into open blob handle caller_supplied buffer']
['The sqlite3_result_text64_APIName interface sets the return value of an application-defined function to be a text string in an encoding specified by the fifth (and last) parameter, which must be one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE.', 'sqlite3_result_text64_apiname interface set return value application_defined function be text string encoding specify by fifth parameter , which must be one sqlite_utf8_api_constant , sqlite_utf16_api_constant , sqlite_utf16_api_constantbe , or sqlite_utf16_api_constantle']
['The sqlite3_set_auxdata_APIName interface saves P as metadata for the N-th argument of the application-defined function.', 'sqlite3_set_auxdata_apiname interface save p as metadata n_th argument application_defined function']
['Transaction control statements such as BEGIN, COMMIT, ROLLBACK, SAVEPOINT, and RELEASE cause sqlite3_stmt_readonly_APIName to return true, since the statements themselves do not actually modify the database but rather they control the timing of when other statements modify the database.', 'transaction control statement such as begin , commit , rollback , savepoint , release cause sqlite3_stmt_readonly_apiname return true , since statement actually modify database but rather control timing when other statement modify database']
['If sqlite3_value_nochange_APIName is invoked anywhere other than within an xUpdate method call for an UPDATE statement, then the return value is arbitrary and meaningless.', 'if sqlite3_value_nochange_apiname be invoke anywhere other than within xupdate method call update statement , then return value be arbitrary meaningless']
['Otherwise, if sqlite3_blob_close_APIName is passed a valid open blob handle, the values returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions are set before returning.', 'otherwise , if sqlite3_blob_close_apiname be pass valid open blob handle , value return by sqlite3_errcode_apiname sqlite3_errmsg_apiname function be set before return']
['The first parameter is a prepared statement.', 'first parameter be prepare statement']
['The second argument is the database connection.', 'second argument be database connection']
['The sqlite3_libversion_APIName function returns a pointer to the to the sqlite3_version[] string constant.', 'sqlite3_libversion_apiname function return pointer sqlite3_version string constant']
['In the current implementation, the update hook is not invoked when conflicting rows are deleted because of an ON CONFLICT REPLACE clause.', 'current implementation , update hook be invoke when conflicting row be delete because conflict replace clause']
[' The sqlite3_bind_parameter_name_APIName interface returns the name of the N-th SQL parameter in the prepared statement P. SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" respectively.', 'sqlite3_bind_parameter_name_apiname interface return name n_th sql paramet prepare statement p. sql parameter form nnn or : aaa or aaa or aaa have name which be stre nnn or : aaa or aaa or aaa respectively']
['Changes made as part of foreign key actions are included in the count, but those made as part of REPLACE constraint resolution are not.', 'change make as part foreign key action be include count , but make as part replace constraint resolution be']
['(The "_LIMIT_" in the name is changed to "_MAX_".)', 'limit name be change max']
['Executing any other type of SQL statement does not affect the value returned by sqlite3_total_changes_APIName.', 'execute other type sql statement do affect value return by sqlite3_total_changes_apiname']
['See also: sqlite3_db_status_APIName', 'see : sqlite3_db_status_apiname']
['S must contain at least sqlite3_str_append_APIParam_3 non-zero bytes of content.', 's must contain least sqlite3_str_append_apiparam_3 non_zero byte content']
['Even if this routine returns an error code, the handle is still closed.', 'even if routine return error code , handle be still close']
['If sqlite3_value object sqlite3_value_pointer_APIParam_1 was initialized using sqlite3_bind_pointer_APIName or sqlite3_result_pointer_APIName and if strcmp_APIParam_1 and sqlite3_value_pointer_APIParam_2 are strings that compare equal according to strcmp_APIName, then sqlite3_value_pointer_APIName will return the pointer P.  Otherwise, sqlite3_value_pointer_APIName returns a NULL.', 'if sqlite3_value object sqlite3_value_pointer_apiparam_1 be initialize use sqlite3_bind_pointer_apiname or sqlite3_result_pointer_apiname if strcmp_apiparam_1 sqlite3_value_pointer_apiparam_2 be string compare equal accord strcmp_apiname , then sqlite3_value_pointer_apiname return pointer p. otherwise , sqlite3_value_pointer_apiname return null']
['Memory used to cache database pages to improve performance is an example of non-essential memory.', 'memory use cache database page improve performance be example non_essential memory']
['If any xEntryPoint_APIName returns an error, the sqlite3_open_APIName, sqlite3_open16_APIName, or sqlite3_open_v2_APIName call that provoked the xEntryPoint_APIName will fail.', 'if xentrypoint_apiname return error , sqlite3_open_apiname , sqlite3_open16_apiname , or sqlite3_open_v2_apiname call provoke xentrypoint_apiname fail']
['For the main database file, the database name is "main".', 'main database file , database name be main']
['Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the commit or rollback hook in the first place.', 'action modify database connection must be defer until after completion sqlite3_step_apiname call trigger commit or rollback hook first place']
['The details of the behavior of the sqlite3_step_APIName interface depend on whether the statement was prepared using the newer "vX" interfaces sqlite3_prepare_v3_APIName, sqlite3_prepare_v2_APIName, sqlite3_prepare16_v3_APIName, sqlite3_prepare16_v2_APIName or the older legacy interfaces sqlite3_prepare_APIName and sqlite3_prepare16_APIName.', 'detail behavior sqlite3_step_apiname interface depend whether statement be prepare use new vx interface sqlite3_prepare_v3_apiname , sqlite3_prepare_v2_apiname , sqlite3_prepare16_v3_apiname , sqlite3_prepare16_v2_apiname or old legacy interface sqlite3_prepare_apiname sqlite3_prepare16_apiname']
['If the value N is out of range or if the N-th parameter is nameless, then NULL is returned by sqlite3_bind_parameter_name_APIName.', 'if value n be out range or if n_th parameter be nameless , then null be return by sqlite3_bind_parameter_name_apiname']
['So as not to open security holes in older applications that are unprepared to deal with extension loading, and as a means of disabling extension loading while evaluating user-entered SQL, the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off.', 'so as open security hole old application be unprepared deal extension loading , as mean disable extension loading while evaluate user_entered sql , follow api be provide turn sqlite3_load_extension_apiname mechanism off']
['The sqlite3_log_APIName interface is intended for use by extensions such as virtual tables, collating functions, and SQL functions.', 'sqlite3_log_apiname interface be intend by extension such as virtual table , collate function , sql function']
['Failure to reset the prepared statement using sqlite3_reset_APIName would result in an SQLITE_MISUSE_API_constant return from sqlite3_step_APIName.', 'failure reset prepared statement use sqlite3_reset_apiname would result sqlite_misuse_api_constant return sqlite3_step_apiname']
['URI filenames are parsed according to RFC 3986.', 'uri filename be parse accord rfc #']
['The database, table and column on which the blob handle is open remain the same.', 'database , table column which blob handle be open remain']
['It is not safe to pass a sqlite3_free_table_APIParam_1 table directly to sqlite3_free_APIName.', 'be safe pass sqlite3_free_table_apiparam_1 table directly sqlite3_free_apiname']
['This interface allows the size of various constructs to be limited on a connection by connection basis.', 'interface allow size various construct be limit connection by connection basis']
['The soft heap limit is not enforced in the current implementation if one or more of following conditions are true:', 'soft heap limit be enforce current implementation if one or more following condition be true']
['The fifth argument to the BLOB and string binding interfaces is a destructor used to dispose of the BLOB or string after SQLite has finished with it.', 'fifth argument blob stre bind interface be destructor use dispose blob or string after sqlite have finish']
['Collating functions are deleted when they are overridden by later calls to the collation creation functions or when the database connection is closed using sqlite3_close_APIName.', 'collate function be delete when be override by later call collation creation function or when database connection be close use sqlite3_close_apiname']
['The third parameter to sqlite3_preupdate_hook_APIName is passed through as sqlite3_preupdate_depth_APIParam_1 to callbacks.', 'third parameter sqlite3_preupdate_hook_apiname be pass through as sqlite3_preupdate_depth_apiparam_1 callback']
['See also the load_extension_APIName SQL function.', 'see load_extension_apiname sql function']
[' These are utility routines, useful to VFS implementations, that check to see if a database file was a URI that contained a specific query parameter, and if so obtains the value of that query parameter.If F is the database filename pointer passed into the xOpen_APIName method of a VFS implementation when the flags parameter to xOpen_APIName has one or more of the SQLITE_OPEN_URI or SQLITE_OPEN_MAIN_DB bits set and P is the name of the query parameter, then sqlite3_uri_parameter_APIName returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F.  If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter_APIName returns a pointer to an empty string.The sqlite3_uri_boolean_APIName routine assumes that P is a boolean parameter and returns true (1) or false (0) according to the value of P.  The sqlite3_uri_boolean_APIName routine returns true (1) if the value of query parameter P is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number.', 'be utility routine , useful vfs implementation , check see if database file be uri contain specific query paramet , if so obtain value query f be database filename pointer pass into xopen_apiname method vfs implementation when flag paramet xopen_apiname have one or more sqlite_open_uri or sqlite_open_main_db bit set p be name query paramet , then sqlite3_uri_parameter_apiname return value p parameter if exist or null pointer if p do appear as query parameter f. if p be query paramet f have no explicit value , then sqlite3_uri_parameter_apiname return pointer empty sqlite3_uri_boolean_apiname routine assume p be boolean paramet return true or false accord value p. sqlite3_uri_boolean_apiname routine return true if value query paramet p be one yes , true , or case or if value begin non_zero number']
['An example application might be a web browser that has its own databases for storing history and separate databases controlled by JavaScript applications downloaded off the Internet.', 'example application may be web browser have database store history separate database control by javascript application download off internet']
['The PRNG is also used for the build-in random_APIName and randomblob_APIName SQL functions.', 'prng be use build_in random_apiname randomblob_apiname sql function']
['If that initialization fails, then the return value from sqlite3_complete16_APIName will be non-zero regardless of whether or not the input SQL is complete.', 'if initialization fail , then return value sqlite3_complete16_apiname be non_zero regardless whether or input sql be complete']
['The sqlite3_snapshot_free_APIName interface destroys sqlite3_snapshot P. The application must eventually free every sqlite3_snapshot object using this routine to avoid a memory leak.', 'sqlite3_snapshot_free_apiname interface destroy sqlite3_snapshot p. application must eventually free every sqlite3_snapshot object use routine avoid memory leak']
['The default encoding will be UTF-8 for databases created using sqlite3_open_APIName or sqlite3_open_v2_APIName.', 'default encode be utf_8 database create use sqlite3_open_apiname or sqlite3_open_v2_apiname']
['The rollback hook is invoked on a rollback that results from a commit hook returning non-zero, just as it would be with any other rollback.', 'rollback hook be invoke rollback result commit hook return non_zero , just as would be other rollback']
['A call to sqlite3_snapshot_open_APIName will fail if the database connection sqlite3_snapshot_open_APIParam_1 does not know that the database file for schema sqlite3_snapshot_open_APIParam_2 is in WAL mode.', 'call sqlite3_snapshot_open_apiname fail if database connection sqlite3_snapshot_open_apiparam_1 do know database file schema sqlite3_snapshot_open_apiparam_2 be wal mode']
['If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value.', 'if out_of_memory error occur , then return value routine be as if column have contain sql null value']
['Cautious programmers might include assert_APIName statements in their application to verify that values returned by these interfaces match the macros in the header, and thus ensure that the application is compiled with matching library and header files.', 'cautious programmer may include assert_apiname statement application verify value return by interface match macro header , thus ensure application be compile matching library header file']
['If sqlite3_wal_checkpoint_v2_APIParam_4 is not NULL, then *pnLog is set to the total number of frames in the log file or to -1 if the checkpoint could not run because of an error or because the database is not in WAL mode.', 'if sqlite3_wal_checkpoint_v2_apiparam_4 be null , then pnlog be set total number frame log file or # if checkpoint could run because error or because database be wal mode']
['But it is not safe to call this routine with a database connection that is closed or might close before sqlite3_interrupt_APIName returns.', 'but be safe call routine database connection be close or may close before sqlite3_interrupt_apiname return']
['If either Z or sqlite3_keyword_name_APIParam_3 are NULL or invalid pointers then calls to sqlite3_keyword_name_APIName result in undefined behavior.', 'if either z or sqlite3_keyword_name_apiparam_3 be null or invalid pointer then call sqlite3_keyword_name_apiname result undefined behavior']
['The fourth argument, pArg, is an application data pointer that is passed through as the first argument to the collating function callback.', 'fourth argument , parg , be application datum pointer be pass through as first argument collate function callback']
['At a minimum, literal values will be replaced with suitable placeholders.', 'minimum , literal value be replace suitable placeholder']
['sqlite3_create_collation not exist in API_info', 'sqlite3_create_collation exist api_info']
['When executing a "DROP TABLE" or "DROP INDEX" statement, SQLite checks if there are any currently executing SELECT statements that belong to the same connection.', 'when execute drop table or drop index statement , sqlite check if be currently execute select statement belong connection']
['The authorizer callback should return SQLITE_OK_API_constant to allow the action, SQLITE_IGNORE_API_constant to disallow the specific action but allow the SQL statement to continue to be compiled, or SQLITE_DENY_API_constant to cause the entire SQL statement to be rejected with an error.', 'authorizer callback should return sqlite_ok_api_constant allow action , sqlite_ignore_api_constant disallow specific action but allow sql statement continue be compile , or sqlite_deny_api_constant cause entire sql statement be reject error']
['If sqlite3_vfs_find_APIParam_1 is NULL then the default VFS is returned by sqlite3_vfs_find_APIName.', 'if sqlite3_vfs_find_apiparam_1 be null then default vfs be return by sqlite3_vfs_find_apiname']
['If SQLite determines that invoking the busy handler could result in a deadlock, it will go ahead and return SQLITE_BUSY_API_constant to the application instead of invoking the busy handler.', 'if sqlite determine invoke busy handler could result deadlock , go ahead return sqlite_busy_api_constant application instead invoke busy handler']
['The final callback parameter is the rowid of the row.', 'final callback parameter be rowid row']
['This interface is only available if SQLite is compiled with the SQLITE_ENABLE_DESERIALIZE option.', 'interface be only available if sqlite be compile sqlite_enable_deserialize option']
['If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with "-DSQLITE_MUTEX_APPDEF=1"), then no mutex implementation is included with the library.', 'if sqlite be compile sqlite_mutex_appdef preprocessor macro define , then no mutex implementation be include library']
['The sqlite3_str_reset_APIName method resets the string under construction inside sqlite3_str object sqlite3_str_reset_APIParam_1 back to zero bytes in length.', 'sqlite3_str_reset_apiname method reset stre under construction inside sqlite3_str object sqlite3_str_reset_apiparam_1 back zero byte length']
[' The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2.', 'sqlite3_file_control_apiname interface make direct call xfilecontrol method sqlite3_io_method object associate particular database identify by sqlite3_file_control_apiparam_2']
['The sqlite3_compileoption_get_APIName function allows iterating over the list of options that were defined at compile time by returning the N-th compile time option string.', 'sqlite3_compileoption_get_apiname function allow iterate over list option be define compile time by return n_th compile time option string']
['Otherwise an error code is returned by sqlite3_blob_open_APIName and, unless the error code is SQLITE_MISUSE_API_constant, *ppBlob is set to NULL.', 'otherwise error code be return by sqlite3_blob_open_apiname , unless error code be sqlite_misuse_api_constant , ppblob be set null']
['The only exception is that if SQLite is unable to allocate memory to hold the sqlite3 object, a NULL will be written into *ppDb instead of a pointer to the sqlite3 object.', 'only exception be if sqlite be unable allocate memory hold sqlite3 object , null be write into ppdb instead pointer sqlite3 object']
['If the third parameter is less than -1 or greater than 127 then the behavior is undefined.', 'if third parameter be less than # or great than # then behavior be undefined']
[' The SQLite core uses these routines for thread synchronization.', 'sqlite core use routine thread synchronization']
['If the URI contains an authority, then it must be either an empty string or the string "localhost".', 'if uri contain authority , then must be either empty string or string localhost']
[' These interfaces return the current status of an sqlite3_str object.If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the sqlite3_str_errcode_APIName method will return an appropriate error code.', 'interface return current status sqlite3_str prior error have occur while construct dynamic string sqlite3_str x , then sqlite3_str_errcode_apiname method return appropriate error code']
['The sqlite3_malloc_APIName routine returns a pointer to a block of memory at least N bytes in length, where N is the parameter.', 'sqlite3_malloc_apiname routine return pointer block memory least n byte length , where n be paramet']
['The database connection returned by sqlite3_db_handle is the same database connection that was sqlite3_db_handle_APIParam_1 to the sqlite3_prepare_v2_APIName call (or its variants) that was used to create the statement in the first place.', 'database connection return by sqlite3_db_handle be database connection be sqlite3_db_handle_apiparam_1 sqlite3_prepare_v2_apiname call be use create statement first place']
['If the SQL statement does not currently point to a valid row, or if the column index is out of range, the result is undefined.', 'if sql statement do currently point valid row , or if column index be out range , result be undefined']
['The incremental blob I/O routines can only read or overwriting existing blob content; they cannot change the size of a blob.', 'incremental blob routine can only read or overwrite exist blob content ; can change size blob']
['The 2nd argument to the sqlite3_exec_APIName callback function is the number of columns in the result.', '2nd argument sqlite3_exec_apiname callback function be number column result']
[' sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity.', 'sqlite3_interrupt_apiname cause pende database operation abort return early opportunity']
['Only the row can be changed.', 'only row can be change']
['Any callback set by a previous call to sqlite3_commit_hook_APIName for the same database connection is overridden.', 'callback set by previous call sqlite3_commit_hook_apiname database connection be override']
[' The sqlite3_table_column_metadata(X,D,T,C,....) routine returns information about column C of table T in database D on database connection X.', 'sqlite3_table_column_metadata routine return information about column c table t database d database connection x']
['A virtual filesystem (VFS) is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system.', 'virtual filesystem be sqlite3_vf object sqlite us interact underlie operating system']
['The sqlite3_initialize_APIName routine initializes the SQLite library.', 'sqlite3_initialize_apiname routine initialize sqlite library']
['A subsequent call to sqlite3_result_error_APIName or sqlite3_result_error16_APIName resets the error code to SQLITE_ERROR_API_constant.', 'subsequent call sqlite3_result_error_apiname or sqlite3_result_error16_apiname reset error code sqlite_error_api_constant']
['If no error (SQLITE_BUSY_API_constant or otherwise) is encountered while processing the attached databases, SQLITE_OK_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName.', 'if no error be encounter while process attach database , sqlite_ok_api_constant be return by sqlite3_wal_checkpoint_v2_apiname']
['Otherwise, they return the name of the attached database, table, or column that query result column was extracted from.', 'otherwise , return name attached database , table , or column query result column be extract']
['If the callback returns non-zero, then another attempt is made to access the database and the cycle repeats.', 'if callback return non_zero , then another attempt be make access database cycle repeat']
['The sqlite3_config_APIName interface is used to make global configuration changes to SQLite in order to tune SQLite to the specific needs of the application.', 'sqlite3_config_apiname interface be use make global configuration change sqlite order tune sqlite specific need application']
['The default configuration is recommended for most applications and so this routine is usually not necessary.', 'default configuration be recommend most application so routine be usually necessary']
['See also:  sqlite3_collation_needed_APIName and sqlite3_collation_needed16_APIName.', 'see : sqlite3_collation_needed_apiname sqlite3_collation_needed16_apiname']
['sqlite3_set_authorizernot exist in API_info', 'sqlite3_set_authorizernot exist api_info']
['Note that calling sqlite3_busy_timeout_APIName or evaluating PRAGMA busy_timeout=N will change the busy handler and thus clear any previously set busy handler.', 'note call sqlite3_busy_timeout_apiname or evaluate pragma busy_timeout n change busy handler thus clear previously set busy handler']
['The current value of the requested counter is returned by sqlite3_stmt_status_APIName.', 'current value request counter be return by sqlite3_stmt_status_apiname']
['sqlite3_result_pointernot exist in API_info', 'sqlite3_result_pointernot exist api_info']
[' Zero all sqlite3_stmt_scanstatus_APIName related event counters.This API is only available if the library is built with pre-processor symbol SQLITE_ENABLE_STMT_SCANSTATUS defined.', 'zero sqlite3_stmt_scanstatus_apiname related event api be only available if library be build pre_processor symbol sqlite_enable_stmt_scanstatus define']
['If the xEntryPoint routine encounters an error, it should make *pzErrMsg point to an appropriate error message (obtained from sqlite3_mprintf_APIName) and return an appropriate error code.', 'if xentrypoint routine encounter error , should make pzerrmsg point appropriate error message return appropriate error code']
['sqlite3_blob_close_APIName closes an open BLOB handle.', 'sqlite3_blob_close_apiname close open blob handle']
['The SQLite core only provides implementations for these routines when it is compiled with the SQLITE_DEBUG flag.', 'sqlite core only provide implementation routine when be compile sqlite_debug flag']
['The leftmost SQL parameter has an index of 1.', 'leftmost sql parameter have index #']
['Otherwise, an  error code or an extended error code is returned by sqlite3_blob_write_APIName.', 'otherwise , error code or extended error code be return by sqlite3_blob_write_apiname']
['The sqlite3_shutdown_APIName routine deallocates any resources that were allocated by sqlite3_initialize_APIName.', 'sqlite3_shutdown_apiname routine deallocate resource be allocate by sqlite3_initialize_apiname']
['For security reasons, the SQLITE_DIRECTONLY_API_constant flag is recommended for any application-defined SQL function that has side-effects.', 'security reason , sqlite_directonly_api_constant flag be recommend application_defin sql function have side_effect']
['Shared-cache locks are released when a database connection concludes its current transaction, either by committing it or rolling it back.', 'shared_cache lock be release when database connection conclude current transaction , either by commit or roll back']
['Other parameters record only the highwater mark and not the current value.', 'other parameter record only highwater mark current value']
['If the xColumn method calls sqlite3_vtab_nochange_APIName and finds that the column is not changed by the UPDATE statement, then the xColumn method can optionally return without setting a result, without calling any of the sqlite3_result_xxxxx_APIName interfaces.', 'if xcolumn method call sqlite3_vtab_nochange_apiname find column be change by update statement , then xcolumn method can optionally return without set result , without call sqlite3_result_xxxxx_apiname interface']
['The module name is registered on the database connection specified by sqlite3_create_module_APIParam_1.', 'module name be register database connection specify by sqlite3_create_module_apiparam_1']
[' Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file.', 'attempt return underlie operating system error code or error number cause most recent error or failure open file']
['See also the sqlite3_update_hook_APIName interface.', 'see sqlite3_update_hook_apiname interface']
['The sqlite3_str_new_APIName interface always returns a pointer to a valid sqlite3_str object, though in the event of an out-of-memory error sqlite3_str_new_APIParam_0 might be a special singleton that will silently reject new text, always return SQLITE_NOMEM_API_constant from sqlite3_str_errcode_APIName, always return 0 for sqlite3_str_length_APIName, and always return NULL from sqlite3_str_finish_APIName.', 'sqlite3_str_new_apiname interface always return pointer valid sqlite3_str object , though event out_of_memory error sqlite3_str_new_apiparam_0 may be special singleton silently reject text , always return sqlite_nomem_api_constant sqlite3_str_errcode_apiname , always return # sqlite3_str_length_apiname , always return null sqlite3_str_finish_apiname']
['If sqlite3_close_v2_APIName is called with unfinalized prepared statements and/or unfinished sqlite3_backups, then the database connection becomes an unusable "zombie" which will automatically be deallocated when the last prepared statement is finalized or the last sqlite3_backup is finished.', 'if sqlite3_close_v2_apiname be call unfinalized prepared statement unfinished sqlite3_backups , then database connection become unusable zombie which automatically be deallocate when last prepared statement be finalize or last sqlite3_backup be finish']
['The sqlite3_get_auxdata_APIName interface returns a pointer to the metadata associated by the sqlite3_set_auxdata_APIName function with the Nth argument value to the application-defined function.', 'sqlite3_get_auxdata_apiname interface return pointer metadata associate by sqlite3_set_auxdata_apiname function nth argument value application_defined function']
['The sqlite3_bind_* routines return SQLITE_OK_API_constant on success or an error code if anything goes wrong.', 'sqlite3_bind routine return sqlite_ok_api_constant success or error code if anything go wrong']
['On those systems, sqlite3_mutex_try_APIName will always return SQLITE_BUSY_API_constant.', 'system , sqlite3_mutex_try_apiname always return sqlite_busy_api_constant']
['These routines must be called from the same thread in which the SQL function is running.', 'routine must be call thread which sql function be run']
['It exists solely for verifying the correct operation of the SQLite library.', 'exist solely verify correct operation sqlite library']
['For maximum portability, it is recommended that applications always invoke sqlite3_initialize_APIName directly prior to using any other SQLite interface.', 'maximum portability , be recommend application always invoke sqlite3_initialize_apiname directly prior use other sqlite interface']
['Note that the number of keywords understood by SQLite can depend on compile-time options.', 'note number keyword understand by sqlite can depend compile_time option']
[' A virtual filesystem (VFS) is an sqlite3_vfs object that SQLite uses to interact with the underlying operating system.', 'virtual filesystem be sqlite3_vf object sqlite us interact underlie operating system']
['The sqlite3_progress_handler_APIName interface causes the callback function X to be invoked periodically during long running calls to sqlite3_exec_APIName, sqlite3_step_APIName and sqlite3_get_table_APIName for database connection D.  An example use for this interface is to keep a GUI updated during a large query.', 'sqlite3_progress_handler_apiname interface cause callback function x be invoke periodically during long running call sqlite3_exec_apiname , sqlite3_step_apiname sqlite3_get_table_apiname database connection d. example interface be keep gui update during large query']
['If the same thread tries to enter any mutex other than an SQLITE_MUTEX_RECURSIVE_API_constant more than once, the behavior is undefined.', 'if thread try enter mutex other than sqlite_mutex_recursive_api_constant more than once , behavior be undefined']
['The sqlite3_result_zeroblob_APIName and sqlite3_result_zeroblob64_APIName interfaces set the result of the application-defined function to be a BLOB containing all zero bytes and sqlite3_result_zeroblob64_APIParam_2 bytes in size.', 'sqlite3_result_zeroblob_apiname sqlite3_result_zeroblob64_apiname interface set result application_defined function be blob contain zero byte sqlite3_result_zeroblob64_apiparam_2 byte size']
['The sqlite3_os_init_APIName interface is called automatically by sqlite3_initialize_APIName and sqlite3_os_end_APIName is called by sqlite3_shutdown_APIName.', 'sqlite3_os_init_apiname interface be call automatically by sqlite3_initialize_apiname sqlite3_os_end_apiname be call by sqlite3_shutdown_apiname']
['The fragment component of a URI, if present, is ignored.', 'fragment component uri , if present , be ignore']
['The argument to sqlite3_mutex_alloc_APIName must one of these integer constants:', 'argument sqlite3_mutex_alloc_apiname must one integer constant']
['If the argument sqlite3_soft_heap_limit64_APIParam_1 is negative then no change is made to the soft heap limit.', 'if argument sqlite3_soft_heap_limit64_apiparam_1 be negative then no change be make soft heap limit']
['Consider a scenario where one process is holding a read lock that it is trying to promote to a reserved lock and a second process is holding a reserved lock that it is trying to promote to an exclusive lock.', 'consider scenario where one process be hold read lock be try promote reserve lock second process be hold reserved lock be try promote exclusive lock']
['The pointers returned are valid until a type conversion occurs as described above, or until sqlite3_step_APIName or sqlite3_reset_APIName or sqlite3_finalize_APIName is called.', 'pointer return be valid until type conversion occur as describe above , or until sqlite3_step_apiname or sqlite3_reset_apiname or sqlite3_finalize_apiname be call']
['sqlite3_step_APIName should not be called again on the VM.', 'sqlite3_step_apiname should be call again vm']
['If an error occurs, that fact is recorded in the sqlite3_str object and can be recovered by a subsequent call to sqlite3_str_errcode_APIName.', 'if error occur , fact be record sqlite3_str object can be recover by subsequent call sqlite3_str_errcode_apiname']
['If the input text contains no SQL (if the input is an empty string or a comment) then *ppStmt is set to NULL.', 'if input text contain no sql then ppstmt be set null']
['For each limit category SQLITE_LIMIT_NAME there is a hard upper bound set at compile-time by a C preprocessor macro called SQLITE_MAX_NAME.', 'each limit category sqlite_limit_name be hard upper bound set compile_time by c preprocessor macro call sqlite_max_name']
['Existing database connections continue use the sharing mode that was in effect at the time they were opened.', 'exist database connection continue share mode be effect time be open']
['If there is no match, a NULL pointer is returned by sqlite3_vfs_find_APIName.', 'if be no match , null pointer be return by sqlite3_vfs_find_apiname']
['If the action code is SQLITE_DELETE_API_constant and the callback returns SQLITE_IGNORE_API_constant then the DELETE operation proceeds but the truncate optimization is disabled and all rows are deleted individually.', 'if action code be sqlite_delete_api_constant callback return sqlite_ignore_api_constant then delete operation proceed but truncate optimization be disabled row be delete individually']
['The sqlite3_str_finish_APIName interface destroys the sqlite3_str object X and returns a pointer to a memory buffer obtained from sqlite3_malloc64_APIName that contains the constructed string.', 'sqlite3_str_finish_apiname interface destroy sqlite3_str object x return pointer memory buffer obtain sqlite3_malloc64_apiname contain construct string']
['The presence of a busy handler does not guarantee that it will be invoked when there is lock contention.', 'presence busy handler do guarantee be invoke when be lock contention']
['Changing the value of sqlite3_aggregate_context_APIParam_2 in subsequent call to sqlite3_aggregate_context_APIName within the same aggregate function instance will not resize the memory allocation.', 'change value sqlite3_aggregate_context_apiparam_2 subsequent call sqlite3_aggregate_context_apiname within aggregate function instance resize memory allocation']
['"main", "temp", or an attached database) containing the specified table or NULL.', 'main , temp , or attached database contain specify table or null']
['Enabling mutexes incurs a measurable performance penalty.', 'enable mutexe incur measurable performance penalty']
['This is not considered a compatibility break because any application that ever receives an SQLITE_MISUSE_API_constant error is broken by definition.', 'be consider compatibility break because application ever receive sqlite_misuse_api_constant error be break by definition']
['Appropriate implementations for sqlite3_os_init_APIName and sqlite3_os_end_APIName are built into SQLite when it is compiled for Unix, Windows, or OS/2.', 'appropriate implementation sqlite3_os_init_apiname sqlite3_os_end_apiname be build into sqlite when be compile unix , window , or']
['The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs.', 'sqlite3_db_handle interface return database connection handle which prepare statement belong']
['The collating function must obey the following properties for all strings A, B, and C:', 'collate function must obey follow property string , b , c']
['If sqlite3_blob_read_APIParam_3 or sqlite3_blob_read_APIParam_4 is less than zero, SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read.', 'if sqlite3_blob_read_apiparam_3 or sqlite3_blob_read_apiparam_4 be less than zero , sqlite_error_api_constant be return by sqlite3_blob_read_apiname no data be read']
['The sqlite3_trace_APIName callback is invoked with a UTF-8 rendering of the SQL statement text as the statement first begins executing.', 'sqlite3_trace_apiname callback be invoke utf_8 render sql statement text as statement first begin execute']
['If an sqlite3_exec_APIName callback returns non-zero, the sqlite3_exec_APIName routine returns SQLITE_ABORT_API_constant without invoking the callback again and without running any subsequent SQL statements.', 'if sqlite3_exec_apiname callback return non_zero , sqlite3_exec_apiname routine return sqlite_abort_api_constant without invoke callback again without run subsequent sql statement']
[' The sqlite3_db_handle interface returns the database connection handle to which a prepared statement belongs.', 'sqlite3_db_handle interface return database connection handle which prepare statement belong']
['xValue and xInverse may either both be NULL, in which case a regular aggregate function is created, or must both be non-NULL, in which case the new function may be used as either an aggregate or aggregate window function.', 'xvalue xinverse either both be null , which case regular aggregate function be create , or must both be non_null , which case function be use as either aggregate or aggregate window function']
['Calls to sqlite3_db_config_APIName return SQLITE_OK_API_constant if and only if the call is considered successful.', 'call sqlite3_db_config_apiname return sqlite_ok_api_constant if only if call be consider successful']
['definednot exist in API_info', 'definednot exist api_info']
['This routine only works on a BLOB handle which has been created by a prior successful call to sqlite3_blob_open_APIName and which has not been closed by sqlite3_blob_close_APIName.', 'routine only work blob handle which have create by prior successful call sqlite3_blob_open_apiname which have close by sqlite3_blob_close_apiname']
['For an INSERT operation on a rowid table, or any operation on a WITHOUT ROWID table, the value of the sixth parameter is undefined.', 'insert operation rowid table , or operation without rowid table , value sixth parameter be undefined']
['These functions may be used by (non-aggregate) SQL functions to associate metadata with argument values.', 'function be use by sql function associate metadata argument value']
['If the xSleep_APIName method of the default VFS is not implemented correctly, or not implemented at all, then the behavior of sqlite3_sleep_APIName may deviate from the description in the previous paragraphs.', 'if xsleep_apiname method default vfs be implement correctly , or implement , then behavior sqlite3_sleep_apiname deviate description previous paragraph']
['N bytes of data are copied from the buffer Z into the open BLOB, starting at offset sqlite3_blob_write_APIParam_4.', 'n byte datum be copy buffer z into open blob , start offset sqlite3_blob_write_apiparam_4']
['New VFSes can be registered and existing VFSes can be unregistered.', 'vfse can be register exist vfse can be unregistered']
['The third and fourth arguments to the callback contain pointers to the database and table name containing the affected row.', 'third fourth argument callback contain pointer database table name contain affect row']
['At various points during the compilation process, as logic is being created to perform various actions, the authorizer callback is invoked to see if those actions are allowed.', 'various point during compilation process , as logic be create perform various action , authorizer callback be invoke see if action be allow']
['The SQLITE_OPEN_SHAREDCACHE_API_constant flag causes the database connection to be eligible to use shared cache mode, regardless of whether or not shared cache is enabled using sqlite3_enable_shared_cache_APIName.', 'sqlite_open_sharedcache_api_constant flag cause database connection be eligible share cache mode , regardless whether or share cache be enable use sqlite3_enable_shared_cache_apiname']
['But the reason the mutex does not exist is because the build is not using mutexes.', 'but reason mutex do exist be because build be use mutexe']
[' The sqlite3_context_db_handle_APIName interface returns a copy of the pointer to the database connection (the 1st parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.', 'sqlite3_context_db_handle_apiname interface return copy pointer database connection sqlite3_create_function_apiname sqlite3_create_function16_apiname routine originally register application define function']
['As long as the input parameters are correct, these routines will only fail if an out-of-memory error occurs during a format conversion.', 'as long as input parameter be correct , routine only fail if out_of_memory error occur during format conversion']
['These are utility routines, useful to VFS implementations, that check to see if a database file was a URI that contained a specific query parameter, and if so obtains the value of that query parameter.', 'be utility routine , useful vfs implementation , check see if database file be uri contain specific query paramet , if so obtain value query parameter']
['Future versions of SQLite may change the behavior of sqlite3_column_type_APIName following a type conversion.', 'future version sqlite change behavior sqlite3_column_type_apiname follow type conversion']
['If it is NULL, then all attached databases are searched for the table using the same algorithm used by the database engine to resolve unqualified table references.', 'if be null , then attach database be search table use algorithm use by database engine resolve unqualified table reference']
['If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite error code is returned by sqlite3_db_cacheflush_APIName to the caller immediately.', 'if other error occur while flush dirty page disk , then processing be abandon sqlite error code be return by sqlite3_db_cacheflush_apiname caller immediately']
['See also: sqlite3_bind_APIName, sqlite3_bind_parameter_name_APIName, and sqlite3_bind_parameter_index_APIName.', 'see : sqlite3_bind_apiname , sqlite3_bind_parameter_name_apiname , sqlite3_bind_parameter_index_apiname']
['The sqlite3_errstr_APIName interface returns the English-language text that describes the result code, as UTF-8.', 'sqlite3_errstr_apiname interface return english_language text describe result code , as utf_8']
['In other words, the initial ":" or "$" or "@" or "?"', 'other word , initial : or or or']
['This may happen if the program uses the changes_APIName SQL function, or if some other callback function invokes sqlite3_changes_APIName directly.', 'happen if program use changes_apiname sql function , or if other callback function invoke sqlite3_changes_apiname directly']
['Goofy Interface Alert: In the legacy interface, the sqlite3_step_APIName API always returns a generic error code, SQLITE_ERROR_API_constant, following any error other than SQLITE_BUSY_API_constant and SQLITE_MISUSE_API_constant.', 'goofy interface alert : legacy interface , sqlite3_step_apiname api always return generic error code , sqlite_error_api_constant , follow error other than sqlite_busy_api_constant sqlite_misuse_api_constant']
['The sqlite3_stmt_isexplain_APIName interface returns 0 if sqlite3_stmt_isexplain_APIParam_1 is an ordinary statement or a NULL pointer.', 'sqlite3_stmt_isexplain_apiname interface return # if sqlite3_stmt_isexplain_apiparam_1 be ordinary statement or null pointer']
['A scalar SQL function requires an implementation of the xFunc callback only; NULL pointers must be passed as the xStep and xFinal parameters.', 'scalar sql function require implementation xfunc callback only ; null pointer must be pass as xstep xfinal parameter']
[' The sqlite3_release_memory_APIName interface attempts to free N bytes of heap memory by deallocating non-essential memory allocations held by the database library.', 'sqlite3_release_memory_apiname interface attempt free n byte heap memory by deallocate non_essential memory allocation hold by database library']
['If no successful INSERTs into rowid tables have ever occurred on the database connection D, then sqlite3_last_insert_rowid_APIName returns zero.', 'if no successful insert into rowid table have ever occur database connection d , then sqlite3_last_insert_rowid_apiname return zero']
['A result table is an array of pointers to zero-terminated UTF-8 strings.', 'result table be array pointer zero_terminate utf_8 string']
['If any NUL characters occur at byte offsets less than the value of the fourth parameter then the resulting string value will contain embedded NULs.', 'if nul character occur byte offset less than value fourth parameter then result string value contain embed nul']
[' The sqlite3_sql_APIName interface returns a pointer to a copy of the UTF-8 SQL text used to create prepared statement P if P was created by sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName.', 'sqlite3_sql_apiname interface return pointer copy utf_8 sql text use create prepare statement p if p be create by sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_v2_apiname , or sqlite3_prepare16_v3_apiname']
['An SQL operation that is interrupted will return SQLITE_INTERRUPT_API_constant.', 'sql operation be interrupt return sqlite_interrupt_api_constant']
['Applications may change the content of the string returned by sqlite3_str_value_APIName as long as they do not write into any bytes outside the range of 0 to sqlite3_str_length_APIName and do not read or write any byte after any subsequent sqlite3_str method call.', 'application change content string return by sqlite3_str_value_apiname as long as write into byte outside range # sqlite3_str_length_apiname read or write byte after subsequent sqlite3_str method call']
['If sqlite3_msize_APIParam_1 is a memory allocation previously obtained from sqlite3_malloc_APIName, sqlite3_malloc64_APIName, sqlite3_realloc_APIName, or sqlite3_realloc64_APIName, then sqlite3_msize_APIName returns the size of that memory allocation in bytes.', 'if sqlite3_msize_apiparam_1 be memory allocation previously obtain sqlite3_malloc_apiname , sqlite3_malloc64_apiname , sqlite3_realloc_apiname , or sqlite3_realloc64_apiname , then sqlite3_msize_apiname return size memory allocation byte']
['Note: This method is disabled on MacOS X 10.7 and iOS version 5.0 and will always return SQLITE_MISUSE_API_constant.', 'note : method be disabled maco x # io version # always return sqlite_misuse_api_constant']
['The sqlite3_status_APIName and sqlite3_status64_APIName routines return SQLITE_OK_API_constant on success and a non-zero error code on failure.', 'sqlite3_status_apiname sqlite3_status64_apiname routine return sqlite_ok_api_constant success non_zero error code failure']
['The sqlite3_user_data_APIName interface returns a copy of the pointer that was the pUserData parameter (the 5th parameter) of the sqlite3_create_function_APIName and sqlite3_create_function16_APIName routines that originally registered the application defined function.', 'sqlite3_user_data_apiname interface return copy pointer be puserdata paramet sqlite3_create_function_apiname sqlite3_create_function16_apiname routine originally register application define function']
['When a table is referenced by a SELECT but no column values are extracted from that table (for example in a query like "SELECT count(*) FROM tab") then the SQLITE_READ_API_constant authorizer callback is invoked once for that table with a column name that is an empty string.', 'when table be reference by select but no column value be extract table tab then sqlite_read_api_constant authorizer callback be invoke once table column name be empty string']
['If the statement is a COMMIT or occurs outside of an explicit transaction, then you can retry the statement.', 'if statement be commit or occur outside explicit transaction , then -PRON- can retry statement']
['This means that if the changes_APIName SQL function (or similar) is used by the first INSERT, UPDATE or DELETE statement within a trigger, it returns the value as set when the calling statement began executing.', 'mean if changes_apiname sql function be use by first insert , update or delete statement within trigger , return value as set when call statement begin execute']
['The sqlite3_win32_set_directory_APIParam_2 parameter should be NULL to cause the previous value to be freed via sqlite3_free; a non-NULL value will be copied into memory obtained from sqlite3_malloc prior to being used.', 'sqlite3_win32_set_directory_apiparam_2 parameter should be null cause previous value be free via sqlite3_free ; non_null value be copy into memory obtain sqlite3_malloc prior use']
['If a memory allocation fails, then SQLITE_NOMEM_API_constant is returned by sqlite3_complete16_APIName.', 'if memory allocation fail , then sqlite_nomem_api_constant be return by sqlite3_complete16_apiname']
['Some systems (for example, Windows 95) do not support the operation implemented by sqlite3_mutex_try_APIName.', 'system support operation implement by sqlite3_mutex_try_apiname']
['For an UPDATE or DELETE operation on a rowid table, the sixth parameter passed to the preupdate callback is the initial rowid of the row being modified or deleted.', 'update or delete operation rowid table , sixth parameter pass preupdate callback be initial rowid row modify or delete']
['The sqlite3_keyword_name_APIName interface finds the N-th keyword and makes *Z point to that keyword expressed as UTF8 and writes the number of bytes in the keyword into *L.  The string that *Z points to is not zero-terminated.', 'sqlite3_keyword_name_apiname interface find n_th keyword make z point keyword express as utf8 write number byte keyword into l. string z point be zero_terminate']
['The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT, UPDATE, and DELETE operation on a database table.', 'sqlite3_preupdate_hook_apiname interface register callback function be invoke prior each insert , update , delete operation database table']
['The these routines may attempt to convert the datatype of the result.', 'routine attempt convert datatype result']
[' Returns the size in bytes of the BLOB accessible via the successfully opened BLOB handle in its only argument.', 'return size byte blob accessible via successfully open blob handle only argument']
['into sqlite3_free_APIName.', 'into sqlite3_free_apiname']
['If offset sqlite3_blob_read_APIParam_4 is less than sqlite3_blob_read_APIParam_3 bytes from the end of the BLOB, SQLITE_ERROR_API_constant is returned by sqlite3_blob_read_APIName and no data is read.', 'if offset sqlite3_blob_read_apiparam_4 be less than sqlite3_blob_read_apiparam_3 byte end blob , sqlite_error_api_constant be return by sqlite3_blob_read_apiname no data be read']
['For example, if the internal representation is FLOAT and a text result is requested, sqlite3_snprintf_APIName is used internally to perform the conversion automatically.', 'example , if internal representation be float text result be request , sqlite3_snprintf_apiname be use internally perform conversion automatically']
[' This is a legacy interface that is preserved for backwards compatibility.', 'be legacy interface be preserve backwards compatibility']
['The fourth parameter to sqlite3_open_v2_APIName is the name of the sqlite3_vfs object that defines the operating system interface that the new database connection should use.', 'fourth parameter sqlite3_open_v2_apiname be name sqlite3_vfs object define operate system interface database connection should']
['The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection sqlite3_drop_modules_APIParam_1 except those named on list sqlite3_drop_modules_APIParam_2. The sqlite3_drop_modules_APIParam_2 parameter must be either NULL or a pointer to an array of pointers to strings where the array is terminated by a single NULL pointer.', 'sqlite3_drop_modules_apiname interface remove virtual table module database connection sqlite3_drop_modules_apiparam_1 except name list sqlite3_drop_modules_apiparam_2 . sqlite3_drop_modules_apiparam_2 parameter must be either null or pointer array pointer string where array be terminate by single null pointer']
['If the sqlite3_vtab_nochange_APIName routine is called within the xColumn method of a virtual table, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change.', 'if sqlite3_vtab_nochange_apiname routine be call within xcolumn method virtual table , then return true if only if column be fetch as part update operation during which column value change']
['Writes to the BLOB that occurred before the BLOB handle expired are not rolled back by the expiration of the handle, though of course those changes might have been overwritten by the statement that expired the BLOB handle or by other independent statements.', 'write blob occur before blob handle expire be roll back by expiration handle , though course change may have overwrite by statement expire blob handle or by other independent statement']
['sqlite3_create_collationnot exist in API_info', 'sqlite3_create_collationnot exist api_info']
['The sqlite3_win32_set_directory interface returns SQLITE_OK_API_constant to indicate success, SQLITE_ERROR_API_constant if the sqlite3_win32_set_directory_APIParam_1 is unsupported, or SQLITE_NOMEM_API_constant if memory could not be allocated.', 'sqlite3_win32_set_directory interface return sqlite_ok_api_constant indicate success , sqlite_error_api_constant if sqlite3_win32_set_directory_apiparam_1 be unsupported , or sqlite_nomem_api_constant if memory could be allocate']
['The sqlite3_value_dup_APIName interface returns NULL if sqlite3_value_dup_APIParam_1 is NULL or if a memory allocation fails.', 'sqlite3_value_dup_apiname interface return null if sqlite3_value_dup_apiparam_1 be null or if memory allocation fail']
['The use of the UTF-8 interfaces is preferred, as SQLite currently does all parsing using UTF-8.', 'utf_8 interface be prefer , as sqlite currently do parse use utf_8']
['For an ordinary on-disk database file, the serialization is just a copy of the disk file.', 'ordinary on_disk database file , serialization be just copy disk file']
['SQLite invokes sqlite3_result_pointer_APIParam_4 with sqlite3_result_pointer_APIParam_2 as its only argument when SQLite is finished with sqlite3_result_pointer_APIParam_2.  The sqlite3_result_pointer_APIParam_3 parameter should be a static string and preferably a string literal.', 'sqlite invoke sqlite3_result_pointer_apiparam_4 sqlite3_result_pointer_apiparam_2 as only argument when sqlite be finish sqlite3_result_pointer_apiparam_2 . sqlite3_result_pointer_apiparam_3 parameter should be static string preferably stre literal']
['Calling sqlite3_auto_extension_APIName with an entry point X that is already on the list of automatic extensions is a harmless no-op.', 'call sqlite3_auto_extension_apiname entry point x be already list automatic extension be harmless no_op']
['Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption.', 'prepared statement after have finalize can result undefined undesirable behavior such as segfault heap corruption']
['Note that the authorizer callback is invoked only during sqlite3_prepare_APIName or its variants.', 'note authorizer callback be invoke only during sqlite3_prepare_apiname or variant']
['The update hook is not invoked when internal system tables are modified (i.e.', 'update hook be invoke when internal system table be modify i']
['On success, sqlite3_blob_write_APIName returns SQLITE_OK_API_constant.', 'success , sqlite3_blob_write_apiname return sqlite_ok_api_constant']
['The second parameter is one of the limit categories that define a class of constructs to be size limited.', 'second parameter be one limit category define class construct be size limit']
['The sqlite3_sourceid_APIName function returns a pointer to a string constant whose value is the same as the SQLITE_SOURCE_ID_API_constant C preprocessor macro.', 'sqlite3_sourceid_apiname function return pointer stre constant whose value be as sqlite_source_id_api_constant c preprocessor macro']
['The value returned by sqlite3_msize_APIName might be larger than the number of bytes requested when sqlite3_msize_APIParam_1 was allocated.', 'value return by sqlite3_msize_apiname may be large than number byte request when sqlite3_msize_apiparam_1 be allocate']
['But the application does not want the user to be able to make arbitrary changes to the database.', 'but application do want user be able make arbitrary change database']
['The sqlite3_test_control_APIName interface is used to read out internal state of SQLite and to inject faults into SQLite for testing purposes.', 'sqlite3_test_control_apiname interface be use read out internal state sqlite inject fault into sqlite testing purpose']
['The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option limits the size of bound parameter expansions.', 'sqlite_trace_api_constant_size_limit compile_time option limit size bind paramet expansion']
['The callback is invoked by SQLite after the commit has taken place and the associated write-lock on the database released, so the implementation may read, write or checkpoint the database as required.', 'callback be invoke by sqlite after commit have take place associate write_lock database release , so implementation read , write or checkpoint database as require']
['The xCreate and xConnect methods of a virtual table module call this interface to declare the format (the names and datatypes of the columns) of the virtual tables they implement.', 'xcreate xconnect method virtual table module call interface declare format virtual table implement']
['Any of these arguments may be NULL, in which case the corresponding element of metadata is omitted.', 'argument be null , which case correspond element metadata be omit']
['Metadata is returned by sqlite3_table_column_metadata_APIName by writing to the memory locations passed as the 5th and subsequent parameters to sqlite3_table_column_metadata_APIName.', 'metadata be return by sqlite3_table_column_metadata_apiname by write memory location pass as 5th subsequent parameter sqlite3_table_column_metadata_apiname']
[' The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D. Unlike the sqlite3_release_memory_APIName interface, this interface is in effect even when the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is omitted.See also: sqlite3_release_memory_APIName', 'sqlite3_db_release_memory_apiname interface attempt free as much heap memory as possible database connection d. unlike sqlite3_release_memory_apiname interface , interface be effect even when sqlite_enable_memory_management compile_time option be : sqlite3_release_memory_apiname']
['The first argument is the database connection object to be interrogated.', 'first argument be database connection object be interrogate']
['zProc may be 0, in which case SQLite will try to come up with an entry point name on its own.', 'zproc be 0 , which case sqlite try come up entry point name']
['The sqlite3_serialize_APIName interface returns a pointer to memory that is a serialization of the sqlite3_serialize_APIParam_2 database on database connection D. If sqlite3_serialize_APIParam_3 is not a NULL pointer, then the size of the database in bytes is written into *P.', 'sqlite3_serialize_apiname interface return pointer memory be serialization sqlite3_serialize_apiparam_2 database database connection d. if sqlite3_serialize_apiparam_3 be null pointer , then size database byte be write into p']
['As long as the buffer size is greater than zero, sqlite3_snprintf_APIName guarantees that the buffer is always zero-terminated.', 'as long as buffer size be great than zero , sqlite3_snprintf_apiname guarantee buffer be always zero_terminate']
['sqlite3_bind_text64 not exist in API_info', 'sqlite3_bind_text64 exist api_info']
['See Also:  SQLite Shared-Cache Mode', 'see : sqlite shared_cache mode']
['sqlite3_create_functionnot exist in API_info', 'sqlite3_create_functionnot exist api_info']
['This routine registers an authorizer callback with a particular database connection, supplied in the first argument.', 'routine register authorizer callback particular database connection , supply first argument']
['This interface can be used by an application to make sure that the version of SQLite that it is linking against was compiled with the desired setting of the SQLITE_THREADSAFE macro.', 'interface can be use by application make sure version sqlite be link against be compile desire set sqlite_threadsafe macro']
['If the sqlite3_db_status_APIParam_5 is true, then the highest instantaneous value is reset back down to the current value.', 'if sqlite3_db_status_apiparam_5 be true , then high instantaneous value be reset back down current value']
['Only an effective call of sqlite3_initialize_APIName does any initialization.', 'only effective call sqlite3_initialize_apiname do initialization']
['In this case SQLITE_ERROR_API_constant_SNAPSHOT is returned by sqlite3_snapshot_open_APIName.', 'case sqlite_error_api_constant_snapshot be return by sqlite3_snapshot_open_apiname']
['The sqlite3_result_pointer_APIName interface sets the result to an SQL NULL value, just like sqlite3_result_null_APIName, except that it also associates the host-language pointer sqlite3_result_pointer_APIParam_2 or type sqlite3_result_pointer_APIParam_3 with that NULL value such that the pointer can be retrieved within an application-defined SQL function using sqlite3_value_pointer_APIName.', 'sqlite3_result_pointer_apiname interface set result sql null value , just like sqlite3_result_null_apiname , except associate host_language pointer sqlite3_result_pointer_apiparam_2 or type sqlite3_result_pointer_apiparam_3 null value such pointer can be retrieve within application_defined sql function use sqlite3_value_pointer_apiname']
['The progress handler callback must not do anything that will modify the database connection that invoked the progress handler.', 'progress handler callback must anything modify database connection invoke progress handler']
['That capability is no longer provided.', 'capability be no longer provide']
['Please pay particular attention to the fact that the pointer returned from sqlite3_value_blob_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName can be invalidated by a subsequent call to sqlite3_value_bytes_APIName, sqlite3_value_bytes16_APIName, sqlite3_value_text_APIName, or sqlite3_value_text16_APIName.', 'please pay particular attention fact pointer return sqlite3_value_blob_apiname , sqlite3_value_text_apiname , or sqlite3_value_text16_apiname can be invalidate by subsequent call sqlite3_value_bytes_apiname , sqlite3_value_bytes16_apiname , sqlite3_value_text_apiname , or sqlite3_value_text16_apiname']
['If a faster non-recursive mutex implementation is available on the host platform, the mutex subsystem might return such a mutex in response to SQLITE_MUTEX_FAST_API_constant.', 'if fast non_recursive mutex implementation be available host platform , mutex subsystem may return such mutex response sqlite_mutex_fast_api_constant']
['Parameters of the form "?"', 'parameter form']
['If this process generates an invalid UTF-8 encoding, the results are undefined.', 'if process generate invalid utf_8 encoding , result be undefined']
['The value returned by sqlite3_column_type_APIName is only meaningful if no automatic type conversions have occurred for the value in question.', 'value return by sqlite3_column_type_apiname be only meaningful if no automatic type conversion have occur value question']
['Only sqlite3_free_table_APIName is able to release the memory properly and safely.', 'only sqlite3_free_table_apiname be able release memory properly safely']
[' This interface returns a pointer the sqlite3_mutex object that serializes access to the database connection given in the argument when the threading mode is Serialized.', 'interface return pointer sqlite3_mutex object serialize access database connection give argument when thread mode be serialize']
['Autocommit mode is on by default.', 'autocommit mode be by default']
['If an error occurs and sqlite3_load_extension_APIParam_4 is not 0, then the sqlite3_load_extension_APIName interface shall attempt to fill *pzErrMsg with error message text stored in memory obtained from sqlite3_malloc_APIName.', 'if error occur sqlite3_load_extension_apiparam_4 be 0 , then sqlite3_load_extension_apiname interface shall attempt fill pzerrmsg error message text store memory obtain sqlite3_malloc_apiname']
['sqlite3_result_blob not exist in API_info', 'sqlite3_result_blob exist api_info']
['sqlite3_cancel_auto_extensionnot exist in API_info', 'sqlite3_cancel_auto_extensionnot exist api_info']
['If the busy callback returns 0, then no additional attempts are made to access the database and SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName to the application.', 'if busy callback return 0 , then no additional attempt be make access database sqlite_busy_api_constant be return by sqlite3_busy_handler_apiname application']
['The profile callback contains the original statement text and an estimate of wall-clock time of how long that statement took to run.', 'profile callback contain original statement text estimate wall_clock time how long statement take run']
['The sqlite3_win32_set_directory interface is used to set the value associated with the sqlite3_temp_directory or sqlite3_data_directory variable, to sqlite3_win32_set_directory_APIParam_2, depending on the value of the sqlite3_win32_set_directory_APIParam_1 parameter.', 'sqlite3_win32_set_directory interface be use set value associate sqlite3_temp_directory or sqlite3_data_directory variable , sqlite3_win32_set_directory_apiparam_2 , depend value sqlite3_win32_set_directory_apiparam_1 parameter']
['These routines only compile the first statement in sqlite3_prepare16_APIParam_2, so *pzTail is left pointing to what remains uncompiled.', 'routine only compile first statement sqlite3_prepare16_apiparam_2 , so pztail be leave point what remain uncompiled']
['The extended result codes are disabled by default for historical compatibility.', 'extend result code be disable by default historical compatibility']
[' The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object.', 'sqlite3_close_apiname sqlite3_close_v2_apiname routine be destructor sqlite3 object']
['The sqlite3_config_APIName interface is not threadsafe.', 'sqlite3_config_apiname interface be threadsafe']
['To be clear: the value is the number of bytes in the value, not the number of characters.', 'be clear : value be number byte value , number character']
['If sqlite3_next_stmt_APIParam_2 is NULL then this interface returns a pointer to the first prepared statement associated with the database connection sqlite3_next_stmt_APIParam_1.', 'if sqlite3_next_stmt_apiparam_2 be null then interface return pointer first prepared statement associate database connection sqlite3_next_stmt_apiparam_1']
['The table conceptually has a number of rows and columns.', 'table conceptually have number row column']
['The database connection must not have been closed.', 'database connection must have close']
[' sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation.', 'sqlite3_vtab_on_conflict_apiname only be call within call xupdate method virtual table implementation insert or update operation']
['As an example of the result table format, suppose a query result is as follows:', 'as example result table format , suppose query result be as follow']
['This API may be used to register a callback that SQLite will invoke when the connection currently holding the required lock relinquishes it.', 'api be use register callback sqlite invoke when connection currently hold require lock relinquishe']
['The sqlite3_memory_used_APIName routine returns the number of bytes of memory currently outstanding (malloced but not freed).', 'sqlite3_memory_used_apiname routine return number byte memory currently outstanding malloce but free']
['The calling application should pass sqlite3_str_finish_APIParam_0 to sqlite3_free_APIName to avoid a memory leak.', 'call application should pass sqlite3_str_finish_apiparam_0 sqlite3_free_apiname avoid memory leak']
['Beginning with SQLite version 3.7.3 (2010-10-08), the soft heap limit is enforced regardless of whether or not the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is invoked.', 'begin sqlite version # , soft heap limit be enforce regardless whether or sqlite_enable_memory_management compile_time option be invoke']
['For attached databases, this is the name that appears after the AS keyword in the ATTACH statement.', 'attach database , be name appear after as keyword attach statement']
['sqlite3_create_collation_v2 not exist in API_info', 'sqlite3_create_collation_v2 exist api_info']
['The third argument is one of SQLITE_UTF8_API_constant, SQLITE_UTF16_API_constantBE, or SQLITE_UTF16_API_constantLE, indicating the most desirable form of the collation sequence function required.', 'third argument be one sqlite_utf8_api_constant , sqlite_utf16_api_constantbe , or sqlite_utf16_api_constantle , indicate most desirable form collation sequence function require']
['The values returned by sqlite3_memory_used_APIName and sqlite3_memory_highwater_APIName include any overhead added by SQLite in its implementation of sqlite3_malloc_APIName, but not overhead added by the any underlying system library routines that sqlite3_malloc_APIName may call.', 'value return by sqlite3_memory_used_apiname sqlite3_memory_highwater_apiname include overhead add by sqlite implementation sqlite3_malloc_apiname , but overhead add by underlie system library routine sqlite3_malloc_apiname call']
['sqlite3_blob_open_APIName fails with SQLITE_ERROR_API_constant if any of the following are true:', 'sqlite3_blob_open_apiname fail sqlite_error_api_constant if follow be true']
['If any databases are skipped because locks cannot be obtained, but no other error occurs, sqlite3_db_cacheflush_APIName returns SQLITE_BUSY_API_constant.', 'if database be skip because lock can be obtain , but no other error occur , sqlite3_db_cacheflush_apiname return sqlite_busy_api_constant']
['To avoid memory leaks, the application should invoke sqlite3_free_APIName on error message strings returned through the 5th parameter of sqlite3_exec_APIName after the error message string is no longer needed.', 'avoid memory leak , application should invoke sqlite3_free_apiname error message string return through 5th parameter sqlite3_exec_apiname after error message string be no longer need']
['Nevertheless, best practice is to avoid using keywords as identifiers.', 'nevertheless , good practice be avoid use keyword as identifier']
['The sqlite3_cancel_auto_extension_APIName interface unregisters the initialization routine X that was registered using a prior call to sqlite3_auto_extension_APIName.', 'sqlite3_cancel_auto_extension_apiname interface unregister initialization routine x be register use prior call sqlite3_auto_extension_apiname']
['Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.', 'once trigger program end , value return by routine revert what be before trigger be fire']
['The column is identified by the second, third and fourth parameters to sqlite3_table_column_metadata_APIName.', 'column be identify by second , third fourth parameter sqlite3_table_column_metadata_apiname']
['If the busy callback is NULL, then SQLITE_BUSY_API_constant is returned by sqlite3_busy_handler_APIName immediately upon encountering the lock.', 'if busy callback be null , then sqlite_busy_api_constant be return by sqlite3_busy_handler_apiname immediately upon encounter lock']
['This feature can be used to implement a "Cancel" button on a GUI progress dialog box.', 'feature can be use implement cancel button gui progress dialog box']
['If sqlite3_msize_APIParam_1 points to something that is not the beginning of memory allocation, or if it points to a formerly valid memory allocation that has now been freed, then the behavior of sqlite3_msize_APIName is undefined and possibly harmful.', 'if sqlite3_msize_apiparam_1 point something be begin memory allocation , or if point formerly valid memory allocation have now free , then behavior sqlite3_msize_apiname be undefined possibly harmful']
['When running in shared-cache mode, a database operation may fail with an SQLITE_LOCKED_API_constant error if the required locks on the shared-cache or individual tables within the shared-cache cannot be obtained.', 'when run shared_cache mode , database operation fail sqlite_locked_api_constant error if require lock shared_cache or individual table within shared_cache can be obtain']
['If there is no attached database sqlite3_db_filename_APIParam_2 on the database connection D, or if database sqlite3_db_filename_APIParam_2 is a temporary or in-memory database, then sqlite3_db_filename_APIName will return either a NULL pointer or an empty string.', 'if be no attached database sqlite3_db_filename_apiparam_2 database connection d , or if database sqlite3_db_filename_apiparam_2 be temporary or in_memory database , then sqlite3_db_filename_apiname return either null pointer or empty string']
['Changes written into a BLOB prior to the BLOB expiring are not rolled back by the expiration of the BLOB.', 'change write into blob prior blob expire be roll back by expiration blob']
[' This interface allows the size of various constructs to be limited on a connection by connection basis.', 'interface allow size various construct be limit connection by connection basis']
['Applications that care about shared cache setting should set it explicitly.', 'application care about share cache setting should set explicitly']
['If this happens, then the specified callback is invoked immediately, from within the call to sqlite3_unlock_notify_APIName.', 'if happen , then specify callback be invoke immediately , within call sqlite3_unlock_notify_apiname']
['Use the sqlite3_result_subtype_APIName routine to set the subtype for the return value of an SQL function.', 'sqlite3_result_subtype_apiname routine set subtype return value sql function']
['The sqlite3_stmt_isexplain_APIName interface returns 1 if the prepared statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN statement, or 2 if the statement sqlite3_stmt_isexplain_APIParam_1 is an EXPLAIN QUERY PLAN.', 'sqlite3_stmt_isexplain_apiname interface return # if prepare statement sqlite3_stmt_isexplain_apiparam_1 be explain statement , or # if statement sqlite3_stmt_isexplain_apiparam_1 be explain query plan']
['The return value of the sqlite3_threadsafe_APIName function shows only the compile-time setting of thread safety, not any run-time changes to that setting made by sqlite3_config_APIName.', 'return value sqlite3_threadsafe_apiname function show only compile_time set thread safety , run_time change set make by sqlite3_config_apiname']
['The rowid is always available as an undeclared column named ROWID, OID, or _ROWID_ as long as those names are not also used by explicitly declared columns.', 'rowid be always available as undeclared column name rowid , oid , or rowid as long as name be use by explicitly declare column']
['If the new limit is a negative number, the limit is unchanged.', 'if limit be negative number , limit be unchanged']
['If the Nth column of the result set is an expression or subquery, then a NULL pointer is returned by sqlite3_column_decltype16_APIName.', 'if nth column result set be expression or subquery , then null pointer be return by sqlite3_column_decltype16_apiname']
['See also: sqlite3_blob_read_APIName.', 'see : sqlite3_blob_read_apiname']
['Though they are intended for internal use by SQLite, code that links against SQLite is permitted to use any of these routines.', 'though be intend internal by sqlite , code link against sqlite be permit routine']
["If the path does not begin with a '/' (meaning that the authority section is omitted from the URI) then the path is interpreted as a relative path.", 'if path do begin then path be interpret as relative path']
['The sixth, seventh, eighth and ninth parameters (xStep, xFinal, xValue and xInverse) passed to sqlite3_create_window_function are pointers to C-language callbacks that implement the new function.', 'sixth , seventh , eighth ninth parameter pass sqlite3_create_window_function be pointer c_language callback implement function']
['If another thread changes the autocommit status of the database connection while this routine is running, then the return value is undefined.', 'if another thread change autocommit status database connection while routine be run , then return value be undefined']
['Calling this routine with a null pointer (such as would be returned by a failed call to sqlite3_blob_open_APIName) is a harmless no-op.', 'call routine null pointer be harmless no_op']
['The SQLITE_TRACE_API_constant_SIZE_LIMIT compile-time option can be used to limit the length of bound parameter expansion in the output of sqlite3_trace_APIName.', 'sqlite_trace_api_constant_size_limit compile_time option can be use limit length bind paramet expansion output sqlite3_trace_apiname']
['Note also that sqlite3_snprintf_APIName returns a pointer to its buffer instead of the number of characters actually written into the buffer.', 'note sqlite3_snprintf_apiname return pointer buffer instead number character actually write into buffer']
['sqlite3_bind_pointernot exist in API_info', 'sqlite3_bind_pointernot exist api_info']
['Also, new keywords may be added to future releases of SQLite.', 'keyword be add future release sqlite']
['The sqlite3_file_control_APIName interface makes a direct call to the xFileControl method for the sqlite3_io_methods object associated with a particular database identified by sqlite3_file_control_APIParam_2.', 'sqlite3_file_control_apiname interface make direct call xfilecontrol method sqlite3_io_method object associate particular database identify by sqlite3_file_control_apiparam_2']
['For TEMP tables, the database name is "temp".', 'temp table , database name be temp']
['If this routine has not been previously called or if the previous call had sqlite3_randomness_APIParam_1 less than one or a NULL pointer for sqlite3_randomness_APIParam_2, then the PRNG is seeded using randomness obtained from the xRandomness method of the default sqlite3_vfs object.', 'if routine have previously call or if previous call have sqlite3_randomness_apiparam_1 less than one or null pointer sqlite3_randomness_apiparam_2 , then prng be seed use randomness obtain xrandomness method default sqlite3_vfs object']
['The first argument to these interfaces is a prepared statement.', 'first argument interface be prepare statement']
[' The sqlite3_initialize_APIName routine initializes the SQLite library.', 'sqlite3_initialize_apiname routine initialize sqlite library']
['The sqlite3_commit_hook_APIName interface registers a callback function to be invoked whenever a transaction is committed.', 'sqlite3_commit_hook_apiname interface register callback function be invoke whenever transaction be commit']
['Use this routine to reset all host parameters to NULL.', 'routine reset host parameter null']
['SQL parameters are tokens of the form "?', 'sql parameter be token form']
['The handler will sleep multiple times until at least "ms" milliseconds of sleeping have accumulated.', 'handler sleep multiple time until least ms millisecond sleep have accumulate']
['The number of columns in the result can be determined using sqlite3_column_count_APIName.', 'number column result can be determine use sqlite3_column_count_apiname']
['If sqlite3_compileoption_get_APIParam_1 is out of range, sqlite3_compileoption_get_APIName returns a NULL pointer.', 'if sqlite3_compileoption_get_apiparam_1 be out range , sqlite3_compileoption_get_apiname return null pointer']
['This interface only reports on the compile-time mutex setting of the SQLITE_THREADSAFE flag.', 'interface only report compile_time mutex set sqlite_threadsafe flag']
['If the 5th parameter to sqlite3_exec_APIName is not NULL and no errors occur, then sqlite3_exec_APIName sets the pointer in its 5th parameter to NULL before returning.', 'if 5th parameter sqlite3_exec_apiname be null no error occur , then sqlite3_exec_apiname set pointer 5th paramet null before return']
['No entry point will be called more than once for each database connection that is opened.', 'no entry point be call more than once each database connection be open']
['Attempt to return the underlying operating system error code or error number that caused the most recent I/O error or failure to open a file.', 'attempt return underlie operating system error code or error number cause most recent error or failure open file']
[' To execute an SQL statement, it must first be compiled into a byte-code program using one of these routines.', 'execute sql statement , must first be compile into byte_code program use one routine']
[' The sqlite3_threadsafe_APIName function returns zero if and only if SQLite was compiled with mutexing code omitted due to the SQLITE_THREADSAFE compile-time option being set to 0.SQLite can be compiled with or without mutexes.', 'sqlite3_threadsafe_apiname function return zero if only if sqlite be compile mutexe code omit due sqlite_threadsafe compile_time option set 0 can be compile or without mutexe']
['Subsequent arguments vary depending on the configuration option in sqlite3_config_APIParam_1.', 'subsequent argument vary depend configuration option sqlite3_config_apiparam_1']
['After being freed, memory should neither be read nor written.', 'after freed , memory should neither be read nor write']
['For example, an application may allow a user to enter arbitrary SQL queries for evaluation by a database.', 'example , application allow user enter arbitrary sql query evaluation by database']
['The behavior is undefined if the mutex is not currently entered by the calling thread or is not currently allocated.', 'behavior be undefined if mutex be currently enter by call thread or be currently allocate']
['Do not mix calls to sqlite3_column_text_APIName or sqlite3_column_blob_APIName with calls to sqlite3_column_bytes16_APIName, and do not mix calls to sqlite3_column_text16_APIName with calls to sqlite3_column_bytes_APIName.', 'mix call sqlite3_column_text_apiname or sqlite3_column_blob_apiname call sqlite3_column_bytes16_apiname , mix call sqlite3_column_text16_apiname call sqlite3_column_bytes_apiname']
['The sqlite3_value_numeric_type_APIName interface attempts to apply numeric affinity to the value.', 'sqlite3_value_numeric_type_apiname interface attempt apply numeric affinity value']
['These routines return 1 if the input string appears to be a complete SQL statement.', 'routine return # if input string appear be complete sql statement']
['If the sqlite3_realloc_APIParam_1 parameter to sqlite3_realloc_APIName is a NULL pointer then its behavior is identical to calling sqlite3_malloc_APIName.', 'if sqlite3_realloc_apiparam_1 parameter sqlite3_realloc_apiname be null pointer then behavior be identical calling sqlite3_malloc_apiname']
['The SQLite core never uses these routines except inside an assert_APIName and applications are advised to follow the lead of the core.', 'sqlite core never use routine except inside assert_apiname application be advise follow lead core']
['sqlite3_bind_textnot exist in API_info', 'sqlite3_bind_textnot exist api_info']
['The result of expressions involving strings with embedded NULs is undefined.', 'result expression involve string embed nul be undefined']
['The sqlite3_preupdate_new_APIName interface writes into sqlite3_preupdate_new_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row after it is updated.', 'sqlite3_preupdate_new_apiname interface write into sqlite3_preupdate_new_apiparam_3 pointer protect sqlite3_value contain value nth column table row after be update']
['If the table name parameter T in a call to sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is undefined behavior.', 'if table name parameter t call sqlite3_table_column_metadata be null then result be undefined behavior']
['If an interface fails with SQLITE_MISUSE_API_constant, that means the interface was invoked incorrectly by the application.', 'if interface fail sqlite_misuse_api_constant , mean interface be invoke incorrectly by application']
[' The sqlite3_log_APIName interface writes a message into the error log established by the SQLITE_CONFIG_LOG option to sqlite3_config_APIName.', 'sqlite3_log_apiname interface write message into error log establish by sqlite_config_log option sqlite3_config_apiname']
['The Windows VFS uses native malloc_APIName and free_APIName for some operations.', 'window vfs use native malloc_apiname free_apiname operation']
['This will be "main" for the main database or "temp" for TEMP tables or the name given after the AS keyword in the ATTACH statement for attached databases.', 'be main main database or temp temp table or name give after as keyword attach statement attach database']
['If there is an error, *ppStmt is set to NULL.', 'if be error , ppstmt be set null']
['and the following statement to be compiled:', 'follow statement be compile']
['defined not exist in API_info', 'define exist api_info']
['It first tries "sqlite3_extension_init".', 'first try sqlite3_extension_init']
['See the checkpointing documentation for addition information.', 'see checkpointe documentation addition information']
['The third parameter to the preupdate callback is one of the constants SQLITE_INSERT_API_constant, SQLITE_DELETE_API_constant, or SQLITE_UPDATE_API_constant to identify the kind of update operation that is about to occur.', 'third paramet preupdate callback be one constant sqlite_insert_api_constant , sqlite_delete_api_constant , or sqlite_update_api_constant identify kind update operation be about occur']
['The sqlite3_get_table_APIName function evaluates one or more semicolon-separated SQL statements in the zero-terminated UTF-8 string of its 2nd parameter and returns a result table to the pointer given in its 3rd parameter.', 'sqlite3_get_table_apiname function evaluate one or more semicolon_separated sql statement zero_terminate utf_8 string 2nd parameter return result table pointer give 3rd parameter']
['The calling procedure is responsible for deleting the compiled SQL statement using sqlite3_finalize_APIName after it has finished with it.', 'call procedure be responsible deleting compile sql statement use sqlite3_finalize_apiname after have finish']
['See also: sqlite3_bind_APIName, sqlite3_bind_parameter_count_APIName, and sqlite3_bind_parameter_name_APIName.', 'see : sqlite3_bind_apiname , sqlite3_bind_parameter_count_apiname , sqlite3_bind_parameter_name_apiname']
['These routines work just like the corresponding column access functions except that these routines take a single protected sqlite3_value object pointer instead of a sqlite3_stmt* pointer and an integer column number.', 'routine work just like correspond column access function except routine take single protect sqlite3_value object pointer instead sqlite3_stmt pointer integer column number']
['The flags parameter to sqlite3_open_v2_APIName can take one of the following three values, optionally combined with the SQLITE_OPEN_NOMUTEX_API_constant, SQLITE_OPEN_FULLMUTEX_API_constant, SQLITE_OPEN_SHAREDCACHE_API_constant, SQLITE_OPEN_PRIVATECACHE_API_constant, and/or SQLITE_OPEN_URI_API_constant flags:', 'flag parameter sqlite3_open_v2_apiname can take one follow three value , optionally combine sqlite_open_nomutex_api_constant , sqlite_open_fullmutex_api_constant , sqlite_open_sharedcache_api_constant , sqlite_open_privatecache_api_constant , sqlite_open_uri_api_constant flag']
['If the row that a BLOB handle points to is modified by an UPDATE, DELETE, or by ON CONFLICT side-effects then the BLOB handle is marked as "expired".', 'if row blob handle point be modify by update , delete , or by conflict side_effect then blob handle be mark as expire']
['The sqlite3_result_text_APIName, sqlite3_result_text16_APIName, sqlite3_result_text16le_APIName, and sqlite3_result_text16be_APIName interfaces set the return value of the application-defined function to be a text string which is represented as UTF-8, UTF-16 native byte order, UTF-16 little endian, or UTF-16 big endian, respectively.', 'sqlite3_result_text_apiname , sqlite3_result_text16_apiname , sqlite3_result_text16le_apiname , sqlite3_result_text16be_apiname interface set return value application_defined function be text string which be represent as utf_8 , utf_16 native byte order , utf_16 little endian , or utf_16 big endian , respectively']
['and omitting any initial "lib".', 'omit initial lib']
['Workstation applications using SQLite normally do not need to invoke either of these routines.', 'workstation application use sqlite normally need invoke either routine']
['Attempting to deallocate a static mutex results in undefined behavior.', 'attempt deallocate static mutex result undefined behavior']
['If the authorizer callback returns any value other than SQLITE_IGNORE_API_constant, SQLITE_OK_API_constant, or SQLITE_DENY_API_constant then the sqlite3_prepare_v2_APIName or equivalent call that triggered the authorizer will fail with an error message.', 'if authorizer callback return value other than sqlite_ignore_api_constant , sqlite_ok_api_constant , or sqlite_deny_api_constant then sqlite3_prepare_v2_apiname or equivalent call trigger authorizer fail error message']
['There are (N+1)*M elements in the array.', 'be m element array']
[' The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection.', 'sqlite3_db_config_apiname interface be use make configuration change database connection']
['If the sqlite3_prepare_APIParam_3 argument is negative, then sqlite3_prepare_APIParam_2 is read up to the first zero terminator.', 'if sqlite3_prepare_apiparam_3 argument be negative , then sqlite3_prepare_apiparam_2 be read up first zero terminator']
['N bytes of data are copied into buffer sqlite3_blob_read_APIParam_2 from the open BLOB, starting at offset sqlite3_blob_read_APIParam_4.', 'n byte datum be copy into buffer sqlite3_blob_read_apiparam_2 open blob , start offset sqlite3_blob_read_apiparam_4']
['sqlite3_unlock_notifynot exist in API_info', 'sqlite3_unlock_notifynot exist api_info']
['If the specified table is actually a view, an error code is returned by sqlite3_table_column_metadata_APIName.', 'if specify table be actually view , error code be return by sqlite3_table_column_metadata_apiname']
['The sqlite3_value_type_APIName interface returns the datatype code for the initial datatype of the sqlite3_value object V. sqlite3_value_type_APIParam_0 is one of SQLITE_INTEGER_API_constant, SQLITE_FLOAT_API_constant, SQLITE_TEXT_API_constant, SQLITE_BLOB_API_constant, or SQLITE_NULL_API_constant.', 'sqlite3_value_type_apiname interface return datatype code initial datatype sqlite3_value object v. sqlite3_value_type_apiparam_0 be one sqlite_integer_api_constant , sqlite_float_api_constant , sqlite_text_api_constant , sqlite_blob_api_constant , or sqlite_null_api_constant']
['If there is already a read transaction open on schema S, then the database handle must have no active statements (SELECT statements that have been passed to sqlite3_step_APIName but not sqlite3_reset_APIName or sqlite3_finalize_APIName).', 'if be already read transaction open schema s , then database handle must have no active statement select statement have pass sqlite3_step_apiname but sqlite3_reset_apiname or sqlite3_finalize_apiname']
['The sqlite3_normalized_sql_APIName interface returns a pointer to a UTF-8 string containing the normalized SQL text of prepared statement P.  The semantics used to normalize a SQL statement are unspecified and subject to change.', 'sqlite3_normalized_sql_apiname interface return pointer utf_8 string contain normalize sql text prepare statement p. semantic use normalize sql statement be unspecified subject change']
['Suppose the sqlite3_free_table_APIParam_1 table is stored in an array names azResult.', 'suppose sqlite3_free_table_apiparam_1 table be store array name azresult']
['The SQLITE_IGNORE_API_constant return can be used to deny an untrusted user access to individual columns of a table.', 'sqlite_ignore_api_constant return can be use deny untrusted user access individual column table']
['The sqlite3_value_subtype_APIName function returns the subtype for an application-defined SQL function argument V.  The subtype information can be used to pass a limited amount of context from one SQL function to another.', 'sqlite3_value_subtype_apiname function return subtype application_defin sql function argument v. subtype information can be use pass limited amount context one sql function another']
['The third parameter is the name of the database that was written to - either "main" or the name of an ATTACH-ed database.', 'third parameter be name database be write either main or name attach_ed database']
['If sqlite3_uri_boolean_APIParam_1 is a NULL pointer, then sqlite3_uri_parameter_APIName returns NULL and sqlite3_uri_boolean_APIName returns B.', 'if sqlite3_uri_boolean_apiparam_1 be null pointer , then sqlite3_uri_parameter_apiname return null sqlite3_uri_boolean_apiname return b']
['See also: sqlite3_reset_auto_extension_APIName and sqlite3_cancel_auto_extension_APIName', 'see : sqlite3_reset_auto_extension_apiname sqlite3_cancel_auto_extension_apiname']
['Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the sqlite3_errcode_APIName immediately after the suspect return value is obtained and before any other SQLite interface is called on the same database connection.', 'valid sql null return can be distinguish out_of_memory error by invoke sqlite3_errcode_apiname immediately after suspect return value be obtain before other sqlite interface be call database connection']
['The sqlite3_create_module_v2_APIName interface has a fifth parameter which is a pointer to a destructor for the sqlite3_create_module_APIParam_4.', 'sqlite3_create_module_v2_apiname interface have fifth parameter which be pointer destructor sqlite3_create_module_apiparam_4']
['Subsequent arguments vary depending on the configuration verb.', 'subsequent argument vary depend configuration verb']
['When no rows match an aggregate query, the xStep_APIName callback of the aggregate function implementation is never called and xFinal_APIName is called exactly once.', 'when no row match aggregate query , xstep_apiname callback aggregate function implementation be never call xfinal_apiname be call exactly once']
['If the most recent sqlite3_* API call associated with database connection sqlite3_errcode_APIParam_1 failed, then the sqlite3_errcode_APIName interface returns the numeric result code or extended result code for that API call.', 'if most recent sqlite3 api call associated database connection sqlite3_errcode_apiparam_1 fail , then sqlite3_errcode_apiname interface return numeric result code or extended result code api call']
['See sqlite3_create_function_APIName and sqlite3_create_function16_APIName for additional information.', 'see sqlite3_create_function_apiname sqlite3_create_function16_apiname additional information']
['The first argument to the busy handler is a copy of the void* pointer which is the third argument to sqlite3_busy_handler_APIName.', 'first argument busy handler be copy void pointer which be third argument sqlite3_busy_handler_apiname']
['This routine must be called from the same thread in which the aggregate SQL function is running.', 'routine must be call thread which aggregate sql function be run']
[' sqlite3_vtab_collation_APIName may only be called from within a call to the xBestIndex method of a virtual table.The first argument must be the sqlite3_index_info object that is sqlite3_vtab_collation_APIParam_1 to the xBestIndex_APIName method.', 'sqlite3_vtab_collation_apiname only be call within call xbestindex method virtual first argument must be sqlite3_index_info object be sqlite3_vtab_collation_apiparam_1 xbestindex_apiname method']
['The sqlite3_load_extension_APIName interface attempts to load an SQLite extension library contained in the file sqlite3_load_extension_APIParam_2.', 'sqlite3_load_extension_apiname interface attempt load sqlite extension library contain file sqlite3_load_extension_apiparam_2']
['The sqlite3_result_pointer_APIName routine is part of the pointer passing interface added for SQLite 3.20.0.', 'sqlite3_result_pointer_apiname routine be part pointer pass interface add sqlite #']
['Any number of levels of indirection are allowed.', 'number level indirection be allow']
['If an application invokes any sqlite3_xxx API functions from within an unlock-notify callback, a crash or deadlock may be the result.', 'if application invoke sqlite3_xxx api function within unlock_notify callback , crash or deadlock be result']
['The fifth argument, xCallback, is a pointer to the collating function.', 'fifth argument , xcallback , be pointer collate function']
['Only changes made directly by the INSERT, UPDATE or DELETE statement are considered - auxiliary changes caused by triggers, foreign key actions or REPLACE constraint resolution are not counted.', 'only change make directly by insert , update or delete statement be consider auxiliary change cause by trigger , foreign key action or replace constraint resolution be count']
['The sqlite3_mutex_notheld_APIName interface should also return 1 when given a NULL pointer.', 'sqlite3_mutex_notheld_apiname interface should return # when give null pointer']
['The SQLITE_OMIT_AUTORESET compile-time option can be used to restore the legacy behavior.', 'sqlite_omit_autoreset compile_time option can be use restore legacy behavior']
['The name of the collation is a UTF-8 string for sqlite3_create_collation_APIName and sqlite3_create_collation_v2_APIName and a UTF-16 string in native byte order for sqlite3_create_collation16_APIName.', 'name collation be utf_8 string sqlite3_create_collation_apiname sqlite3_create_collation_v2_apiname utf_16 stre native byte order sqlite3_create_collation16_apiname']
['If an SQL operation is very nearly finished at the time when sqlite3_interrupt_APIName is called, then it might not have an opportunity to be interrupted and might continue to completion.', 'if sql operation be nearly finish time when sqlite3_interrupt_apiname be call , then may have opportunity be interrupt may continue completion']
['These routines should return true if the mutex in their argument is held or not held, respectively, by the calling thread.', 'routine should return true if mutex argument be hold or hold , respectively , by call thread']
['Note that the sqlite3_wal_autocheckpoint_APIName interface and the wal_autocheckpoint pragma both invoke sqlite3_wal_hook_APIName and will overwrite any prior sqlite3_wal_hook_APIName settings.', 'note sqlite3_wal_autocheckpoint_apiname interface wal_autocheckpoint pragma both invoke sqlite3_wal_hook_apiname overwrite prior sqlite3_wal_hook_apiname setting']
['The sqlite3_strglob_APIName function is case sensitive.', 'sqlite3_strglob_apiname function be case sensitive']
['Each call to either sqlite3_trace_APIName or sqlite3_trace_v2_APIName overrides (cancels) any prior calls to sqlite3_trace_APIName or sqlite3_trace_v2_APIName.', 'each call either sqlite3_trace_apiname or sqlite3_trace_v2_apiname override prior call sqlite3_trace_apiname or sqlite3_trace_v2_apiname']
['Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST_API_constant or SQLITE_MUTEX_RECURSIVE_API_constant) is used then sqlite3_mutex_alloc_APIName returns a different mutex on every call.', 'note if one dynamic mutex parameter be use then sqlite3_mutex_alloc_apiname return different mutex every call']
['If sqlite3_db_cacheflush_APIName needs to obtain extra database locks before dirty pages can be flushed to disk, it does so.', 'if sqlite3_db_cacheflush_apiname need obtain extra database lock before dirty page can be flush disk , do so']
['These routines do not parse the SQL statements thus will not detect syntactically incorrect SQL.', 'routine parse sql statement thus detect syntactically incorrect sql']
['In a multithreaded environment, an unprotected sqlite3_value object may only be used safely with sqlite3_bind_value_APIName and sqlite3_result_value_APIName.', 'multithreaded environment , unprotected sqlite3_value object only be use safely sqlite3_bind_value_apiname sqlite3_result_value_apiname']
['The left-most column is column 0 for these routines.', 'left_most column be column # routine']
['Things are more complicated if the sqlite3_changes_APIName function is executed while a trigger program is running.', 'thing be more complicated if sqlite3_changes_apiname function be execute while trigger program be run']
['The first M pointers point to zero-terminated strings that  contain the names of the columns.', 'first m pointer point zero_terminate string contain name column']
['See "query parameters with special meaning to SQLite" for additional information.', 'see query parameter special meaning sqlite additional information']
[' After a prepared statement has been prepared using any of sqlite3_prepare_v2_APIName, sqlite3_prepare_v3_APIName, sqlite3_prepare16_v2_APIName, or sqlite3_prepare16_v3_APIName or one of the legacy interfaces sqlite3_prepare_APIName or sqlite3_prepare16_APIName, sqlite3_step_APIName must be called one or more times to evaluate the statement.The details of the behavior of the sqlite3_step_APIName interface depend on whether the statement was prepared using the newer "vX" interfaces sqlite3_prepare_v3_APIName, sqlite3_prepare_v2_APIName, sqlite3_prepare16_v3_APIName, sqlite3_prepare16_v2_APIName or the older legacy interfaces sqlite3_prepare_APIName and sqlite3_prepare16_APIName.', 'after prepared statement have prepare use sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname , sqlite3_prepare16_v2_apiname , or sqlite3_prepare16_v3_apiname or one legacy interface sqlite3_prepare_apiname or sqlite3_prepare16_apiname , sqlite3_step_apiname must be call one or more time evaluate detail behavior sqlite3_step_apiname interface depend whether statement be prepare use new vx interface sqlite3_prepare_v3_apiname , sqlite3_prepare_v2_apiname , sqlite3_prepare16_v3_apiname , sqlite3_prepare16_v2_apiname or old legacy interface sqlite3_prepare_apiname sqlite3_prepare16_apiname']
['The destructor is also invoked if the call to sqlite3_create_function_v2_APIName fails.', 'destructor be invoke if call sqlite3_create_function_v2_apiname fail']
['To avoid a resource leak, every open BLOB handle should eventually be released by a call to sqlite3_blob_close_APIName.', 'avoid resource leak , every open blob handle should eventually be release by call sqlite3_blob_close_apiname']
['sqlite3_bind_blob not exist in API_info', 'sqlite3_bind_blob exist api_info']
['This interface is threadsafe on processors where writing a 32-bit integer is atomic.', 'interface be threadsafe processor where write 32_bit integer be atomic']
['We admit that the number of characters written would be a more useful return value but we cannot change the implementation of sqlite3_snprintf_APIName now without breaking compatibility.', 'PRON- admit number character write would be more useful return value but -PRON- can change implementation sqlite3_snprintf_apiname now without break compatibility']
['Without SQLITE_ENABLE_MEMORY_MANAGEMENT, the soft heap limit is only enforced when memory is allocated by the page cache.', 'without sqlite_enable_memory_management , soft heap limit be only enforce when memory be allocate by page cache']
[' These routines provide a means to determine the database, table, and table column that is the origin of a particular result column in SELECT statement.', 'routine provide mean determine database , table , table column be origin particular result column select statement']
['The ATTACH and DETACH statements also cause sqlite3_stmt_readonly_APIName to return true since, while those statements change the configuration of a database connection, they do not make changes to the content of the database files on disk.', 'attach detach statement cause sqlite3_stmt_readonly_apiname return true since , while statement change configuration database connection , make change content database file disk']
['Mutexes created using SQLITE_MUTEX_RECURSIVE_API_constant can be entered multiple times by the same thread.', 'mutexe create use sqlite_mutex_recursive_api_constant can be enter multiple time by thread']
['Unless deadlock is detected (see below), sqlite3_unlock_notify_APIName always returns SQLITE_OK_API_constant.', 'unless deadlock be detect , sqlite3_unlock_notify_apiname always return sqlite_ok_api_constant']
['If the log message is longer than a few hundred characters, it will be truncated to the length of the buffer.', 'if log message be long than few hundred character , be truncate length buffer']
[' This routine can be used to find the number of SQL parameters in a prepared statement.', 'routine can be use find number sql parameter prepare statement']
['sqlite3_progress_handlernot exist in API_info', 'sqlite3_progress_handlernot exist api_info']
['The third through sixth parameters to the callback are either NULL pointers or zero-terminated strings that contain additional details about the action to be authorized.', 'third through sixth parameter callback be either null pointer or zero_terminate string contain additional detail about action be authorize']
['Authorization is not performed during statement evaluation in sqlite3_step_APIName, unless as stated in the previous paragraph, sqlite3_step_APIName invokes sqlite3_prepare_v2_APIName to reprepare a statement after a schema change.', 'authorization be perform during statement evaluation sqlite3_step_apiname , unless as state previous paragraph , sqlite3_step_apiname invoke sqlite3_prepare_v2_apiname reprepare statement after schema change']
['So if speed is of utmost importance, it makes sense to disable the mutexes.', 'so if speed be utmost importance , make sense disable mutexe']
['Parameter "idx" identifies the specific loop to retrieve statistics for.', 'paramet idx identifie specific loop retrieve statistic']
['For example, if the number of table steps greatly exceeds the number of table searches or result rows, that would tend to indicate that the prepared statement is using a full table scan rather than an index.', 'example , if number table step greatly exceed number table search or result row , would tend indicate prepare statement be use full table scan rather than index']
['If the writer lock cannot be obtained immediately, and a busy-handler is configured, it is invoked and the writer lock retried until either the busy-handler returns 0 or the lock is successfully obtained.', 'if writer lock can be obtain immediately , busy_handler be configure , be invoke writer lock retry until either busy_handler return # or lock be successfully obtain']
[' sqlite3_total_changes_APIName returns the total number of rows inserted, modified or deleted by all INSERT, UPDATE or DELETE statements completed since the database connection was opened, including those executed as part of trigger programs.', 'sqlite3_total_changes_apiname return total number row insert , modify or delete by insert , update or delete statement complete since database connection be open , include execute as part trigger program']
['Run-time limits are intended for use in applications that manage both their own internal database and also databases that are controlled by untrusted external sources.', 'run_time limit be intend application manage both internal database database be control by untrusted external source']
['The sqlite3_win32_set_directory8 and sqlite3_win32_set_directory16 interfaces behave exactly the same as the sqlite3_win32_set_directory interface except the string parameter must be UTF-8 or UTF-16, respectively.', 'sqlite3_win32_set_directory8 sqlite3_win32_set_directory16 interface behave exactly as sqlite3_win32_set_directory interface except string parameter must be utf_8 or utf_16 , respectively']
['(Hint: Run "PRAGMA application_id" against a newly opened database connection in order to make it ready to use snapshots.)', 'hint : run pragma application_id against newly open database connection order make ready snapshot']
['The blocked connections unlock-notify callback may also be canceled by closing the blocked connection using sqlite3_close_APIName.', 'block connection unlock_notify callback be cancel by close block connection use sqlite3_close_apiname']
['The fourth parameter, eTextRep, specifies what text encoding this SQL function prefers for its parameters.', 'fourth paramet , etextrep , specifie what text encode sql function prefer parameter']
['Only built-in memory allocators can be used.', 'only built_in memory allocator can be use']
['The second parameter is the column number.', 'second parameter be column number']
['Memory corruption, a segmentation fault, or other severe error might result if sqlite3_free_APIName is called with a non-NULL pointer that was not obtained from sqlite3_malloc_APIName or sqlite3_realloc_APIName.', 'memory corruption , segmentation fault , or other severe error may result if sqlite3_free_apiname be call non_null pointer be obtain sqlite3_malloc_apiname or sqlite3_realloc_apiname']
['The sqlite3_keyword_name_APIName routine returns SQLITE_OK_API_constant if sqlite3_keyword_name_APIParam_1 is within bounds and SQLITE_ERROR_API_constant if not.', 'sqlite3_keyword_name_apiname routine return sqlite_ok_api_constant if sqlite3_keyword_name_apiparam_1 be within bound sqlite_error_api_constant if']
['If sqlite3_result_error_APIParam_3 to sqlite3_result_error_APIName or sqlite3_result_error16_APIName is non-negative then SQLite takes that many bytes (not characters) from the 2nd parameter as the error message.', 'if sqlite3_result_error_apiparam_3 sqlite3_result_error_apiname or sqlite3_result_error16_apiname be non_negative then sqlite take many byte 2nd parameter as error message']
['If sqlite3_value_free_APIParam_1 is a NULL pointer then sqlite3_value_free_APIName is a harmless no-op.', 'if sqlite3_value_free_apiparam_1 be null pointer then sqlite3_value_free_apiname be harmless no_op']
['If an error occurs while committing the transaction, an error code is returned by sqlite3_blob_close_APIName and the transaction rolled back.', 'if error occur while commit transaction , error code be return by sqlite3_blob_close_apiname transaction roll back']
['Developers might also want to use the sqlite3_set_authorizer_APIName interface to further control untrusted SQL.', 'developer may want sqlite3_set_authorizer_apiname interface further control untrusted sql']
['See the built-in printf_APIName documentation for details.', 'see built_in printf_apiname documentation detail']
['Recognized integer codes are of the form SQLITE_STATUS_....', 'recognize integer code be form sqlite_status']
['These interfaces return the current status of an sqlite3_str object.', 'interface return current status sqlite3_str object']
['But because the SELECT statement does not change the database file directly, sqlite3_stmt_readonly_APIName would still return true.', 'but because select statement do change database file directly , sqlite3_stmt_readonly_apiname would still return true']
['A database connection might not know that the database file is in WAL mode if there has been no prior I/O on that database connection, or if the database entered WAL mode after the most recent I/O on the database connection.', 'database connection may know database file be wal mode if have no prior database connection , or if database enter wal mode after most recent database connection']
['Typical tasks performed by these routines include allocation or deallocation of static resources, initialization of global variables, setting up a default sqlite3_vfs module, or setting up a default configuration using sqlite3_config_APIName.', 'typical task perform by routine include allocation or deallocation static resource , initialization global variable , set up default sqlite3_vfs module , or set up default configuration use sqlite3_config_apiname']
['The problem has been fixed with the "v2" interface.', 'problem have fix v2 interface']
['The use of the sqlite3_enable_load_extension_APIName interface should be avoided.', 'sqlite3_enable_load_extension_apiname interface should be avoid']
['SQLite will invoke the destructor function (if it is not NULL) when SQLite no longer needs the sqlite3_create_module_APIParam_4 pointer.', 'sqlite invoke destructor function when sqlite no longer need sqlite3_create_module_apiparam_4 pointer']
['sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName.', 'sqlite3_snapshot_recover_apiname attempt scan wal file associate database sqlite3_snapshot_recover_apiparam_2 database handle sqlite3_snapshot_recover_apiparam_1 make valid snapshot available sqlite3_snapshot_open_apiname']
['When sqlite3_prepare_v2_APIName is used to prepare a statement, the statement might be re-prepared during sqlite3_step_APIName due to a schema change.', 'when sqlite3_prepare_v2_apiname be use prepare statement , statement may be re_prepare during sqlite3_step_apiname due schema change']
['If sqlite3_stmt_busy_APIParam_1 is not a NULL pointer and is not a pointer to a valid prepared statement object, then the behavior is undefined and probably undesirable.', 'if sqlite3_stmt_busy_apiparam_1 be null pointer be pointer valid prepared statement object , then behavior be undefined probably undesirable']
['The first parameter is the prepared statement that implements the SELECT statement.', 'first parameter be prepare statement implement select statement']
['However, if SQLite is compiled with the SQLITE_OMIT_AUTOINIT compile-time option, then the automatic calls to sqlite3_initialize_APIName are omitted and the application must call sqlite3_initialize_APIName directly prior to using any other SQLite interface.', 'however , if sqlite be compile sqlite_omit_autoinit compile_time option , then automatic call sqlite3_initialize_apiname be omit application must call sqlite3_initialize_apiname directly prior use other sqlite interface']
[' This routine sets a busy handler that sleeps for a specified amount of time when a table is locked.', 'routine set busy handler sleep specify amount time when table be lock']
['SQLITE_TOOBIG_API_constant might be returned if the size of a string or BLOB exceeds limits imposed by sqlite3_limit_APIName or SQLITE_MAX_LENGTH.', 'sqlite_toobig_api_constant may be return if size string or blob exceed limit impose by sqlite3_limit_apiname or sqlite_max_length']
['The third parameter (nArg) is the number of arguments that the SQL function or aggregate takes.', 'third parameter be number argument sql function or aggregate take']
['The callback function registered by sqlite3_profile_APIName is invoked as each SQL statement finishes.', 'callback function register by sqlite3_profile_apiname be invoke as each sql statement finish']
['For the purposes of this routine, an INSERT is considered to be successful even if it is subsequently rolled back.', 'purpose routine , insert be consider be successful even if be subsequently roll back']
['this routine would return the string "VARIANT" for the second result column (i==1), and a NULL pointer for the first result column (i==0).', 'routine would return stre variant second result column , null pointer first result column i 0']
['Note that the order of the first two parameters is reversed from snprintf_APIName.', 'note order first two parameter be reverse snprintf_apiname']
['A result table records the complete query results from one or more queries.', 'result table record complete query result one or more query']
['In other words, the return value from sqlite3_threadsafe_APIName is unchanged by calls to sqlite3_config_APIName.', 'other word , return value sqlite3_threadsafe_apiname be unchanged by call sqlite3_config_apiname']
['These routines are designed to aid in process initialization and shutdown on embedded systems.', 'routine be design aid process initialization shutdown embed system']
['The sqlite3_db_filename_APIName interface returns a pointer to a filename associated with database sqlite3_db_filename_APIParam_2 of connection D.  The main database file has the name "main".', 'sqlite3_db_filename_apiname interface return pointer filename associate database sqlite3_db_filename_apiparam_2 connection d. main database file have name main']
['To avoid deadlocks and other threading problems, the sqlite3_log_APIName routine will not use dynamically allocated memory.', 'avoid deadlock other threading problem , sqlite3_log_apiname routine dynamically allocate memory']
['See also:  PRAGMA busy_timeout', 'see : pragma busy_timeout']
['The sqlite3_str_appendchar_APIName method appends sqlite3_str_append_APIParam_3 copies of the single-byte character sqlite3_str_appendchar_APIParam_3 onto the end of sqlite3_str object X.', 'sqlite3_str_appendchar_apiname method append sqlite3_str_append_apiparam_3 copy single_byte character sqlite3_str_appendchar_apiparam_3 onto end sqlite3_str object x']
['If a write-transaction is open on database connection sqlite3_db_cacheflush_APIParam_1 when the sqlite3_db_cacheflush_APIName interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk.', 'if write_transaction be open database connection sqlite3_db_cacheflush_apiparam_1 when sqlite3_db_cacheflush_apiname interface invoke , dirty page pager_cache be currently be write out disk']
['sqlite3_column_origin_name_APIParam_0 is valid until the prepared statement is destroyed using sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the same information is requested again in a different encoding.', 'sqlite3_column_origin_name_apiparam_0 be valid until prepared statement be destroy use sqlite3_finalize_apiname or until statement be automatically reprepare by first call sqlite3_step_apiname particular run or until information be request again different encoding']
['If the fourth parameter to sqlite3_bind_blob_APIName is negative, then the behavior is undefined.', 'if fourth parameter sqlite3_bind_blob_apiname be negative , then behavior be undefined']
['The size of the blob (and hence the maximum value of N+iOffset) can be determined using the sqlite3_blob_bytes_APIName interface.', 'size blob can be determine use sqlite3_blob_bytes_apiname interface']
['Further options may be added in the future.', 'further option be add future']
['If the callback function of the 3rd argument to sqlite3_exec_APIName is not NULL, then it is invoked for each result row coming out of the evaluated SQL statements.', 'if callback function 3rd argument sqlite3_exec_apiname be null , then be invoke each result row come out evaluated sql statement']
['There is however, one exception.', 'be however , one exception']
['The first argument, "db", is a database connection obtained from a prior successful call to sqlite3_open_APIName, sqlite3_open_v2_APIName or sqlite3_open16_APIName.', 'first argument , db , be database connection obtain prior successful call sqlite3_open_apiname , sqlite3_open_v2_apiname or sqlite3_open16_apiname']
['Any actions to modify the database connection must be deferred until after the completion of the sqlite3_step_APIName call that triggered the update hook.', 'action modify database connection must be defer until after completion sqlite3_step_apiname call trigger update hook']
['If sqlite3_uri_boolean_APIParam_1 is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method, then the behavior of this routine is undefined and probably undesirable.', 'if sqlite3_uri_boolean_apiparam_1 be null pointer be database file pathname pointer sqlite pass into xopen vfs method , then behavior routine be undefined probably undesirable']
['If parameter sqlite3_wal_checkpoint_v2_APIParam_2 is NULL or points to a zero length string, then the specified operation is attempted on all WAL databases attached to database connection sqlite3_wal_checkpoint_v2_APIParam_1.', 'if paramet sqlite3_wal_checkpoint_v2_apiparam_2 be null or point zero length string , then specify operation be attempt wal database attach database connection sqlite3_wal_checkpoint_v2_apiparam_1']
['The sqlite3_reset_APIName function is called to reset a prepared statement object back to its initial state, ready to be re-executed.', 'sqlite3_reset_apiname function be call reset prepared statement object back initial state , ready be re_execut']
['If two different VFSes with the same name are registered, the behavior is undefined.', 'if two different vfse name be register , behavior be undefined']
['If two or more threads call one or more of these routines against the same prepared statement and column at the same time then the results are undefined.', 'if two or more thread call one or more routine against prepared statement column time then result be undefined']
['SQLite uses dynamic run-time typing.', 'sqlite use dynamic run_time typing']
['URI sqlite3_open_APIParam_1 interpretation is turned off by default, but future releases of SQLite might enable URI sqlite3_open_APIParam_1 interpretation by default.', 'uri sqlite3_open_apiparam_1 interpretation be turn off by default , but future release sqlite may enable uri sqlite3_open_apiparam_1 interpretation by default']
['To avoid memory leaks, the object returned by sqlite3_str_new_APIName must be freed by a subsequent call to sqlite3_str_finish_APIName.', 'avoid memory leak , object return by sqlite3_str_new_apiname must be free by subsequent call sqlite3_str_finish_apiname']
['If for some reason, sqlite3_initialize_APIName is unable to initialize the library (perhaps it is unable to allocate a needed resource such as a mutex) it returns an error code other than SQLITE_OK_API_constant.', 'if reason , sqlite3_initialize_apiname be unable initialize library return error code other than sqlite_ok_api_constant']
['There are two column (M==2) and three rows (N==3).', 'be two column three row n 3']
['The current value of the parameter is returned by sqlite3_status_APIName into *pCurrent.', 'current value parameter be return by sqlite3_status_apiname into pcurrent']
['The sqlite3_wal_hook_APIName function is used to register a callback that is invoked each time data is committed to a database in wal mode.', 'sqlite3_wal_hook_apiname function be use register callback be invoke each time datum be commit database wal mode']
[' The sqlite3_drop_modules_APIName interface removes all virtual table modules from database connection D except those named on list L. The L parameter must be either NULL or a pointer to an array of pointers to strings where the array is terminated by a single NULL pointer.', 'sqlite3_drop_modules_apiname interface remove virtual table module database connection d except name list l. l parameter must be either null or pointer array pointer string where array be terminate by single null pointer']
['If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes_APIName routine returns the number of bytes in that BLOB or string.', 'if result be blob or utf_8 string then sqlite3_column_bytes_apiname routine return number byte blob or string']
['sqlite3_db_cacheflush_APIName does not set the database handle error code or message returned by the sqlite3_errcode_APIName and sqlite3_errmsg_APIName functions.', 'sqlite3_db_cacheflush_apiname do set database handle error code or message return by sqlite3_errcode_apiname sqlite3_errmsg_apiname function']
[' The sqlite3_wal_checkpoint_APIName is equivalent to sqlite3_wal_checkpoint_v2(D,X,SQLITE_CHECKPOINT_PASSIVE,0,0).In brief, sqlite3_wal_checkpoint_APIName causes the content in the write-ahead log for database X on database connection D to be transferred into the database file and for the write-ahead log to be reset.', 'sqlite3_wal_checkpoint_apiname be equivalent sqlite3_wal_checkpoint_v2 brief , sqlite3_wal_checkpoint_apiname cause content write_ahead log database x database connection d be transfer into database file write_ahead log be reset']
['In that case, the error code and message may or may not be set.', 'case , error code message or be set']
['If the result is NULL, then sqlite3_column_bytes_APIName returns zero.', 'if result be null , then sqlite3_column_bytes_apiname return zero']
['Use the UPDATE SQL command to change the size of a blob.', 'update sql command change size blob']
['The progress handler is also disabled by setting N to a value less than 1.', 'progress handler be disable by set n value less than #']
['The sqlite3_result_value_APIName interface sets the result of the application-defined function to be a copy of the unprotected sqlite3_value object specified by the 2nd parameter.', 'sqlite3_result_value_apiname interface set result application_defined function be copy unprotected sqlite3_value object specify by 2nd parameter']
[' If a write-transaction is open on database connection D when the sqlite3_db_cacheflush_APIName interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk.', 'if write_transaction be open database connection d when sqlite3_db_cacheflush_apiname interface invoke , dirty page pager_cache be currently be write out disk']
['The sqlite3_memory_highwater_APIName routine returns the maximum value of sqlite3_memory_used_APIName since the high-water mark was last reset.', 'sqlite3_memory_highwater_apiname routine return maximum value sqlite3_memory_used_apiname since high_water mark be last reset']
['If the busy-handler returns 0 before the writer lock is obtained or while waiting for database readers, the checkpoint operation proceeds from that point in the same way as SQLITE_CHECKPOINT_PASSIVE_API_constant - checkpointing as many frames as possible without blocking any further.', 'if busy_handler return # before writer lock be obtain or while wait database reader , checkpoint operation proceed point way as sqlite_checkpoint_passive_api_constant checkpointing as many frame as possible without block further']
['See also: sqlite3_status_APIName and sqlite3_stmt_status_APIName.', 'see : sqlite3_status_apiname sqlite3_stmt_status_apiname']
['If the commit hook returns non-zero, then the COMMIT is converted into a ROLLBACK.', 'if commit hook return non_zero , then commit be convert into rollback']
['", "?NNN", ":AAA", "$AAA", or "@AAA" that serve as placeholders for values that are bound to the parameters at a later time.', 'nnn , : aaa , aaa , or aaa serve as placeholder value be bind parameter later time']
['The use of the new "vX" interface is recommended for new applications but the legacy interface will continue to be supported.', 'vx interface be recommend application but legacy interface continue be support']
['If the 5th parameter to sqlite3_exec_APIName is not NULL then any error message is written into memory obtained from sqlite3_malloc_APIName and passed back through the 5th parameter.', 'if 5th parameter sqlite3_exec_apiname be null then error message be write into memory obtain sqlite3_malloc_apiname pass back through 5th parameter']
['The sqlite3_close_v2_APIName interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.', 'sqlite3_close_v2_apiname interface be intend host language be garbage collect , where order which destructor be call be arbitrary']
['If sqlite3_value_frombind_APIParam_1 comes from an SQL literal value, or a table column, and expression, then sqlite3_value_frombind_APIName returns zero.', 'if sqlite3_value_frombind_apiparam_1 come sql literal value , or table column , expression , then sqlite3_value_frombind_apiname return zero']
['This routine must be called from the same thread in which the application-defined function is running.', 'routine must be call thread which application_defined function be run']
['Note, however, that sqlite3_config_APIName can be called as part of the implementation of an application-defined sqlite3_os_init_APIName.', 'note , however , sqlite3_config_apiname can be call as part implementation application_defin sqlite3_os_init_apiname']
['The callback function should register the desired collation using sqlite3_create_collation_APIName, sqlite3_create_collation16_APIName, or sqlite3_create_collation_v2_APIName.', 'callback function should register desire collation use sqlite3_create_collation_apiname , sqlite3_create_collation16_apiname , or sqlite3_create_collation_v2_apiname']
['Changes to a view that are intercepted by INSTEAD OF triggers are not counted.', 'change view be intercept by instead trigger be count']
['The second argument must be an index into the aConstraint[] array belonging to the sqlite3_index_info structure passed to xBestIndex.', 'second argument must be index into aconstraint array belong sqlite3_index_info structure pass xbestindex']
['This can be used, for example, in diagnostic routines to search for prepared statements that are holding a transaction open.', 'can be use , example , diagnostic routine search prepare statement be hold transaction open']
['If the argument sqlite3_soft_heap_limit64_APIParam_1 is zero then the soft heap limit is disabled.', 'if argument sqlite3_soft_heap_limit64_apiparam_1 be zero then soft heap limit be disabled']
['This interface is used to retrieve and reset counter values from a prepared statement.', 'interface be use retrieve reset counter value prepare statement']
['Any such actions result in undefined behavior.', 'such action result undefined behavior']
['The following must be true for sqlite3_snapshot_get_APIName to succeed.', 'follow must be true sqlite3_snapshot_get_apiname succeed']
['The fourth parameter to the preupdate callback is the name of the database within the database connection that is being modified.', 'fourth paramet preupdate callback be name database within database connection be modify']
['In other words, the busy handler is not reentrant.', 'other word , busy handler be reentrant']
['The default encoding for databases created using sqlite3_open16_APIName will be UTF-16 in the native byte order.', 'default encode database create use sqlite3_open16_apiname be utf_16 native byte order']
['Future releases of SQLite may require this.', 'future release sqlite require']
[' These interfaces are available only on Windows.', 'interface be available only window']
['The SQLITE_FCNTL_JOURNAL_POINTER_API_constant works similarly except that it returns the sqlite3_file object associated with the journal file instead of the main database.', 'sqlite_fcntl_journal_pointer_api_constant work similarly except return sqlite3_file object associate journal file instead main database']
['The callback is invoked from within the sqlite3_step or sqlite3_close call that concludes the blocking connections transaction.', 'callback be invoke within sqlite3_step or sqlite3_close call conclude block connection transaction']
['Zero all sqlite3_stmt_scanstatus_APIName related event counters.', 'zero sqlite3_stmt_scanstatus_apiname related event counter']
['The M argument should be the bitwise OR-ed combination of zero or more SQLITE_TRACE_API_constant constants.', 'm argument should be bitwise or_ed combination zero or more sqlite_trace_api_constant constant']
['The sqlite3_result_int64_APIName interface sets the return value of the application-defined function to be the 64-bit signed integer value given in the 2nd argument.', 'sqlite3_result_int64_apiname interface set return value application_defined function be 64_bit sign integer value give 2nd argument']
['Future versions of SQLite might make use of additional special filenames that begin with the ":" character.', 'future version sqlite may make additional special filename begin : character']
['If those locks cannot be obtained immediately and there is a busy-handler callback configured, it is invoked in the usual manner.', 'if lock can be obtain immediately be busy_handler callback configure , be invoke usual manner']
['New VFSes are registered with sqlite3_vfs_register_APIName.', 'vfse be register sqlite3_vfs_register_apiname']
['The fifth parameter is an arbitrary pointer.', 'fifth parameter be arbitrary pointer']
['The sqlite3_close_APIName and sqlite3_close_v2_APIName routines are destructors for the sqlite3 object.', 'sqlite3_close_apiname sqlite3_close_v2_apiname routine be destructor sqlite3 object']
['The sqlite3_preupdate_old_APIName interface writes into sqlite3_preupdate_old_APIParam_3 a pointer to a protected sqlite3_value that contains the value of the Nth column of the table row before it is updated.', 'sqlite3_preupdate_old_apiname interface write into sqlite3_preupdate_old_apiparam_3 pointer protect sqlite3_value contain value nth column table row before be update']
['The sqlite3_strlike_APIName interface returns zero if and only if string sqlite3_strlike_APIParam_2 matches the LIKE pattern sqlite3_strlike_APIParam_1 with escape character E. The definition of LIKE pattern matching used in sqlite3_strlike_APIName is the same as for the "X LIKE sqlite3_strlike_APIParam_1 ESCAPE E" operator in the SQL dialect understood by SQLite.', 'sqlite3_strlike_apiname interface return zero if only if stre sqlite3_strlike_apiparam_2 match like pattern sqlite3_strlike_apiparam_1 escape character e. definition like pattern matching use sqlite3_strlike_apiname be as x like sqlite3_strlike_apiparam_1 escape e operator sql dialect understand by sqlite']
['sqlite3_trace not exist in API_info', 'sqlite3_trace exist api_info']
['If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16_APIName routine returns the number of bytes in that BLOB or string.', 'if result be blob or utf_16 stre then sqlite3_column_bytes16_apiname routine return number byte blob or string']
['If sqlite3_wal_checkpoint_v2_APIParam_2 is not NULL (or a zero length string) and is not the name of any attached database, SQLITE_ERROR_API_constant is returned by sqlite3_wal_checkpoint_v2_APIName to the caller.', 'if sqlite3_wal_checkpoint_v2_apiparam_2 be null be name attached database , sqlite_error_api_constant be return by sqlite3_wal_checkpoint_v2_apiname caller']
['The set of SQLITE_DBSTATUS options is likely to grow in future releases of SQLite.', 'set sqlite_dbstatus option be likely grow future release sqlite']
['These methods do not return a result code.', 'method return result code']
['The sqlite3_prepare_APIName, sqlite3_prepare_v2_APIName, and sqlite3_prepare_v3_APIName interfaces use UTF-8, and sqlite3_prepare16_APIName, sqlite3_prepare16_v2_APIName, and sqlite3_prepare16_v3_APIName use UTF-16.', 'sqlite3_prepare_apiname , sqlite3_prepare_v2_apiname , sqlite3_prepare_v3_apiname interface utf_8 , sqlite3_prepare16_apiname , sqlite3_prepare16_v2_apiname , sqlite3_prepare16_v3_apiname utf_16']
['The second parameter to the callback is an integer action code that specifies the particular action to be authorized.', 'second paramet callback be integer action code specifie particular action be authorize']
['Depending on how the SQLite library is compiled, this interface might not exist.', 'depend how sqlite library be compile , interface may exist']
['sqlite3_profilenot exist in API_info', 'sqlite3_profilenot exist api_info']
['These routines may only be called from within a preupdate callback.', 'routine only be call within preupdate callback']
['sqlite3_create_window_function not exist in API_info', 'sqlite3_create_window_function exist api_info']
['SELECT c1 + 1, c1 FROM t1;', 'select c1 1 , c1 t1']
[' These routines are used by the xFunc or xFinal callbacks that implement SQL functions and aggregates.', 'routine be use by xfunc or xfinal callback implement sql function aggregate']
['See also: sqlite_version_APIName and sqlite_source_id_APIName.', 'see : sqlite_version_apiname sqlite_source_id_apiname']
['Filenames containing international characters must be converted to UTF-8 prior to passing them into sqlite3_open_APIName or sqlite3_open_v2_APIName.', 'filename contain international character must be convert utf_8 prior pass -PRON- into sqlite3_open_apiname or sqlite3_open_v2_apiname']
['Other interfaces might change the datatype for an sqlite3_value object.', 'other interface may change datatype sqlite3_value object']
['The application must finalize every prepared statement in order to avoid resource leaks.', 'application must finalize every prepared statement order avoid resource leak']
['See Also: Using the SQLite Unlock Notification Feature.', 'see : use sqlite unlock notification feature']
['The sqlite3_finalize_APIName function is called to delete a prepared statement.', 'sqlite3_finalize_apiname function be call delete prepared statement']
[' The sqlite3_data_count_APIName interface returns the number of columns in the current row of the result set of prepared statement P. If prepared statement P does not have results ready to return (via calls to the sqlite3_column_*_APIName of interfaces) then sqlite3_data_count_APIName returns 0.', 'sqlite3_data_count_apiname interface return number column current row result set prepared statement p. if prepare statement p do have result ready return then sqlite3_data_count_apiname return #']
['See also: sqlite3_blob_close_APIName, sqlite3_blob_reopen_APIName, sqlite3_blob_read_APIName, sqlite3_blob_bytes_APIName, sqlite3_blob_write_APIName.', 'see : sqlite3_blob_close_apiname , sqlite3_blob_reopen_apiname , sqlite3_blob_read_apiname , sqlite3_blob_bytes_apiname , sqlite3_blob_write_apiname']
['Definition: A result table is memory data structure created by the sqlite3_get_table_APIName interface.', 'definition : result table be memory datum structure create by sqlite3_get_table_apiname interface']
['sqlite3_interrupt_APIName causes any pending database operation to abort and return at its earliest opportunity.', 'sqlite3_interrupt_apiname cause pende database operation abort return early opportunity']
['SQLite interprets the string from sqlite3_result_error16_APIName as UTF-16 in native byte order.', 'sqlite interpret stre sqlite3_result_error16_apiname as utf_16 native byte order']
['SQLITE_MISUSE_API_constant means that the this routine was called inappropriately.', 'sqlite_misuse_api_constant mean routine be call inappropriately']
['A NULL pointer can be used in place of "main" to refer to the main database file.', 'null pointer can be use place main refer main database file']
['NULL values sqlite3_free_table_APIParam_1 in NULL pointers.', 'null value sqlite3_free_table_apiparam_1 null pointer']
['Every new database connection defaults to having the auto-checkpoint enabled with a threshold of 1000 or SQLITE_DEFAULT_WAL_AUTOCHECKPOINT pages.', 'every database connection default have auto_checkpoint enable threshold # or sqlite_default_wal_autocheckpoint page']
['When the destructor callback is invoked, it is passed a single argument which is a copy of the application data pointer which was the fifth parameter to sqlite3_create_function_v2_APIName.', 'when destructor callback be invoke , be pass single argument which be copy application datum pointer which be fifth paramet sqlite3_create_function_v2_apiname']
['sqlite3_column_name_APIParam_0 pointer is valid until either the prepared statement is destroyed by sqlite3_finalize_APIName or until the statement is automatically reprepared by the first call to sqlite3_step_APIName for a particular run or until the next call to sqlite3_column_name_APIName or sqlite3_column_name16_APIName on the same column.', 'sqlite3_column_name_apiparam_0 pointer be valid until either prepared statement be destroy by sqlite3_finalize_apiname or until statement be automatically reprepare by first call sqlite3_step_apiname particular run or until next call sqlite3_column_name_apiname or sqlite3_column_name16_apiname column']
['Some parameters do not record the highest value.', 'parameter record high value']
['The P and X arguments are pointers whose meanings depend on T.', 'p x argument be pointer whose meaning depend t']
['sqlite3_realloc_APIName returns a pointer to a memory allocation of at least sqlite3_realloc_APIParam_2 bytes in size or NULL if insufficient memory is available.', 'sqlite3_realloc_apiname return pointer memory allocation least sqlite3_realloc_apiparam_2 byte size or null if insufficient memory be available']
['Otherwise, in the special "DROP TABLE/INDEX" case, the extended error code is just SQLITE_LOCKED_API_constant.', 'otherwise , special drop case , extended error code be just sqlite_locked_api_constant']
['For these latter parameters nothing is written into *pCurrent.', 'latter parameter nothing be write into pcurrent']
['But global versions of those functions must exist in order to be overloaded.', 'but global version function must exist order be overload']
['This interfaces opens a handle to the BLOB located in row sqlite3_blob_open_APIParam_5, column sqlite3_blob_open_APIParam_4, table sqlite3_blob_open_APIParam_3 in database sqlite3_blob_open_APIParam_2; in other words, the same BLOB that would be selected by:', 'interface open handle blob locate row sqlite3_blob_open_apiparam_5 , column sqlite3_blob_open_apiparam_4 , table sqlite3_blob_open_apiparam_3 database sqlite3_blob_open_apiparam_2 ; other word , blob would be select by']
['This routine actually returns the index of the largest (rightmost) parameter.', 'routine actually return index large parameter']
['The application must ensure that no other SQLite interfaces are invoked by other threads while sqlite3_config_APIName is running.', 'application must ensure no other sqlite interface be invoke by other thread while sqlite3_config_apiname be run']
['sqlite3_step_APIName should not be called again on this virtual machine without first calling sqlite3_reset_APIName to reset the virtual machine back to its initial state.', 'sqlite3_step_apiname should be call again virtual machine without first call sqlite3_reset_apiname reset virtual machine back initial state']
[' The sqlite3_stmt_isexplain_APIName interface returns 1 if the prepared statement S is an EXPLAIN statement, or 2 if the statement S is an EXPLAIN QUERY PLAN.', 'sqlite3_stmt_isexplain_apiname interface return # if prepare statement s be explain statement , or # if statement s be explain query plan']
['sqlite3_create_collation16 not exist in API_info', 'sqlite3_create_collation16 exist api_info']
['A contiguous memory representation of the database will usually only exist if there has been a prior call to sqlite3_deserialize(D,S,...) with the same values of D and S. The size of the database is written into *P even if the SQLITE_SERIALIZE_NOCOPY_API_constant bit is set but no contiguous copy of the database exists.', 'contiguous memory representation database usually only exist if have prior call sqlite3_deserialize value d s. size database be write into p even if sqlite_serialize_nocopy_api_constant bit be set but no contiguous copy database exist']
['If the sqlite3_result_pointer_APIParam_4 parameter is not NULL, then it is a pointer to a destructor for the sqlite3_result_pointer_APIParam_2 parameter.', 'if sqlite3_result_pointer_apiparam_4 parameter be null , then be pointer destructor sqlite3_result_pointer_apiparam_2 parameter']
['The default behavior is for mutexes to be enabled.', 'default behavior be mutexe be enable']
['sqlite3_column_decltype16_APIParam_0 is always UTF-8 encoded.', 'sqlite3_column_decltype16_apiparam_0 be always utf_8 encode']
['If the argument to sqlite3_mutex_enter_APIName, sqlite3_mutex_try_APIName, or sqlite3_mutex_leave_APIName is a NULL pointer, then all three routines behave as no-ops.', 'if argument sqlite3_mutex_enter_apiname , sqlite3_mutex_try_apiname , or sqlite3_mutex_leave_apiname be null pointer , then three routine behave as no_op']
['Applications should finalize all prepared statements, close all BLOB handles, and finish all sqlite3_backup objects associated with the sqlite3 object prior to attempting to close the object.', 'application should finalize prepared statement , close blob handle , finish sqlite3_backup object associate sqlite3 object prior attempt close object']
['SQLITE_RANGE_API_constant is returned by sqlite3_bind_text_APIName if the parameter index is out of range.', 'sqlite_range_api_constant be return by sqlite3_bind_text_apiname if paramet index be out range']
['The memory returned by sqlite3_malloc_APIName, sqlite3_realloc_APIName, sqlite3_malloc64_APIName, and sqlite3_realloc64_APIName is always aligned to at least an 8 byte boundary, or to a 4 byte boundary if the SQLITE_4_BYTE_ALIGNED_MALLOC compile-time option is used.', 'memory return by sqlite3_malloc_apiname , sqlite3_realloc_apiname , sqlite3_malloc64_apiname , sqlite3_realloc64_apiname be always align least # byte boundary , or # byte boundary if sqlite_4_byte_aligned_malloc compile_time option be use']
['sqlite3_vtab_config_APIName may be called by either the xConnect or xCreate method of a virtual table implementation to configure various facets of the virtual table interface.', 'sqlite3_vtab_config_apiname be call by either xconnect or xcreate method virtual table implementation configure various facet virtual table interface']
['If the 4th parameter to the sqlite3_result_text* interfaces or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that function as the destructor on the text or BLOB result when it has finished using that result.', 'if 4th parameter sqlite3_result_text interface or sqlite3_result_blob be non_null pointer , then sqlite call function as destructor text or blob result when have finish use result']
['This routine enables or disables the sharing of the database cache and schema data structures between connections to the same database.', 'routine enable or disable share database cache schema datum structure between connection database']
['WinRT and UWP.', 'winrt uwp']
['The sqlite3_finalize_APIName routine can be called at any point during the life cycle of prepared statement S: before statement sqlite3_finalize_APIParam_1 is ever evaluated, after one or more calls to sqlite3_reset_APIName, or after any call to sqlite3_step_APIName regardless of whether or not the statement has completed execution.', 'sqlite3_finalize_apiname routine can be call point during life cycle prepare statement s : before statement sqlite3_finalize_apiparam_1 be ever evaluate , after one or more call sqlite3_reset_apiname , or after call sqlite3_step_apiname regardless whether or statement have complete execution']
['Specifying an unknown parameter in the query component of a URI is not an error.', 'specify unknown paramet query component uri be error']
['The sqlite3_result_subtype_APIName function causes the subtype of the result from the application-defined SQL function with sqlite3_context sqlite3_result_subtype_APIParam_1 to be the value sqlite3_result_subtype_APIParam_2.  Only the lower 8 bits of the subtype sqlite3_result_subtype_APIParam_2 are preserved in current versions of SQLite; higher order bits are discarded.', 'sqlite3_result_subtype_apiname function cause subtype result application_defin sql function sqlite3_context sqlite3_result_subtype_apiparam_1 be value sqlite3_result_subtype_apiparam_2 . only lower # bit subtype sqlite3_result_subtype_apiparam_2 be preserve current version sqlite ; high order bit be discard']
['If you prepare all of your SQL statements using sqlite3_prepare_v3_APIName or sqlite3_prepare_v2_APIName or sqlite3_prepare16_v2_APIName or sqlite3_prepare16_v3_APIName instead of the legacy sqlite3_prepare_APIName and sqlite3_prepare16_APIName interfaces, then the more specific error codes are returned directly by sqlite3_step_APIName.', 'if -PRON- prepare -PRON- sql statement use sqlite3_prepare_v3_apiname or sqlite3_prepare_v2_apiname or sqlite3_prepare16_v2_apiname or sqlite3_prepare16_v3_apiname instead legacy sqlite3_prepare_apiname sqlite3_prepare16_apiname interface , then more specific error code be return directly by sqlite3_step_apiname']
['If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 indicated an error, then sqlite3_reset_APIName returns an appropriate error code.', 'if most recent call sqlite3_step_apiname prepared statement sqlite3_reset_apiparam_1 indicate error , then sqlite3_reset_apiname return appropriate error code']
['The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages of two valid snapshot handles.', 'sqlite3_snapshot_cmp interface be use compare age two valid snapshot handle']
['Future versions of SQLite might understand additional query parameters.', 'future version sqlite may understand additional query parameter']
['Applications that need to process SQL from untrusted sources might also consider lowering resource limits using sqlite3_limit_APIName and limiting database size using the max_page_count PRAGMA in addition to using an authorizer.', 'application need process sql untrusted source may consider lower resource limit use sqlite3_limit_apiname limit database size use max_page_count pragma addition use authorizer']
[' So as not to open security holes in older applications that are unprepared to deal with extension loading, and as a means of disabling extension loading while evaluating user-entered SQL, the following API is provided to turn the sqlite3_load_extension_APIName mechanism on and off.Extension loading is off by default.', 'so as open security hole old application be unprepared deal extension loading , as mean disable extension loading while evaluate user_entered sql , follow api be provide turn sqlite3_load_extension_apiname mechanism loading be off by default']
['The sqlite3_result_error_toobig_APIName interface causes SQLite to throw an error indicating that a string or BLOB is too long to represent.', 'sqlite3_result_error_toobig_apiname interface cause sqlite throw error indicating string or blob be too long represent']
['You must call sqlite3_reset_APIName or sqlite3_finalize_APIName in order to find one of the specific error codes that better describes the error.', 'PRON- must call sqlite3_reset_apiname or sqlite3_finalize_apiname order find one specific error code well describe error']
[' If a WAL file remains on disk after all database connections close (either through the use of the SQLITE_FCNTL_PERSIST_WAL file control or because the last process to have the database opened exited without calling sqlite3_close_APIName) and a new connection is subsequently opened on that database and WAL file, the sqlite3_snapshot_open_APIName interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.sqlite3_snapshot_recover_APIName attempts to scan the WAL file associated with database sqlite3_snapshot_recover_APIParam_2 of database handle sqlite3_snapshot_recover_APIParam_1 and make all valid snapshots available to sqlite3_snapshot_open_APIName.', 'if wal file remain disk after database connection close connection be subsequently open database wal file , sqlite3_snapshot_open_apiname interface only be able open last transaction add wal file even though wal file contain other valid attempt scan wal file associate database sqlite3_snapshot_recover_apiparam_2 database handle sqlite3_snapshot_recover_apiparam_1 make valid snapshot available sqlite3_snapshot_open_apiname']
['The SQLITE_OMIT_TRACE compile-time option causes sqlite3_expanded_sql_APIName to always return NULL.', 'sqlite_omit_trace compile_time option cause sqlite3_expanded_sql_apiname always return null']
['sqlite3_wal_hooknot exist in API_info', 'sqlite3_wal_hooknot exist api_info']
['Unregister a VFS with the sqlite3_vfs_unregister_APIName interface.', 'unregister vfs sqlite3_vfs_unregister_apiname interface']
['The second argument is the index of the SQL parameter to be set.', 'second argument be index sql parameter be set']
['The index for "?NNN" parameters is the value of NNN.', 'index nnn parameter be value nnn']
['Do not pass the pointers returned from sqlite3_column_blob_APIName, sqlite3_column_text_APIName, etc.', 'pass pointer return sqlite3_column_blob_apiname , sqlite3_column_text_apiname , etc']
['SQLite implements this interface by calling the xSleep_APIName method of the default sqlite3_vfs object.', 'sqlite implement interface by call xsleep_apiname method default sqlite3_vfs object']
['The callback implementation must not do anything that will modify the database connection that invoked the callback.', 'callback implementation must anything modify database connection invoke callback']
['If certain kinds of errors occur on a statement within a multi-statement transaction (errors including SQLITE_FULL_API_constant, SQLITE_IOERR_API_constant, SQLITE_NOMEM_API_constant, SQLITE_BUSY_API_constant, and SQLITE_INTERRUPT_API_constant) then the transaction might be rolled back automatically.', 'if certain kind error occur statement within multi_statement transaction then transaction may be roll back automatically']
['sqlite3_set_auxdatanot exist in API_info', 'sqlite3_set_auxdatanot exist api_info']
['The query component of a URI may contain parameters that are interpreted either by SQLite itself, or by a custom VFS implementation.', 'query component uri contain parameter be interpret either by sqlite , or by custom vfs implementation']
['The sqlite3_snapshot_get_APIName interface attempts to make a new sqlite3_snapshot object that records the current state of schema sqlite3_snapshot_get_APIParam_2 in database connection D.  On success, the sqlite3_snapshot_get_APIName interface writes a pointer to the newly created sqlite3_snapshot object into *P and returns SQLITE_OK_API_constant.', 'sqlite3_snapshot_get_apiname interface attempt make sqlite3_snapshot object record current state schema sqlite3_snapshot_get_apiparam_2 database connection d. success , sqlite3_snapshot_get_apiname interface write pointer newly create sqlite3_snapshot object into p return sqlite_ok_api_constant']
['But this might change in future releases of SQLite.', 'but may change future release sqlite']
['In other words, the behavior exhibited when SQLite is compiled with SQLITE_OMIT_AUTOINIT might become the default behavior in some future release of SQLite.', 'other word , behavior exhibit when sqlite be compile sqlite_omit_autoinit may become default behavior future release sqlite']
['The sqlite3_libversion_APIName function is provided for use in DLLs since DLL users usually do not have direct access to string constants within the DLL.', 'sqlite3_libversion_apiname function be provide dll since dll user usually have direct access string constant within dll']
['The PRAGMA wal_checkpoint command can be used to invoke this interface from SQL.', 'pragma wal_checkpoint command can be use invoke interface sql']
['SQLite will only request a recursive mutex in cases where it really needs one.', 'sqlite only request recursive mutex case where really need one']
['The sqlite3_commit_hook_APIName and sqlite3_rollback_hook_APIName functions return the P argument from the previous call of the same function on the same database connection D, or NULL for the first call for each function on D.', 'sqlite3_commit_hook_apiname sqlite3_rollback_hook_apiname function return p argument previous call function database connection d , or null first call each function d']
['Disable the authorizer by installing a NULL callback.', 'disable authorizer by instal null callback']
['The first process cannot proceed because it is blocked by the second and the second process cannot proceed because it is blocked by the first.', 'first process can proceed because be block by second second process can proceed because be block by first']
['The sqlite3_initialize_APIName routine returns SQLITE_OK_API_constant on success.', 'sqlite3_initialize_apiname routine return sqlite_ok_api_constant success']
['The sqlite3_last_insert_rowid_APIName interface usually returns the rowid of the most recent successful INSERT into a rowid table or virtual table on database connection D. Inserts into WITHOUT ROWID tables are not recorded.', 'sqlite3_last_insert_rowid_apiname interface usually return rowid most recent successful insert into rowid table or virtual table database connection d. insert into without rowid table be record']
['When a call to sqlite3_step_APIName returns SQLITE_LOCKED_API_constant, it is almost always appropriate to call sqlite3_unlock_notify_APIName.', 'when call sqlite3_step_apiname return sqlite_locked_api_constant , be almost always appropriate call sqlite3_unlock_notify_apiname']
['These APIs are only available if the library was compiled with the SQLITE_ENABLE_COLUMN_METADATA C-preprocessor symbol.', 'apis be only available if library be compile sqlite_enable_column_metadata c_preprocessor symbol']
['The implementation of the function can gain access to this pointer using sqlite3_user_data_APIName.', 'implementation function can gain access pointer use sqlite3_user_data_apiname']
['See SQLite Shared-Cache Mode for a description of shared-cache locking.', 'see sqlite shared_cache mode description shared_cache locking']
['If URI sqlite3_open_APIParam_1 interpretation is enabled, and the sqlite3_open_APIParam_1 argument begins with "file:", then the sqlite3_open_APIParam_1 is interpreted as a URI.', 'if uri sqlite3_open_apiparam_1 interpretation be enable , sqlite3_open_apiparam_1 argument begin file : , then sqlite3_open_apiparam_1 be interpret as uri']
['To detect changes against a database file from other database connections use the PRAGMA data_version command or the SQLITE_FCNTL_DATA_VERSION_API_constant file control.', 'detect change against database file other database connection pragma data_version command or sqlite_fcntl_data_version_api_constant file control']
['Unless it returns SQLITE_MISUSE_API_constant, sqlite3_blob_open_APIName sets the database connection error code and message accessible via sqlite3_errcode_APIName and sqlite3_errmsg_APIName and related functions.', 'unless return sqlite_misuse_api_constant , sqlite3_blob_open_apiname set database connection error code message accessible via sqlite3_errcode_apiname sqlite3_errmsg_apiname relate function']
['A collating function must always return the same answer given the same inputs.', 'collate function must always return answer give input']
['Names are case sensitive.', 'name be case sensitive']
['If sqlite3_bind_value_APIParam_5 has the value SQLITE_TRANSIENT_API_constant, then SQLite makes its own private copy of the data immediately, before the sqlite3_bind_*_APIName routine returns.', 'if sqlite3_bind_value_apiparam_5 have value sqlite_transient_api_constant , then sqlite make private copy datum immediately , before sqlite3_bind _ apiname routine return']
[' The sqlite3_mutex_held_APIName and sqlite3_mutex_notheld_APIName routines are intended for use inside assert_APIName statements.', 'sqlite3_mutex_held_apiname sqlite3_mutex_notheld_apiname routine be intend inside assert_apiname statement']
['The second parameter is either the name of the database (i.e.', 'second parameter be either name database i']
['The SQLite query planner is able to perform additional optimizations on deterministic functions, so use of the SQLITE_DETERMINISTIC_API_constant flag is recommended where possible.', 'sqlite query planner be able perform additional optimization deterministic function , so sqlite_deterministic_api_constant flag be recommend where possible']
['URI sqlite3_open_APIParam_1 interpretation is enabled if the SQLITE_OPEN_URI_API_constant flag is set in sqlite3_open_APIParam_3 to sqlite3_open_v2_APIName, or if it has been enabled globally using the SQLITE_CONFIG_URI_API_constant option with the sqlite3_config_APIName method or by the SQLITE_USE_URI compile-time option.', 'uri sqlite3_open_apiparam_1 interpretation be enable if sqlite_open_uri_api_constant flag be set sqlite3_open_apiparam_3 sqlite3_open_v2_apiname , or if have enable globally use sqlite_config_uri_api_constant option sqlite3_config_apiname method or by sqlite_use_uri compile_time option']
['See also: sqlite3_bind_parameter_count_APIName, sqlite3_bind_parameter_name_APIName, and sqlite3_bind_parameter_index_APIName.', 'see : sqlite3_bind_parameter_count_apiname , sqlite3_bind_parameter_name_apiname , sqlite3_bind_parameter_index_apiname']
['The sqlite3_wal_checkpoint_v2_APIName interface runs a checkpoint operation on database sqlite3_wal_checkpoint_v2_APIParam_2 of database connection sqlite3_wal_checkpoint_v2_APIParam_1 in mode sqlite3_wal_checkpoint_v2_APIParam_3.  Status information is written back into integers pointed to by sqlite3_wal_checkpoint_v2_APIParam_4 and C. The sqlite3_wal_checkpoint_v2_APIParam_3 parameter must be a valid checkpoint mode:', 'sqlite3_wal_checkpoint_v2_apiname interface run checkpoint operation database sqlite3_wal_checkpoint_v2_apiparam_2 database connection sqlite3_wal_checkpoint_v2_apiparam_1 mode sqlite3_wal_checkpoint_v2_apiparam_3 . status information be write back into integer point by sqlite3_wal_checkpoint_v2_apiparam_4 c. sqlite3_wal_checkpoint_v2_apiparam_3 parameter must be valid checkpoint mode']
['Built-in functions may be overloaded by new application-defined functions.', 'built_in function be overload by application_defined function']
[' The sqlite3_stricmp_APIName and sqlite3_strnicmp_APIName APIs allow applications and extensions to compare the contents of two buffers containing UTF-8 strings in a case-independent fashion, using the same definition of "case independence" that SQLite uses internally when comparing identifiers.', 'sqlite3_stricmp_apiname sqlite3_strnicmp_apiname api allow application extension compare content two buffer contain utf_8 string case_independent fashion , use definition case independence sqlite us internally when compare identifier']
[' These interfaces are only available if SQLite is compiled using the SQLITE_ENABLE_PREUPDATE_HOOK compile-time option.The sqlite3_preupdate_hook_APIName interface registers a callback function that is invoked prior to each INSERT, UPDATE, and DELETE operation on a database table.', 'interface be only available if sqlite be compile use sqlite_enable_preupdate_hook compile_time sqlite3_preupdate_hook_apiname interface register callback function be invoke prior each insert , update , delete operation database table']
['The UTF-16 interfaces work by converting the input text into UTF-8, then invoking the corresponding UTF-8 interface.', 'utf_16 interface work by convert input text into utf_8 , then invoke correspond utf_8 interface']
['These routines are used to register a new virtual table module name.', 'routine be use register virtual table module name']
['The parameter name must be given in UTF-8 even if the original statement was prepared from UTF-16 text using sqlite3_prepare16_v2_APIName or sqlite3_prepare16_v3_APIName.', 'paramet name must be give utf_8 even if original statement be prepare utf_16 text use sqlite3_prepare16_v2_apiname or sqlite3_prepare16_v3_apiname']
['The sqlite3_result_int_APIName interface sets the return value of the application-defined function to be the 32-bit signed integer value given in the 2nd argument.', 'sqlite3_result_int_apiname interface set return value application_defined function be 32_bit sign integer value give 2nd argument']
['If the column-name parameter to sqlite3_table_column_metadata_APIName is a NULL pointer, then this routine simply checks for the existence of the table and returns SQLITE_OK_API_constant if the table exists and SQLITE_ERROR_API_constant if it does not.', 'if column_name parameter sqlite3_table_column_metadata_apiname be null pointer , then routine simply check existence table return sqlite_ok_api_constant if table exist sqlite_error_api_constant if do']
['Within an xUpdate method, any value for which sqlite3_value_nochange_APIName is true will in all other respects appear to be a NULL value.', 'within xupdate method , value which sqlite3_value_nochange_apiname be true other respect appear be null value']
['If two or more such blocked connections have specified the same callback function, then instead of invoking the callback function multiple times, it is invoked once with the set of void* context pointers specified by the blocked connections bundled together into an array.', 'if two or more such block connection have specify callback function , then instead invoke callback function multiple time , be invoke once set void context pointer specify by block connection bundle together into array']
['If the most recent evaluation of the statement encountered no errors or if the statement is never been evaluated, then sqlite3_finalize_APIName returns SQLITE_OK_API_constant.', 'if most recent evaluation statement encounter no error or if statement be never evaluate , then sqlite3_finalize_apiname return sqlite_ok_api_constant']
['These routines understand most of the common formatting options from the standard library printf_APIName plus some additional non-standard formats (%q, %Q, %w, and %z).', 'routine understand most common format option standard library printf_apiname plus additional non_standard format q , q , w , z']
['Otherwise, this API returns a negative value if P1 refers to an older snapshot than P2, zero if the two handles refer to the same database snapshot, and a positive value if P1 is a newer snapshot than P2.', 'otherwise , api return negative value if p1 refer old snapshot than p2 , zero if two handle refer database snapshot , positive value if p1 be new snapshot than p2']
['However, just because this routine returns a positive number does not mean that one or more rows of data will be returned.', 'however , just because routine return positive number do mean one or more row datum be return']
['If sqlite3_file_control_APIParam_2 (zDbName) does not match the name of any open database file, then SQLITE_ERROR_API_constant is returned by sqlite3_file_control_APIName.', 'if sqlite3_file_control_apiparam_2 do match name open database file , then sqlite_error_api_constant be return by sqlite3_file_control_apiname']
['See also: sqlite3_create_module_APIName', 'see : sqlite3_create_module_apiname']
['The sqlite3_db_readonly_APIName interface returns 1 if the database sqlite3_db_readonly_APIParam_2 of connection sqlite3_db_readonly_APIParam_1 is read-only, 0 if it is read/write, or -1 if sqlite3_db_readonly_APIParam_2 is not the name of a database on connection sqlite3_db_readonly_APIParam_1.', 'sqlite3_db_readonly_apiname interface return # if database sqlite3_db_readonly_apiparam_2 connection sqlite3_db_readonly_apiparam_1 be read_only , # if be , or # if sqlite3_db_readonly_apiparam_2 be name database connection sqlite3_db_readonly_apiparam_1']
['See also: sqlite3_release_memory_APIName', 'see : sqlite3_release_memory_apiname']
['For example, if the datatype is initially SQLITE_INTEGER_API_constant and sqlite3_value_text_APIName is called to extract a text value for that integer, then subsequent calls to sqlite3_value_type_APIName might return SQLITE_TEXT_API_constant.', 'example , if datatype be initially sqlite_integer_api_constant sqlite3_value_text_apiname be call extract text value integer , then subsequent call sqlite3_value_type_apiname may return sqlite_text_api_constant']
['sqlite3_vtab_on_conflict_APIName may only be called from within a call to the xUpdate method of a virtual table implementation for an INSERT or UPDATE operation.', 'sqlite3_vtab_on_conflict_apiname only be call within call xupdate method virtual table implementation insert or update operation']
['The sqlite3_result_error_APIName and sqlite3_result_error16_APIName functions cause the implemented SQL function to throw an exception.', 'sqlite3_result_error_apiname sqlite3_result_error16_apiname function cause implement sql function throw exception']
['For those parameters nothing is written into *pHighwater and the sqlite3_status64_APIParam_4 is ignored.', 'parameter nothing be write into phighwater sqlite3_status64_apiparam_4 be ignore']
['These numbers are obtained separately.', 'number be obtain separately']
['SQLite can be compiled with or without mutexes.', 'sqlite can be compile or without mutexe']
['The sqlite3_uri_boolean_APIName routine assumes that sqlite3_uri_boolean_APIParam_2 is a boolean parameter and returns true (1) or false (0) according to the value of sqlite3_uri_boolean_APIParam_2.  The sqlite3_uri_boolean_APIName routine returns true (1) if the value of query parameter sqlite3_uri_boolean_APIParam_2 is one of "yes", "true", or "on" in any case or if the value begins with a non-zero number.', 'sqlite3_uri_boolean_apiname routine assume sqlite3_uri_boolean_apiparam_2 be boolean paramet return true or false accord value sqlite3_uri_boolean_apiparam_2 . sqlite3_uri_boolean_apiname routine return true if value query paramet sqlite3_uri_boolean_apiparam_2 be one yes , true , or case or if value begin non_zero number']
['The sqlite3_db_release_memory_APIName interface attempts to free as much heap memory as possible from database connection D. Unlike the sqlite3_release_memory_APIName interface, this interface is in effect even when the SQLITE_ENABLE_MEMORY_MANAGEMENT compile-time option is omitted.', 'sqlite3_db_release_memory_apiname interface attempt free as much heap memory as possible database connection d. unlike sqlite3_release_memory_apiname interface , interface be effect even when sqlite_enable_memory_management compile_time option be omit']
['If the function is registered using the sqlite3_collation_needed_APIName API, then it is passed the names of undefined collation sequences as strings encoded in UTF-8.', 'if function be register use sqlite3_collation_needed_apiname api , then be pass name undefined collation sequence as string encode utf_8']
['This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close_APIName on *ppBlob after sqlite3_blob_open_APIName it returns.', 'mean , provide api be misuse , be always safe call sqlite3_blob_close_apiname ppblob after sqlite3_blob_open_apiname return']
['The first parameter passed to the callback function when it is invoked is a copy of the third parameter passed to sqlite3_wal_hook_APIName when registering the callback.', 'first parameter pass callback function when be invoke be copy third parameter pass sqlite3_wal_hook_apiname when register callback']
['Applications can uses these routines to determine whether or not a specific identifier needs to be escaped (for example, by enclosing in double-quotes) so as not to confuse the parser.', 'application can use routine determine whether or specific identifier need be escape so as confuse parser']
['Each entry in most SQLite tables (except for WITHOUT ROWID tables) has a unique 64-bit signed integer key called the "rowid".', 'each entry most sqlite table have unique 64_bit sign integer key call rowid']
[' These functions may be used by (non-aggregate) SQL functions to associate metadata with argument values.', 'function be use by sql function associate metadata argument value']
['It is safe to call this routine from a thread different from the thread that is currently running the database operation.', 'be safe call routine thread different thread be currently run database operation']
['Function sqlite3_create_window_function_APIName is similar, but allows the user to supply the extra callback functions needed by aggregate window functions.', 'function sqlite3_create_window_function_apiname be similar , but allow user supply extra callback function need by aggregate window function']
['An INSERT that fails due to a constraint violation is not a successful INSERT and does not change the value returned by this routine.', 'insert fail due constraint violation be successful insert do change value return by routine']
['If the database connection is associated with unfinalized prepared statements or unfinished sqlite3_backup objects then sqlite3_close_APIName will leave the database connection open and return SQLITE_BUSY_API_constant.', 'if database connection be associate unfinalized prepared statement or unfinished sqlite3_backup object then sqlite3_close_apiname leave database connection open return sqlite_busy_api_constant']
['The first host parameter has an index of 1, not 0.', 'first host parameter have index 1 , #']
['If the Nth column returned by the statement is an expression or subquery and is not a column value, then all of these functions return NULL.', 'if nth column return by statement be expression or subquery be column value , then function return null']
['The sqlite3_soft_heap_limit64_APIName interface sets and/or queries the soft limit on the amount of heap memory that may be allocated by SQLite.', 'sqlite3_soft_heap_limit64_apiname interface set query soft limit amount heap memory be allocate by sqlite']
['These routines return the name assigned to a particular column in the result set of a SELECT statement.', 'routine return name assign particular column result set select statement']
['The NNN value must be between 1 and the sqlite3_limit_APIName parameter SQLITE_LIMIT_VARIABLE_NUMBER_API_constant (default value: 999).', 'nnn value must be between # sqlite3_limit_apiname paramet sqlite_limit_variable_number_api_constant default value : #']
['The INSERT continues to completion after deleting rows that caused the constraint problem so INSERT OR REPLACE will always change the return value of this interface.', 'insert continue completion after deleting row cause constraint problem so insert or replace always change return value interface']
['If the most recent call to sqlite3_step_APIName for the prepared statement sqlite3_reset_APIParam_1 returned SQLITE_ROW_API_constant or SQLITE_DONE_API_constant, or if sqlite3_step_APIName has never before been called on sqlite3_reset_APIParam_1, then sqlite3_reset_APIName returns SQLITE_OK_API_constant.', 'if most recent call sqlite3_step_apiname prepared statement sqlite3_reset_apiparam_1 return sqlite_row_api_constant or sqlite_done_api_constant , or if sqlite3_step_apiname have never before call sqlite3_reset_apiparam_1 , then sqlite3_reset_apiname return sqlite_ok_api_constant']
['The 4th argument to sqlite3_exec_APIName is relayed through to the 1st argument of each callback invocation.', '4th argument sqlite3_exec_apiname be relay through 1st argument each callback invocation']
['The sqlite3_db_config_APIName interface is used to make configuration changes to a database connection.', 'sqlite3_db_config_apiname interface be use make configuration change database connection']
['Protected sqlite3_value objects are used to pass parameter information into implementation of application-defined SQL functions and virtual tables.', 'protect sqlite3_value object be use pass paramet information into implementation application_defin sql function virtual table']
['Parameter sqlite3_blob_open_APIParam_2 is not the filename that contains the database, but rather the symbolic name of the database.', 'paramet sqlite3_blob_open_apiparam_2 be filename contain database , but rather symbolic name database']
['If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes_APIName or sqlite3_column_bytes16_APIName interfaces can be used to determine the size of that BLOB or string.', 'if result be blob or text string , then sqlite3_column_bytes_apiname or sqlite3_column_bytes16_apiname interface can be use determine size blob or string']
['If the result is NULL, then sqlite3_column_bytes16_APIName returns zero.', 'if result be null , then sqlite3_column_bytes16_apiname return zero']
['Applications must not used the pointer returned sqlite3_str_value_APIName after any subsequent method call on the same object.', 'application must use pointer return sqlite3_str_value_apiname after subsequent method call object']
['The sqlite3_set_last_insert_rowid(D, R) method allows the application to set the value returned by calling sqlite3_last_insert_rowid_APIName to R without inserting a row into the database.', 'sqlite3_set_last_insert_rowid method allow application set value return by call sqlite3_last_insert_rowid_apiname r without insert row into database']
['The sqlite3_uri_int64_APIName routine converts the value of sqlite3_uri_int64_APIParam_2 into a 64-bit signed integer and returns that integer, or sqlite3_uri_int64_APIParam_3 if sqlite3_uri_int64_APIParam_2 does not exist.', 'sqlite3_uri_int64_apiname routine convert value sqlite3_uri_int64_apiparam_2 into 64_bit sign integer return integer , or sqlite3_uri_int64_apiparam_3 if sqlite3_uri_int64_apiparam_2 do exist']
['Note the last bullet in particular.', 'note last bullet particular']
['If the new row is not present in the table, or if it does not contain a blob or text value, or if another error occurs, an SQLite error code is returned by sqlite3_blob_reopen_APIName and the blob handle is considered aborted.', 'if row be present table , or if do contain blob or text value , or if another error occur , sqlite error code be return by sqlite3_blob_reopen_apiname blob handle be consider abort']
['The underlying xFileControl method might also return SQLITE_ERROR_API_constant.', 'underlie xfilecontrol method may return sqlite_error_api_constant']
['See also: sqlite3_status_APIName and sqlite3_db_status_APIName.', 'see : sqlite3_status_apiname sqlite3_db_status_apiname']
['More information may be found by calling sqlite3_errmsg_APIName.', 'more information be find by call sqlite3_errmsg_apiname']
['The value returned is one of SQLITE_ROLLBACK_API_constant, SQLITE_IGNORE_API_constant, SQLITE_FAIL_API_constant, SQLITE_ABORT_API_constant, or SQLITE_REPLACE_API_constant, according to the ON CONFLICT mode of the SQL statement that triggered the call to the xUpdate method of the virtual table.', 'value return be one sqlite_rollback_api_constant , sqlite_ignore_api_constant , sqlite_fail_api_constant , sqlite_abort_api_constant , or sqlite_replace_api_constant , accord conflict mode sql statement trigger call xupdate method virtual table']
['It is often possible to use a keyword as an identifier as long as such use does not result in a parsing ambiguity.', 'be often possible keyword as identifier as long as such do result parse ambiguity']
['These routines may only be called when the most recent call to sqlite3_step_APIName has returned SQLITE_ROW_API_constant and neither sqlite3_reset_APIName nor sqlite3_finalize_APIName have been called subsequently.', 'routine only be call when most recent call sqlite3_step_apiname have return sqlite_row_api_constant neither sqlite3_reset_apiname nor sqlite3_finalize_apiname have call subsequently']
['New SQL statements that are started after the running statement count reaches zero are not effected by the sqlite3_interrupt_APIName.', 'sql statement be start after run statement count reach zero be effect by sqlite3_interrupt_apiname']
['After each call to sqlite3_set_auxdata_APIName where X is not NULL, SQLite will invoke the destructor function X with parameter P exactly once, when the metadata is discarded.', 'after each call sqlite3_set_auxdata_apiname where x be null , sqlite invoke destructor function x paramet p exactly once , when metadata be discard']
['The sqlite3_update_hook_APIName function returns the P argument from the previous call on the same database connection D, or NULL for the first call on D.', 'sqlite3_update_hook_apiname function return p argument previous call database connection d , or null first call d']
['All other calls are harmless no-ops.', 'other call be harmless no_op']
['The _database_ routines return the database name, the _table_ routines return the table name, and the origin_ routines return the column name.', 'database routine return database name , table routine return table name , origin routine return column name']
['See also: sqlite3_stmt_scanstatus_reset_APIName', 'see : sqlite3_stmt_scanstatus_reset_apiname']
['Whitespace and comments that follow the final semicolon are ignored.', 'whitespace comment follow final semicolon be ignore']
['If parameters of the ?NNN form are used, there may be gaps in the list.', 'if parameter nnn form be use , be gap list']
['If no prepared statement satisfies the conditions of this routine, it returns NULL.', 'if no prepared statement satisfie condition routine , return null']
[' If the sqlite3_vtab_nochange_APIName routine is called within the xColumn method of a virtual table, then it returns true if and only if the column is being fetched as part of an UPDATE operation during which the column value will not change.', 'if sqlite3_vtab_nochange_apiname routine be call within xcolumn method virtual table , then return true if only if column be fetch as part update operation during which column value change']
['In practice, metadata is preserved between function calls for function parameters that are compile-time constants, including literal values and parameters and expressions composed from the same.', 'practice , metadata be preserve between function call function parameter be compile_time constant , include literal value parameter expression compose']
['sqlite3_create_function16 not exist in API_info', 'sqlite3_create_function16 exist api_info']
['When that happens, the second error will be reported since these interfaces always report the most recent result.', 'when happen , second error be report since interface always report most recent result']
['In the "vX" interfaces, the prepared statement that is returned by sqlite3_prepare_APIName (the sqlite3_stmt object) contains a copy of the original SQL text.', 'vx interface , prepared statement be return by sqlite3_prepare_apiname contain copy original sql text']
['Use the sqlite3_blob_bytes_APIName interface to determine the size of the opened blob.', 'sqlite3_blob_bytes_apiname interface determine size open blob']
['Or it could be the case that the same database connection is being used by two or more threads at the same moment in time.', 'or could be case database connection be use by two or more thread moment time']
['Bindings are not cleared by the sqlite3_reset_APIName routine.', 'binding be clear by sqlite3_reset_apiname routine']
['The use of this interface is only necessary if the default setting is found to be suboptimal for a particular application.', 'interface be only necessary if default setting be find be suboptimal particular application']
['The first parameter is the database connection whose limit is to be set or queried.', 'first parameter be database connection whose limit be be set or query']
['If the result is a UTF-16 string, then sqlite3_column_bytes_APIName converts the string to UTF-8 and then returns the number of bytes.', 'if result be utf_16 string , then sqlite3_column_bytes_apiname convert stre utf_8 then return number byte']
['The sqlite3_snapshot_open_APIName interface is only available when the SQLITE_ENABLE_SNAPSHOT compile-time option is used.', 'sqlite3_snapshot_open_apiname interface be only available when sqlite_enable_snapshot compile_time option be use']
['The remaining entries all point to query results.', 'remain entry point query result']
['If an application uses more than one database connection then application-defined SQL functions must be added to each database connection separately.', 'if application use more than one database connection then application_defin sql function must be add each database connection separately']
['A call to either function replaces the existing collation-needed callback.', 'call either function replace exist collation_needed callback']
['sqlite3_rollback_hooknot exist in API_info', 'sqlite3_rollback_hooknot exist api_info']
['The sqlite3_preupdate_depth_APIName interface returns 0 if the preupdate callback was invoked as a result of a direct insert, update, or delete operation; or 1 for inserts, updates, or deletes invoked by top-level triggers; or 2 for changes resulting from triggers called by top-level triggers; and so forth.', 'sqlite3_preupdate_depth_apiname interface return # if preupdate callback be invoke as result direct insert , update , or delete operation ; or # insert , update , or delete invoke by top_level trigger ; or # change result trigger call by top_level trigger ; so forth']
['If there are, SQLITE_LOCKED_API_constant is returned by sqlite3_unlock_notify_APIName.', 'if be , sqlite_locked_api_constant be return by sqlite3_unlock_notify_apiname']
['Hence sqlite3_set_auxdata_APIName should be called near the end of the function implementation and the function implementation should not make any use of P after sqlite3_set_auxdata_APIName has been called.', 'hence sqlite3_set_auxdata_apiname should be call near end function implementation function implementation should make p after sqlite3_set_auxdata_apiname have call']
['The sqlite3_mutex_enter_APIName and sqlite3_mutex_try_APIName routines attempt to enter a mutex.', 'sqlite3_mutex_enter_apiname sqlite3_mutex_try_apiname routine attempt enter mutex']
['The sqlite3_get_autocommit_APIName interface returns non-zero or zero if the given database connection is or is not in autocommit mode, respectively.', 'sqlite3_get_autocommit_apiname interface return non_zero or zero if give database connection be or be autocommit mode , respectively']
['The sqlite3_mutex_free_APIName routine deallocates a previously allocated dynamic mutex.', 'sqlite3_mutex_free_apiname routine deallocate previously allocate dynamic mutex']
['The first time the sqlite3_aggregate_context_APIName routine is called for a particular aggregate function, SQLite allocates sqlite3_aggregate_context_APIParam_2 of memory, zeroes out that memory, and returns a pointer to the new memory.', 'first time sqlite3_aggregate_context_apiname routine be call particular aggregate function , sqlite allocate sqlite3_aggregate_context_apiparam_2 memory , zero out memory , return pointer memory']
['Calling sqlite3_free_APIName with a pointer previously returned by sqlite3_malloc_APIName or sqlite3_realloc_APIName releases that memory so that it might be reused.', 'call sqlite3_free_apiname pointer previously return by sqlite3_malloc_apiname or sqlite3_realloc_apiname release memory so may be reuse']

