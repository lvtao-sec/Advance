label,old-label,prop,wrong,,cond,sent,paraph
,,RAND_pseudo_bytes_APIName was deprecated in OpenSSL 1.1.0,,,null,,
,,SSL_get_certificate_APIName and SSL_get_privatekey_APIName return internal pointers that must not be freed by the application program.,,,null,,
6,,"The following return values of SSL_connect_APIName can occur, 0, 1, <0",,,null,,
9,9,This alert is always fatal and should never be observed in communication between proper implementations,,,null,This alert is always fatal and should never be observed in communication between proper implementations.,An inappropriate message was received. This alert is always fatal and should never be observed in communication between proper implementations.
9,9,Only meaningful for client authentication,,,null,Only meaningful for client authentication,CERT_PKEY_CERT_TYPE: the certificate type is acceptable. Only meaningful for client authentication.
9,9,This is only meaningful for client authentication,,,null,This is only meaningful for client authentication,CERT_PKEY_ISSUER_NAME: the issuer name is acceptable. This is only meaningful for client authentication.
9,0,Both BIO_gets_APIName and BIO_puts_APIName are supported,,,null,Both BIO_gets_APIName and BIO_puts_APIName are supported.,Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain. Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain. Both BIO_gets_APIName and BIO_puts_APIName are supported.
8,9,"The supported protocols are SSLv2 , SSLv3 , TLSv1 , TLSv1 .1 and TLSv1 .2",,,null,"The supported protocols are SSLv2, SSLv3, TLSv1, TLSv1.1 and TLSv1.2","These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv2, SSLv3, TLSv1, TLSv1.1 and TLSv1.2. Most applications should use these method, and avoid the version specific methods described below."
8,8,This is needed as a workaround for some implementations,,,null,This is needed as a workaround for some implementations.,Adds a padding extension to ensure the ClientHello size is never between 256 and 511 bytes in length. This is needed as a workaround for some implementations.
8,8,"Only use this in explicit fallback retries , following the guidance in draft-ietf-tls-downgrade-scsv-00",,,null,"Only use this in explicit fallback retries, following the guidance in draft-ietf-tls-downgrade-scsv-00.","DO NOT ENABLE THIS if your application attempts a normal handshake. Only use this in explicit fallback retries, following the guidance in draft-ietf-tls-downgrade-scsv-00."
8,8,DO NOT ENABLE THIS,,,if your application attempts a normal handshake,DO NOT ENABLE THIS if your application attempts a normal handshake.,"DO NOT ENABLE THIS if your application attempts a normal handshake. Only use this in explicit fallback retries, following the guidance in draft-ietf-tls-downgrade-scsv-00."
8,8,Previous versions had to use,,,null,Previous versions had to use:,BIO_next_APIName was added to OpenSSL 0.9.6 to provide a 'clean' way to traverse a BIO chain or find multiple matches using BIO_find_type_APIName. Previous versions had to use:
8,8,Do not use the SSLv3 protocol,,0,null,Do not use the SSLv3 protocol.,Do not use the SSLv3 protocol. the SSLv3 protocol is recommended that applications should set this option.
8,8,Do not use the TLSv1 .1 protocol,,0,null,Do not use the TLSv1.1 protocol.,Do not use the TLSv1.1 protocol.
8,8,At first the library must be initialized,,,null,At first the library must be initialized; see SSL_library_init_APIName .,At first the library must be initialized; see SSL_library_init_APIName .
8,4,it will never succeed !,,,If the application waits for data to be available on the underlying transport before flushing the write buffer,"If the application then waits for data to be available on the underlying transport before flushing the write buffer , it will never succeed  !","To see why this is important consider a case where a request is sent using BIO_write_APIName and a response read with BIO_read_APIName, this can occur during an TLS/SSL handshake for example. BIO_write_APIName will succeed and place data in the write buffer. BIO_read_APIName will initially fail and BIO_should_read_APIName will be true. If the application then waits for data to be available on the underlying transport before flushing the write buffer ,it will never succeed because the request was never sent!"
8,-1,"for any cryptographic algorithm required by OpenSSL, it should be used",,,if there is an ENGINE that implements it and can be initialised,"Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used.","Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used. The following code illustrates how this can work;"
8,8,"the SSL/TLS engine must parse the record , consisting of header and body",,,When performing a read operation,"When performing a read operation, the SSL/TLS engine must parse the record, consisting of header and body.","When performing a read operation, the SSL/TLS engine must parse the record, consisting of header and body. When working in a blocking environment, SSL_rstate_string[_long]_APIName should always return ""RD""/""read done""."
8,8,the random number generator must be seeded or the operation will fail.,,,When signing with DSA private keys,When signing with DSA private keys the random number generator must be seeded or the operation will fail.,When signing with DSA private keys the random number generator must be seeded or the operation will fail. The random number generator does not need to be seeded for RSA signatures.
8,-1,this is no longer possible,,,null,this is no longer possible : the equivalent is EVP_PKEY_base_id .,Previous versions of this document suggested using EVP_PKEY_type(pkey->type) to determine the type of a key. Since EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_set1_engine_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_get0_hmac_APIParam_1 EVP_PKEY_get0_poly1305_APIParam_1 EVP_PKEY_get0_engine_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 EVP_PKEY_get0_RSA_APIParam_1 EVP_PKEY_get0_EC_KEY_APIParam_1 EVP_PKEY_set1_RSA_APIParam_1 EVP_PKEY_id_APIParam_1 EVP_PKEY_set1_DH_APIParam_1 EVP_PKEY_set1_EC_KEY_APIParam_1 EVP_PKEY_get0_siphash_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get0_DSA_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_set_alias_type_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 EVP_PKEY_base_id_APIParam_1 EVP_PKEY_set1_DSA_APIParam_1 EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_get0_DH_APIParam_1 is now opaque this is no longer possible: the equivalent is EVP_PKEY_base_id(pkey).
8,8,the client must still use the same SSLv3 .1 = TLSv1 announcement,,,null,In this case the client must still use the same SSLv3.1=TLSv1 announcement.,"During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)"
8,7,The SSLv3 protocol is deprecated and should not be used,,,null,The SSLv3 protocol is deprecated and should not be used.,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol. A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3. A server will only understand SSLv3 client hello messages. The SSLv3 protocol is deprecated and should not be used.
8,8,The contents of a signed receipt should only be considered meaningful,,,if the corresponding CMS_ContentInfo structure can be successfully verified using CMS_verify_APIName,The contents of a signed receipt should only be considered meaningful if the corresponding CMS_ContentInfo structure can be successfully verified using CMS_verify_APIName.,The contents of a signed receipt should only be considered meaningful if the corresponding CMS_ContentInfo structure can be successfully verified using CMS_verify_APIName.
8,8,"SSLv2 does not support a shutdown alert protocol , so SSLv2 can only be detected , whether the underlying connection was closed",,,null,"SSLv2 (deprecated) does not support a shutdown alert protocol, so SSLv2 can only be detected, whether the underlying connection was closed.","SSLv2 (deprecated) does not support a shutdown alert protocol, so SSLv2 can only be detected, whether the underlying connection was closed. SSLv2 cannot be checked, whether the closure was initiated by the peer or by something else."
8,8,no certificates added using SSL_CTX_add_extra_chain_cert_APIName will be used,,,If any certificates are added using these functions,"If any certificates are added using these functions ,no certificates added using SSL_CTX_add_extra_chain_cert_APIName will be used.","If any certificates are added using these functions ,no certificates added using SSL_CTX_add_extra_chain_cert_APIName will be used."
8,8,the SSL engine must know whether the SSL engine must call the connect or accept routines,,,When beginning a new handshake,"When beginning a new handshake, the SSL engine must know whether the SSL engine must call the connect (client) or accept (server) routines.","When beginning a new handshake, the SSL engine must know whether the SSL engine must call the connect (client) or accept (server) routines. Even though the SSL engine may be clear from the method chosen, whether client or server mode was requested, the handshake routines must be explicitly set."
8,8,"Callers that only have `` const '' access to data they 're indexing in a table , yet declare callbacks without constant types , are creating their own risks/bugs without being encouraged to do so by the API",,,null,"Callers that only have ""const"" access to data they're indexing in a table, yet declare callbacks without constant types (or cast the ""const"" away themselves), are therefore creating their own risks/bugs without being encouraged to do so by the API.","Callers that only have ""const"" access to data they're indexing in a table, yet declare callbacks without constant types (or cast the ""const"" away themselves), are therefore creating their own risks/bugs without being encouraged to do so by the API. On a related note, those auditing code should pay special attention to any instances of DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types without any ""const"" qualifiers."
8,7,the extension type must not be handled by OpenSSL internally or an error occurs,,,null,In both cases the extension type must not be handled by OpenSSL internally or an error occurs.,In both cases the extension type must not be handled by OpenSSL internally or an error occurs.
8,7,"The OpenSSL error strings should be loaded by calling ERR_load_crypto_strings_APIName or , for SSL applications , SSL_load_error_strings_APIName first",,,null,"The OpenSSL error strings should be loaded by calling ERR_load_crypto_strings_APIName or, for SSL applications, SSL_load_error_strings_APIName first.","The OpenSSL error strings should be loaded by calling ERR_load_crypto_strings_APIName or, for SSL applications, SSL_load_error_strings_APIName first. If there is no text string registered for the given error code, the error string will contain the numeric code."
8,7,"In new applications , SHA-1 or RIPEMD-160 should be preferred",,,null,"In new applications, SHA-1 or RIPEMD-160 should be preferred.","MD2, MD4, and MD5 are recommended only for compatibility with existing applications. In new applications, SHA-1 or RIPEMD-160 should be preferred."
8,7,"One SSL_SESSION object , regardless of its reference count , must only be used with one SSL_CTX object",,,null,"One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object).","SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache. One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object)."
8,7,Applications which included workarounds for this bug should be modified to handle this fix or they may free up an already freed BIO,,,null,Applications which included workarounds for this bug (eg freeing BIOs more than once) should be modified to handle this fix or they may free up an already freed BIO.,"In OpenSSL versions before 1.0.0 the BIO_pop_APIName call was handled incorrectly, the I/O BIO reference count was incorrectly incremented (instead of decremented) and dissociated with the SSL BIO even if the SSL BIO was not explicitly being popped (eg a pop higher up the chain). Applications which included workarounds for this bug (eg freeing BIOs more than once) should be modified to handle this fix or they may free up an already freed BIO."
8,7,This mode should only be used to implement cryptographically sound padding modes in the application code,,,null,This mode should only be used to implement cryptographically sound padding modes in the application code,Raw RSA encryption. This mode should only be used to implement cryptographically sound padding modes in the application code. Encrypting user data directly with RSA is insecure.
8,7,"This kind of reference can be considered a specialised form of structural reference , - however to avoid difficult-to-find programming bugs , it is recommended to treat the two kinds of reference independently",,,null,"This kind of reference can be considered a specialised form of structural reference , - however to avoid difficult-to-find programming bugs , it is recommended to treat the two kinds of reference independently","However, a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations. Indeed it's quite possible that most ENGINEs will not initialise at all in typical environments, as ENGINEs are typically used to support specialised hardware. To use an ENGINE's functionality, you need a functional reference. This kind of reference can be considered a specialised form of structural reference, because each functional reference implicitly contains a structural reference as well - however to avoid difficult-to-find programming bugs, it is recommended to treat the two kinds of reference independently. If you have a functional reference to an ENGINE, you have a guarantee that the ENGINE has been initialised and is ready to perform cryptographic operations, and will remain initialised until after you have released your reference."
8,7,nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively,,,null,nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively,nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively. iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use. keytype is the type of key.
8,7,The dynamic parent structure members should not be accessed,,,null,The dynamic parent structure members should not be accessed,free_func() is called when a structure is being freed up. The dynamic parent structure members should not be accessed because The dynamic parent structure members will be freed up when this function is called.
8,7,use SSL_CIPHER_description instead,,,null,"In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead","SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher. This is currently SSLv2 or TLSv1/SSLv3. In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead. If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned."
8,7,Applications usually will not need to modify the embedded content as it is normally set by higher level functions,,,null,Applications usually will not need to modify the embedded content as it is normally set by higher level functions,"*pconf could be NULL if there is no embedded content. Applications can access, modify or create the embedded content in a CMS_get0_type_APIParam_1 CMS_set1_eContentType_APIParam_1 CMS_get0_content_APIParam_1 CMS_get0_eContentType_APIParam_1 structure using this function. Applications usually will not need to modify the embedded content as it is normally set by higher level functions."
8,7,The equivalent with BIOs should not be used and may block as a result,,,null,The equivalent with BIOs on the underlying I/O structure and then call BIO_read to read the data -RRB- should not be used and may block as a result,"One technique sometimes used with blocking sockets is to use a system call (such as select(), poll() or equivalent) to determine when data is available and then call read() to read the data. The equivalent with BIOs (that is call select() on the underlying I/O structure and then call BIO_read() to read the data) should not be used because a single call to BIO_read() can cause several reads (and writes in the case of SSL BIOs) on the underlying I/O structure and may block as a result. Instead select() (or equivalent) should be combined with non blocking I/O so successive reads will request a retry instead of blocking."
8,7,"The files are looked up by the CA subject name hash value , which must hence be available",,,null,"The files are looked up by the CA subject name hash value, which must hence be available","If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
8,7,"EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports , which will be either F2 ^ m or Fp",,,null,"EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp","EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp. If the field type is Fp then the value NID_X9_62_prime_field is returned. If the field type is F2^m, then the value NID_X9_62_characteristic_two_field is returned. These values are defined in the obj_mac.h header file."
8,7,make sure that you also disable either all previous or all subsequent protocol versions,,,when disabling a protocol,"Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions","The list of protocols available can be further limited using the SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions. Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions. In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions."
8,7,Clients should avoid creating `` holes '' in the set of protocols Clients support,,,null,"Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions","The list of protocols available can be further limited using the SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions. Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions. In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions."
8,4,An application just needs to add them,,,if An application needs to lookup algorithms,An application just needs to add them if An application (or any of the functions it calls) needs to lookup algorithms.,"An application does not need to add algorithms to use them explicitly, for example by EVP_sha1_APIName. An application just needs to add them if An application (or any of the functions it calls) needs to lookup algorithms."
8,4,one should obtain a new reference,,,when making copies of an ENGINE pointer if the copies will be used independently,one should obtain a new reference when making copies of an ENGINE pointer if the copies will be used (and released) independently.,"Due to the modular nature of the ENGINE API, pointers to ENGINEs need to be treated as handles - ie not only as pointers, but also as references to the underlying ENGINE object. Ie. one should obtain a new reference when making copies of an ENGINE pointer if the copies will be used (and released) independently."
8,4,Do not use the TLSv1 protocol,,1,null,Do not use the TLSv1 protocol.,Do not use the TLSv1 protocol.
8,4,The auto allocation feature only works on OpenSSL 0.9.7 and later,,1,null,The auto allocation feature (setting buf to NULL) only works on OpenSSL 0.9.7 and later.,The auto allocation feature (setting buf to NULL) only works on OpenSSL 0.9.7 and later. Attempts to use it on earlier versions will typically cause a segmentation violation.
8,4,"New programs should prefer the `` new '' style , whilst the `` old '' style is provided for backwards compatibility purposes",,,null,"New programs should prefer the ""new"" style, whilst the ""old"" style is provided for backwards compatibility purposes.","BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments. There are two types of BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure that are supported: ""new"" style and ""old"" style. New programs should prefer the ""new"" style, whilst the ""old"" style is provided for backwards compatibility purposes."
8,4,a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ,1,,If a renegotiation take place during normal operation,"If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ.","Never bother the application with retries if the transport is blocking. If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ. In a non-blocking environment applications must be prepared to handle incomplete read/write operations. In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report. The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion."
8,4,The SSLv2 and SSLv3 protocols are deprecated and should generally not be used,,,null,The SSLv2 and SSLv3 protocols are deprecated and should generally not be used,"The SSLv2 and SSLv3 protocols are deprecated and should generally not be used. Applications should typically use SSL_CTX_set_options(3) in combination with the SSL_OP_NO_SSLv3 flag to disable negotiation of SSLv3 via the above version-flexible SSL/TLS methods. The SSL_OP_NO_SSLv2 option is set by default, and would need to be cleared via SSL_CTX_clear_options(3) in order to enable negotiation of SSLv2."
8,2,Do not use the SSLv2 protocol,,,null,Do not use the SSLv2 protocol,Do not use the SSLv2 protocol. As of OpenSSL 1.0.2g the SSL_OP_NO_SSLv2 option is set by default.
8,2,The verify_callback function must be supplied by the application and receives two arguments,,,null,"The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0)","The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set. The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification."
8,2,"""0"" has to be returned and no certificate will be sent",1,,"If no certificate should be set,","If no certificate should be set, ""0"" has to be returned and no certificate will be sent","client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
8,2,the extension must be different,,,If more than one CA certificate with the same name hash value exist,"If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc)","If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
8,2,func should be of type LHASH_DOALL_ARG_FN_TYPE,,,null,lh_<type>_doall_arg() is the same as lh_<type>_doall() except that func will be called with arg as the second argument and func should be of type LHASH_DOALL_ARG_FN_TYPE (a callback prototype that is passed both the table entry and an extra argument),"lh_<type>_doall_arg() is the same as lh_<type>_doall() except that func will be called with arg as the second argument and func should be of type LHASH_DOALL_ARG_FN_TYPE (a callback prototype that is passed both the table entry and an extra argument). As with lh_doall(), you can instead choose to declare your callback with a prototype matching the types you are dealing with and use the declare/implement macros to create compatible wrappers that cast variables before calling your type-specific callbacks. An example of this is demonstrated here (printing all hash table entries to a BIO that is provided by the caller):"
8,2,It is the job of the client_cert_cb to store information about the state of the last call,,,if required to continue,"It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue","client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
8,1,"The verification callback can be used to customise the operation of certificate verification , either by overriding error conditions or logging errors for debugging purposes",,,null,"The verification callback can be used to customise the operation of certificate verification, either by overriding error conditions or logging errors for debugging purposes.","The verification callback can be used to customise the operation of certificate verification, either by overriding error conditions or logging errors for debugging purposes."
8,1,Some old `` export grade '' clients may only support weak encryption using 40 or 64 bit RC2,,,null,"Some old ""export grade"" clients may only support weak encryption using 40 or 64 bit RC2.","Some old ""export grade"" clients may only support weak encryption using 40 or 64 bit RC2. These can be used by passing EVP_rc2_40_cbc_APIName and EVP_rc2_64_cbc_APIName respectively."
8,-1,Any code mixing the two will not work on all platforms,,,null,Any code mixing the two will not work on all platforms.,"The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines, Windows is one such platform. Any code mixing the two will not work on all platforms."
8,-1,You might have to do the latter,1,,"if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers.","You might have to do the latter if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers.","For example, clearing bit #26 at run-time disables high-performance SSE2 code present in the crypto library, while clearing bit #24 disables SSE2 code operating on 128-bit XMM register bank. You might have to do the latter if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers. Even though you can manipulate the value programmatically, you most likely will find the value more appropriate to set up an environment variable with the same name prior starting target application, eg on Intel P4 processor 'env OPENSSL_ia32cap=0x16980010 apps/openssl', or better yet 'env OPENSSL_ia32cap=~0x1000000 apps/openssl' to achieve same effect without modifying the application source code. Alternatively you can reconfigure the toolkit with no-sse2 option and recompile."
8,-1,the caller can either cast the `` const '' away or use the macros to declare/implement the wrapper functions without `` const '' types,,1,If so,"If so, the caller can either cast the ""const"" away (if they're providing the raw callbacks themselves) or use the macros to declare/implement the wrapper functions without ""const"" types.","As an example, a hash table may be maintained by code that, for reasons of encapsulation, has only ""const"" access to the data being indexed in the hash table (ie it is returned as ""const"" from elsewhere in their code) - in this case the LHASH prototypes are appropriate as-is. Conversely, if the caller is responsible for the life-time of the data in question, then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks (see the ""STUFF_cleanup"" example above). If so, the caller can either cast the ""const"" away (if they're providing the raw callbacks themselves) or use the macros to declare/implement the wrapper functions without ""const"" types."
8,-1,the curve_name must also be set,,,If set,"If set ,then the curve_name must also be set.","The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not. If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID. If not ,then asn1_flag is 0. The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve. If set ,then the curve_name must also be set."
8,-1,For other types of BIO they may not be supported,,,null,For other types of BIO they may not be supported.,The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases. For example in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way. For other types of BIO they may not be supported.
8,-1,the number of checks needs to be much higher to reach the same level of assurance,,,When the source of the prime is not random or not trusted,"When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary).","When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary). For instance, to reach the 128 bit security level, BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 should be set to 64."
8,-1,The extensions must be concatenated into a sequence of bytes,,,null,The extensions must be concatenated into a sequence of bytes.,"SSL_CTX_use_serverinfo_APIName loads one or more serverinfo extensions from a byte array into SSL_CTX_use_serverinfo_APIParam_1. The extensions must be concatenated into a sequence of bytes. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data."
8,-1,This can lead to unexpected behaviour,,0,if the SSL_VERIFY_PEER and SSL_VERIFY_NONE are not used as required,"This can lead to unexpected behaviour, if the SSL_VERIFY_PEER and SSL_VERIFY_NONE are not used as required (exactly one must be set at any time).","In client mode, it is not checked whether the SSL_VERIFY_PEER flag is set, but whether SSL_VERIFY_NONE is not set. This can lead to unexpected behaviour, if the SSL_VERIFY_PEER and SSL_VERIFY_NONE are not used as required (exactly one must be set at any time)."
8,-1,"a new session is assigned a timeout value, after which a new session will not be accepted for session reuse.",1,,Whenever a new session is negotiated,"Whenever a new session is negotiated, a new session is assigned a timeout value, after which a new session will not be accepted for session reuse.","Whenever a new session is negotiated, a new session is assigned a timeout value, after which a new session will not be accepted for session reuse. If the timeout value was not explicitly set using SSL_CTX_set_timeout_APIName , the hardcoded default timeout for the protocol will be used."
8,-1,Newer applications should just call,,,null,Newer applications should just call:,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client. If set it will override any temporary ECDH parameters set by a server. Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName. Newer applications should just call:
8,-1,This should never happen,,,null,This should never happen.,The read state is unknown. This should never happen.
8,-1,this is a bug,,,null,this is a bug  .,this is a bug because an attempt will be made to reuse the data at PEM_read_bio_X509_CRL_APIParam_2 PEM_read_DSA_PUBKEY_APIParam_2 PEM_write_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_bio_X509_APIParam_2 PEM_write_X509_APIParam_2 PEM_read_PKCS7_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_write_X509_AUX_APIParam_2 PEM_write_RSA_PUBKEY_APIParam_2 PEM_read_RSAPrivateKey_APIParam_2 PEM_write_X509_REQ_APIParam_2 PEM_read_bio_X509_AUX_APIParam_2 PEM_write_PKCS8PrivateKey_nid_APIParam_2 PEM_read_bio_RSA_PUBKEY_APIParam_2 PEM_write_bio_PKCS7_APIParam_2 PEM_read_bio_X509_APIParam_2 PEM_write_bio_DSAPrivateKey_APIParam_2 PEM_write_bio_RSAPublicKey_APIParam_2 PEM_write_bio_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_RSAPublicKey_APIParam_2 PEM_write_bio_DSA_PUBKEY_APIParam_2 PEM_read_DSAPrivateKey_APIParam_2 PEM_read_X509_AUX_APIParam_2 PEM_read_bio_RSAPublicKey_APIParam_2 PEM_read_bio_PUBKEY_APIParam_2 PEM_read_PUBKEY_APIParam_2 PEM_write_bio_PKCS8PrivateKey_nid_APIParam_2 PEM_write_bio_PrivateKey_APIParam_2 PEM_read_bio_RSAPrivateKey_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_read_bio_PrivateKey_APIParam_2 PEM_write_DSA_PUBKEY_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_write_PKCS7_APIParam_2 PEM_read_X509_APIParam_2 PEM_write_DSAPrivateKey_APIParam_2 PEM_read_RSA_PUBKEY_APIParam_2 PEM_write_PKCS8PrivateKey_APIParam_2 PEM_write_bio_DSAparams_APIParam_2 PEM_read_bio_DSA_PUBKEY_APIParam_2 PEM_write_DSAparams_APIParam_2 PEM_write_bio_RSA_PUBKEY_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_PUBKEY_APIParam_2 PEM_write_bio_RSAPrivateKey_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_write_X509_CRL_APIParam_2 PEM_write_PUBKEY_APIParam_2 PEM_write_bio_X509_AUX_APIParam_2 PEM_read_bio_DSAparams_APIParam_2 PEM_read_RSAPublicKey_APIParam_2 PEM_read_bio_PKCS7_APIParam_2 PEM_write_PrivateKey_APIParam_2 PEM_read_bio_DHparams_APIParam_2 PEM_read_X509_REQ_APIParam_2 PEM_read_DHparams_APIParam_2 PEM_write_DHparams_APIParam_2 PEM_write_bio_PKCS8PrivateKey_APIParam_2 PEM_read_DSAparams_APIParam_2 PEM_read_PrivateKey_APIParam_2 PEM_write_RSAPrivateKey_APIParam_2 PEM_write_bio_DHparams_APIParam_2 PEM_read_bio_DSAPrivateKey_APIParam_2 which is an uninitialised pointer.
8,-1,A frequent cause of problems is attempting to use the PEM routines like this,,,null,A frequent cause of problems is attempting to use the PEM routines like this:,A frequent cause of problems is attempting to use the PEM routines like this:
8,-1,Attempts to use it on earlier versions will typically cause a segmentation violation,,,null,Attempts to use it on earlier versions will typically cause a segmentation violation.,The auto allocation feature (setting buf to NULL) only works on OpenSSL 0.9.7 and later. Attempts to use it on earlier versions will typically cause a segmentation violation.
8,-1,This will might lead to connection failures for a description of the method 's properties,,,null,This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties.,"If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that eg the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if SSLv23_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties."
8,-1,attempting to set the key length to any value other than the fixed value is an error,,,If the cipher is a fixed length cipher,"If the cipher is a fixed length cipher ,then attempting to set the key length to any value other than the fixed value is an error.","EVP_CIPHER_CTX_set_key_length_APIName sets the key length of the cipher ctx. If the cipher is a fixed length cipher ,then attempting to set the key length to any value other than the fixed value is an error."
8,-1,release the memory we were using to hold it,,,When we no longer need a read buffer or a write buffer for a given SSL,"When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it.","When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it. Released memory is either appended to a list of unused RAM chunks on the SSL_CTX, or simply freed if the list of unused chunks would become longer than SSL_CTX->freelist_max_len, which defaults to 32. Using this flag can save around 34k per idle SSL connection. This flag has no effect on SSL v2 connections, or on DTLS connections."
8,-1,The host can be can be '' '' which is interpreted as meaning any interface,,,null,"The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table.","BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port. The port is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port. The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table."
8,-1,A common mistake is to attempt to use a buffer directly as follows,,,null,A common mistake is to attempt to use a buffer directly as follows:,The use of temporary variable is mandatory. A common mistake is to attempt to use a buffer directly as follows:
8,-1,"Note , however , that these implementations are not available on all platforms",,,null,"Note, however, that these implementations are not available on all platforms.","The functions EC_GFp_nistp224_method, EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224, P256 and P521 curves respectively. Note, however, that these implementations are not available on all platforms."
8,-1,"To enable this , the following is required",,,null,"To enable this, the following is required:","Additionally, OpenSSL supports dynamic locks, and sometimes, some parts of OpenSSL need it for better performance. To enable this, the following is required:"
8,-1,The second best solution to this problem is to set hash - > down_load = 0 before you start,,,null,The second best solution to this problem is to set hash->down_load=0 before you start (which will stop the hash table ever decreasing in size).,"When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration. The second best solution to this problem is to set hash->down_load=0 before you start (which will stop the hash table ever decreasing in size). The best solution is probably to avoid deleting items from the hash table inside a ""doall"" callback!"
8,-1,As a result Some objects can not be encoded or decoded as part of ASN .1 structures,,,null,As a result Some objects cannot be encoded or decoded as part of ASN.1 structures,Some objects are used to represent algorithms which do not have a corresponding ASN.1 OBJECT IDENTIFIER encoding (for example no OID currently exists for a particular algorithm). As a result Some objects cannot be encoded or decoded as part of ASN.1 structures. Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length() is not zero.
8,-1,Other attributes are discarded,,,null,Other attributes are discarded,Only friendlyName and localKeyID attributes are currently stored in certificates. Other attributes are discarded.
8,-1,Prefer PKCS1_OAEP padding,,,null,Prefer PKCS1_OAEP padding,"The RSA_padding_check_PKCS1_type_2() padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer PKCS1_OAEP padding. Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, and if fixed by protocol, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length. In such case leakage would be minimal, it would take attacker's ability to observe memory access pattern with byte granilarity as it occurs, post-factum timing analysis won't do."
8,8,"In such case leakage would be minimal , it would take attacker 's ability to observe memory access pattern with byte granilarity as it occurs , post-factum timing analysis wo n't do",,,null,"In such case leakage would be minimal, it would take attacker's ability to observe memory access pattern with byte granilarity as it occurs, post-factum timing analysis won't do","The RSA_padding_check_PKCS1_type_2() padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer PKCS1_OAEP padding. Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, and if fixed by protocol, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length. In such case leakage would be minimal, it would take attacker's ability to observe memory access pattern with byte granilarity as it occurs, post-factum timing analysis won't do."
8,-1,This can cause problems as the time_t value can overflow on some systems resulting in unexpected results,,,null,This can cause problems as the time_t value can overflow on some systems resulting in unexpected results,Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set() (or equivalent). This can cause problems as the time_t value can overflow on some systems resulting in unexpected results. New applications should use ASN1_TIME_adj() instead and pass the offset value in the offset_sec and offset_day parameters instead of directly manipulating a time_t value.
8,8,The public key is encoded using a SubjectPublicKeyInfo structure and an error occurs,1,,if the public key is not DSA,The public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not DSA,The DSA_PUBKEY functions process a DSA public key using a DSA structure. The public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not DSA.
8,8,The parameters and restrictions are identical to the encryption operations except that,,,if padding is enabled the decrypted data buffer EVP_DecryptUpdate_APIParam_2 EVP_DecryptUpdate_APIParam_2 passed to EVP_DecryptUpdate should have sufficient room for bytes unless the cipher block size is 1 in which case inl bytes is sufficient,The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer EVP_DecryptUpdate_APIParam_2 EVP_DecryptUpdate_APIParam_2 passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient,"EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer EVP_DecryptUpdate_APIParam_2 EVP_DecryptUpdate_APIParam_2 passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient."
8,8,These files can be converted into C code using the - C option of the dhparam application,,,null,These files can be converted into C code using the -C option of the dhparam(1) application,"Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly. These files can be converted into C code using the -C option of the dhparam(1) application. Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group. Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications."
8,8,the handshake will fail,,,If an id conflict is not resolved,"If an id conflict is not resolved, the handshake will fail","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
8,8,an error condition occurred,,,If ret is 0,"If ret is 0, an error condition occurred","The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information."
8,8,A violation will cause the program to abort,,,null,A violation will cause the program to abort,bn_check_top() verifies that ((a)->top >= 0 && (a)->top <= (a)->dmax). A violation will cause the program to abort.
8,8,BIO_puts is not supported,,,null,BIO_puts() is not supported,"BIO_gets(), if its size parameter is large enough finishes the digest calculation and returns the digest value. BIO_puts() is not supported."
8,8,This will probably crash somewhere in d2i_X509,,,null,This will probably crash somewhere in d2i_X509(),"This will probably crash somewhere in d2i_X509(). The reason for this is that the variable i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is uninitialized and an attempt will be made to interpret its (invalid) value as an d2i_X509_APIParam_1 structure, typically causing a segmentation violation. If i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is set to NULL first, then this will not happen."
8,8,"Some non-recoverable , fatal I/O error occurred",,1,if SSL_get_error returns SSL_ERROR_SYSCALL,"Some non-recoverable, fatal I/O error occurred","Some non-recoverable, fatal I/O error occurred. The OpenSSL error queue may contain more information on the error. For socket I/O on Unix systems, consult errno for details. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called."
8,8,This case however is problematic,,,null,This case however is problematic,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
8,8,These are the general-purpose version-flexible SSL/TLS methods,,,null,These are the general-purpose version-flexible SSL/TLS methods,"These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv2, SSLv3, TLSv1, TLSv1.1 and TLSv1.2. Most applications should use these method, and avoid the version specific methods described below."
0,8,It fails,,,if the signer certificate can not be found,It fails if the signer certificate cannot be found,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
8,8,This function may fail,,,if the cipher does not have any ASN1 support,This function may fail if the cipher does not have any ASN1 support,"EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example). This function may fail if the cipher does not have any ASN1 support."
8,8,This function has been implemented this way and because once you get into pulling bytes input bytes apart things get ugly !,,,null,This function has been implemented this way and because once you get into pulling bytes input bytes apart things get ugly !,"DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
8,7,Copies should be made or reference counts increased instead,,,null,Copies should be made or reference counts increased instead,The certificates and CRLs in a context are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed. Copies should be made or reference counts increased instead.
8,-1,This case should not occur,,,null,This case should not occur,"If SSL_CIPHER_description() cannot handle a built-in cipher, the according description of the cipher property is unknown. This case should not occur."
8,9,Additionally it indicates that the session ticket is in a renewal period and should be replaced,,,null,Additionally it indicates that the session ticket is in a renewal period and should be replaced,This indicates that the ctx and hctx have been set and the session can continue on those parameters. Additionally it indicates that the session ticket is in a renewal period and should be replaced. The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket (see RFC5077 3.3 paragraph 2).
0,8,At this point it is important to mention an important API function,,0,null,At this point it is important to mention an important API function;,"Having called any of these functions, ENGINE objects would have been dynamically allocated and populated with these implementations and linked into OpenSSL's internal linked list. At this point it is important to mention an important API function;"
8,6,"However , this return value should probably be ignored",,,null,"However , this return value should probably be ignored  .","RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced. However, this return value should probably be ignored because if it was supplied by an ENGINE, the pointer could be invalidated at any time if the ENGINE is unloaded (in fact it could be unloaded as a result of the RSA_set_method_APIName function releasing its handle to the ENGINE). For this reason, the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release."
8,0,The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName,,,null,The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName .,"SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place. If the connection is in client mode, the handshake will be started. The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName ."
8,0,The information must only be used for normal operation under non-blocking I/O,,,null,The information must therefore only be used for normal operation under non-blocking I/O.,"SSL_want_APIName examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error_APIName . Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under non-blocking I/O. Error conditions are not handled and must be treated using SSL_get_error_APIName ."
8,0,It is recommended to use the standard terminology,,,during configuration for clarity of configuration,It is recommended to use the standard terminology (DHE and ECDHE) during configuration (eg via SSL_CTX_set_cipher_list) for clarity of configuration.,It is recommended to use the standard terminology (DHE and ECDHE) during configuration (eg via SSL_CTX_set_cipher_list) for clarity of configuration. OpenSSL versions after 1.0.2 will report the standard terms via SSL_CIPHER_get_name and SSL_CIPHER_description.
8,0,Some attributes such as counter signatures are not supported,,,null,Some attributes such as counter signatures are not supported.,Some attributes such as counter signatures are not supported.
8,0,It supports non blocking I/O,,,null,It supports non blocking I/O.,The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.
8,0,the server must use a DH group and generate a DH key,,,null," , the server must use a DH group and generate a DH key .","In order to perform a DH key exchange, the server must use a DH group (DH parameters) and generate a DH key. The server will always generate a new DH key during the negotiation."
8,0,"These can support arbitrary operations via ENGINE_ctrl_APIName , including passing to and/or from the control commands data of any arbitrary type",,,null,"These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type.","If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName. ""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension)."
8,0,All other ciphers need a corresponding certificate and key,,,null,All other ciphers need a corresponding certificate and key.,"It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
8,0,These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use,,,null,"These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension).","If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName. ""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension)."
8,0,RSA ciphers using DHE need a certificate and key and additional DH-parameters,,,null,RSA ciphers using DHE need a certificate and key and additional DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName ).,"A RSA cipher can only be chosen, when a RSA certificate is available. RSA export ciphers with a keylength of 512 bits for the RSA key require a temporary 512 bit RSA key, as typically the supplied key has a length of 1024 bit (see SSL_CTX_set_tmp_rsa_callback_APIName ). RSA ciphers using DHE need a certificate and key and additional DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName )."
8,0,KEKRecipientInfo structures need to be added,,,if one or more,For example if one or more KEKRecipientInfo structures need to be added.,The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate. For example if one or more KEKRecipientInfo structures need to be added. New attributes can also be added using  CMS_encrypt_APIParam_0  and the CMS attribute utility functions
8,0,This is not thread safe but will never happen,,,unless an invalid code is passed,This is not thread safe but will never happen unless an invalid code is passed.,"If an unrecognised error code is passed to X509_verify_cert_error_string_APIName, the numerical value of the unknown code is returned in a static buffer. This is not thread safe but will never happen unless an invalid code is passed."
8,0,The prime may have to fulfill additional requirements for use in Diffie-Hellman key exchange,,,null,The prime may have to fulfill additional requirements for use in Diffie-Hellman key exchange:,The prime may have to fulfill additional requirements for use in Diffie-Hellman key exchange:
8,0,the recipients certificate is needed to locate the appropriate recipients in the CMS structure,,,null," , the recipients certificate is needed to locate the appropriate recipients in the CMS structure .","Although the recipients certificate is not needed to decrypt the data, the recipients certificate is needed to locate the appropriate (of possible several) recipients in the CMS structure."
8,0,DSA ciphers always use DH key exchange and need DH-parameters,,,null,DSA ciphers always use DH key exchange and therefore need DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName ).,"A DSA cipher can only be chosen, when a DSA certificate is available. DSA ciphers always use DH key exchange and therefore need DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName )."
8,0,Both halves must usually by handled by the same application thread,,,null,Both halves must usually by handled by the same application thread  .,BIO_s_bio_APIName returns the method for a BIO pair. A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half. Both halves must usually by handled by the same application thread since no locking is done on the internal data structures.
8,0,This meant that `` clone '' digests such as EVP_dss1_APIName needed to be used to sign using SHA1 and DSA,,,null,"This meant that ""clone"" digests such as EVP_dss1_APIName needed to be used to sign using SHA1 and DSA.","In previous versions of OpenSSL there was a link between message digest types and public key algorithms. This meant that ""clone"" digests such as EVP_dss1_APIName needed to be used to sign using SHA1 and DSA. This is no longer necessary and the use of clone digest is now discouraged."
8,0,SSL_new_APIName creates a new SSL_new_APIParam_1 structure which is needed to hold the data for a TLS/SSL connection,,,null,SSL_new_APIName creates a new SSL_new_APIParam_1 structure which is needed to hold the data for a TLS/SSL connection.,"SSL_new_APIName creates a new SSL_new_APIParam_1 structure which is needed to hold the data for a TLS/SSL connection. The new structure inherits the settings of the underlying context SSL_new_APIParam_1: connection method (SSLv2/v3/TLSv1), options, verification settings, timeout settings."
8,0,The OpenSSL library uses your callback function to help implement a common TLS ticket construction state according to RFC5077 Section 4 such that per session state is unnecessary and a small set of cryptographic variables needs to be maintained by the callback function implementation,,,null,The OpenSSL library uses your callback function to help implement a common TLS ticket construction state according to RFC5077 Section 4 such that per session state is unnecessary and a small set of cryptographic variables needs to be maintained by the callback function implementation.,The OpenSSL library uses your callback function to help implement a common TLS ticket construction state according to RFC5077 Section 4 such that per session state is unnecessary and a small set of cryptographic variables needs to be maintained by the callback function implementation.
8,0,"It should be noted , that inclusion of a cipher to be used into the list is a necessary condition",,,null,"It should be noted, that inclusion of a cipher to be used into the list is a necessary condition.","It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
8,0,"Due to the modular nature of the ENGINE API , pointers to ENGINEs need to be treated as handles - ie not only as pointers , but also as references to the underlying ENGINE object",,,null,"Due to the modular nature of the ENGINE API, pointers to ENGINEs need to be treated as handles - ie not only as pointers, but also as references to the underlying ENGINE object.","Due to the modular nature of the ENGINE API, pointers to ENGINEs need to be treated as handles - ie not only as pointers, but also as references to the underlying ENGINE object. Ie. one should obtain a new reference when making copies of an ENGINE pointer if the copies will be used (and released) independently."
8,0,"On a related note , those auditing code should pay special attention to any instances of DECLARE/IMPLEMENT _ LHASH_DOALL _ -LSB- ARG _ -RSB- _ FN macros that provide types without any `` const '' qualifiers",,,null,"On a related note, those auditing code should pay special attention to any instances of DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types without any ""const"" qualifiers.","Callers that only have ""const"" access to data they're indexing in a table, yet declare callbacks without constant types (or cast the ""const"" away themselves), are therefore creating their own risks/bugs without being encouraged to do so by the API. On a related note, those auditing code should pay special attention to any instances of DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types without any ""const"" qualifiers."
8,0,It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned,,,null,It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned.,"It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned. Eg. the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName. In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so. Eg. the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller."
8,0,This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions,,,null,This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions,"If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
8,0,"Each successful call to RSA_get_ex_new_index will return an index greater than any previously returned , this is important",,,null,"Each successful call to RSA_get_ex_new_index will return an index greater than any previously returned , this is important","The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
8,0,the certificate will never be used,,,If this flag is not set,"If this flag is not set , then the certificate will never be used","CERT_PKEY_VALID: the chain can be used with the current session. If this flag is not set ,then the certificate will never be used even if the application tries to set it because it is inconsistent with the peer preferences."
8,0,no freeing of the results is necessary,1,,If OCSP_resp_get1_id returns 0,"If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary","OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1. If the responder ID is a name then <*pname> is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary."
8,0,Currently there are two supported flags BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE,,,null,Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE,BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags.
8,0,"This functions behaves in a similar way to CMS_sign except the flag values CMS_DETACHED , CMS_BINARY , CMS_NOATTR , CMS_TEXT and CMS_STREAM are not supported",,,null,"This functions behaves in a similar way to CMS_sign except the flag values CMS_DETACHED , CMS_BINARY , CMS_NOATTR , CMS_TEXT and CMS_STREAM are not supported","This functions behaves in a similar way to CMS_sign() except the flag values CMS_DETACHED, CMS_BINARY, CMS_NOATTR, CMS_TEXT and CMS_STREAM are not supported since they do not make sense in the context of signed receipts."
8,0,SSL_set_current_cert also supports the option SSL_CERT_SET_SERVER,,,null,SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER,"SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER. If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,this option sets that certificate to the current certificate and returns 1. If the negotiated ciphersuite is anonymous (and thus no certificate will be sent) ,2 is returned and the current certificate is unchanged. If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent, 0 is returned and the current certificate is unchanged."
8,0,"This functions behaves in a similar way to CMS_verify except the flag values CMS_DETACHED , CMS_BINARY , CMS_TEXT and CMS_STREAM are not supported",,,null,"This functions behaves in a similar way to CMS_verify except the flag values CMS_DETACHED , CMS_BINARY , CMS_TEXT and CMS_STREAM are not supported","This functions behaves in a similar way to CMS_verify() except the flag values CMS_DETACHED, CMS_BINARY, CMS_TEXT and CMS_STREAM are not supported since they do not make sense in the context of signed receipts."
8,7,The lack of support for BIO_puts_APIName and the non standard behaviour of BIO_gets_APIName could be regarded as anomalous,,0,null,The lack of support for BIO_puts_APIName and the non standard behaviour of BIO_gets_APIName could be regarded as anomalous.,The lack of support for BIO_puts_APIName and the non standard behaviour of BIO_gets_APIName could be regarded as anomalous. It could be argued that BIO_gets_APIName and BIO_puts_APIName should be passed to the next BIO in the chain and digest the data passed through and that digests should be retrieved using a separate BIO_ctrl_APIName call.
8,7,"Because of the format of base64 encoding , the end of the encoded block can not always be reliably determined",,,null,"Because of the format of base64 encoding, the end of the encoded block cannot always be reliably determined.","Because of the format of base64 encoding, the end of the encoded block cannot always be reliably determined."
8,7,Be careful to avoid small subgroup attacks,,1,when using this,Be careful to avoid small subgroup attacks when using this.,Be careful to avoid small subgroup attacks when using this.
8,7,"application developers are not expected to implement it , but to compile provided module with compiler of their choice and link it into the target application",,0,null,"For this reason application developers are not expected to implement it, but to compile provided module with compiler of their choice and link it into the target application.","OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment. Even though it appears at application side, it's essentially OpenSSL private interface. For this reason application developers are not expected to implement it, but to compile provided module with compiler of their choice and link it into the target application. The referred module is available as <openssl>/ms/applink.c."
8,7,the signed content must all be held in memory,,,if the signed content is not detached,The lack of single pass processing means that the signed content must all be held in memory if the signed content is not detached.,The lack of single pass processing means that the signed content must all be held in memory if the signed content is not detached.
8,1,another socket can not be bound to the same port,,,If BIO_BIND_NORMAL is set,"If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port.","BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR."
8,6,This code will result in buf apparently containing garbage,,,null,This code will result in buf apparently containing garbage,This code will result in buf apparently containing garbage because This code was incremented after the call to point after the data just written. Also buf will no longer contain the pointer allocated by OPENSSL_malloc() and the subsequent call to OPENSSL_free() may well crash.
8,4,New applications should use the SHA2 digest algorithms such as SHA256,,,null,New applications should use the SHA2 digest algorithms such as SHA256.,New applications should use the SHA2 digest algorithms such as SHA256. The other digest algorithms are still in common use.
8,4,Do not use the TLSv1 .2 protocol,,1,null,Do not use the TLSv1.2 protocol.,Do not use the TLSv1.2 protocol.
8,3,this is likely to be very inefficient,,,While an application may retry a failed non blocking call immediately,While an application may retry a failed non blocking call immediately this is likely to be very inefficient  .,While an application may retry a failed non blocking call immediately this is likely to be very inefficient because the call will fail repeatedly until data can be processed or is available. An application will normally wait until the necessary condition is satisfied. How this is done depends on the underlying I/O structure.
8,2,"the callback must provide some random data to psk and return the length of the random data, so the connection will fail with decryption_error before the connection will be finished completely",,,If the PSK identity was not found but the callback instructs the protocol to continue anyway,"If the PSK identity was not found but the callback instructs the protocol to continue anyway, the callback must provide some random data to psk and return the length of the random data, so the connection will fail with decryption_error before the connection will be finished completely","If the PSK identity was not found but the callback instructs the protocol to continue anyway, the callback must provide some random data to psk and return the length of the random data, so the connection will fail with decryption_error before the connection will be finished completely."
8,1,The validity of the certificate and its trust level has to be checked by other means,,1,null,The validity of the certificate and its trust level has to be checked by other means.,"The certificate matching functions are used to check whether a certificate matches a given host name, email address, or IP address. The validity of the certificate and its trust level has to be checked by other means."
8,1,an error occurs,,,if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence,Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted: an error occurs if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence.,Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted: an error occurs if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence.
8,9,"A non-recoverable , fatal error in the SSL library occurred , usually a protocol error",,1,if SSL_get_error returns SSL_ERROR_SSL,"A non-recoverable, fatal error in the SSL library occurred, usually a protocol error.","A non-recoverable, fatal error in the SSL library occurred, usually a protocol error. The OpenSSL error queue contains more information on the error. If this error occurs, then no further I/O operations should be performed on the connection and SSL_shutdown_APIName must not be called."
8,8,A failure can occur,,,"if an attempt is made to add the same SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 more than once , if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs","A failure can occur if an attempt is made to add the same SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure).","SSL_CTX_add_client_custom_ext_APIName and SSL_CTX_add_server_custom_ext_APIName return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure)."
8,0,the behaviour is undefined,,,When calling SSL_write_APIName with num = 0 bytes to be sent,When calling SSL_write_APIName with num=0 bytes to be sent the behaviour is undefined.,When calling SSL_write_APIName with num=0 bytes to be sent the behaviour is undefined.
8,0,This `` reuse '' capability is present for historical compatibility but its use is strongly discouraged,,,null,"This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)","d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
7,9,but never application_data -RRB-,,,null,"In the case of SSL 3.0 or TLS 1.0 , this is one of the ContentType values defined in the protocol specification , alert , handshake ; but never application_data -RRB-","In the case of SSL 2.0, this is always 0. In the case of SSL 3.0 or TLS 1.0, this is one of the ContentType values defined in the protocol specification (change_cipher_spec(20), alert(21), handshake(22); but never application_data(23) because the callback will only be called for protocol messages)."
7,10,a point can be set using the EC_POINT_set_compressed_coordinates_GFp and EC_POINT_set_compressed_coordinates_GF2m functions where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used,,,null,Therefore a point can be set using the EC_POINT_set_compressed_coordinates_GFp and EC_POINT_set_compressed_coordinates_GF2m functions where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used,"Points can also be described in terms of their compressed co-ordinates. For a point (x, y), for any given value for x such that the point is on the curve there will only ever be two possible values for y. Therefore a point can be set using the EC_POINT_set_compressed_coordinates_GFp and EC_POINT_set_compressed_coordinates_GF2m functions where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used."
7,7,0 for success or -1 for failure,,,null,BIO_seek_APIName returns the same value as the underlying fseek_APIName function: 0 for success or -1 for failure.,BIO_seek_APIName returns the same value as the underlying fseek_APIName function: 0 for success or -1 for failure.
7,7,always start a new session,,,When performing renegotiation as a server,"When performing renegotiation as a server, always start a new session (ie, session resumption requests are only accepted in the initial handshake).","When performing renegotiation as a server, always start a new session (ie, session resumption requests are only accepted in the initial handshake). This option is not needed for clients."
7,7,Returned instead of handshake_failure,,,when a negotiation has failed specifically,Returned instead of handshake_failure when a negotiation has failed specifically  supported by the client .,Returned instead of handshake_failure when a negotiation has failed specifically because the server requires ciphers more secure than those supported by the client. This message is always fatal.
7,9,"Disables a countermeasure against a SSL 3.0 / TLS 1.0 protocol vulnerability affecting CBC ciphers , which can not be handled by some broken SSL implementations",,,null,"Disables a countermeasure against a SSL 3.0/TLS 1.0 protocol vulnerability affecting CBC ciphers, which cannot be handled by some broken SSL implementations.","Disables a countermeasure against a SSL 3.0/TLS 1.0 protocol vulnerability affecting CBC ciphers, which cannot be handled by some broken SSL implementations. This option has no effect for connections using other ciphers."
7,8,RSA is vulnerable to timing attacks,,,null,RSA is vulnerable to timing attacks.,"RSA is vulnerable to timing attacks. In a setup where attackers can measure the time of RSA decryption or signature operations, blinding must be used to protect the RSA operation from that attack."
7,8,The connection shall be closed,,,null,The connection shall be closed.,The connection shall be closed. This is a warning alert.
7,8,"SSLv2 can not be checked , why the closure happened",,,null,"SSLv2 cannot be checked, why the closure happened.","SSLv2 (deprecated) does not support a shutdown alert protocol, so SSLv2 can only be detected, whether the underlying connection was closed. SSLv2 cannot be checked, why the closure happened."
7,7,BN_set_word_APIParam_2 should probably be a typedef,,0,null,BN_set_word_APIParam_2 should probably be a typedef.,BN_set_word_APIParam_2 should probably be a typedef.
7,7,A chain normally consist of one source/sink BIO and one or more filter BIOs,,0,null,A chain normally consist of one source/sink BIO and one or more filter BIOs.,BIOs can be joined together to form a chain (a single BIO is a chain with one component). A chain normally consist of one source/sink BIO and one or more filter BIOs. Data read from or written to the first BIO then traverses the chain to the end (normally a source/sink BIO).
7,7,the handshake will fail with a SSL_R_EXCESSIVE_MESSAGE_SIZE error,,0,If the maximum certificate chain size allowed is exceeded,"If the maximum certificate chain size allowed is exceeded, the handshake will fail with a SSL_R_EXCESSIVE_MESSAGE_SIZE error.","If the maximum certificate chain size allowed is exceeded, the handshake will fail with a SSL_R_EXCESSIVE_MESSAGE_SIZE error."
7,7,This indicates an error,,,null,This indicates an error.,This indicates an error.
7,7,just closing the connection by sending a close_notify is more appropriate. ,1,, If the user cancels an operation after the handshake is complete,"If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate.","This handshake is being canceled for some reason unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning."
7,7,"a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written , truncating the result",,,if necessary,"The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary.","OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation. The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary. The total amount of space required is returned. If OBJ_obj2txt_APIParam_4 is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used."
7,7,These are the version-specific methods for DTLSv1 .2,,,null,These are the version-specific methods for DTLSv1.2.,These are the version-specific methods for DTLSv1.2.
7,7,asn1_flag is 0,,,If not,"If not ,then asn1_flag is 0.","The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not. If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID. If not ,then asn1_flag is 0. The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve. If set ,then the curve_name must also be set."
7,7,Applications may wish to specify a different legacy chain for earlier versions of TLS or DTLS,,,null,"Applications may wish to specify a different ""legacy"" chain for earlier versions of TLS or DTLS.","Since the supported signature algorithms extension is only used in TLS 1.2 and DTLS 1.2 the results for earlier versions of TLS and DTLS may not be very useful. Applications may wish to specify a different ""legacy"" chain for earlier versions of TLS or DTLS."
7,7,CA certificates must be accessed,,,null,CA certificates must be accessed .,"In order to verify the certificates presented by the peer, trusted CA certificates must be accessed. These CA certificates are made available via lookup methods, handled inside the X509_STORE. From the X509_STORE the X509_STORE_CTX used when verifying certificates is created."
7,7,"Additionally , the use of ephemeral RSA key exchange is only allowed in the TLS standard , , that is for export ciphers",,,when the RSA key can be used for signing only,"Additionally, the use of ephemeral RSA key exchange is only allowed in the TLS standard, when the RSA key can be used for signing only, that is for export ciphers.","Additionally, the use of ephemeral RSA key exchange is only allowed in the TLS standard, when the RSA key can be used for signing only, that is for export ciphers. Using ephemeral RSA key exchange for other purposes violates the standard and can break interoperability with clients. It is therefore strongly recommended to not use ephemeral RSA key exchange and use DHE (Ephemeral Diffie-Hellman) key exchange instead in order to achieve forward secrecy (see SSL_CTX_set_tmp_dh_callback_APIName )."
7,7,Only certain public key algorithms can recover a signature in this way,,,null,Only certain public key algorithms can recover a signature in this way (for example RSA in PKCS padding mode).,Sometimes however it is useful to obtain the data originally signed using a signing operation. Only certain public key algorithms can recover a signature in this way (for example RSA in PKCS padding mode).
7,7,There should be an option to set the maximum size of a memory BIO,,,null,There should be an option to set the maximum size of a memory BIO.,There should be an option to set the maximum size of a memory BIO.
7,7,the object is not freed in the event of error but may be in a potentially invalid or inconsistent state,,,If the reuse capability has been used with a valid X509 structure being passed in via d2i_X509_APIParam_1,"If the ""reuse"" capability has been used with a valid X509 structure being passed in via d2i_X509_APIParam_1 then the object is not freed in the event of error but may be in a potentially invalid or inconsistent state.","d2i_X509_APIName, d2i_X509_bio_APIName and d2i_X509_fp_APIName return a valid d2i_X509_APIParam_1 d2i_X509_bio_APIParam_2 d2i_X509_fp_APIParam_2 structure or NULL if an error occurs. The error code that can be obtained by ERR_get_error_APIName . If the ""reuse"" capability has been used with a valid X509 structure being passed in via d2i_X509_APIParam_1 then the object is not freed in the event of error but may be in a potentially invalid or inconsistent state."
7,7,There should be a way to rewind a read write BIO without destroying BIO contents,,,null,"There should be a way to ""rewind"" a read write BIO without destroying BIO contents.","There should be a way to ""rewind"" a read write BIO without destroying BIO contents."
7,7,This will cause binary compatibility issues,,0,if the size of EVP_MD_CTX structure changes,This will cause binary compatibility issues if the size of EVP_MD_CTX structure changes (this will only happen with a major release of OpenSSL).,This will cause binary compatibility issues if the size of EVP_MD_CTX structure changes (this will only happen with a major release of OpenSSL). Applications wishing to avoid this should use EVP_MD_CTX_create_APIName instead:
7,7,the context pointer will become invalid,,0,when the digest BIO is freed,Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.,The context returned by BIO_get_md_ctx_APIName is an internal context structure. Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.
7,7,Other string types call the ASN1_STRING_free_APIParam_1 functions,,,null,Other string types call the ASN1_STRING_free_APIParam_1 functions.,Other string types call the ASN1_STRING_free_APIParam_1 functions. For example ASN1_OCTET_STRING_new_APIName calls ASN1_STRING_type(V_ASN1_OCTET_STRING).
7,7,a client can only send exactly one id,2,,null,It can only send exactly one id.,"In order to reuse a session, a client must send the session's id to the server. It can only send exactly one id. The server then either agrees to reuse the session or it starts a full handshake (to create a new session)."
7,7,a client must send the session 's id to the server,,,null," , a client must send the session 's id to the server .","In order to reuse a session, a client must send the session's id to the server. It can only send exactly one id. The server then either agrees to reuse the session or it starts a full handshake (to create a new session)."
7,7,"SMIME_write_CMS_APIName always base64 encodes CMS structures , there should be an option to disable this",,,null,"SMIME_write_CMS_APIName always base64 encodes CMS structures, there should be an option to disable this.","SMIME_write_CMS_APIName always base64 encodes CMS structures, there should be an option to disable this."
7,7,The only error which will occur in practice is,,,if the CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 type is invalid,The only error which will occur in practice is if the CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 type is invalid.,CMS_get1_certs_APIName and CMS_get1_crls_APIName return the STACK of certificates or CRLs or NULL if there are none or an error occurs. The only error which will occur in practice is if the CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 type is invalid.
7,7,There should be some way of specifying a test that the BIO can perform to reliably determine EOF,,,null,There should be some way of specifying a test that the BIO can perform to reliably determine EOF (for example a MIME boundary).,There should be some way of specifying a test that the BIO can perform to reliably determine EOF (for example a MIME boundary).
7,7,"UI_add_verify_string_APIName takes and extra argument that should be a pointer to the result buffer of the input string that it 's supposed to verify , or verification will fail",,,null,"UI_add_verify_string_APIName takes and extra argument that should be a pointer to the result buffer of the input string that it's supposed to verify, or verification will fail.","UI_add_input_string_APIName and UI_add_verify_string_APIName add a prompt to the UI, as well as flags and a result buffer and the desired minimum and maximum sizes of the result, not counting the final NUL character. The given information is used to prompt for information, for example a password, and to verify a password (ie having the user enter it twice and check that the same string was entered twice). UI_add_verify_string_APIName takes and extra argument that should be a pointer to the result buffer of the input string that it's supposed to verify, or verification will fail."
7,7,"Once threadid_func_APIName is registered , or",,,if the built-in default implementation is to be used,"Once threadid_func_APIName is registered, or if the built-in default implementation is to be used;","Once threadid_func_APIName is registered, or if the built-in default implementation is to be used;"
7,7,The ASN1_TIME structure can represent years from 0000 to 9999 but no attempt is made to correct ancient calendar changes,,,null,The ASN1_TIME structure can represent years from 0000 to 9999 but no attempt is made to correct ancient calendar changes (for example from Julian to Gregorian calendars).,The ASN1_TIME structure can represent years from 0000 to 9999 but no attempt is made to correct ancient calendar changes (for example from Julian to Gregorian calendars).
7,7,The ambiguity of EOF in base64 encoded data can cause additional data following the base64 encoded block to be misinterpreted,,,null,The ambiguity of EOF in base64 encoded data can cause additional data following the base64 encoded block to be misinterpreted.,The ambiguity of EOF in base64 encoded data can cause additional data following the base64 encoded block to be misinterpreted.
7,7,"Query , whether a reused session was negotiated",,,during the handshake,"Query, whether a reused session was negotiated during the handshake.","Query, whether a reused session was negotiated during the handshake."
7,7,"A partial write is performed with the size of a message block , which is 16kB for SSLv3/TLSv1",,,null,"A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1.","SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
8,7,The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user,,,null,The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user.,"This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg"
7,7,RSA_generate_key works in the same way as RSA_generate_key_ex except RSA_generate_key uses `` old style '' call backs,,,null,"RSA_generate_key works in the same way as RSA_generate_key_ex except RSA_generate_key uses ""old style"" call backs.","RSA_generate_key is deprecated (new applications should use RSA_generate_key_ex instead). RSA_generate_key works in the same way as RSA_generate_key_ex except RSA_generate_key uses ""old style"" call backs. See BN_generate_prime_APIName for further details."
7,7,The second form is those defined over a binary field F2 ^ m where the elements of the field are integers of length at most m bits,,,null,The second form is those defined over a binary field F2^m where the elements of the field are integers of length at most m bits.,The second form is those defined over a binary field F2^m where the elements of the field are integers of length at most m bits. For this form the elliptic curve equation is modified to:
7,7,The SSL_CONF_cmd_argv_APIParam_2 argument can be set to NULL is The SSL_CONF_cmd_argv_APIParam_2 argument is not used,,,null,The SSL_CONF_cmd_argv_APIParam_2 argument can be set to NULL is The SSL_CONF_cmd_argv_APIParam_2 argument is not used.,The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2. The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed. The SSL_CONF_cmd_argv_APIParam_2 argument can be set to NULL is The SSL_CONF_cmd_argv_APIParam_2 argument is not used.
7,7,the server will try the external storage if available,,,If the session is not found in internal storage or lookups for the internal storage have been deactivated,"If the session is not found in internal storage or lookups for the internal storage have been deactivated (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP), the server will try the external storage if available.","A server will look up the session in its internal session storage. If the session is not found in internal storage or lookups for the internal storage have been deactivated (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP), the server will try the external storage if available."
7,7,ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table 's cached response for the `` get_default '' query,,,null,"ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query.","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
7,7,that will override any DSA defaults set using the DSA API,1,,If a default ENGINE is specified for DSA functionality using an ENGINE API function,"If a default ENGINE is specified for DSA functionality using an ENGINE API function, that will override any DSA defaults set using the DSA API (ie DSA_set_default_method_APIName).","As of version 0.9.7, DSA_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DSA_new_method_APIParam_1 modules. If a default ENGINE is specified for DSA functionality using an ENGINE API function, that will override any DSA defaults set using the DSA API (ie DSA_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DSA and other cryptographic algorithms."
7,7,"Using ephemeral DH key exchange yields forward secrecy , as the connection can only be decrypted",,,when the DH key is known,"Using ephemeral DH key exchange yields forward secrecy, as the connection can only be decrypted, when the DH key is known.","Using ephemeral DH key exchange yields forward secrecy, as the connection can only be decrypted, when the DH key is known. By generating a temporary DH key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) key, as this key was only used for signing."
7,7,"a ""get_default"" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used",,,When a default ENGINE is requested for a given abstraction/algorithm/mode,"When a default ENGINE is requested for a given abstraction/algorithm/mode, (eg when calling RSA_new_method(NULL)), a ""get_default"" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used.","When a default ENGINE is requested for a given abstraction/algorithm/mode, (eg when calling RSA_new_method(NULL)), a ""get_default"" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used. If no ENGINE should (or can) be used, a ""get_default"" call will return NULL and the caller will operate with a NULL ENGINE handle - this usually equates to using the conventional software implementation. In the latter case, OpenSSL will from then on behave the way it used to before the ENGINE API existed."
7,7,"ivec may be initialized with anything , but the recipient needs to know what it was initialized with , or it wo n't be able to decrypt",,,null,"ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
7,7,ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation,,,null,ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation,"Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
7,7,threadid_func is needed to record the currently-executing thread 's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1,,,null,threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1,"threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1. The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based. If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno. The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility."
7,7,The shutdown can also occur of action is need to continue the operation for non-blocking BIOs,,,null,The shutdown can also occur of action is need to continue the operation for non-blocking BIOs,"The TLS/SSL handshake was not successful, because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. The shutdown can also occur of action is need to continue the operation for non-blocking BIOs. Call SSL_get_error() with the return value ret to find out the reason."
7,7,dup_func is currently never called,,,null,dup_func() is currently never called,dup_func() is currently never called.
7,7,The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice,,,null,The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice,EVP_PKEY_id() returns the actual OID associated with EVP_PKEY_id_APIParam_1. Historically keys using the same algorithm could use different OIDs. For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2). The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice.
7,7,Multi-valued RDNs are currently very rare so the second separator will hardly ever be used,,,null,Multi-valued RDNs are currently very rare so the second separator will hardly ever be used,"The options XN_FLAG_SEP_COMMA_PLUS, XN_FLAG_SEP_CPLUS_SPC, XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use. Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN. Multi-valued RDNs are currently very rare so the second separator will hardly ever be used."
7,7,"In some cases it should possibly return ""TLSv1.2"" but does not",,,null,"In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead","SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher. This is currently SSLv2 or TLSv1/SSLv3. In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead. If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned."
7,7,The built-in procedure is quite powerful and in most cases it should be sufficient to modify its behaviour using the verify_callback function,,,null,The built-in procedure is quite powerful and in most cases it should be sufficient to modify its behaviour using the verify_callback function,Providing a complete verification procedure including certificate purpose settings etc is a complex task. The built-in procedure is quite powerful and in most cases it should be sufficient to modify its behaviour using the verify_callback function.
7,7,CONF_MFLAGS_DEFAULT_SECTION pointed to by openssl_conf if CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 does not exist,,,if set and CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 is not NULL will use the default section,CONF_MFLAGS_DEFAULT_SECTION if set and CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 is not NULL will use the default section pointed to by openssl_conf if CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 does not exist,CONF_MFLAGS_DEFAULT_SECTION if set and CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 is not NULL will use the default section pointed to by openssl_conf if CONF_modules_load_APIParam_2 CONF_modules_load_file_APIParam_2 does not exist.
7,7,"In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner , which should contribute additional noise on multi-processor systems",,,null,"In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems","It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations. The subroutines in question instrument these references for purposes of gathering entropy for random number generator. In order to make it bus-bound a 'flush cache line' instruction is used between probes. In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems. This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values)."
7,-1,"rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively",1,1,"When wildcard matching is not disabled, or when a reference identifier specifies a parent domain","When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with ""."")","X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers. When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with ""."") rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively. The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed. Applications must not free the return value."
7,1,"The number of bytes of data written will be written to the integer at EVP_SignFinal_APIParam_3 , at most EVP_PKEY_size bytes will be written",,,null,"The number of bytes of data written (ie the length of the signature) will be written to the integer at EVP_SignFinal_APIParam_3, at most EVP_PKEY_size(pkey) bytes will be written.","EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2. EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size(pkey) bytes in size. EVP_SignFinal_APIParam_3 is an OUT paramter, and not used as an IN parameter. The number of bytes of data written (ie the length of the signature) will be written to the integer at EVP_SignFinal_APIParam_3, at most EVP_PKEY_size(pkey) bytes will be written."
7,-1,"Only the mailbox syntax of RFC 822 is supported , comments are not allowed , and no attempt is made to normalize quoted characters",,,null,"Only the mailbox syntax of RFC 822 is supported, comments are not allowed, and no attempt is made to normalize quoted characters.","X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2. Only the mailbox syntax of RFC 822 is supported, comments are not allowed, and no attempt is made to normalize quoted characters. The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen(X509_check_email_APIParam_2)."
7,-1,The latter can not be constant,,,null,The latter can not be constant  .,"These functions cannot return OBJ_obj2txt_APIParam_3 OBJ_sn2nid_APIParam_1 OBJ_create_APIParam_1 OBJ_ln2nid_APIParam_1 OBJ_cmp_APIParam_1 because an OBJ_obj2txt_APIParam_3 OBJ_obj2nid_APIParam_1 OBJ_dup_APIParam_1 OBJ_cmp_APIParam_1 can represent both an internal, constant, OID and a dynamically-created one. The latter cannot be constant because it needs to be freed after use."
7,-1,"It also , apparently , violates ANSI-C",,,null,"It also, apparently, violates ANSI-C.","The various LHASH macros and callback types exist to make it possible to write type-checked code without resorting to function-prototype casting - an evil that makes application code much harder to audit/verify and also opens the window of opportunity for stack corruption and other hard-to-find bugs. It also, apparently, violates ANSI-C."
7,-1,the connection setup fails,,,null,In this case the connection setup fails.,Otherwise or on errors callback should return 0. In this case the connection setup fails.
7,-1,There are exceptions to this however,,,null,"There are exceptions to this however ,  .","BIO_gets_APIName performs the BIOs ""gets"" operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2. Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3. There are exceptions to this however, for example BIO_gets_APIName on a digest BIO will calculate and return the digest and other BIOs may not support BIO_gets_APIName at all."
7,-1,The search space is hence only 40 bits,,,null,The search space is hence only 40 bits.,"The number of bits processed can be different from the secret bits. An export cipher like eg EXP-RC4-MD5 has only 40 secret bits. The algorithm does use the full 128 bits (which would be returned for SSL_CIPHER_get_bits_APIParam_2), of which however 88bits are fixed. The search space is hence only 40 bits."
7,-1,Several alert messages must be sent as fatal alert messages as specified by the TLS RFC,,,null,Several alert messages must be sent as fatal alert messages as specified by the TLS RFC.,Several alert messages must be sent as fatal alert messages as specified by the TLS RFC. A fatal alert always leads to a connection abort.
7,7,"These values are pairwise exclusive , with undefined behaviour",,,if misused,"These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):","CRYPTO_lock_APIName is used to lock and unlock the locks. mode is a bitfield describing what should be done with the lock. n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName. mode can be combined from 1,2,4,8. These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):"
7,7,it is considered prime,,,if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests,"The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite; if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests, it is considered prime.","BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime. The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite; if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests, it is considered prime."
7,7,It is not possible to change the signing parameters using these function,,,null,It is not possible to change the signing parameters using these function.,It is not possible to change the signing parameters using these function.
7,7,All of the above bug workarounds,,,null,All of the above bug workarounds.,All of the above bug workarounds.
7,7,When decrypting an error on the final block is signalled by a zero return value from the read operation,,,null,When decrypting an error on the final block is signalled by a zero return value from the read operation.,When decrypting an error on the final block is signalled by a zero return value from the read operation. A successful decrypt followed by EOF will also return zero for the final read. BIO_get_cipher_status_APIName should be called to determine if the decrypt was successful.
7,7,The latter is satisfactory for thread-safety,,,if and only if the platform has a thread-local error number facility,The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility,"threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1. The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based. If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno. The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility."
7,7,ca,,,if not NULL is an optional set of certificates to also include in the structure,"ca, if not NULL is an optional set of certificates to also include in the structure","pass is the passphrase to use. name is the friendlyName to use for the supplied certifictate and key. pkey is the private key to include in the structure and cert its corresponding certificates. ca, if not NULL is an optional set of certificates to also include in the structure."
7,7,the internal check will be suppressed as appropriate,,,when DANE support is added to OpenSSL,"Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL","X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names. If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate. If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name. When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero). Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL."
7,7,The parent structure members will not have any meaningful values at this point,,,null,The parent structure members will not have any meaningful values at this point,new_func() is called when a structure is initially allocated (for example with RSA_new(). The parent structure members will not have any meaningful values at this point. This function will typically be used to allocate any application specific structure.
7,-1,RSA_flags returns the flags that are set for RSA_flags_APIParam_1's current RSA_METHOD,,,null,RSA_flags() returns the flags that are set for RSA_flags_APIParam_1's current RSA_METHOD,RSA_flags() returns the flags that are set for RSA_flags_APIParam_1's current RSA_METHOD. See the BUGS section.
7,7,using a function like EVP_DecryptInit_ex,,,null,using a function like EVP_DecryptInit_ex,"When the client presents a session ticket, the callback function with be called with enc set to 0 indicating that the cb function should retreive a set of parameters. In this case name and iv have already been parsed out of the session ticket. The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv. using a function like EVP_DecryptInit_ex . The hctx needs to be set using HMAC_Init_ex ."
7,7,"Currently , The protocol version is one of SSL2_VERSION , SSL3_VERSION and TLS1_VERSION",,,null,"Currently, this is one of SSL2_VERSION, SSL3_VERSION and TLS1_VERSION (for SSL 2.0, SSL 3.0 and TLS 1.0, respectively)","The protocol version according to which the protocol message is interpreted by the library. Currently, this is one of SSL2_VERSION, SSL3_VERSION and TLS1_VERSION (for SSL 2.0, SSL 3.0 and TLS 1.0, respectively)."
7,7,The function EC_GROUP_get_basis_type returns a NID identifying whether a trinomial or pentanomial is in use for the field,,,null,The function EC_GROUP_get_basis_type returns a NID identifying whether a trinomial or pentanomial is in use for the field,"The function EC_GROUP_get_basis_type returns a NID identifying whether a trinomial or pentanomial is in use for the field. The function EC_GROUP_get_trinomial_basis must only be called where f(x) is of the trinomial form, and returns the value of EC_GROUP_get_trinomial_basis_APIParam_2. Similary the function EC_GROUP_get_pentanomial_basis must only be called where f(x) is of the pentanomial form, and returns the values of EC_GROUP_get_pentanomial_basis_APIParam_2, k2 and k3 respectively."
7,1,they will always have the same sign,,,If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero,"If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign","ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
7,8,This should be sufficient for usual certificate chains,,,null,"This should be sufficient for usual certificate chains (OpenSSL's default maximum chain length is 10, see SSL_CTX_set_verify_APIName , and certificates without special extensions have a typical size of 1-2kB).","The default value for the maximum certificate chain size is 100kB (30kB on the 16bit DOS platform). This should be sufficient for usual certificate chains (OpenSSL's default maximum chain length is 10, see SSL_CTX_set_verify_APIName , and certificates without special extensions have a typical size of 1-2kB)."
7,0,PRNGD does employ an internal PRNG itself and can never run out of entropy,,,null,PRNGD does employ an internal PRNG itself and can therefore never run out of entropy.,"Alternatively, the EGD-interface compatible daemon PRNGD can be used. the EGD-interface compatible daemon PRNGD is available from http://prngd.sourceforge.net/ . PRNGD does employ an internal PRNG itself and can therefore never run out of entropy."
7,0,must be of type signed data or enveloped data,,,null,must be of type signed data or enveloped data.,CMS_add0_cert_APIName and CMS_add1_cert_APIName add certificate CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1. must be of type signed data or enveloped data.
7,0,Equally in future more sophisticated ENGINEs will require certain control operations to customize them,,,null,Equally in future more sophisticated ENGINEs will require certain control operations to customize them.,"There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
7,0,The TLS standard requires that,,,null,"The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server.","When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent."
7,0,"SSLv2 can not be checked , whether the closure was initiated by the peer or by something else",,,null,"SSLv2 cannot be checked, whether the closure was initiated by the peer or by something else.","SSLv2 (deprecated) does not support a shutdown alert protocol, so SSLv2 can only be detected, whether the underlying connection was closed. SSLv2 cannot be checked, whether the closure was initiated by the peer or by something else."
7,0,a legacy client supporting only TLS v1 .0 might receive a certificate chain signed using SHA1 whereas a TLS v1 .2 client which advertises support for SHA256 could receive a chain using SHA256,,,null,For example a legacy client supporting only TLS v1.0 might receive a certificate chain signed using SHA1 whereas a TLS v1.2 client which advertises support for SHA256 could receive a chain using SHA256.,A more advanced callback might examine the handshake parameters and set whatever chain is appropriate. For example a legacy client supporting only TLS v1.0 might receive a certificate chain signed using SHA1 whereas a TLS v1.2 client which advertises support for SHA256 could receive a chain using SHA256.
7,0,"SMIME_write_PKCS7_APIName always base64 encodes PKCS # 7 structures , there should be an option to disable this",,,null,"SMIME_write_PKCS7_APIName always base64 encodes PKCS#7 structures, there should be an option to disable this.","SMIME_write_PKCS7_APIName always base64 encodes PKCS#7 structures, there should be an option to disable this."
7,0,That 's all that 's required,1,,null,That's all that's required.,"That's all that's required. Eg. the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName and if any of those succeed, that ENGINE will be set as the default for RSA use from then on."
7,2,"As well as the affine co-ordinates , a point can alternatively be described in terms of its Jacobian projective co-ordinates",,,null,"As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only).","As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
7,8,BIO_read_APIName will initially fail and BIO_should_read_APIName will be true,,,null,BIO_read_APIName will initially fail and BIO_should_read_APIName will be true.,"To see why this is important consider a case where a request is sent using BIO_write_APIName and a response read with BIO_read_APIName, this can occur during an TLS/SSL handshake for example. BIO_write_APIName will succeed and place data in the write buffer. BIO_read_APIName will initially fail and BIO_should_read_APIName will be true. If the application then waits for data to be available on the underlying transport before flushing the write buffer ,it will never succeed because the request was never sent!"
7,8,"A handshake cryptographic operation failed , including being unable to correctly verify a signature , decrypt a key exchange , or validate a finished message",,,null,"A handshake cryptographic operation failed, including being unable to correctly verify a signature, decrypt a key exchange, or validate a finished message.","A handshake cryptographic operation failed, including being unable to correctly verify a signature, decrypt a key exchange, or validate a finished message."
7,0,"The new choice failed , check the error stack to find out the reason",,,null,"The new choice failed, check the error stack to find out the reason.","The new choice failed, check the error stack to find out the reason."
6,7,The ok parameter to the callback indicates the value the callback should return to retain the default behaviour,,,null,The ok parameter to the callback indicates the value the callback should return to retain the default behaviour,"The ok parameter to the callback indicates the value the callback should return to retain the default behaviour. If it is zero then and error condition is indicated. If it is 1 ,then no error occurred. If the flag X509_V_FLAG_NOTIFY_POLICY is set ,then ok is set to 2 to indicate the policy checking is complete."
6,7," SSL_rstate_string_APIName should always return ""RD""/""read done""",1,,"When working in a blocking environment,","When working in a blocking environment, SSL_rstate_string[_long]_APIName should always return ""RD""/""read done"".","When performing a read operation, the SSL/TLS engine must parse the record, consisting of header and body. When working in a blocking environment, SSL_rstate_string[_long]_APIName should always return ""RD""/""read done""."
6,8,The actual length of the password must be returned to the calling function,,,null,The actual length of the password must be returned to the calling function.,"The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to pem_passwd_cb_APIParam_4 is provided. The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2. The actual length of the password must be returned to the calling function. pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1)."
6,6,The callback should return 0,1,,"if the response is not acceptable,  when used on the client side",The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.,The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.
6,6,The callback should return a positive value,1,,"if the response is acceptable,  when used on the client side",The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.,The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.
6,6,"As the reference counter is not incremented , the return value of SSL_get0_session_APIName is only valid",2,1,while the connection is in use,"As the reference counter is not incremented, the pointer is only valid while the connection is in use.","SSL_get0_session_APIName returns a pointer to the actual session. As the reference counter is not incremented, the pointer is only valid while the connection is in use. If SSL_clear_APIName or SSL_free_APIName is called, the session may be removed completely (if considered bad), and the pointer obtained will become invalid. Even if the session is valid, it can be removed at any time due to timeout during SSL_CTX_flush_sessions_APIName ."
6,6,The returned pointer must not be freed by the calling application,,,null,The returned pointer must not be freed by the calling application.,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName retrieve an internal pointer to the verification parameters for SSL_CTX_get0_param_APIParam_1 or SSL_get0_param_APIParam_1 respectively. The returned pointer must not be freed by the calling application.
6,6,The deleted entry is returned and must be freed up,,,null,The deleted entry is returned and must be freed up.,X509_NAME_delete_entry_APIName deletes an entry from X509_NAME_delete_entry_APIParam_1 at position X509_NAME_delete_entry_APIParam_2. The deleted entry is returned and must be freed up.
6,6,Applications should check the return value before printing out any debugging information relating to the current certificate,,,null,Applications should check the return value before printing out any debugging information relating to the current certificate.,In versions of OpenSSL before 1.0 the current certificate returned by X509_STORE_CTX_get_current_cert_APIName was never NULL. Applications should check the return value before printing out any debugging information relating to the current certificate.
6,6,"That means that there is no limit on the size of the numbers manipulated by these functions, but return values must always be checked in case a memory allocation error has occurred",,,null,"That means that there is no limit on the size of the numbers manipulated by these functions, but return values must always be checked in case a memory allocation error has occurred.","It uses dynamic memory allocation for storing its data structures. That means that there is no limit on the size of the numbers manipulated by these functions, but return values must always be checked in case a memory allocation error has occurred."
6,6,Some of the return values are ambiguous and care should be taken,,,null,Some of the return values are ambiguous and care should be taken.,"Some of the return values are ambiguous and care should be taken. In particular a return value of 0 can be returned if an operation is not supported, if an error occurred, if EOF has not been reached and in the case of BIO_seek_APIName on a file BIO for a successful operation."
6,6,Applications must not free the return value,,,null,Applications must not free the return value.,"X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers. When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with ""."") rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively. The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed. Applications must not free the return value."
6,6,"It is recommended, to check the return value of SSL_shutdown_APIName and call SSL_shutdown_APIName again",1,,if the bidirectional shutdown is not yet complete,"It is therefore recommended, to check the return value of SSL_shutdown_APIName and call SSL_shutdown_APIName again, if the bidirectional shutdown is not yet complete (return value of the first call is 0).","It is therefore recommended, to check the return value of SSL_shutdown_APIName and call SSL_shutdown_APIName again, if the bidirectional shutdown is not yet complete (return value of the first call is 0). As the shutdown is not specially handled in the SSLv2 protocol, SSL_shutdown_APIName will succeed on the first call."
6,6,In general it cannot be assumed that the data returned by ASN1_STRING_data_APIName is null terminated or does not contain embedded nulls,,,null,In general it cannot be assumed that the data returned by ASN1_STRING_data_APIName is null terminated or does not contain embedded nulls.,"In general it cannot be assumed that the data returned by ASN1_STRING_data_APIName is null terminated or does not contain embedded nulls. The actual format of the data will depend on the actual string type itself: for example for an IA5String the data will be ASCII, for a BMPString two bytes per character in big endian format, and for an UTF8String it will be in UTF8 format."
6,6,The value returned by that TLS/SSL I/O function must be passed to SSL_get_error_APIName in parameter SSL_get_error_APIParam_2 SSL_get_error_APIParam_2,,,null,The value returned by that TLS/SSL I/O function must be passed to SSL_get_error_APIName in parameter SSL_get_error_APIParam_2 SSL_get_error_APIParam_2.,"SSL_get_error_APIName returns a result code (suitable for the C ""switch"" statement) for a preceding call to SSL_connect_APIName, SSL_accept_APIName, SSL_do_handshake_APIName, SSL_read_APIName, SSL_peek_APIName, or SSL_write_APIName on SSL_get_error_APIParam_1 SSL_get_error_APIParam_1. The value returned by that TLS/SSL I/O function must be passed to SSL_get_error_APIName in parameter SSL_get_error_APIParam_2 SSL_get_error_APIParam_2."
6,6,Applications which could pass invalid NIDs to X509_NAME_get_index_by_NID_APIName should check for the return value of -2,,,null,Applications which could pass invalid NIDs to X509_NAME_get_index_by_NID_APIName should check for the return value of -2.,Applications which could pass invalid NIDs to X509_NAME_get_index_by_NID_APIName should check for the return value of -2. Alternatively the NID validity can be determined first by checking OBJ_nid2obj(nid) is not NULL.
6,6,The value returned is an internal pointer which must not be freed,,,null,The value returned is an internal pointer which must not be freed.,X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2. Acceptable values for X509_NAME_get_entry_APIParam_2 run from 0 to (X509_NAME_entry_count(name) - 1). The value returned is an internal pointer which must not be freed.
6,6,Applications must check for return value on error,,,if the return value of X509_verify_cert_APIName is less than 0,Applications must check for <= 0 return value on error.,"A negative return value from X509_verify_cert_APIName can occur if X509_verify_cert_APIName is invoked incorrectly, such as with no certificate set in X509_verify_cert_APIParam_1, or when X509_verify_cert_APIName is called twice in succession without reinitialising X509_verify_cert_APIParam_1 for the second call. A negative return value can also happen due to internal resource problems or if a retry operation is requested during internal lookups (which never happens with standard lookup methods). Applications must check for <= 0 return value on error."
6,6,The EVP_PKEY_CTX value returned must not be freed directly by the application,,,null,The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed),"EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
6,6,It returns an index which should be stored and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions,,,null,It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions,"The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
6,6,"EVP_PKEY_get0_hmac, EVP_PKEY_get0_poly1305, EVP_PKEY_get0_siphash, EVP_PKEY_get0_RSA, EVP_PKEY_get0_DSA, EVP_PKEY_get0_DH and EVP_PKEY_get0_EC_KEY also return the referenced key in EVP_PKEY_get0_hmac_APIParam_1 EVP_PKEY_get0_poly1305_APIParam_1 EVP_PKEY_get0_siphash_APIParam_1 EVP_PKEY_get0_RSA_APIParam_1 EVP_PKEY_get0_DSA_APIParam_1 EVP_PKEY_get0_DH_APIParam_1 EVP_PKEY_get0_EC_KEY_APIParam_1 or NULL if the key is not of the correct type but the reference count of the returned key is not incremented and so must not be freed up after use",,,null,"EVP_PKEY_get0_hmac(), EVP_PKEY_get0_poly1305(), EVP_PKEY_get0_siphash(), EVP_PKEY_get0_RSA(), EVP_PKEY_get0_DSA(), EVP_PKEY_get0_DH() and EVP_PKEY_get0_EC_KEY() also return the referenced key in EVP_PKEY_get0_hmac_APIParam_1 EVP_PKEY_get0_poly1305_APIParam_1 EVP_PKEY_get0_siphash_APIParam_1 EVP_PKEY_get0_RSA_APIParam_1 EVP_PKEY_get0_DSA_APIParam_1 EVP_PKEY_get0_DH_APIParam_1 EVP_PKEY_get0_EC_KEY_APIParam_1 or NULL if the key is not of the correct type but the reference count of the returned key is not incremented and so must not be freed up after use","EVP_PKEY_get0_hmac(), EVP_PKEY_get0_poly1305(), EVP_PKEY_get0_siphash(), EVP_PKEY_get0_RSA(), EVP_PKEY_get0_DSA(), EVP_PKEY_get0_DH() and EVP_PKEY_get0_EC_KEY() also return the referenced key in EVP_PKEY_get0_hmac_APIParam_1 EVP_PKEY_get0_poly1305_APIParam_1 EVP_PKEY_get0_siphash_APIParam_1 EVP_PKEY_get0_RSA_APIParam_1 EVP_PKEY_get0_DSA_APIParam_1 EVP_PKEY_get0_DH_APIParam_1 EVP_PKEY_get0_EC_KEY_APIParam_1 or NULL if the key is not of the correct type but the reference count of the returned key is not incremented and so must not be freed up after use."
6,6,callback should return 1 to indicate verification success and 0 to indicate verification failure,,,null,callback should return 1 to indicate verification success and 0 to indicate verification failure,"callback should return 1 to indicate verification success and 0 to indicate verification failure. If SSL_VERIFY_PEER is set and callback returns 0, the handshake will fail. As the verification procedure may allow to continue the connection in case of failure (by always returning 1) the verification result must be set in any case using the error member of x509_store_ctx so that the calling application will be informed about the detailed result of the verification procedure!"
6,6,the callback function should return 2,,,If the name is still valid but a renewal of the ticket is required,"If the name is still valid but a renewal of the ticket is required ,the callback function should return 2","If the name is still valid but a renewal of the ticket is required ,the callback function should return 2. The library will call the callback again with an arguement of enc equal to 1 to set the new ticket."
6,6,In general a verification callback should NOT unconditionally return 1 in all circumstances,,,null,In general a verification callback should NOT unconditionally return 1 in all circumstances,In general a verification callback should NOT unconditionally return 1 in all circumstances because this will allow verification to succeed no matter what the error. This effectively removes all security from the application because any certificate (including untrusted generated ones) will be accepted.
6,6,the PKCS7_sign_add_signer_APIParam0 is not complete and must be finalized either by streaming or a call to PKCS7_final,1,,Unless the PKCS7_REUSE_DIGEST flag is set,Unless the PKCS7_REUSE_DIGEST flag is set the returned PKCS7 structure is not complete and must be finalized either by streaming (if applicable) or a call to PKCS7_final(),Unless the PKCS7_REUSE_DIGEST flag is set the returned PKCS7 structure is not complete and must be finalized either by streaming (if applicable) or a call to PKCS7_final().
6,6,the returned CMS_ContentInfo structure is not complete and must be finalized either by streaming or a call to CMS_final,1,,Unless the CMS_REUSE_DIGEST flag is set ,Unless the CMS_REUSE_DIGEST flag is set the returned CMS_ContentInfo structure is not complete and must be finalized either by streaming (if applicable) or a call to CMS_final(),Unless the CMS_REUSE_DIGEST flag is set the returned CMS_ContentInfo structure is not complete and must be finalized either by streaming (if applicable) or a call to CMS_final().
6,6,The return value should always be checked goto err,,,null,"The return value should always be checked (eg, if (!BN_add(r,a,b)) goto err;)","For all functions, 1 is returned for success, 0 on error. The return value should always be checked (eg, if (!BN_add(r,a,b)) goto err;). The error codes can be obtained by ERR_get_error(3) ."
6,6,the callback MUST return 1,"1,2",,If the callback is successful,"If the callback is successful , it MUST return 1","cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
6,2,The callback should return a negative value on error,,,when used on the client side,The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.,The callback when used on the client side should return a negative value on error; 0 if the response is not acceptable (in which case the handshake will fail) or a positive value if the response is acceptable.
6,2,The callback must return 0 if The callback cannot generate a session id for whatever reason and return 1 on success,,,null,The callback must return 0 if The callback cannot generate a session id for whatever reason and return 1 on success.,The callback must return 0 if The callback cannot generate a session id for whatever reason and return 1 on success.
6,2,Otherwise or on errors callback should return 0,,,null,Otherwise or on errors callback should return 0.,Otherwise or on errors callback should return 0. In this case the connection setup fails.
6,2,Callback functions should return 1 on success or 0 on error,,,null,Callback functions should return 1 on success or 0 on error.,Callback functions should return 1 on success or 0 on error.
6,0,As a result EVP_PKEY_size_APIName would have to return a value which indicates the maximum possible signature for any set of parameters,,,null,As a result EVP_PKEY_size_APIName would have to return a value which indicates the maximum possible signature for any set of parameters.,The use of EVP_PKEY_size_APIName with these functions is discouraged because some signature operations may have a signature length which depends on the parameters set. As a result EVP_PKEY_size_APIName would have to return a value which indicates the maximum possible signature for any set of parameters.
6,0,The return values for SSL_CTX_get_read_head_APIName and SSL_get_read_ahead_APIName are undefined for DTLS,,,null,The return values for SSL_CTX_get_read_head_APIName and SSL_get_read_ahead_APIName are undefined for DTLS.,These functions have no impact when used with DTLS. The return values for SSL_CTX_get_read_head_APIName and SSL_get_read_ahead_APIName are undefined for DTLS.
5,7,BIO_eof_APIName is true,,0,if no data is in the peer BIO and the peer BIO has been shutdown,BIO_eof_APIName is true if no data is in the peer BIO and the peer BIO has been shutdown.,BIO_eof_APIName is true if no data is in the peer BIO and the peer BIO has been shutdown.
5,6, the value NID_X9_62_prime_field is returned,1,,If the field type is Fp,If the field type is Fp then the value NID_X9_62_prime_field is returned,"EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp. If the field type is Fp then the value NID_X9_62_prime_field is returned. If the field type is F2^m, then the value NID_X9_62_characteristic_two_field is returned. These values are defined in the obj_mac.h header file."
5,6,", the value NID_X9_62_characteristic_two_field is returned",1,,If the field type is F2^m,"If the field type is F2^m, then the value NID_X9_62_characteristic_two_field is returned","EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp. If the field type is Fp then the value NID_X9_62_prime_field is returned. If the field type is F2^m, then the value NID_X9_62_characteristic_two_field is returned. These values are defined in the obj_mac.h header file."
5,6,After a successful read BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APINamel will return zero,2,,null,After a successful read this call will return zero,"BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer. This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero. It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName."
5,6,OCSP_resp_get0_id() and OCSP_resp_get1_id() return 1 in case of success and 0 in case of failure,2,,null,Both functions return 1 in case of success and 0 in case of failure,"OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1. If the responder ID is a name then <*pname> is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary."
5,6,After successful path validation  OCSP_basic_verify() returns success,1,,if the OCSP_NOCHECKS flag is set,After successful path validation the function returns success if the OCSP_NOCHECKS flag is set,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
5,6,BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName also will return zero once new data has been written satisfying the read request or part of it,2,,null,It also will return zero once new data has been written satisfying the read request or part of it,"BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer. This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero. It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName."
5,9,"X509_check_host_APIName return 1 for a successful match, 0 for a failed match and -1 for an internal error",,,null,"The functions return 1 for a successful match, 0 for a failed match and -1 for an internal error: typically a memory allocation failure or an ASN.1 decoding error.","The functions return 1 for a successful match, 0 for a failed match and -1 for an internal error: typically a memory allocation failure or an ASN.1 decoding error."
5,6,new_func and dup_func should return 0 for failure and 1 for success,,,null,new_func() and dup_func() should return 0 for failure and 1 for success,new_func() and dup_func() should return 0 for failure and 1 for success.
5,5,"SSL_CONF_cmd_argv_APIName returns the number of command arguments processed, 0, 1, 2 or a negative error code.",,,null,"SSL_CONF_cmd_argv_APIName returns the number of command arguments processed: 0, 1, 2 or a negative error code.","SSL_CONF_cmd_argv_APIName returns the number of command arguments processed: 0, 1, 2 or a negative error code."
5,5,CMS_compress_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred,,,null,CMS_compress_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred.,CMS_compress_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,"EVP_PKEY_CTX_new_APIName, EVP_PKEY_CTX_new_id_APIName, EVP_PKEY_CTX_dup_APIName returns either the newly allocated EVP_PKEY_CTX_dup_APIParam_1 structure or NULL if an error occurred",,,null,"EVP_PKEY_CTX_new_APIName, EVP_PKEY_CTX_new_id_APIName, EVP_PKEY_CTX_dup_APIName returns either the newly allocated EVP_PKEY_CTX_dup_APIParam_1 structure of NULL if an error occurred.","EVP_PKEY_CTX_new_APIName, EVP_PKEY_CTX_new_id_APIName, EVP_PKEY_CTX_dup_APIName returns either the newly allocated EVP_PKEY_CTX_dup_APIParam_1 structure of NULL if an error occurred."
5,5,CMS_sign_receipt_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred,,,null,CMS_sign_receipt_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred.,CMS_sign_receipt_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,CMS_sign_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred,,,null,CMS_sign_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred.,CMS_sign_APIName returns either a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,CMS_decrypt_APIName returns either 1 for success or 0 for failure,,,null,CMS_decrypt_APIName returns either 1 for success or 0 for failure.,CMS_decrypt_APIName returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error_APIName
5,5,"EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return either an EVP_get_digestbyname_APIParam_0 structure or NULL if an error occurs",,,null,"EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return either an EVP_get_digestbyname_APIParam_0 structure or NULL if an error occurs.","EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return either an EVP_get_digestbyname_APIParam_0 structure or NULL if an error occurs."
5,5,X509_NAME_delete_entry_APIName returns either the deleted X509_NAME_delete_entry_APIParam_0 structure or NULL if an error occurred,,,null,X509_NAME_delete_entry_APIName returns either the deleted X509_NAME_delete_entry_APIParam_0 structure of NULL if an error occurred.,X509_NAME_delete_entry_APIName returns either the deleted X509_NAME_delete_entry_APIParam_0 structure of NULL if an error occurred.
5,5,In versions of OpenSSL before 1.0 the current certificate returned by X509_STORE_CTX_get_current_cert_APIName was never NULL,,,null,In versions of OpenSSL before 1.0 the current certificate returned by X509_STORE_CTX_get_current_cert_APIName was never NULL.,In versions of OpenSSL before 1.0 the current certificate returned by X509_STORE_CTX_get_current_cert_APIName was never NULL. Applications should check the return value before printing out any debugging information relating to the current certificate.
5,5,CMS_uncompress_APIName returns either 1 for success or 0 for failure,,,null,CMS_uncompress_APIName returns either 1 for success or 0 for failure.,CMS_uncompress_APIName returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error_APIName
5,5,PKCS7_encrypt_APIName returns either a PKCS7 structure or NULL if an error occurred,,,null,PKCS7_encrypt_APIName returns either a PKCS7 structure or NULL if an error occurred.,PKCS7_encrypt_APIName returns either a PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,CMS_encrypt_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred,,,null,CMS_encrypt_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred.,CMS_encrypt_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,SSL_CONF_CTX_new_APIName returns either the newly allocated SSL_CONF_CTX_new_APIParam_0 structure or NULL if an error occurs,,,null,SSL_CONF_CTX_new_APIName returns either the newly allocated SSL_CONF_CTX_new_APIParam_0 structure or NULL if an error occurs.,SSL_CONF_CTX_new_APIName returns either the newly allocated SSL_CONF_CTX_new_APIParam_0 structure or NULL if an error occurs.
5,5,PKCS7_decrypt_APIName returns either 1 for success or 0 for failure,,,null,PKCS7_decrypt_APIName returns either 1 for success or 0 for failure.,PKCS7_decrypt_APIName returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error_APIName
5,5,EVP_PKEY_new_APIName returns either the newly allocated EVP_PKEY_new_APIParam_0 structure or NULL if an error occurred,,,null,EVP_PKEY_new_APIName returns either the newly allocated EVP_PKEY_new_APIParam_0 structure of NULL if an error occurred.,EVP_PKEY_new_APIName returns either the newly allocated EVP_PKEY_new_APIParam_0 structure of NULL if an error occurred.
5,5,PKCS7_sign_APIName returns either a valid PKCS7 structure or NULL if an error occurred,,,null,PKCS7_sign_APIName returns either a valid PKCS7 structure or NULL if an error occurred.,PKCS7_sign_APIName returns either a valid PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,"If the underlying BIO is non-blocking, SSL_connect will also return when the underlying BIO could not satisfy the needs of SSL_connect to continue the handshake, indicating the problem by the return value -1",,,null,"If the underlying BIO is non-blocking, SSL_connect() will also return when the underlying BIO could not satisfy the needs of SSL_connect() to continue the handshake, indicating the problem by the return value -1","If the underlying BIO is non-blocking, SSL_connect() will also return when the underlying BIO could not satisfy the needs of SSL_connect() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_connect() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_connect(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,5,"SSL_accept will also return when the underlying BIO could not satisfy the needs of SSL_accept to continue the handshake, indicating the problem by the return value -1",1,,If the underlying BIO is non-blocking,"If the underlying BIO is non-blocking, SSL_accept() will also return when the underlying BIO could not satisfy the needs of SSL_accept() to continue the handshake, indicating the problem by the return value -1","If the underlying BIO is non-blocking, SSL_accept() will also return when the underlying BIO could not satisfy the needs of SSL_accept() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_accept() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_accept(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,2,then CMS_compress_APIName will return an error,,,If zlib support is not compiled into OpenSSL,"If zlib support is not compiled into OpenSSL ,then CMS_compress_APIName will return an error.","If zlib support is not compiled into OpenSSL ,then CMS_compress_APIName will return an error."
5,1,an error is returned,,,If a certificate has already been set and the private does not belong to the certificate,If a certificate has already been set and the private does not belong to the certificate an error is returned.,"SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
5,0,"a ""get_default"" call will return NULL and the caller will operate with a NULL ENGINE handle",1,,If no ENGINE should  be used,"If no ENGINE should (or can) be used, a ""get_default"" call will return NULL and the caller will operate with a NULL ENGINE handle - this usually equates to using the conventional software implementation.","When a default ENGINE is requested for a given abstraction/algorithm/mode, (eg when calling RSA_new_method(NULL)), a ""get_default"" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used. If no ENGINE should (or can) be used, a ""get_default"" call will return NULL and the caller will operate with a NULL ENGINE handle - this usually equates to using the conventional software implementation. In the latter case, OpenSSL will from then on behave the way it used to before the ENGINE API existed."
5,5,BIO_s_null_APIName returns the null sink BIO method,,,null,BIO_s_null_APIName returns the null sink BIO method.,BIO_s_null_APIName returns the null sink BIO method.
5,5,Prior to that the results returned from this function may be unreliable,,,null,Prior to that the results returned from this function may be unreliable.,SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1. SSL_get_version_APIName should only be called after the initial handshake has been completed. Prior to that the results returned from this function may be unreliable.
5,5,A successful decrypt followed by EOF will also return zero for the final read,,,null,A successful decrypt followed by EOF will also return zero for the final read.,When decrypting an error on the final block is signalled by a zero return value from the read operation. A successful decrypt followed by EOF will also return zero for the final read. BIO_get_cipher_status_APIName should be called to determine if the decrypt was successful.
5,5,OCSP_resp_get0_APIName returns NULL ,1,,if OCSP_resp_get0_APIParam_2 is out of range,OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure or NULL if OCSP_resp_get0_APIParam_2 is out of range.,OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure or NULL if OCSP_resp_get0_APIParam_2 is out of range.
5,5,PKCS7_sign_add_signers_APIName returns NULL ,1,,if an error occurs,PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.,PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.
5,5,BN_bn2hex_APIName and BN_bn2dec_APIName return NULL ,1,,on error,"BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string, or NULL on error.","BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string, or NULL on error. BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created."
5,5,CMS_get0_signers_APIName returns NULL,1,,if an error occurred,CMS_get0_signers_APIName returns all signers or NULL if an error occurred.,CMS_get0_signers_APIName returns all signers or NULL if an error occurred.
5,5,"RAND_bytes_APIName and RAND_priv_bytes_APIName return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure",,,null,"RAND_bytes_APIName and RAND_priv_bytes_APIName return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure.","RAND_bytes_APIName and RAND_priv_bytes_APIName return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure. The error code can be obtained by ERR_get_error_APIName ."
5,5,BIO_reset_APIName returns zero for success and -1 if an error occurred,,,null,BIO_reset_APIName returns zero for success and -1 if an error occurred.,BIO_reset_APIName returns zero for success and -1 if an error occurred. BIO_seek_APIName and BIO_tell_APIName return the current file position or -1 if an error occurred. These values reflect the underlying lseek_APIName behaviour.
5,5,BIO_seek_APIName and BIO_tell_APIName return the current file position or -1 if an error occurred,,,null,BIO_seek_APIName and BIO_tell_APIName return the current file position or -1 if an error occurred.,BIO_reset_APIName returns zero for success and -1 if an error occurred. BIO_seek_APIName and BIO_tell_APIName return the current file position or -1 if an error occurred. These values reflect the underlying lseek_APIName behaviour.
5,5,EVP_MD_CTX_copy_ex_APIName returns 1 if successful or 0 for failure,,,null,EVP_MD_CTX_copy_ex_APIName returns 1 if successful or 0 for failure.,EVP_MD_CTX_copy_ex_APIName returns 1 if successful or 0 for failure.
5,5,SSL_get_secure_renegotiation_support_APIName returns 1 if the peer supports secure renegotiation and 0 if the peer does not supports secure renegotiation,,,null,SSL_get_secure_renegotiation_support_APIName returns 1 if the peer supports secure renegotiation and 0 if the peer does not supports secure renegotiation,SSL_get_secure_renegotiation_support_APIName returns 1 if the peer supports secure renegotiation and 0 if the peer does not supports secure renegotiation
5,5,DH_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails,,,null,DH_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails.,DH_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise DH_new_method_APIName returns a pointer to the newly allocated structure.
5,5,EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName return 1 if the verification was successful and 0 if the verification failed,,,null,EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName return 1 if the verification was successful and 0 if the verification failed.,EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName return 1 if the verification was successful and 0 if the verification failed. Unlike other functions the return value 0 from EVP_PKEY_verify_APIName only indicates that the signature did not not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.
5,5,"RAND_query_egd_bytes_APIName returns the number of bytes read from the daemon on success, and -1 if the connection failed",,,null,"RAND_query_egd_bytes_APIName returns the number of bytes read from the daemon on success, and -1 if the connection failed.","RAND_query_egd_bytes_APIName returns the number of bytes read from the daemon on success, and -1 if the connection failed. The PRNG state is not considered."
5,5,Unlike other functions the return value 0 from EVP_PKEY_verify_APIName only indicates that the signature did not not verify successfully  it is not an indication of a more serious error,,,null,Unlike other functions the return value 0 from EVP_PKEY_verify_APIName only indicates that the signature did not not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.,EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName return 1 if the verification was successful and 0 if the verification failed. Unlike other functions the return value 0 from EVP_PKEY_verify_APIName only indicates that the signature did not not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.
5,5,0 is returned,1,,If the two are identical,If the two are identical 0 is returned.,OBJ_cmp_APIName compares OBJ_cmp_APIParam_1 to OBJ_cmp_APIParam_2. If the two are identical 0 is returned.
5,5,PEM_write_bio_CMS_stream_APIName returns 1 for success or 0 for failure,,,null,PEM_write_bio_CMS_stream_APIName returns 1 for success or 0 for failure.,PEM_write_bio_CMS_stream_APIName returns 1 for success or 0 for failure.
5,5,i2d_CMS_bio_stream_APIName returns 1 for success or 0 for failure,,,null,i2d_CMS_bio_stream_APIName returns 1 for success or 0 for failure.,i2d_CMS_bio_stream_APIName returns 1 for success or 0 for failure.
5,5,0 is returned and no operation is performed,1,,"When the session is not valid,","When the session is not valid, 0 is returned and no operation is performed.","i2d_SSL_SESSION_APIName returns the size of the ASN1 representation in bytes. When the session is not valid, 0 is returned and no operation is performed."
5,5,BIO_reset_APIName normally returns 1 for success and 0 or -1 for failure,,,null,BIO_reset_APIName normally returns 1 for success and 0 or -1 for failure.,"BIO_reset_APIName normally returns 1 for success and 0 or -1 for failure. File BIOs are an exception, they return 0 for success and -1 for failure."
5,5,"File BIOs are an exception, they return 0 for success and -1 for failure",,,null,"File BIOs are an exception, they return 0 for success and -1 for failure.","BIO_reset_APIName normally returns 1 for success and 0 or -1 for failure. File BIOs are an exception, they return 0 for success and -1 for failure."
5,5,SSL_CTX_set_tlsext_ticket_key_cb_APIName returns 0 to indicate the callback function was set,2,,null,returns 0 to indicate the callback function was set.,returns 0 to indicate the callback function was set.
5,5,SSL_CTX_set_cipher_list_APIName and SSL_set_cipher_list_APIName return 1 if any cipher could be selected and 0 on complete failure,,,null,SSL_CTX_set_cipher_list_APIName and SSL_set_cipher_list_APIName return 1 if any cipher could be selected and 0 on complete failure.,SSL_CTX_set_cipher_list_APIName and SSL_set_cipher_list_APIName return 1 if any cipher could be selected and 0 on complete failure.
5,5,"DH_compute_key_APIName returns the size of the shared secret on success, -1 on error",,,null,"DH_compute_key_APIName returns the size of the shared secret on success, -1 on error.","DH_compute_key_APIName returns the size of the shared secret on success, -1 on error."
5,5,SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1,1,,If the server has not provided any response data,If the server has not provided any response data then SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1.,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName. The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data. Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function. If the server has not provided any response data then SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1.
5,5,DSA_SIG_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName,1,,If the allocation fails,"If the allocation fails, DSA_SIG_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, DSA_SIG_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DSA_SIG_new_APIName returns a pointer to the newly allocated structure."
5,5,EVP_PKEY_set_alias_type_APIName returns 1 for success and 0 for error,,,null,EVP_PKEY_set_alias_type_APIName returns 1 for success and 0 for error.,EVP_PKEY_set_alias_type_APIName returns 1 for success and 0 for error.
5,5,BN_BLINDING_new_APIName returns the newly allocated BN_BLINDING_new_APIParam_0 structure or NULL in case of an error,,,null,BN_BLINDING_new_APIName returns the newly allocated BN_BLINDING_new_APIParam_0 structure or NULL in case of an error.,BN_BLINDING_new_APIName returns the newly allocated BN_BLINDING_new_APIParam_0 structure or NULL in case of an error.
5,5,OBJ_nid2obj_APIName returns an OBJ_nid2obj_APIParam_0 structure or NULL is an error occurred,,,null,OBJ_nid2obj_APIName returns an OBJ_nid2obj_APIParam_0 structure or NULL is an error occurred.,OBJ_nid2obj_APIName returns an OBJ_nid2obj_APIParam_0 structure or NULL is an error occurred. OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory; ASN1_OBJECT_free_APIName will have no effect.
5,5,BIO_get_cipher_status_APIName returns 1 for a successful decrypt and 0 for failure,,,null,BIO_get_cipher_status_APIName returns 1 for a successful decrypt and 0 for failure.,BIO_get_cipher_status_APIName returns 1 for a successful decrypt and 0 for failure.
5,5,BIO_get_fd_APIName returns the file descriptor or -1 if the BIO has not been initialized,,,null,BIO_get_fd_APIName returns the file descriptor or -1 if the BIO has not been initialized.,BIO_get_fd_APIName returns the file descriptor or -1 if the BIO has not been initialized.
5,-1, the NULL pointer is returned,1,,If a callback function has not been set,"If a callback function has not been set, the NULL pointer is returned.","SSL_CTX_sess_get_new_cb_APIName, SSL_CTX_sess_get_remove_cb_APIName, and SSL_CTX_sess_get_get_cb_APIName allow to retrieve the function pointers of the provided callback functions. If a callback function has not been set, the NULL pointer is returned."
5,5,"These functions return 1 on success, 0 on error",,,null,"These functions return 1 on success, 0 on error.","These functions return 1 on success, 0 on error."
5,5,EC_GROUP_get_seed_len returns the length of the seed or 0 if the seed is not specified,,,null,EC_GROUP_get_seed_len returns the length of the seed or 0 if the seed is not specified.,"EC_GROUP_get0_seed returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified. EC_GROUP_get_seed_len returns the length of the seed or 0 if the seed is not specified."
5,5,"EC_GROUP_get0_seed returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified",,,null,"EC_GROUP_get0_seed returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified.","EC_GROUP_get0_seed returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified. EC_GROUP_get_seed_len returns the length of the seed or 0 if the seed is not specified."
5,5,"BN_CTX_get_APIName returns a pointer to the BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0, or NULL on error",,,null,"BN_CTX_get_APIName returns a pointer to the BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0, or NULL on error.","BN_CTX_get_APIName returns a pointer to the BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0, or NULL on error. Once BN_CTX_get_APIName has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get_APIName call. In case of an error, an error code is set, which can be obtained by ERR_get_error_APIName ."
5,5,"EVP_PKEY_set1_RSA_APIName, EVP_PKEY_set1_DSA_APIName, EVP_PKEY_set1_DH_APIName and EVP_PKEY_set1_EC_KEY_APIName return 1 for success or 0 for failure",,,null,"EVP_PKEY_set1_RSA_APIName, EVP_PKEY_set1_DSA_APIName, EVP_PKEY_set1_DH_APIName and EVP_PKEY_set1_EC_KEY_APIName return 1 for success or 0 for failure.","EVP_PKEY_set1_RSA_APIName, EVP_PKEY_set1_DSA_APIName, EVP_PKEY_set1_DH_APIName and EVP_PKEY_set1_EC_KEY_APIName return 1 for success or 0 for failure."
5,5,Alternatively in the event of an error a 0 is returned,,,null,Alternatively in the event of an error a 0 is returned.,EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in <openssl/obj_mac.h>) for a trinomial or pentanomial respectively. Alternatively in the event of an error a 0 is returned.
5,5,BIO_new_fd_APIName returns the newly allocated BIO or NULL is an error occurred,,,null,BIO_new_fd_APIName returns the newly allocated BIO or NULL is an error occurred.,BIO_new_fd_APIName returns the newly allocated BIO or NULL is an error occurred.
5,5,"For the other functions, 1 is returned for success, 0 on error",,,null,"For the other functions, 1 is returned for success, 0 on error.","For the other functions, 1 is returned for success, 0 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,Source/sink BIOs return an 0 if they do not recognize the BIO_ctrl_APIName operation,,,null,Source/sink BIOs return an 0 if they do not recognize the BIO_ctrl_APIName operation.,Source/sink BIOs return an 0 if they do not recognize the BIO_ctrl_APIName operation.
5,5,SSL_CTX_set_tlsext_servername_callback_APIName and SSL_CTX_set_tlsext_servername_arg_APIName both always return 1 indicating success,,,null,SSL_CTX_set_tlsext_servername_callback_APIName and SSL_CTX_set_tlsext_servername_arg_APIName both always return 1 indicating success.,SSL_CTX_set_tlsext_servername_callback_APIName and SSL_CTX_set_tlsext_servername_arg_APIName both always return 1 indicating success.
5,5,"Once BN_CTX_get_APIName has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get_APIName call",,,null,"Once BN_CTX_get_APIName has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get_APIName call.","BN_CTX_get_APIName returns a pointer to the BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0, or NULL on error. Once BN_CTX_get_APIName has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get_APIName call. In case of an error, an error code is set, which can be obtained by ERR_get_error_APIName ."
5,5,"X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName, X509_NAME_add_entry_by_NID_APIName and X509_NAME_add_entry_APIName return 1 for success of 0 if an error occurred",,,null,"X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName, X509_NAME_add_entry_by_NID_APIName and X509_NAME_add_entry_APIName return 1 for success of 0 if an error occurred.","X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName, X509_NAME_add_entry_by_NID_APIName and X509_NAME_add_entry_APIName return 1 for success of 0 if an error occurred."
5,5,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName return the index of the next matching entry or -1 if not found,,,null,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName return the index of the next matching entry or -1 if not found.,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName return the index of the next matching entry or -1 if not found. X509_NAME_get_index_by_NID_APIName can also return -2 if the supplied NID is invalid.
5,5,i2d_X509_fp_APIName is similar to i2d_X509_APIName except i2d_X509_fp_APIName writes the encoding of the structure i2d_X509_fp_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 d2i_X509_bio_APIParam_1 and i2d_X509_fp_APIName returns 1 for success and 0 for failure,2,,null,i2d_X509_fp_APIName is similar to i2d_X509_APIName except it writes the encoding of the structure i2d_X509_fp_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 d2i_X509_bio_APIParam_1 and i2d_X509_fp_APIName returns 1 for success and 0 for failure.,i2d_X509_fp_APIName is similar to i2d_X509_APIName except it writes the encoding of the structure i2d_X509_fp_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 d2i_X509_bio_APIParam_1 and i2d_X509_fp_APIName returns 1 for success and 0 for failure.
5,5,X509_NAME_get_index_by_NID_APIName can also return -2,1,,if the supplied NID is invalid,X509_NAME_get_index_by_NID_APIName can also return -2 if the supplied NID is invalid.,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName return the index of the next matching entry or -1 if not found. X509_NAME_get_index_by_NID_APIName can also return -2 if the supplied NID is invalid.
5,5,EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName return 1 for success and 0 or a negative value for failure.,EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,"EVP_DigestInit_ex_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_ex_APIName return 1 for success and 0 for failure",,,null,"EVP_DigestInit_ex_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_ex_APIName return 1 for success and 0 for failure.","EVP_DigestInit_ex_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_ex_APIName return 1 for success and 0 for failure."
5,5,"RSA_blinding_on_APIName returns 1 on success, and 0 if an error occurred",,,null,"RSA_blinding_on_APIName returns 1 on success, and 0 if an error occurred.","RSA_blinding_on_APIName returns 1 on success, and 0 if an error occurred."
5,5,"EC_POINT_is_on_curve returns 1 if the point is on the curve, 0 if not, or -1 on error",,,null,"EC_POINT_is_on_curve returns 1 if the point is on the curve, 0 if not, or -1 on error.","EC_POINT_is_on_curve returns 1 if the point is on the curve, 0 if not, or -1 on error."
5,5,"If the peer did not present a certificate, NULL is returned",,,null,"If the peer did not present a certificate, NULL is returned.","SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName . If the peer did not present a certificate, NULL is returned."
5,5,"If the session is actually identical , SSL_CTX_add_session_APIName is a no-op, and the return value is 0",,,null,"If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session_APIName is a no-op, and the return value is 0.","When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists. In this case it is assumed that both sessions are identical. If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session. If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session_APIName is a no-op, and the return value is 0."
5,5,"EC_POINT_cmp returns 1 if the points are not equal, 0 if the points are, or -1 on error",,,null,"EC_POINT_cmp returns 1 if the points are not equal, 0 if the points are, or -1 on error.","EC_POINT_cmp returns 1 if the points are not equal, 0 if the points are, or -1 on error."
5,5,ERR_PACK_APIName return the error code,,,null,ERR_PACK_APIName return the error code.,ERR_load_strings_APIName returns no value. ERR_PACK_APIName return the error code. ERR_get_next_error_library_APIName returns a new library number.
5,5,"BIO_pop_APIName returns the next BIO in the chain, or NULL if there is no next BIO",,,null,"BIO_pop_APIName returns the next BIO in the chain, or NULL if there is no next BIO.","BIO_pop_APIName returns the next BIO in the chain, or NULL if there is no next BIO."
5,5,"d2i_ECPKParameters_APIName, d2i_ECPKParameters_bio_APIName and d2i_ECPKParameters_fp_APIName return a valid d2i_ECPKParameters_APIParam_1 structure or NULL if an error occurs",,,null,"d2i_ECPKParameters_APIName, d2i_ECPKParameters_bio_APIName and d2i_ECPKParameters_fp_APIName return a valid d2i_ECPKParameters_APIParam_1 structure or NULL if an error occurs.","d2i_ECPKParameters_APIName, d2i_ECPKParameters_bio_APIName and d2i_ECPKParameters_fp_APIName return a valid d2i_ECPKParameters_APIParam_1 structure or NULL if an error occurs."
5,5,EVP_DigestVerifyFinal_APIName returns 1 for success,,,null,EVP_DigestVerifyFinal_APIName returns 1 for success; any other value indicates failure.,"EVP_DigestVerifyFinal_APIName returns 1 for success; any other value indicates failure. A return value of zero indicates that the signature did not verify successfully (that is, tbs did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form)."
5,5,"DSA_dup_DH_APIName returns the new DSA_dup_DH_APIParam_0 structure, and NULL on error",,,null,"DSA_dup_DH_APIName returns the new DSA_dup_DH_APIParam_0 structure, and NULL on error.","DSA_dup_DH_APIName returns the new DSA_dup_DH_APIParam_0 structure, and NULL on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,i2d_PKCS7_bio_stream_APIName returns 1 for success or 0 for failure,,,null,i2d_PKCS7_bio_stream_APIName returns 1 for success or 0 for failure.,i2d_PKCS7_bio_stream_APIName returns 1 for success or 0 for failure.
5,5,i2d_ECPKParameters_bio_APIName is similar to i2d_ECPKParameters_APIName except i2d_ECPKParameters_bio_APIName writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure,2,,null,i2d_ECPKParameters_bio_APIName is similar to i2d_ECPKParameters_APIName except it writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure.,i2d_ECPKParameters_bio_APIName is similar to i2d_ECPKParameters_APIName except it writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure.
5,0,"EC_GROUP_dup returns a pointer to the duplicated curve, or NULL on error",,,null,"EC_GROUP_dup returns a pointer to the duplicated curve, or NULL on error.","EC_GROUP_dup returns a pointer to the duplicated curve, or NULL on error."
5,5,EVP_DigestVerifyInit_APIName and EVP_DigestVerifyUpdate_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_DigestVerifyInit_APIName and EVP_DigestVerifyUpdate_APIName return 1 for success and 0 or a negative value for failure.,EVP_DigestVerifyInit_APIName and EVP_DigestVerifyUpdate_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,EVP_PKEY_meth_add0_APIName returns 1 if method is added successfully or 0 if an error occurred,,,null,EVP_PKEY_meth_add0_APIName returns 1 if method is added successfully or 0 if an error occurred.,EVP_PKEY_meth_add0_APIName returns 1 if method is added successfully or 0 if an error occurred.
5,5,"BN_BLINDING_update_APIName, BN_BLINDING_convert_APIName, BN_BLINDING_invert_APIName, BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName return 1 on success and 0 if an error occurred",,,null,"BN_BLINDING_update_APIName, BN_BLINDING_convert_APIName, BN_BLINDING_invert_APIName, BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName return 1 on success and 0 if an error occurred.","BN_BLINDING_update_APIName, BN_BLINDING_convert_APIName, BN_BLINDING_invert_APIName, BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName return 1 on success and 0 if an error occurred."
5,5,"The RSA_padding_add_xxx_APIName functions return 1 on success, 0 on error",,,null,"The RSA_padding_add_xxx_APIName functions return 1 on success, 0 on error.","The RSA_padding_add_xxx_APIName functions return 1 on success, 0 on error. The RSA_padding_check_xxx_APIName functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling ERR_get_error_APIName ."
5,5,"The RSA_padding_check_xxx_APIName functions return the length of the recovered data, -1 on error",,,null,"The RSA_padding_check_xxx_APIName functions return the length of the recovered data, -1 on error.","The RSA_padding_add_xxx_APIName functions return 1 on success, 0 on error. The RSA_padding_check_xxx_APIName functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling ERR_get_error_APIName ."
5,5,BIO_do_handshake_APIName returns 1 if the connection was established successfully,,,null,BIO_do_handshake_APIName returns 1 if the connection was established successfully.,"BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection. BIO_do_handshake_APIName returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried. If an SSL connection has already been established ,this call has no effect."
5,5,ASN1_TIME_diff_APIName returns 1 for sucess and 0 for failure,,,null,ASN1_TIME_diff_APIName returns 1 for sucess and 0 for failure.,ASN1_TIME_diff_APIName returns 1 for sucess and 0 for failure. ASN1_TIME_diff_APIName can fail if the pass ASN1_TIME structure has invalid syntax for example.
5,5,The parsed PKCS#7 structure is returned or NULL if an error occurred,,,null,The parsed PKCS#7 structure is returned or NULL if an error occurred.,The parsed PKCS#7 structure is returned or NULL if an error occurred.
5,5,SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension,,,null,SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension. SSL_get1_curves_APIName returns the total number of supported curves. The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes. The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order. SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.
5,5,ASN1_STRING_new_APIName and ASN1_STRING_type_new_APIName return a valid ASN1_STRING structure or NULL if an error occurred,,,null,ASN1_STRING_new_APIName and ASN1_STRING_type_new_APIName return a valid ASN1_STRING structure or NULL if an error occurred.,ASN1_STRING_new_APIName and ASN1_STRING_type_new_APIName return a valid ASN1_STRING structure or NULL if an error occurred.
5,-1,The following return values can currently occur for SSL_want_APIName,,,null,The following return values can currently occur for SSL_want_APIName:,The following return values can currently occur for SSL_want_APIName:
5,5,"CMS_add0_cert_APIName, CMS_add1_cert_APIName and CMS_add0_crl_APIName and CMS_add1_crl_APIName return 1 for success and 0 for failure",,,null,"CMS_add0_cert_APIName, CMS_add1_cert_APIName and CMS_add0_crl_APIName and CMS_add1_crl_APIName return 1 for success and 0 for failure.","CMS_add0_cert_APIName, CMS_add1_cert_APIName and CMS_add0_crl_APIName and CMS_add1_crl_APIName return 1 for success and 0 for failure."
5,5,BUF_MEM_grow_APIName returns zero on error or the new size,,,null,BUF_MEM_grow_APIName returns zero on error or the new size (ie BUF_MEM_grow_APIParam_2).,BUF_MEM_grow_APIName returns zero on error or the new size (ie BUF_MEM_grow_APIParam_2).
5,5,BIO_new_file_APIName and BIO_new_fp_APIName return a file BIO or NULL if an error occurred,,,null,BIO_new_file_APIName and BIO_new_fp_APIName return a file BIO or NULL if an error occurred.,BIO_new_file_APIName and BIO_new_fp_APIName return a file BIO or NULL if an error occurred.
5,5,CMS_add1_ReceiptRequest_APIName returns 1 for success or 0 if an error occurred,,,null,CMS_add1_ReceiptRequest_APIName returns 1 for success or 0 if an error occurred.,CMS_add1_ReceiptRequest_APIName returns 1 for success or 0 if an error occurred.
5,5,"CMS_RecipientInfo_type_APIName will currently return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK, CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER",,,null,"CMS_RecipientInfo_type_APIName will currently return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK, CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER.","CMS_RecipientInfo_type_APIName returns the type of CMS_RecipientInfo structure CMS_RecipientInfo_type_APIParam_1. CMS_RecipientInfo_type_APIName will currently return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK, CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER."
5,-1,"On error, -1 is returned",,,null,"On error, -1 is returned; the error codes can be obtained by ERR_get_error_APIName .","On error, -1 is returned; the error codes can be obtained by ERR_get_error_APIName ."
5,5,EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName return 1 for success and 0 or a negative value for failure.,EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,ECDSA_SIG_new_APIName returns NULL if the allocation fails,,,null,ECDSA_SIG_new_APIName returns NULL if the allocation fails.,ECDSA_SIG_new_APIName returns NULL if the allocation fails.
5,5,BIO_find_type_APIName returns a matching BIO or NULL for no match,,,null,BIO_find_type_APIName returns a matching BIO or NULL for no match.,BIO_find_type_APIName returns a matching BIO or NULL for no match.
5,5,BIO_new_APIName returns a newly created BIO or NULL if the call fails,,,null,BIO_new_APIName returns a newly created BIO or NULL if the call fails.,BIO_new_APIName returns a newly created BIO or NULL if the call fails.
5,5,"EC_KEY_new, EC_KEY_new_by_curve_name and EC_KEY_dup return a pointer to the newly created EC_KEY object, or NULL on error",,,null,"EC_KEY_new, EC_KEY_new_by_curve_name and EC_KEY_dup return a pointer to the newly created EC_KEY object, or NULL on error.","EC_KEY_new, EC_KEY_new_by_curve_name and EC_KEY_dup return a pointer to the newly created EC_KEY object, or NULL on error."
5,5,X509_NAME_get_entry_APIName returns an X509_NAME_get_entry_APIParam_1 pointer to the requested entry or NULL if the index is invalid,,,null,X509_NAME_get_entry_APIName returns an X509_NAME_get_entry_APIParam_1 pointer to the requested entry or NULL if the index is invalid.,X509_NAME_get_entry_APIName returns an X509_NAME_get_entry_APIParam_1 pointer to the requested entry or NULL if the index is invalid.
5,5,"The return value will be EVP_PKEY_RSA, EVP_PKEY_DSA, EVP_PKEY_DH or EVP_PKEY_EC for the corresponding key types or NID_undef if the key type is unassigned",,,null,"The return value will be EVP_PKEY_RSA, EVP_PKEY_DSA, EVP_PKEY_DH or EVP_PKEY_EC for the corresponding key types or NID_undef if the key type is unassigned.","EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1. The type of a key can be obtained with EVP_PKEY_type(pkey->type). The return value will be EVP_PKEY_RSA, EVP_PKEY_DSA, EVP_PKEY_DH or EVP_PKEY_EC for the corresponding key types or NID_undef if the key type is unassigned."
5,5,SSL_CTX_set_generate_session_id_APIName and SSL_set_generate_session_id_APIName always return 1,,,null,SSL_CTX_set_generate_session_id_APIName and SSL_set_generate_session_id_APIName always return 1.,SSL_CTX_set_generate_session_id_APIName and SSL_set_generate_session_id_APIName always return 1.
5,5,"SSL_get_current_cipher_APIName returns the cipher actually used or NULL, when no session has been established",,,null,"SSL_get_current_cipher_APIName returns the cipher actually used or NULL, when no session has been established.","SSL_get_current_cipher_APIName returns the cipher actually used or NULL, when no session has been established."
5,5,"EC_KEY_copy returns a pointer to the destination key, or NULL on error",,,null,"EC_KEY_copy returns a pointer to the destination key, or NULL on error.","EC_KEY_copy returns a pointer to the destination key, or NULL on error."
5,5,"BN_MONT_CTX_new_APIName returns the newly allocated BN_MONT_CTX_new_APIParam_0, and NULL on error",,,null,"BN_MONT_CTX_new_APIName returns the newly allocated BN_MONT_CTX_new_APIParam_0, and NULL on error.","BN_MONT_CTX_new_APIName returns the newly allocated BN_MONT_CTX_new_APIParam_0, and NULL on error."
5,5,SSL_CTX_set_tmp_dh_APIName and SSL_set_tmp_dh_APIName do return 1 on success and 0 on failure,,,null,SSL_CTX_set_tmp_dh_APIName and SSL_set_tmp_dh_APIName do return 1 on success and 0 on failure.,SSL_CTX_set_tmp_dh_APIName and SSL_set_tmp_dh_APIName do return 1 on success and 0 on failure. Check the error queue to find out the reason of failure.
5,5,SSL_CONF_CTX_set1_prefix_APIName returns 1 for success and 0 for failure,,,null,SSL_CONF_CTX_set1_prefix_APIName returns 1 for success and 0 for failure.,SSL_CONF_CTX_set1_prefix_APIName returns 1 for success and 0 for failure.
5,5,The function EVP_PKEY_missing_parameters_APIName returns 1 if the public key parameters of EVP_PKEY_missing_parameters_APIParam_1 are missing and 0 if they are present or the algorithm doesn't use parameters,,,null,The function EVP_PKEY_missing_parameters_APIName returns 1 if the public key parameters of EVP_PKEY_missing_parameters_APIParam_1 are missing and 0 if they are present or the algorithm doesn't use parameters.,The function EVP_PKEY_missing_parameters_APIName returns 1 if the public key parameters of EVP_PKEY_missing_parameters_APIParam_1 are missing and 0 if they are present or the algorithm doesn't use parameters.
5,5,BIO_new_CMS_APIName returns a BIO chain when successful or NULL if an error occurred,,,null,BIO_new_CMS_APIName returns a BIO chain when successful or NULL if an error occurred.,BIO_new_CMS_APIName returns a BIO chain when successful or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,BN_value_one_APIName returns a BN_value_one_APIParam_0 constant of value 1,,,null,BN_value_one_APIName returns a BN_value_one_APIParam_0 constant of value 1.,BN_value_one_APIName returns a BN_value_one_APIParam_0 constant of value 1. This constant is useful for use in comparisons and assignment.
5,5,CMS_RecipientInfo_encrypt_APIName return 1 for success or 0 if an error occurs,,,null,CMS_RecipientInfo_encrypt_APIName return 1 for success or 0 if an error occurs.,"CMS_RecipientInfo_ktri_get0_signer_id_APIName, CMS_RecipientInfo_set0_pkey_APIName, CMS_RecipientInfo_kekri_get0_id_APIName, CMS_RecipientInfo_set0_key_APIName and CMS_RecipientInfo_decrypt_APIName return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt_APIName return 1 for success or 0 if an error occurs."
5,5,"CMS_get0_SignerInfos_APIName returns all CMS_SignerInfo structures, or NULL there are no signers or an error occurs",,,null,"CMS_get0_SignerInfos_APIName returns all CMS_SignerInfo structures, or NULL there are no signers or an error occurs.","CMS_get0_SignerInfos_APIName returns all CMS_SignerInfo structures, or NULL there are no signers or an error occurs."
5,5,EVP_PKEY_CTX_ctrl_APIName and its macros return a positive value for success and 0 or a negative value for failure,,,null,EVP_PKEY_CTX_ctrl_APIName and its macros return a positive value for success and 0 or a negative value for failure.,EVP_PKEY_CTX_ctrl_APIName and its macros return a positive value for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,"If no callback was explicitly set, the NULL pointer is returned and the default callback will be used",,,null,"If no callback was explicitly set, the NULL pointer is returned and the default callback will be used.","SSL_CTX_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_CTX_get_verify_mode_APIParam_1 SSL_CTX_get_verify_depth_APIParam_1. If no callback was explicitly set, the NULL pointer is returned and the default callback will be used."
5,5,"CMS_RecipientInfo_ktri_get0_signer_id_APIName, CMS_RecipientInfo_set0_pkey_APIName, CMS_RecipientInfo_kekri_get0_id_APIName, CMS_RecipientInfo_set0_key_APIName and CMS_RecipientInfo_decrypt_APIName return 1 for success or 0 if an error occurs",,,null,"CMS_RecipientInfo_ktri_get0_signer_id_APIName, CMS_RecipientInfo_set0_pkey_APIName, CMS_RecipientInfo_kekri_get0_id_APIName, CMS_RecipientInfo_set0_key_APIName and CMS_RecipientInfo_decrypt_APIName return 1 for success or 0 if an error occurs.","CMS_RecipientInfo_ktri_get0_signer_id_APIName, CMS_RecipientInfo_set0_pkey_APIName, CMS_RecipientInfo_kekri_get0_id_APIName, CMS_RecipientInfo_set0_key_APIName and CMS_RecipientInfo_decrypt_APIName return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt_APIName return 1 for success or 0 if an error occurs."
5,5,SSL_CONF_finish_APIName returns 1 for success and 0 for failure,,,null,SSL_CONF_finish_APIName returns 1 for success and 0 for failure.,SSL_CONF_finish_APIName returns 1 for success and 0 for failure.
5,-1,SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName return the following values,,,null,SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName return the following values:,SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName return the following values:
5,5,"BIO_read_filename_APIName, BIO_write_filename_APIName, BIO_append_filename_APIName and BIO_rw_filename_APIName return 1 for success or 0 for failure",,,null,"BIO_read_filename_APIName, BIO_write_filename_APIName, BIO_append_filename_APIName and BIO_rw_filename_APIName return 1 for success or 0 for failure.","BIO_read_filename_APIName, BIO_write_filename_APIName, BIO_append_filename_APIName and BIO_rw_filename_APIName return 1 for success or 0 for failure."
5,5,-1 is returned if an error occurs while checking the key,,,null,-1 is returned if an error occurs while checking the key.,"RSA_check_key_APIName returns 1 if RSA_check_key_APIParam_1 is a valid RSA key, and 0 otherwise. -1 is returned if an error occurs while checking the key."
5,5,"EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key or NULL if an error occurred",,,null,"EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key or NULL if an error occurred.","EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key or NULL if an error occurred."
5,5,"EC_GROUP_have_precompute_mult return 1 if a precomputation has been done, or 0 if not",,,null,"EC_GROUP_have_precompute_mult return 1 if a precomputation has been done, or 0 if not.","EC_GROUP_have_precompute_mult return 1 if a precomputation has been done, or 0 if not."
5,5,"BN_is_prime_ex_APIName, BN_is_prime_fasttest_ex_APIName, BN_is_prime_APIName and BN_is_prime_fasttest_APIName return 0 if the number is composite, 1 if the number is prime with an error probability of less than 0.25^BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2, and -1 on error",,,null,"BN_is_prime_ex_APIName, BN_is_prime_fasttest_ex_APIName, BN_is_prime_APIName and BN_is_prime_fasttest_APIName return 0 if the number is composite, 1 if the number is prime with an error probability of less than 0.25^BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2, and -1 on error.","BN_is_prime_ex_APIName, BN_is_prime_fasttest_ex_APIName, BN_is_prime_APIName and BN_is_prime_fasttest_APIName return 0 if the number is composite, 1 if the number is prime with an error probability of less than 0.25^BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2, and -1 on error."
5,5,BIO_get_cipher_ctx_APIName currently always returns 1,,,null,BIO_get_cipher_ctx_APIName currently always returns 1.,BIO_get_cipher_ctx_APIName currently always returns 1.
5,5,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName return 1 for success and 0 for failure",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName return 1 for success and 0 for failure.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName return 1 for success and 0 for failure."
5,-1,The following return values can currently occur,,,null,The following return values can currently occur:,The following return values can currently occur:
5,5,OCSP_single_get0_status_APIName returns the status of OCSP_single_get0_status_APIParam_1 or -1 if an error occurred,,,null,OCSP_single_get0_status_APIName returns the status of OCSP_single_get0_status_APIParam_1 or -1 if an error occurred.,OCSP_single_get0_status_APIName returns the status of OCSP_single_get0_status_APIParam_1 or -1 if an error occurred.
5,5,"ECDSA_verify_APIName and ECDSA_do_verify_APIName return 1 for a valid signature, 0 for an invalid signature and -1 on error",,,null,"ECDSA_verify_APIName and ECDSA_do_verify_APIName return 1 for a valid signature, 0 for an invalid signature and -1 on error.","ECDSA_verify_APIName and ECDSA_do_verify_APIName return 1 for a valid signature, 0 for an invalid signature and -1 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,"d2i_X509_APIName, d2i_X509_bio_APIName and d2i_X509_fp_APIName return a valid d2i_X509_APIParam_1 d2i_X509_bio_APIParam_2 d2i_X509_fp_APIParam_2 structure or NULL if an error occurs",,,null,"d2i_X509_APIName, d2i_X509_bio_APIName and d2i_X509_fp_APIName return a valid d2i_X509_APIParam_1 d2i_X509_bio_APIParam_2 d2i_X509_fp_APIParam_2 structure or NULL if an error occurs.","d2i_X509_APIName, d2i_X509_bio_APIName and d2i_X509_fp_APIName return a valid d2i_X509_APIParam_1 d2i_X509_bio_APIParam_2 d2i_X509_fp_APIParam_2 structure or NULL if an error occurs. The error code that can be obtained by ERR_get_error_APIName . If the ""reuse"" capability has been used with a valid X509 structure being passed in via d2i_X509_APIParam_1 then the object is not freed in the event of error but may be in a potentially invalid or inconsistent state."
5,5,EVP_CIPHER_param_to_asn1_APIName and EVP_CIPHER_asn1_to_param_APIName return 1 for success or zero for failure,,,null,EVP_CIPHER_param_to_asn1_APIName and EVP_CIPHER_asn1_to_param_APIName return 1 for success or zero for failure.,EVP_CIPHER_param_to_asn1_APIName and EVP_CIPHER_asn1_to_param_APIName return 1 for success or zero for failure.
5,5,"SSL_CTX_set_tlsext_status_cb_APIName, SSL_CTX_set_tlsext_status_arg_APIName, SSL_set_tlsext_status_type_APIName and SSL_set_tlsext_status_ocsp_resp_APIName return 0 on error or 1 on success",,,null,"SSL_CTX_set_tlsext_status_cb_APIName, SSL_CTX_set_tlsext_status_arg_APIName, SSL_set_tlsext_status_type_APIName and SSL_set_tlsext_status_ocsp_resp_APIName return 0 on error or 1 on success.","SSL_CTX_set_tlsext_status_cb_APIName, SSL_CTX_set_tlsext_status_arg_APIName, SSL_set_tlsext_status_type_APIName and SSL_set_tlsext_status_ocsp_resp_APIName return 0 on error or 1 on success."
5,-1,SSL_select_next_proto_APIName returns one of the following,,,null,SSL_select_next_proto_APIName returns one of the following:,SSL_select_next_proto_APIName returns one of the following:
5,5,EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName return 1 for success and 0 or a negative value for failure.,EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,SMIME_write_PKCS7_APIName returns 1 for success or 0 for failure,,,null,SMIME_write_PKCS7_APIName returns 1 for success or 0 for failure.,SMIME_write_PKCS7_APIName returns 1 for success or 0 for failure.
5,5,EVP_CipherInit_ex_APIName and EVP_CipherUpdate_APIName return 1 for success and 0 for failure,,,null,EVP_CipherInit_ex_APIName and EVP_CipherUpdate_APIName return 1 for success and 0 for failure.,EVP_CipherInit_ex_APIName and EVP_CipherUpdate_APIName return 1 for success and 0 for failure. EVP_CipherFinal_ex_APIName returns 0 for a decryption failure or 1 for success.
5,5,"BN_mod_inverse_APIName returns the BN_mod_inverse_APIParam_1 containing the inverse, and NULL on error",,,null,"BN_mod_inverse_APIName returns the BN_mod_inverse_APIParam_1 containing the inverse, and NULL on error.","BN_mod_inverse_APIName returns the BN_mod_inverse_APIParam_1 containing the inverse, and NULL on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,EVP_CipherFinal_ex_APIName returns 0 for a decryption failure or 1 for success,,,null,EVP_CipherFinal_ex_APIName returns 0 for a decryption failure or 1 for success.,EVP_CipherInit_ex_APIName and EVP_CipherUpdate_APIName return 1 for success and 0 for failure. EVP_CipherFinal_ex_APIName returns 0 for a decryption failure or 1 for success.
5,5,CMS_SignerInfo_cert_cmp_APIName  returns zero if the comparison is successful and non zero if not,,,null,CMS_SignerInfo_cert_cmp_APIName  returns zero if the comparison is successful and non zero if not.,CMS_SignerInfo_cert_cmp_APIName compares the certificate CMS_SignerInfo_cert_cmp_APIParam_2 against the signer identifier CMS_SignerInfo_cert_cmp_APIParam_1. CMS_SignerInfo_cert_cmp_APIName  returns zero if the comparison is successful and non zero if not.
5,5,These functions all return 1 for success and 0 or a negative value for failure,,,null,These functions all return 1 for success and 0 or a negative value for failure.,These functions all return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,"When called on a client SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1, SSL_get_shared_curve_APIName has no meaning and returns -1",,,null,"When called on a client SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1, SSL_get_shared_curve_APIName has no meaning and returns -1.","When called on a client SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1, SSL_get_shared_curve_APIName has no meaning and returns -1."
5,5,ASN1_TIME_print_APIName returns 1 if the time is successfully printed out and 0 if an error occurred,,,null,ASN1_TIME_print_APIName returns 1 if the time is successfully printed out and 0 if an error occurred (I/O error or invalid time format).,ASN1_TIME_print_APIName returns 1 if the time is successfully printed out and 0 if an error occurred (I/O error or invalid time format).
5,5,"All other functions return 1 for success, 0 on error",,,null,"All other functions return 1 for success, 0 on error.","All other functions return 1 for success, 0 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,SSL_CTX_add_extra_chain_cert_APIName and SSL_CTX_clear_extra_chain_certs_APIName return 1 on success and 0 for failure,,,null,SSL_CTX_add_extra_chain_cert_APIName and SSL_CTX_clear_extra_chain_certs_APIName return 1 on success and 0 for failure.,SSL_CTX_add_extra_chain_cert_APIName and SSL_CTX_clear_extra_chain_certs_APIName return 1 on success and 0 for failure. Check out the error stack to find out the reason for failure.
5,5,"BN_cmp_APIName returns -1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 < BN_cmp_APIParam_2 BN_ucmp_APIParam_2, 0 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 == BN_cmp_APIParam_2 BN_ucmp_APIParam_2 and 1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 > BN_cmp_APIParam_2 BN_ucmp_APIParam_2",,,null,"BN_cmp_APIName returns -1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 < BN_cmp_APIParam_2 BN_ucmp_APIParam_2, 0 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 == BN_cmp_APIParam_2 BN_ucmp_APIParam_2 and 1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 > BN_cmp_APIParam_2 BN_ucmp_APIParam_2.","BN_cmp_APIName returns -1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 < BN_cmp_APIParam_2 BN_ucmp_APIParam_2, 0 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 == BN_cmp_APIParam_2 BN_ucmp_APIParam_2 and 1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 > BN_cmp_APIParam_2 BN_ucmp_APIParam_2. BN_ucmp_APIName is the same using the absolute values of BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2."
5,5,"DES_is_weak_key_APIName returns 1 if the passed key is a weak key, 0 if the passed key is ok",,,null,"DES_is_weak_key_APIName returns 1 if the passed key is a weak key, 0 if the passed key is ok.","DES_is_weak_key_APIName returns 1 if the passed key is a weak key, 0 if the passed key is ok."
5,5,-1 is returned,1,,"If the parity is wrong,","If the parity is wrong, then -1 is returned.","DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key. If the parity is wrong, then -1 is returned. If the key is a weak key, then -2 is returned. If an error is returned, the key schedule is not generated."
5,5,ECDSA_sign_setup_APIName and ECDSA_sign_APIName return 1 if successful or 0 on error,,,null,ECDSA_sign_setup_APIName and ECDSA_sign_APIName return 1 if successful or 0 on error.,ECDSA_sign_setup_APIName and ECDSA_sign_APIName return 1 if successful or 0 on error.
5,5,-2 is returned,1,,"If the key is a weak key,","If the key is a weak key, then -2 is returned.","DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key. If the parity is wrong, then -1 is returned. If the key is a weak key, then -2 is returned. If an error is returned, the key schedule is not generated."
5,5,"If the allocation fails, X509_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, X509_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, X509_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise X509_new_APIName returns a pointer to the newly allocated structure."
5,5,EVP_CIPHER_CTX_cleanup_APIName returns 1 for success and 0 for failure,,,null,EVP_CIPHER_CTX_cleanup_APIName returns 1 for success and 0 for failure.,EVP_CIPHER_CTX_cleanup_APIName returns 1 for success and 0 for failure.
5,5,These functions return 1 for success and a zero or negative value for failure,,,null,These functions return 1 for success and a zero or negative value for failure.,"These functions return 1 for success and a zero or negative value for failure. If module errors are not ignored ,the return code will reflect the return value of the failing module (this will always be zero or negative)."
5,5,BIO_new_socket_APIName returns the newly allocated BIO or NULL is an error occurred,,,null,BIO_new_socket_APIName returns the newly allocated BIO or NULL is an error occurred.,BIO_new_socket_APIName returns the newly allocated BIO or NULL is an error occurred.
5,5,These functions EVP_PKEY_copy_parameters_APIName returns 1 for success and 0 for failure,,,null,These functions EVP_PKEY_copy_parameters_APIName returns 1 for success and 0 for failure.,These functions EVP_PKEY_copy_parameters_APIName returns 1 for success and 0 for failure.
5,0,CMS_get1_ReceiptRequest_APIName returns 1 is a signed receipt request is found and decoded,,,null,CMS_get1_ReceiptRequest_APIName returns 1 is a signed receipt request is found and decoded.,CMS_get1_ReceiptRequest_APIName returns 1 is a signed receipt request is found and decoded. CMS_get1_ReceiptRequest_APIName returns 0 if a signed receipt request is not present and -1 if it is present but malformed.
5,5,CMS_get1_ReceiptRequest_APIName returns 0 if a signed receipt request is not present and -1 if it is present but malformed,,,null,CMS_get1_ReceiptRequest_APIName returns 0 if a signed receipt request is not present and -1 if it is present but malformed.,CMS_get1_ReceiptRequest_APIName returns 1 is a signed receipt request is found and decoded. CMS_get1_ReceiptRequest_APIName returns 0 if a signed receipt request is not present and -1 if it is present but malformed.
5,5,SSL_CTX_add_client_custom_ext_APIName and SSL_CTX_add_server_custom_ext_APIName return 1 for success and 0 for failure,,,null,SSL_CTX_add_client_custom_ext_APIName and SSL_CTX_add_server_custom_ext_APIName return 1 for success and 0 for failure.,"SSL_CTX_add_client_custom_ext_APIName and SSL_CTX_add_server_custom_ext_APIName return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure)."
5,5,All other functions return 1 for success and 0 for failure,,,null,All other functions return 1 for success and 0 for failure.,All other functions return 1 for success and 0 for failure.
5,5,"BN_add_word_APIName, BN_sub_word_APIName and BN_mul_word_APIName return 1 for success, 0 on error",,,null,"BN_add_word_APIName, BN_sub_word_APIName and BN_mul_word_APIName return 1 for success, 0 on error.","BN_add_word_APIName, BN_sub_word_APIName and BN_mul_word_APIName return 1 for success, 0 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,SSL_get_servername_APIName returns a servername extension value of the specified type if provided in the Client Hello or NULL,,,null,SSL_get_servername_APIName returns a servername extension value of the specified type if provided in the Client Hello or NULL.,SSL_get_servername_APIName returns a servername extension value of the specified type if provided in the Client Hello or NULL.
5,-1,The following functions return 1 on success or 0 on error,,,null,"The following functions return 1 on success or 0 on error: EC_POINT_copy, EC_POINT_set_to_infinity, EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_get_Jprojective_coordinates_GFp, EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m, EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point.","The following functions return 1 on success or 0 on error: EC_POINT_copy, EC_POINT_set_to_infinity, EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_get_Jprojective_coordinates_GFp, EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m, EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point."
5,5,"BIO_new_bio_pair_APIName returns 1 on success, with the new BIOs available in BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3, or 0 on failure, with NULL pointers stored into the locations for BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3",,,null,"BIO_new_bio_pair_APIName returns 1 on success, with the new BIOs available in BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3, or 0 on failure, with NULL pointers stored into the locations for BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3.","BIO_new_bio_pair_APIName returns 1 on success, with the new BIOs available in BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3, or 0 on failure, with NULL pointers stored into the locations for BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3. Check the error stack for more information."
5,5,"EC_POINT_point2hex returns a pointer to the hex string, or NULL on error",,,null,"EC_POINT_point2hex returns a pointer to the hex string, or NULL on error.","EC_POINT_point2hex returns a pointer to the hex string, or NULL on error."
5,5,SSL_get_tlsext_status_ocsp_resp_APIName returns the length of the OCSP response data or -1 if there is no OCSP response data,,,null,SSL_get_tlsext_status_ocsp_resp_APIName returns the length of the OCSP response data or -1 if there is no OCSP response data.,SSL_get_tlsext_status_ocsp_resp_APIName returns the length of the OCSP response data or -1 if there is no OCSP response data.
5,5,"DSA_do_sign_APIName returns the signature, NULL on error",,,null,"DSA_do_sign_APIName returns the signature, NULL on error.","DSA_do_sign_APIName returns the signature, NULL on error. DSA_do_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,"DSA_do_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error",,,null,"DSA_do_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error.","DSA_do_sign_APIName returns the signature, NULL on error. DSA_do_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,"X509_set1_notBefore_APIName, X509_set1_notAfter_APIName, X509_CRL_set1_lastUpdate_APIName and X509_CRL_set1_nextUpdate_APIName return 1 for success or 0 for failure",,,null,"X509_set1_notBefore_APIName, X509_set1_notAfter_APIName, X509_CRL_set1_lastUpdate_APIName and X509_CRL_set1_nextUpdate_APIName return 1 for success or 0 for failure.","X509_set1_notBefore_APIName, X509_set1_notAfter_APIName, X509_CRL_set1_lastUpdate_APIName and X509_CRL_set1_nextUpdate_APIName return 1 for success or 0 for failure."
5,5,"If there is no curve name associated with a curve ,then EC_GROUP_get_curve_name will return 0",,,null,"If there is no curve name associated with a curve ,then EC_GROUP_get_curve_name will return 0.","EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name, EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and EC_GROUP_get_degree return the order, cofactor, curve name (NID), ASN1 flag, point_conversion_form and degree for the specified curve respectively. If there is no curve name associated with a curve ,then EC_GROUP_get_curve_name will return 0."
5,0,X509_STORE_CTX_get0_param_APIName returns a pointer to an X509_STORE_CTX_get0_param_APIParam_0 structure or NULL if an error occurred,,,null,X509_STORE_CTX_get0_param_APIName returns a pointer to an X509_STORE_CTX_get0_param_APIParam_0 structure or NULL if an error occurred.,X509_STORE_CTX_get0_param_APIName returns a pointer to an X509_STORE_CTX_get0_param_APIParam_0 structure or NULL if an error occurred.
5,5,"EVP_EncryptInit_ex_APIName, EVP_EncryptUpdate_APIName and EVP_EncryptFinal_ex_APIName return 1 for success and 0 for failure",,,null,"EVP_EncryptInit_ex_APIName, EVP_EncryptUpdate_APIName and EVP_EncryptFinal_ex_APIName return 1 for success and 0 for failure.","EVP_EncryptInit_ex_APIName, EVP_EncryptUpdate_APIName and EVP_EncryptFinal_ex_APIName return 1 for success and 0 for failure."
5,5,CMS_ReceiptRequest_create0_APIName returns a signed receipt request structure or NULL if an error occurred,,,null,CMS_ReceiptRequest_create0_APIName returns a signed receipt request structure or NULL if an error occurred.,CMS_ReceiptRequest_create0_APIName returns a signed receipt request structure or NULL if an error occurred.
5,5,The parsed CMS_ContentInfo structure is returned or NULL if an error occurred,,,null,The parsed CMS_ContentInfo structure is returned or NULL if an error occurred.,The parsed CMS_ContentInfo structure is returned or NULL if an error occurred.
5,5,BN_BLINDING_create_param_APIName returns the newly created BN_BLINDING_create_param_APIParam_1 parameters or NULL on error,,,null,BN_BLINDING_create_param_APIName returns the newly created BN_BLINDING_create_param_APIParam_1 parameters or NULL on error.,BN_BLINDING_create_param_APIName returns the newly created BN_BLINDING_create_param_APIParam_1 parameters or NULL on error.
5,5,EVP_OpenInit_APIName returns 0 on error or a non zero integer  if successful,,,null,EVP_OpenInit_APIName returns 0 on error or a non zero integer (actually the recovered secret key size) if successful.,EVP_OpenInit_APIName returns 0 on error or a non zero integer (actually the recovered secret key size) if successful.
5,5,NULL is returned if there is no such value in the hash table,,,null,NULL is returned if there is no such value in the hash table.,lh_<type>_delete_APIName returns the entry being deleted. NULL is returned if there is no such value in the hash table.
5,5,"If an error occurred ,then NULL is returned",,,null,"If an error occurred ,then NULL is returned.","d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
5,5,"X509_check_private_key_APIName and X509_REQ_check_private_key_APIName return 1 if the keys match each other, and 0 if not",,,null,"X509_check_private_key_APIName and X509_REQ_check_private_key_APIName return 1 if the keys match each other, and 0 if not.","X509_check_private_key_APIName and X509_REQ_check_private_key_APIName return 1 if the keys match each other, and 0 if not."
5,5,BIO_set_buffer_read_data_APIName returns 1 if the data was set correctly or 0 if there was an error,,,null,BIO_set_buffer_read_data_APIName returns 1 if the data was set correctly or 0 if there was an error.,BIO_set_buffer_read_data_APIName returns 1 if the data was set correctly or 0 if there was an error.
5,5,"Call SSL_get_cipher_list_APIName with SSL_get_cipher_list_APIParam_2 starting from 0 to obtain the sorted list of available ciphers, until NULL is returned",,,null,"Call SSL_get_cipher_list_APIName with SSL_get_cipher_list_APIParam_2 starting from 0 to obtain the sorted list of available ciphers, until NULL is returned.","Call SSL_get_cipher_list_APIName with SSL_get_cipher_list_APIParam_2 starting from 0 to obtain the sorted list of available ciphers, until NULL is returned."
5,5,EVP_DecodeBlock_APIName returns the length of the data decoded or -1 on error,,,null,EVP_DecodeBlock_APIName returns the length of the data decoded or -1 on error.,EVP_DecodeBlock_APIName returns the length of the data decoded or -1 on error.
5,5,"a return value of 0 can be returned if an operation is not supported, if an error occurred, if EOF has not been reached and in the case of BIO_seek_APIName on a file BIO for a successful operation",,,null,"In particular a return value of 0 can be returned if an operation is not supported, if an error occurred, if EOF has not been reached and in the case of BIO_seek_APIName on a file BIO for a successful operation.","Some of the return values are ambiguous and care should be taken. In particular a return value of 0 can be returned if an operation is not supported, if an error occurred, if EOF has not been reached and in the case of BIO_seek_APIName on a file BIO for a successful operation."
5,5,lh_<type>_insert_APIName returns NULL both for success and error,,,null,lh_<type>_insert_APIName returns NULL both for success and error.,lh_<type>_insert_APIName returns NULL both for success and error.
5,5,SMIME_read_CMS_APIName returns a valid SMIME_read_CMS_APIParam_0 structure or NULL if an error occurred,,,null,SMIME_read_CMS_APIName returns a valid SMIME_read_CMS_APIParam_0 structure or NULL if an error occurred.,SMIME_read_CMS_APIName returns a valid SMIME_read_CMS_APIParam_0 structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,"HMAC_Init_ex_APIName, HMAC_Update_APIName and HMAC_Final_APIName return 1 for success or 0 if an error occurred",,,null,"HMAC_Init_ex_APIName, HMAC_Update_APIName and HMAC_Final_APIName return 1 for success or 0 if an error occurred.","HMAC_Init_ex_APIName, HMAC_Update_APIName and HMAC_Final_APIName return 1 for success or 0 if an error occurred."
5,5,"EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m return 1 on success or 0 on error",,,null,"EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m return 1 on success or 0 on error.","EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m return 1 on success or 0 on error."
5,5,CMS_verify_APIName returns 1 for a successful verification and zero if an error occurred,,,null,CMS_verify_APIName returns 1 for a successful verification and zero if an error occurred.,CMS_verify_APIName returns 1 for a successful verification and zero if an error occurred.
0,5,The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases,,,null,The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases.,The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases. For example in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way. For other types of BIO they may not be supported.
5,5,EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName return 1 for success and 0 or a negative value for failure.,EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,EC_GROUP_method_of returns the EC_METHOD implementation in use for the given curve or NULL on error,,,null,EC_GROUP_method_of returns the EC_METHOD implementation in use for the given curve or NULL on error.,EC_GROUP_method_of returns the EC_METHOD implementation in use for the given curve or NULL on error.
5,5,"ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the strings, and NULL if none is registered for the error code",,,null,"ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the strings, and NULL if none is registered for the error code.","ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the strings, and NULL if none is registered for the error code."
5,-1,The following return values can occur,,,null,The following return values can occur:,The following return values can occur:
5,-1,The following strings can be returned,,,null,The following strings can be returned:,The following strings can be returned:
5,5,i2d_ECPKParameters_fp_APIName is similar to i2d_ECPKParameters_APIName except it writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure,,,null,i2d_ECPKParameters_fp_APIName is similar to i2d_ECPKParameters_APIName except it writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure.,i2d_ECPKParameters_fp_APIName is similar to i2d_ECPKParameters_APIName except it writes the encoding of the structure i2d_ECPKParameters_APIParam_1 to BIO ECPKParameters_print_APIParam_1 and it returns 1 for success and 0 for failure.
5,5,A 0 or -1 return is not necessarily an indication of an error,,,null,A 0 or -1 return is not necessarily an indication of an error.,A 0 or -1 return is not necessarily an indication of an error. In particular when the source/sink is non-blocking or of a certain type the source/sink may merely be an indication that no data is currently available and that the application should retry the operation later.
5,5,BN_generate_prime_ex_APIName return 1 on success or 0 on error,,,null,BN_generate_prime_ex_APIName return 1 on success or 0 on error.,BN_generate_prime_ex_APIName return 1 on success or 0 on error.
5,5,EVP_DigestSignInit_APIName EVP_DigestSignUpdate_APIName and EVP_DigestSignaFinal_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_DigestSignInit_APIName EVP_DigestSignUpdate_APIName and EVP_DigestSignaFinal_APIName return 1 for success and 0 or a negative value for failure.,EVP_DigestSignInit_APIName EVP_DigestSignUpdate_APIName and EVP_DigestSignaFinal_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,"BIO_set_read_buffer_size_APIName, BIO_set_write_buffer_size_APIName and BIO_set_buffer_size_APIName return 1 if the buffer was successfully resized or 0 for failure",,,null,"BIO_set_read_buffer_size_APIName, BIO_set_write_buffer_size_APIName and BIO_set_buffer_size_APIName return 1 if the buffer was successfully resized or 0 for failure.","BIO_set_read_buffer_size_APIName, BIO_set_write_buffer_size_APIName and BIO_set_buffer_size_APIName return 1 if the buffer was successfully resized or 0 for failure."
5,5,"EVP_CIPHER_mode_APIName and EVP_CIPHER_CTX_mode_APIName return the block cipher mode EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE or EVP_CIPH_OFB_MODE.",1,,null,"EVP_CIPHER_mode_APIName and EVP_CIPHER_CTX_mode_APIName return the block cipher mode: EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE or EVP_CIPH_OFB_MODE.","EVP_CIPHER_mode_APIName and EVP_CIPHER_CTX_mode_APIName return the block cipher mode: EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE or EVP_CIPH_OFB_MODE. If the cipher is a stream cipher ,then EVP_CIPH_STREAM_CIPHER is returned."
5,5,CMS_verify_receipt_APIName returns 1 for a successful verification and zero if an error occurred,,,null,CMS_verify_receipt_APIName returns 1 for a successful verification and zero if an error occurred.,CMS_verify_receipt_APIName returns 1 for a successful verification and zero if an error occurred.
5,5,SSL_CTX_set_tmp_rsa_APIName and SSL_set_tmp_rsa_APIName do return 1 on success and 0 on failure,,,null,SSL_CTX_set_tmp_rsa_APIName and SSL_set_tmp_rsa_APIName do return 1 on success and 0 on failure.,SSL_CTX_set_tmp_rsa_APIName and SSL_set_tmp_rsa_APIName do return 1 on success and 0 on failure. Check the error queue to find out the reason of failure.
5,5,"If the allocation fails, RSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, RSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, RSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise RSA_new_APIName returns a pointer to the newly allocated structure."
5,5,"SSL_library_init_APIName always returns ""1"", so it is safe to discard the return value",,,null,"SSL_library_init_APIName always returns ""1"", so it is safe to discard the return value.","SSL_library_init_APIName always returns ""1"", so it is safe to discard the return value."
5,5,"The function EVP_PKEY_cmp_parameters_APIName and EVP_PKEY_cmp_APIName return 1 if the keys match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported",,,null,"The function EVP_PKEY_cmp_parameters_APIName and EVP_PKEY_cmp_APIName return 1 if the keys match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.","The function EVP_PKEY_cmp_parameters_APIName and EVP_PKEY_cmp_APIName return 1 if the keys match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported."
5,-1,BN_value_one_APIName returns the constant,,,null,BN_value_one_APIName returns the constant.,"BN_zero_APIName, BN_one_APIName and BN_set_word_APIName return 1 on success, 0 otherwise. BN_value_one_APIName returns the constant."
5,5,CMS_set1_eContentType_APIName returns 1 for success or 0 if an error occurred,,,null,CMS_set1_eContentType_APIName returns 1 for success or 0 if an error occurred.,CMS_set1_eContentType_APIName returns 1 for success or 0 if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,"If the allocation fails, DH_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, DH_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, DH_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DH_new_APIName returns a pointer to the newly allocated structure."
5,5,-1 is returned and the default value will be used,1,,"If no limit has been explicitly set,","If no limit has been explicitly set, -1 is returned and the default value will be used.","SSL_get_verify_depth_APIName returns the verification depth limit currently set in SSL_get_verify_depth_APIParam_1. If no limit has been explicitly set, -1 is returned and the default value will be used."
5,5,X509_STORE_CTX_get_current_cert_APIName returns the cerificate which caused the error or NULL if no certificate is relevant to the error,,,null,X509_STORE_CTX_get_current_cert_APIName returns the cerificate which caused the error or NULL if no certificate is relevant to the error.,X509_STORE_CTX_get_current_cert_APIName returns the cerificate which caused the error or NULL if no certificate is relevant to the error.
5,5,This function will return the length of the data decoded or -1 on error,,,null,This function will return the length of the data decoded or -1 on error.,"EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
5,5,-1 is returned,1,,"If there are no more entries,","If there are no more entries, -1 is returned.","X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3. X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1. If there are no more entries, -1 is returned. If X509_NAME_get_index_by_NID_APIParam_2 is invalid (doesn't correspond to a valid OID) ,then -2 is returned."
0,0,Allow SSL_write to return r with 0 < r < n,,,null,"Allow SSL_write(..., n) to return r with 0 < r < n (ie report success when just a single record has been written).","Allow SSL_write(..., n) to return r with 0 < r < n (ie report success when just a single record has been written). When not set (the default), SSL_write_APIName will only report success once the complete chunk was written. Once SSL_write_APIName returns with r, r bytes have been successfully written and the next call to SSL_write_APIName must only send the n-r bytes left, imitating the behaviour of write_APIName."
5,5,then -2 is returned,1,,"If X509_NAME_get_index_by_NID_APIParam_2 is invalid ,","If X509_NAME_get_index_by_NID_APIParam_2 is invalid (doesn't correspond to a valid OID) ,then -2 is returned.","X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3. X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1. If there are no more entries, -1 is returned. If X509_NAME_get_index_by_NID_APIParam_2 is invalid (doesn't correspond to a valid OID) ,then -2 is returned."
5,5,i2d_X509_bio_APIName and i2d_X509_fp_APIName return 1 for success and 0 if an error occurs The error code can be obtained by ERR_get_error_APIName,,,null,i2d_X509_bio_APIName and i2d_X509_fp_APIName return 1 for success and 0 if an error occurs The error code can be obtained by ERR_get_error_APIName .,i2d_X509_bio_APIName and i2d_X509_fp_APIName return 1 for success and 0 if an error occurs The error code can be obtained by ERR_get_error_APIName .
5,5,EC_POINT_new and EC_POINT_dup return the newly allocated EC_POINT or NULL on error,,,null,EC_POINT_new and EC_POINT_dup return the newly allocated EC_POINT or NULL on error.,EC_POINT_new and EC_POINT_dup return the newly allocated EC_POINT or NULL on error.
5,5,BUF_MEM_new_APIName returns the buffer or NULL on error,,,null,BUF_MEM_new_APIName returns the buffer or NULL on error.,BUF_MEM_new_APIName returns the buffer or NULL on error.
5,5,BIO_flush_APIName returns 1 for success and 0 or -1 for failure,,,null,BIO_flush_APIName returns 1 for success and 0 or -1 for failure.,BIO_flush_APIName returns 1 for success and 0 or -1 for failure.
5,5,EVP_DecryptFinal_ex_APIName returns 0 if the decrypt failed or 1 for success,,,null,EVP_DecryptFinal_ex_APIName returns 0 if the decrypt failed or 1 for success.,EVP_DecryptInit_ex_APIName and EVP_DecryptUpdate_APIName return 1 for success and 0 for failure. EVP_DecryptFinal_ex_APIName returns 0 if the decrypt failed or 1 for success.
5,5,EVP_DecryptInit_ex_APIName and EVP_DecryptUpdate_APIName return 1 for success and 0 for failure,,,null,EVP_DecryptInit_ex_APIName and EVP_DecryptUpdate_APIName return 1 for success and 0 for failure.,EVP_DecryptInit_ex_APIName and EVP_DecryptUpdate_APIName return 1 for success and 0 for failure. EVP_DecryptFinal_ex_APIName returns 0 if the decrypt failed or 1 for success.
5,5,"BIO_set_md_APIName, BIO_get_md_APIName and BIO_md_ctx_APIName return 1 for success and 0 for failure",,,null,"BIO_set_md_APIName, BIO_get_md_APIName and BIO_md_ctx_APIName return 1 for success and 0 for failure.","BIO_set_md_APIName, BIO_get_md_APIName and BIO_md_ctx_APIName return 1 for success and 0 for failure."
5,5,EVP_PKEY_set1_engine_APIName returns 1 for success and 0 for failure,,,null,EVP_PKEY_set1_engine_APIName returns 1 for success and 0 for failure.,EVP_PKEY_set1_engine_APIName returns 1 for success and 0 for failure.
5,5,"If the allocation fails, the allocation returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, the allocation returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","BN_new_APIName returns a pointer to the BN_new_APIParam_0 initialised to the value 0. If the allocation fails, the allocation returns NULL and sets an error code that can be obtained by ERR_get_error_APIName ."
5,5,EVP_DecodeUpdate_APIName returns -1 on error and 0 or 1 on success,,,null,EVP_DecodeUpdate_APIName returns -1 on error and 0 or 1 on success.,EVP_DecodeUpdate_APIName returns -1 on error and 0 or 1 on success. If 0 is returned then no more non-padding base 64 characters are expected.
5,5,RSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails,,,null,RSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails.,RSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise RSA_new_method_APIName returns a pointer to the newly allocated structure.
5,5,"If key generation fails, RSA_generate_key_APIName returns NULL",,,null,"If key generation fails, RSA_generate_key_APIName returns NULL.","If key generation fails, RSA_generate_key_APIName returns NULL."
5,5,EVP_VerifyInit_ex_APIName and EVP_VerifyUpdate_APIName return 1 for success and 0 for failure,,,null,EVP_VerifyInit_ex_APIName and EVP_VerifyUpdate_APIName return 1 for success and 0 for failure.,EVP_VerifyInit_ex_APIName and EVP_VerifyUpdate_APIName return 1 for success and 0 for failure.
5,5,"EVP_PKEY_keygen_init_APIName, EVP_PKEY_paramgen_init_APIName, EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName return 1 for success and 0 or a negative value for failure",,,null,"EVP_PKEY_keygen_init_APIName, EVP_PKEY_paramgen_init_APIName, EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName return 1 for success and 0 or a negative value for failure.","EVP_PKEY_keygen_init_APIName, EVP_PKEY_paramgen_init_APIName, EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm."
5,5,"If SSL_get_cipher_list_APIParam_1 is NULL, no ciphers are available, or there are less ciphers than SSL_get_cipher_list_APIParam_2 available, NULL is returned",,,null,"If SSL_get_cipher_list_APIParam_1 is NULL, no ciphers are available, or there are less ciphers than SSL_get_cipher_list_APIParam_2 available, NULL is returned.","SSL_get_cipher_list_APIName returns a pointer to the name of the SSL_CIPHER listed for SSL_get_cipher_list_APIParam_1 with SSL_get_cipher_list_APIParam_2. If SSL_get_cipher_list_APIParam_1 is NULL, no ciphers are available, or there are less ciphers than SSL_get_cipher_list_APIParam_2 available, NULL is returned."
5,5,The return value for fseek_APIName is 0 for success or -1 if an error occurred this differs from other types of BIO which will typically return 1 for success and a non positive value if an error occurred,,,null,The return value for fseek_APIName is 0 for success or -1 if an error occurred this differs from other types of BIO which will typically return 1 for success and a non positive value if an error occurred.,BIO_reset_APIName and BIO_seek_APIName are implemented using fseek_APIName on the underlying stream. The return value for fseek_APIName is 0 for success or -1 if an error occurred this differs from other types of BIO which will typically return 1 for success and a non positive value if an error occurred.
5,5,"OCSP_resp_get0_signer_APIName returns 1 if the signing certificate was located, or 0 on error",,,null,"OCSP_resp_get0_signer_APIName returns 1 if the signing certificate was located, or 0 on error.","OCSP_resp_get0_signer_APIName returns 1 if the signing certificate was located, or 0 on error."
5,5,"the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next  ENGINE in the list or NULL if at the end  of the list, but in either case the structural reference passed to the function is released on behalf of the caller",,,null,"the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller.","It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned. Eg. the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName. In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so. Eg. the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller."
5,5,CMS_SignerInfo_get0_signer_id_APIName returns 1 for success and 0 for failure,,,null,CMS_SignerInfo_get0_signer_id_APIName returns 1 for success and 0 for failure.,CMS_SignerInfo_get0_signer_id_APIName returns 1 for success and 0 for failure.
5,5,"SSL_CTX_set_alpn_protos_APIName and SSL_set_alpn_protos_APIName return 0 on success, and non-0 on failure",,,null,"SSL_CTX_set_alpn_protos_APIName and SSL_set_alpn_protos_APIName return 0 on success, and non-0 on failure.","SSL_CTX_set_alpn_protos_APIName and SSL_set_alpn_protos_APIName return 0 on success, and non-0 on failure. WARNING: these functions reverse the return value convention."
5,5,CMS_RecipientInfo_ktri_cert_cmp_APIName returns zero if the comparison is successful and non zero if not,,,null,CMS_RecipientInfo_ktri_cert_cmp_APIName returns zero if the comparison is successful and non zero if not.,"CMS_RecipientInfo_ktri_cert_cmp_APIName compares the certificate CMS_RecipientInfo_ktri_cert_cmp_APIParam_2 against the CMS_RecipientInfo structure CMS_RecipientInfo_ktri_cert_cmp_APIParam_1, which must be of type CMS_RECIPINFO_TRANS. CMS_RecipientInfo_ktri_cert_cmp_APIName returns zero if the comparison is successful and non zero if not."
5,5,All functions can also return -2 if the input is malformed,,,null,All functions can also return -2 if the input is malformed.,"All functions can also return -2 if the input is malformed. For example, X509_check_host_APIName returns -2 if the provided X509_check_host_APIParam_2 contains embedded NULs."
5,5,"EVP_SignInit_ex_APIName, EVP_SignUpdate_APIName and EVP_SignFinal_APIName return 1 for success and 0 for failure",,,null,"EVP_SignInit_ex_APIName, EVP_SignUpdate_APIName and EVP_SignFinal_APIName return 1 for success and 0 for failure.","EVP_SignInit_ex_APIName, EVP_SignUpdate_APIName and EVP_SignFinal_APIName return 1 for success and 0 for failure."
5,5,A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error,,,null,A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
5,5,X509_check_host_APIName returns -2 if the provided X509_check_host_APIParam_2 contains embedded NULs,,,null,"For example, X509_check_host_APIName returns -2 if the provided X509_check_host_APIParam_2 contains embedded NULs.","All functions can also return -2 if the input is malformed. For example, X509_check_host_APIName returns -2 if the provided X509_check_host_APIParam_2 contains embedded NULs."
5,5,"BIO_set_APIName, BIO_free_APIName return 1 for success and 0 for failure",,,null,"BIO_set_APIName, BIO_free_APIName return 1 for success and 0 for failure.","BIO_set_APIName, BIO_free_APIName return 1 for success and 0 for failure."
5,5,HMAC_APIName returns a pointer to the message authentication code or NULL if an error occurred,,,null,HMAC_APIName returns a pointer to the message authentication code or NULL if an error occurred.,HMAC_APIName returns a pointer to the message authentication code or NULL if an error occurred.
5,5,X509_STORE_CTX_set_default_APIName returns 1 for success or 0 if an error occurred,,,null,X509_STORE_CTX_set_default_APIName returns 1 for success or 0 if an error occurred.,X509_STORE_CTX_set_default_APIName returns 1 for success or 0 if an error occurred.
5,5,SSL_get_psk_identity_hint_APIName may return NULL if no PSK identity hint was used during the connection setup,,,null,SSL_get_psk_identity_hint_APIName may return NULL if no PSK identity hint was used during the connection setup.,"If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity. Both are NULL-terminated. SSL_get_psk_identity_hint_APIName may return NULL if no PSK identity hint was used during the connection setup."
5,5,On error 0 is returned by EC_GROUP_set_seed,2,,null,On error 0 is returned.,"EC_GROUP_set_seed returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1. On error 0 is returned."
5,5,"BN_print_fp_APIName and BN_print_APIName return 1 on success, 0 on write errors",,,null,"BN_print_fp_APIName and BN_print_APIName return 1 on success, 0 on write errors.","BN_print_fp_APIName and BN_print_APIName return 1 on success, 0 on write errors."
5,-1,The following values are returned by all functions,,,null,The following values are returned by all functions:,The following values are returned by all functions:
5,5,PKCS7_verify_APIName returns one for a successful verification and zero if an error occurs,,,null,PKCS7_verify_APIName returns one for a successful verification and zero if an error occurs.,PKCS7_verify_APIName returns one for a successful verification and zero if an error occurs.
5,5,0 is returned,1,,"If the PRNG could not generate a secure key,","If the PRNG could not generate a secure key, 0 is returned.","DES_random_key_APIName generates a random key. The PRNG must be seeded prior to using this function (see rand_APIName ). If the PRNG could not generate a secure key, 0 is returned."
5,5,the return value will be 1,1,,"If the supplied seed is NULL, or the supplied seed length is 0,","If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1.","EC_GROUP_set_seed returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1. On error 0 is returned."
5,5,EVP_OpenUpdate_APIName returns 1 for success or 0 for failure,,,null,EVP_OpenUpdate_APIName returns 1 for success or 0 for failure.,EVP_OpenUpdate_APIName returns 1 for success or 0 for failure.
5,5,"BN_RECP_CTX_new_APIName returns the newly allocated BN_RECP_CTX_new_APIParam_0, and NULL on error",,,null,"BN_RECP_CTX_new_APIName returns the newly allocated BN_RECP_CTX_new_APIParam_0, and NULL on error.","BN_RECP_CTX_new_APIName returns the newly allocated BN_RECP_CTX_new_APIParam_0, and NULL on error."
5,5,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName return 1 for success and 0 for failure,,,null,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName return 1 for success and 0 for failure.,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName return 1 for success and 0 for failure.
5,5,PKCS7_get0_signers_APIName returns all signers or NULL if an error occurred,,,null,PKCS7_get0_signers_APIName returns all signers or NULL if an error occurred.,PKCS7_get0_signers_APIName returns all signers or NULL if an error occurred.
5,5,"EVP_VerifyFinal_APIName returns 1 for a correct signature, 0 for failure and -1 if some other error occurred",,,null,"EVP_VerifyFinal_APIName returns 1 for a correct signature, 0 for failure and -1 if some other error occurred.","EVP_VerifyFinal_APIName returns 1 for a correct signature, 0 for failure and -1 if some other error occurred."
5,5,"BN_copy_APIName returns BN_copy_APIParam_1 on success, NULL on error",,,null,"BN_copy_APIName returns BN_copy_APIParam_1 on success, NULL on error.","BN_copy_APIName returns BN_copy_APIParam_1 on success, NULL on error. BN_dup_APIName returns the new BN_copy_APIParam_1 BN_dup_APIParam_1, and NULL on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,"BN_dup_APIName returns the new BN_copy_APIParam_1 BN_dup_APIParam_1, and NULL on error",,,null,"BN_dup_APIName returns the new BN_copy_APIParam_1 BN_dup_APIParam_1, and NULL on error.","BN_copy_APIName returns BN_copy_APIParam_1 on success, NULL on error. BN_dup_APIName returns the new BN_copy_APIParam_1 BN_dup_APIParam_1, and NULL on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,"If SSL_get_cipher_list_APIParam_1 is NULL or no ciphers are available, NULL is returned",,,null,"If SSL_get_cipher_list_APIParam_1 is NULL or no ciphers are available, NULL is returned.","SSL_get_ciphers_APIName returns the stack of available SSL_CIPHERs for SSL_get_cipher_list_APIParam_1, sorted by preference. If SSL_get_cipher_list_APIParam_1 is NULL or no ciphers are available, NULL is returned."
5,-1,NULL is returned on normal operation and on error by  lh_<type>_insert_APIName,2,,null,NULL is returned on normal operation and on error.,"When a hash table entry is replaced, lh_<type>_insert_APIName returns the value being replaced. NULL is returned on normal operation and on error."
5,-1,A new NID is returned for the created object in case of success and NID_undef in case of failure,,,null,A new NID is returned for the created object in case of success and NID_undef in case of failure.,"OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure."
5,5,All these functions return 1 for success and 0 for failure,,,null,All these functions return 1 for success and 0 for failure.,All these functions return 1 for success and 0 for failure.
5,5,X509_cmp_time_APIName returns 0 on error,,,null,X509_cmp_time_APIName returns 0 on error.,"X509_cmp_time_APIName returns -1 if X509_cmp_time_APIParam_1 is earlier than, or equal to, X509_cmp_time_APIParam_2, and 1 otherwise. X509_cmp_time_APIName returns 0 on error."
5,5,"CMS_get0_RecipientInfos_APIName returns all CMS_RecipientInfo structures, or NULL if an error occurs",,,null,"CMS_get0_RecipientInfos_APIName returns all CMS_RecipientInfo structures, or NULL if an error occurs.","CMS_get0_RecipientInfos_APIName returns all CMS_RecipientInfo structures, or NULL if an error occurs."
5,5,"BN_bin2bn_APIName returns the BN_bn2bin_APIParam_1 BN_bin2bn_APIParam_3, NULL on error",,,null,"BN_bin2bn_APIName returns the BN_bn2bin_APIParam_1 BN_bin2bn_APIParam_3, NULL on error.","BN_bn2bin_APIName returns the length of the big-endian number placed at BN_bn2bin_APIParam_2. BN_bin2bn_APIName returns the BN_bn2bin_APIParam_1 BN_bin2bn_APIParam_3, NULL on error."
5,5,EVP_OpenFinal_APIName returns 0 if the decrypt failed or 1 for success,,,null,EVP_OpenFinal_APIName returns 0 if the decrypt failed or 1 for success.,EVP_OpenFinal_APIName returns 0 if the decrypt failed or 1 for success.
5,5,d2i_ECPrivateKey_APIName returns a valid d2i_ECPrivateKey_APIParam_1 structure or NULL if an error occurs,,,null,d2i_ECPrivateKey_APIName returns a valid d2i_ECPrivateKey_APIParam_1 structure or NULL if an error occurs.,d2i_ECPrivateKey_APIName returns a valid d2i_ECPrivateKey_APIParam_1 structure or NULL if an error occurs. The error code that can be obtained by ERR_get_error_APIName .
5,5,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName return 1 for success and 0 for failure",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName return 1 for success and 0 for failure.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName return 1 for success and 0 for failure."
5,5,DSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails,,,null,DSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails.,DSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise DSA_new_method_APIName returns a pointer to the newly allocated structure.
5,5,SMIME_write_CMS_APIName returns 1 for success or 0 for failure,,,null,SMIME_write_CMS_APIName returns 1 for success or 0 for failure.,SMIME_write_CMS_APIName returns 1 for success or 0 for failure.
5,-1,"On success, the functions return 1",,,null,"On success, the functions return 1.","On success, the functions return 1. On failure, the functions return 0. Check out the error stack to find out the reason."
5,-1,"On failure, the functions return 0",,,null,"On failure, the functions return 0.","On success, the functions return 1. On failure, the functions return 0. Check out the error stack to find out the reason."
5,5,BIO_set_close_APIName always returns 1,,,null,BIO_set_close_APIName always returns 1.,BIO_set_close_APIName always returns 1.
5,5,the returned result code is X509_V_OK,1,,If no peer certificate was presented,"If no peer certificate was presented, the returned result code is X509_V_OK.","If no peer certificate was presented, the returned result code is X509_V_OK. This is because no verification error occurred, it does however not indicate success. SSL_get_verify_result_APIName is only useful in connection with SSL_get_peer_certificate_APIName ."
5,5,"EC_POINT_point2bn returns the pointer to the BIGNUM supplied, or NULL on error",,,null,"EC_POINT_point2bn returns the pointer to the BIGNUM supplied, or NULL on error.","EC_POINT_point2bn returns the pointer to the BIGNUM supplied, or NULL on error."
5,5,"When ""quiet shutdown"" is enabled, SSL_shutdown_APIName will always succeed and return 1",,,null,"When ""quiet shutdown"" is enabled, SSL_shutdown_APIName will always succeed and return 1.","SSL_shutdown_APIName can be modified to only set the connection to ""shutdown"" state but not actually send the ""close notify"" alert messages, see SSL_CTX_set_quiet_shutdown_APIName . When ""quiet shutdown"" is enabled, SSL_shutdown_APIName will always succeed and return 1."
5,-1,"SSL_get_error_APIName returns a result code  for a preceding call to SSL_connect_APIName, SSL_accept_APIName, SSL_do_handshake_APIName, SSL_read_APIName, SSL_peek_APIName, or SSL_write_APIName on SSL_get_error_APIParam_1 SSL_get_error_APIParam_1",,,null,"SSL_get_error_APIName returns a result code (suitable for the C ""switch"" statement) for a preceding call to SSL_connect_APIName, SSL_accept_APIName, SSL_do_handshake_APIName, SSL_read_APIName, SSL_peek_APIName, or SSL_write_APIName on SSL_get_error_APIParam_1 SSL_get_error_APIParam_1.","SSL_get_error_APIName returns a result code (suitable for the C ""switch"" statement) for a preceding call to SSL_connect_APIName, SSL_accept_APIName, SSL_do_handshake_APIName, SSL_read_APIName, SSL_peek_APIName, or SSL_write_APIName on SSL_get_error_APIParam_1 SSL_get_error_APIParam_1. The value returned by that TLS/SSL I/O function must be passed to SSL_get_error_APIName in parameter SSL_get_error_APIParam_2 SSL_get_error_APIParam_2."
5,5,"DH_generate_parameters_APIName  returns a pointer to the DH structure, or NULL if the parameter generation fails",,,null,"DH_generate_parameters_APIName (deprecated) returns a pointer to the DH structure, or NULL if the parameter generation fails.","DH_generate_parameters_APIName (deprecated) returns a pointer to the DH structure, or NULL if the parameter generation fails."
5,-1,SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName have the following return values,,,null,SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName have the following return values:,SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName have the following return values:
5,5,CMS_final_APIName returns 1 for success or 0 for failure,,,null,CMS_final_APIName returns 1 for success or 0 for failure.,CMS_final_APIName returns 1 for success or 0 for failure.
5,-1,SSL_COMP_add_compression_method_APIName may return the following values,,,null,SSL_COMP_add_compression_method_APIName may return the following values:,SSL_COMP_add_compression_method_APIName may return the following values:
5,5,SMIME_read_PKCS7_APIName returns a valid SMIME_read_PKCS7_APIParam_0 structure or NULL if an error occurred,,,null,SMIME_read_PKCS7_APIName returns a valid SMIME_read_PKCS7_APIParam_0 structure or NULL if an error occurred.,SMIME_read_PKCS7_APIName returns a valid SMIME_read_PKCS7_APIParam_0 structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
5,5,OCSP_resp_find_APIName returns the index of OCSP_resp_find_APIParam_2 in OCSP_resp_find_APIParam_1  or -1 if OCSP_resp_find_APIParam_2 was not found,,,null,OCSP_resp_find_APIName returns the index of OCSP_resp_find_APIParam_2 in OCSP_resp_find_APIParam_1 (which may be 0) or -1 if OCSP_resp_find_APIParam_2 was not found.,OCSP_resp_find_APIName returns the index of OCSP_resp_find_APIParam_2 in OCSP_resp_find_APIParam_1 (which may be 0) or -1 if OCSP_resp_find_APIParam_2 was not found.
5,5,"DSA_generate_parameters_APIName returns a pointer to the DSA structure, or NULL if the parameter generation fails",,,null,"DSA_generate_parameters_APIName returns a pointer to the DSA structure, or NULL if the parameter generation fails.","DSA_generate_parameters_APIName returns a pointer to the DSA structure, or NULL if the parameter generation fails."
5,5,OBJ_nid2ln_APIName and OBJ_nid2sn_APIName returns a valid string or NULL on error,,,null,OBJ_nid2ln_APIName and OBJ_nid2sn_APIName returns a valid string or NULL on error.,OBJ_nid2ln_APIName and OBJ_nid2sn_APIName returns a valid string or NULL on error.
5,5,EVP_DecodeFinal_APIName returns -1 on error or 1 on success,,,null,EVP_DecodeFinal_APIName returns -1 on error or 1 on success.,EVP_DecodeFinal_APIName returns -1 on error or 1 on success.
5,5,The context returned by BIO_get_md_ctx_APIName can be used in calls to EVP_DigestFinal_APIName and also the signature routines EVP_SignFinal_APIName and EVP_VerifyFinal_APIName,,,null,The context returned by BIO_get_md_ctx_APIName can be used in calls to EVP_DigestFinal_APIName and also the signature routines EVP_SignFinal_APIName and EVP_VerifyFinal_APIName.,The context returned by BIO_get_md_ctx_APIName can be used in calls to EVP_DigestFinal_APIName and also the signature routines EVP_SignFinal_APIName and EVP_VerifyFinal_APIName.
5,5,"All EC_GROUP_new functions return a pointer to the newly constructed group, or NULL on error",,,null,"All EC_GROUP_new* functions return a pointer to the newly constructed group, or NULL on error.","All EC_GROUP_new* functions return a pointer to the newly constructed group, or NULL on error."
5,5,BIO_set_fd_APIName always returns 1,,,null,BIO_set_fd_APIName always returns 1.,BIO_set_fd_APIName always returns 1.
5,5,PKCS12_parse_APIName returns 1 for success and zero if an error occurred,,,null,PKCS12_parse_APIName returns 1 for success and zero if an error occurred.,PKCS12_parse_APIName returns 1 for success and zero if an error occurred.
5,5,X509_STORE_CTX_init_APIName returns 1 for success or 0 if an error occurred,,,null,X509_STORE_CTX_init_APIName returns 1 for success or 0 if an error occurred.,X509_STORE_CTX_init_APIName returns 1 for success or 0 if an error occurred.
5,5,X509_STORE_CTX_new_APIName returns an newly allocates context or NULL is an error occurred,,,null,X509_STORE_CTX_new_APIName returns an newly allocates context or NULL is an error occurred.,X509_STORE_CTX_new_APIName returns an newly allocates context or NULL is an error occurred.
5,5,SSL_has_matching_session_id_APIName returns 1 if another session with the same id is already in the cache,,,null,SSL_has_matching_session_id_APIName returns 1 if another session with the same id is already in the cache.,SSL_has_matching_session_id_APIName returns 1 if another session with the same id is already in the cache.
5,5,"If the allocation fails, DSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, DSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, DSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DSA_new_APIName returns a pointer to the newly allocated structure."
5,5,SSL_SESSION_set_time_APIName and SSL_SESSION_set_timeout_APIName return 1 on success,,,null,SSL_SESSION_set_time_APIName and SSL_SESSION_set_timeout_APIName return 1 on success.,SSL_SESSION_set_time_APIName and SSL_SESSION_set_timeout_APIName return 1 on success.
5,5,"BIO_eof_APIName returns 1 if the BIO has read EOF, the precise meaning of ""EOF"" varies according to the BIO type",,,null,"BIO_eof_APIName returns 1 if the BIO has read EOF, the precise meaning of ""EOF"" varies according to the BIO type.","BIO_eof_APIName returns 1 if the BIO has read EOF, the precise meaning of ""EOF"" varies according to the BIO type."
5,5,"EC_GROUP_cmp returns 0 if the curves are equal, 1 if they are not equal, or -1 on error",,,null,"EC_GROUP_cmp returns 0 if the curves are equal, 1 if they are not equal, or -1 on error.","EC_GROUP_cmp returns 0 if the curves are equal, 1 if they are not equal, or -1 on error."
5,5,"DSA_sign_APIName and DSA_sign_setup_APIName return 1 on success, 0 on error",,,null,"DSA_sign_APIName and DSA_sign_setup_APIName return 1 on success, 0 on error.","DSA_sign_APIName and DSA_sign_setup_APIName return 1 on success, 0 on error. DSA_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,ASN1_generate_nconf_APIName and ASN1_generate_v3_APIName return the encoded data as an ASN1_generate_nconf_APIParam_0 ASN1_generate_v3_APIParam_0 structure or NULL if an error occurred,,,null,ASN1_generate_nconf_APIName and ASN1_generate_v3_APIName return the encoded data as an ASN1_generate_nconf_APIParam_0 ASN1_generate_v3_APIParam_0 structure or NULL if an error occurred.,ASN1_generate_nconf_APIName and ASN1_generate_v3_APIName return the encoded data as an ASN1_generate_nconf_APIParam_0 ASN1_generate_v3_APIParam_0 structure or NULL if an error occurred.
5,5,BIO_set_fp_APIName and BIO_get_fp_APIName return 1 for success or 0 for failure,,,null,BIO_set_fp_APIName and BIO_get_fp_APIName return 1 for success or 0 for failure (although the current implementation never return 0).,BIO_set_fp_APIName and BIO_get_fp_APIName return 1 for success or 0 for failure (although the current implementation never return 0).
5,5,"DSA_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error",,,null,"DSA_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error.","DSA_sign_APIName and DSA_sign_setup_APIName return 1 on success, 0 on error. DSA_verify_APIName returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by ERR_get_error_APIName ."
5,5,EVP_DecodeFinal_APIName will return -1,2,,null,The function will return -1 in this case.,"EVP_DecodeFinal_APIName must be called at the end of a decoding operation. If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1, then the input data must not have been a multiple of 4 and therefore an error has occurred. The function will return -1 in this case. Otherwise the function returns 1 on success."
5,5,Otherwise EVP_DecodeFinal_APIName returns 1 on success,2,,null,Otherwise the function returns 1 on success.,"EVP_DecodeFinal_APIName must be called at the end of a decoding operation. If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1, then the input data must not have been a multiple of 4 and therefore an error has occurred. The function will return -1 in this case. Otherwise the function returns 1 on success."
5,5,"EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_get_cipherbyname_APIParam_0 structure or NULL on error",,,null,"EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_get_cipherbyname_APIParam_0 structure or NULL on error.","EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_get_cipherbyname_APIParam_0 structure or NULL on error."
5,5,PEM_write_bio_PKCS7_stream_APIName returns 1 for success or 0 for failure,,,null,PEM_write_bio_PKCS7_stream_APIName returns 1 for success or 0 for failure.,PEM_write_bio_PKCS7_stream_APIName returns 1 for success or 0 for failure.
5,5,ASN1_STRING_cmp_APIName compares ASN1_STRING_cmp_APIParam_1 and ASN1_STRING_cmp_APIParam_2 returning 0 if the two are identical,,,null,ASN1_STRING_cmp_APIName compares ASN1_STRING_cmp_APIParam_1 and ASN1_STRING_cmp_APIParam_2 returning 0 if the two are identical.,ASN1_STRING_cmp_APIName compares ASN1_STRING_cmp_APIParam_1 and ASN1_STRING_cmp_APIParam_2 returning 0 if the two are identical. The string types and content are compared.
5,5,BIO_get_fd_APIName returns the socket or -1 if the BIO has not been initialized,,,null,BIO_get_fd_APIName returns the socket or -1 if the BIO has not been initialized.,BIO_get_fd_APIName returns the socket or -1 if the BIO has not been initialized.
5,5,CMS_add1_recipient_cert_APIName and CMS_add0_recipient_key_APIName return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs,,,null,CMS_add1_recipient_cert_APIName and CMS_add0_recipient_key_APIName return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs.,CMS_add1_recipient_cert_APIName and CMS_add0_recipient_key_APIName return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs.
5,5,"OCSP_basic_verify_APIName returns 1 on success, 0 on error, or -1 on fatal error such as malloc failure",,,null,"OCSP_basic_verify_APIName returns 1 on success, 0 on error, or -1 on fatal error such as malloc failure.","OCSP_basic_verify_APIName returns 1 on success, 0 on error, or -1 on fatal error such as malloc failure."
5,5,"EC_KEY_up_ref, EC_KEY_set_group, EC_KEY_set_private_key, EC_KEY_set_public_key, EC_KEY_precompute_mult, EC_KEY_generate_key, EC_KEY_check_key and EC_KEY_set_public_key_affine_coordinates return 1 on success or 0 on error",,,null,"EC_KEY_up_ref, EC_KEY_set_group, EC_KEY_set_private_key, EC_KEY_set_public_key, EC_KEY_precompute_mult, EC_KEY_generate_key, EC_KEY_check_key and EC_KEY_set_public_key_affine_coordinates return 1 on success or 0 on error.","EC_KEY_up_ref, EC_KEY_set_group, EC_KEY_set_private_key, EC_KEY_set_public_key, EC_KEY_precompute_mult, EC_KEY_generate_key, EC_KEY_check_key and EC_KEY_set_public_key_affine_coordinates return 1 on success or 0 on error."
5,5,EC_GROUP_get0_generator returns the generator for the given curve or NULL on error,,,null,EC_GROUP_get0_generator returns the generator for the given curve or NULL on error.,EC_GROUP_get0_generator returns the generator for the given curve or NULL on error.
5,5,"If SSL_CIPHER_get_bits_APIParam_1 is NULL, 0 is returned",,,null,"If SSL_CIPHER_get_bits_APIParam_1 is NULL, 0 is returned.","SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1. If SSL_CIPHER_get_bits_APIParam_2 is not NULL, SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm. If SSL_CIPHER_get_bits_APIParam_1 is NULL, 0 is returned."
5,5,"If a curve does not have a NID associated with it, EC_GROUP_get_curve_name will return 0",,,null,"If a curve does not have a NID associated with it, then EC_GROUP_get_curve_name will return 0.","The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name, set and get the NID for the curve respectively (see EC_GROUP_new_APIName ). If a curve does not have a NID associated with it, then EC_GROUP_get_curve_name will return 0."
5,5,ECDSA_size_APIName returns the maximum length signature or 0 on error,,,null,ECDSA_size_APIName returns the maximum length signature or 0 on error.,ECDSA_size_APIName returns the maximum length signature or 0 on error.
5,5,"RAND_file_name_APIName returns a pointer to RAND_file_name_APIParam_1 on success, and NULL on error",,,null,"RAND_file_name_APIName returns a pointer to RAND_file_name_APIParam_1 on success, and NULL on error.","RAND_file_name_APIName returns a pointer to RAND_file_name_APIParam_1 on success, and NULL on error."
5,5,"Unlike many standard comparison functions, X509_cmp_time returns 0 on error",,,null,"Unlike many standard comparison functions, X509_cmp_time returns 0 on error.","Unlike many standard comparison functions, X509_cmp_time returns 0 on error."
5,5,"EC_POINT_bn2point returns the pointer to the EC_POINT supplied, or NULL on error",,,null,"EC_POINT_bn2point returns the pointer to the EC_POINT supplied, or NULL on error.","EC_POINT_bn2point returns the pointer to the EC_POINT supplied, or NULL on error."
5,5,"RAND_write_file_APIName returns the number of bytes written, and -1 if the bytes written were generated without appropriate seed",,,null,"RAND_write_file_APIName returns the number of bytes written, and -1 if the bytes written were generated without appropriate seed.","RAND_write_file_APIName returns the number of bytes written, and -1 if the bytes written were generated without appropriate seed."
5,5,i2d_X509_bio_APIName is similar to i2d_X509_APIName except i2d_X509_bio_APIName writes the encoding of the structure i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 and i2d_X509_bio_APIName returns 1 for success and 0 for failure,,,null,i2d_X509_bio_APIName is similar to i2d_X509_APIName except i2d_X509_bio_APIName writes the encoding of the structure i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 and i2d_X509_bio_APIName returns 1 for success and 0 for failure.,i2d_X509_bio_APIName is similar to i2d_X509_APIName except i2d_X509_bio_APIName writes the encoding of the structure i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 to BIO i2d_X509_bio_APIParam_1 and i2d_X509_bio_APIName returns 1 for success and 0 for failure.
5,5,"The peer certificate chain is not necessarily available after reusing a session, in which case a NULL pointer is returned",,,null,"The peer certificate chain is not necessarily available after reusing a session, in which case a NULL pointer is returned.","The peer certificate chain is not necessarily available after reusing a session, in which case a NULL pointer is returned."
5,5,SSL_export_keying_material_APIName returns 0 or -1 on failure or 1 on success,,,null,SSL_export_keying_material_APIName returns 0 or -1 on failure or 1 on success.,SSL_export_keying_material_APIName returns 0 or -1 on failure or 1 on success.
5,5,"BN_mpi2bn_APIName returns the BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3, and NULL on error",,,null,"BN_mpi2bn_APIName returns the BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3, and NULL on error.","BN_bn2mpi_APIName returns the length of the representation. BN_mpi2bn_APIName returns the BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3, and NULL on error."
5,5,"i2d_ECPKParameters_bio_APIName, i2d_ECPKParameters_fp_APIName, ECPKParameters_print and ECPKParameters_print_fp return 1 for success and 0 if an error occurs",,,null,"i2d_ECPKParameters_bio_APIName, i2d_ECPKParameters_fp_APIName, ECPKParameters_print and ECPKParameters_print_fp return 1 for success and 0 if an error occurs.","i2d_ECPKParameters_bio_APIName, i2d_ECPKParameters_fp_APIName, ECPKParameters_print and ECPKParameters_print_fp return 1 for success and 0 if an error occurs."
5,5,"If the allocation fails, ASN1_OBJECT_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName",,,null,"If the allocation fails, ASN1_OBJECT_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName .","If the allocation fails, ASN1_OBJECT_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise ASN1_OBJECT_new_APIName returns a pointer to the newly allocated structure."
5,5,"EC_POINT_hex2point returns the pointer to the EC_POINT supplied, or NULL on error",,,null,"EC_POINT_hex2point returns the pointer to the EC_POINT supplied, or NULL on error.","EC_POINT_hex2point returns the pointer to the EC_POINT supplied, or NULL on error."
5,5,EVP_SealUpdate_APIName and EVP_SealFinal_APIName return 1 for success and 0 for failure,,,null,EVP_SealUpdate_APIName and EVP_SealFinal_APIName return 1 for success and 0 for failure.,EVP_SealUpdate_APIName and EVP_SealFinal_APIName return 1 for success and 0 for failure.
5,5,"EC_POINT_point2oct returns the length of the required buffer, or 0 on error",,,null,"EC_POINT_point2oct returns the length of the required buffer, or 0 on error.","EC_POINT_point2oct returns the length of the required buffer, or 0 on error."
5,5,BIO_get_close_APIName returns the close flag value BIO_CLOSE or BIO_NOCLOSE.,1,,null,BIO_get_close_APIName returns the close flag value: BIO_CLOSE or BIO_NOCLOSE.,BIO_get_close_APIName returns the close flag value: BIO_CLOSE or BIO_NOCLOSE.
5,5,CMS_add1_signer_APIName returns NULL ,1,,if an error occurs,CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.,CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.
5,5,NID_undef is returned,1,,If the value SSL_get_shared_curve_APIParam_2 is out of range,"If the value SSL_get_shared_curve_APIParam_2 is out of range, NID_undef is returned.","SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1. If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero. Other than for diagnostic purposes, most applications will only be interested in the first shared curve so SSL_get_shared_curve_APIParam_2 is normally set to zero. If the value SSL_get_shared_curve_APIParam_2 is out of range, NID_undef is returned."
5,5,"a pointer to the constant value ""NONE"" is returned",1,,If the argument is the NULL pointer,"If the argument is the NULL pointer, a pointer to the constant value ""NONE"" is returned.","SSL_CIPHER_get_name_APIName returns a pointer to the name of SSL_CIPHER_get_name_APIParam_1. If the argument is the NULL pointer, a pointer to the constant value ""NONE"" is returned."
5,5,EVP_PKEY_get_default_digest_nid_APIName  returns 0 or a negative value for failure,,,null,EVP_PKEY_get_default_digest_nid_APIName  returns 0 or a negative value for failure.,The EVP_PKEY_get_default_digest_nid_APIName function returns 1 if the message digest is advisory (that is other digests can be used) and 2 if the message digest is mandatory (other digests can not be used). EVP_PKEY_get_default_digest_nid_APIName  returns 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,The EVP_PKEY_get_default_digest_nid_APIName function returns 1 if the message digest is advisory  and 2 if the message digest is mandatory,,,null,The EVP_PKEY_get_default_digest_nid_APIName function returns 1 if the message digest is advisory (that is other digests can be used) and 2 if the message digest is mandatory (other digests can not be used).,The EVP_PKEY_get_default_digest_nid_APIName function returns 1 if the message digest is advisory (that is other digests can be used) and 2 if the message digest is mandatory (other digests can not be used). EVP_PKEY_get_default_digest_nid_APIName  returns 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName return 1 for success and 0 or a negative value for failure,,,null,EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName return 1 for success and 0 or a negative value for failure.,EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
5,5,"BIO_seek_APIName and BIO_tell_APIName both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek_APIName always return 0 for success and -1 for failure",,,null,"BIO_seek_APIName and BIO_tell_APIName both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek_APIName always return 0 for success and -1 for failure.","BIO_seek_APIName and BIO_tell_APIName both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek_APIName always return 0 for success and -1 for failure."
5,5,CRYPTO_get_ex_data returns the application data or 0 on failure,,,null,CRYPTO_get_ex_data() returns the application data or 0 on failure,CRYPTO_get_ex_data() returns the application data or 0 on failure. 0 may also be valid application data but currently it can only fail if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter.
5,5,CRYPTO_set_ex_data returns 1 on success or 0 on failure,,,null,CRYPTO_set_ex_data() returns 1 on success or 0 on failure,CRYPTO_set_ex_data() returns 1 on success or 0 on failure.
5,5,BN_BLINDING_get_flags returns the BN_BLINDING flags,,,null,BN_BLINDING_get_flags() returns the BN_BLINDING flags,BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags.
5,5,EVP_MD_type returns NID_sha1,,,null,For example EVP_MD_type(EVP_sha1()) returns NID_sha1,EVP_MD_type() and EVP_MD_CTX_type() return the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD_type_APIParam_1 structure. For example EVP_MD_type(EVP_sha1()) returns NID_sha1. This function is normally used when setting ASN1 OIDs.
5,5,"Otherwise, EVP_BytesToKey returns the size of the derived key in bytes, or 0 on error",,,null,"Otherwise, EVP_BytesToKey() returns the size of the derived key in bytes, or 0 on error","If data is NULL, then EVP_BytesToKey() returns the number of bytes needed to store the derived key. Otherwise, EVP_BytesToKey() returns the size of the derived key in bytes, or 0 on error."
5,5,d2i_PrivateKey and d2i_AutoPrivateKey return a valid EVP_KEY structure or NULL if an error occurs,,,null,d2i_PrivateKey() and d2i_AutoPrivateKey() return a valid EVP_KEY structure or NULL if an error occurs,d2i_PrivateKey() and d2i_AutoPrivateKey() return a valid EVP_KEY structure or NULL if an error occurs. The error code can be obtained by calling ERR_get_error(3) .
5,5,an RSA key will return EVP_PKEY_RSA,,,null,For example an RSA key will return EVP_PKEY_RSA,EVP_PKEY_base_id() returns the type of EVP_PKEY_base_id_APIParam_1. For example an RSA key will return EVP_PKEY_RSA.
5,5,EVP_PKEY_type will return EVP_PKEY_RSA,,,null,For example EVP_PKEY_type(EVP_PKEY_RSA2) will return EVP_PKEY_RSA,EVP_PKEY_type() returns the underlying type of the NID EVP_PKEY_type_APIParam_1. For example EVP_PKEY_type(EVP_PKEY_RSA2) will return EVP_PKEY_RSA.
5,5,"EVP_PKEY_base_id, EVP_PKEY_id and EVP_PKEY_type return a key type or NID_undef on error",,,null,"EVP_PKEY_base_id(), EVP_PKEY_id() and EVP_PKEY_type() return a key type or NID_undef (equivalently EVP_PKEY_NONE) on error","EVP_PKEY_base_id(), EVP_PKEY_id() and EVP_PKEY_type() return a key type or NID_undef (equivalently EVP_PKEY_NONE) on error."
5,5,RSA_get_ex_new_index returns a new index or -1 on failure,,,null,RSA_get_ex_new_index() returns a new index or -1 on failure (note 0 is a valid index value),RSA_get_ex_new_index() returns a new index or -1 on failure (note 0 is a valid index value).
5,5,RSA_set_ex_data returns 1 on success or 0 on failure,,,null,RSA_set_ex_data() returns 1 on success or 0 on failure,RSA_set_ex_data() returns 1 on success or 0 on failure.
5,5,RSA_get_ex_data returns the application data or 0 on failure,,,null,RSA_get_ex_data() returns the application data or 0 on failure,RSA_get_ex_data() returns the application data or 0 on failure. 0 may also be valid application data but currently it can only fail if given an invalid RSA_get_ex_data_APIParam_2 parameter.
5,5,BN_mod_word and BN_div_word return BN_mod_word_APIParam_1 BN_div_word_APIParam_1%BN_mod_word_APIParam_2 BN_div_word_APIParam_2 on success and -1 if an error occurred,,,null,BN_mod_word() and BN_div_word() return BN_mod_word_APIParam_1 BN_div_word_APIParam_1%BN_mod_word_APIParam_2 BN_div_word_APIParam_2 on success and (BN_ULONG)-1 if an error occurred,BN_mod_word() and BN_div_word() return BN_mod_word_APIParam_1 BN_div_word_APIParam_1%BN_mod_word_APIParam_2 BN_div_word_APIParam_2 on success and (BN_ULONG)-1 if an error occurred.
5,5,BIO_find_type returns the next matching BIO or NULL if none is found,,,null,BIO_find_type() returns the next matching BIO or NULL if none is found,"The BIO_find_type() searches for a BIO of a given type in a chain, starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1. If type is a specific type (such as BIO_TYPE_MEM) ,then a search is made for a BIO of that type. If type is a general type (such as BIO_TYPE_SOURCE_SINK) then the next matching BIO of the given general type is searched for. BIO_find_type() returns the next matching BIO or NULL if none is found."
5,5,"OBJ_obj2nid, OBJ_ln2nid, OBJ_sn2nid and OBJ_txt2nid return a NID or NID_undef on error",,,null,"OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or NID_undef on error","OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or NID_undef on error."
5,5,EVP_SealInit returns 0 on error or npubk if successful,,,null,EVP_SealInit() returns 0 on error or npubk if successful,EVP_SealInit() returns 0 on error or npubk if successful.
5,5,SSL_CONF_cmd returns 1 if the value of SSL_CONF_cmd_APIParam_2 is recognised and SSL_CONF_cmd_APIParam_3 is NOT used and 2 if both SSL_CONF_cmd_APIParam_2 and SSL_CONF_cmd_APIParam_3 are used,,,null,SSL_CONF_cmd() returns 1 if the value of SSL_CONF_cmd_APIParam_2 is recognised and SSL_CONF_cmd_APIParam_3 is NOT used and 2 if both SSL_CONF_cmd_APIParam_2 and SSL_CONF_cmd_APIParam_3 are used,SSL_CONF_cmd() returns 1 if the value of SSL_CONF_cmd_APIParam_2 is recognised and SSL_CONF_cmd_APIParam_3 is NOT used and 2 if both SSL_CONF_cmd_APIParam_2 and SSL_CONF_cmd_APIParam_3 are used. In other words it returns the number of arguments processed. This is useful when processing command lines.
5,5,"If the allocation fails, a pointer to the string ""OPENSSL_malloc Error"" is returned",,,null,"If the allocation fails, a pointer to the string ""OPENSSL_malloc Error"" is returned","SSL_CIPHER_description() returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided. len must be at least 128 bytes, otherwise a pointer to the string ""Buffer too small"" is returned. If SSL_CIPHER_description_APIParam_2 is NULL, a buffer of 128 bytes is allocated using OPENSSL_malloc(). If the allocation fails, a pointer to the string ""OPENSSL_malloc Error"" is returned."
5,5,It returns zero if the comparison is successful and non zero if not,,,null,It returns zero if the comparison is successful and non zero if not,"CMS_RecipientInfo_kekri_id_cmp() compares the ID in the CMS_RecipientInfo_kekri_id_cmp_APIParam_2 and CMS_RecipientInfo_kekri_id_cmp_APIParam_3 parameters against the keyIdentifier CMS_RecipientInfo structure CMS_RecipientInfo_kekri_id_cmp_APIParam_1, which must be of type CMS_RECIPINFO_KEK. It returns zero if the comparison is successful and non zero if not."
5,5,SSL_get_servername_type returns the servername type or -1 if no servername is present,,,null,SSL_get_servername_type() returns the servername type or -1 if no servername is present,SSL_get_servername_type() returns the servername type or -1 if no servername is present. Currently the only supported type (defined in RFC3546) is TLSEXT_NAMETYPE_host_name.
5,-1,If the content is not of type text/plain an error is returned,,,null,If the content is not of type text/plain then an error is returned,"If the PKCS7_TEXT flag is set ,MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain then an error is returned."
5,5,EVP_DecryptFinal will return an error code,1,,if padding is enabled and the final block is not correctly formatted,EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted,"EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer EVP_DecryptUpdate_APIParam_2 EVP_DecryptUpdate_APIParam_2 passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient."
5,5,EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() will return zero if the cipher does not use an IV,2,,null,It will return zero if the cipher does not use an IV,EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV length of a cipher when passed an EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 or EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1. It will return zero if the cipher does not use an IV. The constant EVP_MAX_IV_LENGTH is the maximum IV length for all ciphers.
5,5,"If the cipher does not have an object identifier or does not have ASN1 support ,this function will return NID_undef",,,null,"If the cipher does not have an object identifier or does not have ASN1 support ,this function will return NID_undef","EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the passed cipher or context. This ""type"" is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID. If the cipher does not have an object identifier or does not have ASN1 support ,this function will return NID_undef."
5,5,Normally a missing configuration file return an error,,,null,Normally a missing configuration file return an error,CONF_MFLAGS_IGNORE_MISSING_FILE if set will make CONF_load_modules_file() ignore missing configuration files. Normally a missing configuration file return an error.
5,5,X509_STORE_CTX_get_error returns X509_V_OK or an error code,,,null,X509_STORE_CTX_get_error() returns X509_V_OK or an error code,X509_STORE_CTX_get_error() returns X509_V_OK or an error code.
5,5,the returned chain may be incomplete or invalid,1,,If the call to X509_verify_cert is not successful,If the call to X509_verify_cert() is not successful the returned chain may be incomplete or invalid,"X509_STORE_CTX_get1_chain() returns a complete validate chain if a previous call to X509_verify_cert() is successful. If the call to X509_verify_cert() is not successful the returned chain may be incomplete or invalid. The returned chain persists after the X509_STORE_CTX_get_error_APIParam_1 X509_STORE_CTX_get_current_cert_APIParam_1 X509_STORE_CTX_get_error_depth_APIParam_1 X509_STORE_CTX_set_error_APIParam_1 structure is freed, when it is no longer needed it should be free up using:"
5,5,"X509_STORE_CTX_get_error returns the error code of X509_STORE_CTX_get_error_APIParam_1, see the ERROR CODES section for a full description of all error codes",,,null,"X509_STORE_CTX_get_error() returns the error code of X509_STORE_CTX_get_error_APIParam_1, see the ERROR CODES section for a full description of all error codes","X509_STORE_CTX_get_error() returns the error code of X509_STORE_CTX_get_error_APIParam_1, see the ERROR CODES section for a full description of all error codes."
5,5,"So if you pass a public key to these functions in X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2, it will return success",,,null,"So if you pass a public key to these functions in X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2, it will return success","The check_private_key functions don't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not. It merely compares the public materials (eg exponent and modulus of an RSA key) and/or key parameters (eg EC params of an EC key) of a key pair. So if you pass a public key to these functions in X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2, it will return success."
5,5,"For all functions, 1 is returned for success, 0 on error",,,null,"For all functions, 1 is returned for success, 0 on error","For all functions, 1 is returned for success, 0 on error. The return value should always be checked (eg, if (!BN_add(r,a,b)) goto err;). The error codes can be obtained by ERR_get_error(3) ."
5,5,If the nextUpdate field is absent from X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1 NULL is returned,,,null,If the nextUpdate field is absent from X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1 then NULL is returned,X509_CRL_get0_lastUpdate() and X509_CRL_get0_nextUpdate() return the lastUpdate and nextUpdate fields of X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1. The value returned is an internal pointer which must not be freed up after the call. If the nextUpdate field is absent from X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1 then NULL is returned.
5,5,X509_CRL_get0_lastUpdate return a pointer to an X509_CRL_get0_lastUpdate_APIParam_0 structure or NULL if the lastUpdate field is absent,,,null,X509_CRL_get0_lastUpdate() return a pointer to an X509_CRL_get0_lastUpdate_APIParam_0 structure or NULL if the lastUpdate field is absent,X509_CRL_get0_lastUpdate() return a pointer to an X509_CRL_get0_lastUpdate_APIParam_0 structure or NULL if the lastUpdate field is absent.
5,5,"SSL_get_error will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended",,,null,"SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended","cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
5,5,A zero is returned on error which will abort the handshake with a fatal internal error alert,,,null,A zero is returned on error which will abort the handshake with a fatal internal error alert,"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
5,5,SSL_CTX_build_cert_chain and SSL_build_cert_chain return 1 for success and 0 for failure,,,null,SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure,"SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure. If the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR and a verification error occurs ,then 2 is returned."
5,5,then 2 is returned,1,,If the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR and a verification error occurs,"If the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR and a verification error occurs ,then 2 is returned","SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure. If the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR and a verification error occurs ,then 2 is returned."
5,5,0 is returned and the current certificate is unchanged,1,,If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent,"If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent, 0 is returned and the current certificate is unchanged","SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER. If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,this option sets that certificate to the current certificate and returns 1. If the negotiated ciphersuite is anonymous (and thus no certificate will be sent) ,2 is returned and the current certificate is unchanged. If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent, 0 is returned and the current certificate is unchanged."
5,5,"SSL_set_current_cert with SSL_CERT_SET_SERVER return 1 for success , 2 if no server certificate is used and 0 for failure",,,null,"SSL_set_current_cert with SSL_CERT_SET_SERVER return 1 for success , 2 if no server certificate is used and 0 for failure","SSL_set_current_cert() with SSL_CERT_SET_SERVER return 1 for success, 2 if no server certificate is used because the ciphersuites is anonymous and 0 for failure."
5,5,this option sets that certificate to the current certificate and returns 1,1,,If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,"If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,this option sets that certificate to the current certificate and returns 1","SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER. If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,this option sets that certificate to the current certificate and returns 1. If the negotiated ciphersuite is anonymous (and thus no certificate will be sent) ,2 is returned and the current certificate is unchanged. If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent, 0 is returned and the current certificate is unchanged."
5,5,This result code is returned ,1,,if and only if ret > 0,This result code is returned if and only if ret > 0,The TLS/SSL I/O operation completed. This result code is returned if and only if ret > 0.
5,5, this result code is returned,1,,"If the protocol version is SSL 3.0 or higher,  only if a closure alert has occurred in the protocol, ie if the connection has been closed cleanly","If the protocol version is SSL 3.0 or higher, this result code is returned only if a closure alert has occurred in the protocol, ie if the connection has been closed cleanly","The TLS/SSL connection has been closed. If the protocol version is SSL 3.0 or higher, this result code is returned only if a closure alert has occurred in the protocol, ie if the connection has been closed cleanly. Note that in this case SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed."
5,5,an attacker could use this in a timing attack,1,,If CMS_decrypt just returned an error when all recipient encrypted keys failed to decrypt,If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
5,5,the above behaviour is modified and an error is returned ,1,,"If the special flag CMS_DEBUG_DECRYPT is set, if no recipient encrypted key can be decrypted without generating a random content encryption key","If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key","If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
5,5,this will typically output garbage and may ultimately return a padding error only,,,null,If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
5,5,New attributes can also be added using the returned CMS_SignerInfo structure and the CMS attribute utility functions or the CMS signed receipt request functions,,,null,New attributes can also be added using the returned CMS_SignerInfo structure and the CMS attribute utility functions or the CMS signed receipt request functions,The main purpose of CMS_add1_signer_APIName is to provide finer control over a CMS signed data structure where the simpler CMS_sign_APIName function defaults are not appropriate. For example if multiple signers or non default digest algorithms are needed. New attributes can also be added using the returned CMS_SignerInfo structure and the CMS attribute utility functions or the CMS signed receipt request functions.
5,5,the function already returns success,1,,if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER,Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
5,0,"if HMAC_Init_ex_APIName is called with HMAC_Init_ex_APIParam_2 NULL and HMAC_APIParam_1 is not the same as the previous digest used by HMAC_Init_ex_APIParam_1 , an error is returned  is not supported",,,null,"NB : if HMAC_Init_ex_APIName is called with HMAC_Init_ex_APIParam_2 NULL and HMAC_APIParam_1 is not the same as the previous digest used by HMAC_Init_ex_APIParam_1 , then an error is returned  is not supported .","NB: if HMAC_Init_ex_APIName is called with HMAC_Init_ex_APIParam_2 NULL and HMAC_APIParam_1 is not the same as the previous digest used by HMAC_Init_ex_APIParam_1 ,then an error is returned because reuse of an existing key with a different digest is not supported."
5,0,"if the structure indicates the use of any other algorithm ,an error is returned",,,null,"The only currently supported compression algorithm is zlib: if the structure indicates the use of any other algorithm ,an error is returned.","The only currently supported compression algorithm is zlib: if the structure indicates the use of any other algorithm ,an error is returned."
5,0,"If zlib support is not compiled into OpenSSL ,then CMS_uncompress_APIName will always return an error",,,null,"If zlib support is not compiled into OpenSSL ,then CMS_uncompress_APIName will always return an error.","If zlib support is not compiled into OpenSSL ,then CMS_uncompress_APIName will always return an error."
5,0,"Note that ENGINE_ctrl_cmd_string_APIName accepts a boolean argument that can relax the semantics of the function - if set non-zero ,ENGINE_ctrl_cmd_string_APIName will only return failure if the ENGINE supported the given command name but failed while executing the command name, if the ENGINE doesn't support the command name ,it will simply return success without doing anything",,,null,"Note that ENGINE_ctrl_cmd_string_APIName accepts a boolean argument that can relax the semantics of the function - if set non-zero ,ENGINE_ctrl_cmd_string_APIName will only return failure if the ENGINE supported the given command name but failed while executing the command name, if the ENGINE doesn't support the command name ,it will simply return success without doing anything.","Note that ENGINE_ctrl_cmd_string_APIName accepts a boolean argument that can relax the semantics of the function - if set non-zero ,ENGINE_ctrl_cmd_string_APIName will only return failure if the ENGINE supported the given command name but failed while executing the command name, if the ENGINE doesn't support the command name ,it will simply return success without doing anything. In this case we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE."
5,0,X509_STORE_CTX_get_current_cert_APIName returns the certificate in X509_STORE_CTX_get_current_cert_APIParam_1 which caused the error or NULL if no certificate is relevant,,,null,X509_STORE_CTX_get_current_cert_APIName returns the certificate in X509_STORE_CTX_get_current_cert_APIParam_1 which caused the error or NULL if no certificate is relevant.,X509_STORE_CTX_get_current_cert_APIName returns the certificate in X509_STORE_CTX_get_current_cert_APIParam_1 which caused the error or NULL if no certificate is relevant.
5,0,an error is returned,,,"If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters","If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned.","BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
5,0,An error is returned if the parameters are missing in EVP_PKEY_copy_parameters_APIParam_2 or present in both EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 and mismatch,,,null,An error is returned if the parameters are missing in EVP_PKEY_copy_parameters_APIParam_2 or present in both EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 and mismatch.,The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1. An error is returned if the parameters are missing in EVP_PKEY_copy_parameters_APIParam_2 or present in both EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 and mismatch. If the parameters in EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 are both present and match this function has no effect.
5,0,an error is returned,1,,If the content is not of type text/plain,"If the content is not of type text/plain, then an error is returned","If the CMS_TEXT flag is set ,MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain, then an error is returned."
5,0,For the currently supported content types the following values are returned,,,null,For the currently supported content types the following values are returned:,The CMS_set1_eContentType_APIParam_2 values returned can be converted to an integer NID value using OBJ_obj2nid(). For the currently supported content types the following values are returned:
5,5,call SSL_get_error(3) with SSL_shutdown_apiparam0 to find out the reason,,,if SSL_shutdown_apiparam0 is negative,"if SSL_shutdown_apiparam0 is negative, call SSL_get_error(3) with SSL_shutdown_apiparam0 to find out the reason","if SSL_shutdown_apiparam0 is negative, call SSL_get_error(3) with SSL_shutdown_apiparam0 to find out the reason"
5,2,"The callback when used on the server side should return with either SSL_TLSEXT_ERR_OK , SSL_TLSEXT_ERR_NOACK  or SSL_TLSEXT_ERR_ALERT_FATAL",,,null,"The callback when used on the server side should return with either SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set should be returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP response should not be returned) or SSL_TLSEXT_ERR_ALERT_FATAL (meaning that a fatal error has occurred).","The callback when used on the server side should return with either SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set should be returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP response should not be returned) or SSL_TLSEXT_ERR_ALERT_FATAL (meaning that a fatal error has occurred)."
5,-1,The following return values have meaning,,,null,The following return values have meaning:,The return value of the cb function is used by OpenSSL to determine what further processing will occur. The following return values have meaning:
5,0,BIO_should_retry_APIName is true,,,if the call that produced this condition should be retried at a later time,BIO_should_retry_APIName is true if the call that produced this condition should then be retried at a later time.,BIO_should_retry_APIName is true if the call that produced this condition should then be retried at a later time.
5,0,BIO_should_write_APIName is true,,,if the cause of the condition is that a BIO needs to read data,BIO_should_write_APIName is true if the cause of the condition is that a BIO needs to read data.,BIO_should_write_APIName is true if the cause of the condition is that a BIO needs to read data.
5,0,a call to SSL_get_error with the return value of SSL_do_handshake will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,,,null,In this case a call to SSL_get_error() with the return value of SSL_do_handshake() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,"If the underlying BIO is non-blocking, SSL_do_handshake() will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_do_handshake() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,0,a call to SSL_get_error with the return value of SSL_shutdown will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,,,null,In this case a call to SSL_get_error() with the return value of SSL_shutdown() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,"If the underlying BIO is non-blocking, SSL_shutdown() will also return when the underlying BIO could not satisfy the needs of SSL_shutdown() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_shutdown() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,0,EVP_CIPHER_CTX_set_padding_APIName always returns 1,,,null,EVP_CIPHER_CTX_set_padding_APIName always returns 1.,EVP_CIPHER_CTX_set_padding_APIName always returns 1.
5,0, 0 is returned,1,,"If any of the function is passed the NULL pointer for the session SSL_get_time_APIParam_1 SSL_SESSION_set_time_APIParam_1 SSL_SESSION_get_timeout_APIParam_1 SSL_SESSION_set_timeout_APIParam_1 SSL_set_timeout_APIParam_1 SSL_set_time_APIParam_1 SSL_get_timeout_APIParam_1 SSL_SESSION_get_time_APIParam_1,","If any of the function is passed the NULL pointer for the session SSL_get_time_APIParam_1 SSL_SESSION_set_time_APIParam_1 SSL_SESSION_get_timeout_APIParam_1 SSL_SESSION_set_timeout_APIParam_1 SSL_set_timeout_APIParam_1 SSL_set_time_APIParam_1 SSL_get_timeout_APIParam_1 SSL_SESSION_get_time_APIParam_1, 0 is returned.","If any of the function is passed the NULL pointer for the session SSL_get_time_APIParam_1 SSL_SESSION_set_time_APIParam_1 SSL_SESSION_get_timeout_APIParam_1 SSL_SESSION_set_timeout_APIParam_1 SSL_set_timeout_APIParam_1 SSL_set_time_APIParam_1 SSL_get_timeout_APIParam_1 SSL_SESSION_get_time_APIParam_1, 0 is returned."
5,0,CMS_get1_certs_APIName and CMS_get1_crls_APIName return the STACK of certificates or CRLs or NULL if there are none or an error occurs,,,null,CMS_get1_certs_APIName and CMS_get1_crls_APIName return the STACK of certificates or CRLs or NULL if there are none or an error occurs.,CMS_get1_certs_APIName and CMS_get1_crls_APIName return the STACK of certificates or CRLs or NULL if there are none or an error occurs. The only error which will occur in practice is if the CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 type is invalid.
5,0,"SSL_CTX_set1_curves_APIName, SSL_CTX_set1_curves_list_APIName, SSL_set1_curves_APIName, SSL_set1_curves_list_APIName, SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName return 1 for success and 0 for failure",,,null,"SSL_CTX_set1_curves_APIName, SSL_CTX_set1_curves_list_APIName, SSL_set1_curves_APIName, SSL_set1_curves_list_APIName, SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName return 1 for success and 0 for failure.","SSL_CTX_set1_curves_APIName, SSL_CTX_set1_curves_list_APIName, SSL_set1_curves_APIName, SSL_set1_curves_list_APIName, SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName return 1 for success and 0 for failure."
5,0,EVP_CIPHER_iv_length_APIName and EVP_CIPHER_CTX_iv_length_APIName return the IV length or zero if the cipher does not use an IV,,,null,EVP_CIPHER_iv_length_APIName and EVP_CIPHER_CTX_iv_length_APIName return the IV length or zero if the cipher does not use an IV.,EVP_CIPHER_iv_length_APIName and EVP_CIPHER_CTX_iv_length_APIName return the IV length or zero if the cipher does not use an IV.
5,0,SSL_rstate_string_APIName and SSL_rstate_string_long_APIName can return the following values,,,null,SSL_rstate_string_APIName and SSL_rstate_string_long_APIName can return the following values:,SSL_rstate_string_APIName and SSL_rstate_string_long_APIName can return the following values:
0,0,EC_POINT_method_of returns the EC_METHOD associated with the supplied EC_POINT,,,null,EC_POINT_method_of returns the EC_METHOD associated with the supplied EC_POINT.,EC_POINT_method_of returns the EC_METHOD associated with the supplied EC_POINT.
5,0,then EVP_CIPH_STREAM_CIPHER is returned,1,,If the cipher is a stream cipher,"If the cipher is a stream cipher ,then EVP_CIPH_STREAM_CIPHER is returned.","EVP_CIPHER_mode_APIName and EVP_CIPHER_CTX_mode_APIName return the block cipher mode: EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE or EVP_CIPH_OFB_MODE. If the cipher is a stream cipher ,then EVP_CIPH_STREAM_CIPHER is returned."
5,0,The following return values can occur for SSL_CTX_set_ssl_version_APIName and SSL_set_ssl_method_APIName,,,null,The following return values can occur for SSL_CTX_set_ssl_version_APIName and SSL_set_ssl_method_APIName:,The following return values can occur for SSL_CTX_set_ssl_version_APIName and SSL_set_ssl_method_APIName:
5,0,SSL_rstate_string_APIName returns a 2 letter string indicating the current read state of the SSL object SSL_rstate_string_APIParam_1,,,null,SSL_rstate_string_APIName returns a 2 letter string indicating the current read state of the SSL object SSL_rstate_string_APIParam_1.,SSL_rstate_string_APIName returns a 2 letter string indicating the current read state of the SSL object SSL_rstate_string_APIParam_1.
5,0,SSL_write_APIName will also return with success,1,,"When this flag is set, when a partial write has been successfully completed","When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed.","SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
5,0,SSL_write_APIName will only return with success,1,,when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written,"SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written.","SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
5,0,SSL_state_string_APIName returns a 6 letter string indicating the current state of the SSL object SSL_state_string_APIParam_1,,,null,SSL_state_string_APIName returns a 6 letter string indicating the current state of the SSL object SSL_state_string_APIParam_1.,SSL_state_string_APIName returns a 6 letter string indicating the current state of the SSL object SSL_state_string_APIParam_1.
5,0,a call to SSL_get_error with the return value of SSL_accept will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,,,null,In this case a call to SSL_get_error() with the return value of SSL_accept() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,"If the underlying BIO is non-blocking, SSL_accept() will also return when the underlying BIO could not satisfy the needs of SSL_accept() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_accept() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_accept(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,0,a call to SSL_get_error with the return value of SSL_read will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,,,null,In this case a call to SSL_get_error(3) with the return value of SSL_read() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,"If the underlying BIO is non-blocking, SSL_read() will also return when the underlying BIO could not satisfy the needs of SSL_read() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_read() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_read() can also cause write operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_read(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,0,a call to SSL_get_error with the return value of SSL_write will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,,,null,In this case a call to SSL_get_error(3) with the return value of SSL_write() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE,"If the underlying BIO is non-blocking, SSL_write() will also return, when the underlying BIO could not satisfy the needs of SSL_write() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_write() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_write() can also cause read operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_write(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
5,0,"The first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2",,,null,"The first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2","No match was found. The first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2."
5,0,"If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2",,,null,"If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2","SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
4,7,This option is no longer implemented and is treated as no op,,,null,This option is no longer implemented and is treated as no op.,This option is no longer implemented and is treated as no op.
4,7,Most applications wishing to know a key type will simply call EVP_PKEY_base_id_APIName and will not care about the actual type,,0,null,Most applications wishing to know a key type will simply call EVP_PKEY_base_id_APIName and will not care about the actual type: which will be identical in almost all cases.,Most applications wishing to know a key type will simply call EVP_PKEY_base_id_APIName and will not care about the actual type: which will be identical in almost all cases.
4,7,a function returning the passphrase must have been supplied,,,null," , a function returning the passphrase must have been supplied , see SSL_CTX_set_default_passwd_cb_APIName .","The private keys loaded from file can be encrypted. In order to successfully load encrypted keys, a function returning the passphrase must have been supplied, see SSL_CTX_set_default_passwd_cb_APIName . (Certificate files might be encrypted as well from the technical point of view, it however does not make sense as the data in the certificate is considered public anyway.)"
4,0,SSL_rstate_string_long_APIName and SSL_rstate_string_APIName should only seldom be needed in applications,,0,null,This function should only seldom be needed in applications.,This function should only seldom be needed in applications.
4,5,EVP_CIPHER_asn1_to_param_APIName will be called and finally EVP_CipherInit_APIName again with all parameters except the key set to NULL,,,null,", EVP_CIPHER_asn1_to_param_APIName will be called and finally EVP_CipherInit_APIName again with all parameters except the key set to NULL","EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier ""parameter"". The precise effect depends on the cipher In the case of RC2, for example, it will set the IV and effective key length. This function should be called after the base cipher type is set but before the key is set. For example EVP_CipherInit_APIName will be called with the IV and key set to NULL, EVP_CIPHER_asn1_to_param_APIName will be called and finally EVP_CipherInit_APIName again with all parameters except the key set to NULL. It is possible for this function to fail if the cipher does not have any ASN1 support or the parameters cannot be set (for example the RC2 effective key length is not supported."
4,7,"the functions for duplicating , freeing and `` clear_freeing '' the data item must be provided again , and they must be the same as they were when the data item was inserted",,,If a subsequent EC_KEY_get_key_method_data call is issued,"If a subsequent EC_KEY_get_key_method_data call is issued, the functions for duplicating, freeing and ""clear_freeing"" the data item must be provided again, and they must be the same as they were when the data item was inserted.","EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object. This data is treated as a ""black box"" by the ec library. The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter, which must have associated functions for duplicating, freeing and ""clear_freeing"" the data item. If a subsequent EC_KEY_get_key_method_data call is issued, the functions for duplicating, freeing and ""clear_freeing"" the data item must be provided again, and they must be the same as they were when the data item was inserted."
4,7,locking_function_APIName must be able to handle up to CRYPTO_num_locks_APIName different mutex locks,,,null,locking_function() must be able to handle up to CRYPTO_num_locks() different mutex locks,"locking_function() must be able to handle up to CRYPTO_num_locks() different mutex locks. It sets the CRYPTO_num_locks_APIParam_0-th lock if CRYPTO_lock_APIParam_1 & CRYPTO_LOCK, and releases it otherwise."
4,4,The TLS/SSL I/O function should be called again later,,1,if SSL_get_error_APIName returns SSL_ERROR_WANT_X509_LOOKUP or SSL_ERROR_WANT_ASYNC,The TLS/SSL I/O function should be called again later.,The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb_APIName has asked to be called again. The TLS/SSL I/O function should be called again later. Details depend on the application.
4,4,This alert should be followed by a close_notify,,1,"if SSL_alert_type_string_APIName, SSL_alert_type_string_long_APIName returns ""US""/""user canceled""",This alert should be followed by a close_notify.,"This handshake is being canceled for some reason unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning."
4,4,"New code should use EVP_EncryptInit_ex_APIName , EVP_EncryptFinal_ex_APIName , EVP_DecryptInit_ex_APIName , EVP_DecryptFinal_ex_APIName , EVP_CipherInit_ex_APIName and EVP_CipherFinal_ex_APIName",,,null,"New code should use EVP_EncryptInit_ex_APIName , EVP_EncryptFinal_ex_APIName , EVP_DecryptInit_ex_APIName , EVP_DecryptFinal_ex_APIName , EVP_CipherInit_ex_APIName and EVP_CipherFinal_ex_APIName  .","The functions EVP_EncryptInit_APIName, EVP_EncryptFinal_APIName, EVP_DecryptInit_APIName, EVP_CipherInit_APIName and EVP_CipherFinal_APIName are obsolete but are retained for compatibility with existing code. New code should use EVP_EncryptInit_ex_APIName, EVP_EncryptFinal_ex_APIName, EVP_DecryptInit_ex_APIName, EVP_DecryptFinal_ex_APIName, EVP_CipherInit_ex_APIName and EVP_CipherFinal_ex_APIName because they can reuse an existing context without allocating and freeing it up on each call."
4,9,The SSL_clear_APIName operation could not be performed,,,null,The SSL_clear_APIName operation could not be performed.,The SSL_clear_APIName operation could not be performed. Check the error stack to find out the reason.
4,9,no further I/O operations should be performed on the connection and SSL_shutdown_APIName must not be called,,1,If SSL_get_error_APIName returns SSL_ERROR_SYSCALL or SSL_ERROR_SSL,"If this error occurs, then no further I/O operations should be performed on the connection and SSL_shutdown_APIName must not be called.","A non-recoverable, fatal error in the SSL library occurred, usually a protocol error. The OpenSSL error queue contains more information on the error. If this error occurs, then no further I/O operations should be performed on the connection and SSL_shutdown_APIName must not be called."
4,4,For EC parameter generation EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName  must be called or an error occurs,2,,null,For EC parameter generation this macro must be called or an error occurs  .,The EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName sets the EC curve for EC parameter generation to EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIParam_2. For EC parameter generation this macro must be called or an error occurs because there is no default curve.
4,4,Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead of SSL_clear_APIName to avoid such failures,"1,2",,null,Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired).,"SSL_clear_APIName resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired)."
4,4,A function must call BN_CTX_start_APIName first,,0,null,A function must call BN_CTX_start_APIName first.,"A function must call BN_CTX_start_APIName first. Then, BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s. All BN_CTX_get_APIName calls must be made before calling any other functions that use the BN_CTX_start_APIParam_1 BN_CTX_get_APIParam_1 BN_CTX_get_APIParam_1 as an argument."
4,-1,Applications will not normally call EVP_PKEY_CTX_ctrl_APIName directly but will instead call one of the algorithm specific macros below,,,null,Applications will not normally call EVP_PKEY_CTX_ctrl_APIName directly but will instead call one of the algorithm specific macros below.,Applications will not normally call EVP_PKEY_CTX_ctrl_APIName directly but will instead call one of the algorithm specific macros below.
4,4,The SSL function should be called again,,,when the connection is established,The SSL function should be called again when the connection is established.,"The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName. The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms, select_APIName or poll_APIName for writing on the socket file descriptor can be used."
4,4,the same TLS/SSL I/O function should be called again later,1,0,The operation did not complete,The operation did not complete; the same TLS/SSL I/O function should be called again later.,"The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName. The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms, select_APIName or poll_APIName for writing on the socket file descriptor can be used."
4,4,The macro version of this function was the only one available before OpenSSL 1.0.0,,,null,The macro version of this function was the only one available before OpenSSL 1.0.0.,The macro version of this function was the only one available before OpenSSL 1.0.0.
4,4,HMAC_CTX_init_APIName must be called,,,null,HMAC_CTX_init_APIName must be called.,HMAC_CTX_init_APIName initialises a HMAC_CTX_init_APIParam_1 before first use. HMAC_CTX_init_APIName must be called.
4,4,"New applications should use EVP_DigestInit_ex_APIName , EVP_DigestFinal_ex_APIName and EVP_MD_CTX_copy_ex_APIName",,0,null,"New applications should use EVP_DigestInit_ex_APIName , EVP_DigestFinal_ex_APIName and EVP_MD_CTX_copy_ex_APIName  .","The functions EVP_DigestInit_APIName, EVP_DigestFinal_APIName and EVP_MD_CTX_copy_APIName are obsolete but are retained to maintain compatibility with existing code. New applications should use EVP_DigestInit_ex_APIName, EVP_DigestFinal_ex_APIName and EVP_MD_CTX_copy_ex_APIName because they can efficiently reuse a digest context instead of initializing and cleaning it up on each call and allow non default implementations of digests to be specified."
4,4,SSL_SESSION_free_APIName must be explicitly called once to decrement the reference count again,,0,null,SSL_SESSION_free_APIName must be explicitly called once to decrement the reference count again .,"If the data is to be kept, SSL_get1_session_APIName will increment the reference count, so that the session will not be implicitly removed by other operations but stays in memory. In order to remove the session, SSL_SESSION_free_APIName must be explicitly called once to decrement the reference count again."
4,-1,These functions are only useful for TLS/SSL servers,,,null,These functions are only useful for TLS/SSL servers.,These functions are only useful for TLS/SSL servers.
4,4,a TLS client must send the a session ticket extension to the server,,,null," , a TLS client must send the a session ticket extension to the server .","In order to reuse a session, a TLS client must send the a session ticket extension to the server. The client can only send exactly one session ticket. The server, through the callback function, either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket."
4,8,"Finally , use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt",,,null,"Finally, use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt.","The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName, then add information to it with the UI_add or UI_dup functions. Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data. The default UI method doesn't care about these data, but other methods might. Finally, use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt."
4,8,"The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName , add information to it with the UI_add or UI_dup functions",,,null,"The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName, then add information to it with the UI_add or UI_dup functions.","The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName, then add information to it with the UI_add or UI_dup functions. Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data. The default UI method doesn't care about these data, but other methods might. Finally, use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt."
4,4,The random number generator must be seeded prior to calling RSA_sign_ASN1_OCTET_STRING_APIName,,,null,The random number generator must be seeded prior to calling RSA_sign_ASN1_OCTET_STRING_APIName.,The random number generator must be seeded prior to calling RSA_sign_ASN1_OCTET_STRING_APIName.
4,8,Prefer RSA_PKCS1_OAEP_PADDING,,,null,Prefer RSA_PKCS1_OAEP_PADDING.,Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer RSA_PKCS1_OAEP_PADDING.
4,4,The PRNG must be seeded prior to calling BN_rand_APIName or BN_rand_range_APIName,,,null,The PRNG must be seeded prior to calling BN_rand_APIName or BN_rand_range_APIName.,The PRNG must be seeded prior to calling BN_rand_APIName or BN_rand_range_APIName.
4,8,Applications should use the higher level functions EVP_EncryptInit_APIName etc instead of calling the blowfish functions directly.,1,,null,instead of calling the blowfish functions directly.,Applications should use the higher level functions EVP_EncryptInit_APIName etc. instead of calling the blowfish functions directly.
4,8,For a more general solution X509_NAME_get_index_by_NID_APIName or X509_NAME_get_index_by_OBJ_APIName should be used followed by X509_NAME_get_entry_APIName on any matching indices and the various X509_NAME_get_entry_APIParam_0 utility functions on the result,,0,null,For a more general solution X509_NAME_get_index_by_NID_APIName or X509_NAME_get_index_by_OBJ_APIName should be used followed by X509_NAME_get_entry_APIName on any matching indices and then the various X509_NAME_get_entry_APIParam_0 utility functions on the result.,For a more general solution X509_NAME_get_index_by_NID_APIName or X509_NAME_get_index_by_OBJ_APIName should be used followed by X509_NAME_get_entry_APIName on any matching indices and then the various X509_NAME_get_entry_APIParam_0 utility functions on the result.
4,8,Applications wishing to encrypt or decrypt private keys should use other functions such as d2i_PKC8PrivateKey_APIName instead,,,null,Applications wishing to encrypt or decrypt private keys should use other functions such as d2i_PKC8PrivateKey_APIName instead.,All these functions use DER format and unencrypted keys. Applications wishing to encrypt or decrypt private keys should use other functions such as d2i_PKC8PrivateKey_APIName instead.
4,8,BIO_get_cipher_status_APIName should be called to determine if the decrypt was successful,,,null,BIO_get_cipher_status_APIName should be called to determine if the decrypt was successful.,When decrypting an error on the final block is signalled by a zero return value from the read operation. A successful decrypt followed by EOF will also return zero for the final read. BIO_get_cipher_status_APIName should be called to determine if the decrypt was successful.
4,8,the source/sink may merely be an indication that no data is currently available and that the application should retry the operation later,,,when the source/sink is non-blocking or of a certain type,In particular when the source/sink is non-blocking or of a certain type the source/sink may merely be an indication that no data is currently available and that the application should retry the operation later.,A 0 or -1 return is not necessarily an indication of an error. In particular when the source/sink is non-blocking or of a certain type the source/sink may merely be an indication that no data is currently available and that the application should retry the operation later.
4,8,New applications should use ASN1_TIME_adj_APIName instead and pass the offset value in the ASN1_TIME_adj_APIParam4 and ASN1_TIME_adj_APIParam3 parameters instead of directly manipulating a ASN1_TIME_adj_APIParam2 value,,1,null,New applications should use ASN1_TIME_adj() instead and pass the offset value in the offset_sec and offset_day parameters instead of directly manipulating a time_t value,Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set() (or equivalent). This can cause problems as the time_t value can overflow on some systems resulting in unexpected results. New applications should use ASN1_TIME_adj() instead and pass the offset value in the offset_sec and offset_day parameters instead of directly manipulating a time_t value.
4,8,use DES_ncbc_encrypt instead,,,null,DES_cbc_encrypt() does not modify ivec; use DES_ncbc_encrypt() instead,DES_cbc_encrypt() does not modify ivec; use DES_ncbc_encrypt() instead.
4,7,These functions are currently the only way to store encrypted private keys using DER format,,,null,These functions are currently the only way to store encrypted private keys using DER format.,These functions are currently the only way to store encrypted private keys using DER format.
0,7,dyn_lock_function is needed to perform locking off dynamic lock numbered n.,1,0,null,"dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line) is needed to perform locking off dynamic lock numbered n. Multi-threaded applications might crash at random if dyn_lock_function is not set.","dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line) is needed to perform locking off dynamic lock numbered n. Multi-threaded applications might crash at random if dyn_lock_function is not set."
4,7,the application should take appropriate action to wait until the underlying socket has accepted a connection and retry the call,,,null,If this happens then it is an indication that an accept attempt would block: the application should take appropriate action to wait until the underlying socket has accepted a connection and retry the call.,"If the underlying accept socket is non-blocking and BIO_do_accept_APIName is called to await an incoming connection, it is possible for BIO_should_io_special_APIName with the reason BIO_RR_ACCEPT. If this happens then it is an indication that an accept attempt would block: the application should take appropriate action to wait until the underlying socket has accepted a connection and retry the call."
4,7,the ENGINE API is the recommended way to control default implementations for use in RSA and other cryptographic algorithms,,,null,"For this reason, the ENGINE API is the recommended way to control default implementations for use in RSA and other cryptographic algorithms","As of version 0.9.7, RSA_METHOD implementations are grouped together with other algorithmic APIs (eg DSA_METHOD, EVP_CIPHER, etc) into ENGINE modules. If a default ENGINE is specified for RSA functionality using an ENGINE API function, that will override any RSA defaults set using the RSA API (ie RSA_set_default_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RSA and other cryptographic algorithms."
4,7,it is recommended to use a function that does not depend on a global variable,,,null,These functions are available for compatibility; it is recommended to use a function that does not depend on a global variable,"DES_set_key() works like DES_set_key_checked() if the DES_check_key flag is non-zero, otherwise like DES_set_key_unchecked(). These functions are available for compatibility; it is recommended to use a function that does not depend on a global variable."
4,7,the ENGINE API is the recommended way to control default implementations for use in RAND and other cryptographic algorithms,,,null,"For this reason, the ENGINE API is the recommended way to control default implementations for use in RAND and other cryptographic algorithms","As of version 0.9.7, RAND_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in ENGINE modules. If a default ENGINE is specified for RAND functionality using an ENGINE API function, that will override any RAND defaults set using the RAND API (ie RAND_set_rand_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RAND and other cryptographic algorithms."
4,3,code should not assume that i2d_X509_APIName will always succeed,,,null,This may be fixed in future so code should not assume that i2d_X509_APIName will always succeed.,"i2d_X509_APIName will not return an error in many versions of OpenSSL, if mandatory fields are not initialized due to a programming error ,then the encoded structure may contain invalid data or omit the fields entirely and will not be parsed by d2i_X509_APIName. This may be fixed in future so code should not assume that i2d_X509_APIName will always succeed."
4,4,One of these functions should be called before generating textual error messages,,,null,One of these functions should be called before generating textual error messages.,"One of these functions should be called before generating textual error messages. However, this is not required when memory usage is an issue."
4,4,BIO_do_handshake_APIName has no effect,,1,If an SSL connection has already been established,"If an SSL connection has already been established ,this call has no effect.","BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection. BIO_do_handshake_APIName returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried. If an SSL connection has already been established ,this call has no effect."
4,4,The use of EVP_PKEY_size_APIName with these functions is discouraged,,1,null,The use of EVP_PKEY_size_APIName with these functions is discouraged  .,The use of EVP_PKEY_size_APIName with these functions is discouraged because some signature operations may have a signature length which depends on the parameters set. As a result EVP_PKEY_size_APIName would have to return a value which indicates the maximum possible signature for any set of parameters.
4,4,"The servername callback is executed first , followed by the ALPN callback",,,null,"The servername callback is executed first, followed by the ALPN callback.","The ALPN and SNI callbacks are both executed during Client Hello processing. The servername callback is executed first, followed by the ALPN callback."
4,4,HMAC_CTX_cleanup_APIName must be called,,,when an HMAC_CTX_cleanup_APIParam_1 is no longer required,HMAC_CTX_cleanup_APIName must be called when an HMAC_CTX_cleanup_APIParam_1 is no longer required.,HMAC_CTX_cleanup_APIName erases the key and other data from the HMAC_CTX_cleanup_APIParam_1 and releases any associated resources. HMAC_CTX_cleanup_APIName must be called when an HMAC_CTX_cleanup_APIParam_1 is no longer required.
4,4,EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback,,,null,EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback.,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation. If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned. Any non negative value returns the value of that parameter. EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback.
4,4,BN_CTX_init_APIName should not be used for new programs,,1,null,This should not be used for new programs.,BN_CTX_init_APIName (deprecated) initializes an existing uninitialized BN_CTX_new_APIParam_0. This should not be used for new programs. Use BN_CTX_new_APIName instead.
4,4,OBJ_cleanup_APIName should be called before an application exits,2,0,if any new objects were added using OBJ_create_APIName,OBJ_cleanup_APIName cleans up OpenSSLs internal object table: this should be called before an application exits if any new objects were added using OBJ_create_APIName.,OBJ_cleanup_APIName cleans up OpenSSLs internal object table: this should be called before an application exits if any new objects were added using OBJ_create_APIName.
4,4,HMAC_Init_APIName is deprecated and only included for backward compatibility with OpenSSL 0.9.6 b,,0,null,HMAC_Init_APIName is deprecated and only included for backward compatibility with OpenSSL 0.9.6b.,HMAC_Init_APIName initializes a HMAC_Init_APIParam_1 structure to use the hash function HMAC_APIParam_1 and the key HMAC_Init_APIParam_2 which is HMAC_Init_APIParam_3 bytes long. HMAC_Init_APIName is deprecated and only included for backward compatibility with OpenSSL 0.9.6b.
4,4,SSL_check_chain_APIName must be called in servers after a client hello message or in clients after a certificate request message,,1,null,SSL_check_chain_APIName must be called in servers after a client hello message or in clients after a certificate request message.,SSL_check_chain_APIName must be called in servers after a client hello message or in clients after a certificate request message. It will typically be called in the certificate callback.
4,4,SSL_set_session_APIName is only useful for TLS/SSL clients,,1,null,SSL_set_session_APIName is only useful for TLS/SSL clients.,"SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established. SSL_set_session_APIName is only useful for TLS/SSL clients. When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect_APIName. Whether the session was reused can be queried with the SSL_session_reused_APIName call."
4,4,The pseudo-random number generator must be seeded prior to calling DH_generate_parameters_APIName,,1,null,The pseudo-random number generator must be seeded prior to calling DH_generate_parameters_APIName.,"DH_generate_parameters_ex_APIName generates Diffie-Hellman parameters that can be shared among a group of users, and stores them in the provided DH_generate_parameters_ex_APIParam_1 structure. The pseudo-random number generator must be seeded prior to calling DH_generate_parameters_APIName."
4,4,the handshake routines must be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName,,0,When performing a transparent negotiation using SSL_write_APIName or SSL_read_APIName,"When performing a transparent negotiation using SSL_write_APIName or SSL_read_APIName , the handshake routines must be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName.","When using the SSL_connect_APIName or SSL_accept_APIName routines, the correct handshake routines are automatically set. When performing a transparent negotiation using SSL_write_APIName or SSL_read_APIName , the handshake routines must be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName."
4,4,the parties must send out close notify alert messages using SSL_shutdown_APIName for a clean shutdown,,1,Normally when a SSL connection is finished,"Normally when a SSL connection is finished, the parties must send out ""close notify"" alert messages using SSL_shutdown_APIName for a clean shutdown.","Normally when a SSL connection is finished, the parties must send out ""close notify"" alert messages using SSL_shutdown_APIName for a clean shutdown."
4,4,SSL_library_init_APIName is not reentrant,,0,null,SSL_library_init_APIName is not reentrant.,SSL_library_init_APIName must be called before any other action takes place. SSL_library_init_APIName is not reentrant.
4,4,It is the caller 's responsibility to free this memory with a subsequent call to OPENSSL_free_APIName,,1,null,It is the caller's responsibility to free this memory with a subsequent call to OPENSSL_free_APIName.,The function EC_POINT_point2hex_APIName will allocate sufficient memory to store the hexadecimal string. It is the caller's responsibility to free this memory with a subsequent call to OPENSSL_free_APIName.
4,4,The EVP_DigestVerifyFinal_APIParam_1 EVP_DigestVerifyUpdate_APIParam_1 EVP_DigestVerifyInit_APIParam_1 interface to digital signatures should almost always be used in preference to the low level interfaces,,1,null,The EVP_DigestVerifyFinal_APIParam_1 EVP_DigestVerifyUpdate_APIParam_1 EVP_DigestVerifyInit_APIParam_1 interface to digital signatures should almost always be used in preference to the low level interfaces.,The EVP_DigestVerifyFinal_APIParam_1 EVP_DigestVerifyUpdate_APIParam_1 EVP_DigestVerifyInit_APIParam_1 interface to digital signatures should almost always be used in preference to the low level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.
4,4,"The functions EVP_EncryptInit_APIName , EVP_EncryptFinal_APIName , EVP_DecryptInit_APIName , EVP_CipherInit_APIName and EVP_CipherFinal_APIName are obsolete but are retained for compatibility with existing code",,0,null,"The functions EVP_EncryptInit_APIName, EVP_EncryptFinal_APIName, EVP_DecryptInit_APIName, EVP_CipherInit_APIName and EVP_CipherFinal_APIName are obsolete but are retained for compatibility with existing code.","The functions EVP_EncryptInit_APIName, EVP_EncryptFinal_APIName, EVP_DecryptInit_APIName, EVP_CipherInit_APIName and EVP_CipherFinal_APIName are obsolete but are retained for compatibility with existing code. New code should use EVP_EncryptInit_ex_APIName, EVP_EncryptFinal_ex_APIName, EVP_DecryptInit_ex_APIName, EVP_DecryptFinal_ex_APIName, EVP_CipherInit_ex_APIName and EVP_CipherFinal_ex_APIName because they can reuse an existing context without allocating and freeing it up on each call."
4,4,The SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName functions are only useful on the server side,,1,null,The SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName functions are therefore only useful on the server side.,The session id context becomes part of the session. The session id context is set by the SSL/TLS server. The SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName functions are therefore only useful on the server side.
4,4,a new UI should be freed using UI_free_APIName,,,When done with this UI,"When done with this UI, a new UI should be freed using UI_free_APIName.","UI_new_APIName creates a new UI using the default UI method. When done with this UI, a new UI should be freed using UI_free_APIName."
4,4,Applications should free up configuration at application closedown by calling CONF_modules_free_APIName,,,null,Applications should free up configuration at application closedown by calling CONF_modules_free_APIName.,Applications should free up configuration at application closedown by calling CONF_modules_free_APIName.
4,4,The X509 object must be explicitly freed using X509_free_APIName,,,null,The X509 object must be explicitly freed using X509_free_APIName.,"The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed. The X509 object must be explicitly freed using X509_free_APIName."
4,4,"To change a certificate , private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName",,,null,"To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName.","SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
4,4,the recommended way of controlling default implementations is by using the ENGINE API functions,,1,null,"Since the introduction of the ENGINE API, the recommended way of controlling default implementations is by using the ENGINE API functions.","Since the introduction of the ENGINE API, the recommended way of controlling default implementations is by using the ENGINE API functions. The default RAND_set_rand_method_APIParam_1, as set by RAND_set_rand_method_APIName and returned by RAND_get_rand_method_APIName, is only used if no ENGINE has been set as the default ""rand"" implementation. Hence, these two functions are no longer the recommended way to control defaults."
4,4,The random number generator must be seeded prior to calling RSA_blinding_on_APIName,,1,null,The random number generator must be seeded prior to calling RSA_blinding_on_APIName.,RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor. RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2 is NULL or a pre-allocated and initialized RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2. The random number generator must be seeded prior to calling RSA_blinding_on_APIName.
4,4,EVP_EncodeFinal_APIName must be called at the end of an encoding operation,,1,null,EVP_EncodeFinal_APIName must be called at the end of an encoding operation.,EVP_EncodeFinal_APIName must be called at the end of an encoding operation. EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object. The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3. It is the caller's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (ie 66 bytes in total).
4,4,applications should generally avoid using DSA structure elements directly and instead use API functions to query or modify keys,,1,null,"For this reason, applications should generally avoid using DSA structure elements directly and instead use API functions to query or modify keys.","Note that DSA keys may use non-standard DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 implementations, either directly or by the use of DSA_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using DSA structure elements directly and instead use API functions to query or modify keys."
4,4,CRYPTO_set_dynlock_create_callback_APIParam_1 is needed to create a lock,,0,null,"dyn_create_function(const char *file, int line) is needed to create a lock.","dyn_create_function(const char *file, int line) is needed to create a lock. Multi-threaded applications might crash at random if dyn_create_function is not set."
4,4,the application need not call BIO_should_retry_APIName after a failed BIO I/O call,,,If the application knows that the BIO type will never signal a retry,If the application knows that the BIO type will never signal a retry then the application need not call BIO_should_retry_APIName after a failed BIO I/O call.,"If the underlying I/O structure is in a blocking mode ,almost all current BIO types will not request a retry, because the underlying I/O calls will not. If the application knows that the BIO type will never signal a retry then the application need not call BIO_should_retry_APIName after a failed BIO I/O call. This is typically done with file BIOs."
4,4,the use of X509_NAME_oneline_APIName and X509_NAME_print_APIName is strongly discouraged in new applications,,0,null,Their use is strongly discouraged in new applications.,"The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies. Their use is strongly discouraged in new applications."
4,4,EVP_VerifyInit_ex_APIParam_1 must be initialized by calling EVP_MD_CTX_init_APIName before calling this function,,,null,EVP_VerifyInit_ex_APIParam_1 must be initialized by calling EVP_MD_CTX_init_APIName before calling this function.,EVP_VerifyInit_ex_APIName sets up verification context EVP_VerifyInit_ex_APIParam_1 to use digest EVP_VerifyInit_ex_APIParam_2 from ENGINE EVP_VerifyInit_ex_APIParam_3. EVP_VerifyInit_ex_APIParam_1 must be initialized by calling EVP_MD_CTX_init_APIName before calling this function.
4,4,The random number generator must be seeded prior to calling RSA_public_encrypt_APIName,,1,null,The random number generator must be seeded prior to calling RSA_public_encrypt_APIName.,"RSA_public_encrypt_APIParam_1 must be less than RSA_size(RSA_public_encrypt_APIParam_4) - 11 for the PKCS #1 v1.5 based padding modes, less than RSA_size(RSA_public_encrypt_APIParam_4) - 41 for RSA_PKCS1_OAEP_PADDING and exactly RSA_size(RSA_public_encrypt_APIParam_4) for RSA_NO_PADDING. The random number generator must be seeded prior to calling RSA_public_encrypt_APIName."
4,4,applications should generally avoid using RSA structure elements directly and instead use API functions to query or modify keys,,1,null,"For this reason, applications should generally avoid using RSA structure elements directly and instead use API functions to query or modify keys.","Note that RSA keys may use non-standard RSA_set_method_APIParam_2 RSA_set_default_method_APIParam_1 implementations, either directly or by the use of RSA_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using RSA structure elements directly and instead use API functions to query or modify keys."
4,4,care should be taken to flush any data in the write buffer,,1,When used in bidirectional applications,When used in bidirectional applications (such as TLS/SSL) care should be taken to flush any data in the write buffer.,"When used in bidirectional applications (such as TLS/SSL) care should be taken to flush any data in the write buffer. This can be done by calling BIO_pending_APIName on the other half of the pair and, if any data is pending, reading it and sending it to the underlying transport. This must be done before any normal processing (such as calling select_APIName ) due to a request and BIO_should_read_APIName being true."
4,4,The random number generator must be seeded prior to calling RSA_padding_add_xxx_APIName,,1,null,The random number generator must be seeded prior to calling RSA_padding_add_xxx_APIName.,The random number generator must be seeded prior to calling RSA_padding_add_xxx_APIName.
4,4,BIO_flush_APIName may need to be retried,,,if the ultimate source/sink BIO is non blocking,BIO_flush_APIName may need to be retried if the ultimate source/sink BIO is non blocking.,Data is only written to the next BIO in the chain when the write buffer fills or when BIO_flush_APIName is called. It is therefore important to call BIO_flush_APIName whenever any pending data should be written such as when removing a buffering BIO using BIO_pop_APIName. BIO_flush_APIName may need to be retried if the ultimate source/sink BIO is non blocking.
4,4,It is important to call BIO_flush_APIName,,,whenever any pending data should be written such as when removing a buffering BIO using BIO_pop_APIName,It is therefore important to call BIO_flush_APIName whenever any pending data should be written such as when removing a buffering BIO using BIO_pop_APIName.,Data is only written to the next BIO in the chain when the write buffer fills or when BIO_flush_APIName is called. It is therefore important to call BIO_flush_APIName whenever any pending data should be written such as when removing a buffering BIO using BIO_pop_APIName. BIO_flush_APIName may need to be retried if the ultimate source/sink BIO is non blocking.
4,4,The EVP interface to digital signatures should almost always be used in preference to the low level interfaces,,,null,The EVP_DigestSignFinal_APIParam_1 EVP_DigestSignUpdate_APIParam_1 EVP_DigestSignInit_APIParam_1 interface to digital signatures should almost always be used in preference to the low level interfaces.,The EVP_DigestSignFinal_APIParam_1 EVP_DigestSignUpdate_APIParam_1 EVP_DigestSignInit_APIParam_1 interface to digital signatures should almost always be used in preference to the low level interfaces. This is because the code then becomes transparent to the algorithm used and much more flexible.
4,4,low level algorithm specific functions can not be used with an ENGINE and ENGINE versions of new algorithms can not be accessed using the low level functions,2,1,null,They cannot be used with an ENGINE and ENGINE versions of new algorithms cannot be accessed using the low level functions.,"Although low level algorithm specific functions exist for many algorithms, their use is discouraged. They cannot be used with an ENGINE and ENGINE versions of new algorithms cannot be accessed using the low level functions. Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface."
4,4,"it can be practical to ask for the password once , keep it in memory and use it several times",,1,If several keys have to be handled,"If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times.","When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored."
4,4,Applications should generate their own DH parameters using the openssl dhparam_APIName application,,1,during the installation process ,Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application.,"As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
4,4,Other applications should use EVP_DigestInit_APIName,,,null,Other applications should use EVP_DigestInit_APIName etc.,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream (via CBC encryption). The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2. This function is used by Kerberos v4. Other applications should use EVP_DigestInit_APIName etc. instead.
4,4,To process KEKRecipientInfo types CMS_set1_key_APIName or CMS_RecipientInfo_set0_key_APIName and CMS_ReceipientInfo_decrypt_APIName should be called before CMS_decrypt_APIName and CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 set to NULL,,,null,To process KEKRecipientInfo types CMS_set1_key_APIName or CMS_RecipientInfo_set0_key_APIName and CMS_ReceipientInfo_decrypt_APIName should be called before CMS_decrypt_APIName and CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 set to NULL.,To process KEKRecipientInfo types CMS_set1_key_APIName or CMS_RecipientInfo_set0_key_APIName and CMS_ReceipientInfo_decrypt_APIName should be called before CMS_decrypt_APIName and CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 set to NULL.
4,4,SSL_get_shared_ciphers_APIName is a server side function only and must only be called after the completion of the initial handshake,,1,null,This is a server side function only and must only be called after the completion of the initial handshake.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
4,4,an implementation method must be provided,,1,When constructing a curve using EC_GROUP_new,When constructing a curve using EC_GROUP_new (see EC_GROUP_new_APIName ) an implementation method must be provided.,The Elliptic Curve library provides a number of different implementations through a single common interface. When constructing a curve using EC_GROUP_new (see EC_GROUP_new_APIName ) an implementation method must be provided. The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW. It is important that the correct implementation type for the form of curve selected is used.
4,4,It is necessary to call either EC_GROUP_set_curve_GFp or EC_GROUP_set_curve_GF2m as appropriate to create a curve defined over Fp or over F2 ^ m respectively,,,null,It is then necessary to call either EC_GROUP_set_curve_GFp or EC_GROUP_set_curve_GF2m as appropriate to create a curve defined over Fp or over F2^m respectively.,"A new curve can be constructed by calling EC_GROUP_new, using the implementation provided by EC_GROUP_new_APIParam_1 (see EC_GFp_simple_method_APIName ). It is then necessary to call either EC_GROUP_set_curve_GFp or EC_GROUP_set_curve_GF2m as appropriate to create a curve defined over Fp or over F2^m respectively."
4,4,Applications wishing to avoid this should use EVP_MD_CTX_create_APIName instead,,0,null,Applications wishing to avoid this should use EVP_MD_CTX_create_APIName instead:,This will cause binary compatibility issues if the size of EVP_MD_CTX structure changes (this will only happen with a major release of OpenSSL). Applications wishing to avoid this should use EVP_MD_CTX_create_APIName instead:
4,4,The bytes are sent and a new SSL_write_APIName operation with a new buffer must be started,,1,null,The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started.,"SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
4,4,A typical application will call OpenSSL_add_all_algorithms_APIName initially and EVP_cleanup_APIName before exiting,,0,null,A typical application will call OpenSSL_add_all_algorithms_APIName initially and EVP_cleanup_APIName before exiting.,A typical application will call OpenSSL_add_all_algorithms_APIName initially and EVP_cleanup_APIName before exiting.
4,4,Applications should call SSL_CTX_check_private_key_APIName or SSL_check_private_key_APIName as appropriate after loading a new certificate and private key to confirm that the certificate and key match,,1,null,Applications should call SSL_CTX_check_private_key_APIName or SSL_check_private_key_APIName as appropriate after loading a new certificate and private key to confirm that the certificate and key match.,All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set. Similarly all of the functions to set a new private key will replace any private key that has already been set. Applications should call SSL_CTX_check_private_key_APIName or SSL_check_private_key_APIName as appropriate after loading a new certificate and private key to confirm that the certificate and key match.
4,4,The string must be freed later using OPENSSL_free_APIName,,,null,The string must be freed later using OPENSSL_free_APIName.,"BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively. For negative numbers, the string is prefaced with a leading '-'. The string must be freed later using OPENSSL_free_APIName."
4,4,BIO_find_type_APIName in OpenSSL 0.9.5 a and earlier could not be safely passed a NULL pointer for the BIO_find_type_APIParam_1 argument,,0,null,BIO_find_type_APIName in OpenSSL 0.9.5a and earlier could not be safely passed a NULL pointer for the BIO_find_type_APIParam_1 argument.,BIO_find_type_APIName in OpenSSL 0.9.5a and earlier could not be safely passed a NULL pointer for the BIO_find_type_APIParam_1 argument.
4,-1,PKCS7_decrypt_APIName would be better,,1,if it could look up the correct key and certificate from a database,PKCS7_decrypt_APIName would be better if it could look up the correct key and certificate from a database.,PKCS7_decrypt_APIName must be passed the correct recipient key and certificate. PKCS7_decrypt_APIName would be better if it could look up the correct key and certificate from a database.
4,4,SSL_get_verify_result_APIName is only useful in connection with SSL_get_peer_certificate_APIName,,0,null,SSL_get_verify_result_APIName is only useful in connection with SSL_get_peer_certificate_APIName .,"If no peer certificate was presented, the returned result code is X509_V_OK. This is because no verification error occurred, it does however not indicate success. SSL_get_verify_result_APIName is only useful in connection with SSL_get_peer_certificate_APIName ."
4,4,it should consider using the SSL_CONF interface instead of manually parsing options,,1,If an application wishes to make use of several of these functions for configuration purposes either on a command line or in a file,"If an application wishes to make use of several of these functions for configuration purposes either on a command line or in a file ,it should consider using the SSL_CONF interface instead of manually parsing options.","If an application wishes to make use of several of these functions for configuration purposes either on a command line or in a file ,it should consider using the SSL_CONF interface instead of manually parsing options."
4,4,The dup_APIName functions use OPENSSL_malloc_APIName underneath and so should be used in preference to the standard library for memory leak checking or replacing the malloc_APIName function,,0,null,The dup_APIName functions use OPENSSL_malloc_APIName underneath and so should be used in preference to the standard library for memory leak checking or replacing the malloc_APIName function.,"BUF_strdup_APIName, BUF_strndup_APIName, BUF_memdup_APIName, BUF_strlcpy_APIName, BUF_strlcat_APIName and BUF_strnlen are equivalents of the standard C library functions. The dup_APIName functions use OPENSSL_malloc_APIName underneath and so should be used in preference to the standard library for memory leak checking or replacing the malloc_APIName function."
4,4,In a non-blocking environment applications must be prepared to handle incomplete read/write operations,,1,null,In a non-blocking environment applications must be prepared to handle incomplete read/write operations.,"Never bother the application with retries if the transport is blocking. If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ. In a non-blocking environment applications must be prepared to handle incomplete read/write operations. In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report. The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion."
4,4,Never bother the application with retries,,1,if the transport is blocking,Never bother the application with retries if the transport is blocking.,"Never bother the application with retries if the transport is blocking. If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ. In a non-blocking environment applications must be prepared to handle incomplete read/write operations. In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report. The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion."
4,4,New applications should use a cryptographic hash function,,0,null,New applications should use a cryptographic hash function.,DES_string_to_key_APIName is available for backward compatibility with the MIT library. New applications should use a cryptographic hash function. The same applies for DES_string_to_2key_APIName.
4,4,EVP_DecodeFinal_APIName must be called at the end of a decoding operation,,1,null,EVP_DecodeFinal_APIName must be called at the end of a decoding operation.,"EVP_DecodeFinal_APIName must be called at the end of a decoding operation. If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1, then the input data must not have been a multiple of 4 and therefore an error has occurred. The function will return -1 in this case. Otherwise the function returns 1 on success."
4,4,Certain conditions have to be observed to securely use stream ciphers,,1,null,Certain conditions have to be observed to securely use stream ciphers.,Certain conditions have to be observed to securely use stream ciphers. It is not permissible to perform multiple encryptions using the same key stream.
4,4,it should be freed using UI_free_APIName,,1,When done with this UI,"When done with this UI, a new UI should be freed using UI_free_APIName.","UI_new_method_APIName creates a new UI using the given UI method. When done with this UI, a new UI should be freed using UI_free_APIName."
4,4,All structural references should be released by a corresponding to call to the ENGINE_free_APIName function,,,null,All structural references should be released by a corresponding to call to the ENGINE_free_APIName function.,"The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName. All structural references should be released by a corresponding to call to the ENGINE_free_APIName function. The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released."
4,4,SSL_get_version_APIName should only be called after the initial handshake has been completed,,1,null,SSL_get_version_APIName should only be called after the initial handshake has been completed.,SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1. SSL_get_version_APIName should only be called after the initial handshake has been completed. Prior to that the results returned from this function may be unreliable.
4,4,the application must select the session to be reused by using the SSL_set_session_APIName function,,,null,"As there is no reliable way for the OpenSSL library to know whether a session should be reused or which session to choose (due to the abstract BIO layer the SSL engine does not have details about the connection), the application must select the session to be reused by using the SSL_set_session_APIName function.","Client sessions are added to the session cache. As there is no reliable way for the OpenSSL library to know whether a session should be reused or which session to choose (due to the abstract BIO layer the SSL engine does not have details about the connection), the application must select the session to be reused by using the SSL_set_session_APIName function. This option is not activated by default."
4,4,EVP_MD_CTX_destroy_APIName should be called only on a context created using EVP_MD_CTX_create_APIName,,1,null,"EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName, EVP_MD_CTX_destroy_APIName should be called only on a context created using EVP_MD_CTX_create_APIName.","EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName, EVP_MD_CTX_destroy_APIName should be called only on a context created using EVP_MD_CTX_create_APIName."
4,4,the complete shutdown procedure must be performed,,,When the underlying connection shall be used for more communications,"When the underlying connection shall be used for more communications, the complete shutdown procedure (bidirectional ""close notify"" alerts) must be performed, so that the peers stay synchronized.","The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert. According to the TLS standard, it is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response (this way resources can be saved, as the process can already terminate or serve another connection). When the underlying connection shall be used for more communications, the complete shutdown procedure (bidirectional ""close notify"" alerts) must be performed, so that the peers stay synchronized."
4,4,To add a private key to this empty structure the functions described in EVP_PKEY_set1_RSA_APIName should be used,,,null,To add a private key to this empty structure the functions described in EVP_PKEY_set1_RSA_APIName should be used.,The structure returned by EVP_PKEY_new_APIName is empty. To add a private key to this empty structure the functions described in EVP_PKEY_set1_RSA_APIName should be used.
4,4,It should be noted that both methods can not be used on servers that run without user interaction,,,null,It should be noted that both methods cannot be used on servers that run without user interaction.,"The RAND_screen_APIName function is available for the convenience of Windows programmers. It adds the current contents of the screen to the PRNG. For applications that can catch Windows events, seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness. It should be noted that both methods cannot be used on servers that run without user interaction."
4,4,After this call X509_STORE_CTX_set0_param_APIParam_2 should not be used,,,null,After this call X509_STORE_CTX_set0_param_APIParam_2 should not be used.,X509_STORE_CTX_set0_param_APIName sets the intenal verification parameter pointer to X509_STORE_CTX_set0_param_APIParam_2. After this call X509_STORE_CTX_set0_param_APIParam_2 should not be used.
4,4,EVP_MD_CTX_cleanup_APIName should be called after a digest context is no longer needed,,,null,"EVP_MD_CTX_cleanup_APIName cleans up digest context EVP_MD_CTX_cleanup_APIParam_1, EVP_MD_CTX_cleanup_APIName should be called after a digest context is no longer needed.","EVP_MD_CTX_cleanup_APIName cleans up digest context EVP_MD_CTX_cleanup_APIParam_1, EVP_MD_CTX_cleanup_APIName should be called after a digest context is no longer needed."
4,4,BIO_puts_APIName is supported but BIO_gets_APIName is not supported ,1,,null,BIO_puts_APIName is supported but BIO_gets_APIName is not.,BIO_read_APIName and BIO_write_APIName read or write the underlying socket. BIO_puts_APIName is supported but BIO_gets_APIName is not.
4,4,OpenSSL_add_all_algorithms_APIName should be called before using this function or errors about unknown algorithms will occur,,,null,OpenSSL_add_all_algorithms_APIName (or equivalent) should be called before using this function or errors about unknown algorithms will occur.,OpenSSL_add_all_algorithms_APIName (or equivalent) should be called before using this function or errors about unknown algorithms will occur.
4,4,All BN_CTX_get_APIName calls must be made before calling any other functions that use the BN_CTX_start_APIParam_1 BN_CTX_get_APIParam_1 BN_CTX_get_APIParam_1 as an argument,,,null,All BN_CTX_get_APIName calls must be made before calling any other functions that use the BN_CTX_start_APIParam_1 BN_CTX_get_APIParam_1 BN_CTX_get_APIParam_1 as an argument.,"A function must call BN_CTX_start_APIName first. Then, BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s. All BN_CTX_get_APIName calls must be made before calling any other functions that use the BN_CTX_start_APIParam_1 BN_CTX_get_APIParam_1 BN_CTX_get_APIParam_1 as an argument."
4,4,"To use these ciphers with RSA keys of usual length , an ephemeral key exchange must be performed , as the normal key can not be directly used",,,null,"To use these ciphers with RSA keys of usual length, an ephemeral key exchange must be performed, as the normal (certified) key cannot be directly used.","Under previous export restrictions, ciphers with RSA keys shorter (512 bits) than the usual key length of 1024 bits were created. To use these ciphers with RSA keys of usual length, an ephemeral key exchange must be performed, as the normal (certified) key cannot be directly used."
4,4,BIOs should be removed from the chain using BIO_pop_APIName and freed with BIO_free_APIName until BIO_new_CMS_APIParam_1 is reached,,,If an application wishes to write additional data to BIO_new_CMS_APIParam_1,"If an application wishes to write additional data to BIO_new_CMS_APIParam_1 ,BIOs should be removed from the chain using BIO_pop_APIName and freed with BIO_free_APIName until BIO_new_CMS_APIParam_1 is reached.","If an application wishes to write additional data to BIO_new_CMS_APIParam_1 ,BIOs should be removed from the chain using BIO_pop_APIName and freed with BIO_free_APIName until BIO_new_CMS_APIParam_1 is reached. If no additional data needs to be written ,BIO_free_all_APIName can be called to free up the whole chain."
4,4,"In parallel , the sessions form a linked list which is maintained separately from the lhash_APIName operations , so that the database must not be modified directly but by using the SSL_CTX_add_session_APIName family of functions",,,null,"In parallel, the sessions form a linked list which is maintained separately from the lhash_APIName operations, so that the database must not be modified directly but by using the SSL_CTX_add_session_APIName family of functions.","The sessions in the internal session cache are kept in an lhash_APIName type database. It is possible to directly access this database eg for searching. In parallel, the sessions form a linked list which is maintained separately from the lhash_APIName operations, so that the database must not be modified directly but by using the SSL_CTX_add_session_APIName family of functions."
4,4,Normally The RSA_padding_add_PKCS1_type_1_APIName RSA_padding_check_PKCS1_type_1_APIName RSA_padding_add_PKCS1_type_2_APIName RSA_padding_check_PKCS1_type_2_APIName RSA_padding_add_PKCS1_OAEP_APIName RSA_padding_check_PKCS1_OAEP_APIName RSA_padding_add_SSLv23_APIName RSA_padding_check_SSLv23_APIName RSA_padding_add_none_APIName RSA_padding_check_none_APIName functions should not be called from application programs,,,null,Normally The RSA_padding_xxx_xxx_APIName functions should not be called from application programs.,"The RSA_padding_xxx_xxx_APIName functions are called from the RSA encrypt, decrypt, sign and verify functions. Normally The RSA_padding_xxx_xxx_APIName functions should not be called from application programs."
4,4,As a result the use of this `` reuse '' of d2i_X509_APIName behaviour is strongly discouraged,2,,null,"As a result the use of this ""reuse"" behaviour is strongly discouraged.","In some versions of OpenSSL the ""reuse"" behaviour of d2i_X509_APIName when d2i_X509_APIParam_1 is valid is broken and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one. As a result the use of this ""reuse"" behaviour is strongly discouraged."
4,4,SSL_library_init_APIName must be called before any other action takes place,,,null,SSL_library_init_APIName must be called before any other action takes place.,SSL_library_init_APIName must be called before any other action takes place. SSL_library_init_APIName is not reentrant.
4,4,this must be called to initialize a digest BIO before any data is passed through digest BIO,,,null,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2: this must be called to initialize a digest BIO before any data is passed through digest BIO.,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2: this must be called to initialize a digest BIO before any data is passed through digest BIO. It is a BIO_ctrl_APIName macro.
4,4,for setting SSL_SENT_SHUTDOWN the application must however still call SSL_shutdown_APIName or SSL_set_shutdown_APIName itself,1,,null,"If a ""close notify"" was received, SSL_RECEIVED_SHUTDOWN will be set, for setting SSL_SENT_SHUTDOWN the application must however still call SSL_shutdown_APIName or SSL_set_shutdown_APIName itself.","If a ""close notify"" was received, SSL_RECEIVED_SHUTDOWN will be set, for setting SSL_SENT_SHUTDOWN the application must however still call SSL_shutdown_APIName or SSL_set_shutdown_APIName itself."
4,4,"After all content has been written through the chain, BIO_flush_APIName must be called to finalise the structure",,,null,After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.,The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.
4,4,The function SSL_CONF_finish_APIName must be called after all configuration operations have been completed,,,null,The function SSL_CONF_finish_APIName must be called after all configuration operations have been completed.,The function SSL_CONF_finish_APIName must be called after all configuration operations have been completed. The function SSL_CONF_finish_APIName is used to finalise any operations or to process defaults.
4,4,"Newer applications should use a more modern algorithm such as PBKDF2 as defined in PKCS # 5v2 .1 and provided by pkcs5_pbkdf2_hmac_APIName, pkcs5_pbkdf2_hmac_sha1_APIName",1,,null,Newer applications should use a more modern algorithm such as PBKDF2 as defined in PKCS#5v2.1 and provided by PKCS5_PBKDF2_HMAC.,Newer applications should use a more modern algorithm such as PBKDF2 as defined in PKCS#5v2.1 and provided by PKCS5_PBKDF2_HMAC.
4,4,It is the caller 's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator,,,null,It is the caller's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (ie 66 bytes in total).,EVP_EncodeFinal_APIName must be called at the end of an encoding operation. EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object. The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3. It is the caller's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (ie 66 bytes in total).
4,4,It could be argued that BIO_gets_APIName and BIO_puts_APIName should be passed to the next BIO in the chain and digest the data passed through and that digests should be retrieved using a separate BIO_ctrl_APIName call,,,null,It could be argued that BIO_gets_APIName and BIO_puts_APIName should be passed to the next BIO in the chain and digest the data passed through and that digests should be retrieved using a separate BIO_ctrl_APIName call.,The lack of support for BIO_puts_APIName and the non standard behaviour of BIO_gets_APIName could be regarded as anomalous. It could be argued that BIO_gets_APIName and BIO_puts_APIName should be passed to the next BIO in the chain and digest the data passed through and that digests should be retrieved using a separate BIO_ctrl_APIName call.
4,4,"In a setup where attackers can measure the time of RSA decryption or signature operations , blinding must be used to protect the RSA operation from that attack",,,null,"In a setup where attackers can measure the time of RSA decryption or signature operations, blinding must be used to protect the RSA operation from that attack.","RSA is vulnerable to timing attacks. In a setup where attackers can measure the time of RSA decryption or signature operations, blinding must be used to protect the RSA operation from that attack."
4,4,"Typically an application will first decrypt an appropriate CMS_RecipientInfo structure to make the content encrypt key available , it will add a new recipient using a function such as CMS_add1_recipient_cert_APIName and finally encrypt the content encryption key using CMS_RecipientInfo_encrypt_APIName",,,null,"Typically an application will first decrypt an appropriate CMS_RecipientInfo structure to make the content encrypt key available, it will then add a new recipient using a function such as CMS_add1_recipient_cert_APIName and finally encrypt the content encryption key using CMS_RecipientInfo_encrypt_APIName.","The CMS_RecipientInfo_encrypt_APIName can be used to add a new recipient to an existing enveloped data structure. Typically an application will first decrypt an appropriate CMS_RecipientInfo structure to make the content encrypt key available, it will then add a new recipient using a function such as CMS_add1_recipient_cert_APIName and finally encrypt the content encryption key using CMS_RecipientInfo_encrypt_APIName."
4,4,that is The OpenSSL ASN1 functions can not retry after a partial read or write,2,,null,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write.,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write. This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.
4,4,"SSL_SESSION_free_APIName must not be called on other SSL_SESSION objects , as this would cause incorrect reference counts and program failures",,1,null,"SSL_SESSION_free_APIName must not be called on other SSL_SESSION objects, as this would cause incorrect reference counts and therefore program failures.","SSL_SESSION_free_APIName must only be called for SSL_SESSION objects, for which the reference count was explicitly incremented (eg by calling SSL_get1_session_APIName, see SSL_get_session_APIName ) or when the SSL_SESSION object was generated outside a TLS handshake operation, eg by using d2i_SSL_SESSION_APIName . SSL_SESSION_free_APIName must not be called on other SSL_SESSION objects, as this would cause incorrect reference counts and therefore program failures."
4,4,An application will normally wait until the necessary condition is satisfied,,1,null,An application will normally wait until the necessary condition is satisfied.,While an application may retry a failed non blocking call immediately this is likely to be very inefficient because the call will fail repeatedly until data can be processed or is available. An application will normally wait until the necessary condition is satisfied. How this is done depends on the underlying I/O structure.
4,4,A client application must provide a callback function which is called when the client is sending the ClientKeyExchange message to the server.,1,1,null,A client application must provide a callback function which is called when the client is sending the ClientKeyExchange message to the server.,A client application must provide a callback function which is called when the client is sending the ClientKeyExchange message to the server.
4,4,The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form,,0,null,"The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies.","The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies. Their use is strongly discouraged in new applications."
4,4,"MD2_APIName , MD4_APIName , and MD5_APIName are recommended only for compatibility with existing applications",,0,null,"MD2, MD4, and MD5 are recommended only for compatibility with existing applications.","MD2, MD4, and MD5 are recommended only for compatibility with existing applications. In new applications, SHA-1 or RIPEMD-160 should be preferred."
4,4,BN_CTX_end_APIName must be called before the BN_CTX_new_APIParam_0 may be freed by BN_CTX_free_APIName,,0,If BN_CTX_start_APIName has been used on the BN_CTX_new_APIParam_0,"If BN_CTX_start_APIName has been used on the BN_CTX_new_APIParam_0, BN_CTX_end_APIName must be called before the BN_CTX_new_APIParam_0 may be freed by BN_CTX_free_APIName.","BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0, and if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName, also the structure itself. If BN_CTX_start_APIName has been used on the BN_CTX_new_APIParam_0, BN_CTX_end_APIName must be called before the BN_CTX_new_APIParam_0 may be freed by BN_CTX_free_APIName."
4,4,"Thus , SSL_get_error_APIName must be used in the same thread that performed the TLS/SSL I/O operation , and no other OpenSSL function calls should appear in between",,0,null,"Thus, SSL_get_error_APIName must be used in the same thread that performed the TLS/SSL I/O operation, and no other OpenSSL function calls should appear in between.","In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2, SSL_get_error_APIName inspects the current thread's OpenSSL error queue. Thus, SSL_get_error_APIName must be used in the same thread that performed the TLS/SSL I/O operation, and no other OpenSSL function calls should appear in between. The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error_APIName will not work reliably."
4,4,An application must not rely on the error value of SSL_operation_APIName but must assure that the write buffer is always flushed first,,1,null,An application must not rely on the error value of SSL_operation_APIName but must assure that the write buffer is always flushed first.,"As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer. An application must not rely on the error value of SSL_operation_APIName but must assure that the write buffer is always flushed first. Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue."
4,4,"As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport , it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed",,1,null,"As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed.","SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
4,4,"However , the meaningfulness of this result is dependent on whether the ENGINE API is being used , so DSA_get_default_method_APIName is no longer recommended",,0,null,"However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended.","DSA_get_default_method_APIName returns a pointer to the current default DSA_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
4,4,EVP_CIPHER_CTX_cleanup_APIName should be called after all operations using a cipher are complete so sensitive information does not remain in memory,,1,null,EVP_CIPHER_CTX_cleanup_APIName should be called after all operations using a cipher are complete so sensitive information does not remain in memory.,EVP_CIPHER_CTX_cleanup_APIName clears all information from a cipher context and free up any allocated memory associate with EVP_CIPHER_CTX_cleanup_APIName. EVP_CIPHER_CTX_cleanup_APIName should be called after all operations using a cipher are complete so sensitive information does not remain in memory.
4,4,it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit,,1,"if any ENGINEs are loaded , if the caller wishes to avoid memory leaks .","If no ENGINE API functions are called at all in an application , then there are no inherent memory leaks to worry about from the ENGINE functionality , however if any ENGINEs are loaded ,  , it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit , if the caller wishes to avoid memory leaks .","If no ENGINE API functions are called at all in an application, then there are no inherent memory leaks to worry about from the ENGINE functionality, however if any ENGINEs are loaded, even if they are never registered or used, it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit, if the caller wishes to avoid memory leaks. This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName. This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses, yet doesn't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker."
4,4,the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried,,,null,"A zero or negative value is returned if the connection could not be established, the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried.","BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection. BIO_do_handshake_APIName returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried. If an SSL connection has already been established ,this call has no effect."
4,4,"Finally, BN_CTX_end_APIName must be called before returning from the function",,,null,"Finally, BN_CTX_end_APIName must be called before returning from the function.","Finally, BN_CTX_end_APIName must be called before returning from the function. When BN_CTX_end_APIName is called, the BN_CTX_get_APIParam_0 pointers obtained from BN_CTX_get_APIName become invalid."
4,4,Note that SSL_shutdown_APIName must not be called,1,,if SSL_get_error_APIName has returned SSL_ERROR_SYSCALL or SSL_ERROR_SSL,Note that SSL_shutdown_APIName must not be called if a previous fatal error has occurred on a connection ie if SSL_get_error_APIName has returned SSL_ERROR_SYSCALL or SSL_ERROR_SSL.,Note that SSL_shutdown_APIName must not be called if a previous fatal error has occurred on a connection ie if SSL_get_error_APIName has returned SSL_ERROR_SYSCALL or SSL_ERROR_SSL.
4,4,"Note that OpenSSL is not completely thread-safe , and unfortunately not all global resources have the necessary locks",,,null,"Note that OpenSSL is not completely thread-safe, and unfortunately not all global resources have the necessary locks","OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func. Note that OpenSSL is not completely thread-safe, and unfortunately not all global resources have the necessary locks. Further, the thread-safety does not extend to things like multiple threads using the same SSL object at the same time."
4,4,The DSA_PUBKEY functions should be used in preference to the DSAPublicKey functions ,1,,when encoding public keys,The DSA_PUBKEY functions should be used in preference to the DSAPublicKey functions when encoding public keys,The DSA_PUBKEY functions should be used in preference to the DSAPublicKey functions when encoding public keys because they use a standard format.
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_connect,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_connect(),"If the underlying BIO is non-blocking, SSL_connect() will also return when the underlying BIO could not satisfy the needs of SSL_connect() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_connect() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_connect(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,it is not strictly necessary to generate a new DH key during each handshake but it is also recommended,,,If `` strong '' primes were used,"If ""strong"" primes were used, it is not strictly necessary to generate a new DH key during each handshake but it is also recommended","Always create a new key when using temporary/ephemeral DH parameters (see SSL_CTX_set_tmp_dh_callback(3) ). This option must be used to prevent small subgroup attacks, when the DH parameters were not generated using ""strong"" primes (eg when using DSA-parameters, see dhparam(1) ). If ""strong"" primes were used, it is not strictly necessary to generate a new DH key during each handshake but it is also recommended. SSL_OP_SINGLE_DH_USE should therefore be enabled whenever temporary/ephemeral DH parameters are used."
4,4,"Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host , hostname checks are out of scope with the DANE-EE certificate usage , and",,,null,"Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL","X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names. If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate. If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name. When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero). Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL."
4,4,EVP_PKEY_set1_engine_APIName must be called after the key algorithm and components are set up,,,null,It must be called after the key algorithm and components are set up,EVP_PKEY_set1_engine() sets the ENGINE handling EVP_PKEY_set1_engine_APIParam_1 to EVP_PKEY_set1_engine_APIParam_2. It must be called after the key algorithm and components are set up. If EVP_PKEY_set1_engine_APIParam_2 does not include an EVP_PKEY_METHOD for EVP_PKEY_set1_engine_APIParam_1 an error occurs.
4,4,RSA_set_default_method_APIName is no longer recommended,,,null,"NB: This is true only whilst no ENGINE has been set as a default for RSA, so this function is no longer recommended","RSA_set_default_method() makes RSA_set_default_method_APIParam_1 the default method for all RSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for RSA, so this function is no longer recommended."
4,4,This is rarely used in practice and is not supported by SMIME_write_CMS,,,null,This is rarely used in practice and is not supported by SMIME_write_CMS(),"The compressed data is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is rarely used in practice and is not supported by SMIME_write_CMS()."
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_accept,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_accept(),"If the underlying BIO is non-blocking, SSL_accept() will also return when the underlying BIO could not satisfy the needs of SSL_accept() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_accept() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_accept(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,An application MUST NOT free the data pointer with OPENSSL_free_APIName,,,null,An application MUST NOT free the *data pointer (or any other pointers returned by these functions) with OPENSSL_free() as freeing is handled automatically by the error library,An application MUST NOT free the *data pointer (or any other pointers returned by these functions) with OPENSSL_free() as freeing is handled automatically by the error library.
4,4,Applications which use the configuration functions directly will need to call OPENSSL_load_builtin_modules themselves before any other configuration code,,,null,Applications which use the configuration functions directly will need to call OPENSSL_load_builtin_modules() themselves before any other configuration code,Applications which use the configuration functions directly will need to call OPENSSL_load_builtin_modules() themselves before any other configuration code.
4,4,Do not mix the verification callback described in this function with the verify_callback function called,,,during the verification process,Do not mix the verification callback described in this function with the verify_callback function called during the verification process,Do not mix the verification callback described in this function with the verify_callback function called during the verification process. The latter is set using the SSL_CTX_set_verify(3) family of functions.
4,4,X509_add1_trust_object_APIParam_1 and X509_add1_trust_object_APIParam_2 should be freed up,,,null,The 1 function uses a copy of the supplied structure pointer (or in some cases increases The 1 function link count) in the parent and so both (x and obj above) should be freed up,The 1 function uses a copy of the supplied structure pointer (or in some cases increases The 1 function link count) in the parent and so both (x and obj above) should be freed up.
4,4,An application should not free the SSL_CTX_add_extra_chain_cert_APIParam_2 object,,,null,An application should not free the SSL_CTX_add_extra_chain_cert_APIParam_2 object,The SSL_CTX_add_extra_chain_cert_APIParam_2 certificate provided to SSL_CTX_add_extra_chain_cert() will be freed by the library when the SSL_CTX_add_extra_chain_cert_APIParam_1 is destroyed. An application should not free the SSL_CTX_add_extra_chain_cert_APIParam_2 object.
4,4,an explicit call to PKCS7_SIGNER_INFO_sign is needed to finalize this case,,,null,In this case an explicit call to PKCS7_SIGNER_INFO_sign() is needed to finalize this case,"If PKCS7_PARTIAL is set in addition to PKCS7_REUSE_DIGEST ,then the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added. In this case an explicit call to PKCS7_SIGNER_INFO_sign() is needed to finalize this case."
4,4,an explicit call to CMS_SignerInfo_sign is needed to finalize it,,,null,In this case an explicit call to CMS_SignerInfo_sign() is needed to finalize it,"If CMS_PARTIAL is set in addition to CMS_REUSE_DIGEST, then the CMS_SignerInfo structure will not be finalized so additional attributes can be added. In this case an explicit call to CMS_SignerInfo_sign() is needed to finalize it."
4,4,"the necessary amount of space should be obtained by first calling i2d_SSL_SESSION with pp setting to NULL , and obtain the size needed , allocate the memory and call i2d_SSL_SESSION again",,,null,"There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
4,4,"After this function is called, the encryption operation is finished and no further calls to EVP_EncryptUpdate should be made",,,null,After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made,"If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding). The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made."
4,4,DH_set_default_method_APIName is no longer recommended,,,null,"NB: This is true only whilst no ENGINE has been set as a default for DH, so this function is no longer recommended","DH_set_default_method() makes DH_set_default_method_APIParam_1 the default method for all DH structures created later. NB: This is true only whilst no ENGINE has been set as a default for DH, so this function is no longer recommended."
4,4,New applications should write private keys using the PEM_write_bio_PKCS8PrivateKey or PEM_write_PKCS8PrivateKey routines,,,null,New applications should write private keys using the PEM_write_bio_PKCS8PrivateKey or PEM_write_PKCS8PrivateKey routines,The old PrivateKey write routines are retained for compatibility. New applications should write private keys using the PEM_write_bio_PKCS8PrivateKey() or PEM_write_PKCS8PrivateKey() routines because New applications are more secure (New applications use an iteration count of 2048 whereas the traditional routines use a count of 1) unless compatibility with older versions of OpenSSL is important.
4,4,The CMS_ContentInfo structure should be obtained from an initial call to CMS_encrypt with the flag CMS_PARTIAL set,,,null,The CMS_ContentInfo structure should be obtained from an initial call to CMS_encrypt() with the flag CMS_PARTIAL set,The CMS_ContentInfo structure should be obtained from an initial call to CMS_encrypt() with the flag CMS_PARTIAL set.
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_read,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_read(),"If the underlying BIO is non-blocking, SSL_read() will also return when the underlying BIO could not satisfy the needs of SSL_read() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_read() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_read() can also cause write operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_read(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,DSA_set_default_method_APIName is no longer recommended,,,null,"NB: This is true only whilst no ENGINE has been set as a default for DSA, so this function is no longer recommended","DSA_set_default_method() makes DSA_set_default_method_APIParam_1 the default method for all DSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for DSA, so this function is no longer recommended."
4,4,"To do so, the client should call the SSL_set_tlsext_status_type function prior to the start of the handshake",,,null,To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake,A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
4,4,"Modern servers that do not support export ciphersuites are advised to either use SSL_CTX_set_tmp_dh or alternatively , use the callback but ignore keylength and is_export and simply supply at least 2048-bit parameters in the callback",,,null,"Modern servers that do not support export ciphersuites are advised to either use SSL_CTX_set_tmp_dh() or alternatively, use the callback but ignore keylength and is_export and simply supply at least 2048-bit parameters in the callback","Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites. Modern servers that do not support export ciphersuites are advised to either use SSL_CTX_set_tmp_dh() or alternatively, use the callback but ignore keylength and is_export and simply supply at least 2048-bit parameters in the callback."
4,4,The above functions should be used instead of directly referencing the fields in the X509_VERIFY_CTX structure,,,null,The above functions should be used instead of directly referencing the fields in the X509_VERIFY_CTX structure,The above functions should be used instead of directly referencing the fields in the X509_VERIFY_CTX structure.
4,4,This list must explicitly be set using SSL_CTX_set_client_CA_list_APIName for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list_APIName for the specific SSL_add_client_CA_APIParam_1,,,null,This list must explicitly be set using SSL_CTX_set_client_CA_list() for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list() for the specific SSL_add_client_CA_APIParam_1,"This list must explicitly be set using SSL_CTX_set_client_CA_list() for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list() for the specific SSL_add_client_CA_APIParam_1. The list specified overrides the previous setting. The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification."
4,4,it should be free up using sk_X509_pop_free_APIName,1,,when it is no longer needed,"The returned chain persists after the X509_STORE_CTX_get_error_APIParam_1 X509_STORE_CTX_get_current_cert_APIParam_1 X509_STORE_CTX_get_error_depth_APIParam_1 X509_STORE_CTX_set_error_APIParam_1 structure is freed, when it is no longer needed it should be free up using sk_X509_pop_free_APIName","X509_STORE_CTX_get1_chain() returns a complete validate chain if a previous call to X509_verify_cert() is successful. If the call to X509_verify_cert() is not successful the returned chain may be incomplete or invalid. The returned chain persists after the X509_STORE_CTX_get_error_APIParam_1 X509_STORE_CTX_get_current_cert_APIParam_1 X509_STORE_CTX_get_error_depth_APIParam_1 X509_STORE_CTX_set_error_APIParam_1 structure is freed, when it is no longer needed it should be free up using sk_X509_pop_free_APIName"
4,4,This function should only be used,,,when streaming is not performed,This function should only be used when streaming is not performed,This function will normally be called when the CMS_PARTIAL flag is used. This function should only be used when streaming is not performed because the streaming I/O functions perform finalisation operations internally.
4,4,It must be called before each call to X509_verify_cert_APIName,,,null,"It must be called before each call to X509_verify_cert(), ie a X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert()","X509_STORE_CTX_init() sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation. It must be called before each call to X509_verify_cert(), ie a X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert(). The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain. Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, STACK_OF_APIParam_0 and chain parameters can be NULL."
4,4,The certificates and CRLs in a store are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed,,,null,The certificates and CRLs in a store are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed,The certificates and CRLs in a store are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed. Legacy applications might implicitly use an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 like this:
4,4,The certificates and CRLs in a context are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed,,,null,The certificates and CRLs in a context are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed,The certificates and CRLs in a context are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed. Copies should be made or reference counts increased instead.
4,4,These functions should never be called directly,,,null,These functions should never be called directly,"The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects. Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3, SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4, or fp are evaluated. These functions should never be called directly. All functionalities needed are made available via other functions or macros."
4,4,The value returned is an internal pointer which must not be freed up after the call,,,null,The value returned is an internal pointer which must not be freed up after the call,X509_get0_notBefore() and X509_get0_notAfter() return the notBefore and notAfter fields of certificate X509_get0_notBefore_APIParam_1 X509_get0_notAfter_APIParam_1 respectively. The value returned is an internal pointer which must not be freed up after the call.
4,4,the callback must call SSL_has_matching_session_id_APIName and generate another id,,,if a conflict occurs,", the callback must call SSL_has_matching_session_id and generate another id if a conflict occurs","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake_APIName,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake(),"If the underlying BIO is non-blocking, SSL_do_handshake() will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_do_handshake() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,it must be freed up after the call,,1,null,Ownership of the passed parameter X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2 is not transferred by these functions so it must be freed up after the call,X509_set1_notBefore() and X509_set1_notAfter() set the notBefore and notAfter fields of X509_set1_notBefore_APIParam_1 X509_set1_notAfter_APIParam_1 to X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2. Ownership of the passed parameter X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2 is not transferred by these functions so it must be freed up after the call.
4,4,it must be freed up after the call,,1,null,Ownership of the passed parameter X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2 is not transferred by these functions so it must be freed up after the call,X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() set the lastUpdate and nextUpdate fields of X509_CRL_get0_nextUpdate_APIParam_1 X509_CRL_get0_lastUpdate_APIParam_1 to X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2. Ownership of the passed parameter X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2 is not transferred by these functions so it must be freed up after the call.
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_write_APIName,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_write(),"If the underlying BIO is non-blocking, SSL_write() will also return, when the underlying BIO could not satisfy the needs of SSL_write() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_write() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_write() can also cause read operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_write(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,CMS_final_APIName must be called to finalize the structure,,,if streaming is not enabled,CMS_final() must then be called to finalize the structure if streaming is not enabled,"The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes. For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set. Then one or more signers can be added using the function CMS_sign_add1_signer(), non default digests can be used and custom attributes added. CMS_final() must then be called to finalize the structure if streaming is not enabled."
4,4,The returned pointer is an internal pointer which must not be freed,,,null,The returned pointer is an internal pointer which must not be freed,OBJ_get0_data() returns a pointer to the content octets of OBJ_length_APIParam_1. The returned pointer is an internal pointer which must not be freed.
4,4,SSL_get0_alpn_selected_APIParam_2 must not be freed,,,null,SSL_get0_alpn_selected_APIParam_2 must not be freed,SSL_get0_alpn_selected() returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len. It is not NUL-terminated. SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0 if no protocol has been selected. SSL_get0_alpn_selected_APIParam_2 must not be freed.
4,4,"As the 0 implies CMS_get0_type, CMS_get0_eContentType and CMS_get0_content return internal pointers which should not be freed up",,,null,"As the 0 implies CMS_get0_type(), CMS_get0_eContentType() and CMS_get0_content() return internal pointers which should not be freed up","As the 0 implies CMS_get0_type(), CMS_get0_eContentType() and CMS_get0_content() return internal pointers which should not be freed up. CMS_set1_eContentType() copies the supplied OID and it should be freed up after use."
4,4,CMS_set1_eContentType copies the supplied OID and it should be freed up after use,,,null,CMS_set1_eContentType() copies the supplied OID and it should be freed up after use,"As the 0 implies CMS_get0_type(), CMS_get0_eContentType() and CMS_get0_content() return internal pointers which should not be freed up. CMS_set1_eContentType() copies the supplied OID and it should be freed up after use."
4,4,The calling process must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown,,,null,The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown(),"If the underlying BIO is non-blocking, SSL_shutdown() will also return when the underlying BIO could not satisfy the needs of SSL_shutdown() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_shutdown() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
4,4,"To use the serverinfo extension for multiple certificates , SSL_CTX_use_serverinfo needs to be called multiple times , once after each time a certificate is loaded",,,null,"To use the serverinfo extension for multiple certificates, SSL_CTX_use_serverinfo() needs to be called multiple times, once after each time a certificate is loaded","If more than one certificate (RSA/DSA) is installed using SSL_CTX_use_certificate(), the serverinfo extension will be loaded into the last certificate installed. If eg the last item was a RSA certificate, the loaded serverinfo extension data will be loaded for that certificate. To use the serverinfo extension for multiple certificates, SSL_CTX_use_serverinfo() needs to be called multiple times, once after each time a certificate is loaded."
4,4,it must be freed at some point after the operation,,,null,Those containing a 1 increment the reference count of the supplied certificate or chain so it must be freed at some point after the operation,All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied certificate or chain so it must be freed at some point after the operation. Those containing a SSL_CTX_select_current_cert_APIParam_2 SSL_CTX_add0_chain_cert_APIParam_2 SSL_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 SSL_select_current_cert_APIParam_2 SSL_add1_chain_cert_APIParam_2 do not increment reference counts and the supplied certificate or chain MUST NOT be freed after the operation.
4,4,Those containing a SSL_CTX_select_current_cert_APIParam_2 SSL_CTX_add0_chain_cert_APIParam_2 SSL_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 SSL_select_current_cert_APIParam_2 SSL_add1_chain_cert_APIParam_2 do not increment reference counts and the supplied certificate or chain MUST NOT be freed after the operation,,,null,Those containing a SSL_CTX_select_current_cert_APIParam_2 SSL_CTX_add0_chain_cert_APIParam_2 SSL_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 SSL_select_current_cert_APIParam_2 SSL_add1_chain_cert_APIParam_2 do not increment reference counts and the supplied certificate or chain MUST NOT be freed after the operation,All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied certificate or chain so it must be freed at some point after the operation. Those containing a SSL_CTX_select_current_cert_APIParam_2 SSL_CTX_add0_chain_cert_APIParam_2 SSL_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 SSL_select_current_cert_APIParam_2 SSL_add1_chain_cert_APIParam_2 do not increment reference counts and the supplied certificate or chain MUST NOT be freed after the operation.
4,4,the data must be read twice,,,If cleartext signing is being used and CMS_STREAM not set,"If cleartext signing is being used and CMS_STREAM not set ,then the data must be read twice: once to compute the signature in CMS_sign() and once to output the S/MIME message","If cleartext signing is being used and CMS_STREAM not set ,then the data must be read twice: once to compute the signature in CMS_sign() and once to output the S/MIME message."
4,4,These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types,,,null,These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types: the relevant INTEGER or ENUMERATED utility functions should be used instead,These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types: the relevant INTEGER or ENUMERATED utility functions should be used instead.
4,4,Instead select should be combined with non blocking I/O so successive reads will request a retry instead of blocking,,,null,Instead select() (or equivalent) should be combined with non blocking I/O so successive reads will request a retry instead of blocking,"One technique sometimes used with blocking sockets is to use a system call (such as select(), poll() or equivalent) to determine when data is available and then call read() to read the data. The equivalent with BIOs (that is call select() on the underlying I/O structure and then call BIO_read() to read the data) should not be used because a single call to BIO_read() can cause several reads (and writes in the case of SSL BIOs) on the underlying I/O structure and may block as a result. Instead select() (or equivalent) should be combined with non blocking I/O so successive reads will request a retry instead of blocking."
4,4,DES_enc_write and DES_enc_read can not handle non-blocking sockets,2,,null,these functions cannot handle non-blocking sockets,"Warning: The data format used by DES_enc_write() and DES_enc_read() has a cryptographic weakness: When asked to write more than MAXWRITE bytes, DES_enc_write() will split the data into several chunks that are all encrypted using the same IV. So don't use these functions unless you are sure you know what you do (in which case you might not want to use these functions anyway). these functions cannot handle non-blocking sockets. DES_enc_read() uses an internal state and thus cannot be used on multiple files."
4,4,"Do not explicitly free these indirectly freed up items before or after calling SSL_free , as trying to free things twice may lead to program failure",,,null,"Do not explicitly free these indirectly freed up items before or after calling SSL_free(), as trying to free things twice may lead to program failure","SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1, the SSL_SESSION. Do not explicitly free these indirectly freed up items before or after calling SSL_free(), as trying to free things twice may lead to program failure."
4,4,DES_enc_read uses an internal state and thus can not be used on multiple files,,,null,DES_enc_read() uses an internal state and thus cannot be used on multiple files,"Warning: The data format used by DES_enc_write() and DES_enc_read() has a cryptographic weakness: When asked to write more than MAXWRITE bytes, DES_enc_write() will split the data into several chunks that are all encrypted using the same IV. So don't use these functions unless you are sure you know what you do (in which case you might not want to use these functions anyway). these functions cannot handle non-blocking sockets. DES_enc_read() uses an internal state and thus cannot be used on multiple files."
4,4,CMS_get0_signers_APIName it must be called after a successful CMS_verify operation,,,null,"CMS_get0_signers() retrieves the signing certificate(s) from cms, it must be called after a successful CMS_verify() operation","CMS_get0_signers() retrieves the signing certificate(s) from cms, it must be called after a successful CMS_verify() operation."
4,4,"The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits",,,null,"The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits","lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
4,4,RAND_set_default_method_APIName is no longer recommended,,,null,"NB: This is true only whilst no ENGINE has been set as a default for RAND, so this function is no longer recommended","RAND_set_default_method() makes RAND_set_rand_method_APIParam_1 the method for PRNG use. NB: This is true only whilst no ENGINE has been set as a default for RAND, so this function is no longer recommended."
4,4,this function is only suggested for use,,,when sending small numbers of characters,", this function is only suggested for use when sending small numbers of characters","DES_ofb_encrypt() encrypts using output feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
4,4,OPENSSL_config_APIName is deprecated and its use should be avoided,,,null,This function is deprecated and its use should be avoided,"The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads)."
4,4,"In server mode , , the server must send the list of CAs of which it will accept client certificates",,,when requesting a client certificate,"In server mode, when requesting a client certificate, the server must send the list of CAs of which it will accept client certificates","In server mode, when requesting a client certificate, the server must send the list of CAs of which it will accept client certificates. This list is not influenced by the contents of SSL_CTX_load_verify_locations_APIParam_2 or CApath and must explicitly be set using the SSL_CTX_set_client_CA_list(3) family of functions."
4,4,Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load directly,,,null,Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly,"The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads)."
4,4,This call should be made before the cipher is actually `` used '',,,null,"This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example)","EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example). This function may fail if the cipher does not have any ASN1 support."
4,4,This function should not be called on untrusted input,,,null,This function should not be called on untrusted input,"d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information. This is used by the PEM routines to read ""TRUSTED CERTIFICATE"" objects. This function should not be called on untrusted input."
4,4,This function should be called after the base cipher type is set but before the key is set,,,null,This function should be called after the base cipher type is set but before the key is set,"EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier ""parameter"". The precise effect depends on the cipher In the case of RC2, for example, it will set the IV and effective key length. This function should be called after the base cipher type is set but before the key is set. For example EVP_CipherInit_APIName will be called with the IV and key set to NULL, EVP_CIPHER_asn1_to_param_APIName will be called and finally EVP_CipherInit_APIName again with all parameters except the key set to NULL. It is possible for this function to fail if the cipher does not have any ASN1 support or the parameters cannot be set (for example the RC2 effective key length is not supported."
4,4,"The values written to revtime , OCSP_check_validity_APIParam_1 and nextupd by OCSP_resp_find_status and OCSP_single_get0_status are internal pointers which MUST NOT be freed up by the calling application",,,null,"The values written to *revtime, OCSP_check_validity_APIParam_1 and *nextupd by OCSP_resp_find_status() and OCSP_single_get0_status() are internal pointers which MUST NOT be freed up by the calling application","The values written to *revtime, OCSP_check_validity_APIParam_1 and *nextupd by OCSP_resp_find_status() and OCSP_single_get0_status() are internal pointers which MUST NOT be freed up by the calling application. Any or all of these parameters can be set to NULL if their value is not required."
4,4,Applications should use the higher level functions EVP_EncryptInit_APIName instead of calling the RC4_set_key_APIName and RC4_APIName directly.,,0,null,Applications should use the higher level functions EVP_EncryptInit_APIName instead of calling the RC4 functions directly.,Applications should use the higher level functions EVP_EncryptInit_APIName instead of calling the RC4 functions directly.
4,3,The OpenSSL ASN1 functions can not gracefully deal with non blocking I/O,,1,null,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write.,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write. This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.
4,3,low level algorithm specific functions's use is discouraged,2,1,null," , their use is discouraged .","Although low level algorithm specific functions exist for many algorithms, their use is discouraged. They cannot be used with an ENGINE and ENGINE versions of new algorithms cannot be accessed using the low level functions. Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface."
4,3,A method of verifying the RSA key using opaque RSA API functions might need to be considered,,1,null,A method of verifying the RSA key using opaque RSA API functions might need to be considered.,"A method of verifying the RSA key using opaque RSA API functions might need to be considered. Right now RSA_check_key_APIName simply uses the RSA structure elements directly, bypassing the RSA_METHOD table altogether (and completely violating encapsulation and object-orientation in the process). The best fix will probably be to introduce a ""check_key_APIName"" handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers."
4,3,RSA_generate_key is deprecated,,0,null,RSA_generate_key is deprecated (new applications should use RSA_generate_key_ex instead).,"RSA_generate_key is deprecated (new applications should use RSA_generate_key_ex instead). RSA_generate_key works in the same way as RSA_generate_key_ex except RSA_generate_key uses ""old style"" call backs. See BN_generate_prime_APIName for further details."
4,3,These functions are much more efficient than the normal BIGNUM arithmetic operations,,1,null,These functions are much more efficient than the normal BIGNUM arithmetic operations.,These functions perform arithmetic operations on BIGNUMs with unsigned integers. These functions are much more efficient than the normal BIGNUM arithmetic operations.
4,3,"However , the meaningfulness of this result is dependent on whether the ENGINE API is being used , so this function is no longer recommended",,,null,"However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended.","DH_get_default_method_APIName returns a pointer to the current default DH_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
4,3,"For applications that can catch Windows events , seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness",,,null,"For applications that can catch Windows events, seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness.","The RAND_screen_APIName function is available for the convenience of Windows programmers. It adds the current contents of the screen to the PRNG. For applications that can catch Windows events, seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness. It should be noted that both methods cannot be used on servers that run without user interaction."
4,3,Using the compression API in the current state is not recommended,,,null,Using the compression API in the current state is not recommended.,"Once the identities of the compression methods for the TLS protocol have been standardized, the compression API will most likely be changed. Using the compression API in the current state is not recommended."
4,3,This is no longer necessary and the use of clone digest is now discouraged,,,null,This is no longer necessary and the use of clone digest is now discouraged.,"In previous versions of OpenSSL there was a link between message digest types and public key algorithms. This meant that ""clone"" digests such as EVP_dss1_APIName needed to be used to sign using SHA1 and DSA. This is no longer necessary and the use of clone digest is now discouraged."
4,3,An application may need to securely establish the context within which this keying material will be used,,,null,An application may need to securely establish the context within which this keying material will be used.,"An application may need to securely establish the context within which this keying material will be used. For example this may include identifiers for the application session, application algorithms or parameters, or the lifetime of the context. The context value is left to the application but must be the same on both sides of the communication."
4,3,"Hence , these two functions are no longer the recommended way to control defaults",,,null,"Hence, these two functions are no longer the recommended way to control defaults.","Since the introduction of the ENGINE API, the recommended way of controlling default implementations is by using the ENGINE API functions. The default RAND_set_rand_method_APIParam_1, as set by RAND_set_rand_method_APIName and returned by RAND_get_rand_method_APIName, is only used if no ENGINE has been set as the default ""rand"" implementation. Hence, these two functions are no longer the recommended way to control defaults."
4,3,It is currently not recommended to integrate compression into applications,,,null,It is therefore currently not recommended to integrate compression into applications.,"The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure."
4,3,As a result applications may wish to use multiple keys and avoid using long term keys stored in files,,,null,As a result applications may wish to use multiple keys and avoid using long term keys stored in files.,"If an attacker can obtain the key used to encrypt a session ticket, they can obtain the master secret for any ticket using that key and decrypt any traffic using that session: even if the ciphersuite supports forward secrecy. As a result applications may wish to use multiple keys and avoid using long term keys stored in files."
4,3,"The functions EVP_DigestInit_APIName , EVP_DigestFinal_APIName and EVP_MD_CTX_copy_APIName are obsolete but are retained to maintain compatibility with existing code",,,null,"The functions EVP_DigestInit_APIName, EVP_DigestFinal_APIName and EVP_MD_CTX_copy_APIName are obsolete but are retained to maintain compatibility with existing code.","The functions EVP_DigestInit_APIName, EVP_DigestFinal_APIName and EVP_MD_CTX_copy_APIName are obsolete but are retained to maintain compatibility with existing code. New applications should use EVP_DigestInit_ex_APIName, EVP_DigestFinal_ex_APIName and EVP_MD_CTX_copy_ex_APIName because they can efficiently reuse a digest context instead of initializing and cleaning it up on each call and allow non default implementations of digests to be specified."
4,3,"HMAC_cleanup_APIName is an alias for HMAC_CTX_cleanup_APIName included for back compatibility with 0.9.6 b , HMAC_cleanup_APIName is deprecated",,0,null,"HMAC_cleanup_APIName is an alias for HMAC_CTX_cleanup_APIName included for back compatibility with 0.9.6b, HMAC_cleanup_APIName is deprecated.","HMAC_cleanup_APIName is an alias for HMAC_CTX_cleanup_APIName included for back compatibility with 0.9.6b, HMAC_cleanup_APIName is deprecated."
4,2,An application may either directly specify the key or can supply the key via a callback function,,,null,An application may either directly specify the key or can supply the key via a callback function.,"An application may either directly specify the key or can supply the key via a callback function. The callback approach has the advantage, that the callback may generate the key only in case it is actually needed. As the generation of a RSA key is however costly, it will lead to a significant delay in the handshake procedure. Another advantage of the callback function is that it can supply keys of different size while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed."
4,1,"The functions EC_GROUP_get_basis_type_APIName , EC_GROUP_get_trinomial_basis_APIName and EC_GROUP_get_pentanomial_basis_APIName should only be called for curves defined over an F2^m field",,1,null,"The functions EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis should only be called for curves defined over an F2^m field.","The functions EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis should only be called for curves defined over an F2^m field. Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial function f(x). This function is either a trinomial of the form:"
4,-1,Applications should use the higher level functions EVP_DigestInit_APIName etc,,,null,Applications should use the higher level functions EVP_DigestInit_APIName etc.,Applications should use the higher level functions EVP_DigestInit_APIName etc. instead of calling the hash functions directly.
4,-1,"It only makes sense for a new connection with the exact same peer that shares these settings, and may fail",,,if that peer changes its settings between connections,"It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections.","SSL_clear_APIName resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired)."
4,4,A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function,,,if A server application wants to be able to provide clients with OCSP Certificate Status responses,A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses.,"A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName. A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument."
4,-1,the random number generator must be seeded before calling EVP_SealInit_APIName,,,null," , the random number generator must be seeded before calling EVP_SealInit_APIName .","Because a random secret key is generated, the random number generator must be seeded before calling EVP_SealInit_APIName."
4,-1,"However , new applications should not typically use this",,,null,"However, new applications should not typically use this (preferring, for example, PBKDF2 from PCKS#5).","The EVP_BytesToKey_APIName function provides some limited support for password based encryption. Careful selection of the parameters will provide a PKCS#5 PBKDF1 compatible implementation. However, new applications should not typically use this (preferring, for example, PBKDF2 from PCKS#5)."
4,-1,These functions will typically be called after a failed BIO_read_APIName or BIO_write_APIName call,,,null,These functions will typically be called after a failed BIO_read_APIName or BIO_write_APIName call.,These functions determine why a BIO is not able to read or write data. These functions will typically be called after a failed BIO_read_APIName or BIO_write_APIName call.
4,-1,This function does not work on RSA public keys that have only the modulus and public exponent elements populated,,,null,This function does not work on RSA public keys that have only the modulus and public exponent elements populated.,"This function does not work on RSA public keys that have only the modulus and public exponent elements populated. This function performs integrity checks on all the RSA key material, so the RSA key structure must contain all the private key data too."
4,-1,"This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object , or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function , which is only available for the SSL_CTX object as a whole and that probably can only apply for one client certificate , making the concept of the callback function questionable",,,null,"This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable.","The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate. If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server. For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate). This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable."
4,-1,The above functions should be used to manipulate verification parameters instead of legacy functions which work in specific structures such as X509_STORE_CTX_set_flags_APIName,,,null,The above functions should be used to manipulate verification parameters instead of legacy functions which work in specific structures such as X509_STORE_CTX_set_flags_APIName.,The above functions should be used to manipulate verification parameters instead of legacy functions which work in specific structures such as X509_STORE_CTX_set_flags_APIName.
4,-1,it must be freed at some point after the operation,,,null,Those containing a 1 increment the reference count of the supplied store so it must be freed at some point after the operation,All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied store so it must be freed at some point after the operation. Those containing a SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2 SSL_set1_verify_cert_store_APIParam_2 SSL_set1_chain_cert_store_APIParam_2 SSL_set0_verify_cert_store_APIParam_2 SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2 do not increment reference counts and the supplied store MUST NOT be freed after the operation.
4,-1,The pseudo-random number generator must be seeded prior to calling RSA_generate_key_ex,,,null,The pseudo-random number generator must be seeded prior to calling RSA_generate_key_ex(),RSA_generate_key_ex() generates a key pair and stores it in the RSA structure provided in rsa. The pseudo-random number generator must be seeded prior to calling RSA_generate_key_ex().
4,-1,Do not call this function,,,when BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 is even and any of the parameters have the BN_FLG_CONSTTIME flag set,Do not call this function when BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 is even and any of the parameters have the BN_FLG_CONSTTIME flag set,BN_mod_exp() computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 (r=a^p % m). This function uses less time and space than BN_exp(). Do not call this function when BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 is even and any of the parameters have the BN_FLG_CONSTTIME flag set.
4,-1,Do not ask for a client certificate again in case of a renegotiation,,,null,Do not ask for a client certificate again in case of a renegotiation,Server mode: only request a client certificate on the initial TLS/SSL handshake. Do not ask for a client certificate again in case of a renegotiation. This flag must be used together with SSL_VERIFY_PEER.
0,-1,"Before a candidate for p is generated and tested , BN_GENCB_call is called",,,null,"Before a candidate for p (other than the first) is generated and tested, BN_GENCB_call(cb, 0, counter) is called","Before a candidate for p (other than the first) is generated and tested, BN_GENCB_call(cb, 0, counter) is called."
4,-1,So do n't use these functions,,,unless you are sure you know what you do,So don't use these functions unless you are sure you know what you do (in which case you might not want to use these functions anyway),"Warning: The data format used by DES_enc_write() and DES_enc_read() has a cryptographic weakness: When asked to write more than MAXWRITE bytes, DES_enc_write() will split the data into several chunks that are all encrypted using the same IV. So don't use these functions unless you are sure you know what you do (in which case you might not want to use these functions anyway). these functions cannot handle non-blocking sockets. DES_enc_read() uses an internal state and thus cannot be used on multiple files."
4,-1,consider using lh _ <type> _ doall to deallocate any remaining entries in the hash table,,,null,Allocated hash table entries will not be freed; consider using lh_<type>_doall() to deallocate any remaining entries in the hash table (see below),lh_<type>_free() frees the LHASH_OF(<type> structure lh_retrieve_APIParam_1. Allocated hash table entries will not be freed; consider using lh_<type>_doall() to deallocate any remaining entries in the hash table (see below).
4,-1,"Most applications should use these method , and avoid the version specific methods described below",,,null,"Most applications should use these method, and avoid the version specific methods described below","These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv2, SSLv3, TLSv1, TLSv1.1 and TLSv1.2. Most applications should use these method, and avoid the version specific methods described below."
4,4,"However , on all other systems , the application is responsible for seeding the PRNG by calling RAND_add , RAND_egd or RAND_load_file",,,null,"However, on all other systems, the application is responsible for seeding the PRNG by calling RAND_add(), RAND_egd(3) or RAND_load_file(3)","OpenSSL makes sure that the PRNG state is unique for each thread. On systems that provide /dev/urandom, the randomness device is used to seed the PRNG transparently. However, on all other systems, the application is responsible for seeding the PRNG by calling RAND_add(), RAND_egd(3) or RAND_load_file(3) ."
4,4,It is the responsibility of this function to create or retrieve the cryptographic parameters and to maintain their state,,,null,It is the responsibility of this function to create or retrieve the cryptographic parameters and to maintain their state,The callback function cb will be called for every client instigated TLS session when session ticket extension is presented in the TLS hello message. It is the responsibility of this function to create or retrieve the cryptographic parameters and to maintain their state.
4,4,However be sure to also compare the library number,,,when checking for sub-library specific reason codes,"However, when checking for sub-library specific reason codes, be sure to also compare the library number","ERR_R_... reason codes such as ERR_R_MALLOC_FAILURE are globally unique. However, when checking for sub-library specific reason codes, be sure to also compare the library number."
4,3,SSL_get_read_ahead_APIName SSL_set_read_ahead_APIName have no impact,2,,when used with DTLS,These functions have no impact when used with DTLS.,These functions have no impact when used with DTLS. The return values for SSL_CTX_get_read_head_APIName and SSL_get_read_ahead_APIName are undefined for DTLS.
4,3,ERR_remove_state is deprecated and has been replaced by ERR_remove_thread_state,,,null,ERR_remove_state is deprecated and has been replaced by ERR_remove_thread_state,ERR_remove_state is deprecated and has been replaced by ERR_remove_thread_state. Since threads in OpenSSL are no longer identified by unsigned long values any argument to this function is ignored. Calling ERR_remove_state is equivalent to ERR_remove_thread_state(NULL).
0,3,An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too,,,null,An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too,As a minimum the flag CERT_PKEY_VALID must be set for a chain to be usable. An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too. If no chain is suitable a server should fall back to the most secure chain which sets CERT_PKEY_VALID.
4,3,It is expected that this function is called from the application callback cb,,,null,It is expected that this function is called from the application callback cb,"SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
4,0,the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb prior to calling SSL_CTX_free_APIName,,,If this is not desired,"If this is not desired, the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb(SSL_CTX_free_APIParam_1, NULL) prior to calling SSL_CTX_free_APIName.","If a session-remove callback is set (SSL_CTX_sess_set_remove_cb_APIName), this callback will be called for each session being freed from SSL_CTX_free_APIParam_1's session cache. This implies, that all corresponding sessions from an external session cache are removed as well. If this is not desired, the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb(SSL_CTX_free_APIParam_1, NULL) prior to calling SSL_CTX_free_APIName."
4,0,You should instead call SSL_get_error_APIName to find out,,,if it 's retryable,You should instead call SSL_get_error_APIName to find out if it's retryable.,"Old documentation indicated a difference between 0 and -1, and that -1 was retryable. You should instead call SSL_get_error_APIName to find out if it's retryable."
4,0,ASN1_OBJECT_free_APIName will have no effect,,,null,OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory; ASN1_OBJECT_free_APIName will have no effect.,OBJ_nid2obj_APIName returns an OBJ_nid2obj_APIParam_0 structure or NULL is an error occurred. OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory; ASN1_OBJECT_free_APIName will have no effect.
4,0,Memory BIOs support BIO_gets_APIName and BIO_puts_APIName,,,null,Memory BIOs support BIO_gets_APIName and BIO_puts_APIName.,Memory BIOs support BIO_gets_APIName and BIO_puts_APIName.
4,0,Use BN_CTX_new_APIName instead,1,,BN_CTX_init_APIName (deprecated) initializes an existing uninitialized BN_CTX_new_APIParam_0. This should not be used for new programs. ,Use BN_CTX_new_APIName instead.,BN_CTX_init_APIName (deprecated) initializes an existing uninitialized BN_CTX_new_APIParam_0. This should not be used for new programs. Use BN_CTX_new_APIName instead.
4,0,the ENGINE API is the recommended way to control default implementations for use in DH and other cryptographic algorithms,,,null,"For this reason, the ENGINE API is the recommended way to control default implementations for use in DH and other cryptographic algorithms.","As of version 0.9.7, DH_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DH_new_method_APIParam_1 modules. If a default ENGINE is specified for DH functionality using an ENGINE API function, that will override any DH defaults set using the DH API (ie DH_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DH and other cryptographic algorithms."
4,0,The copying operation should not occur after every small read of a large BIO to improve efficiency,,,null,The copying operation should not occur after every small read of a large BIO to improve efficiency.,The copying operation should not occur after every small read of a large BIO to improve efficiency.
4,0,An application wishing to support multiple certificate chains may call this function on each chain in turn,,,null,An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure.,An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure. It could then use the chain of the first set which returns suitable flags.
4,0,BIO_gets_APIName and BIO_puts_APIName are supported on file BIOs,,,null,BIO_gets_APIName and BIO_puts_APIName are supported on file BIOs.,Calls to BIO_read_APIName and BIO_write_APIName read and write data to the underlying stream. BIO_gets_APIName and BIO_puts_APIName are supported on file BIOs.
4,0,the list of available compression methods can not be set for specific SSL_CTX or SSL objects,,,null,the list of available compression methods cannot be set for specific SSL_CTX or SSL objects.,SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods. This list is globally maintained for all SSL operations within this application. the list of available compression methods cannot be set for specific SSL_CTX or SSL objects.
4,0,Attributes currently can not be stored in the private key PKCS12_parse_APIParam_3 structure,,,null,Attributes currently cannot be stored in the private key PKCS12_parse_APIParam_3 structure.,Attributes currently cannot be stored in the private key PKCS12_parse_APIParam_3 structure.
4,0,ASN1_OBJECT_new_APIName is almost never used in applications,,,null," , ASN1_OBJECT_new_APIName is almost never used in applications .","Although ASN1_OBJECT_new_APIName allocates a new ASN1_OBJECT structure, ASN1_OBJECT_new_APIName is almost never used in applications. The ASN1 object utility functions such as OBJ_nid2obj_APIName are used instead."
4,0,the ENGINE API is the recommended way to control default implementations for use in DSA and other cryptographic algorithms,,,null,"For this reason, the ENGINE API is the recommended way to control default implementations for use in DSA and other cryptographic algorithms.","As of version 0.9.7, DSA_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DSA_new_method_APIParam_1 modules. If a default ENGINE is specified for DSA functionality using an ENGINE API function, that will override any DSA defaults set using the DSA API (ie DSA_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DSA and other cryptographic algorithms."
4,0,Normally an application is only interested in whether a signature verification operation is successful in those cases the EVP_verify_APIName function should be used,,,null,Normally an application is only interested in whether a signature verification operation is successful in those cases the EVP_verify_APIName function should be used.,Normally an application is only interested in whether a signature verification operation is successful in those cases the EVP_verify_APIName function should be used.
4,0,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decompress_APIName,,,null,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decompress_APIName.,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decompress_APIName.
4,0,dyn_lock_function is needed to perform locking off dynamic lock numbered,,,null,"dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line) is needed to perform locking off dynamic lock numbered n. Multi-threaded applications might crash at random if dyn_lock_function is not set.","dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line) is needed to perform locking off dynamic lock numbered n. Multi-threaded applications might crash at random if dyn_lock_function is not set."
4,0,The BIO_should_retry_APIName call should be used and appropriate action taken is the call fails,,,null,The BIO_should_retry_APIName call should be used and appropriate action taken is the call fails.,"BIO_flush_APIName, because it can write data may return 0 or -1 indicating that the call should be retried later in a similar manner to BIO_write_APIName. The BIO_should_retry_APIName call should be used and appropriate action taken is the call fails."
4,0,"Applications rarely call this function directly but this function is used by OpenSSL internally for certificate validation , in both the S/MIME and SSL/TLS code",,,null,"Applications rarely call this function directly but this function is used by OpenSSL internally for certificate validation, in both the S/MIME and SSL/TLS code.","Applications rarely call this function directly but this function is used by OpenSSL internally for certificate validation, in both the S/MIME and SSL/TLS code."
4,0,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decrypt_APIName,,,null,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decrypt_APIName.,The lack of single pass processing and the need to hold all data in memory as mentioned in CMS_verify_APIName also applies to CMS_decrypt_APIName.
4,0,The lack of single pass processing and need to hold all data in memory as mentioned in PKCS7_sign_APIName also applies to PKCS7_verify_APIName,,,null,The lack of single pass processing and need to hold all data in memory as mentioned in PKCS7_sign_APIName also applies to PKCS7_verify_APIName.,The lack of single pass processing and need to hold all data in memory as mentioned in PKCS7_sign_APIName also applies to PKCS7_verify_APIName.
4,0,the relevant INTEGER or ENUMERATED utility functions should be used instead,,,null,These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types: the relevant INTEGER or ENUMERATED utility functions should be used instead,These functions should not be used to examine or modify ASN1_INTEGER or ASN1_ENUMERATED types: the relevant INTEGER or ENUMERATED utility functions should be used instead.
4,0,Applications should instead call CONF_modules_load,,,during initialization,Applications should instead call CONF_modules_load() during initialization (that is before starting any threads),"The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads)."
4,2,DES_3cbc_encrypt_APIName is flawed and must not be used in applications,,0,null,DES_3cbc_encrypt_APIName is flawed and must not be used in applications.,DES_3cbc_encrypt_APIName is flawed and must not be used in applications.
4,2,Applications are encouraged to use X509_VERIFY_PARAM_set1_host_APIName rather than explicitly calling X509_check_host_APIName,,0,null,Applications are encouraged to use X509_VERIFY_PARAM_set1_host_APIName rather than explicitly calling X509_check_host_APIName .,"Applications are encouraged to use X509_VERIFY_PARAM_set1_host_APIName rather than explicitly calling X509_check_host_APIName . Host name checks are out of scope with the DANE-EE_APIName certificate usage, and the internal checks will be suppressed as appropriate when DANE support is added to OpenSSL."
4,2,BF_encrypt_APIName and BF_decrypt_APIName should not be used,,1,unless you implement ` modes ' of Blowfish,BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish.,"BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption. BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2. BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish. The alternative is to use BF_ecb_encrypt_APIName. If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones."
4,4,SSL_get_certificate_APIName returned internal pointers that must not be freed by the application program.,,,null,SSL_get_certificate() returned internal pointers that must not be freed by the application program.,SSL_get_certificate() returned internal pointers that must not be freed by the application program.
4,4,X509_get_notBefore_APIName and X509_get_notAfter_APIName were deprecated in OpenSSL 1.1.0,,,null,X509_get_notBefore() and X509_get_notAfter() were deprecated in OpenSSL 1.1.0,X509_get_notBefore() and X509_get_notAfter() were deprecated in OpenSSL 1.1.0
4,2,The callback function should determine whether the returned OCSP response is acceptable or not,,,null,The callback function should determine whether the returned OCSP response is acceptable or not,A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
4,2,A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client,,,null,A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client,"A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client. The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase. The callback is set using functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(). The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1, NULL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored."
4,0,"An error occurred , check the error stack for a detailed error message",,,null,"An error occurred, check the error stack for a detailed error message.","An error occurred, check the error stack for a detailed error message."
4,0,ASN1_STRING_new_APIName type is undefined,,,null,ASN1_STRING_new_APIName type is undefined.,ASN1_STRING_new_APIName returns an allocated ASN1_STRING_new_APIParam_0 structure. ASN1_STRING_new_APIName type is undefined.
4,0,The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client,,,null,The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client,"The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client. The get_session_cb() is always called, also when session caching was disabled. The get_session_cb() is passed the ssl connection, the session id of length length at the memory location data. With the parameter copy the callback can require the SSL engine to increment the reference count of the SSL_SESSION object, Normally the reference count is not incremented and therefore the session must not be explicitly freed with SSL_SESSION_free(3) ."
3,3,Multi-threaded applications might crash at random,,0,if CRYPTO_set_dynlock_create_callback_APIParam_1  is not set,Multi-threaded applications might crash at random if dyn_create_function is not set.,"dyn_create_function(const char *file, int line) is needed to create a lock. Multi-threaded applications might crash at random if dyn_create_function is not set."
3,3,OBJ_obj2txt_APIName is awkward and messy to use,,0,null,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written.,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written. Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value. A buffer length of 80 should be more than enough to handle any OID encountered in practice.
3,3,Multi-threaded applications will crash at random,,1,if locking on shared data structures is not set,Multi-threaded applications will crash at random if locking on shared data structures is not set.,"locking_function(int mode, int n, const char *file, int line) is needed to perform locking on shared data structures. (Note that OpenSSL uses a number of global data structures that will be implicitly shared whenever multiple threads use OpenSSL.) Multi-threaded applications will crash at random if locking on shared data structures is not set."
3,3,Collisions can also occur,,,"when using an external session cache , applies","Collisions can also occur when using an external session cache ,  applies .","SSL_has_matching_session_id_APIName will only query the internal session cache, not the external one. Since the session id is generated before the handshake is completed, the handshake is not immediately added to the cache. If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id. Collisions can also occur when using an external session cache, since the external cache is not tested with SSL_has_matching_session_id_APIName and the same race condition applies."
3,3,"It is possible to have RSA keys that only work with certain RSA_METHOD implementations , and attempting to change the RSA_METHOD for the key can have unexpected results",,,null,"It is possible to have RSA keys that only work with certain RSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results.","RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1. This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have RSA keys that only work with certain RSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results."
3,3,Using ephemeral RSA key exchange for other purposes violates the standard and can break interoperability with clients,,,null,Using ephemeral RSA key exchange for other purposes violates the standard and can break interoperability with clients.,"Additionally, the use of ephemeral RSA key exchange is only allowed in the TLS standard, when the RSA key can be used for signing only, that is for export ciphers. Using ephemeral RSA key exchange for other purposes violates the standard and can break interoperability with clients. It is therefore strongly recommended to not use ephemeral RSA key exchange and use DHE (Ephemeral Diffie-Hellman) key exchange instead in order to achieve forward secrecy (see SSL_CTX_set_tmp_dh_callback_APIName )."
3,3,"Also note that , as for the SHA1_APIName function above , the SHA224_APIName , SHA256_APIName , SHA384_APIName and SHA512_APIName functions are not thread safe",,,if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL,"Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL.","The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1. SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1. The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL."
3,3,Using different compression methods with the same identifier will lead to connection failure,,,null,Using different compression methods with the same identifier will lead to connection failure.,"The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure."
3,3,"SSL_set_rfd_APIName and SSL_set_wfd_APIName perform the respective action , but only for the read channel or the write channel , which can be set independently",,1,null,"SSL_set_rfd_APIName and SSL_set_wfd_APIName perform the respective action, but only for the read channel or the write channel, which can be set independently.","SSL_set_rfd_APIName and SSL_set_wfd_APIName perform the respective action, but only for the read channel or the write channel, which can be set independently."
3,3,the library crashes,1,0,If SSL_CIPHER_description_APIName is called with SSL_CIPHER_description_APIParam_1 being NULL,"If SSL_CIPHER_description_APIName is called with SSL_CIPHER_description_APIParam_1 being NULL, the library crashes.","If SSL_CIPHER_description_APIName is called with SSL_CIPHER_description_APIParam_1 being NULL, the library crashes."
3,2,BIO_free_APIName will only free one BIO resulting in a memory leak,,,If BIO_free_APIName is called on a BIO chain,"If BIO_free_APIName is called on a BIO chain, BIO_free_APIName will only free one BIO resulting in a memory leak.","If BIO_free_APIName is called on a BIO chain, BIO_free_APIName will only free one BIO resulting in a memory leak."
3,-1,Attempting to use this function in SSLv3 will result in an error,,,null,Attempting to use this function in SSLv3 will result in an error.,"Note that this function is only defined for TLSv1.0 and above, and DTLSv1.0 and above. Attempting to use this function in SSLv3 will result in an error."
3,3,RSA_generate_key_APIName goes into an infinite loop for illegal input values,,,null,RSA_generate_key_APIName goes into an infinite loop for illegal input values.,RSA_generate_key_APIName goes into an infinite loop for illegal input values.
3,3,currently CRYPTO_get_ex_data() can only fail,,,if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter,0 may also be valid application data but currently it can only fail if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter,CRYPTO_get_ex_data() returns the application data or 0 on failure. 0 may also be valid application data but currently it can only fail if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter.
3,3,using the same dsa - > kinv and dsa - > r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key,,,null,The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
3,3,the handshake will fail,,,If SSL_VERIFY_PEER is set and callback returns 0,"If SSL_VERIFY_PEER is set and callback returns 0, the handshake will fail","callback should return 1 to indicate verification success and 0 to indicate verification failure. If SSL_VERIFY_PEER is set and callback returns 0, the handshake will fail. As the verification procedure may allow to continue the connection in case of failure (by always returning 1) the verification result must be set in any case using the error member of x509_store_ctx so that the calling application will be informed about the detailed result of the verification procedure!"
3,0,several functions will misbehave and complain several functions can not find algorithms,,,If the table is not initialized,"If the table is not initialized, several functions will misbehave and complain several functions cannot find algorithms.","The cipher and digest lookup functions are used in many parts of the library. If the table is not initialized, several functions will misbehave and complain several functions cannot find algorithms. This includes the PEM, PKCS#12, SSL and S/MIME libraries. This is a common query in the OpenSSL mailing lists."
3,0,the final block will fail a subsequent decrypt,,,If it is not,"If it is not ,then the final block will fail a subsequent decrypt","When encrypting BIO_flush() must be called to flush the final block through the BIO. If it is not ,then the final block will fail a subsequent decrypt."
3,0,"It is possible to have DSA keys that only work with certain DSA_METHOD implementations , and attempting to change the DSA_METHOD for the key can have unexpected results",,,null,"It is possible to have DSA keys that only work with certain DSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DSA_METHOD for the key can have unexpected results","DSA_set_method() selects DSA_set_method_APIParam_2 to perform all operations using the key rsa. This will replace the DSA_METHOD used by the DSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DSA keys that only work with certain DSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DSA_METHOD for the key can have unexpected results."
3,0,"The reason for this is that the variable i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is uninitialized and an attempt will be made to interpret its value as an d2i_X509_APIParam_1 structure , typically causing a segmentation violation",,,null,"The reason for this is that the variable i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is uninitialized and an attempt will be made to interpret its (invalid) value as an d2i_X509_APIParam_1 structure, typically causing a segmentation violation","This will probably crash somewhere in d2i_X509(). The reason for this is that the variable i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is uninitialized and an attempt will be made to interpret its (invalid) value as an d2i_X509_APIParam_1 structure, typically causing a segmentation violation. If i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is set to NULL first, then this will not happen."
2,7,SSL_CTX_sess_set_cache_size_APIParam_2 is a hint and not an absolute,2,0,null,This value is a hint and not an absolute; see the notes below.,SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2. This value is a hint and not an absolute; see the notes below.
2,-1,All these functions use DER format and unencrypted keys,,,null,All these functions use DER format and unencrypted keys.,All these functions use DER format and unencrypted keys. Applications wishing to encrypt or decrypt private keys should use other functions such as d2i_PKC8PrivateKey_APIName instead.
2,0,Use socket BIOs instead,,,null,Use socket BIOs instead.,File descriptor BIOs should not be used for socket I/O. Use socket BIOs instead.
2,9,There are data in the SSL buffer that must be written to the underlying BIO layer,,,null,There are data in the SSL buffer that must be written to the underlying BIO layer,There are data in the SSL buffer that must be written to the underlying BIO layer in order to complete the actual SSL_*() operation. A call to SSL_get_error(3) should return SSL_ERROR_WANT_WRITE.
2,9,The following flags can be passed in the flags parameter,,,null,The following flags can be passed in the flags parameter,The following flags can be passed in the flags parameter.
2,9,"Currently only AES based key wrapping algorithms are supported for CMS_add0_recipient_key_APIParam_2 , specifically",,,null,"Currently only AES based key wrapping algorithms are supported for CMS_add0_recipient_key_APIParam_2, specifically: NID_id_aes128_wrap, NID_id_aes192_wrap and NID_id_aes256_wrap","Currently only AES based key wrapping algorithms are supported for CMS_add0_recipient_key_APIParam_2, specifically: NID_id_aes128_wrap, NID_id_aes192_wrap and NID_id_aes256_wrap. If CMS_add0_recipient_key_APIParam_2 is set to NID_undef then an AES wrap algorithm will be used consistent with CMS_add0_recipient_key_APIParam_4."
2,9,The following flags are currently recognized,,,null,The following flags are currently recognized:,The following flags are currently recognized:
2,9,Any of the following flags can be passed in the flags parameter,,,null,Any of the following flags (ored together) can be passed in the flags parameter,Any of the following flags (ored together) can be passed in the flags parameter.
2,9,"Any or all of these parameters can be NULL , see NOTES below",,,null,"Any or all of these parameters can be NULL, see NOTES below","CMS_sign() creates and returns a CMS SignedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain). Any or all of these parameters can be NULL, see NOTES below."
2,9,"RSA_sign_APIParam_1 RSA_verify_APIParam_1 usually is one of NID_sha1 , NID_ripemd160 and NID_md5",2,,null,"It usually is one of NID_sha1, NID_ripemd160 and NID_md5; see objects(3) for details","RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2. It usually is one of NID_sha1, NID_ripemd160 and NID_md5; see objects(3) for details. If RSA_sign_APIParam_1 RSA_verify_APIParam_1 is NID_md5_sha1, an SSL signature (MD5 and SHA1 message digests with PKCS #1 padding and no algorithm identifier) is created."
2,9,"The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD , V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN",,,null,"The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN","OCSP_resp_find_status() searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2. If it is successful the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd. The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN. The OCSP_single_get0_status_APIParam_2 and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED. If set the OCSP_single_get0_status_APIParam_2 field will be set to the revocation reason which will be one of OCSP_REVOKED_STATUS_NOSTATUS, OCSP_REVOKED_STATUS_UNSPECIFIED, OCSP_REVOKED_STATUS_KEYCOMPROMISE, OCSP_REVOKED_STATUS_CACOMPROMISE, OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, OCSP_REVOKED_STATUS_SUPERSEDED, OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, OCSP_REVOKED_STATUS_CERTIFICATEHOLD or OCSP_REVOKED_STATUS_REMOVEFROMCRL."
2,2,"Flags can be: BIO_CLOSE , BIO_NOCLOSE BIO_FP_TEXT",,,null,"Flags can be: BIO_CLOSE, BIO_NOCLOSE (the close flag) BIO_FP_TEXT (sets the underlying stream to text mode, default is binary: this only has any effect under Win32).","BIO_new_fp_APIName creates a file BIO wrapping BIO_new_fp_APIParam_1. Flags can be: BIO_CLOSE, BIO_NOCLOSE (the close flag) BIO_FP_TEXT (sets the underlying stream to text mode, default is binary: this only has any effect under Win32)."
2,2,Any of the following flags can be passed in the CMS_add1_signer_APIParam_5 parameter,,,null,Any of the following flags (ored together) can be passed in the CMS_add1_signer_APIParam_5 parameter.,Any of the following flags (ored together) can be passed in the CMS_add1_signer_APIParam_5 parameter.
2,2,The buffer ASN1_STRING_to_UTF8_APIParam_1 should be free using OPENSSL_free_APIName,,,null,The buffer ASN1_STRING_to_UTF8_APIParam_1 should be free using OPENSSL_free_APIName.,"ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format, the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1. The length of ASN1_STRING_to_UTF8_APIParam_1 is returned or a negative error code by ASN1_STRING_to_UTF8_APIName or a negative error code. The buffer ASN1_STRING_to_UTF8_APIParam_1 should be free using OPENSSL_free_APIName."
2,2,The following flags can be passed in the CMS_decrypt_APIParam_6 parameter,,,null,The following flags can be passed in the CMS_decrypt_APIParam_6 parameter.,The following flags can be passed in the CMS_decrypt_APIParam_6 parameter.
2,2,The complete set of the flags supported by X509_NAME_print_ex_APIName is listed below,,,null,The complete set of the flags supported by X509_NAME_print_ex_APIName is listed below.,The complete set of the flags supported by X509_NAME_print_ex_APIName is listed below.
2,2,"OBJ_txt2nid_APIParam_1 can be a long name , a short name or the numerical respresentation of an object",,,null,"OBJ_txt2nid_APIParam_1 can be a long name, a short name or the numerical respresentation of an object.","OBJ_txt2nid_APIName returns NID corresponding to text string <s>. OBJ_txt2nid_APIParam_1 can be a long name, a short name or the numerical respresentation of an object."
2,9,This option has no effect for connections using other ciphers,,,null,This option has no effect for connections using other ciphers.,"Disables a countermeasure against a SSL 3.0/TLS 1.0 protocol vulnerability affecting CBC ciphers, which cannot be handled by some broken SSL implementations. This option has no effect for connections using other ciphers."
2,9,"As automatic lookup only applies for SSL/TLS servers , the flag SSL_SESS_CACHE_NO_INTERNAL_LOOKUP has no effect on clients",2,1,null,"As automatic lookup only applies for SSL/TLS servers, the flag has no effect on clients.","By setting this flag, session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache, even if sessions are automatically stored there. If external session caching callbacks are in use, this flag guarantees that all lookups are directed to the external cache. As automatic lookup only applies for SSL/TLS servers, the flag has no effect on clients."
2,9,This option must be used to prevent small subgroup attacks,,,when the DH parameters were not generated using `` strong '' primes,"This option must be used to prevent small subgroup attacks, when the DH parameters were not generated using ""strong"" primes (eg when using DSA-parameters, see dhparam(1) )","Always create a new key when using temporary/ephemeral DH parameters (see SSL_CTX_set_tmp_dh_callback(3) ). This option must be used to prevent small subgroup attacks, when the DH parameters were not generated using ""strong"" primes (eg when using DSA-parameters, see dhparam(1) ). If ""strong"" primes were used, it is not strictly necessary to generate a new DH key during each handshake but it is also recommended. SSL_OP_SINGLE_DH_USE should therefore be enabled whenever temporary/ephemeral DH parameters are used."
2,8,the session must be explicitly removed using SSL_SESSION_free_APIName,,,"unless the SSL_SESSION object is completely taken over , when being called inside the get_session_cb_APIName","The reference count is 1, so that the session must be explicitly removed using SSL_SESSION_free_APIName , unless the SSL_SESSION object is completely taken over, when being called inside the get_session_cb_APIName (see SSL_CTX_sess_set_get_cb_APIName ).","When using d2i_SSL_SESSION_APIName, the SSL_SESSION object is automatically allocated. The reference count is 1, so that the session must be explicitly removed using SSL_SESSION_free_APIName , unless the SSL_SESSION object is completely taken over, when being called inside the get_session_cb_APIName (see SSL_CTX_sess_set_get_cb_APIName )."
2,-1,It should equal half of the targeted security level in bits,,,null,"When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary).","When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary). For instance, to reach the 128 bit security level, BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 should be set to 64."
2,8,A key must have been associated with the structure first,,,null,A key must have been associated with the structure first.,CMS_RecipientInfo_decrypt_APIName attempts to decrypt CMS_RecipientInfo structure CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_decrypt_APIParam_1. A key must have been associated with the structure first.
2,8,sessions should be removed from the cache to save resources,2,,null,"As sessions will not be reused ones they are expired, they should be removed from the cache to save resources.","If enabled, the internal session cache will collect all sessions established up to the specified maximum number (see SSL_CTX_sess_set_cache_size_APIName). As sessions will not be reused ones they are expired, they should be removed from the cache to save resources. This can either be done automatically whenever 255 new sessions were established (see SSL_CTX_set_session_cache_mode_APIName ) or manually by calling SSL_CTX_flush_sessions_APIName."
2,8,After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4,,,null,After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4.,"EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
2,8,the accept BIO must be made available for further incoming connections,,,If a server wishes to process multiple connections,"If a server wishes to process multiple connections (as is normally the case) ,then the accept BIO must be made available for further incoming connections.","If a server wishes to process multiple connections (as is normally the case) ,then the accept BIO must be made available for further incoming connections. This can be done by waiting for a connection and then calling:"
2,8,"ek is an array of buffers where the public key encrypted secret key will be written , each buffer must contain enough room for the corresponding encrypted key",,,null,"ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes","EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
2,7,RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2 is NULL or a pre-allocated and initialized RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2,,,null,RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2 is NULL or a pre-allocated and initialized RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2.,RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor. RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2 is NULL or a pre-allocated and initialized RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2. The random number generator must be seeded prior to calling RSA_blinding_on_APIName.
2,7,The session id is not security critical but must be unique for the server,,,null,The session id is not security critical but must be unique for the server.,"When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1. The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information."
2,7,"BN_bn2mpi_APIName and BN_mpi2bn_APIName convert BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3s from and to a format that consists of the number 's length in bytes represented as a 4-byte big-endian number , and the number itself in big-endian format , where the most significant bit signals a negative number",,,null,"BN_bn2mpi_APIName and BN_mpi2bn_APIName convert BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3s from and to a format that consists of the number's length in bytes represented as a 4-byte big-endian number, and the number itself in big-endian format, where the most significant bit signals a negative number (the representation of numbers with the MSB set is prefixed with null byte).","BN_bn2mpi_APIName and BN_mpi2bn_APIName convert BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3s from and to a format that consists of the number's length in bytes represented as a 4-byte big-endian number, and the number itself in big-endian format, where the most significant bit signals a negative number (the representation of numbers with the MSB set is prefixed with null byte)."
2,7,Generation of custom DH parameters should still be preferred to stop an attacker from specializing on a commonly used group,,,during installation,Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group,"Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly. These files can be converted into C code using the -C option of the dhparam(1) application. Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group. Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications."
2,7,"The SSL_select_next_proto_APIParam_1 value will point into either server or client , so it should be copied immediately",,,null,"The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately","SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
2,4,Similar care should be take to ensure that the data is in the correct format,1,1,when calling ASN1_STRING_set_APIName,Similar care should be take to ensure the data is in the correct format when calling ASN1_STRING_set_APIName.,Similar care should be take to ensure the data is in the correct format when calling ASN1_STRING_set_APIName.
2,4,"BIO_set_mem_buf_APIName sets the internal BUF_MEM structure to BIO_set_mem_buf_APIParam_2 and sets the close flag to BIO_set_mem_buf_APIParam_3 , that is BIO_set_mem_buf_APIParam_3 should be either BIO_CLOSE or BIO_NOCLOSE",,0,null,"BIO_set_mem_buf_APIName sets the internal BUF_MEM structure to BIO_set_mem_buf_APIParam_2 and sets the close flag to BIO_set_mem_buf_APIParam_3, that is BIO_set_mem_buf_APIParam_3 should be either BIO_CLOSE or BIO_NOCLOSE.","BIO_set_mem_buf_APIName sets the internal BUF_MEM structure to BIO_set_mem_buf_APIParam_2 and sets the close flag to BIO_set_mem_buf_APIParam_3, that is BIO_set_mem_buf_APIParam_3 should be either BIO_CLOSE or BIO_NOCLOSE. It is a macro."
2,4,Where OCSP_resp_get0_APIParam_2 runs from 0 to OCSP_resp_count - 1,,0,null,Where OCSP_resp_get0_APIParam_2 runs from 0 to OCSP_resp_count(bs) - 1.,OCSP_resp_get0_APIName returns the OCSP_resp_get0_APIParam_0 structure in OCSP_resp_get0_APIParam_1 corresponding to index OCSP_resp_get0_APIParam_2. Where OCSP_resp_get0_APIParam_2 runs from 0 to OCSP_resp_count(bs) - 1.
2,4,Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation,,,null,Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation,"When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
2,2,"DH_generate_parameters_ex_APIParam_3 is a small number more than 1, typically 2 or 5",,,null,"DH_generate_parameters_ex_APIParam_3 is a small number > 1, typically 2 or 5.","DH_generate_parameters_ex_APIParam_2 is the length in bits of the safe prime to be generated. DH_generate_parameters_ex_APIParam_3 is a small number > 1, typically 2 or 5."
2,2,"Only CMS_encrypt_APIParam_1 carrying RSA , Diffie-Hellman or EC keys are supported by CMS_encrypt_APIName",,1,null,"Only certificates carrying RSA, Diffie-Hellman or EC keys are supported by this function.","Only certificates carrying RSA, Diffie-Hellman or EC keys are supported by this function."
2,2,The extensions must be in PEM format,,1,null,The extensions must be in PEM format.,"SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1. The extensions must be in PEM format. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. Each PEM extension name must begin with the phrase ""BEGIN SERVERINFO FOR ""."
2,2,Each PEM extension name must begin with the phrase `` BEGIN SERVERINFO FOR '',,,null,"Each PEM extension name must begin with the phrase ""BEGIN SERVERINFO FOR "".","SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1. The extensions must be in PEM format. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. Each PEM extension name must begin with the phrase ""BEGIN SERVERINFO FOR ""."
2,2,"Each extension must consist of a 2-byte Extension Type , a 2-byte length , and length bytes of extension_data",,1,null,"Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data.","SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1. The extensions must be in PEM format. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. Each PEM extension name must begin with the phrase ""BEGIN SERVERINFO FOR ""."
2,2,"For the transparent negotiation to succeed , the SSL_write_APIParam_1 must have been initialized to client or server mode",,1,null,"For the transparent negotiation to succeed, the SSL_write_APIParam_1 must have been initialized to client or server mode.","For the transparent negotiation to succeed, the SSL_write_APIParam_1 must have been initialized to client or server mode. This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function."
2,2,EVP_SignInit_ex_APIParam_1 must be initialized with EVP_MD_CTX_init_APIName before calling EVP_DigestSignInit_APIName,,0,null,EVP_SignInit_ex_APIParam_1 must be initialized with EVP_MD_CTX_init_APIName before calling this function.,EVP_SignInit_ex_APIName sets up signing context EVP_SignInit_ex_APIParam_1 to use digest EVP_SignInit_ex_APIParam_2 from ENGINE EVP_SignInit_ex_APIParam_3. EVP_SignInit_ex_APIParam_1 must be initialized with EVP_MD_CTX_init_APIName before calling this function.
2,2,"The shutdown state of an ssl connection is a bitmask of 0, SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN.",,1,null,The shutdown state of an ssl connection is a bitmask of:,The shutdown state of an ssl connection is a bitmask of:
2,2,Memory allocated from these functions should be freed up using the OPENSSL_free_APIName function,,,null,Memory allocated from these functions should be freed up using the OPENSSL_free_APIName function.,Memory allocated from these functions should be freed up using the OPENSSL_free_APIName function.
2,2,RSA_public_decrypt_APIParam_3 must point to RSA_size_APIName RSA_private_decrypt_APIParam_4 bytes of memory.,,,null,RSA_public_encrypt_APIParam_3 must point to RSA_size(RSA_public_encrypt_APIParam_4) bytes of memory.,RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 (usually a session key) using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3. RSA_public_encrypt_APIParam_3 must point to RSA_size(RSA_public_encrypt_APIParam_4) bytes of memory.
2,2,RSA_private_decrypt_APIParam_3 must point to RSA_size_APIName RSA_private_decrypt_APIParam_4 bytes of memory.,,,null,RSA_public_decrypt_APIParam_3 must point to RSA_size(RSA_public_decrypt_APIParam_4) bytes of memory.,RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 (usually a session key) using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3. RSA_public_encrypt_APIParam_3 must point to RSA_size(RSA_public_encrypt_APIParam_4) bytes of memory.
2,2,The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order,,,null,The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order.,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension. SSL_get1_curves_APIName returns the total number of supported curves. The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes. The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order. SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.
2,2,The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback_APIName,,,null,The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback_APIName .,"The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback_APIName . The following descriptions apply in the case of the built-in procedure. An application provided procedure also has access to the verify depth information and the verify_callback_APIName function, but the way this information is used may be different."
2,2,a fatal error will be flagged and the handshake will fail,1,1,If the session id context is not set on an SSL/TLS server and client certificates are used,"If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.","If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail."
2,2,the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument,,1,If streaming is enabled,"If streaming is enabled, then the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument.","SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to. SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure. If streaming is enabled, then the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument. SMIME_write_PKCS7_APIParam_4 is an optional set of flags."
2,2,Ciphers with DSA keys always use ephemeral DH keys as well,,,null,Ciphers with DSA keys always use ephemeral DH keys as well.,"When using a cipher with RSA authentication, an ephemeral DH key exchange can take place. Ciphers with DSA keys always use ephemeral DH keys as well. In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing. Anonymous ciphers (without a permanent server key) also use ephemeral DH keys."
2,2,The certificates must be in PEM format and must be sorted,,1,null,"The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA.","SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1. The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA. There is no corresponding function working on a single SSL object."
0,2,then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks,1,,if the caller is responsible for the life-time of the data in question,"Conversely, if the caller is responsible for the life-time of the data in question, then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks (see the ""STUFF_cleanup"" example above).","As an example, a hash table may be maintained by code that, for reasons of encapsulation, has only ""const"" access to the data being indexed in the hash table (ie it is returned as ""const"" from elsewhere in their code) - in this case the LHASH prototypes are appropriate as-is. Conversely, if the caller is responsible for the life-time of the data in question, then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks (see the ""STUFF_cleanup"" example above). If so, the caller can either cast the ""const"" away (if they're providing the raw callbacks themselves) or use the macros to declare/implement the wrapper functions without ""const"" types."
2,2,BIO_ctrl_APIParam_3 must be at least 512 bytes,,0,null,BIO_ctrl_APIParam_3 must be at least 512 bytes.,BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3. When set after every BIO_ctrl_APIParam_3 bytes of I/O (read and write) the SSL session is automatically renegotiated. BIO_ctrl_APIParam_3 must be at least 512 bytes.
2,2,SSL_CTX_set_quiet_shutdown_APIParam_2 may be 0 or 1,,,null,SSL_CTX_set_quiet_shutdown_APIParam_2 may be 0 or 1.,"SSL_CTX_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2. SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called. SSL_CTX_set_quiet_shutdown_APIParam_2 may be 0 or 1."
2,2,It is strongly recommended to not use ephemeral RSA key exchange and use DHE key exchange instead,,1,null,It is therefore strongly recommended to not use ephemeral RSA key exchange and use DHE key exchange instead  .,"Additionally, the use of ephemeral RSA key exchange is only allowed in the TLS standard, when the RSA key can be used for signing only, that is for export ciphers. Using ephemeral RSA key exchange for other purposes violates the standard and can break interoperability with clients. It is therefore strongly recommended to not use ephemeral RSA key exchange and use DHE (Ephemeral Diffie-Hellman) key exchange instead in order to achieve forward secrecy (see SSL_CTX_set_tmp_dh_callback_APIName )."
2,2,The PRNG must be seeded prior to calling BN_generate_prime_ex_APIName,,1,null,The PRNG must be seeded prior to calling BN_generate_prime_ex_APIName.,The PRNG must be seeded prior to calling BN_generate_prime_ex_APIName. The prime number generation has a negligible error probability.
2,2,DES_fcrypt_APIParam_1 needs to be at least 14 bytes long,,0,null,the third parameter needs to be at least 14 bytes long.,"DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function. This version takes only a small amount of space relative to other fast crypt_APIName implementations. This is different to the normal crypt in that the third parameter is the buffer that the return value is written into. the third parameter needs to be at least 14 bytes long. This function is thread safe, unlike the normal crypt."
2,2,"The password callback, which must be provided by the application, hands back the password to be used",,1,during decryption,"The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption.","The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to pem_passwd_cb_APIParam_4 is provided. The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2. The actual length of the password must be returned to the calling function. pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1)."
2,2,"BIO_set_accept_name_APIParam_1 is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port.",1,0,null,"The port is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port.","BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port. The port is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port. The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table."
2,2,Both halves of a BIO pair should be freed,,1,null,Both halves of a BIO pair should be freed.,Both halves of a BIO pair should be freed. That is even if one half is implicit freed due to a BIO_free_all_APIName or SSL_free_APIName call the other half needs to be freed.
2,2,The use of temporary variable is mandatory,,1,null,The use of temporary variable is mandatory.,The use of temporary variable is mandatory. A common mistake is to attempt to use a buffer directly as follows:
2,2,the content must be supplied in the SMIME_write_CMS_APIParam_3 argument,,1,If streaming is enabled,If streaming is enabled then the content must be supplied in the SMIME_write_CMS_APIParam_3 argument.,SMIME_write_CMS_APIParam_1 is the BIO to write the data to. SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure. If streaming is enabled then the content must be supplied in the SMIME_write_CMS_APIParam_3 argument. SMIME_write_CMS_APIParam_4 is an optional set of flags.
2,2,the session id context must be set by the server,,1,null," , the session id context must be set by the server .","Since a client may try to reuse a session intended for use in a different context, the session id context must be set by the server (see SSL_CTX_set_session_id_context_APIName )."
0,2,"port has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs , that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table",,0,null,"The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table.","BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port. The port is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port. The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table."
2,2,The PRNG must be seeded prior to calling DSA_generate_key_APIName,,1,null,The PRNG must be seeded prior to calling DSA_generate_key_APIName.,The PRNG must be seeded prior to calling DSA_generate_key_APIName.
2,2,Both EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 and EC_POINT_copy_APIParam_1 must use the same EC_METHOD,,1,null,Both EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 and EC_POINT_copy_APIParam_1 must use the same EC_METHOD.,EC_POINT_copy copies the point EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 into EC_POINT_copy_APIParam_1. Both EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 and EC_POINT_copy_APIParam_1 must use the same EC_METHOD.
2,2,EVP_MD_CTX_copy_ex_APIParam_1 must be initialized before calling EVP_DigestInit_ex_APIName,,0,null,EVP_MD_CTX_copy_ex_APIParam_1 must be initialized before calling this function.,EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1. This is useful if large amounts of data are to be hashed which only differ in the last few bytes. EVP_MD_CTX_copy_ex_APIParam_1 must be initialized before calling this function.
2,2,BN_mod_APIName corresponds to BN_div_APIName with BN_div_APIParam_1 set to NULL,,,null,BN_mod_APIName corresponds to BN_div_APIName with BN_div_APIParam_1 set to NULL.,BN_mod_APIName corresponds to BN_div_APIName with BN_div_APIParam_1 set to NULL.
2,2,The CMS_uncompress_APIParam_2 parameter will normally be set to NULL,,,null,The CMS_uncompress_APIParam_2 parameter will normally be set to NULL.,The CMS_uncompress_APIParam_2 parameter is used in the rare case where the compressed content is detached. The CMS_uncompress_APIParam_2 parameter will normally be set to NULL.
2,2,Chain verification should arguably be performed using the signing time rather than the current time,,,null,Chain verification should arguably be performed using the signing time rather than the current time.,Chain verification should arguably be performed using the signing time rather than the current time. However since the signing time is supplied by the signer the signing time cannot be trusted without additional evidence (such as a trusted timestamp).
2,2,The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used,,,null,"The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH).","The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1. SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1. The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL."
2,2,The context value is left to the application but must be the same on both sides of the communication,,,null,The context value is left to the application but must be the same on both sides of the communication.,"An application may need to securely establish the context within which this keying material will be used. For example this may include identifiers for the application session, application algorithms or parameters, or the lifetime of the context. The context value is left to the application but must be the same on both sides of the communication."
2,2,The function EC_POINT_point2oct must be supplied with a buffer long enough to store the octet string,,,null,The function EC_POINT_point2oct must be supplied with a buffer long enough to store the octet string.,The function EC_POINT_point2oct must be supplied with a buffer long enough to store the octet string. The return value provides the number of octets stored. Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length.
2,2,The SSLv2 protocol offers little to no security and should not be used,,1,null,The SSLv2 protocol offers little to no security and should not be used.,"A TLS/SSL connection established with these methods will only understand the SSLv2 protocol. A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2. A server will only understand SSLv2 client hello messages. The SSLv2 protocol offers little to no security and should not be used. As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2."
2,2,SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1,,,null,SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1.,"SSL_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2. The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again. It is not changed when SSL_clear_APIName is called. SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1."
2,2,The only currently supported compression algorithm is zlib,,,null,"The only currently supported compression algorithm is zlib: if the structure indicates the use of any other algorithm ,an error is returned.","The only currently supported compression algorithm is zlib: if the structure indicates the use of any other algorithm ,an error is returned."
2,2,applications should generally avoid using DH structure elements directly and instead use API functions to query or modify keys,,1,null,"For this reason, applications should generally avoid using DH structure elements directly and instead use API functions to query or modify keys.","Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations, either directly or by the use of DH_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using DH structure elements directly and instead use API functions to query or modify keys."
2,2,"ADH ciphers don't need a certificate , but DH-parameters must have been set",,,null,"ADH ciphers don't need a certificate, but DH-parameters must have been set.","It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
2,2,"According to the SSLv3 spec, one should use 32 bytes for the challenge, but as mentioned above, this breaks this server so 16 bytes is the way to go.",1,,when operating in SSLv2/v3 compatibility mode,"According to the SSLv3 spec, one should use 32 bytes for the challenge when operating in SSLv2/v3 compatibility mode, but as mentioned above, this breaks this server so 16 bytes is the way to go.","Netscape-Commerce/1.12, when talking SSLv2, accepts a 32 byte challenge but then appears to only use 16 bytes when generating the encryption keys. Using 16 bytes is ok but it should be ok to use 32. According to the SSLv3 spec, one should use 32 bytes for the challenge when operating in SSLv2/v3 compatibility mode, but as mentioned above, this breaks this server so 16 bytes is the way to go."
2,2,the recovered key length must match the fixed cipher length,,1,If the cipher is a fixed length cipher,If the cipher is a fixed length cipher then the recovered key length must match the fixed cipher length.,"If the cipher passed in the EVP_OpenInit_APIParam_2 parameter is a variable length cipher ,then the key length will be set to the value of the recovered key length. If the cipher is a fixed length cipher then the recovered key length must match the fixed cipher length."
2,2,Cipher BIOs do not support BIO_gets_APIName or BIO_puts_APIName,,,null,Cipher BIOs do not support BIO_gets_APIName or BIO_puts_APIName.,Cipher BIOs do not support BIO_gets_APIName or BIO_puts_APIName.
2,2,ECB mode is not suitable for most applications,,,null,ECB mode is not suitable for most applications; see des_modes_APIName .,Single-key DES is insecure due to Single-key DES short key size. ECB mode is not suitable for most applications; see des_modes_APIName .
2,2,The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2,,0,null,The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2.,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
2,2,"There are two types of BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure that are supported: ""new"" style and ""old"" style.",,1,null,"There are two types of BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure that are supported: ""new"" style and ""old"" style.","BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments. There are two types of BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure that are supported: ""new"" style and ""old"" style. New programs should prefer the ""new"" style, whilst the ""old"" style is provided for backwards compatibility purposes."
2,2,CMS_final_APIParam_3 is only used with detached data and will usually be set to NULL,2,1,null,The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.,CMS_final_APIName finalises the structure CMS_final_APIParam_1. It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields. The parameter CMS_final_APIParam_2 contains the content to be processed. The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.
2,2,A client certificate must only be sent,,,when the server did send the request,"A client certificate must only be sent, when the server did send the request.","During a handshake (or renegotiation) a server may request a certificate from the client. A client certificate must only be sent, when the server did send the request."
2,2,Private keys encoded without parameters can not be loaded using d2i_ECPrivateKey_APIName,,1,null,Private keys encoded without parameters (eg if EC_PKEY_NO_PARAMETERS has been used - see below) cannot be loaded using d2i_ECPrivateKey.,"When reading a private key encoded without an associated public key (eg if EC_PKEY_NO_PUBKEY has been used - see below), then d2i_ECPrivateKey generates the missing public key automatically. Private keys encoded without parameters (eg if EC_PKEY_NO_PARAMETERS has been used - see below) cannot be loaded using d2i_ECPrivateKey."
2,2,The timeout value SSL_CTX_set_timeout_APIParam_2 must be given in seconds,,0,null,The timeout value SSL_CTX_set_timeout_APIParam_2 must be given in seconds.,SSL_CTX_set_timeout_APIName sets the timeout for newly created sessions for SSL_CTX_set_timeout_APIParam_1 to SSL_CTX_set_timeout_APIParam_2. The timeout value SSL_CTX_set_timeout_APIParam_2 must be given in seconds.
2,2,"to reach the 128 bit security level , BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 should be set to 64",,,null,"For instance, to reach the 128 bit security level, BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 should be set to 64.","When the source of the prime is not random or not trusted, the number of checks needs to be much higher to reach the same level of assurance: It should equal half of the targeted security level in bits (rounded up to the next integer if necessary). For instance, to reach the 128 bit security level, BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 should be set to 64."
2,2,ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long,,,null,ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long.,"ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
2,2,The X509_VERIFY_PARAM_set1_ip_asc_APIParam_2 argument is a NULL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6.,1,1,null,The X509_VERIFY_PARAM_set1_ip_asc_APIParam_2 argument is a NUL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6.,"X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2. The X509_VERIFY_PARAM_set1_ip_asc_APIParam_2 argument is a NUL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6. The condensed ""::"" notation is supported for IPv6 addresses."
2,2,SSL_SESSION_free_APIName must only be called for SSL_SESSION objects,,,null,"SSL_SESSION_free_APIName must only be called for SSL_SESSION objects ,  or when the SSL_SESSION object was generated outside a TLS handshake operation , eg by using d2i_SSL_SESSION_APIName .","SSL_SESSION_free_APIName must only be called for SSL_SESSION objects, for which the reference count was explicitly incremented (eg by calling SSL_get1_session_APIName, see SSL_get_session_APIName ) or when the SSL_SESSION object was generated outside a TLS handshake operation, eg by using d2i_SSL_SESSION_APIName . SSL_SESSION_free_APIName must not be called on other SSL_SESSION objects, as this would cause incorrect reference counts and therefore program failures."
2,2,The only currently supported compression algorithm is zlib using the NID NID_zlib_compression,,,null,The only currently supported compression algorithm is zlib using the NID NID_zlib_compression.,The only currently supported compression algorithm is zlib using the NID NID_zlib_compression.
2,2,The length is either 4 or 16,,,null,The length is either 4 (IPv4) or 16 (IPv6).,"X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address. The X509_check_ip_APIParam_2 array is in binary format, in network byte order. The length is either 4 (IPv4) or 16 (IPv6). Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored."
2,2,RSA_public_encrypt_APIParam_1 must be less than RSA_size,,0,null,"RSA_public_encrypt_APIParam_1 must be less than RSA_size(RSA_public_encrypt_APIParam_4) - 11 for the PKCS #1 v1.5 based padding modes, less than RSA_size(RSA_public_encrypt_APIParam_4) - 41 for RSA_PKCS1_OAEP_PADDING and exactly RSA_size(RSA_public_encrypt_APIParam_4) for RSA_NO_PADDING.","RSA_public_encrypt_APIParam_1 must be less than RSA_size(RSA_public_encrypt_APIParam_4) - 11 for the PKCS #1 v1.5 based padding modes, less than RSA_size(RSA_public_encrypt_APIParam_4) - 41 for RSA_PKCS1_OAEP_PADDING and exactly RSA_size(RSA_public_encrypt_APIParam_4) for RSA_NO_PADDING. The random number generator must be seeded prior to calling RSA_public_encrypt_APIName."
2,2,This format has some severe security weaknesses and should be avoided,,1,if possible,This format has some severe security weaknesses and should be avoided if possible.,The NET format functions are present to provide compatibility with certain very old software. This format has some severe security weaknesses and should be avoided if possible.
2,2,"One or both of SSL_CONF_FLAG_CLIENT, SSL_CONF_FLAG_SERVER must be set",,,null,One or both of these flags must be set.,recognise options intended for use in SSL/TLS clients or servers. One or both of these flags must be set.
2,2,X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1,,0,null,X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1.,"X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3. X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1. If there are no more entries, -1 is returned. If X509_NAME_get_index_by_NID_APIParam_2 is invalid (doesn't correspond to a valid OID) ,then -2 is returned."
2,2,Both EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 and EC_GROUP_copy_APIParam_1 must use the same EC_METHOD,,1,null,Both EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 and EC_GROUP_copy_APIParam_1 must use the same EC_METHOD.,EC_GROUP_copy copies the curve EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 into EC_GROUP_copy_APIParam_1. Both EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 and EC_GROUP_copy_APIParam_1 must use the same EC_METHOD.
2,2,"For a longer chain , the client must send the complete chain",1,,null,"For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate).","The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate. If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server. For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate). This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable."
2,2,"The formatting SSL_CTX_use_certificate_file_APIParam_3 SSL_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM , SSL_FILETYPE_ASN1",,,null,"The formatting SSL_CTX_use_certificate_file_APIParam_3 SSL_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1.","SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1. The formatting SSL_CTX_use_certificate_file_APIParam_3 SSL_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1. See the NOTES section on why SSL_CTX_use_certificate_chain_file_APIName should be preferred."
2,2,Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value,,0,null,Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value.,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written. Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value. A buffer length of 80 should be more than enough to handle any OID encountered in practice.
2,2,A buffer length of 80 should be more than enough to handle any OID encountered in practice,,1,null,A buffer length of 80 should be more than enough to handle any OID encountered in practice.,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written. Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value. A buffer length of 80 should be more than enough to handle any OID encountered in practice.
2,2,The PRNG must be seeded prior to using this function,,,null,The PRNG must be seeded prior to using this function (see rand_APIName ).,"DES_random_key_APIName generates a random key. The PRNG must be seeded prior to using this function (see rand_APIName ). If the PRNG could not generate a secure key, 0 is returned."
2,2,Each string is limited to 255 bytes,2,1,null,Each string is limited to 255 bytes.,"The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
2,2,A byte-string length of 0 is invalid,,1,null,A byte-string length of 0 is invalid.,"The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
2,2,This mode is recommended for all new applications,,,null,This mode is recommended for all new applications.,"EME-OAEP as defined in PKCS #1 v2.0 with SHA-1, MGF1 and an empty encoding parameter. This mode is recommended for all new applications."
2,2,A cryptographic PRNG must be seeded with unpredictable data such as mouse movements or keys pressed at random by the user,,1,null,A cryptographic PRNG must be seeded with unpredictable data such as mouse movements or keys pressed at random by the user.,A cryptographic PRNG must be seeded with unpredictable data such as mouse movements or keys pressed at random by the user. This is described in RAND_add_APIName . Its state can be saved in a seed file (see RAND_load_file_APIName ) to avoid having to go through the seeding process whenever the application is started.
2,2,The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED,,1,null,The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
2,2,the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello,,,During the client key exchange,"During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello.","During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)"
2,2,The value of BN_rand_APIParam_2 must be zero or greater,,,null,The value of BN_rand_APIParam_2 must be zero or greater.,"BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
2,2,"For the transparent negotiation to succeed , the SSL_read_APIParam_1 must have been initialized to client or server mode",,,null,"For the transparent negotiation to succeed, the SSL_read_APIParam_1 must have been initialized to client or server mode.","For the transparent negotiation to succeed, the SSL_read_APIParam_1 must have been initialized to client or server mode. This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function."
2,2,PKCS7_decrypt_APIName must be passed the correct recipient key and certificate,,1,null,PKCS7_decrypt_APIName must be passed the correct recipient key and certificate.,PKCS7_decrypt_APIName must be passed the correct recipient key and certificate. PKCS7_decrypt_APIName would be better if it could look up the correct key and certificate from a database.
2,2,BN_rand_APIParam_3 can not also be 1,,0,If BN_rand_APIParam_2 is 1,If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1.,"BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
2,2,"For BN_div_word_APIName and BN_mod_word_APIName , BN_div_word_APIParam_2 BN_mod_word_APIParam_2 must not be 0",,0,null,"For BN_div_word_APIName and BN_mod_word_APIName, BN_div_word_APIParam_2 BN_mod_word_APIParam_2 must not be 0.","For BN_div_word_APIName and BN_mod_word_APIName, BN_div_word_APIParam_2 BN_mod_word_APIParam_2 must not be 0."
2,2,error queue data structures must be freed,,1,when threads are terminated in order to avoid memory leaks," , error queue data structures must be freed when threads are terminated in order to avoid memory leaks .","Since error queue data structures are allocated automatically for new threads, error queue data structures must be freed when threads are terminated in order to avoid memory leaks."
2,2,BN_bn2bin_APIParam_2 must point to BN_num_bytes bytes of memory,,0,null,BN_bn2bin_APIParam_2 must point to BN_num_bytes(BN_bn2bin_APIParam_1) bytes of memory.,BN_bn2bin_APIName converts the absolute value of BN_bn2bin_APIParam_1 into big-endian form and stores BN_bn2bin_APIParam_1 at BN_bn2bin_APIParam_2. BN_bn2bin_APIParam_2 must point to BN_num_bytes(BN_bn2bin_APIParam_1) bytes of memory.
2,2,both CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 should be set to NULL,,0,null,In this case both CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 should be set to NULL.,It is possible to determine the correct recipient key by other means (for example looking them up in a database) and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey_APIName. In this case both CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 should be set to NULL.
2,2,"For F2 ^ m curves there is only one implementation choice , ie EC_GF2_simple_method",,1,null,"For F2^m curves there is only one implementation choice, ie EC_GF2_simple_method.","For F2^m curves there is only one implementation choice, ie EC_GF2_simple_method."
2,2,BN_init_APIParam_1 should be considered opaque and fields should not be modified or accessed directly,,0,null,BN_init_APIParam_1 should be considered opaque and fields should not be modified or accessed directly.,The basic object in this library is a BN_init_APIParam_1. It is used to hold a single large integer. BN_init_APIParam_1 should be considered opaque and fields should not be modified or accessed directly.
2,2,Make sure to not have expired certificates mixed with valid ones,,1,null,Make sure to not have expired certificates mixed with valid ones.,"If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined. This may lead to unexpected results if the same CA certificate is available with different expiration dates. If a ""certificate expired"" verification error occurs, no other certificate will be searched. Make sure to not have expired certificates mixed with valid ones."
2,2,The public key must be RSA,,1,null,The public key must be RSA  .,The public key must be RSA because it is the only OpenSSL public key algorithm that supports key transport.
2,2,the first byte of the plaintext buffer is expected to be the algorithm identifier byte,,1,If this control is not called,If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte.,"Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used. If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte."
2,2,X509_NAME_add_entry_APIParam_2 must be freed up after the call,,0,null," , X509_NAME_add_entry_APIParam_2 must be freed up after the call .","X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1. The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4. Since a copy of X509_NAME_add_entry_APIParam_2 is added, X509_NAME_add_entry_APIParam_2 must be freed up after the call."
2,2,"Note that lh _ <type> _ insert_APIName stores pointers , the data are not copied",,0,null,"Note that lh_<type>_insert_APIName stores pointers, the data are not copied.","lh_<type>_insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1. If there already is an entry with the same key, the old value is replaced. Note that lh_<type>_insert_APIName stores pointers, the data are not copied."
2,2,"The formatting SSL_CTX_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM , SSL_FILETYPE_ASN1",,0,null,"The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1.","SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1."
2,2,It is not permissible to perform multiple encryptions using the same key stream,,1,null,It is not permissible to perform multiple encryptions using the same key stream.,Certain conditions have to be observed to securely use stream ciphers. It is not permissible to perform multiple encryptions using the same key stream.
2,2,so the BIO_NOCLOSE flag should be set,1,0,"When wrapping stdout , stdin or stderr","When wrapping stdout, stdin or stderr the underlying stream should not normally be closed so the BIO_NOCLOSE flag should be set.","When wrapping stdout, stdin or stderr the underlying stream should not normally be closed so the BIO_NOCLOSE flag should be set."
2,2,the underlying stream should not normally be closed ,,1,"When wrapping stdout , stdin or stderr","When wrapping stdout, stdin or stderr the underlying stream should not normally be closed so the BIO_NOCLOSE flag should be set.","When wrapping stdout, stdin or stderr the underlying stream should not normally be closed so the BIO_NOCLOSE flag should be set."
2,2,the input data must not have been a multiple of 4 and an error has occurred,,1,If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1,"If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1, then the input data must not have been a multiple of 4 and therefore an error has occurred.","EVP_DecodeFinal_APIName must be called at the end of a decoding operation. If there is any unprocessed data still in EVP_DecodeFinal_APIParam_1, then the input data must not have been a multiple of 4 and therefore an error has occurred. The function will return -1 in this case. Otherwise the function returns 1 on success."
2,2,EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling EC_KEY_generate_key_APIName,2,,null,EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling this function.,"EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object. EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling this function. The private key is a random integer (0 < priv_key < order, where order is the order of the EC_GROUP object). The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key."
2,2,the DSA_generate_parameters_ex_APIParam_1 allows a maximum of 1024 bits,,0,null,DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated; the DSS allows a maximum of 1024 bits.,DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated; the DSS allows a maximum of 1024 bits.
2,2,The same certificate or CRL must not be added to the same cms structure more than once,,,null,The same certificate or CRL must not be added to the same cms structure more than once.,The same certificate or CRL must not be added to the same cms structure more than once.
2,2,Acceptable values for X509_NAME_get_entry_APIParam_2 run from 0 to - 1,,,null,Acceptable values for X509_NAME_get_entry_APIParam_2 run from 0 to (X509_NAME_entry_count(name) - 1).,X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2. Acceptable values for X509_NAME_get_entry_APIParam_2 run from 0 to (X509_NAME_entry_count(name) - 1). The value returned is an internal pointer which must not be freed.
2,2,SHA-1 and SHA should be used only,,1,when backward compatibility is required,"The predecessor of SHA-1, SHA, is also implemented, but SHA-1 and SHA should be used only when backward compatibility is required.","The predecessor of SHA-1, SHA, is also implemented, but SHA-1 and SHA should be used only when backward compatibility is required."
2,2,A DSA cipher can only be chosen,,1,when a DSA certificate is available,"A DSA cipher can only be chosen, when a DSA certificate is available.","A DSA cipher can only be chosen, when a DSA certificate is available. DSA ciphers always use DH key exchange and therefore need DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName )."
2,2,The PRNG must be seeded before DSA_sign_APIName is called,,,null,The PRNG must be seeded before DSA_sign_APIName (or DSA_sign_setup_APIName) is called.,The PRNG must be seeded before DSA_sign_APIName (or DSA_sign_setup_APIName) is called.
2,2,SMIME_read_CMS_APIParam_2 should be initialized to NULL,,,if SMIME_read_CMS_APIParam_2 is not NULL,For example:,To support future functionality if SMIME_read_CMS_APIParam_2 is not NULL SMIME_read_CMS_APIParam_2 should be initialized to NULL. For example:
2,2,"CMS_RecipientInfo_set0_key_APIName associates the symmetric key CMS_RecipientInfo_set0_key_APIParam_2 of length CMS_RecipientInfo_set0_key_APIParam_3 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_key_APIParam_1 , which must be of type CMS_RECIPINFO_KEK",,,null,"CMS_RecipientInfo_set0_key_APIName associates the symmetric key CMS_RecipientInfo_set0_key_APIParam_2 of length CMS_RecipientInfo_set0_key_APIParam_3 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_key_APIParam_1, which must be of type CMS_RECIPINFO_KEK.","CMS_RecipientInfo_set0_key_APIName associates the symmetric key CMS_RecipientInfo_set0_key_APIParam_2 of length CMS_RecipientInfo_set0_key_APIParam_3 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_key_APIParam_1, which must be of type CMS_RECIPINFO_KEK."
2,2,"X509_check_host_APIName checks if the certificate Subject Alternative Name or Subject CommonName matches the specified host name , which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034",,,null,"X509_check_host_APIName checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified host name, which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034.","X509_check_host_APIName checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified host name, which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034. By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix. For example, by default, the host X509_check_host_APIParam_2 ""www.example.com"" would match a certificate with a SAN or CN value of ""*.example.com"", ""w*.example.com"" or ""*w.example.com""."
2,2,After this call X509_STORE_CTX_free_APIParam_1 is no longer valid,,,null,After this call X509_STORE_CTX_free_APIParam_1 is no longer valid.,X509_STORE_CTX_free_APIName completely frees up X509_STORE_CTX_free_APIParam_1. After this call X509_STORE_CTX_free_APIParam_1 is no longer valid.
2,2,For some key types and parameters the random number generator must be seeded,,,null,For some key types and parameters the random number generator must be seeded or the operation will fail.,For some key types and parameters the random number generator must be seeded or the operation will fail.
2,2,"The flags currently supported are UI_INPUT_FLAG_ECHO , which is relevant for UI_add_input_string_APIName and will have the users response be echoed",,,null,"The flags currently supported are UI_INPUT_FLAG_ECHO, which is relevant for UI_add_input_string_APIName and will have the users response be echoed (when prompting for a password, this flag should obviously not be used, and UI_INPUT_FLAG_DEFAULT_PWD, which means that a default password of some sort will be used (completely depending on the application and the UI method).","The flags currently supported are UI_INPUT_FLAG_ECHO, which is relevant for UI_add_input_string_APIName and will have the users response be echoed (when prompting for a password, this flag should obviously not be used, and UI_INPUT_FLAG_DEFAULT_PWD, which means that a default password of some sort will be used (completely depending on the application and the UI method)."
2,2,In either case for the curve to be valid the discriminant must be non zero,,,null,In either case for the curve to be valid the discriminant must be non zero.,The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid. For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is simply b. In either case for the curve to be valid the discriminant must be non zero.
2,2,"The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2 , which must also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes",,,null,"The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes.","des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal. The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned. The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. A return code of -1 indicates a system error, 1 failure due to use interaction, and 0 is success. All other functions described here use des_read_pw_APIName to do the work."
2,2,"BF_ofb64_encrypt_APIName uses the same parameters as BF_cfb64_encrypt_APIName , which must be initialized the same way",,1,null,"It uses the same parameters as BF_cfb64_encrypt_APIName, which must be initialized the same way.","BF_ofb64_encrypt_APIName is the OFB mode for Blowfish with 64 bit feedback. It uses the same parameters as BF_cfb64_encrypt_APIName, which must be initialized the same way."
2,2,Large numbers of small writes through the chain should be avoided,,,null,Large numbers of small writes through the chain should be avoided as this will produce an output consisting of lots of OCTET STRING structures.,Large numbers of small writes through the chain should be avoided as this will produce an output consisting of lots of OCTET STRING structures. Prepending a BIO_f_buffer_APIName buffering BIO will prevent this.
2,2,the SSLv3 protocol is recommended that applications should set this option,,,null,the SSLv3 protocol is recommended that applications should set this option.,Do not use the SSLv3 protocol. the SSLv3 protocol is recommended that applications should set this option.
2,2,"For RC5 the number of rounds can currently only be set to 8 , 12 or 16",,,null,"For RC5 the number of rounds can currently only be set to 8, 12 or 16.","For RC5 the number of rounds can currently only be set to 8, 12 or 16. This is a limitation of the current RC5 code rather than the EVP interface."
2,2,The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2,,,null,The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2.,"The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to pem_passwd_cb_APIParam_4 is provided. The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2. The actual length of the password must be returned to the calling function. pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1)."
2,2,"The SSL_SESSION object is built from several malloc_APINameed parts , The SSL_SESSION object can not be moved , copied or stored directly",,,null,"The SSL_SESSION object is built from several malloc_APINameed parts, The SSL_SESSION object can therefore not be moved, copied or stored directly.","The SSL_SESSION object is built from several malloc_APINameed parts, The SSL_SESSION object can therefore not be moved, copied or stored directly. In order to store session data on disk or into a database, The SSL_SESSION object must be transformed into a binary ASN1 representation."
0,2,EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve,,,null,EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve.,"EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve. These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2. The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2. The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve."
2,2,Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2,,,null,Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2.,"EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve. These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2. The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2. The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve."
2,2,"SHA1_Final_APIName places the message digest in SHA1_Final_APIParam_1 , which must have space for 20 bytes of output , and erases the SHA1_Final_APIParam_2",,,null,"SHA1_Final_APIName places the message digest in SHA1_Final_APIParam_1, which must have space for SHA_DIGEST_LENGTH == 20 bytes of output, and erases the SHA1_Final_APIParam_2.","SHA1_Final_APIName places the message digest in SHA1_Final_APIParam_1, which must have space for SHA_DIGEST_LENGTH == 20 bytes of output, and erases the SHA1_Final_APIParam_2."
2,2,"Under normal conditions it should never be necessary to set a value smaller than the default , as the buffer is handled dynamically and only uses the memory actually required by the data sent by the peer",,,null,"Under normal conditions it should never be necessary to set a value smaller than the default, as the buffer is handled dynamically and only uses the memory actually required by the data sent by the peer.","Under normal conditions it should never be necessary to set a value smaller than the default, as the buffer is handled dynamically and only uses the memory actually required by the data sent by the peer."
2,2,"BN_bn2mpi_APIName stores the representation of BN_bn2mpi_APIParam_1 at BN_bn2mpi_APIParam_2 , where BN_bn2mpi_APIParam_2 must be large enough to hold the result",,,null,"BN_bn2mpi_APIName stores the representation of BN_bn2mpi_APIParam_1 at BN_bn2mpi_APIParam_2, where BN_bn2mpi_APIParam_2 must be large enough to hold the result.","BN_bn2mpi_APIName stores the representation of BN_bn2mpi_APIParam_1 at BN_bn2mpi_APIParam_2, where BN_bn2mpi_APIParam_2 must be large enough to hold the result. The size can be determined by calling BN_bn2mpi(BN_bn2mpi_APIParam_1, NULL)."
2,2,"The elements of Fp are the integers 0 to p-1 , where p is a prime number",,,null,"The elements of Fp are the integers 0 to p-1, where p is a prime number.","Within the library there are two forms of elliptic curve that are of interest. The first form is those defined over the prime field Fp. The elements of Fp are the integers 0 to p-1, where p is a prime number. This gives us a revised elliptic curve equation as follows:"
2,2,"MD2_Final_APIName places the message digest in MD2_Final_APIParam_1 , which must have space for 16 bytes of output , and erases the MD2_Final_APIParam_2",,,null,"MD2_Final_APIName places the message digest in MD2_Final_APIParam_1, which must have space for MD2_DIGEST_LENGTH == 16 bytes of output, and erases the MD2_Final_APIParam_2.","MD2_Final_APIName places the message digest in MD2_Final_APIParam_1, which must have space for MD2_DIGEST_LENGTH == 16 bytes of output, and erases the MD2_Final_APIParam_2."
2,2,"you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order , which is little-endian on little-endian platforms and big-endian on big-endian ones",,,If you still want to use BF_encrypt_APIName and BF_decrypt_APIName,"If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones.","BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption. BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2. BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish. The alternative is to use BF_ecb_encrypt_APIName. If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones."
2,2,"CMS_RecipientInfo_set0_pkey_APIName associates the private key CMS_RecipientInfo_set0_pkey_APIParam_2 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_pkey_APIParam_1 , which must be of type CMS_RECIPINFO_TRANS",,,null,"CMS_RecipientInfo_set0_pkey_APIName associates the private key CMS_RecipientInfo_set0_pkey_APIParam_2 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_pkey_APIParam_1, which must be of type CMS_RECIPINFO_TRANS.","CMS_RecipientInfo_set0_pkey_APIName associates the private key CMS_RecipientInfo_set0_pkey_APIParam_2 with the CMS_RecipientInfo structure CMS_RecipientInfo_set0_pkey_APIParam_1, which must be of type CMS_RECIPINFO_TRANS."
2,2,Due to the link between message digests and public key algorithms the correct digest algorithm must be used with the correct public key type,,,null,Due to the link between message digests and public key algorithms the correct digest algorithm must be used with the correct public key type.,Due to the link between message digests and public key algorithms the correct digest algorithm must be used with the correct public key type. A list of algorithms and associated public key algorithms appears in EVP_DigestInit_APIName .
2,2,"RSA export ciphers with a keylength of 512 bits for the RSA key require a temporary 512 bit RSA key , as typically the supplied key has a length of 1024 bit",,,null,"RSA export ciphers with a keylength of 512 bits for the RSA key require a temporary 512 bit RSA key, as typically the supplied key has a length of 1024 bit (see SSL_CTX_set_tmp_rsa_callback_APIName ).","A RSA cipher can only be chosen, when a RSA certificate is available. RSA export ciphers with a keylength of 512 bits for the RSA key require a temporary 512 bit RSA key, as typically the supplied key has a length of 1024 bit (see SSL_CTX_set_tmp_rsa_callback_APIName ). RSA ciphers using DHE need a certificate and key and additional DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName )."
2,2,the context must be cleaned up after use by calling EVP_MD_CTX_cleanup_APIName or a memory leak will occur,,,null," , the context must be cleaned up after use by calling EVP_MD_CTX_cleanup_APIName or a memory leak will occur .","Since only a copy of the digest context is ever finalized, the context must be cleaned up after use by calling EVP_MD_CTX_cleanup_APIName or a memory leak will occur."
2,2,"MDC2_Final_APIName places the message digest in MDC2_Final_APIParam_1 , which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output , and erases the MDC2_Final_APIParam_2",,,null,"MDC2_Final_APIName places the message digest in MDC2_Final_APIParam_1, which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output, and erases the MDC2_Final_APIParam_2.","MDC2_Final_APIName places the message digest in MDC2_Final_APIParam_1, which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output, and erases the MDC2_Final_APIParam_2."
2,2,The d2i_RSAPrivateKey_APIParam_1 i2d_RSAPrivateKey_APIParam_2 structure passed to the private key encoding functions should have all the PKCS # 1 private key components present,,1,null,The i2d_RSAPrivateKey_APIParam_1 i2d_RSA_PUBKEY_APIParam_1 d2i_RSAPrivateKey_APIParam_1 d2i_RSAPublicKey_APIParam_1 i2d_RSAPublicKey_APIParam_1 d2i_RSA_PUBKEY_APIParam_1 structure passed to the private key encoding functions should have all the PKCS#1 private key components present.,The i2d_RSAPrivateKey_APIParam_1 i2d_RSA_PUBKEY_APIParam_1 d2i_RSAPrivateKey_APIParam_1 d2i_RSAPublicKey_APIParam_1 i2d_RSAPublicKey_APIParam_1 d2i_RSA_PUBKEY_APIParam_1 structure passed to the private key encoding functions should have all the PKCS#1 private key components present.
0,2,"Supported representations are octet strings , BIGNUMs and hexadecimal",,1,null,"Supported representations are octet strings, BIGNUMs and hexadecimal.","In addition EC_POINTs can be converted to and from various external representations. Supported representations are octet strings, BIGNUMs and hexadecimal. Octet strings are stored in a buffer along with an associated buffer length. A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer. Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f)."
2,2,"As generating DH parameters is extremely time consuming , an application should not generate the parameters on the fly but supply the parameters",,1,null,"As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters.","As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
2,2,"The current thread 's error queue must be empty before the TLS/SSL I/O operation is attempted , or SSL_get_error_APIName will not work reliably",,0,null,"The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error_APIName will not work reliably.","In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2, SSL_get_error_APIName inspects the current thread's OpenSSL error queue. Thus, SSL_get_error_APIName must be used in the same thread that performed the TLS/SSL I/O operation, and no other OpenSSL function calls should appear in between. The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error_APIName will not work reliably."
2,2,The chain of BIOs must not be freed after this call,,1,null,"The chain of BIOs must not be freed after this call, they will be automatically freed when the accept BIO is freed.","BIO_set_accept_bios_APIName can be used to set a chain of BIOs which will be duplicated and prepended to the chain when an incoming connection is received. This is useful if, for example, a buffering or SSL BIO is required for each connection. The chain of BIOs must not be freed after this call, they will be automatically freed when the accept BIO is freed."
2,2,"X509_cmp_time_APIParam_1 must satisfy the ASN1_TIME format mandated by RFC 5280 , ie , X509_cmp_time_APIParam_1 format must be either YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ",,0,null,"X509_cmp_time_APIParam_1 must satisfy the ASN1_TIME format mandated by RFC 5280, ie, X509_cmp_time_APIParam_1 format must be either YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ.","X509_cmp_time_APIParam_1 must satisfy the ASN1_TIME format mandated by RFC 5280, ie, X509_cmp_time_APIParam_1 format must be either YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ."
2,2,It is important that the correct implementation type for the form of curve selected is used,,1,null,It is important that the correct implementation type for the form of curve selected is used.,The Elliptic Curve library provides a number of different implementations through a single common interface. When constructing a curve using EC_GROUP_new (see EC_GROUP_new_APIName ) an implementation method must be provided. The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW. It is important that the correct implementation type for the form of curve selected is used.
2,2,"The protocol-lists must be in wire-format , which is defined as a vector of non-empty , 8-bit length-prefixed , byte strings",,0,null,"The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings.","The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
2,2,"This function performs integrity checks on all the RSA key material , so the RSA key structure must contain all the private key data too",,1,null,"This function performs integrity checks on all the RSA key material, so the RSA key structure must contain all the private key data too.","This function does not work on RSA public keys that have only the modulus and public exponent elements populated. This function performs integrity checks on all the RSA key material, so the RSA key structure must contain all the private key data too."
2,2,File descriptor BIOs should not be used for socket I/O,,1,null,File descriptor BIOs should not be used for socket I/O.,File descriptor BIOs should not be used for socket I/O. Use socket BIOs instead.
2,2,Only RSA keys are supported in PKCS # 7 and envelopedData so the recipient certificates supplied to this function must all contain RSA public keys,,1,null,"Only RSA keys are supported in PKCS # 7 and envelopedData so the recipient certificates supplied to this function must all contain RSA public keys ,  .","Only RSA keys are supported in PKCS#7 and envelopedData so the recipient certificates supplied to this function must all contain RSA public keys, though they do not have to be signed using the RSA algorithm."
2,2,currently EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should be an odd integer,,0,null,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIName macro sets the public exponent value for RSA key generation to EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 currently EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should be an odd integer.,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIName macro sets the public exponent value for RSA key generation to EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 currently EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should be an odd integer. The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 pointer is used internally by this function so EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should not be modified or free after the call. If this macro is not called then 65537 is used.
2,2,Some advanced attributes such as counter signatures are not supported,,1,null,Some advanced attributes such as counter signatures are not supported.,Some advanced attributes such as counter signatures are not supported.
2,2,Exactly one of the SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags SSL_VERIFY_NONE and SSL_VERIFY_PEER must be set at any time,,0,null,Exactly one of the SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags SSL_VERIFY_NONE and SSL_VERIFY_PEER must be set at any time.,Exactly one of the SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags SSL_VERIFY_NONE and SSL_VERIFY_PEER must be set at any time.
2,2,Accept BIOs support BIO_puts_APIName but not support BIO_gets_APIName,,1,null,Accept BIOs support BIO_puts_APIName but not BIO_gets_APIName.,Accept BIOs support BIO_puts_APIName but not BIO_gets_APIName.
2,2,After this call no further writes on BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 are allowed,,,null,After this call no further writes on BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 are allowed (they will return an error).,BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1. After this call no further writes on BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 are allowed (they will return an error). Reads on the other half of the pair will return any pending data or EOF when all pending data has been read.
2,2,"After the digest has been retrieved from a digest BIO, the digest must be reinitialized by calling BIO_reset_APIName , or BIO_set_md_APIName before any more data is passed through it",,1,null,"After the digest has been retrieved from a digest BIO it must be reinitialized by calling BIO_reset_APIName, or BIO_set_md_APIName before any more data is passed through it.","After the digest has been retrieved from a digest BIO it must be reinitialized by calling BIO_reset_APIName, or BIO_set_md_APIName before any more data is passed through it."
2,2,"The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes",,,null,"The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes.","des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal. The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned. The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. A return code of -1 indicates a system error, 1 failure due to use interaction, and 0 is success. All other functions described here use des_read_pw_APIName to do the work."
2,2,"To avoid ambiguity with a normal positive return value, BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1",,,null,"To avoid ambiguity with a normal positive return value BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1.","BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty. If the BIO_set_mem_eof_return_APIParam_2 is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false. If BIO_set_mem_eof_return_APIParam_2 is non zero then BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag (that is BIO_read_retry(b) is true). To avoid ambiguity with a normal positive return value BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1."
2,2,The CMS_ContentInfo structure CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must be of type signed data or enveloped data or an error will be returned,,,null,The CMS_ContentInfo structure CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must be of type signed data or enveloped data or an error will be returned.,The CMS_ContentInfo structure CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must be of type signed data or enveloped data or an error will be returned.
2,2,"Once SSL_write_APIName returns with r, r bytes have been successfully written and the next call to SSL_write_APIName must only send the n-r bytes left, imitating the behaviour of write_APIName",,,null,"Once SSL_write_APIName returns with r, r bytes have been successfully written and the next call to SSL_write_APIName must only send the n-r bytes left, imitating the behaviour of write_APIName.","Allow SSL_write(..., n) to return r with 0 < r < n (ie report success when just a single record has been written). When not set (the default), SSL_write_APIName will only report success once the complete chunk was written. Once SSL_write_APIName returns with r, r bytes have been successfully written and the next call to SSL_write_APIName must only send the n-r bytes left, imitating the behaviour of write_APIName."
2,2,BF_cfb64_encrypt_APIParam5 must point at an 8 byte long initialization vector,,1,null,ivec must point at an 8 byte long initialization vector,"BF_cbc_encrypt() is the Cipher Block Chaining function for Blowfish. It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule, putting the result in BF_cbc_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector."
2,2,num must point at an integer which must be initially zero,,,null,num must point at an integer which must be initially zero,"BF_cfb64_encrypt() is the CFB mode for Blowfish with 64 bit feedback. It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule, putting the result in BF_cfb64_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector. num must point at an integer which must be initially zero."
2,2,"The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length , no less",,,null,"The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less","BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less. If they are larger, everything after the first 64 bits is ignored."
2,2,The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 parameter,,,null,The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 parameter,The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 parameter. This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards. This is done using ASN1_STRING_set_by_NID().
2,2,The BIO is set to a read only state and as a result can not be written to,,,null,The BIO is set to a read only state and as a result cannot be written to,"BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed."
2,2,They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message,,,null,They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message,"The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
2,2,This integer must be initialized to zero,,,when ivec is initialized,This integer must be initialized to zero when ivec is initialized,"The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
2,2,sigret must point to DSA_size bytes of memory,,,null,sigret must point to DSA_size(DSA_sign_setup_APIParam_1) bytes of memory,DSA_sign() computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN.1 DER encoding at sigret. The length of the signature is places in *siglen. sigret must point to DSA_size(DSA_sign_setup_APIParam_1) bytes of memory.
2,2,so the supplied area of memory must be unchanged until the BIO is freed,,,null,"The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed","BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed."
2,2,"The purpose of the latter two is to simulate stream ciphers , and , they need the parameter num , which is a pointer to an integer where the current offset in ivec is stored between calls",,,null,"The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
2,2,Normally the reference count is not incremented and the session must not be explicitly freed with SSL_SESSION_free,,,null,"With the parameter copy the callback can require the SSL engine to increment the reference count of the SSL_SESSION object, Normally the reference count is not incremented and therefore the session must not be explicitly freed with SSL_SESSION_free(3)","The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client. The get_session_cb() is always called, also when session caching was disabled. The get_session_cb() is passed the ssl connection, the session id of length length at the memory location data. With the parameter copy the callback can require the SSL engine to increment the reference count of the SSL_SESSION object, Normally the reference count is not incremented and therefore the session must not be explicitly freed with SSL_SESSION_free(3) ."
2,2,the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated,,,if BIO_new_mem_buf_APIParam_2 is -1,"BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen","BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed."
2,2,Contexts MUST NOT be shared between threads,non-assp,,null,Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads,The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API. Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads.
2,2,In the unlikely even an application explicitly wants to set no prefix it must be explicitly set to '' '',,,null,"In the unlikely even an application explicitly wants to set no prefix it must be explicitly set to """"","If the SSL_CONF_FLAG_CMDLINE flag is set ,then prefix checks are case sensitive and ""-"" is the default. In the unlikely even an application explicitly wants to set no prefix it must be explicitly set to """"."
2,2,DH_compute_key_APIParam_1 must point to DH_size bytes of memory,,,null,DH_compute_key_APIParam_1 must point to DH_size(dh) bytes of memory,DH_compute_key() computes the shared secret from the private DH value in DH_compute_key_APIParam_3 and the other party's public value in DH_compute_key_APIParam_2 and stores it in DH_compute_key_APIParam_1. DH_compute_key_APIParam_1 must point to DH_size(dh) bytes of memory.
2,2,EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init before calling this function,,,null,EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function,"EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
2,2,"RAND_event() should be called with the RAND_event_APIParam_1 , RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure",1,,null,"It should be called with the RAND_event_APIParam_1, RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure","RAND_event() collects the entropy from Windows events such as mouse movements and other user interaction. It should be called with the RAND_event_APIParam_1, RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure. It will estimate the entropy contained in the event message (if any), and add it to the PRNG. The program can then process the messages as usual."
2,2,The precomputed values from DSA_sign_setup_APIName MUST NOT be used for more than one signature,,,null,The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
2,2,SSL_OP_SINGLE_DH_USE should be enabled,,,whenever temporary/ephemeral DH parameters are used,SSL_OP_SINGLE_DH_USE should therefore be enabled whenever temporary/ephemeral DH parameters are used,"Always create a new key when using temporary/ephemeral DH parameters (see SSL_CTX_set_tmp_dh_callback(3) ). This option must be used to prevent small subgroup attacks, when the DH parameters were not generated using ""strong"" primes (eg when using DSA-parameters, see dhparam(1) ). If ""strong"" primes were used, it is not strictly necessary to generate a new DH key during each handshake but it is also recommended. SSL_OP_SINGLE_DH_USE should therefore be enabled whenever temporary/ephemeral DH parameters are used."
2,2,it should point to an 8 byte buffer or NULL,,,if no salt is used,The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
2,2,The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly,,,null,"The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based","threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1. The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based. If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno. The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility."
2,2,The d2i_PrivateKey_APIParam_1 parameter should be a public key algorithm constant such as EVP_PKEY_RSA,,,null,The d2i_PrivateKey_APIParam_1 parameter should be a public key algorithm constant such as EVP_PKEY_RSA,d2i_PrivateKey() decodes a private key using algorithm d2i_PrivateKey_APIParam_1. It attempts to use any key specific format or PKCS#8 unencrypted PrivateKeyInfo format. The d2i_PrivateKey_APIParam_1 parameter should be a public key algorithm constant such as EVP_PKEY_RSA. An error occurs if the decoded key does not match d2i_PrivateKey_APIParam_1.
2,2,The communication channel must already have been set and assigned to the SSL_connect_APIParam_1 by setting an underlying BIO,,,null,The communication channel must already have been set and assigned to the SSL_connect_APIParam_1 by setting an underlying BIO,SSL_connect() initiates the TLS/SSL handshake with a server. The communication channel must already have been set and assigned to the SSL_connect_APIParam_1 by setting an underlying BIO.
2,2,"The X509_VERIFY_PARAM_set1_ip_APIParam_2 is in binary format , in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6",,,null,"The ip argument is in binary format, in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6","X509_VERIFY_PARAM_set1_ip() sets the expected IP address to ip. The ip argument is in binary format, in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6. When an IP address is specified, certificate verification automatically invokes X509_check_ip(3) ."
2,2,they should be set to NULL,,,If any or all of these function pointer arguments are not used,"If any or all of these function pointer arguments are not used, they should be set to NULL","The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
2,2,The parameters PKCS12_parse_APIParam_3 and PKCS12_parse_APIParam_4 can not be NULL,,,null,The parameters PKCS12_parse_APIParam_3 and PKCS12_parse_APIParam_4 cannot be NULL,The parameters PKCS12_parse_APIParam_3 and PKCS12_parse_APIParam_4 cannot be NULL. ca can be <NULL> in which case additional certificates will be discarded. *ca can also be a valid STACK in which case additional certificates are appended to *ca. If *ca is NULL a new STACK will be allocated.
2,2,The communication channel must already have been set and assigned to the SSL_accept_APIParam_1 by setting an underlying BIO,,,null,The communication channel must already have been set and assigned to the SSL_accept_APIParam_1 by setting an underlying BIO,SSL_accept() waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication channel must already have been set and assigned to the SSL_accept_APIParam_1 by setting an underlying BIO.
2,2,"The EVP_SealInit_APIParam_5 must contain enough room for the corresponding cipher 's IV , as determined by EVP_CIPHER_iv_length",,,null,"The iv parameter must contain enough room for the corresponding cipher's IV, as determined by (for example) EVP_CIPHER_iv_length(type)","The iv parameter is a buffer where the generated IV is written to. The iv parameter must contain enough room for the corresponding cipher's IV, as determined by (for example) EVP_CIPHER_iv_length(type)."
2,2,RSA_public_encrypt_APIParam_3 must point to RSA_size bytes of memory,,,null,to must point to RSA_size(rsa) bytes of memory,RSA_private_encrypt() signs the RSA_private_encrypt_APIParam_1 bytes at RSA_private_encrypt_APIParam_2 (usually a message digest with an algorithm identifier) using the private key rsa and stores the signature in to. to must point to RSA_size(rsa) bytes of memory.
2,2,The first call should have npubk set to 0 and it should be called again with EVP_SealInit_APIParam_2 set to NULL,,,null,The first call should have npubk set to 0 and (after setting any cipher parameters) it should be called again with EVP_SealInit_APIParam_2 set to NULL,It is possible to call EVP_SealInit() twice in the same way as EVP_EncryptInit(). The first call should have npubk set to 0 and (after setting any cipher parameters) it should be called again with EVP_SealInit_APIParam_2 set to NULL.
2,0,"Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length",1,,"if fixed by protocol,","Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, and if fixed by protocol, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length","The RSA_padding_check_PKCS1_type_2() padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer PKCS1_OAEP padding. Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, and if fixed by protocol, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length. In such case leakage would be minimal, it would take attacker's ability to observe memory access pattern with byte granilarity as it occurs, post-factum timing analysis won't do."
2,2,RSA_public_encrypt_APIParam_3  must point to a memory section large enough to hold the message digest,,,null,to must point to a memory section large enough to hold the message digest (which is smaller than RSA_size(rsa) - 11),RSA_public_decrypt() recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer's public key rsa. to must point to a memory section large enough to hold the message digest (which is smaller than RSA_size(rsa) - 11). padding is the padding mode that was used to sign the data.
2,2,ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes.,,,null,"ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes","EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
2,2,"As a minimum, the flag CERT_PKEY_VALID must be set for a chain to be usable",,,null,As a minimum the flag CERT_PKEY_VALID must be set for a chain to be usable,As a minimum the flag CERT_PKEY_VALID must be set for a chain to be usable. An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too. If no chain is suitable a server should fall back to the most secure chain which sets CERT_PKEY_VALID.
2,2,CMS_RecipientInfo_kekri_get0_id retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK,,,null,CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK,"CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
2,2,"CMS_RecipientInfo_ktri_get0_signer_id retrieves the certificate recipient identifier associated with a specific CMS_RecipientInfo structure CMS_RecipientInfo_ktri_get0_signer_id_APIParam_1 , which must be of type CMS_RECIPINFO_TRANS",,,null,"CMS_RecipientInfo_ktri_get0_signer_id() retrieves the certificate recipient identifier associated with a specific CMS_RecipientInfo structure CMS_RecipientInfo_ktri_get0_signer_id_APIParam_1, which must be of type CMS_RECIPINFO_TRANS","CMS_RecipientInfo_ktri_get0_signer_id() retrieves the certificate recipient identifier associated with a specific CMS_RecipientInfo structure CMS_RecipientInfo_ktri_get0_signer_id_APIParam_1, which must be of type CMS_RECIPINFO_TRANS. Either the keyidentifier will be set in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_3 and CMS_RecipientInfo_ktri_get0_signer_id_APIParam_4."
2,2,The initialization vector iv should be a random value,,,null,The initialization vector iv should be a random value,The initialization vector iv should be a random value. The cipher context ctx should use the initialisation vector iv. The cipher context can be set using EVP_EncryptInit_ex . The hmac context can be set using HMAC_Init_ex .
2,2,The cipher context ctx should use the initialisation vector iv,,,null,The cipher context ctx should use the initialisation vector iv,The initialization vector iv should be a random value. The cipher context ctx should use the initialisation vector iv. The cipher context can be set using EVP_EncryptInit_ex . The hmac context can be set using HMAC_Init_ex .
2,2,This flag should only be set,,,if PKCS7_STREAM was also set in the previous call to PKCS7_sign or PKCS7_encrypt,This flag should only be set if PKCS7_STREAM was also set in the previous call to PKCS7_sign() or PKCS7_encrypt(),"If the PKCS7_STREAM flag is set, streaming is performed. This flag should only be set if PKCS7_STREAM was also set in the previous call to PKCS7_sign() or PKCS7_encrypt()."
2,2,"CMS_RecipientInfo_kekri_id_cmp compares the ID in the CMS_RecipientInfo_kekri_id_cmp_APIParam_2 and CMS_RecipientInfo_kekri_id_cmp_APIParam_3 parameters against the keyIdentifier CMS_RecipientInfo structure CMS_RecipientInfo_kekri_id_cmp_APIParam_1 , which must be of type CMS_RECIPINFO_KEK",,,null,"CMS_RecipientInfo_kekri_id_cmp() compares the ID in the CMS_RecipientInfo_kekri_id_cmp_APIParam_2 and CMS_RecipientInfo_kekri_id_cmp_APIParam_3 parameters against the keyIdentifier CMS_RecipientInfo structure CMS_RecipientInfo_kekri_id_cmp_APIParam_1, which must be of type CMS_RECIPINFO_KEK","CMS_RecipientInfo_kekri_id_cmp() compares the ID in the CMS_RecipientInfo_kekri_id_cmp_APIParam_2 and CMS_RecipientInfo_kekri_id_cmp_APIParam_3 parameters against the keyIdentifier CMS_RecipientInfo structure CMS_RecipientInfo_kekri_id_cmp_APIParam_1, which must be of type CMS_RECIPINFO_KEK. It returns zero if the comparison is successful and non zero if not."
2,2,The hctx needs to be set using HMAC_Init_ex,,,null,The hctx needs to be set using HMAC_Init_ex,"When the client presents a session ticket, the callback function with be called with enc set to 0 indicating that the cb function should retreive a set of parameters. In this case name and iv have already been parsed out of the session ticket. The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv. using a function like EVP_DecryptInit_ex . The hctx needs to be set using HMAC_Init_ex ."
2,2,the verification result must be set in any case using the error member of x509_store_ctx,,,null,As the verification procedure may allow to continue the connection in case of failure (by always returning 1) the verification result must be set in any case using the error member of x509_store_ctx so that the calling application will be informed about the detailed result of the verification procedure!,"callback should return 1 to indicate verification success and 0 to indicate verification failure. If SSL_VERIFY_PEER is set and callback returns 0, the handshake will fail. As the verification procedure may allow to continue the connection in case of failure (by always returning 1) the verification result must be set in any case using the error member of x509_store_ctx so that the calling application will be informed about the detailed result of the verification procedure!"
2,2,DH_bits_APIParam_1 must not be NULL.,,,null,dh and dh->p must not be NULL.,dh and dh->p must not be NULL.
2,2,"The OpenSSL library expects that the function will set an arbitary name , initialize iv , and set the cipher context ctx and the hash context hctx",,,null,"The OpenSSL library expects that the function will set an arbitary name, initialize iv, and set the cipher context ctx and the hash context hctx","For new sessions tickets, when the client doesn't present a session ticket, or an attempted retreival of the ticket failed, or a renew option was indicated, the callback function will be called with enc equal to 1. The OpenSSL library expects that the function will set an arbitary name, initialize iv, and set the cipher context ctx and the hash context hctx."
2,2,BIO_set_cipher_APIParam_5 should be set to 1 for encryption and zero for decryption,,,null,enc should be set to 1 for encryption and zero for decryption,BIO_set_cipher() sets the cipher of BIO BIO_set_cipher_APIParam_1 to BIO_set_cipher_APIParam_2 using key key and IV iv. enc should be set to 1 for encryption and zero for decryption.
2,2,RSA_sign_ASN1_OCTET_STRING_APIParam_4 must point to RSA_size bytes of memory,,,null,sigret must point to RSA_size(rsa) bytes of memory,RSA_sign_ASN1_OCTET_STRING() signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS #1 padding. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory.
2,2,Note that BN_rshift_APIParam_3 must be non-negative,,,null,Note that BN_rshift_APIParam_3 must be non-negative,BN_rshift() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2^n). Note that BN_rshift_APIParam_3 must be non-negative. BN_rshift1() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2).
2,2,Note that BN_lshift_APIParam_3 must be non-negative,,,null,Note that BN_lshift_APIParam_3 must be non-negative,BN_lshift() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=a*2^n). Note that BN_lshift_APIParam_3 must be non-negative. BN_lshift1() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=2*a).
2,2,More data must be read from the underlying BIO layer operation,,,null,More data must be read from the underlying BIO layer operation,More data must be read from the underlying BIO layer in order to complete the actual SSL_*() operation. A call to SSL_get_error(3) should return SSL_ERROR_WANT_READ.
2,2,EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init before calling this function,,,null,EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function,"EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey. EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options. Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed)."
2,2,HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 must have been created with HMAC_CTX_new before the first use of an HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 in this function,,,null,HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 must have been created with HMAC_CTX_new() before the first use of an HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 in this function,HMAC_Init_ex() initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2. If both are NULL (or HMAC_APIParam_1 is the same as the previous digest used by HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 and HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2 is NULL) the existing key is reused. HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 must have been created with HMAC_CTX_new() before the first use of an HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 in this function. N.B. HMAC_Init() had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex() in programs that expect it will cause them to stop working.
2,2,The PKCS7 structure should be obtained from an initial call to PKCS7_sign with the flag PKCS7_PARTIAL set or in the case or re-signing a valid PKCS7 signed data structure,,,null,The PKCS7 structure should be obtained from an initial call to PKCS7_sign() with the flag PKCS7_PARTIAL set or in the case or re-signing a valid PKCS7 signed data structure,The PKCS7 structure should be obtained from an initial call to PKCS7_sign() with the flag PKCS7_PARTIAL set or in the case or re-signing a valid PKCS7 signed data structure.
2,2,Those containing a SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2 SSL_set1_verify_cert_store_APIParam_2 SSL_set1_chain_cert_store_APIParam_2 SSL_set0_verify_cert_store_APIParam_2 SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2 do not increment reference counts and the supplied store MUST NOT be freed after the operation,,,null,Those containing a SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2 SSL_set1_verify_cert_store_APIParam_2 SSL_set1_chain_cert_store_APIParam_2 SSL_set0_verify_cert_store_APIParam_2 SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2 do not increment reference counts and the supplied store MUST NOT be freed after the operation,All these functions are implemented as macros. Those containing a 1 increment the reference count of the supplied store so it must be freed at some point after the operation. Those containing a SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2 SSL_set1_verify_cert_store_APIParam_2 SSL_set1_chain_cert_store_APIParam_2 SSL_set0_verify_cert_store_APIParam_2 SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2 do not increment reference counts and the supplied store MUST NOT be freed after the operation.
2,2,EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function,,,null,EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function,"EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
2,2,The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2,,,if it is not -1,The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2 if it is not -1,The function EVP_PKEY_CTX_ctrl() sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1. The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2 if it is not -1. The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to. The control command is indicated in cmd and any additional arguments in p1 and p2.
2,2,The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block,,,null,The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block,"If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding). The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made."
2,2,"EVP_CipherInit_ex_APIParam_6 should be set to 1 for encryption , 0 for decryption and -1 to leave the value unchanged",,,null,"It should be set to 1 for encryption, 0 for decryption and -1 to leave the value unchanged (the actual value of 'enc' being supplied in a previous call)","EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are functions that can be used for decryption or encryption. The operation performed depends on the value of the enc parameter. It should be set to 1 for encryption, 0 for decryption and -1 to leave the value unchanged (the actual value of 'enc' being supplied in a previous call)."
2,2,The CMS_ContentInfo structure should be obtained from an initial call to CMS_sign_APIName with the flag CMS_PARTIAL set or in the case or re-signing a valid CMS_ContentInfo SignedData structure,,,null,The CMS_ContentInfo structure should be obtained from an initial call to CMS_sign() with the flag CMS_PARTIAL set or in the case or re-signing a valid CMS_ContentInfo SignedData structure,The CMS_ContentInfo structure should be obtained from an initial call to CMS_sign() with the flag CMS_PARTIAL set or in the case or re-signing a valid CMS_ContentInfo SignedData structure.
2,2,The algorithm passed in the cipher parameter must support ASN1 encoding of its parameters,,,null,The algorithm passed in the cipher parameter must support ASN1 encoding of its parameters,The algorithm passed in the cipher parameter must support ASN1 encoding of its parameters.
2,2,EVP_EncryptUpdate_APIParam_2 should contain sufficient room,,,null,The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room. The actual number of bytes written is placed in outl.
2,2,the total amount of data encrypted or decrypted must be a multiple of the block size or an error will occur,,,null,"If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur","EVP_CIPHER_CTX_set_padding() enables or disables padding. By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur."
2,2,Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications,,,null,Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications,"Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly. These files can be converted into C code using the -C option of the dhparam(1) application. Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group. Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications."
2,2,This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument,,,null,This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument,A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
2,2,The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb,,,null,The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(),A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
2,2,ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory,,,null,Note: ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory,ECDSA_sign_ex() computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len. Note: ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory. The parameter ECDSA_sign_ex_APIParam_1 is ignored.
2,2,The first call should have EVP_OpenInit_APIParam_6 set to NULL and it should be called again with EVP_OpenInit_APIParam_2 set to NULL,,,null,The first call should have priv set to NULL and (after setting any cipher parameters) it should be called again with EVP_OpenInit_APIParam_2 set to NULL,It is possible to call EVP_OpenInit() twice in the same way as EVP_DecryptInit(). The first call should have priv set to NULL and (after setting any cipher parameters) it should be called again with EVP_OpenInit_APIParam_2 set to NULL.
2,2,session ids must be unique,,,null,", session ids must be unique","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
2,2,It is not recommended to change the id_len for SSLv2 sessions,,,null,It is not recommended to change the id_len for SSLv2 sessions,"If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00. It is not recommended to change the id_len for SSLv2 sessions. The callback can use the SSL_get_version(3) function to check, whether the session is of type SSLv2."
2,2,the EVP_PKEY_encrypt_APIParam_3 should contain the length of the out buffer,,,"If out is not NULL , before the call","If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen","The EVP_PKEY_decrypt() function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1. The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen."
2,2,the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit,,,null,The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len. The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len. The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit.
2,2,it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions,,,If the application can not guarantee uniqueness,"If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
2,2,This flag must be used together with SSL_VERIFY_PEER,,,null,This flag must be used together with SSL_VERIFY_PEER,"Server mode: if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a ""handshake failure"" alert. This flag must be used together with SSL_VERIFY_PEER."
2,2,bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 must be a power of 2,,,null,bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 must be a power of 2,"bn_mul_recursive(bn_mul_normal_APIParam_1 mul_add_APIParam_1 bn_mul_low_normal_APIParam_1 bn_sqr_comba4_APIParam_1 mul_APIParam_1 bn_mul_recursive_APIParam_1 bn_sqr_recursive_APIParam_1 bn_mul_comba4_APIParam_1 bn_mul_comba8_APIParam_1 bn_mul_high_APIParam_1 bn_sqr_comba8_APIParam_1 bn_mul_low_recursive_APIParam_1 bn_sqr_normal_APIParam_1 bn_mul_part_recursive_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1, bn_mul_normal_APIParam_2 mul_add_APIParam_2 bn_mul_low_normal_APIParam_2 sqr_APIParam_3 bn_sqr_comba4_APIParam_2 bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 mul_APIParam_2 bn_print_APIParam_1 bn_cmp_words_APIParam_1 bn_check_top_APIParam_1 bn_mul_recursive_APIParam_2 bn_set_max_APIParam_1 bn_sqr_recursive_APIParam_2 bn_expand_APIParam_1 bn_mul_comba4_APIParam_2 bn_expand2_APIParam_1 bn_mul_comba8_APIParam_2 bn_mul_high_APIParam_2 bn_sqr_comba8_APIParam_2 bn_mul_low_recursive_APIParam_2 bn_sqr_normal_APIParam_2 bn_mul_part_recursive_APIParam_2 bn_set_low_APIParam_2 bn_set_high_APIParam_2, bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3, bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3, dna, dnb, bn_mul_normal_APIParam_3 bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_mul_add_words_APIParam_3 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_mul_words_APIParam_3 bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 bn_sqr_words_APIParam_3 bn_expand_APIParam_2 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3) operates on the word arrays bn_mul_normal_APIParam_2 mul_add_APIParam_2 bn_mul_low_normal_APIParam_2 sqr_APIParam_3 bn_sqr_comba4_APIParam_2 bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 mul_APIParam_2 bn_print_APIParam_1 bn_cmp_words_APIParam_1 bn_check_top_APIParam_1 bn_mul_recursive_APIParam_2 bn_set_max_APIParam_1 bn_sqr_recursive_APIParam_2 bn_expand_APIParam_1 bn_mul_comba4_APIParam_2 bn_expand2_APIParam_1 bn_mul_comba8_APIParam_2 bn_mul_high_APIParam_2 bn_sqr_comba8_APIParam_2 bn_mul_low_recursive_APIParam_2 bn_sqr_normal_APIParam_2 bn_mul_part_recursive_APIParam_2 bn_set_low_APIParam_2 bn_set_high_APIParam_2 and bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 of length bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3+dna and bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3+dnb (dna and dnb are currently allowed to be 0 or negative) and the 2*bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 word arrays bn_mul_normal_APIParam_1 mul_add_APIParam_1 bn_mul_low_normal_APIParam_1 bn_sqr_comba4_APIParam_1 mul_APIParam_1 bn_mul_recursive_APIParam_1 bn_sqr_recursive_APIParam_1 bn_mul_comba4_APIParam_1 bn_mul_comba8_APIParam_1 bn_mul_high_APIParam_1 bn_sqr_comba8_APIParam_1 bn_mul_low_recursive_APIParam_1 bn_sqr_normal_APIParam_1 bn_mul_part_recursive_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 and bn_mul_normal_APIParam_3 bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_mul_add_words_APIParam_3 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_mul_words_APIParam_3 bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 bn_sqr_words_APIParam_3 bn_expand_APIParam_2 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3. bn_mul_recursive_APIParam_4 bn_sqr_recursive_APIParam_3 must be a power of 2. It computes bn_mul_normal_APIParam_2 mul_add_APIParam_2 bn_mul_low_normal_APIParam_2 sqr_APIParam_3 bn_sqr_comba4_APIParam_2 bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 mul_APIParam_2 bn_print_APIParam_1 bn_cmp_words_APIParam_1 bn_check_top_APIParam_1 bn_mul_recursive_APIParam_2 bn_set_max_APIParam_1 bn_sqr_recursive_APIParam_2 bn_expand_APIParam_1 bn_mul_comba4_APIParam_2 bn_expand2_APIParam_1 bn_mul_comba8_APIParam_2 bn_mul_high_APIParam_2 bn_sqr_comba8_APIParam_2 bn_mul_low_recursive_APIParam_2 bn_sqr_normal_APIParam_2 bn_mul_part_recursive_APIParam_2 bn_set_low_APIParam_2 bn_set_high_APIParam_2*bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 and places the result in bn_mul_normal_APIParam_1 mul_add_APIParam_1 bn_mul_low_normal_APIParam_1 bn_sqr_comba4_APIParam_1 mul_APIParam_1 bn_mul_recursive_APIParam_1 bn_sqr_recursive_APIParam_1 bn_mul_comba4_APIParam_1 bn_mul_comba8_APIParam_1 bn_mul_high_APIParam_1 bn_sqr_comba8_APIParam_1 bn_mul_low_recursive_APIParam_1 bn_sqr_normal_APIParam_1 bn_mul_part_recursive_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1."
2,2,"A mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4 can be either 16 , 32 or 64 bits in size , depending on the ` number of bits ' specified in openssl/bn",,,null,"A mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4 can be either 16, 32 or 64 bits in size, depending on the 'number of bits' (BITS2) specified in openssl/bn.h","The integer value is stored in bn_dump_APIParam_1 bn_div_words_APIParam_3, a malloc()ed array of words (mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4), least significant word first. A mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4 can be either 16, 32 or 64 bits in size, depending on the 'number of bits' (BITS2) specified in openssl/bn.h."
2,2,"The SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 must be in protocol-list format , described below",,,null,"The SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 must be in protocol-list format, described below","SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() are used by the client to set the list of protocols available to be negotiated. The SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 must be in protocol-list format, described below. The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len."
2,2,"The ALPN select callback SSL_CTX_set_alpn_select_cb_APIParam_2, must return one of SSL_TLSEXT_ERR_OK, SSL_TLSEXT_ERR_ALERT_FATAL or SSL_TLSEXT_ERR_NOACK",,,null,"The ALPN select callback cb, must return one of the following:","The ALPN select callback cb, must return one of the following:"
2,2,It is the job of the cert_cb to store information about the state of the last call,,,if required to continue,"It is the job of the cert_cb() to store information about the state of the last call, if required to continue","cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
2,2,This also means that OPENSSL_instrument_bus2_APIParam_1 and OPENSSL_instrument_bus_APIParam_1 should be zeroed upon invocation,,,null,This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values),"It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations. The subroutines in question instrument these references for purposes of gathering entropy for random number generator. In order to make it bus-bound a 'flush cache line' instruction is used between probes. In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems. This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values)."
2,2,"The value of the SSL_select_next_proto_APIParam_1 , SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0 , inlen vector",,,null,"The value of the SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen vector","cb is the application defined callback. The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen parameters are a vector in protocol-list format. The value of the SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen vector. The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb()."
2,2,"For `` new '' style callbacks a BN_GENCB structure should be initialised with a call to BN_GENCB_set , where gencb is a BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 , callback is of type int and cb_arg is a void",,,null,"For ""new"" style callbacks a BN_GENCB structure should be initialised with a call to BN_GENCB_set, where gencb is a BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1, callback is of type int (*callback)(int, int, BN_GENCB *) and cb_arg is a void *","For ""new"" style callbacks a BN_GENCB structure should be initialised with a call to BN_GENCB_set, where gencb is a BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1, callback is of type int (*callback)(int, int, BN_GENCB *) and cb_arg is a void *. ""Old"" style callbacks are the same except they are initialised with a call to BN_GENCB_set_old and callback is of type void (*callback)(int, int, void *)."
2,2,Otherwise it should be any other value,,,null,Otherwise it should be any other value,"For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
2,2,The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long,,,null,The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long,"For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
2,2,The CMS_STREAM flag must be included in the corresponding flags parameter of the BIO_new_CMS_APIParam_2 creation function,,,null,The CMS_STREAM flag must be included in the corresponding flags parameter of the BIO_new_CMS_APIParam_2 creation function,The CMS_STREAM flag must be included in the corresponding flags parameter of the BIO_new_CMS_APIParam_2 creation function.
2,2,it should not be freed or modified in any way,,,null,", it should not be freed or modified in any way","ASN1_STRING_data() returns an internal pointer to the data of ASN1_STRING_data_APIParam_1. Since this is an internal pointer, it should not be freed or modified in any way."
2,2,An application specific label should be provided in the location pointed to by label and should be llen bytes long,,,null,An application specific label should be provided in the location pointed to by label and should be llen bytes long,"An application specific label should be provided in the location pointed to by label and should be llen bytes long. Typically this will be a value from the IANA Exporter Label Registry ( https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels ). Alternatively labels beginning with ""EXPERIMENTAL"" are permitted by the standard to be used without registration."
2,2,"Before a DES key can be used , a DES key must be converted into the architecture dependent DES_key_schedule via the DES_set_key_checked or DES_set_key_unchecked function",,,null,"Before a DES key can be used, a DES key must be converted into the architecture dependent DES_key_schedule via the DES_set_key_checked() or DES_set_key_unchecked() function","Before a DES key can be used, a DES key must be converted into the architecture dependent DES_key_schedule via the DES_set_key_checked() or DES_set_key_unchecked() function."
2,2,the ivec variable is changed and the new changed value needs to be passed to the next call to this function,,,null,Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function,"DES_ofb_encrypt() encrypts using output feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
2,2,"The function EC_GROUP_get_trinomial_basis_APIName must only be called where f is of the trinomial form, and returns the value of EC_GROUP_get_trinomial_basis_APIParam_2",,,null,"The function EC_GROUP_get_trinomial_basis must only be called where f(x) is of the trinomial form, and returns the value of EC_GROUP_get_trinomial_basis_APIParam_2","The function EC_GROUP_get_basis_type returns a NID identifying whether a trinomial or pentanomial is in use for the field. The function EC_GROUP_get_trinomial_basis must only be called where f(x) is of the trinomial form, and returns the value of EC_GROUP_get_trinomial_basis_APIParam_2. Similary the function EC_GROUP_get_pentanomial_basis must only be called where f(x) is of the pentanomial form, and returns the values of EC_GROUP_get_pentanomial_basis_APIParam_2, k2 and k3 respectively."
2,2,"Similary the function EC_GROUP_get_pentanomial_basis_APIName must only be called where f is of the pentanomial form, and returns the values of EC_GROUP_get_pentanomial_basis_APIParam_2, k2 and k3 respectively",,,null,"Similary the function EC_GROUP_get_pentanomial_basis must only be called where f(x) is of the pentanomial form, and returns the values of EC_GROUP_get_pentanomial_basis_APIParam_2, k2 and k3 respectively","The function EC_GROUP_get_basis_type returns a NID identifying whether a trinomial or pentanomial is in use for the field. The function EC_GROUP_get_trinomial_basis must only be called where f(x) is of the trinomial form, and returns the value of EC_GROUP_get_trinomial_basis_APIParam_2. Similary the function EC_GROUP_get_pentanomial_basis must only be called where f(x) is of the pentanomial form, and returns the values of EC_GROUP_get_pentanomial_basis_APIParam_2, k2 and k3 respectively."
2,2,rsa - > n must not be NULL,,,null,rsa->n must not be NULL,rsa->n must not be NULL.
2,2,"a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned",1,,If it wants to set a certificate,"If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned","client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
2,2,any FILE pointers or BIOs should be opened in binary mode,,,null,Therefore any FILE pointers or BIOs should be opened in binary mode,The encoded data is in binary form and may contain embedded zeroes. Therefore any FILE pointers or BIOs should be opened in binary mode. Functions such as strlen() will not return the correct length of the encoded structure.
2,2,each application must set its own session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 which is used to distinguish the contexts and is stored in exported sessions,,,null,Therefore each application must set its own session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 which is used to distinguish the contexts and is stored in exported sessions,"Sessions are generated within a certain context. When exporting/importing sessions with i2d_SSL_SESSION/d2i_SSL_SESSION it would be possible, to re-import a session generated from another context (eg another application), which might lead to malfunctions. Therefore each application must set its own session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 which is used to distinguish the contexts and is stored in exported sessions. The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length, it is therefore possible to use eg the name of the application and/or the hostname and/or service name ..."
2,2,dsa - > q must not be NULL,,,null,dsa->q must not be NULL,dsa->q must not be NULL.
2,2,"For lh _ <type> _ doall and lh _ <type> _ doall_arg , function pointer casting should be avoided in the callbacks - instead use the declare/implement macros to create type-checked wrappers that cast variables prior to calling your type-specific callbacks",,,null,"For lh_<type>_doall() and lh_<type>_doall_arg(), function pointer casting should be avoided in the callbacks (see NOTE) - instead use the declare/implement macros to create type-checked wrappers that cast variables prior to calling your type-specific callbacks","lh_<type>_doall() will, for every entry in the hash table, call func with the data item as its parameter. For lh_<type>_doall() and lh_<type>_doall_arg(), function pointer casting should be avoided in the callbacks (see NOTE) - instead use the declare/implement macros to create type-checked wrappers that cast variables prior to calling your type-specific callbacks. An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated:"
2,2,The actual X509 structure passed to i2d_X509 must be a valid populated i2d_X509_APIParam_1 structure,,,null,The actual X509 structure passed to i2d_X509() must be a valid populated i2d_X509_APIParam_1 structure The actual X509 structure can not simply be fed with an empty structure such as that returned by X509_new(),The actual X509 structure passed to i2d_X509() must be a valid populated i2d_X509_APIParam_1 structure The actual X509 structure can not simply be fed with an empty structure such as that returned by X509_new().
2,2,The actual X509 structure can not simply be fed with an empty structure such as that returned by X509_new,,,null,The actual X509 structure passed to i2d_X509() must be a valid populated i2d_X509_APIParam_1 structure The actual X509 structure can not simply be fed with an empty structure such as that returned by X509_new(),The actual X509 structure passed to i2d_X509() must be a valid populated i2d_X509_APIParam_1 structure The actual X509 structure can not simply be fed with an empty structure such as that returned by X509_new().
2,2,Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack,,,null,Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
2,2,Normally the current time should be between these two values,,,null,Normally the current time should be between these two values,"An OCSP response for a certificate contains thisUpdate and nextUpdate fields. Normally the current time should be between these two values. To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity(). Some responders do not set the nextUpdate field, this would otherwise mean an ancient response would be considered valid: the maxsec parameter to OCSP_check_validity() can be used to limit the permitted age of responses."
2,2,Applications should typically use SSL_CTX_set_options in combination with the SSL_OP_NO_SSLv3 flag to disable negotiation of SSLv3 via the above version-flexible SSL/TLS methods,,,null,Applications should typically use SSL_CTX_set_options(3) in combination with the SSL_OP_NO_SSLv3 flag to disable negotiation of SSLv3 via the above version-flexible SSL/TLS methods,"The SSLv2 and SSLv3 protocols are deprecated and should generally not be used. Applications should typically use SSL_CTX_set_options(3) in combination with the SSL_OP_NO_SSLv3 flag to disable negotiation of SSLv3 via the above version-flexible SSL/TLS methods. The SSL_OP_NO_SSLv2 option is set by default, and would need to be cleared via SSL_CTX_clear_options(3) in order to enable negotiation of SSLv2."
2,2,The cipher IV must be set,,,when this call is made,The cipher IV (if any) must be set when this call is made,"EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example). This function may fail if the cipher does not have any ASN1 support."
2,1,EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size bytes in size,,0,null,EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size(pkey) bytes in size.,"EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2. EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size(pkey) bytes in size. EVP_SignFinal_APIParam_3 is an OUT paramter, and not used as an IN parameter. The number of bytes of data written (ie the length of the signature) will be written to the integer at EVP_SignFinal_APIParam_3, at most EVP_PKEY_size(pkey) bytes will be written."
2,1,Base64 BIOs do not support BIO_gets_APIName or BIO_puts_APIName,,,null,Base64 BIOs do not support BIO_gets_APIName or BIO_puts_APIName.,Base64 BIOs do not support BIO_gets_APIName or BIO_puts_APIName.
2,1,"OBJ_txt2nid_APIParam_1 can be a long name , a short name or the numerical representation of an object",,,null,"OBJ_txt2nid_APIParam_1 can be a long name, a short name or the numerical representation of an object.","OBJ_txt2nid_APIName returns NID corresponding to text string <s>. OBJ_txt2nid_APIParam_1 can be a long name, a short name or the numerical representation of an object."
2,1,EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function,,,null,EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function.,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3. EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function. EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName. If EVP_DigestInit_ex_APIParam_3 is NULL then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used.
2,1,The parameters generated by DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName are not to be used in signature schemes,,1,null,The parameters generated by DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName are not to be used in signature schemes.,The parameters generated by DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName are not to be used in signature schemes.
2,1,The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration,,0,null,The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration (ciphers compiled in).,"The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration (ciphers compiled in). Thus no syntax checking takes place. Items that are not recognized, because the corresponding ciphers are not compiled in or because the corresponding ciphers are mistyped, are simply ignored. Failure is only flagged if no ciphers could be collected at all."
2,1,Using 16 bytes is ok but it should be ok to use 32,,,null,Using 16 bytes is ok but it should be ok to use 32.,"Netscape-Commerce/1.12, when talking SSLv2, accepts a 32 byte challenge but then appears to only use 16 bytes when generating the encryption keys. Using 16 bytes is ok but it should be ok to use 32. According to the SSLv3 spec, one should use 32 bytes for the challenge when operating in SSLv2/v3 compatibility mode, but as mentioned above, this breaks this server so 16 bytes is the way to go."
2,1,"HMAC_Final_APIName places the message authentication code in HMAC_Final_APIParam_2 , which must have space for the hash function output",,1,null,"HMAC_Final_APIName places the message authentication code in HMAC_Final_APIParam_2, which must have space for the hash function output.","HMAC_Final_APIName places the message authentication code in HMAC_Final_APIParam_2, which must have space for the hash function output."
2,1,so SSL_get_shared_curve_APIParam_2 is normally set to zero,,0,null,so SSL_get_shared_curve_APIParam_2 is normally set to zero,"SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1. If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero. Other than for diagnostic purposes, most applications will only be interested in the first shared curve so SSL_get_shared_curve_APIParam_2 is normally set to zero. If the value SSL_get_shared_curve_APIParam_2 is out of range, NID_undef is returned."
2,-1,Any of the following flags can be passed in the PKCS7_sign_add_signer_APIParam_5 parameter,,,null,Any of the following flags (ored together) can be passed in the PKCS7_sign_add_signer_APIParam_5 parameter.,Any of the following flags (ored together) can be passed in the PKCS7_sign_add_signer_APIParam_5 parameter.
2,-1,The following strings can occur for SSL_alert_type_string_APIName or SSL_alert_type_string_long_APIName,,,null,The following strings can occur for SSL_alert_type_string_APIName or SSL_alert_type_string_long_APIName:,The following strings can occur for SSL_alert_type_string_APIName or SSL_alert_type_string_long_APIName:
2,-1,The following flags are supported,,,null,The following flags are supported:,"EVP_PKEY_meth_new_APIName creates and returns a new EVP_PKEY_meth_new_APIParam_0 object, and associates the given EVP_PKEY_meth_new_APIParam_1 and EVP_PKEY_meth_new_APIParam_2. The following flags are supported:"
2,-1,Not all BIOs support these calls,,,null,Not all BIOs support these calls.,"BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers. Not all BIOs support these calls. BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName."
2,-1,The following flags can be passed in the PKCS7_decrypt_APIParam_5 parameter,,,null,The following flags can be passed in the PKCS7_decrypt_APIParam_5 parameter.,The following flags can be passed in the PKCS7_decrypt_APIParam_5 parameter.
2,-1,It can not be shared between threads,,,null,It cannot be shared between threads.,It cannot be shared between threads.
2,-1,The following SSLeay_version_APIParam_1 values are supported,,,null,The following SSLeay_version_APIParam_1 values are supported:,The following SSLeay_version_APIParam_1 values are supported:
2,-1,SSL_CTX_new_APIParam_1 can be of the following types,,0,null,SSL_CTX_new_APIParam_1 can be of the following types:,"The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method. The methods exist in a generic type (for client and server use), a server only type, and a client only type. SSL_CTX_new_APIParam_1 can be of the following types:"
2,-1,The following flags can be passed in the SMIME_write_CMS_APIParam_4 parameter,,,null,The following flags can be passed in the SMIME_write_CMS_APIParam_4 parameter.,The following flags can be passed in the SMIME_write_CMS_APIParam_4 parameter.
2,-1,"As of OpenSSL 0.9.8 q and 1.0.0 c , this option has no effect",,,null,"As of OpenSSL 0.9.8q and 1.0.0c, this option has no effect.","As of OpenSSL 0.9.8q and 1.0.0c, this option has no effect."
2,-1,Following bits are significant,,,null,Following bits are significant:,The vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input. Following bits are significant:
2,-1,The i2d_DSAPublicKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSAPublicKey_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSA_SIG_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 i2d_DSAparams_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 structure passed to the private key encoding functions should have all the private key components present,,,null,The i2d_DSAPublicKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSAPublicKey_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSA_SIG_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 i2d_DSAparams_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 structure passed to the private key encoding functions should have all the private key components present.,The i2d_DSAPublicKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSAPublicKey_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSA_SIG_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 i2d_DSAparams_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 structure passed to the private key encoding functions should have all the private key components present.
2,-1,point_conversion_form_t is an enum defined as follows,,,null,point_conversion_form_t is an enum defined as follows:,The point_coversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9.62 (ECDSA). point_conversion_form_t is an enum defined as follows:
2,-1,"As such , this function can not be used with any arbitrary RSA key object",,,null,"As such , this function can not be used with any arbitrary RSA key object ,","As such, this function can not be used with any arbitrary RSA key object, even if this function is otherwise fit for regular RSA operation. See NOTES for more information."
2,-1,"The protocol data in server , server_len and client , client_len must be in the protocol-list format described below",,,null,"The protocol data in server, server_len and client, client_len must be in the protocol-list format described below","SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
2,2,"mode can be combined from 1,2,4,8",,,null,"mode can be combined from 1,2,4,8.","CRYPTO_lock_APIName is used to lock and unlock the locks. mode is a bitfield describing what should be done with the lock. n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName. mode can be combined from 1,2,4,8. These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):"
2,-1,The following flags can be passed in the CMS_uncompress_APIParam_4 parameter,,,null,The following flags can be passed in the CMS_uncompress_APIParam_4 parameter.,The following flags can be passed in the CMS_uncompress_APIParam_4 parameter.
2,-1,The error strings will have the following format,,,null,The error strings will have the following format:,The error strings will have the following format:
2,-1,The following flags can be passed in the SMIME_write_PKCS7_APIParam_4 parameter,,,null,The following flags can be passed in the SMIME_write_PKCS7_APIParam_4 parameter.,The following flags can be passed in the SMIME_write_PKCS7_APIParam_4 parameter.
2,2,Only a single delta can be used and constructed CRLs are not maintained,,,null,Only a single delta can be used and (partly due to limitations of X509_STORE) constructed CRLs are not maintained,Delta CRL checking is currently primitive. Only a single delta can be used and (partly due to limitations of X509_STORE) constructed CRLs are not maintained.
2,2,The maximum IV length is EVP_MAX_IV_LENGTH bytes defined in evp.h,,,null,The maximum IV length is EVP_MAX_IV_LENGTH bytes defined in evp.h,The iv length is the length of the IV of the corresponding cipher. The maximum IV length is EVP_MAX_IV_LENGTH bytes defined in evp.h.
2,2,"MIME headers for type text/plain are added to the content , this only makes sense",,,"If the PKCS7_TEXT flag is set,  if PKCS7_DETACHED is also set","If the PKCS7_TEXT flag is set, MIME headers for type text/plain are added to the content, this only makes sense if PKCS7_DETACHED is also set","If the PKCS7_TEXT flag is set, MIME headers for type text/plain are added to the content, this only makes sense if PKCS7_DETACHED is also set."
2,2,"cleartext signing will be used , this option only makes sense for signedData where PKCS7_DETACHED is also set ",1,,"If PKCS7_DETACHED is set, when PKCS7_sign is also called","If PKCS7_DETACHED is set ,then cleartext signing will be used, this option only makes sense for signedData where PKCS7_DETACHED is also set when PKCS7_sign() is also called","If PKCS7_DETACHED is set ,then cleartext signing will be used, this option only makes sense for signedData where PKCS7_DETACHED is also set when PKCS7_sign() is also called."
2,2,Currently the only supported type is TLSEXT_NAMETYPE_host_name,,,null,Currently the only supported type (defined in RFC3546) is TLSEXT_NAMETYPE_host_name,SSL_get_servername_type() returns the servername type or -1 if no servername is present. Currently the only supported type (defined in RFC3546) is TLSEXT_NAMETYPE_host_name.
2,-1,Two special values are supported,,,null,Two special values are supported: -1 sets the salt length to the digest length,The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro sets the RSA PSS salt length to EVP_PKEY_CTX_set_rsa_pss_saltlen_APIParam_2 as its name implies it is only supported for PSS padding. Two special values are supported: -1 sets the salt length to the digest length. When signing -2 sets the salt length to the maximum permissible value. When verifying -2 causes the salt length to be automatically determined based on the PSS block structure. If this macro is not called a salt length value of -2 is used by default.
2,2,"It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls , all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL",,,null,"It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL","EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
2,2,setting SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 to NULL is not thread safe,,,null,Note: setting SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 to NULL is not thread safe,"SHA1() computes the SHA-1 message digest of the SHA1_APIParam_2 bytes at SHA1_APIParam_1 and places it in SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 (which must have space for SHA_DIGEST_LENGTH == 20 bytes of output). If SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 is NULL, the digest is placed in a static array. Note: setting SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 to NULL is not thread safe."
2,2,Currently the only supported type is TLSEXT_STATUSTYPE_ocsp,,,null,Currently the only supported type is TLSEXT_STATUSTYPE_ocsp,A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
2,2,"For finer control of the output format the certs , signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set",,,null,"For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set","The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes. For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set. Then one or more signers can be added using the function CMS_sign_add1_signer(), non default digests can be used and custom attributes added. CMS_final() must then be called to finalize the structure if streaming is not enabled."
2,2,"Ensure the output buffer contains 65 bytes of storage for each block , plus an additional byte for a NUL terminator",,,null,"Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator","EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
2,2,the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1 = 0,,,null,"Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0","The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level."
2,2,the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0,,,When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0,"When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0, the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0","dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated. top is the number of words being used, so for a value of 4, bn.d[0]=4 and bn.top=1. neg is 1 if the number is negative. When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0, the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0."
2,2,"The rate is 2 ^ -80 starting at 308 bits , 2 ^ -112 at 852 bits , 2 ^ -128 at 1080 bits , 2 ^ -192 at 3747 bits and 2 ^ -256 at 6394 bits",,,null,"The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits","Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations. If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input. The error rate depends on the size of the prime and goes down for bigger primes. The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits."
2,2,"Applications can access , modify or create the embedded content in a CMS_get0_type_APIParam_1 CMS_set1_eContentType_APIParam_1 CMS_get0_content_APIParam_1 CMS_get0_eContentType_APIParam_1 structure using this function",,,null,"Applications can access, modify or create the embedded content in a CMS_get0_type_APIParam_1 CMS_set1_eContentType_APIParam_1 CMS_get0_content_APIParam_1 CMS_get0_eContentType_APIParam_1 structure using this function","*pconf could be NULL if there is no embedded content. Applications can access, modify or create the embedded content in a CMS_get0_type_APIParam_1 CMS_set1_eContentType_APIParam_1 CMS_get0_content_APIParam_1 CMS_get0_eContentType_APIParam_1 structure using this function. Applications usually will not need to modify the embedded content as it is normally set by higher level functions."
2,2,The output is always an integral multiple of eight bytes,,,null,The output is always an integral multiple of eight bytes,"DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES. If the encrypt argument is non-zero, the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument, using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, and initialization vector provided by the ivec argument. If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled. The output is always an integral multiple of eight bytes."
2,2,So the key is sort of 24 bytes,,,null,So the key is sort of 24 bytes,"DES_xcbc_encrypt() is RSA's DESX mode of DES. It uses inw and outw to 'whiten' the encryption. inw and outw are secret (unlike the iv) and are as such, part of the key. So the key is sort of 24 bytes. This is much better than CBC DES."
2,2,The maximum length of the SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 is limited to SSL_MAX_SSL_SESSION_ID_LENGTH,,,null,The maximum length of the SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 is limited to SSL_MAX_SSL_SESSION_ID_LENGTH,The maximum length of the SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 is limited to SSL_MAX_SSL_SESSION_ID_LENGTH.
2,2,The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte,,,null,The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte,"DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
2,1,A RSA cipher can only be chosen,,1,when a RSA certificate is available,"A RSA cipher can only be chosen, when a RSA certificate is available.","A RSA cipher can only be chosen, when a RSA certificate is available. RSA export ciphers with a keylength of 512 bits for the RSA key require a temporary 512 bit RSA key, as typically the supplied key has a length of 1024 bit (see SSL_CTX_set_tmp_rsa_callback_APIName ). RSA ciphers using DHE need a certificate and key and additional DH-parameters (see SSL_CTX_set_tmp_dh_callback_APIName )."
2,1,This list is not influenced by the contents of SSL_CTX_load_verify_locations_APIParam_2 or CApath and must explicitly be set using the SSL_CTX_set_client_CA_list family of functions,,,null,This list is not influenced by the contents of SSL_CTX_load_verify_locations_APIParam_2 or CApath and must explicitly be set using the SSL_CTX_set_client_CA_list(3) family of functions,"In server mode, when requesting a client certificate, the server must send the list of CAs of which it will accept client certificates. This list is not influenced by the contents of SSL_CTX_load_verify_locations_APIParam_2 or CApath and must explicitly be set using the SSL_CTX_set_client_CA_list(3) family of functions."
0,1,The OCSP_single_get0_status_APIParam_2 and revtime fields are only set,,,if the status is V_OCSP_CERTSTATUS_REVOKED,The OCSP_single_get0_status_APIParam_2 and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED,"OCSP_resp_find_status() searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2. If it is successful the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd. The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN. The OCSP_single_get0_status_APIParam_2 and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED. If set the OCSP_single_get0_status_APIParam_2 field will be set to the revocation reason which will be one of OCSP_REVOKED_STATUS_NOSTATUS, OCSP_REVOKED_STATUS_UNSPECIFIED, OCSP_REVOKED_STATUS_KEYCOMPROMISE, OCSP_REVOKED_STATUS_CACOMPROMISE, OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, OCSP_REVOKED_STATUS_SUPERSEDED, OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, OCSP_REVOKED_STATUS_CERTIFICATEHOLD or OCSP_REVOKED_STATUS_REMOVEFROMCRL."
2,9,Adds a padding extension to ensure the ClientHello size is never between 256 and 511 bytes in length,,,null,Adds a padding extension to ensure the ClientHello size is never between 256 and 511 bytes in length.,Adds a padding extension to ensure the ClientHello size is never between 256 and 511 bytes in length. This is needed as a workaround for some implementations.
2,0,only the numerical form is acceptable,,,If OBJ_txt2obj_APIParam_2 is 1,"If OBJ_txt2obj_APIParam_2 is 1 ,only the numerical form is acceptable.","OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure. If OBJ_txt2obj_APIParam_2 is 0 ,then long names and short names will be interpreted as well as numerical forms. If OBJ_txt2obj_APIParam_2 is 1 ,only the numerical form is acceptable."
2,0,RSA_private_decrypt_APIParam_3 must point to a memory section large enough to hold the decrypted data,,,null,RSA_private_decrypt_APIParam_3 must point to a memory section large enough to hold the decrypted data (which is smaller than RSA_size(RSA_private_decrypt_APIParam_4)).,RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3. RSA_private_decrypt_APIParam_3 must point to a memory section large enough to hold the decrypted data (which is smaller than RSA_size(RSA_private_decrypt_APIParam_4)). RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data.
2,0,RSA_private_decrypt_APIParam_5 RSA_public_encrypt_APIParam_5 denotes one of the following modes,,,null,RSA_private_decrypt_APIParam_5 RSA_public_encrypt_APIParam_5 denotes one of the following modes:,RSA_private_decrypt_APIParam_5 RSA_public_encrypt_APIParam_5 denotes one of the following modes:
2,0,the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName,1,,null,"If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName .","SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName . If the peer did not present a certificate, NULL is returned."
2,0,At least one of these flags must be set,,,null,At least one of these flags must be set.,recognise options intended for command line or configuration file use. At least one of these flags must be set.
2,0,The EVP_MD_CTX_init_APIParam_1 EVP_MD_size_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_block_size_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_pkey_type_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_MD_type_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 interface to message digests should almost always be used in preference to the low level interfaces,,,null,The EVP_MD_CTX_init_APIParam_1 EVP_MD_size_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_block_size_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_pkey_type_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_MD_type_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 interface to message digests should almost always be used in preference to the low level interfaces.,The EVP_MD_CTX_init_APIParam_1 EVP_MD_size_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_block_size_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_pkey_type_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_MD_type_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 interface to message digests should almost always be used in preference to the low level interfaces. This is because the code then becomes transparent to the digest used and much more flexible.
2,0,The SSL_SESSION object must be transformed into a binary ASN1 representation,,,null," , The SSL_SESSION object must be transformed into a binary ASN1 representation .","The SSL_SESSION object is built from several malloc_APINameed parts, The SSL_SESSION object can therefore not be moved, copied or stored directly. In order to store session data on disk or into a database, The SSL_SESSION object must be transformed into a binary ASN1 representation."
2,0,BIO_get_fd_APIParam_2 should be of type,,,If BIO_get_fd_APIParam_2 is not NULL,If BIO_get_fd_APIParam_2 is not NULL BIO_get_fd_APIParam_2 should be of type (int *).,"BIO_get_fd_APIName places the socket in BIO_get_fd_APIParam_2 if BIO_get_fd_APIParam_2 is not NULL, it also returns the socket. If BIO_get_fd_APIParam_2 is not NULL BIO_get_fd_APIParam_2 should be of type (int *)."
2,0,Error conditions are not handled and must be treated using SSL_get_error_APIName,,,null,Error conditions are not handled and must be treated using SSL_get_error_APIName .,"SSL_want_APIName examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error_APIName . Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under non-blocking I/O. Error conditions are not handled and must be treated using SSL_get_error_APIName ."
2,0,the pointer must not be used any longer,,,If the corresponding session is freed,"If the corresponding session is freed, the pointer must not be used any longer.","The reference count of the STACK_OF(X509) object is not incremented. If the corresponding session is freed, the pointer must not be used any longer."
2,0,The algorithm to use is specified in the PEM_write_bio_PKCS8PrivateKey_nid_APIParam_3 PEM_write_PKCS8PrivateKey_nid_APIParam_3 parameter and should be the NID of the corresponding OBJECT IDENTIFIER,,,null,The algorithm to use is specified in the PEM_write_bio_PKCS8PrivateKey_nid_APIParam_3 PEM_write_PKCS8PrivateKey_nid_APIParam_3 parameter and should be the NID of the corresponding OBJECT IDENTIFIER (see NOTES section).,PEM_write_bio_PKCS8PrivateKey_nid_APIName and PEM_write_PKCS8PrivateKey_nid_APIName also write out a private key as a PKCS#8 EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12 encryption algorithms instead. The algorithm to use is specified in the PEM_write_bio_PKCS8PrivateKey_nid_APIParam_3 PEM_write_PKCS8PrivateKey_nid_APIParam_3 parameter and should be the NID of the corresponding OBJECT IDENTIFIER (see NOTES section).
2,0,"A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument , and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument",,,null,"A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument.","A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName. A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument."
2,0,"In previous releases they also cleaned up the EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 , but this is no longer done and EVP_CIPHER_CTX_clean_APIName must be called to free any context resources",,,null,"In previous releases they also cleaned up the EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1, but this is no longer done and EVP_CIPHER_CTX_clean_APIName must be called to free any context resources.","EVP_EncryptFinal_APIName, EVP_DecryptFinal_APIName and EVP_CipherFinal_APIName are identical to EVP_EncryptFinal_ex_APIName, EVP_DecryptFinal_ex_APIName and EVP_CipherFinal_ex_APIName. In previous releases they also cleaned up the EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1, but this is no longer done and EVP_CIPHER_CTX_clean_APIName must be called to free any context resources."
2,0,struct CRYPTO_dynlock_value has to be defined to contain whatever structure is needed to handle locks,,,null,struct CRYPTO_dynlock_value has to be defined to contain whatever structure is needed to handle locks.,struct CRYPTO_dynlock_value has to be defined to contain whatever structure is needed to handle locks.
2,0,"For special applications it can be necessary to extend the maximum certificate chain size allowed to be sent by the peer , see eg the work on `` Internet X. 509 Public Key Infrastructure Proxy Certificate Profile '' and `` TLS Delegation Protocol '' at http",,,null,"For special applications it can be necessary to extend the maximum certificate chain size allowed to be sent by the peer, see eg the work on ""Internet X.509 Public Key Infrastructure Proxy Certificate Profile"" and ""TLS Delegation Protocol"" at http://www.ietf.org/ and http://www.globus.org/ .","For special applications it can be necessary to extend the maximum certificate chain size allowed to be sent by the peer, see eg the work on ""Internet X.509 Public Key Infrastructure Proxy Certificate Profile"" and ""TLS Delegation Protocol"" at http://www.ietf.org/ and http://www.globus.org/ ."
2,0,"CMS_RecipientInfo_ktri_cert_cmp_APIName compares the certificate CMS_RecipientInfo_ktri_cert_cmp_APIParam_2 against the CMS_RecipientInfo structure CMS_RecipientInfo_ktri_cert_cmp_APIParam_1 , which must be of type CMS_RECIPINFO_TRANS",,,null,"CMS_RecipientInfo_ktri_cert_cmp_APIName compares the certificate CMS_RecipientInfo_ktri_cert_cmp_APIParam_2 against the CMS_RecipientInfo structure CMS_RecipientInfo_ktri_cert_cmp_APIParam_1, which must be of type CMS_RECIPINFO_TRANS.","CMS_RecipientInfo_ktri_cert_cmp_APIName compares the certificate CMS_RecipientInfo_ktri_cert_cmp_APIParam_2 against the CMS_RecipientInfo structure CMS_RecipientInfo_ktri_cert_cmp_APIParam_1, which must be of type CMS_RECIPINFO_TRANS. CMS_RecipientInfo_ktri_cert_cmp_APIName returns zero if the comparison is successful and non zero if not."
2,0,ASN1_TIME_set_string_APIName sets ASN1_TIME structure ASN1_TIME_set_string_APIParam_1 to the time represented by string ASN1_TIME_set_string_APIParam_2 which must be in appropriate ASN .1 time format,,,null,ASN1_TIME_set_string_APIName sets ASN1_TIME structure ASN1_TIME_set_string_APIParam_1 to the time represented by string ASN1_TIME_set_string_APIParam_2 which must be in appropriate ASN.1 time format (for example YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ).,ASN1_TIME_set_string_APIName sets ASN1_TIME structure ASN1_TIME_set_string_APIParam_1 to the time represented by string ASN1_TIME_set_string_APIParam_2 which must be in appropriate ASN.1 time format (for example YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ).
2,0,"The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter , which must have associated functions for duplicating , freeing and `` clear_freeing '' the data item",,,null,"The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter, which must have associated functions for duplicating, freeing and ""clear_freeing"" the data item.","EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object. This data is treated as a ""black box"" by the ec library. The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter, which must have associated functions for duplicating, freeing and ""clear_freeing"" the data item. If a subsequent EC_KEY_get_key_method_data call is issued, the functions for duplicating, freeing and ""clear_freeing"" the data item must be provided again, and they must be the same as they were when the data item was inserted."
2,0,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 pointer is used internally by this function so EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should not be modified or free after the call,,,null,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 pointer is used internally by this function so EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should not be modified or free after the call.,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIName macro sets the public exponent value for RSA key generation to EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 currently EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should be an odd integer. The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 pointer is used internally by this function so EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should not be modified or free after the call. If this macro is not called then 65537 is used.
2,0,"As the CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 implies , CMS_add0_cert_APIName adds CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 internally to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 , and CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must not be freed up after the call as opposed to CMS_add1_cert_APIName where CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 must be freed up",,,null,"As the CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 implies, CMS_add0_cert_APIName adds CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 internally to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1, and CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must not be freed up after the call as opposed to CMS_add1_cert_APIName where CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 must be freed up.","As the CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 implies, CMS_add0_cert_APIName adds CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 internally to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1, and CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1 must not be freed up after the call as opposed to CMS_add1_cert_APIName where CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 must be freed up."
2,0,"At the most basic level , each ENGINE pointer is inherently a structural reference - a structural reference is required to use the pointer value at all , as this kind of reference is a guarantee that the structure can not be deallocated until the reference is released",,,null,"At the most basic level, each ENGINE pointer is inherently a structural reference - a structural reference is required to use the pointer value at all, as this kind of reference is a guarantee that the structure can not be deallocated until the reference is released","ENGINE objects have two levels of reference-counting to match the way in which the objects are used. At the most basic level, each ENGINE pointer is inherently a structural reference - a structural reference is required to use the pointer value at all, as this kind of reference is a guarantee that the structure can not be deallocated until the reference is released."
2,0,"Each prompt gets an index number which is returned by the UI_add and UI_dup functions, and has to be used to get the corresponding result with UI_get0_result_APIName",,,null,"Each prompt gets an index number which is returned by the UI_add and UI_dup functions, and has to be used to get the corresponding result with UI_get0_result_APIName.","A UI can contain more than one prompt, which are performed in the given sequence. Each prompt gets an index number which is returned by the UI_add and UI_dup functions, and has to be used to get the corresponding result with UI_get0_result_APIName."
2,0,"The default RAND_set_rand_method_APIParam_1, as set by RAND_set_rand_method_APIName and returned by RAND_get_rand_method_APIName, is only used",1,,"if no ENGINE has been set as the default ""rand"" implementation","The default RAND_set_rand_method_APIParam_1, as set by RAND_set_rand_method_APIName and returned by RAND_get_rand_method_APIName, is only used if no ENGINE has been set as the default ""rand"" implementation.","Since the introduction of the ENGINE API, the recommended way of controlling default implementations is by using the ENGINE API functions. The default RAND_set_rand_method_APIParam_1, as set by RAND_set_rand_method_APIName and returned by RAND_get_rand_method_APIName, is only used if no ENGINE has been set as the default ""rand"" implementation. Hence, these two functions are no longer the recommended way to control defaults."
2,0,this is only of use for multiline format,,,null,"If XN_FLAG_FN_ALIGN is set ,then field names are padded to 20 characters: this is only of use for multiline format","If XN_FLAG_FN_ALIGN is set ,then field names are padded to 20 characters: this is only of use for multiline format."
2,0,The EVP_PKEY_CTX_set_rsa_pss_saltlen macro sets the RSA PSS salt length to EVP_PKEY_CTX_set_rsa_pss_saltlen_APIParam_2 as its name implies it is only supported for PSS padding,,,null,The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro sets the RSA PSS salt length to EVP_PKEY_CTX_set_rsa_pss_saltlen_APIParam_2 as its name implies it is only supported for PSS padding,The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro sets the RSA PSS salt length to EVP_PKEY_CTX_set_rsa_pss_saltlen_APIParam_2 as its name implies it is only supported for PSS padding. Two special values are supported: -1 sets the salt length to the digest length. When signing -2 sets the salt length to the maximum permissible value. When verifying -2 causes the salt length to be automatically determined based on the PSS block structure. If this macro is not called a salt length value of -2 is used by default.
2,1,the content is output in BER format using indefinite length constructuted encoding except in the case of signed data with detached content where the content is absent and DER format is used,,,If streaming is performed,"If streaming is performed, the content is output in BER format using indefinite length constructuted encoding except in the case of signed data with detached content where the content is absent and DER format is used.","If streaming is performed, the content is output in BER format using indefinite length constructuted encoding except in the case of signed data with detached content where the content is absent and DER format is used."
2,1,Legacy applications might implicitly use an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 like this,,,null,Legacy applications might implicitly use an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 like this:,The certificates and CRLs in a store are used internally and should not be freed up until after the associated X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 is freed. Legacy applications might implicitly use an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 like this:
2,1,It is the caller 's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data,,,null,It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data,"EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
2,-1,The following modifying options are available,,,null,The following modifying options are available:,The following modifying options are available:
2,-1,The following bug workaround options are available,,,null,The following bug workaround options are available:,The following bug workaround options are available:
2,2,The following session cache modes and modifiers are available,,,null,The following session cache modes and modifiers are available:,The following session cache modes and modifiers are available:
2,0,The following mode changes are available,,,null,The following mode changes are available:,The following mode changes are available:
2,0,BIO_set_close_APIParam_2 can take the value BIO_CLOSE or BIO_NOCLOSE,,,null,BIO_set_close_APIParam_2 can take the value BIO_CLOSE or BIO_NOCLOSE.,BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2. BIO_set_close_APIParam_2 can take the value BIO_CLOSE or BIO_NOCLOSE. Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.
2,0,Currently the following SSL_CONF_CTX_clear_flags_APIParam_2 SSL_CONF_CTX_set_flags_APIParam_2 values are recognised,,,null,Currently the following SSL_CONF_CTX_clear_flags_APIParam_2 SSL_CONF_CTX_set_flags_APIParam_2 values are recognised:,Currently the following SSL_CONF_CTX_clear_flags_APIParam_2 SSL_CONF_CTX_set_flags_APIParam_2 values are recognised:
2,0,The following functions may be used,,,if the message is not completely stored in memory,The following functions may be used if the message is not completely stored in memory:,The following functions may be used if the message is not completely stored in memory:
2,-1,ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd mask of the following possible values,,,null,ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd mask of the following possible values;,"If the ENGINE's array of control commands is empty ,then all other commands will fail, otherwise; ENGINE_CTRL_GET_FIRST_CMD_TYPE returns the identifier of the first command supported by the ENGINE, ENGINE_GET_NEXT_CMD_TYPE takes the identifier of a command supported by the ENGINE and returns the next command identifier or fails if there are no more, ENGINE_CMD_FROM_NAME takes a string name for a command and returns the corresponding identifier or fails if no such command name exists, and the remaining commands take a command identifier and return properties of the corresponding commands. All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description. ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd mask of the following possible values;"
2,0,padding denotes one of the following modes,,,null,padding denotes one of the following modes:,padding denotes one of the following modes:
2,0,It is the caller 's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data,,,null,It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
2,2,The length of the session id is between 1 and 32 bytes.,,,null,,
1,8,A truncated byte-string is invalid,,,null,A truncated byte-string is invalid.,"The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
1,2,Seed lengths > 20 are not supported,,,null,Seed lengths > 20 are not supported.,Seed lengths > 20 are not supported.
1,1,the BN_CTX_get_APIParam_0 pointers obtained from BN_CTX_get_APIName become invalid,,,When BN_CTX_end_APIName is called,"When BN_CTX_end_APIName is called, the BN_CTX_get_APIParam_0 pointers obtained from BN_CTX_get_APIName become invalid.","Finally, BN_CTX_end_APIName must be called before returning from the function. When BN_CTX_end_APIName is called, the BN_CTX_get_APIParam_0 pointers obtained from BN_CTX_get_APIName become invalid."
1,1,Misconfigured applications sending incorrect certificate chains often cause problems with peers,,1,null,Misconfigured applications sending incorrect certificate chains often cause problems with peers.,The functions SSL_CTX_build_cert_chain_APIName and SSL_build_cert_chain_APIName can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order. Misconfigured applications sending incorrect certificate chains often cause problems with peers.
1,1,the reuse behaviour of d2i_X509_APIName is broken,,0,when d2i_X509_APIParam_1 is valid,"In some versions of OpenSSL the ""reuse"" behaviour of d2i_X509_APIName when d2i_X509_APIParam_1 is valid is broken and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one.","In some versions of OpenSSL the ""reuse"" behaviour of d2i_X509_APIName when d2i_X509_APIParam_1 is valid is broken and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one. As a result the use of this ""reuse"" behaviour is strongly discouraged."
1,1,This may lead to unexpected results,,1,if the same CA certificate is available with different expiration dates,This may lead to unexpected results if the same CA certificate is available with different expiration dates.,"If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined. This may lead to unexpected results if the same CA certificate is available with different expiration dates. If a ""certificate expired"" verification error occurs, no other certificate will be searched. Make sure to not have expired certificates mixed with valid ones."
1,1,The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again,,,null,The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again.,"SSL_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2. The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again. It is not changed when SSL_clear_APIName is called. SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1."
1,1,The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group,,1,null,The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group.,"As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
1,1,a race condition can occur in that another thread generates the same session id,,1,If another thread is using the same internal session cache,"If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id.","SSL_has_matching_session_id_APIName will only query the internal session cache, not the external one. Since the session id is generated before the handshake is completed, the handshake is not immediately added to the cache. If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id. Collisions can also occur when using an external session cache, since the external cache is not tested with SSL_has_matching_session_id_APIName and the same race condition applies."
1,1,Key sizes with num < 1024 should be considered insecure,,,null,"The modulus size will be of length bits, and the public exponent will be e. Key sizes with num < 1024 should be considered insecure","The modulus size will be of length bits, and the public exponent will be e. Key sizes with num < 1024 should be considered insecure. The exponent is an odd number, typically 3, 17 or 65537."
1,1,The buffer is no longer valid after the callback function has returned,,,null,The buffer is no longer valid after the callback function has returned,"buf points to a buffer containing the protocol message, which consists of len bytes. The buffer is no longer valid after the callback function has returned."
1,1,passing a NULL value for HMAC_Final_APIParam_2 to use the static array is not thread safe,,,null,Note: passing a NULL value for HMAC_Final_APIParam_2 to use the static array is not thread safe,"It places the result in HMAC_Final_APIParam_2 (which must have space for the output of the hash function, which is no more than EVP_MAX_MD_SIZE bytes). If HMAC_Final_APIParam_2 is NULL, the digest is placed in a static array. The size of the output is placed in md_len, unless The size of the output is NULL. Note: passing a NULL value for HMAC_Final_APIParam_2 to use the static array is not thread safe."
1,1,The constant EVP_MAX_KEY_LENGTH is the maximum key length for all ciphers,,,null,The constant EVP_MAX_KEY_LENGTH is the maximum key length for all ciphers,"EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the key length of a cipher when passed an EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 or EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 structure. The constant EVP_MAX_KEY_LENGTH is the maximum key length for all ciphers. Note: although EVP_CIPHER_key_length() is fixed for a given cipher, the value of EVP_CIPHER_CTX_key_length() may be different for variable key length ciphers."
1,1,The constant EVP_MAX_IV_LENGTH is the maximum IV length for all ciphers,,,null,The constant EVP_MAX_IV_LENGTH is the maximum IV length for all ciphers,EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV length of a cipher when passed an EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 or EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1. It will return zero if the cipher does not use an IV. The constant EVP_MAX_IV_LENGTH is the maximum IV length for all ciphers.
1,1,The constant EVP_MAX_IV_LENGTH is also the maximum block length for all ciphers,,,null,The constant EVP_MAX_IV_LENGTH is also the maximum block length for all ciphers,EVP_CIPHER_block_size() and EVP_CIPHER_CTX_block_size() return the block size of a cipher when passed an EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 or EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 structure. The constant EVP_MAX_IV_LENGTH is also the maximum block length for all ciphers.
1,1,The data format used by DES_enc_write and DES_enc_read has a cryptographic weakness,,,null,"Warning: The data format used by DES_enc_write() and DES_enc_read() has a cryptographic weakness: When asked to write more than MAXWRITE bytes, DES_enc_write() will split the data into several chunks that are all encrypted using the same IV","Warning: The data format used by DES_enc_write() and DES_enc_read() has a cryptographic weakness: When asked to write more than MAXWRITE bytes, DES_enc_write() will split the data into several chunks that are all encrypted using the same IV. So don't use these functions unless you are sure you know what you do (in which case you might not want to use these functions anyway). these functions cannot handle non-blocking sockets. DES_enc_read() uses an internal state and thus cannot be used on multiple files."
1,1,OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate,,,unless the OCSP_NOCHAIN flag is set,"To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set","OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
1,0,"the session may be removed completely, and the pointer obtained will become invalid.",1,,If SSL_clear_APIName or SSL_free_APIName is called,"If SSL_clear_APIName or SSL_free_APIName is called, the session may be removed completely (if considered bad), and the pointer obtained will become invalid.","SSL_get0_session_APIName returns a pointer to the actual session. As the reference counter is not incremented, the pointer is only valid while the connection is in use. If SSL_clear_APIName or SSL_free_APIName is called, the session may be removed completely (if considered bad), and the pointer obtained will become invalid. Even if the session is valid, it can be removed at any time due to timeout during SSL_CTX_flush_sessions_APIName ."
0,8,This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user,,,null,This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user.,"This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg"
0,9,BN_GENCB_call is called as described below,,,While the number is being tested for primality,"While the number is being tested for primality, BN_GENCB_call(cb, 1, j) is called as described below","While the number is being tested for primality, BN_GENCB_call(cb, 1, j) is called as described below."
0,8,Within the library there are two forms of elliptic curve that are of interest,,,null,Within the library there are two forms of elliptic curve that are of interest.,"Within the library there are two forms of elliptic curve that are of interest. The first form is those defined over the prime field Fp. The elements of Fp are the integers 0 to p-1, where p is a prime number. This gives us a revised elliptic curve equation as follows:"
0,-1,A set of characters that can be used to cancel the prompt is given as well,,,null,A set of characters that can be used to cancel the prompt is given as well.,"UI_add_input_boolean_APIName adds a prompt to the UI that's supposed to be answered in a boolean way, with a single character for yes and a different character for no. A set of characters that can be used to cancel the prompt is given as well. The prompt itself is divided in two, one part being the descriptive text (given through the UI_add_input_boolean_APIParam_2 argument) and one describing the possible answers (given through the UI_add_input_boolean_APIParam_3 argument)."
0,8,BN_GENCB_call is called,,,When the n-th randomly generated prime is rejected as not suitable for the key,"When the n-th randomly generated prime is rejected as not suitable for the key, BN_GENCB_call(cb, 2, n) is called","When the n-th randomly generated prime is rejected as not suitable for the key, BN_GENCB_call(cb, 2, n) is called."
0,8,is optional text message,,,if one was set for the respective error code,"library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code","error code is an 8 digit hexadecimal number. library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code."
0,8,can be used to obtain state information for ssl,,,during connection setup and use,"SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use","SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use. When callback is NULL, the callback setting currently valid for ctx is used."
0,8,It is not NUL-terminated,,,null,It is not NUL-terminated,SSL_get0_alpn_selected() returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len. It is not NUL-terminated. SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0 if no protocol has been selected. SSL_get0_alpn_selected_APIParam_2 must not be freed.
0,8,This will check the type of the callback and will invoke callback for new style callbacks or callback for old style,,,null,"This will check the type of the callback and will invoke callback(a, b, gencb) for new style callbacks or callback(a, b, cb_arg) for old style","A callback is invoked through a call to BN_GENCB_call. This will check the type of the callback and will invoke callback(a, b, gencb) for new style callbacks or callback(a, b, cb_arg) for old style."
0,8,This is much better than CBC DES,,,null,This is much better than CBC DES,"DES_xcbc_encrypt() is RSA's DESX mode of DES. It uses inw and outw to 'whiten' the encryption. inw and outw are secret (unlike the iv) and are as such, part of the key. So the key is sort of 24 bytes. This is much better than CBC DES."
0,8,this will not happen,,,If i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is set to NULL first,"If i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is set to NULL first, then this will not happen","This will probably crash somewhere in d2i_X509(). The reason for this is that the variable i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is uninitialized and an attempt will be made to interpret its (invalid) value as an d2i_X509_APIParam_1 structure, typically causing a segmentation violation. If i2d_X509_bio_APIParam_2 i2d_re_X509_tbs_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_AUX_APIParam_1 i2d_X509_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 is set to NULL first, then this will not happen."
0,8,Any or all of these parameters can be set to NULL,,,if their value is not required,Any or all of these parameters can be set to NULL if their value is not required,"The values written to *revtime, OCSP_check_validity_APIParam_1 and *nextupd by OCSP_resp_find_status() and OCSP_single_get0_status() are internal pointers which MUST NOT be freed up by the calling application. Any or all of these parameters can be set to NULL if their value is not required."
0,0,Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface,,,null,Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface.,"Although low level algorithm specific functions exist for many algorithms, their use is discouraged. They cannot be used with an ENGINE and ENGINE versions of new algorithms cannot be accessed using the low level functions. Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface."
0,9,"In the case of SSL 2.0 , this is always 0",,,null,"In the case of SSL 2.0, this is always 0","In the case of SSL 2.0, this is always 0. In the case of SSL 3.0 or TLS 1.0, this is one of the ContentType values defined in the protocol specification (change_cipher_spec(20), alert(21), handshake(22); but never application_data(23) because the callback will only be called for protocol messages)."
0,10,", SSL_accept will only return once the handshake has been finished or an error occurred",1,,If the underlying BIO is blocking,"If the underlying BIO is blocking, SSL_accept() will only return once the handshake has been finished or an error occurred","If the underlying BIO is blocking, SSL_accept() will only return once the handshake has been finished or an error occurred."
0,7,The string will have the following format,,,null,The string will have the following format:,The string will have the following format:
0,7,"The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on.",1,,null,"The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,7,The following encoding methods are implemented,,,null,The following encoding methods are implemented:,The following encoding methods are implemented:
0,7,The BIO linked to SSL_get_wbio_APIParam_1 SSL_get_rbio_APIParam_1,,,null,The BIO linked to SSL_get_wbio_APIParam_1 SSL_get_rbio_APIParam_1.,The BIO linked to SSL_get_wbio_APIParam_1 SSL_get_rbio_APIParam_1.
0,7,This return method of UI_OpenSSL_APIName is the most machine/OS dependent part of OpenSSL and normally generates the most problems,2,0,when porting,This method is the most machine/OS dependent part of OpenSSL and normally generates the most problems when porting.,"UI_OpenSSL_APIName returns the built-in UI method (note: not the default one, since the default can be changed. See further on). This method is the most machine/OS dependent part of OpenSSL and normally generates the most problems when porting."
0,7,it is considered bad and removed according to RFC2246,,0,"If the session is still open , when SSL_clear_APIName or SSL_free_APIName is called","If the session is still open, when SSL_clear_APIName or SSL_free_APIName is called, it is considered bad and removed according to RFC2246.","The shutdown state of the connection is used to determine the state of the ssl session. If the session is still open, when SSL_clear_APIName or SSL_free_APIName is called, it is considered bad and removed according to RFC2246. The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the ""close notify"" alert but to not wait for the peer's answer, when the underlying connection is closed). SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer (see SSL_shutdown_APIName )."
0,7,the alternative RAND_set_rand_method_APIParam_1 implementationis entirely responsible for the generation and management of a cryptographically secure PRNG stream,2,0,If an alternative RAND_set_rand_method_APIParam_1 implementation is being used,"If an alternative RAND_set_rand_method_APIParam_1 implementation is being used (either set directly or as provided by an ENGINE module), then it is entirely responsible for the generation and management of a cryptographically secure PRNG stream.","If an alternative RAND_set_rand_method_APIParam_1 implementation is being used (either set directly or as provided by an ENGINE module), then it is entirely responsible for the generation and management of a cryptographically secure PRNG stream. The mechanisms described below relate solely to the software PRNG implementation built in to OpenSSL and used by default."
0,7,It is a macro,,,null,It is a macro.,"BIO_set_mem_buf_APIName sets the internal BUF_MEM structure to BIO_set_mem_buf_APIParam_2 and sets the close flag to BIO_set_mem_buf_APIParam_3, that is BIO_set_mem_buf_APIParam_3 should be either BIO_CLOSE or BIO_NOCLOSE. It is a macro."
0,7,i2d_re_X509_tbs_APIName is similar to i2d_X509_APIName except it encodes only the TBSCertificate portion of the certificate,,,null,i2d_re_X509_tbs_APIName is similar to i2d_X509_APIName except it encodes only the TBSCertificate portion of the certificate.,i2d_re_X509_tbs_APIName is similar to i2d_X509_APIName except it encodes only the TBSCertificate portion of the certificate.
0,7,The number was 0x0090581f,,,null,The number was therefore 0x0090581f.,"Version 0.9.5a had an interim interpretation that is like the current one, except the patch level got the highest bit set, to keep continuity. The number was therefore 0x0090581f."
0,7,The result returned by SSL_want_APIName should always be consistent with the result of SSL_get_error_APIName,,,null,The result returned by SSL_want_APIName should always be consistent with the result of SSL_get_error_APIName .,The result returned by SSL_want_APIName should always be consistent with the result of SSL_get_error_APIName .
0,6,PKCS7_sign creates and returns a PKCS#7 signedData structure,,,null,PKCS7_sign() creates and returns a PKCS#7 signedData structure,"PKCS7_sign() creates and returns a PKCS#7 signedData structure. signcert is the certificate to sign with, pkey is the corresponsding private key. certs is an optional additional set of certificates to include in the PKCS#7 structure (for example any intermediate CAs in the chain)."
0,6," the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, revtime, OCSP_check_validity_APIParam_1 and nextupd",1,,If it is successful,"If it is successful the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd","OCSP_resp_find_status() searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2. If it is successful the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd. The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN. The OCSP_single_get0_status_APIParam_2 and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED. If set the OCSP_single_get0_status_APIParam_2 field will be set to the revocation reason which will be one of OCSP_REVOKED_STATUS_NOSTATUS, OCSP_REVOKED_STATUS_UNSPECIFIED, OCSP_REVOKED_STATUS_KEYCOMPROMISE, OCSP_REVOKED_STATUS_CACOMPROMISE, OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, OCSP_REVOKED_STATUS_SUPERSEDED, OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, OCSP_REVOKED_STATUS_CERTIFICATEHOLD or OCSP_REVOKED_STATUS_REMOVEFROMCRL."
0,6,OCSP_resp_get0_respdata returns the tbsResponseData from OCSP_resp_get0_respdata_APIParam_1,,,null,OCSP_resp_get0_respdata() returns the tbsResponseData from OCSP_resp_get0_respdata_APIParam_1,OCSP_resp_get0_respdata() returns the tbsResponseData from OCSP_resp_get0_respdata_APIParam_1.
0,6,OCSP_resp_get0_tbs_sigalg returns the signatureAlgorithm from OCSP_resp_get0_tbs_sigalg_APIParam_1,,,null,OCSP_resp_get0_tbs_sigalg() returns the signatureAlgorithm from OCSP_resp_get0_tbs_sigalg_APIParam_1,OCSP_resp_get0_tbs_sigalg() returns the signatureAlgorithm from OCSP_resp_get0_tbs_sigalg_APIParam_1.
0,8,These functions can not return OBJ_obj2txt_APIParam_3 OBJ_sn2nid_APIParam_1 OBJ_create_APIParam_1 OBJ_ln2nid_APIParam_1 OBJ_cmp_APIParam_1,,,null,These functions can not return OBJ_obj2txt_APIParam_3 OBJ_sn2nid_APIParam_1 OBJ_create_APIParam_1 OBJ_ln2nid_APIParam_1 OBJ_cmp_APIParam_1  .,"These functions cannot return OBJ_obj2txt_APIParam_3 OBJ_sn2nid_APIParam_1 OBJ_create_APIParam_1 OBJ_ln2nid_APIParam_1 OBJ_cmp_APIParam_1 because an OBJ_obj2txt_APIParam_3 OBJ_obj2nid_APIParam_1 OBJ_dup_APIParam_1 OBJ_cmp_APIParam_1 can represent both an internal, constant, OID and a dynamically-created one. The latter cannot be constant because it needs to be freed after use."
0,5,All these functions return either the amount of data successfully read or written  or that no data was successfully read or written if the result is 0 or -1,,,null,All these functions return either the amount of data successfully read or written (if the return value is positive) or that no data was successfully read or written if the result is 0 or -1.,All these functions return either the amount of data successfully read or written (if the return value is positive) or that no data was successfully read or written if the result is 0 or -1. If the return value is -2 then the operation is not implemented in the specific BIO type.
0,5,"BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created",,,null,"BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created.","BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string, or NULL on error. BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created."
0,5,SSL_get_default_timeout_APIName returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for SSL_get_default_timeout_APIParam_1,,,null,SSL_get_default_timeout_APIName returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for SSL_get_default_timeout_APIParam_1.,SSL_get_default_timeout_APIName returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for SSL_get_default_timeout_APIParam_1.
0,5,BIO_f_base64_APIName returns the base64 BIO method,,,null,BIO_f_base64_APIName returns the base64 BIO method.,BIO_f_base64_APIName returns the base64 BIO method.
0,5,The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes,,,null,The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes.,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension. SSL_get1_curves_APIName returns the total number of supported curves. The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes. The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order. SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.
0,5,"RAND_egd_APIName and RAND_egd_bytes_APIName return the number of bytes read from the daemon on success, and -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG",,,null,"RAND_egd_APIName and RAND_egd_bytes_APIName return the number of bytes read from the daemon on success, and -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG.","RAND_egd_APIName and RAND_egd_bytes_APIName return the number of bytes read from the daemon on success, and -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG."
0,5,CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added,1,,null,CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.,CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.
0,5,CRYPTO_get_ex_data is used to retrieve application specific data,,,null,CRYPTO_get_ex_data() is used to retrieve application specific data,"CRYPTO_get_ex_data() is used to retrieve application specific data. The data is returned to the application, this will be the same value as supplied to a previous CRYPTO_set_ex_data() call."
0,5,The policies parameter can be NULL to clear an existing policy set,,,null,The policies parameter can be NULL to clear an existing policy set,X509_VERIFY_PARAM_set1_policies() enables policy checking (it is disabled by default) and sets the acceptable policy set to policies. Any existing policy set is cleared. The policies parameter can be NULL to clear an existing policy set.
0,5,The default MAC iteration count is 1,,,null,The default MAC iteration count is 1,The default MAC iteration count is 1 in order to retain compatibility with old software which did not interpret MAC iteration counts. If such compatibility is not required then mac_iter should be set to PKCS12_DEFAULT_ITER.
0,5,"In public keys , priv_key is NULL",,,null,"In public keys, priv_key is NULL","In public keys, priv_key is NULL."
0,5,"""(NONE)"" is returned by SSL_CIPHER_get_version","1,2",,If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL,"If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned","SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher. This is currently SSLv2 or TLSv1/SSLv3. In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead. If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned."
0,5,"BIO_get_fd places the file descriptor in c if it is not NULL, it also returns the file descriptor",,,null,"BIO_get_fd() places the file descriptor in c if it is not NULL, it also returns the file descriptor","BIO_get_fd() places the file descriptor in c if it is not NULL, it also returns the file descriptor. If c is not NULL it should be of type (int *)."
0,5,A return value of 0 or 1 indicates successful processing of the data,,,null,A return value of 0 or 1 indicates successful processing of the data,"EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,5,Functions such as strlen will not return the correct length of the encoded structure,,,null,Functions such as strlen() will not return the correct length of the encoded structure,The encoded data is in binary form and may contain embedded zeroes. Therefore any FILE pointers or BIOs should be opened in binary mode. Functions such as strlen() will not return the correct length of the encoded structure.
0,5,no other certificates for the same parameters will be searched in case of failure,,,null,"If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure","When looking up CA certificates, the OpenSSL library will first search the certificates in SSL_CTX_load_verify_locations_APIParam_2, then those in CApath. Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified. If these data do not match, the next certificate will be tried. If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure."
0,5,"If the flags PKCS7_STREAM is set, the returned PKCS7 structure is just initialized ready to perform the signing operation",,,null,"If the flags PKCS7_STREAM is set, then the returned PKCS7 structure is just initialized ready to perform the signing operation","If the flags PKCS7_STREAM is set, then the returned PKCS7 structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass."
0,5,To thwart the MMA attack all recipients are tried whether they succeed or not,,,null,To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
0,5,This function calls DES_fcrypt_APIName with a static array passed as the third parameter,,,null,This function calls DES_fcrypt_APIName with a static array passed as the third parameter,DES_crypt_APIName is a faster replacement for the normal system crypt_APIName. This function calls DES_fcrypt_APIName with a static array passed as the third parameter. This emulates the normal non-thread safe semantics of crypt_APIName.
0,8,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName,,,null,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName.,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName. Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function. Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecpientInfo_decrypt_APIName called. If successful CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content.
0,7,Use the c_rehash utility to create the necessary links,,,null,Use the c_rehash utility to create the necessary links,"If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
0,4,This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function,,,null,This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function.,"For the transparent negotiation to succeed, the SSL_write_APIParam_1 must have been initialized to client or server mode. This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function."
0,4,EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName,,1,null,"EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName, EVP_MD_CTX_destroy_APIName should be called only on a context created using EVP_MD_CTX_create_APIName.","EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName, EVP_MD_CTX_destroy_APIName should be called only on a context created using EVP_MD_CTX_create_APIName."
0,4,This is an alternative way of specifying trusted certificates instead of using an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1,,,null,This is an alternative way of specifying trusted certificates instead of using an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1,X509_STORE_CTX_trusted_stack() sets the set of trusted certificates of X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk. This is an alternative way of specifying trusted certificates instead of using an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1.
0,4,"Calling EC_KEY_free decrements the reference count for the EC_KEY object, and then frees the memory associated with it.",1,,if the reference count for the EC_KEY object has dropped to zero,"Calling EC_KEY_free decrements the reference count for the EC_KEY object, and if the reference count for the EC_KEY object has dropped to zero ,then frees the memory associated with it.","Calling EC_KEY_free decrements the reference count for the EC_KEY object, and if the reference count for the EC_KEY object has dropped to zero ,then frees the memory associated with it."
0,4,the key genration operation is aborted and an error occurs,1,,If the callback returns 0,If the callback returns 0,"If the callback returns 0, then the key genration operation is aborted and an error occurs. This might occur during a time consuming operation where a user clicks on a ""cancel"" button."
0,4,Note that the callback will not be called in the event of a handshake where session resumption occurs,,,null,Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake),A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
0,4,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used,1,,when a DH parameters are required to tmp_dh_callback,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used when a DH parameters are required to tmp_dh_callback,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used when a DH parameters are required to tmp_dh_callback. The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1.
0,4,This function can also be used in the NPN callback,,,null,This function can also be used in the NPN callback,"SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
0,0,Socket BIOs also support any relevant functionality of file descriptor BIOs,,,null,Socket BIOs also support any relevant functionality of file descriptor BIOs.,Socket BIOs also support any relevant functionality of file descriptor BIOs.
0,9,"Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2 , STACK_OF_APIParam_0 and chain parameters can be NULL",,,null,"Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, STACK_OF_APIParam_0 and chain parameters can be NULL","X509_STORE_CTX_init() sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation. It must be called before each call to X509_verify_cert(), ie a X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert(). The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain. Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, STACK_OF_APIParam_0 and chain parameters can be NULL."
0,9,The arguments of these functions support similar options to the similarly named ones of the corresponding X509_NAME_ENTRY_set_data_APIParam_1 X509_NAME_ENTRY_set_object_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_get_data_APIParam_1 X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_get_object_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 functions such as X509_NAME_add_entry_by_txt,,,null,The arguments of these functions support similar options to the similarly named ones of the corresponding X509_NAME_ENTRY_set_data_APIParam_1 X509_NAME_ENTRY_set_object_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_get_data_APIParam_1 X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_get_object_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 functions such as X509_NAME_add_entry_by_txt(),The arguments of these functions support similar options to the similarly named ones of the corresponding X509_NAME_ENTRY_set_data_APIParam_1 X509_NAME_ENTRY_set_object_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_get_data_APIParam_1 X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_get_object_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 functions such as X509_NAME_add_entry_by_txt(). So for example X509_NAME_ENTRY_set_data_APIParam_2 X509_NAME_ENTRY_create_by_NID_APIParam_3 X509_NAME_ENTRY_create_by_txt_APIParam_3 X509_NAME_ENTRY_create_by_OBJ_APIParam_3 can be set to MBSTRING_ASC but in the case of X509_set_data() the field name must be set first so the relevant field information can be looked up internally.
0,7,Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.,,,when the BIO is freed,Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.,BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2. BIO_set_close_APIParam_2 can take the value BIO_CLOSE or BIO_NOCLOSE. Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.
0,7,"For the functions below, application code should treat all returned values OIDs, NIDs, or names as constants",,,null,"For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants","The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs. OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants. For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants."
0,2,SSL_set_cipher_list_APIName sets the list of ciphers only for SSL_set_cipher_list_APIParam_1,,,null,SSL_set_cipher_list_APIName sets the list of ciphers only for SSL_set_cipher_list_APIParam_1.,SSL_set_cipher_list_APIName sets the list of ciphers only for SSL_set_cipher_list_APIParam_1.
0,2,SSL_set_connect_state_APIName sets SSL_set_connect_state_APIParam_1 to work in client mode,,,null,SSL_set_connect_state_APIName sets SSL_set_connect_state_APIParam_1 to work in client mode.,SSL_set_connect_state_APIName sets SSL_set_connect_state_APIParam_1 to work in client mode.
0,2,SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure,,,null,SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure.,"SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to. SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure. If streaming is enabled, then the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument. SMIME_write_PKCS7_APIParam_4 is an optional set of flags."
0,2,Kerberos v4 parameters are the same as DES_ncbc_encrypt_APIName,,,null,Kerberos v4 parameters are the same as DES_ncbc_encrypt_APIName.,DES_pcbc_encrypt_APIName encrypt/decrypts using the propagating cipher block chaining mode used by Kerberos v4. Kerberos v4 parameters are the same as DES_ncbc_encrypt_APIName.
0,2,then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used,1,,If EVP_DigestInit_ex_APIParam_3 is NULL,If EVP_DigestInit_ex_APIParam_3 is NULL then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used.,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3. EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function. EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName. If EVP_DigestInit_ex_APIParam_3 is NULL then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used.
0,2,The array consist of all NIDs of curves in preference order,,,null,The array consist of all NIDs of curves in preference order.,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2. The array consist of all NIDs of curves in preference order. For a TLS client the curves are used directly in the supported curves extension. For a TLS server the curves are used to determine the set of shared curves.
0,2,OBJ_create_APIParam_1 is the numerical form of the object ,,1,null,"OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name.","OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure."
0,2,OBJ_create_APIParam_2 is the short name,,1,null,"OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name.","OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure."
0,2,OBJ_create_APIParam_3 is the long name,,1,null,"OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name.","OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure."
0,2,"For negative numbers , the string is prefaced with a leading ' - '",,,null,"For negative numbers, the string is prefaced with a leading '-'.","BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively. For negative numbers, the string is prefaced with a leading '-'. The string must be freed later using OPENSSL_free_APIName."
0,2,An application may either directly specify the DH parameters or can supply the DH parameters via a callback function,,1,null,An application may either directly specify the DH parameters or can supply the DH parameters via a callback function.,An application may either directly specify the DH parameters or can supply the DH parameters via a callback function.
0,2,The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1,,1,null,The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1.,"When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1. The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information."
0,2,The default value for the maximum certificate chain size is 100kB,,,null,The default value for the maximum certificate chain size is 100kB (30kB on the 16bit DOS platform).,"The default value for the maximum certificate chain size is 100kB (30kB on the 16bit DOS platform). This should be sufficient for usual certificate chains (OpenSSL's default maximum chain length is 10, see SSL_CTX_set_verify_APIName , and certificates without special extensions have a typical size of 1-2kB)."
0,2,For Fp fields this will be the number of bits in p. For F2 ^ m fields this will be the value m,,,null,For Fp fields this will be the number of bits in p. For F2^m fields this will be the value m.,EC_GROUP_get_degree gets the degree of the field. For Fp fields this will be the number of bits in p. For F2^m fields this will be the value m.
2,2,"For ERR_error_string_n_APIName , ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL",,0,null,"For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL.","ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
0,2,it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it,1,1,If d2i_ECPKParameters_APIParam_1 is not NULL,"If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it.","d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
0,2,The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen,,,null,The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen(X509_check_email_APIParam_2).,"X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2. Only the mailbox syntax of RFC 822 is supported, comments are not allowed, and no attempt is made to normalize quoted characters. The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen(X509_check_email_APIParam_2)."
0,2,A return value of -3 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised and the command requires a value but SSL_CONF_cmd_APIParam_3 is NULL,,,null,A return value of -3 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised and the command requires a value but SSL_CONF_cmd_APIParam_3 is NULL.,A return value of -3 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised and the command requires a value but SSL_CONF_cmd_APIParam_3 is NULL.
0,2,The type of field is determined by X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 which can either be a definition of the type of X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_txt_APIParam_4 or a standard ASN1 type,,,null,The type of field is determined by X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 which can either be a definition of the type of X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_txt_APIParam_4 (such as MBSTRING_ASC) or a standard ASN1 type (such as V_ASN1_IA5STRING),The type of field is determined by X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 which can either be a definition of the type of X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_txt_APIParam_4 (such as MBSTRING_ASC) or a standard ASN1 type (such as V_ASN1_IA5STRING). The new entry is added to a position determined by X509_NAME_add_entry_by_OBJ_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_by_OBJ_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_APIParam_4.
0,2,The data being read from DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 is assumed to have come from DES_enc_write and is decrypted using DES_enc_read_APIParam_4 for the key schedule and iv for the initial vector,,,null,The data being read from DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 is assumed to have come from DES_enc_write() and is decrypted using DES_enc_read_APIParam_4 for the key schedule and iv for the initial vector,DES_enc_read() is used to read DES_enc_read_APIParam_3 DES_enc_write_APIParam_3 bytes from file descriptor DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 into buffer DES_enc_read_APIParam_2 DES_enc_write_APIParam_2. The data being read from DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 is assumed to have come from DES_enc_write() and is decrypted using DES_enc_read_APIParam_4 for the key schedule and iv for the initial vector.
0,2,it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it,1,,If d2i_X509_APIParam_1 is not NULL,"If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it","d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
0,1,"By default , wildcards are supported and wildcards match only in the left-most label",,1,null,"By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix.","X509_check_host_APIName checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified host name, which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034. By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix. For example, by default, the host X509_check_host_APIParam_2 ""www.example.com"" would match a certificate with a SAN or CN value of ""*.example.com"", ""w*.example.com"" or ""*w.example.com""."
0,-1,"Others need some additional initialization , and frequently a utility function exists to create and initialize such BIOs",,,null,"Others (such as file BIOs) need some additional initialization, and frequently a utility function exists to create and initialize such BIOs.","Some BIOs (such as memory BIOs) can be used immediately after calling BIO_new_APIName. Others (such as file BIOs) need some additional initialization, and frequently a utility function exists to create and initialize such BIOs."
0,2,version will be SSL3_VERSION,,,If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server,"Due to automatic protocol version negotiation, version is not necessarily the protocol version used by the sender of the message: If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server, version will be SSL3_VERSION","Due to automatic protocol version negotiation, version is not necessarily the protocol version used by the sender of the message: If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server, version will be SSL3_VERSION."
0,2,The 0 version uses the supplied structure pointer directly in the parent and The 0 version will be freed up,1,,when the parent is freed,The 0 version uses the supplied structure pointer directly in the parent and The 0 version will be freed up when the parent is freed,The 0 version uses the supplied structure pointer directly in the parent and The 0 version will be freed up when the parent is freed. In the above example crl would be freed but rev would not.
0,2,ok is set to 2 to indicate the policy checking is complete,,,If the flag X509_V_FLAG_NOTIFY_POLICY is set,"If the flag X509_V_FLAG_NOTIFY_POLICY is set ,then ok is set to 2 to indicate the policy checking is complete","The ok parameter to the callback indicates the value the callback should return to retain the default behaviour. If it is zero then and error condition is indicated. If it is 1 ,then no error occurred. If the flag X509_V_FLAG_NOTIFY_POLICY is set ,then ok is set to 2 to indicate the policy checking is complete."
2,2,ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero,,,If to and from represent the same time,"If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero","ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
2,2,one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive,,,If to represents a time later than from,"If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive","ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
2,2,one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative,,,If to represents a time earlier than from,"If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative","ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
0,2,The CMS_SignerInfo_sign function will explicitly sign a CMS_SignerInfo structure,,,null,"The CMS_SignerInfo_sign() function will explicitly sign a CMS_SignerInfo structure, its main use is when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set","The CMS_SignerInfo_sign() function will explicitly sign a CMS_SignerInfo structure, its main use is when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set."
0,2,EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc,,,null,EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(),"EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
0,2,The PrivateKey read routines can be used in all applications,,,null,The PrivateKey read routines can be used in all applications,The PrivateKey read routines can be used in all applications because they handle all formats transparently.
0,2,The parameters are encoded using a Dss-Parms structure as defined in RFC2459,,,null,The parameters are encoded using a Dss-Parms structure as defined in RFC2459,The DSAparams functions process DSA parameters using a DSA structure. The parameters are encoded using a Dss-Parms structure as defined in RFC2459.
0,2,"The exponent is an odd number , typically 3 , 17 or 65537",,,null,"The exponent is an odd number, typically 3, 17 or 65537","The modulus size will be of length bits, and the public exponent will be e. Key sizes with num < 1024 should be considered insecure. The exponent is an odd number, typically 3, 17 or 65537."
0,2,"The initial buffer size is DEFAULT_BUFFER_SIZE , currently 4096",,,null,"The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096","BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size. The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared when the buffer is resized."
0,2,CONF_MFLAGS_IGNORE_MISSING_FILE will make CONF_load_modules_file() ignore missing configuration files,1,,if set will make CONF_load_modules_file ignore missing configuration files,CONF_MFLAGS_IGNORE_MISSING_FILE if set will make CONF_load_modules_file() ignore missing configuration files,CONF_MFLAGS_IGNORE_MISSING_FILE if set will make CONF_load_modules_file() ignore missing configuration files. Normally a missing configuration file return an error.
0,2,error code is an 8 digit hexadecimal number,,,null,error code is an 8 digit hexadecimal number,"error code is an 8 digit hexadecimal number. library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code."
0,2,The result is rounded towards zero,,,null,"The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative","BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d). Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3)."
0,2,"The callback can use the SSL_get_version function to check , whether the session is of type SSLv2",,,null,"The callback can use the SSL_get_version(3) function to check, whether the session is of type SSLv2","If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00. It is not recommended to change the id_len for SSLv2 sessions. The callback can use the SSL_get_version(3) function to check, whether the session is of type SSLv2."
0,2,"library name , function name and reason string are ASCII text , as",,,null,"library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code","error code is an 8 digit hexadecimal number. library name, function name and reason string are ASCII text, as is optional text message if one was set for the respective error code."
0,2,the remainder will be zero or negative,,,thus if BN_div_APIParam_3 is negative,"The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative","BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d). Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3)."
0,2,Signing is deferred until after the data has been written,,,null,Signing is deferred until after the data has been written,"If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass."
0,2,neg is 1,,,if the number is negative,neg is 1 if the number is negative,"dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated. top is the number of words being used, so for a value of 4, bn.d[0]=4 and bn.top=1. neg is 1 if the number is negative. When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0, the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0."
2,2,SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0,,,if no protocol has been selected,SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0 if no protocol has been selected,SSL_get0_alpn_selected() returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len. It is not NUL-terminated. SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0 if no protocol has been selected. SSL_get0_alpn_selected_APIParam_2 must not be freed.
0,2,"top is the number of words being used , so for a value of 4 , bn.d -LSB- 0 -RSB- = 4 and bn.top = 1",,,null,"top is the number of words being used, so for a value of 4, bn.d[0]=4 and bn.top=1","dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated. top is the number of words being used, so for a value of 4, bn.d[0]=4 and bn.top=1. neg is 1 if the number is negative. When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0, the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0."
0,2,This type is consists of 8 bytes with odd parity,,,null,This type is consists of 8 bytes with odd parity,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,2,DES_cfb_encrypt encrypt/decrypts using cipher feedback mode,,,null,DES_cfb_encrypt() encrypt/decrypts using cipher feedback mode,"DES_cfb_encrypt() encrypt/decrypts using cipher feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
0,2,DES_quad_cksum is a Kerberos v4 function,,,null,DES_quad_cksum() is a Kerberos v4 function,"DES_quad_cksum() is a Kerberos v4 function. It returns a 4 byte checksum from the input bytes. The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times. If DES_quad_cksum_APIParam_2 is non-NULL, the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2."
0,2,The main purpose of CMS_add1_signer_APIName is to provide finer control over a CMS signed data structure where the simpler CMS_sign_APIName function defaults are not appropriate,,,null,The main purpose of CMS_add1_signer_APIName is to provide finer control over a CMS signed data structure where the simpler CMS_sign_APIName function defaults are not appropriate,The main purpose of CMS_add1_signer_APIName is to provide finer control over a CMS signed data structure where the simpler CMS_sign_APIName function defaults are not appropriate. For example if multiple signers or non default digest algorithms are needed. New attributes can also be added using the returned CMS_SignerInfo structure and the CMS attribute utility functions or the CMS signed receipt request functions.
0,2,*pid is set to the key ID and *pname is set to NULL,1,,If the responder ID is by key ID,If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL,"OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1. If the responder ID is a name then <*pname> is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary."
0,1,The parameters are encoded using a PKCS # 3 DHparameter structure,,,null,The parameters are encoded using a PKCS#3 DHparameter structure,The DHparams functions process DH parameters using a DH structure. The parameters are encoded using a PKCS#3 DHparameter structure.
0,1,"BN_generate_prime works in the same way as BN_generate_prime_ex but expects an old style callback function directly in the callback parameter , and an argument to pass to it in the cb_arg",,,null,"BN_generate_prime (deprecated) works in the same way as BN_generate_prime_ex but expects an old style callback function directly in the callback parameter, and an argument to pass to it in the cb_arg","BN_generate_prime (deprecated) works in the same way as BN_generate_prime_ex but expects an old style callback function directly in the callback parameter, and an argument to pass to it in the cb_arg. Similarly BN_is_prime and BN_is_prime_fasttest are deprecated and can be compared to BN_is_prime_ex and BN_is_prime_fasttest_ex respectively."
0,1,more complex compound formats may not work.,1,1,While The MIME parser used by SMIME_read_PKCS7_APIName will handle most S/MIME messages,While The MIME parser used by SMIME_read_PKCS7_APIName will handle most S/MIME messages more complex compound formats may not work.,The MIME parser used by SMIME_read_PKCS7_APIName is somewhat primitive. While The MIME parser used by SMIME_read_PKCS7_APIName will handle most S/MIME messages more complex compound formats may not work.
0,1,the value of EVP_CIPHER_CTX_key_length may be different for variable key length ciphers,,,null,"Note : , the value of EVP_CIPHER_CTX_key_length may be different for variable key length ciphers","EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the key length of a cipher when passed an EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 or EVP_CIPHER_param_to_asn1_APIParam_1 EVP_DecryptUpdate_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_CipherInit_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_EncryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherFinal_ex_APIParam_1 structure. The constant EVP_MAX_KEY_LENGTH is the maximum key length for all ciphers. Note: although EVP_CIPHER_key_length() is fixed for a given cipher, the value of EVP_CIPHER_CTX_key_length() may be different for variable key length ciphers."
0,1,The PUBKEY functions process a public key using an EVP_PKEY structure,,,null,The PUBKEY functions process a public key using an EVP_PKEY structure,The PUBKEY functions process a public key using an EVP_PKEY structure. The public key is encoded as a SubjectPublicKeyInfo structure.
0,1,The public key is encoded as a SubjectPublicKeyInfo structure,,,null,The public key is encoded as a SubjectPublicKeyInfo structure,The PUBKEY functions process a public key using an EVP_PKEY structure. The public key is encoded as a SubjectPublicKeyInfo structure.
0,1,The RSAPublicKey functions process an RSA public key using an RSA structure,,,null,The RSAPublicKey functions process an RSA public key using an RSA structure,The RSAPublicKey functions process an RSA public key using an RSA structure. The public key is encoded using a PKCS#1 RSAPublicKey structure.
0,1,The public key is encoded using a PKCS # 1 RSAPublicKey structure,,,null,The public key is encoded using a PKCS#1 RSAPublicKey structure,The RSAPublicKey functions process an RSA public key using an RSA structure. The public key is encoded using a PKCS#1 RSAPublicKey structure.
0,1,The RSA_PUBKEY functions also process an RSA public key using an RSA structure,,,null,The RSA_PUBKEY functions also process an RSA public key using an RSA structure,The RSA_PUBKEY functions also process an RSA public key using an RSA structure. However the public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA.
0,1,The DSA_PUBKEY functions process a DSA public key using a DSA structure,,,null,The DSA_PUBKEY functions process a DSA public key using a DSA structure,The DSA_PUBKEY functions process a DSA public key using a DSA structure. The public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not DSA.
0,1,The amount of data written depends on the block alignment of the encrypted data,,,null,The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room. The actual number of bytes written is placed in outl.
0,1,"key is the symmetric key to use and iv is the IV to use , the actual number of bytes used for the key and IV depends on the cipher",,,null,"key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher","EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
0,1,BN_add_APIParam_1 may be the same BN_add_APIParam_1 as BN_add_APIParam_2 or BN_add_APIParam_3,,,null,BN_add_APIParam_1 may be the same BN_add_APIParam_1 as BN_add_APIParam_2 or BN_add_APIParam_3,BN_add() adds BN_add_APIParam_2 and BN_add_APIParam_3 and places the result in BN_add_APIParam_1 (r=a+b). BN_add_APIParam_1 may be the same BN_add_APIParam_1 as BN_add_APIParam_2 or BN_add_APIParam_3.
0,1,BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3,,,null,BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3,"BN_mul() multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1 (r=a*b). BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3. For multiplication by powers of 2, use BN_lshift(3) ."
0,1,BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1,,,null,BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1,"BN_sqr() takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1 (r=a^2). BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1. This function is faster than BN_mul(r,a,a)."
0,1,the maximum size of the output buffer is written to the siglen parameter,,,If sig is NULL,"If sig is NULL, then the maximum size of the output buffer is written to the siglen parameter","The EVP_PKEY_sign() function performs a public key signing operation using EVP_PKEY_sign_APIParam_1. The data to be signed is specified using the tbs and tbslen parameters. If sig is NULL, then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL ,then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful ,the signature is written to sig and the amount of data written to siglen."
0,1,SSL_set_verify_depth sets the maximum SSL_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for ssl,,,null,SSL_set_verify_depth() sets the maximum SSL_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for ssl,SSL_set_verify_depth() sets the maximum SSL_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for ssl. (See the BUGS section.)
0,1,The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags,,,null,The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags,"Server mode: the server sends a client certificate request to the client. The certificate returned (if any) is checked. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags."
0,1,dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated,,,null,dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated,"dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated. top is the number of words being used, so for a value of 4, bn.d[0]=4 and bn.top=1. neg is 1 if the number is negative. When a bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 is 0, the bn_dump_APIParam_1 bn_div_words_APIParam_3 field can be NULL and top == 0."
0,1,bn_set_max makes bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2 a static number with a dmax of its current size,,,null,bn_set_max() makes bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2 a static number with a dmax of its current size,bn_set_max() makes bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2 a static number with a dmax of its current size. This is used by bn_set_low() and bn_set_high() to make bn_set_low_APIParam_1 bn_set_high_APIParam_1 a read-only bn_set_max_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 that contains the bn_set_low_APIParam_3 bn_set_high_APIParam_3 low or high words of bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2.
0,8,Each line is indented by X509_NAME_print_ex_APIParam_3 spaces,,,null,Each line (for multiline formats) is indented by X509_NAME_print_ex_APIParam_3 spaces.,X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1. Each line (for multiline formats) is indented by X509_NAME_print_ex_APIParam_3 spaces. The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter.
0,8,Check the error queue to find out the reason of failure,,,null,Check the error queue to find out the reason of failure.,SSL_CTX_set_tmp_dh_APIName and SSL_set_tmp_dh_APIName do return 1 on success and 0 on failure. Check the error queue to find out the reason of failure.
0,9,Pointer to the subject names of the successfully read certificates,,,null,Pointer to the subject names of the successfully read certificates.,Pointer to the subject names of the successfully read certificates.
0,9,Callback has been called,,,during write operation,Callback has been called during write operation.,Callback has been called during write operation.
0,9,A certificate was of an unsupported type,,,null,A certificate was of an unsupported type.,A certificate was of an unsupported type.
0,9,The read state is unknown,,,null,The read state is unknown.,The read state is unknown. This should never happen.
0,9,Raw RSA encryption,,,null,Raw RSA encryption,Raw RSA encryption. This mode should only be used to implement cryptographically sound padding modes in the application code. Encrypting user data directly with RSA is insecure.
0,9,pass is the passphrase to use,,,null,pass is the passphrase to use,"pass is the passphrase to use. name is the friendlyName to use for the supplied certifictate and key. pkey is the private key to include in the structure and cert its corresponding certificates. ca, if not NULL is an optional set of certificates to also include in the structure."
0,9,keytype is the type of key,,,null,keytype is the type of key,nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively. iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use. keytype is the type of key.
0,9,pkey is the private key to include in the structure and cert its corresponding certificates,,,null,pkey is the private key to include in the structure and cert its corresponding certificates,"pass is the passphrase to use. name is the friendlyName to use for the supplied certifictate and key. pkey is the private key to include in the structure and cert its corresponding certificates. ca, if not NULL is an optional set of certificates to also include in the structure."
0,9,The TLS/SSL handshake was not successful,,,null,"The TLS/SSL handshake was not successful ,","The TLS/SSL handshake was not successful, because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. The shutdown can also occur of action is need to continue the operation for non-blocking BIOs. Call SSL_get_error() with the return value ret to find out the reason."
0,9,an description and a name,,,null,UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name,"UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:"". With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:"". Other methods may create whatever string and may include encodings that will be processed by the other method functions."
0,9,the signature algorithms of all CA certificates are acceptable,,,null,CERT_PKEY_CA_SIGNATURE: the signature algorithms of all CA certificates are acceptable,CERT_PKEY_CA_SIGNATURE: the signature algorithms of all CA certificates are acceptable.
0,9,the issuer name is acceptable,,,null,CERT_PKEY_ISSUER_NAME: the issuer name is acceptable,CERT_PKEY_ISSUER_NAME: the issuer name is acceptable. This is only meaningful for client authentication.
0,9,the signature algorithm of the EE certificate is acceptable,,,null,CERT_PKEY_EE_SIGNATURE: the signature algorithm of the EE certificate is acceptable,CERT_PKEY_EE_SIGNATURE: the signature algorithm of the EE certificate is acceptable.
0,9,the parameters of the end entity certificate are acceptable,,,null,CERT_PKEY_EE_PARAM: the parameters of the end entity certificate are acceptable (eg it is a supported curve),CERT_PKEY_EE_PARAM: the parameters of the end entity certificate are acceptable (eg it is a supported curve).
0,9,the parameters of all CA certificates are acceptable,,,null,CERT_PKEY_CA_PARAM: the parameters of all CA certificates are acceptable,CERT_PKEY_CA_PARAM: the parameters of all CA certificates are acceptable.
0,9,chain is suitable for Suite B use,,,null,CERT_PKEY_SUITEB: chain is suitable for Suite B use,CERT_PKEY_SUITEB: chain is suitable for Suite B use.
0,9,the end entity certificate algorithm can be used explicitly for signing,,,null,CERT_PKEY_EXPLICIT_SIGN: the end entity certificate algorithm can be used explicitly for signing (ie it is mentioned in the signature algorithms extension),CERT_PKEY_EXPLICIT_SIGN: the end entity certificate algorithm can be used explicitly for signing (ie it is mentioned in the signature algorithms extension).
0,9,Protocol version,,,null,"Protocol version: SSLv2, SSLv3, TLSv1.2","Protocol version: SSLv2, SSLv3, TLSv1.2. The TLSv1.0 ciphers are flagged with SSLv3. No new ciphers were added by TLSv1.1."
0,9,Authentication method,,,null,"Authentication method: RSA, DSS, DH, None","Authentication method: RSA, DSS, DH, None. None is the representation of anonymous ciphers."
0,9,Message digest,,,null,"Message digest: MD5, SHA1","Message digest: MD5, SHA1."
0,9,Key exchange method,,,null,"Key exchange method: RSA (for export ciphers as RSA(512) or RSA(1024)), DH (for export ciphers as DH(512) or DH(1024)), DH/RSA, DH/DSS, Fortezza","Key exchange method: RSA (for export ciphers as RSA(512) or RSA(1024)), DH (for export ciphers as DH(512) or DH(1024)), DH/RSA, DH/DSS, Fortezza."
0,9,Encryption method with number of secret bits,,,null,"Encryption method with number of secret bits: DES(40), DES(56), 3DES(168), RC4(40), RC4(56), RC4(64), RC4(128), RC2(40), RC2(56), RC2(128), IDEA(128), Fortezza, None","Encryption method with number of secret bits: DES(40), DES(56), 3DES(168), RC4(40), RC4(56), RC4(64), RC4(128), RC2(40), RC2(56), RC2(128), IDEA(128), Fortezza, None."
0,9,"EVP_CipherInit_ex , EVP_CipherUpdate and EVP_CipherFinal_ex are functions that can be used for decryption or encryption",,,null,"EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are functions that can be used for decryption or encryption","EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are functions that can be used for decryption or encryption. The operation performed depends on the value of the enc parameter. It should be set to 1 for encryption, 0 for decryption and -1 to leave the value unchanged (the actual value of 'enc' being supplied in a previous call)."
0,9,where is a bitmask made up of the following bits,,,null,where is a bitmask made up of the following bits:,where is a bitmask made up of the following bits:
0,9,"For every 4 valid base 64 bytes processed , 3 bytes of binary output data will be produced",,,null,"For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)","EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,9,Each of these functions operates on the current end entity certificate,,,null,Each of these functions operates on the current end entity (ie server or client) certificate,Each of these functions operates on the current end entity (ie server or client) certificate. This is the last certificate loaded or selected on the corresponding SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 structure.
0,9,"The first is the generation of a DES_key_schedule from a key , the second is the actual encryption",,,null,"The first is the generation of a DES_key_schedule from a key, the second is the actual encryption","There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,9,"The algorithm can be iterated over the input , depending on out_count , 1 , 2 , 3 or 4 times",,,null,"The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times","DES_quad_cksum() is a Kerberos v4 function. It returns a 4 byte checksum from the input bytes. The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times. If DES_quad_cksum_APIParam_2 is non-NULL, the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2."
0,8,these are ignored by SSL_pending,,,null,"If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3) ), additional protocol bytes may have been read containing more TLS/SSL records; these are ignored by SSL_pending()","SSL_pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any). If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3) ), additional protocol bytes may have been read containing more TLS/SSL records; these are ignored by SSL_pending()."
0,8,These CRLs will only be used,,,if CRL verification is enabled in the associated X509_STORE_CTX_set0_param_APIParam_2 structure,These CRLs will only be used if CRL verification is enabled in the associated X509_STORE_CTX_set0_param_APIParam_2 structure,"X509_STORE_CTX_set0_crls() sets a set of CRLs to use to aid certificate verification to sk. These CRLs will only be used if CRL verification is enabled in the associated X509_STORE_CTX_set0_param_APIParam_2 structure. This might be used where additional ""useful"" CRLs are supplied as part of a protocol, for example in a PKCS#7 structure."
0,8,can be used to obtain state information for SSL objects created from ctx,,,during connection setup and use,"SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use","SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use. The setting for ctx is overridden from the setting for a specific SSL object, if specified. When callback is NULL, not callback function is used."
0,6,Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition,,,null,Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition,"The operation did not complete; the same TLS/SSL I/O function should be called again later. If, by then, the underlying BIO has data available for reading (if the result code is SSL_ERROR_WANT_READ) or allows writing data (SSL_ERROR_WANT_WRITE), then some TLS/SSL protocol progress will take place, ie at least part of an TLS/SSL record will be read or written. Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition. There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level."
0,5,DH_get_default_method_APIName returns a pointer to the current default DH_METHOD,,,null,DH_get_default_method_APIName returns a pointer to the current default DH_METHOD.,"DH_get_default_method_APIName returns a pointer to the current default DH_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
0,4,Always create a new key,,,when using temporary/ephemeral DH parameters,Always create a new key when using temporary/ephemeral DH parameters (see SSL_CTX_set_tmp_dh_callback(3) ),"Always create a new key when using temporary/ephemeral DH parameters (see SSL_CTX_set_tmp_dh_callback(3) ). This option must be used to prevent small subgroup attacks, when the DH parameters were not generated using ""strong"" primes (eg when using DSA-parameters, see dhparam(1) ). If ""strong"" primes were used, it is not strictly necessary to generate a new DH key during each handshake but it is also recommended. SSL_OP_SINGLE_DH_USE should therefore be enabled whenever temporary/ephemeral DH parameters are used."
0,4,it will be called as follows using the BN_GENCB_call function described on the BN_generate_prime page,,,If cb is not NULL,"If cb is not NULL, it will be called as follows using the BN_GENCB_call() function described on the BN_generate_prime(3) page","A callback function may be used to provide feedback about the progress of the key generation. If cb is not NULL, it will be called as follows using the BN_GENCB_call() function described on the BN_generate_prime(3) page."
0,4,The callback function is called as callback,,,null,"The callback function is called as callback(SSL *ssl, int where, int ret)","The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information."
0,4,A callback is invoked through a call to BN_GENCB_call,,,null,A callback is invoked through a call to BN_GENCB_call,"A callback is invoked through a call to BN_GENCB_call. This will check the type of the callback and will invoke callback(a, b, gencb) for new style callbacks or callback(a, b, cb_arg) for old style."
0,4,BN_GENCB_call is called in the outer loop,,,While it is tested by the Miller-Rabin primality test,"While it is tested by the Miller-Rabin primality test, BN_GENCB_call(cb, 1, i) is called in the outer loop (once for each witness that confirms that the candidate may be prime)","When a candidate for p has passed the test by trial division, BN_GENCB_call(cb, 1, -1) is called. While it is tested by the Miller-Rabin primality test, BN_GENCB_call(cb, 1, i) is called in the outer loop (once for each witness that confirms that the candidate may be prime). i is the loop counter (starting at 0)."
0,3,This function can be called multiple times to encrypt successive blocks of data,,,null,This function can be called multiple times to encrypt successive blocks of data,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room. The actual number of bytes written is placed in outl.
0,3,"As at any time a re-negotiation is possible , a call to SSL_read can also cause write operations !",,,null,"As at any time a re-negotiation is possible, a call to SSL_read() can also cause write operations!","If the underlying BIO is non-blocking, SSL_read() will also return when the underlying BIO could not satisfy the needs of SSL_read() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_read() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_read() can also cause write operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_read(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,3,the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used,,,when a DH parameters are required to tmp_dh_callback,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used when a DH parameters are required to tmp_dh_callback,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used when a DH parameters are required to tmp_dh_callback. The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1.
0,3,EVP_EncodeUpdate may be called repeatedly to process large amounts of input data,,,null,EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,3,It might also call SSL_certs_clear to delete any certificates associated with the SSL object,,,null,It might also call SSL_certs_clear() to delete any certificates associated with the SSL object,It might also call SSL_certs_clear() to delete any certificates associated with the SSL object.
0,3,The next call to the handshake function will again lead to the call of cert_cb,,,null,The next call to the handshake function will again lead to the call of cert_cb(),"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
0,3,The certificate callback functionality is always called even is a certificate is already set so the callback can modify or delete the existing certificate,,,null,The certificate callback functionality is always called even is a certificate is already set so the callback can modify or delete the existing certificate,The certificate callback functionality supercedes the (largely broken) functionality provided by the old client certificate callback interface. The certificate callback functionality is always called even is a certificate is already set so the callback can modify or delete the existing certificate.
0,3,This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL,,,null,(This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL),SSL_CTX_clear_chain_certs() clears any existing chain associated with the current certificate of SSL_CTX_clear_chain_certs_APIParam_1. (This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL).
0,3,"BN_mul calls bn_mul_normal , or",,,null,"BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL","BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL."
0,3,BN_GENCB_call and BN_GENCB_call are called,,,When a prime q has been found,"When a prime q has been found, BN_GENCB_call(cb, 2, 0) and BN_GENCB_call(cb, 3, 0) are called","When a prime q has been found, BN_GENCB_call(cb, 2, 0) and BN_GENCB_call(cb, 3, 0) are called."
0,2,The OCSP protocol does not require that this certificate is included in the certs field of the response,,,null,"The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism","OCSP_resp_get0_signer() attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1. The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism."
0,1,The number of bytes written is placed in outl,,,null,The number of bytes written is placed in outl,"If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding). The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made."
0,1,The cipher argument specifies the encryption algorithm to use,,,null,The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers,"PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers. If cipher is NULL, then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead."
0,1,the maximum size of the output buffer is written to the outlen parameter,,,If out is NULL,"If out is NULL, then the maximum size of the output buffer is written to the outlen parameter","The EVP_PKEY_encrypt() function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1. The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL, then before the call the outlen parameter should contain the length of the out buffer, if the call is successful, the encrypted data is written to out and the amount of data written to outlen."
0,1,the CMS_SignerInfo structure will not be finalized so additional attributes can be added,,,If CMS_PARTIAL is set in addition to CMS_REUSE_DIGEST,"If CMS_PARTIAL is set in addition to CMS_REUSE_DIGEST, then the CMS_SignerInfo structure will not be finalized so additional attributes can be added","If CMS_PARTIAL is set in addition to CMS_REUSE_DIGEST, then the CMS_SignerInfo structure will not be finalized so additional attributes can be added. In this case an explicit call to CMS_SignerInfo_sign() is needed to finalize it."
0,1,It handles the same formats as the PrivateKey functions but,,,null,It handles the same formats as the PrivateKey functions but an error occurs if the private key is not RSA,The RSAPrivateKey functions process an RSA private key using an RSA structure. It handles the same formats as the PrivateKey functions but an error occurs if the private key is not RSA.
0,1,Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored,,,null,Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored,"BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size. The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared when the buffer is resized."
0,1,`` Old '' style callbacks are the same except they are initialised with a call to BN_GENCB_set_old and callback is of type void,,,null,"""Old"" style callbacks are the same except they are initialised with a call to BN_GENCB_set_old and callback is of type void (*callback)(int, int, void *)","For ""new"" style callbacks a BN_GENCB structure should be initialised with a call to BN_GENCB_set, where gencb is a BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1, callback is of type int (*callback)(int, int, BN_GENCB *) and cb_arg is a void *. ""Old"" style callbacks are the same except they are initialised with a call to BN_GENCB_set_old and callback is of type void (*callback)(int, int, void *)."
0,1,"OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value , ie in a way",,,null,"OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value, ie in a way it records duration of periods when probe values appeared deterministic","OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value, ie in a way it records duration of periods when probe values appeared deterministic. The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector[num], with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning ""as many as it takes."""
0,1,The key schedule is an expanded form of the key,,,null,The key schedule is an expanded form of the key; it is used to speed the encryption process,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,1,This will typically include any parameters and an IV,,,null,This will typically include any parameters and an IV,"EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example). This function may fail if the cipher does not have any ASN1 support."
0,1,RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName,,,null,RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName,"RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName. RAND_priv_bytes_APIName is intended to be used for generating values that should remain private. If using the default RAND_METHOD, this function uses a separate ""private"" PRNG instance so that a compromise of the ""public"" PRNG instance will not affect the secrecy of these private values, as described in RAND_APIName and RAND_DRBG_APIName ."
0,1,EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier `` parameter '',,,null,"EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier ""parameter""","EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier ""parameter"". The precise effect depends on the cipher In the case of RC2, for example, it will set the IV and effective key length. This function should be called after the base cipher type is set but before the key is set. For example EVP_CipherInit_APIName will be called with the IV and key set to NULL, EVP_CIPHER_asn1_to_param_APIName will be called and finally EVP_CipherInit_APIName again with all parameters except the key set to NULL. It is possible for this function to fail if the cipher does not have any ASN1 support or the parameters cannot be set (for example the RC2 effective key length is not supported."
0,0,The operation failed,,,null,The operation failed.,The operation failed. Check the error stack to find out why.
0,0,This option is not needed for clients,,,null,This option is not needed for clients.,"When performing renegotiation as a server, always start a new session (ie, session resumption requests are only accepted in the initial handshake). This option is not needed for clients."
0,0,"BN_to_montgomery_APIName computes Mont , ie BN_to_montgomery_APIParam_2R",,,null,"BN_to_montgomery_APIName computes Mont(BN_to_montgomery_APIParam_2,R^2), ie BN_to_montgomery_APIParam_2*R. Note that BN_to_montgomery_APIParam_2 must be non-negative and smaller than the modulus.","BN_to_montgomery_APIName computes Mont(BN_to_montgomery_APIParam_2,R^2), ie BN_to_montgomery_APIParam_2*R. Note that BN_to_montgomery_APIParam_2 must be non-negative and smaller than the modulus."
0,0,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2,,,null,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2: this must be called to initialize a digest BIO before any data is passed through digest BIO.,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2: this must be called to initialize a digest BIO before any data is passed through digest BIO. It is a BIO_ctrl_APIName macro.
0,0,X509_NAME_ENTRY_get_data_APIName retrieves the field value of X509_NAME_ENTRY_get_data_APIParam_1 in and X509_NAME_ENTRY_get_data_APIParam_0 structure,,,null,X509_NAME_ENTRY_get_data_APIName retrieves the field value of X509_NAME_ENTRY_get_data_APIParam_1 in and X509_NAME_ENTRY_get_data_APIParam_0 structure.,X509_NAME_ENTRY_get_data_APIName retrieves the field value of X509_NAME_ENTRY_get_data_APIParam_1 in and X509_NAME_ENTRY_get_data_APIParam_0 structure.
0,0,the SSLv3/TLSv1 server will choose following its own preferences,,,When set,"When set, the SSLv3/TLSv1 server will choose following its own preferences.","When choosing a cipher, use the server's preferences instead of the client preferences. When not set, the SSL server will always follow the clients preferences. When set, the SSLv3/TLSv1 server will choose following its own preferences. Because of the different protocol, for SSLv2, the server will send its list of preferences to the client and the client chooses."
0,0,Disable version rollback attack detection,,,null,Disable version rollback attack detection.,Disable version rollback attack detection.
0,0,see the notes below,,,null,This value is a hint and not an absolute; see the notes below.,SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2. This value is a hint and not an absolute; see the notes below.
0,9,The shutdown was successfully completed,,,null,The shutdown was successfully completed.,"The shutdown was successfully completed. The ""close notify"" alert was sent and the peer's ""close notify"" alert was received."
0,9,The shutdown is not yet finished,,,null,The shutdown is not yet finished.,"The shutdown is not yet finished. Call SSL_shutdown_APIName for a second time, if a bidirectional shutdown shall be performed. The output of SSL_get_error_APIName may be misleading, as an erroneous SSL_ERROR_SYSCALL may be flagged even though no error occurred."
0,9,The operation succeeded,,,null,The operation succeeded.,The operation succeeded.
0,9,A message could not be decoded,1,,null,A message could not be decoded  or the length of the message was incorrect .,A message could not be decoded because some field was out of the specified range or the length of the message was incorrect. This message is always fatal.
0,9,Probably SSL_alert_desc_string_long_APIParam_1 SSL_alert_type_string_long_APIParam_1 SSL_alert_desc_string_APIParam_1 SSL_alert_type_string_APIParam_1 does not contain a correct alert message,,,null,Probably SSL_alert_desc_string_long_APIParam_1 SSL_alert_type_string_long_APIParam_1 SSL_alert_desc_string_APIParam_1 SSL_alert_type_string_APIParam_1 does not contain a correct alert message.,This indicates that no description is available for this alert type. Probably SSL_alert_desc_string_long_APIParam_1 SSL_alert_type_string_long_APIParam_1 SSL_alert_desc_string_APIParam_1 SSL_alert_type_string_APIParam_1 does not contain a correct alert message.
0,9,The verification succeeded or no peer certificate was presented,,,null,The verification succeeded or no peer certificate was presented.,The verification succeeded or no peer certificate was presented.
0,9,A structure defined with the data that each lock needs to handle,,,null,A structure defined with the data that each lock needs to handle.,A structure defined with the data that each lock needs to handle.
0,9,"A certificate was corrupt , contained signatures that did not verify correctly , etc",,,null,"A certificate was corrupt, contained signatures that did not verify correctly, etc","A certificate was corrupt, contained signatures that did not verify correctly, etc"
0,9,The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol,,,null,The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol,The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the return value ret to find out the reason.
0,9,The write operation was not successful,,,null,"The write operation was not successful , was closed , an error occurred or action must be taken by the calling process","The write operation was not successful, because either the connection was closed, an error occurred or action must be taken by the calling process. Call SSL_get_error() with the return value ret to find out the reason."
0,9,The shutdown was not successful,,,null,The shutdown was not successful,The shutdown was not successful because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown can also occur if action is need to continue the operation for non-blocking BIOs. Call SSL_get_error(3) with the return value ret to find out the reason.
0,8,then the cause is an error condition,,,If BIO_should_retry_APIName is false,"If BIO_should_retry_APIName is false ,then the cause is an error condition.","If BIO_should_retry_APIName is false ,then the cause is an error condition."
0,8,stored sessions will not be reused ,1,,"If the session id context is not set on an SSL/TLS server and client certificates are used , stored sessions","If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.","If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail."
0,8,the certificates above the limit are ignored,,,If the certificate chain is longer than allowed,"If the certificate chain is longer than allowed, the certificates above the limit are ignored.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,8,Error messages are generated,1,,as if these certificates would not be present,"Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,8,This message is generally a warning,,,null,This message is generally a warning.,"This handshake is being canceled for some reason unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning."
0,0,These functions are an implementation of MDC2 with DES,,,null,These functions are an implementation of MDC2 with DES.,MDC2 is a method to construct hash functions with 128 bit output from block ciphers. These functions are an implementation of MDC2 with DES.
0,8,This is typically done with file BIOs,,,null,This is typically done with file BIOs.,"If the underlying I/O structure is in a blocking mode ,almost all current BIO types will not request a retry, because the underlying I/O calls will not. If the application knows that the BIO type will never signal a retry then the application need not call BIO_should_retry_APIName after a failed BIO I/O call. This is typically done with file BIOs."
0,0,The following functions are implemented in C,,,null,The following functions are implemented in C:,The following functions are implemented in C:
0,8,All other implementations are based on this one,,,null,All other implementations are based on this one.,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation. All other implementations are based on this one. EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery_APIName ). EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new_APIName ).
0,8,"The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task , eg by ENGINE_get_default_RSA_APIName , ENGINE_get_default_cipher_engine_APIName , etc",,,null,"The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task, eg by ENGINE_get_default_RSA_APIName, ENGINE_get_default_cipher_engine_APIName, etc.","The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task, eg by ENGINE_get_default_RSA_APIName, ENGINE_get_default_cipher_engine_APIName, etc. These are discussed in the next section, though they are not usually required by application programmers as they are used automatically when creating and using the relevant algorithm-specific types in OpenSSL, such as RSA, DSA, EVP_CIPHER_CTX, etc."
0,8,This is often not desirable,,,null,This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.,It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data. This depends on the behaviour of the platforms I/O functions. This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.
0,8,SSL BIOs are the only current exception to this rule,,,null,SSL BIOs are the only current exception to this rule : SSL BIOs can request a retry  .,"SSL BIOs are the only current exception to this rule: SSL BIOs can request a retry even if the underlying I/O structure is blocking, if a handshake occurs during a call to BIO_read_APIName. An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure."
0,8,no configuration takes place,,,If called before OPENSSL_config_APIName,If called before OPENSSL_config_APIName no configuration takes place.,OPENSSL_no_config_APIName disables configuration. If called before OPENSSL_config_APIName no configuration takes place.
0,8,OPENSSL_VERSION_NUMBER is a numeric release version identifier,,,null,OPENSSL_VERSION_NUMBER is a numeric release version identifier:,OPENSSL_VERSION_NUMBER is a numeric release version identifier:
0,8,"Netscape-Commerce/1 .12 , , accepts a 32 byte challenge but appears to only use 16 bytes when generating the encryption keys",,,when talking SSLv2,"Netscape-Commerce/1.12, when talking SSLv2, accepts a 32 byte challenge but then appears to only use 16 bytes when generating the encryption keys.","Netscape-Commerce/1.12, when talking SSLv2, accepts a 32 byte challenge but then appears to only use 16 bytes when generating the encryption keys. Using 16 bytes is ok but it should be ok to use 32. According to the SSLv3 spec, one should use 32 bytes for the challenge when operating in SSLv2/v3 compatibility mode, but as mentioned above, this breaks this server so 16 bytes is the way to go."
0,8,a call to select_APIName may be made to wait until data is available and retry the BIO operation,,,if the cause is ultimately a socket and BIO_should_read_APIName is true,For example if the cause is ultimately a socket and BIO_should_read_APIName is true then a call to select_APIName may be made to wait until data is available and then retry the BIO operation.,"For example if the cause is ultimately a socket and BIO_should_read_APIName is true then a call to select_APIName may be made to wait until data is available and then retry the BIO operation. By combining the retry conditions of several non blocking BIOs in a single select_APIName call it is possible to service several BIOs in a single thread, though the performance may be poor if SSL BIOs are present because long delays can occur during the initial handshake process."
0,7,A negative value indicates an error other that signature verification failure,,,null,A negative value indicates an error other that signature verification failure.,A negative value indicates an error other that signature verification failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
0,7,"Again , the EC library will not use this seed value",,,null,"Again , the EC library will not use this seed value ,  .","ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,7,this can be highly confusing,,,if the target is a muticharacter string type like a BMPString or a UTF8String,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice. X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.
0,7,The function EVP_PKEY_encrypt_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_encrypt_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_encrypt_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,7,An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure,,,null,An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure.,"SSL BIOs are the only current exception to this rule: SSL BIOs can request a retry even if the underlying I/O structure is blocking, if a handshake occurs during a call to BIO_read_APIName. An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure."
0,7,EVP_DigestFinal_APIName is similar to EVP_DigestFinal_ex_APIName except the digest context EVP_DigestFinal_APIParam_1 EVP_DigestFinal_ex_APIParam_1 is automatically cleaned up,,,null,EVP_DigestFinal_APIName is similar to EVP_DigestFinal_ex_APIName except the digest context EVP_DigestFinal_APIParam_1 EVP_DigestFinal_ex_APIParam_1 is automatically cleaned up.,EVP_DigestFinal_APIName is similar to EVP_DigestFinal_ex_APIName except the digest context EVP_DigestFinal_APIParam_1 EVP_DigestFinal_ex_APIParam_1 is automatically cleaned up.
0,7,X509_NAME_print_ex_fp_APIName is identical to X509_NAME_print_ex_APIName except the output is written to FILE pointer X509_NAME_print_ex_fp_APIParam_1,,,null,X509_NAME_print_ex_fp_APIName is identical to X509_NAME_print_ex_APIName except the output is written to FILE pointer X509_NAME_print_ex_fp_APIParam_1.,X509_NAME_print_ex_fp_APIName is identical to X509_NAME_print_ex_APIName except the output is written to FILE pointer X509_NAME_print_ex_fp_APIParam_1.
0,0,Check the error stack to find out why,,,"if SSL_set_fd, SSL_set_rfd and SSL_set_wfd return 0",Check the error stack to find out why.,The operation failed. Check the error stack to find out why.
0,0,SSL_read_APIName can be called without blocking or actually receiving new data from the underlying socket,,,null,In this case SSL_read_APIName can be called without blocking or actually receiving new data from the underlying socket.,SSL_pending_APIName can be used to find out whether there are buffered bytes available for immediate retrieval. In this case SSL_read_APIName can be called without blocking or actually receiving new data from the underlying socket.
0,0,The main purpose of these functions is to enable an application to lookup signers certificates using any appropriate technique,,,when the simpler method of CMS_verify_APIName is not appropriate,The main purpose of these functions is to enable an application to lookup signers certificates using any appropriate technique when the simpler method of CMS_verify_APIName is not appropriate.,The main purpose of these functions is to enable an application to lookup signers certificates using any appropriate technique when the simpler method of CMS_verify_APIName is not appropriate.
0,0,The private key is a random integer,,1,null,"The private key is a random integer (0 < priv_key < order, where order is the order of the EC_GROUP object).","EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object. EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling this function. The private key is a random integer (0 < priv_key < order, where order is the order of the EC_GROUP object). The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key."
0,1,The format of the string is described in ciphers_APIName,,,null,The format of the string is described in ciphers_APIName .,SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2. The format of the string is described in ciphers_APIName . The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1.
0,1,RC4 is a stream cipher with variable key length,,,null,RC4 is a stream cipher with variable key length.,"RC4 is a stream cipher with variable key length. Typically, 128 bit (16 byte) keys are used for strong encryption, but shorter insecure key sizes have been widely used due to export restrictions."
0,0,Failure is only flagged,,1,if no ciphers could be collected at all,Failure is only flagged if no ciphers could be collected at all.,"The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration (ciphers compiled in). Thus no syntax checking takes place. Items that are not recognized, because the corresponding ciphers are not compiled in or because the corresponding ciphers are mistyped, are simply ignored. Failure is only flagged if no ciphers could be collected at all."
0,0,The error code can be obtained by ERR_get_error_APIName,,,null,The error code can be obtained by ERR_get_error_APIName .,"RAND_bytes_APIName and RAND_priv_bytes_APIName return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure. The error code can be obtained by ERR_get_error_APIName ."
0,0,BN_swap_APIName exchanges the values of BN_swap_APIParam_1 and BN_swap_APIParam_2,,,null,BN_swap_APIName exchanges the values of BN_swap_APIParam_1 and BN_swap_APIParam_2.,BN_swap_APIName exchanges the values of BN_swap_APIParam_1 and BN_swap_APIParam_2.
0,0,BIO_set_fp_APIName set the fp of a file BIO to BIO_set_fp_APIParam_2,,,null,BIO_set_fp_APIName set the fp of a file BIO to BIO_set_fp_APIParam_2.,"BIO_set_fp_APIName set the fp of a file BIO to BIO_set_fp_APIParam_2. BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 has the same meaning as in BIO_new_fp_APIName, BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 is a macro."
0,0,The X509_check_ip_asc_APIParam_3 argument can be the bitwise OR of the flags,,,null,The X509_check_ip_asc_APIParam_3 argument can be the bitwise OR of the flags:,The X509_check_ip_asc_APIParam_3 argument is usually 0. The X509_check_ip_asc_APIParam_3 argument can be the bitwise OR of the flags:
0,0,the OID for commonName has the following definitions,,,null,For example the OID for commonName has the following definitions:,For example the OID for commonName has the following definitions:
0,0,Blowfish can be used in the same modes as DES,,,null,Blowfish can be used in the same modes as DES (see des_modes_APIName ).,"Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption. Blowfish can be used in the same modes as DES (see des_modes_APIName ). Blowfish is currently one of the faster block ciphers. Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2."
0,0,SSL_CTX_set0_chain_cert_store_APIName and SSL_CTX_set1_chain_cert_store_APIName set the certificate store used for certificate chain building to SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2,,,null,SSL_CTX_set0_chain_cert_store_APIName and SSL_CTX_set1_chain_cert_store_APIName set the certificate store used for certificate chain building to SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2.,SSL_CTX_set0_chain_cert_store_APIName and SSL_CTX_set1_chain_cert_store_APIName set the certificate store used for certificate chain building to SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2.
0,0,"In OpenSSL , the type X509_REQ is used to express such a certificate request",,,null,"In OpenSSL, the type X509_REQ is used to express such a certificate request.","A related structure is a certificate request, defined in PKCS#10 from RSA Security, Inc, also reflected in RFC2896. In OpenSSL, the type X509_REQ is used to express such a certificate request."
0,0,Blowfish is currently one of the faster block ciphers,,,null,Blowfish is currently one of the faster block ciphers.,"Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption. Blowfish can be used in the same modes as DES (see des_modes_APIName ). Blowfish is currently one of the faster block ciphers. Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2."
0,0,The call to EVP_VerifyFinal_APIName internally finalizes a copy of the digest context,,,null,The call to EVP_VerifyFinal_APIName internally finalizes a copy of the digest context.,The call to EVP_VerifyFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.
0,0,BIO_new_ssl_connect_APIName creates a new BIO chain consisting of an SSL BIO followed by a connect BIO,,,null,BIO_new_ssl_connect_APIName creates a new BIO chain consisting of an SSL BIO (using BIO_new_ssl_connect_APIParam_1) followed by a connect BIO.,BIO_new_ssl_connect_APIName creates a new BIO chain consisting of an SSL BIO (using BIO_new_ssl_connect_APIParam_1) followed by a connect BIO.
0,0,The connection uses the SSLv2 protocol,,,null,The connection uses the SSLv2 protocol.,The connection uses the SSLv2 protocol.
2,0,The X509_check_ip_asc_APIParam_3 argument is usually 0,,,null,The X509_check_ip_asc_APIParam_3 argument is usually 0.,The X509_check_ip_asc_APIParam_3 argument is usually 0. The X509_check_ip_asc_APIParam_3 argument can be the bitwise OR of the flags:
0,0,The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT into the affine co-ordinate system,,,null,The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT(s) into the affine co-ordinate system.,The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT(s) into the affine co-ordinate system. In the case of EC_POINTs_make_affine the value EC_POINTs_mul_APIParam_4 EC_POINTs_make_affine_APIParam_2 provides the number of points in the array EC_POINTs_make_affine_APIParam_3 to be forced.
0,0,EVP_SignInit_APIName initializes a signing context EVP_SignInit_APIParam_1 to use the default implementation of digest EVP_SignInit_APIParam_2,,,null,EVP_SignInit_APIName initializes a signing context EVP_SignInit_APIParam_1 to use the default implementation of digest EVP_SignInit_APIParam_2.,EVP_SignInit_APIName initializes a signing context EVP_SignInit_APIParam_1 to use the default implementation of digest EVP_SignInit_APIParam_2.
0,0,EC_GROUP_free frees the memory associated with the EC_GROUP,,,null,EC_GROUP_free frees the memory associated with the EC_GROUP.,EC_GROUP_free frees the memory associated with the EC_GROUP.
0,0,The record has been completely processed,,,null,The record has been completely processed.,The record has been completely processed.
0,0,These values reflect the underlying lseek_APIName behaviour,,,null,These values reflect the underlying lseek_APIName behaviour.,BIO_reset_APIName returns zero for success and -1 if an error occurred. BIO_seek_APIName and BIO_tell_APIName return the current file position or -1 if an error occurred. These values reflect the underlying lseek_APIName behaviour.
0,0,EVP_CIPHER_CTX_set_key_length_APIName sets the key length of the cipher ctx,,,null,EVP_CIPHER_CTX_set_key_length_APIName sets the key length of the cipher ctx.,"EVP_CIPHER_CTX_set_key_length_APIName sets the key length of the cipher ctx. If the cipher is a fixed length cipher ,then attempting to set the key length to any value other than the fixed value is an error."
0,0,A point is set to be at infinity by calling EC_POINT_set_to_infinity,,,null,A point is set to be at infinity by calling EC_POINT_set_to_infinity.,A valid point on a curve is the special point at infinity. A point is set to be at infinity by calling EC_POINT_set_to_infinity.
0,0,A valid point on a curve is the special point at infinity,,,null,A valid point on a curve is the special point at infinity.,A valid point on a curve is the special point at infinity. A point is set to be at infinity by calling EC_POINT_set_to_infinity.
0,0,The expiration time of a single session can be modified using the SSL_SESSION_get_time_APIName family of functions,,,null,The expiration time of a single session can be modified using the SSL_SESSION_get_time_APIName family of functions.,The expiration time of a single session can be modified using the SSL_SESSION_get_time_APIName family of functions.
0,0,There is no way to restrict the list of compression methods supported on a per connection basis,,,null,There is no way to restrict the list of compression methods supported on a per connection basis.,An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression when a matching identifier is found. There is no way to restrict the list of compression methods supported on a per connection basis.
0,0,SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1,,,null,SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1.,SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1. SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1. If SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 is NULL the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted.
0,0,MDC2_Init_APIName initializes a MDC2_Init_APIParam_1 structure,,,null,MDC2_Init_APIName initializes a MDC2_Init_APIParam_1 structure.,MDC2_Init_APIName initializes a MDC2_Init_APIParam_1 structure.
0,0,SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1,,,null,SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1.,SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1. SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1. If SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 is NULL the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted.
0,0,"EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName , EVP_PKEY_assign_EC_KEY_APIName , EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName are implemented as macros",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName are implemented as macros.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName are implemented as macros."
0,0,instead of calling the hash functions directly,,,null,instead of calling the hash functions directly.,Applications should use the higher level functions EVP_DigestInit_APIName etc. instead of calling the hash functions directly.
0,0,"Blowfish is quite a bit faster than DES , and much faster than IDEA or RC2",,,null,"Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2.","Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption. Blowfish can be used in the same modes as DES (see des_modes_APIName ). Blowfish is currently one of the faster block ciphers. Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2."
0,0,The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1,,,null,The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1.,"SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1. The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1. If a session with the same session id already exists, the old session is removed by calling SSL_SESSION_free_APIName ."
0,0,Client sessions are added to the session cache,,,null,Client sessions are added to the session cache.,"Client sessions are added to the session cache. As there is no reliable way for the OpenSSL library to know whether a session should be reused or which session to choose (due to the abstract BIO layer the SSL engine does not have details about the connection), the application must select the session to be reused by using the SSL_set_session_APIName function. This option is not activated by default."
0,0,function and reason codes are unique within each sub-library,,,null,Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library.,Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library. Note that different libraries may use the same value to signal different functions and reasons.
0,0,"For now , it understands two commands",,,null,"For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not.","UI_ctrl_APIName adds extra control for the application author. For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not."
0,0,This option is not activated by default,,,null,This option is not activated by default.,"Client sessions are added to the session cache. As there is no reliable way for the OpenSSL library to know whether a session should be reused or which session to choose (due to the abstract BIO layer the SSL engine does not have details about the connection), the application must select the session to be reused by using the SSL_set_session_APIName function. This option is not activated by default."
0,0,SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1,,,null,SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1.,"SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1. The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1. If a session with the same session id already exists, the old session is removed by calling SSL_SESSION_free_APIName ."
0,0,the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted,,,If SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 is NULL,If SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 is NULL the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted.,SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1. SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1. If SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 is NULL the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted.
0,0,Each sub-library of OpenSSL has a unique library number,,,null,Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library.,Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library. Note that different libraries may use the same value to signal different functions and reasons.
0,0,In the case of EC_POINTs_make_affine the value EC_POINTs_mul_APIParam_4 EC_POINTs_make_affine_APIParam_2 provides the number of points in the array EC_POINTs_make_affine_APIParam_3 to be forced,,,null,In the case of EC_POINTs_make_affine the value EC_POINTs_mul_APIParam_4 EC_POINTs_make_affine_APIParam_2 provides the number of points in the array EC_POINTs_make_affine_APIParam_3 to be forced.,The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT(s) into the affine co-ordinate system. In the case of EC_POINTs_make_affine the value EC_POINTs_mul_APIParam_4 EC_POINTs_make_affine_APIParam_2 provides the number of points in the array EC_POINTs_make_affine_APIParam_3 to be forced.
0,0,"Blowfish uses a variable size key , but typically , 128 bit keys are considered good for strong encryption",,,null,"Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption.","Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption. Blowfish can be used in the same modes as DES (see des_modes_APIName ). Blowfish is currently one of the faster block ciphers. Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2."
0,0,an ephemeral RSA key exchange can take place,,,When using a cipher with RSA authentication,"When using a cipher with RSA authentication, an ephemeral RSA key exchange can take place.","When using a cipher with RSA authentication, an ephemeral RSA key exchange can take place. In this case the session data are negotiated using the ephemeral/temporary RSA key and the RSA key supplied and certified by the certificate chain is only used for signing."
0,0,it will not be included,,,If any of these algorithms is disabled,"If any of these algorithms is disabled, then it will not be included.","If present the SMIMECapabilities attribute indicates support for the following algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is disabled, then it will not be included."
0,0,OBJ_cmp_APIName compares OBJ_cmp_APIParam_1 to OBJ_cmp_APIParam_2,,,null,OBJ_cmp_APIName compares OBJ_cmp_APIParam_1 to OBJ_cmp_APIParam_2.,OBJ_cmp_APIName compares OBJ_cmp_APIParam_1 to OBJ_cmp_APIParam_2. If the two are identical 0 is returned.
0,0,The PRNG state is not considered,,,null,The PRNG state is not considered.,"RAND_query_egd_bytes_APIName returns the number of bytes read from the daemon on success, and -1 if the connection failed. The PRNG state is not considered."
0,0,"triple DES , 128 bit RC2 , 64 bit RC2 , DES and 40 bit RC2",,,null,"If present the SMIMECapabilities attribute indicates support for the following algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2.","If present the SMIMECapabilities attribute indicates support for the following algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is disabled, then it will not be included."
0,0,Reset SSL_clear_APIParam_1 to allow another connection,,,null,Reset SSL_clear_APIParam_1 to allow another connection.,"Reset SSL_clear_APIParam_1 to allow another connection. All settings (method, ciphers, BIOs) are kept."
0,0,"To handle some complex parts of a certificate , there are the types X509_NAME , X509_ATTRIBUTE , X509_EXTENSION and a few more",,,null,"To handle some complex parts of a certificate, there are the types X509_NAME (to express a certificate name), X509_ATTRIBUTE (to express a certificate attributes), X509_EXTENSION (to express a certificate extension) and a few more.","To handle some complex parts of a certificate, there are the types X509_NAME (to express a certificate name), X509_ATTRIBUTE (to express a certificate attributes), X509_EXTENSION (to express a certificate extension) and a few more."
0,0,An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression,,,when a matching identifier is found,An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression when a matching identifier is found.,An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression when a matching identifier is found. There is no way to restrict the list of compression methods supported on a per connection basis.
0,0,"A related structure is a certificate request , defined in PKCS # 10 from RSA Security , Inc , also reflected in RFC2896",,,null,"A related structure is a certificate request, defined in PKCS#10 from RSA Security, Inc, also reflected in RFC2896.","A related structure is a certificate request, defined in PKCS#10 from RSA Security, Inc, also reflected in RFC2896. In OpenSSL, the type X509_REQ is used to express such a certificate request."
0,0,the old session is removed by calling SSL_SESSION_free_APIName,,,If a session with the same session id already exists,"If a session with the same session id already exists, the old session is removed by calling SSL_SESSION_free_APIName .","SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1. The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1. If a session with the same session id already exists, the old session is removed by calling SSL_SESSION_free_APIName ."
0,0,The error can be obtained from ERR_get_error_APIName,,,null,The error can be obtained from ERR_get_error_APIName.,CMS_compress_APIName returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error_APIName.
0,0,The names of these functions are perhaps a little misleading,,,null,The names of these functions are perhaps a little misleading.,"The names of these functions are perhaps a little misleading. BIO_push_APIName joins two BIO chains whereas BIO_pop_APIName deletes a single BIO from a chain, the deleted BIO does not need to be at the end of a chain."
0,0,All settings are kept,,,null,"All settings (method, ciphers, BIOs) are kept.","Reset SSL_clear_APIParam_1 to allow another connection. All settings (method, ciphers, BIOs) are kept."
0,0,"Alternatively , the EGD-interface compatible daemon PRNGD can be used",,,null,"Alternatively, the EGD-interface compatible daemon PRNGD can be used.","Alternatively, the EGD-interface compatible daemon PRNGD can be used. the EGD-interface compatible daemon PRNGD is available from http://prngd.sourceforge.net/ . PRNGD does employ an internal PRNG itself and can therefore never run out of entropy."
0,0,SSL_CTX_set_default_passwd_cb_APIName and SSL_CTX_set_default_passwd_cb_userdata_APIName do not provide diagnostic information,,,null,SSL_CTX_set_default_passwd_cb_APIName and SSL_CTX_set_default_passwd_cb_userdata_APIName do not provide diagnostic information.,SSL_CTX_set_default_passwd_cb_APIName and SSL_CTX_set_default_passwd_cb_userdata_APIName do not provide diagnostic information.
0,0,OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure,,,null,OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure.,"OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure. If OBJ_txt2obj_APIParam_2 is 0 ,then long names and short names will be interpreted as well as numerical forms. If OBJ_txt2obj_APIParam_2 is 1 ,only the numerical form is acceptable."
0,0,"EVP_SignFinal_APIParam_3 is an OUT paramter , and not used as an IN parameter",,,null,"EVP_SignFinal_APIParam_3 is an OUT paramter, and not used as an IN parameter.","EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2. EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size(pkey) bytes in size. EVP_SignFinal_APIParam_3 is an OUT paramter, and not used as an IN parameter. The number of bytes of data written (ie the length of the signature) will be written to the integer at EVP_SignFinal_APIParam_3, at most EVP_PKEY_size(pkey) bytes will be written."
0,0,EVP_VerifyUpdate_APIName hashes EVP_VerifyUpdate_APIParam_3 bytes of data at EVP_VerifyUpdate_APIParam_2 into the verification context EVP_VerifyUpdate_APIParam_1,,,null,EVP_VerifyUpdate_APIName hashes EVP_VerifyUpdate_APIParam_3 bytes of data at EVP_VerifyUpdate_APIParam_2 into the verification context EVP_VerifyUpdate_APIParam_1.,EVP_VerifyUpdate_APIName hashes EVP_VerifyUpdate_APIParam_3 bytes of data at EVP_VerifyUpdate_APIParam_2 into the verification context EVP_VerifyUpdate_APIParam_1. This function can be called several times on the same EVP_VerifyUpdate_APIParam_1 to include additional data.
0,0,SSL_get0_session_APIName is the same as SSL_get_session_APIName,,,null,SSL_get0_session_APIName is the same as SSL_get_session_APIName.,SSL_get0_session_APIName is the same as SSL_get_session_APIName.
0,0,"d2i_RSAPrivateKey_APIName , i2d_RSAPrivateKey_APIName decode and encode a PKCS # 1 RSAPrivateKey structure",,,null,"d2i_RSAPrivateKey_APIName, i2d_RSAPrivateKey_APIName decode and encode a PKCS#1 RSAPrivateKey structure.","d2i_RSAPrivateKey_APIName, i2d_RSAPrivateKey_APIName decode and encode a PKCS#1 RSAPrivateKey structure."
0,0,DH_generate_parameters_ex_APIParam_2 is the length in bits of the safe prime to be generated,,,null,DH_generate_parameters_ex_APIParam_2 is the length in bits of the safe prime to be generated.,"DH_generate_parameters_ex_APIParam_2 is the length in bits of the safe prime to be generated. DH_generate_parameters_ex_APIParam_3 is a small number > 1, typically 2 or 5."
0,0,This function can be called several times on the same EVP_VerifyUpdate_APIParam_1 to include additional data,,,null,This function can be called several times on the same EVP_VerifyUpdate_APIParam_1 to include additional data.,EVP_VerifyUpdate_APIName hashes EVP_VerifyUpdate_APIParam_3 bytes of data at EVP_VerifyUpdate_APIParam_2 into the verification context EVP_VerifyUpdate_APIParam_1. This function can be called several times on the same EVP_VerifyUpdate_APIParam_1 to include additional data.
0,0,BUF_MEM_free_APIName frees up an already existing buffer,,,null,BUF_MEM_free_APIName frees up an already existing buffer.,BUF_MEM_free_APIName frees up an already existing buffer. The data is zeroed before freeing up in case the buffer contains sensitive data.
0,0,CONF_modules_free_APIName closes down and frees up all memory allocated by all configuration modules,,,null,CONF_modules_free_APIName closes down and frees up all memory allocated by all configuration modules.,CONF_modules_free_APIName closes down and frees up all memory allocated by all configuration modules.
0,0,The call to EVP_SignFinal_APIName internally finalizes a copy of the digest context,,,null,The call to EVP_SignFinal_APIName internally finalizes a copy of the digest context.,The call to EVP_SignFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_SignUpdate_APIName and EVP_SignFinal_APIName can be called later to digest and sign additional data.
0,0,The EVP signature routines are a high level interface to digital signatures,,,null,The EVP signature routines are a high level interface to digital signatures.,The EVP signature routines are a high level interface to digital signatures.
0,0,bn_print_APIName prints bn_print_APIParam_1 to stderr,,,null,bn_print_APIName prints bn_print_APIParam_1 to stderr.,"bn_print_APIName prints bn_print_APIParam_1 to stderr. bn_dump_APIName prints bn_dump_APIParam_2 words at bn_dump_APIParam_1 (in reverse order, ie most significant word first) to stderr."
0,0,EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2,,,null,EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2.,"EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2. EVP_SignFinal_APIParam_2 must be at least EVP_PKEY_size(pkey) bytes in size. EVP_SignFinal_APIParam_3 is an OUT paramter, and not used as an IN parameter. The number of bytes of data written (ie the length of the signature) will be written to the integer at EVP_SignFinal_APIParam_3, at most EVP_PKEY_size(pkey) bytes will be written."
0,0,i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is not incremented and it points to the start of the data just written,,,null,In this case i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is not incremented and it points to the start of the data just written.,For OpenSSL 0.9.7 and later if i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is NULL memory will be allocated for a buffer and the encoded data written to it. In this case i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is not incremented and it points to the start of the data just written.
0,0,bn_dump_APIName prints bn_dump_APIParam_2 words at bn_dump_APIParam_1 to stderr,,,null,"bn_dump_APIName prints bn_dump_APIParam_2 words at bn_dump_APIParam_1 (in reverse order, ie most significant word first) to stderr.","bn_print_APIName prints bn_print_APIParam_1 to stderr. bn_dump_APIName prints bn_dump_APIParam_2 words at bn_dump_APIParam_1 (in reverse order, ie most significant word first) to stderr."
0,0,This library contains a fast implementation of the DES encryption algorithm,,,null,This library contains a fast implementation of the DES encryption algorithm.,This library contains a fast implementation of the DES encryption algorithm.
0,0,The standard calls BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName can be used to determine the amount of pending data in the read or write buffer,,,null,The standard calls BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName can be used to determine the amount of pending data in the read or write buffer.,The standard calls BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName can be used to determine the amount of pending data in the read or write buffer.
0,0,but wildcards may match part of that label with an explicit prefix or suffix,,,null,"By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix.","X509_check_host_APIName checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified host name, which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034. By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix. For example, by default, the host X509_check_host_APIParam_2 ""www.example.com"" would match a certificate with a SAN or CN value of ""*.example.com"", ""w*.example.com"" or ""*w.example.com""."
0,0,The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions,,,null,The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions: after one structure is encoded or decoded another will processed after it.,The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions: after one structure is encoded or decoded another will processed after it.
0,0,X509_STORE_CTX_free_APIName completely frees up X509_STORE_CTX_free_APIParam_1,,,null,X509_STORE_CTX_free_APIName completely frees up X509_STORE_CTX_free_APIParam_1.,X509_STORE_CTX_free_APIName completely frees up X509_STORE_CTX_free_APIParam_1. After this call X509_STORE_CTX_free_APIParam_1 is no longer valid.
0,0,SMIME_read_CMS_APIName parses a message in S/MIME format,,,null,SMIME_read_CMS_APIName parses a message in S/MIME format.,SMIME_read_CMS_APIName parses a message in S/MIME format.
0,0,long names and short names will be interpreted as well as numerical forms,,,If OBJ_txt2obj_APIParam_2 is 0,"If OBJ_txt2obj_APIParam_2 is 0 ,then long names and short names will be interpreted as well as numerical forms.","OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure. If OBJ_txt2obj_APIParam_2 is 0 ,then long names and short names will be interpreted as well as numerical forms. If OBJ_txt2obj_APIParam_2 is 1 ,only the numerical form is acceptable."
0,0,This can either be done automatically,,,whenever 255 new sessions were established or manually by calling SSL_CTX_flush_sessions_APIName,This can either be done automatically whenever 255 new sessions were established (see SSL_CTX_set_session_cache_mode_APIName ) or manually by calling SSL_CTX_flush_sessions_APIName.,"If enabled, the internal session cache will collect all sessions established up to the specified maximum number (see SSL_CTX_sess_set_cache_size_APIName). As sessions will not be reused ones they are expired, they should be removed from the cache to save resources. This can either be done automatically whenever 255 new sessions were established (see SSL_CTX_set_session_cache_mode_APIName ) or manually by calling SSL_CTX_flush_sessions_APIName."
0,0,this callback will be called for each session being freed from SSL_CTX_free_APIParam_1 's session cache,,,If a session-remove callback is set,"If a session-remove callback is set (SSL_CTX_sess_set_remove_cb_APIName), this callback will be called for each session being freed from SSL_CTX_free_APIParam_1's session cache.","If a session-remove callback is set (SSL_CTX_sess_set_remove_cb_APIName), this callback will be called for each session being freed from SSL_CTX_free_APIParam_1's session cache. This implies, that all corresponding sessions from an external session cache are removed as well. If this is not desired, the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb(SSL_CTX_free_APIParam_1, NULL) prior to calling SSL_CTX_free_APIName."
0,0,The shutdown procedure consists of 2 steps,,,null,"The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert.","The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert. According to the TLS standard, it is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response (this way resources can be saved, as the process can already terminate or serve another connection). When the underlying connection shall be used for more communications, the complete shutdown procedure (bidirectional ""close notify"" alerts) must be performed, so that the peers stay synchronized."
0,0,This message is always fatal,,,null,This message is always fatal.,"A valid certificate chain or partial chain was received, but the certificate was not accepted because the CA certificate could not be located or couldn't be matched with a known, trusted CA. This message is always fatal."
0,0,EVP_CIPHER_CTX_init_APIName initializes cipher contex EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_1,,,null,EVP_CIPHER_CTX_init_APIName initializes cipher contex EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_1.,EVP_CIPHER_CTX_init_APIName initializes cipher contex EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_1.
0,0,memory will be allocated for a buffer and the encoded data written to it,1,, if i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is NULL,For OpenSSL 0.9.7 and later if i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is NULL memory will be allocated for a buffer and the encoded data written to it.,For OpenSSL 0.9.7 and later if i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is NULL memory will be allocated for a buffer and the encoded data written to it. In this case i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is not incremented and it points to the start of the data just written.
0,0,"On systems without / dev/random devices providing entropy from the kernel , the EGD entropy gathering daemon can be used to collect entropy",,,null,"On systems without /dev/*random devices providing entropy from the kernel, the EGD entropy gathering daemon can be used to collect entropy.","On systems without /dev/*random devices providing entropy from the kernel, the EGD entropy gathering daemon can be used to collect entropy. the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes. Several chunks can be queried during one connection."
0,0,"by default , the host X509_check_host_APIParam_2 `` www.example.com '' would match a certificate with a SAN or CN value of ''",,,null,"For example, by default, the host X509_check_host_APIParam_2 ""www.example.com"" would match a certificate with a SAN or CN value of ""*.example.com"", ""w*.example.com"" or ""*w.example.com"".","X509_check_host_APIName checks if the certificate Subject Alternative Name (SAN) or Subject CommonName (CN) matches the specified host name, which must be encoded in the preferred name syntax described in section 3.5 of RFC 1034. By default, wildcards are supported and wildcards match only in the left-most label; but wildcards may match part of that label with an explicit prefix or suffix. For example, by default, the host X509_check_host_APIParam_2 ""www.example.com"" would match a certificate with a SAN or CN value of ""*.example.com"", ""w*.example.com"" or ""*w.example.com""."
0,0,ASN1_OBJECT_free_APIName frees up the ASN1_OBJECT_free_APIParam_1 structure ASN1_OBJECT_free_APIParam_1,,,null,ASN1_OBJECT_free_APIName frees up the ASN1_OBJECT_free_APIParam_1 structure ASN1_OBJECT_free_APIParam_1.,ASN1_OBJECT_free_APIName frees up the ASN1_OBJECT_free_APIParam_1 structure ASN1_OBJECT_free_APIParam_1.
0,0,Several chunks can be queried,,,during one connection,Several chunks can be queried during one connection.,"On systems without /dev/*random devices providing entropy from the kernel, the EGD entropy gathering daemon can be used to collect entropy. the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes. Several chunks can be queried during one connection."
0,0,The validity of a chain is determined by checking,1,,"if it matches a supported signature algorithm , supported curves","The validity of a chain is determined by checking if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names.","The validity of a chain is determined by checking if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names."
0,0,SSL_SESSION_free_APIName does not provide diagnostic information,,,null,SSL_SESSION_free_APIName does not provide diagnostic information.,SSL_SESSION_free_APIName does not provide diagnostic information.
0,0,OpenSSL keeps an internal table of digest algorithms and ciphers,,,null,OpenSSL keeps an internal table of digest algorithms and ciphers.,OpenSSL keeps an internal table of digest algorithms and ciphers. OpenSSL uses this table to lookup ciphers via functions such as EVP_get_cipher_byname_APIName.
0,0,Any error can be obtained from ERR_get_error_APIName,,,null,Any error can be obtained from ERR_get_error_APIName,Any error can be obtained from ERR_get_error_APIName
0,0,SSL_set_ssl_method_APIName sets a new TLS/SSL SSL_set_ssl_method_APIParam_2 for a particular SSL_get_ssl_method_APIParam_1 object,,,null,SSL_set_ssl_method_APIName sets a new TLS/SSL SSL_set_ssl_method_APIParam_2 for a particular SSL_get_ssl_method_APIParam_1 object.,"SSL_set_ssl_method_APIName sets a new TLS/SSL SSL_set_ssl_method_APIParam_2 for a particular SSL_get_ssl_method_APIParam_1 object. SSL_get_ssl_method_APIParam_1 object may be reset, when SSL_clear_APIName is called."
0,0,Data can be encrypted using this key,,,null,Data can then be encrypted using this key.,"The EVP envelope routines are a high level interface to envelope encryption. They generate a random key and IV (if required) then ""envelope"" it by using public key encryption. Data can then be encrypted using this key."
0,0,"The SSL engine inherits the behaviour of SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 , respectively",,,null,"The SSL engine inherits the behaviour of SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3, respectively.","The SSL engine inherits the behaviour of SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3, respectively. If a BIO is non-blocking, the SSL_set_bio_APIParam_1 will also have non-blocking behaviour."
0,0,SSL_get_ex_data_APIName is used to retrieve the information for SSL_get_ex_data_APIParam_2 from SSL_get_ex_data_APIParam_1,,,null,SSL_get_ex_data_APIName is used to retrieve the information for SSL_get_ex_data_APIParam_2 from SSL_get_ex_data_APIParam_1.,SSL_get_ex_data_APIName is used to retrieve the information for SSL_get_ex_data_APIParam_2 from SSL_get_ex_data_APIParam_1.
0,0," if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names",,,null,"The validity of a chain is determined by checking if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names.","The validity of a chain is determined by checking if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names."
0,0,The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse,,,null,The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse.,"The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse. The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object."
0,0,The EVP envelope routines are a high level interface to envelope encryption,,,null,The EVP envelope routines are a high level interface to envelope encryption.,"The EVP envelope routines are a high level interface to envelope encryption. They generate a random key and IV (if required) then ""envelope"" it by using public key encryption. Data can then be encrypted using this key."
0,0,SSL_get_ssl_method_APIParam_1 object may be reset,,,when SSL_clear_APIName is called,"SSL_get_ssl_method_APIParam_1 object may be reset, when SSL_clear_APIName is called.","SSL_set_ssl_method_APIName sets a new TLS/SSL SSL_set_ssl_method_APIParam_2 for a particular SSL_get_ssl_method_APIParam_1 object. SSL_get_ssl_method_APIParam_1 object may be reset, when SSL_clear_APIName is called."
0,0,Calling OpenSSL_add_all_algorithms_APIName links in all algorithms,,,null,Calling OpenSSL_add_all_algorithms_APIName links in all algorithms: as a result a statically linked executable can be quite large.,"Calling OpenSSL_add_all_algorithms_APIName links in all algorithms: as a result a statically linked executable can be quite large. If this is important, it is possible to just add the required ciphers and digests."
0,0,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName retrieve an internal pointer to the verification parameters for SSL_CTX_get0_param_APIParam_1 or SSL_get0_param_APIParam_1 respectively,,,null,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName retrieve an internal pointer to the verification parameters for SSL_CTX_get0_param_APIParam_1 or SSL_get0_param_APIParam_1 respectively.,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName retrieve an internal pointer to the verification parameters for SSL_CTX_get0_param_APIParam_1 or SSL_get0_param_APIParam_1 respectively. The returned pointer must not be freed by the calling application.
0,0,SSL_set_shutdown_APIName sets the shutdown state of SSL_set_shutdown_APIParam_1 to SSL_set_shutdown_APIParam_2,,,null,SSL_set_shutdown_APIName sets the shutdown state of SSL_set_shutdown_APIParam_1 to SSL_set_shutdown_APIParam_2.,SSL_set_shutdown_APIName sets the shutdown state of SSL_set_shutdown_APIParam_1 to SSL_set_shutdown_APIParam_2.
0,0,They generate a random key and IV `` envelope '' it by using public key encryption,,,null,"They generate a random key and IV (if required) then ""envelope"" it by using public key encryption.","The EVP envelope routines are a high level interface to envelope encryption. They generate a random key and IV (if required) then ""envelope"" it by using public key encryption. Data can then be encrypted using this key."
0,0,"SSL_CTX_sess_get_new_cb_APIName , SSL_CTX_sess_get_remove_cb_APIName , and SSL_CTX_sess_get_get_cb_APIName allow to retrieve the function pointers of the provided callback functions",,,null,"SSL_CTX_sess_get_new_cb_APIName, SSL_CTX_sess_get_remove_cb_APIName, and SSL_CTX_sess_get_get_cb_APIName allow to retrieve the function pointers of the provided callback functions.","SSL_CTX_sess_get_new_cb_APIName, SSL_CTX_sess_get_remove_cb_APIName, and SSL_CTX_sess_get_get_cb_APIName allow to retrieve the function pointers of the provided callback functions. If a callback function has not been set, the NULL pointer is returned."
0,0,SSL_CTX_set_tmp_dh_APIName sets DH parameters to be used to be SSL_CTX_set_tmp_dh_APIParam_2,,,null,SSL_CTX_set_tmp_dh_APIName sets DH parameters to be used to be SSL_CTX_set_tmp_dh_APIParam_2.,SSL_CTX_set_tmp_dh_APIName sets DH parameters to be used to be SSL_CTX_set_tmp_dh_APIParam_2. The key is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_APIParam_1.
0,0,To support future functionality ,1,,null,To support future functionality if SMIME_read_CMS_APIParam_2 is not NULL SMIME_read_CMS_APIParam_2 should be initialized to NULL.,To support future functionality if SMIME_read_CMS_APIParam_2 is not NULL SMIME_read_CMS_APIParam_2 should be initialized to NULL. For example:
0,0,OpenSSL uses this table to lookup ciphers via functions such as EVP_get_cipher_byname_APIName,,,null,OpenSSL uses this table to lookup ciphers via functions such as EVP_get_cipher_byname_APIName.,OpenSSL keeps an internal table of digest algorithms and ciphers. OpenSSL uses this table to lookup ciphers via functions such as EVP_get_cipher_byname_APIName.
0,0,An EC_POINT represents a point on a curve,,,null,An EC_POINT represents a point on a curve.,An EC_POINT represents a point on a curve. A new point is constructed by calling the function EC_POINT_new and providing the EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_point2oct_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 object that the point relates to.
0,0,The key is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_APIParam_1,,,null,The key is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_APIParam_1.,SSL_CTX_set_tmp_dh_APIName sets DH parameters to be used to be SSL_CTX_set_tmp_dh_APIParam_2. The key is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_APIParam_1.
0,0,lh_node_usage_stats_APIName prints the ` load ' and the ` actual load ',,,null,lh_node_usage_stats_APIName prints the 'load' and the 'actual load'.,"lh_node_usage_stats_APIName prints out a short summary of the state of the hash table. lh_node_usage_stats_APIName prints the 'load' and the 'actual load'. The load is the average number of data items per 'bucket' in the hash table. The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries. So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss."
0,0,BN_nnmod_APIName reduces BN_nnmod_APIParam_2 modulo BN_nnmod_APIParam_3 and places the non-negative remainder in BN_nnmod_APIParam_1,,,null,BN_nnmod_APIName reduces BN_nnmod_APIParam_2 modulo BN_nnmod_APIParam_3 and places the non-negative remainder in BN_nnmod_APIParam_1.,BN_nnmod_APIName reduces BN_nnmod_APIParam_2 modulo BN_nnmod_APIParam_3 and places the non-negative remainder in BN_nnmod_APIParam_1.
0,0,RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3,,,null,RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3.,RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3. RSA_private_decrypt_APIParam_3 must point to a memory section large enough to hold the decrypted data (which is smaller than RSA_size(RSA_private_decrypt_APIParam_4)). RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data.
0,0,the SSL_set_bio_APIParam_1 will also have non-blocking behaviour,,,If a BIO is non-blocking,"If a BIO is non-blocking, the SSL_set_bio_APIParam_1 will also have non-blocking behaviour.","The SSL engine inherits the behaviour of SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3, respectively. If a BIO is non-blocking, the SSL_set_bio_APIParam_1 will also have non-blocking behaviour."
0,0,i2t_ASN1_OBJECT_APIName is the same as OBJ_obj2txt_APIName with the OBJ_obj2txt_APIParam_4 set to zero,,,null,i2t_ASN1_OBJECT_APIName is the same as OBJ_obj2txt_APIName with the OBJ_obj2txt_APIParam_4 set to zero.,i2t_ASN1_OBJECT_APIName is the same as OBJ_obj2txt_APIName with the OBJ_obj2txt_APIParam_4 set to zero.
0,0,SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1,,,null,SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1.,"SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1. The extensions must be in PEM format. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data. Each PEM extension name must begin with the phrase ""BEGIN SERVERINFO FOR ""."
0,0,d2i_DSAPublicKey_APIName and i2d_DSAPublicKey_APIName decode and encode the DSA public key components structure,,,null,d2i_DSAPublicKey_APIName and i2d_DSAPublicKey_APIName decode and encode the DSA public key components structure.,d2i_DSAPublicKey_APIName and i2d_DSAPublicKey_APIName decode and encode the DSA public key components structure.
0,0,"A valid certificate chain or partial chain was received , but the certificate was not accepted , trusted CA",,,null,"A valid certificate chain or partial chain was received , but the certificate was not accepted  , trusted CA .","A valid certificate chain or partial chain was received, but the certificate was not accepted because the CA certificate could not be located or couldn't be matched with a known, trusted CA. This message is always fatal."
0,0,lh_node_usage_stats_APIName prints out a short summary of the state of the hash table,,,null,lh_node_usage_stats_APIName prints out a short summary of the state of the hash table.,"lh_node_usage_stats_APIName prints out a short summary of the state of the hash table. lh_node_usage_stats_APIName prints the 'load' and the 'actual load'. The load is the average number of data items per 'bucket' in the hash table. The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries. So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss."
0,0,BIO_destroy_pair_APIName destroys the association between two connected BIOs,,,null,BIO_destroy_pair_APIName destroys the association between two connected BIOs.,BIO_destroy_pair_APIName destroys the association between two connected BIOs. Freeing up any half of the pair will automatically destroy the association.
0,0,CMS_add0_cert_APIName and CMS_add1_cert_APIName add certificate CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1,,,null,CMS_add0_cert_APIName and CMS_add1_cert_APIName add certificate CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1.,CMS_add0_cert_APIName and CMS_add1_cert_APIName add certificate CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1. must be of type signed data or enveloped data.
0,0,See EC_GROUP_copy_APIName for information about the generator,,,null,See EC_GROUP_copy_APIName for information about the generator.,"The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication, whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done. See EC_GROUP_copy_APIName for information about the generator."
0,0,EVP_DigestSignUpdate_APIName hashes EVP_DigestSignUpdate_APIParam_3 bytes of data at EVP_DigestSignUpdate_APIParam_2 into the signature context EVP_DigestSignUpdate_APIParam_1,,,null,EVP_DigestSignUpdate_APIName hashes EVP_DigestSignUpdate_APIParam_3 bytes of data at EVP_DigestSignUpdate_APIParam_2 into the signature context EVP_DigestSignUpdate_APIParam_1.EVP_DigestSignUpdate_APIName can be called several times on the same EVP_DigestSignUpdate_APIParam_1 to include additional data.,EVP_DigestSignUpdate_APIName hashes EVP_DigestSignUpdate_APIParam_3 bytes of data at EVP_DigestSignUpdate_APIParam_2 into the signature context EVP_DigestSignUpdate_APIParam_1.EVP_DigestSignUpdate_APIName can be called several times on the same EVP_DigestSignUpdate_APIParam_1 to include additional data. EVP_DigestSignUpdate_APIName is currently implemented usig a macro.
0,0,The lh_node_usage_stats_APIParam_1 lh_node_stats_APIParam_1 lh_stats_bio_APIParam_1 lh_stats_APIParam_1 lh_node_usage_stats_bio_APIParam_1 lh_node_stats_bio_APIParam_1 structure records statistics about most aspects of accessing the hash table,,,null,The lh_node_usage_stats_APIParam_1 lh_node_stats_APIParam_1 lh_stats_bio_APIParam_1 lh_stats_APIParam_1 lh_node_usage_stats_bio_APIParam_1 lh_node_stats_bio_APIParam_1 structure records statistics about most aspects of accessing the hash table.,The lh_node_usage_stats_APIParam_1 lh_node_stats_APIParam_1 lh_stats_bio_APIParam_1 lh_stats_APIParam_1 lh_node_usage_stats_bio_APIParam_1 lh_node_stats_bio_APIParam_1 structure records statistics about most aspects of accessing the hash table. This is mostly a legacy of Eric Young writing this library for the reasons of implementing what looked like a nice algorithm rather than for a particular software product.
0,0,The load is the average number of data items per ` bucket ' in the hash table,,,null,The load is the average number of data items per 'bucket' in the hash table.,"lh_node_usage_stats_APIName prints out a short summary of the state of the hash table. lh_node_usage_stats_APIName prints the 'load' and the 'actual load'. The load is the average number of data items per 'bucket' in the hash table. The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries. So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss."
0,0,EVP_DigestSignUpdate_APIName is currently implemented usig a macro,,,null,EVP_DigestSignUpdate_APIName is currently implemented usig a macro.,EVP_DigestSignUpdate_APIName hashes EVP_DigestSignUpdate_APIParam_3 bytes of data at EVP_DigestSignUpdate_APIParam_2 into the signature context EVP_DigestSignUpdate_APIParam_1.EVP_DigestSignUpdate_APIName can be called several times on the same EVP_DigestSignUpdate_APIParam_1 to include additional data. EVP_DigestSignUpdate_APIName is currently implemented usig a macro.
0,0,It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type_APIName to find all BIOs of a certain type,,,null,It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type_APIName to find all BIOs of a certain type.,BIO_next_APIName returns the next BIO in a chain. It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type_APIName to find all BIOs of a certain type.
0,0,the recipients certificate is needed to locate the appropriate recipients in the PKCS # 7 structure,,,null," , the recipients certificate is needed to locate the appropriate recipients in the PKCS # 7 structure .","Although the recipients certificate is not needed to decrypt the data, the recipients certificate is needed to locate the appropriate (of possible several) recipients in the PKCS#7 structure."
0,0,it is possible to just add the required ciphers and digests,,,If this is important,"If this is important, it is possible to just add the required ciphers and digests.","Calling OpenSSL_add_all_algorithms_APIName links in all algorithms: as a result a statically linked executable can be quite large. If this is important, it is possible to just add the required ciphers and digests."
0,0,this can be done by prepending a buffering BIO,,,If an application needs to call BIO_gets_APIName or BIO_puts_APIName through a chain containing digest BIOs,"If an application needs to call BIO_gets_APIName or BIO_puts_APIName through a chain containing digest BIOs ,then this can be done by prepending a buffering BIO.","If an application needs to call BIO_gets_APIName or BIO_puts_APIName through a chain containing digest BIOs ,then this can be done by prepending a buffering BIO."
0,0,the sessions are unique for each SSL_CTX object,,,null,"The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object.","The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse. The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object."
0,0,The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1,,,if more than one SSL_CTX object is being maintained,"The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object.","The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse. The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1, if more than one SSL_CTX object is being maintained, the sessions are unique for each SSL_CTX object."
0,0,"SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1 , and and removes the SSL_CTX object",1,,null,"SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1, and removes the SSL_CTX object pointed to by SSL_CTX_free_APIParam_1 and frees up the allocated memory if the the reference count has reached 0.","SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1, and removes the SSL_CTX object pointed to by SSL_CTX_free_APIParam_1 and frees up the allocated memory if the the reference count has reached 0."
0,0,then only those contained in the key will be printed,1,,If the key does not include all the components indicated by the function,"If the key does not include all the components indicated by the function, then only those contained in the key will be printed.","If the key does not include all the components indicated by the function, then only those contained in the key will be printed. For example passing a public key to EVP_PKEY_print_private_APIName will only print the public components."
0,0,frees up the allocated memory,1,,if the the reference count has reached 0,"SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1, and removes the SSL_CTX object pointed to by SSL_CTX_free_APIParam_1 and frees up the allocated memory if the the reference count has reached 0.","SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1, and removes the SSL_CTX object pointed to by SSL_CTX_free_APIParam_1 and frees up the allocated memory if the the reference count has reached 0."
0,0,ERR_free_strings_APIName frees all previously loaded error strings,,,null,ERR_free_strings_APIName frees all previously loaded error strings.,ERR_free_strings_APIName frees all previously loaded error strings.
0,0,So the 'actual load' is the average number of searches that will need to find an item in the hash table,1,,while the ` load ' is the average number that will be done to record a miss,"So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss.","lh_node_usage_stats_APIName prints out a short summary of the state of the hash table. lh_node_usage_stats_APIName prints the 'load' and the 'actual load'. The load is the average number of data items per 'bucket' in the hash table. The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries. So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss."
0,0,This function is effectively a version of the d2i_PKCS7_bio_APIName supporting streaming,,,null,This function is effectively a version of the d2i_PKCS7_bio_APIName supporting streaming.,This function is effectively a version of the d2i_PKCS7_bio_APIName supporting streaming.
0,0,This function is currently implemented using a macro,,,null,This function is currently implemented using a macro.,EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1. This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data. This function is currently implemented using a macro.
0,0,X509_VERIFY_PARAM_set_trust_APIName sets the trust setting in X509_VERIFY_PARAM_set_trust_APIParam_1 to X509_VERIFY_PARAM_set_trust_APIParam_2,,,null,X509_VERIFY_PARAM_set_trust_APIName sets the trust setting in X509_VERIFY_PARAM_set_trust_APIParam_1 to X509_VERIFY_PARAM_set_trust_APIParam_2.,X509_VERIFY_PARAM_set_trust_APIName sets the trust setting in X509_VERIFY_PARAM_set_trust_APIParam_1 to X509_VERIFY_PARAM_set_trust_APIParam_2.
0,0,Filter BIOs usually pass the operation to the next BIO in the chain,,,if they do not internally handle a particular BIO_ctrl_APIName operation,Filter BIOs if they do not internally handle a particular BIO_ctrl_APIName operation usually pass the operation to the next BIO in the chain.,"Filter BIOs if they do not internally handle a particular BIO_ctrl_APIName operation usually pass the operation to the next BIO in the chain. This often means there is no need to locate the required BIO for a particular operation, it can be called on a chain and it will be automatically passed to the relevant BIO. However this can cause unexpected results: for example no current filter BIOs implement BIO_seek_APIName, but this may still succeed if the chain ends in a FILE or file descriptor BIO."
0,0,It can contain public as well as private RSA keys,,,null,It can contain public as well as private RSA keys:,The RSA_print_APIParam_2 RSA_blinding_off_APIParam_1 RSA_free_APIParam_1 RSA_get_ex_data_APIParam_1 RSA_set_method_APIParam_1 RSA_print_fp_APIParam_2 RSA_set_ex_data_APIParam_1 RSA_get_method_APIParam_1 RSA_set_default_method_APIParam_1 RSA_size_APIParam_1 RSA_blinding_on_APIParam_1 RSA_flags_APIParam_1 RSA_check_key_APIParam_1 structure consists of several BIGNUM components. It can contain public as well as private RSA keys:
0,0,EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1,,,null,EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1.,EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1. This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data. This function is currently implemented using a macro.
0,0,The creation of a new SSL structure failed,,,null,The creation of a new SSL structure failed.,The creation of a new SSL structure failed. Check the error stack to find out the reason.
0,0,The `` close notify '' alert is sent as a warning alert,,,null,"The ""close notify"" alert is sent as a warning alert.","A warning alert is sent, when a non-fatal error condition occurs. The ""close notify"" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (""certificate expired"", ""unsupported certificate""), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion."
0,0,Other examples for non-fatal errors are certificate errors,,,null,"Other examples for non-fatal errors are certificate errors ,  .","A warning alert is sent, when a non-fatal error condition occurs. The ""close notify"" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (""certificate expired"", ""unsupported certificate""), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion."
0,0,This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data,,,null,This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data.,EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1. This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data. This function is currently implemented using a macro.
0,0,Options already set before are not cleared !,,,null,Options already set before are not cleared!,SSL_set_options_APIName adds the options set via bitmask in SSL_set_options_APIParam_2 to SSL_set_options_APIParam_1. Options already set before are not cleared!
0,0,BN_dup_APIName creates a new BN_copy_APIParam_1 BN_dup_APIParam_1 containing the value BN_copy_APIParam_2 BN_dup_APIParam_1,,,null,BN_dup_APIName creates a new BN_copy_APIParam_1 BN_dup_APIParam_1 containing the value BN_copy_APIParam_2 BN_dup_APIParam_1.,BN_copy_APIName copies BN_copy_APIParam_2 BN_dup_APIParam_1 to BN_copy_APIParam_1. BN_dup_APIName creates a new BN_copy_APIParam_1 BN_dup_APIParam_1 containing the value BN_copy_APIParam_2 BN_dup_APIParam_1.
0,0,"These functions load the certificates and private keys into the SSL_CTX or SSL object , respectively",,,null,"These functions load the certificates and private keys into the SSL_CTX or SSL object, respectively.","These functions load the certificates and private keys into the SSL_CTX or SSL object, respectively."
0,0,Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2,,,null,Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2.,SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2.
0,0,Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared,,,null,Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared.,SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2.
0,0,BIOs can be joined together to form a chain,,,null,BIOs can be joined together to form a chain (a single BIO is a chain with one component).,BIOs can be joined together to form a chain (a single BIO is a chain with one component). A chain normally consist of one source/sink BIO and one or more filter BIOs. Data read from or written to the first BIO then traverses the chain to the end (normally a source/sink BIO).
0,0,indicate errors relating to unrecognised options or missing arguments in the error queue,,,null,indicate errors relating to unrecognised options or missing arguments in the error queue.,indicate errors relating to unrecognised options or missing arguments in the error queue. If this option isn't set such errors are only reflected in the return values of SSL_CONF_set_cmd_APIName or SSL_CONF_set_argv_APIName
0,0,The receiving side may cancel the connection on reception of a warning alert on it discretion,,,null,The receiving side may cancel the connection on reception of a warning alert on it discretion.,"A warning alert is sent, when a non-fatal error condition occurs. The ""close notify"" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (""certificate expired"", ""unsupported certificate""), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion."
0,0,A warning alert is sent,,,when a non-fatal error condition occurs,"A warning alert is sent, when a non-fatal error condition occurs.","A warning alert is sent, when a non-fatal error condition occurs. The ""close notify"" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (""certificate expired"", ""unsupported certificate""), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion."
0,0,SSL_set_options_APIName adds the options set via bitmask in SSL_set_options_APIParam_2 to SSL_set_options_APIParam_1,,,null,SSL_set_options_APIName adds the options set via bitmask in SSL_set_options_APIParam_2 to SSL_set_options_APIParam_1.,SSL_set_options_APIName adds the options set via bitmask in SSL_set_options_APIParam_2 to SSL_set_options_APIParam_1. Options already set before are not cleared!
0,0,Data read from or written to the first BIO traverses the chain to the end,,,null,Data read from or written to the first BIO then traverses the chain to the end (normally a source/sink BIO).,BIOs can be joined together to form a chain (a single BIO is a chain with one component). A chain normally consist of one source/sink BIO and one or more filter BIOs. Data read from or written to the first BIO then traverses the chain to the end (normally a source/sink BIO).
0,0,the reason code can be obtained using ERR_get_error_APIName,,,If the key is invalid or an error occurred,"If the key is invalid or an error occurred, the reason code can be obtained using ERR_get_error_APIName .","If the key is invalid or an error occurred, the reason code can be obtained using ERR_get_error_APIName ."
0,0,EVP_SignInit_ex_APIName sets up signing context EVP_SignInit_ex_APIParam_1 to use digest EVP_SignInit_ex_APIParam_2 from ENGINE EVP_SignInit_ex_APIParam_3,,,null,EVP_SignInit_ex_APIName sets up signing context EVP_SignInit_ex_APIParam_1 to use digest EVP_SignInit_ex_APIParam_2 from ENGINE EVP_SignInit_ex_APIParam_3.,EVP_SignInit_ex_APIName sets up signing context EVP_SignInit_ex_APIParam_1 to use digest EVP_SignInit_ex_APIParam_2 from ENGINE EVP_SignInit_ex_APIParam_3. EVP_SignInit_ex_APIParam_1 must be initialized with EVP_MD_CTX_init_APIName before calling this function.
0,0,SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2,,,null,SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2.,SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2.
0,0,typically a memory allocation failure or an ASN .1 decoding error,,,null,"The functions return 1 for a successful match, 0 for a failed match and -1 for an internal error: typically a memory allocation failure or an ASN.1 decoding error.","The functions return 1 for a successful match, 0 for a failed match and -1 for an internal error: typically a memory allocation failure or an ASN.1 decoding error."
0,0,SSL_clear_APIName resets the SSL object to allow for another connection,,,null,SSL_clear_APIName resets the SSL object to allow for another connection.,"SSL_clear_APIName resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired)."
0,0,"The last entry in the array is -LCB- 0,0 -RCB-",,,null,"The last entry in the array is {0,0}.","The last entry in the array is {0,0}."
0,0,Others might not even call the callback,,,null,Others might not even call the callback.,The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm. Some might not give any useful information at all during key or parameter generation. Others might not even call the callback.
0,0,The PEM_read_bio_X509_CRL_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_CRL_APIParam_2 functions process an X509 CRL using an X509_CRL structure,,,null,The PEM_read_bio_X509_CRL_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_CRL_APIParam_2 functions process an X509 CRL using an X509_CRL structure.,The PEM_read_bio_X509_CRL_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_CRL_APIParam_2 functions process an X509 CRL using an X509_CRL structure.
0,0,A certificate was revoked by A certificate signer,,,null,A certificate was revoked by A certificate signer.,A certificate was revoked by A certificate signer.
0,0,The reset operation however keeps several settings of the last sessions,,,null,The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake).,"SSL_clear_APIName resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired)."
0,0,These functions serve no recognizable purpose,,,null,These functions serve no recognizable purpose.,These functions serve no recognizable purpose.
0,0,"This is currently 17K , sufficient for a maximum size TLS record",,,null,"This is currently 17K, sufficient for a maximum size TLS record.","BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2. If the size is not initialized ,a default value is used. This is currently 17K, sufficient for a maximum size TLS record."
0,0,The EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName sets the EC curve for EC parameter generation to EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIParam_2,,,null,The EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName sets the EC curve for EC parameter generation to EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIParam_2.,The EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName sets the EC curve for EC parameter generation to EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIParam_2. For EC parameter generation this macro must be called or an error occurs because there is no default curve.
0,0,BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2,,,null,BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2.,"BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2. If the size is not initialized ,a default value is used. This is currently 17K, sufficient for a maximum size TLS record."
0,0,a default value is used,,,If the size is not initialized,"If the size is not initialized ,a default value is used.","BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2. If the size is not initialized ,a default value is used. This is currently 17K, sufficient for a maximum size TLS record."
0,0,this is used to flush the final block through the BIO,,,null,BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded: this is used to flush the final block through the BIO.,BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded: this is used to flush the final block through the BIO.
0,0,It adds the current contents of the screen to the PRNG,,,null,It adds the current contents of the screen to the PRNG.,"The RAND_screen_APIName function is available for the convenience of Windows programmers. It adds the current contents of the screen to the PRNG. For applications that can catch Windows events, seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness. It should be noted that both methods cannot be used on servers that run without user interaction."
0,0,an attempt is made to establish one on the first I/O call,,,If an SSL connection is not established,"If an SSL connection is not established ,then an attempt is made to establish one on the first I/O call.","I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs. If an SSL connection is not established ,then an attempt is made to establish one on the first I/O call."
0,0,SHA1_Update_APIName can be called repeatedly with chunks of the message to be hashed,,,null,SHA1_Update_APIName can be called repeatedly with chunks of the message to be hashed (SHA1_Update_APIParam_3 bytes at SHA1_Update_APIParam_2).,SHA1_Update_APIName can be called repeatedly with chunks of the message to be hashed (SHA1_Update_APIParam_3 bytes at SHA1_Update_APIParam_2).
0,0,SSLv2 is effectively disabled and neither clients nor servers will attempt to use SSLv2,,,If the cipher list does not contain any SSLv2 cipher suites,"If the cipher list does not contain any SSLv2 cipher suites (this is the default), then SSLv2 is effectively disabled and neither clients nor servers will attempt to use SSLv2.","If the cipher list does not contain any SSLv2 cipher suites (this is the default), then SSLv2 is effectively disabled and neither clients nor servers will attempt to use SSLv2."
0,0,clearing bit # 26 at run-time disables high-performance SSE2 code present in the crypto library,,,while clearing bit # 24 disables SSE2 code operating on 128-bit XMM register bank,"For example, clearing bit #26 at run-time disables high-performance SSE2 code present in the crypto library, while clearing bit #24 disables SSE2 code operating on 128-bit XMM register bank.","For example, clearing bit #26 at run-time disables high-performance SSE2 code present in the crypto library, while clearing bit #24 disables SSE2 code operating on 128-bit XMM register bank. You might have to do the latter if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers. Even though you can manipulate the value programmatically, you most likely will find the value more appropriate to set up an environment variable with the same name prior starting target application, eg on Intel P4 processor 'env OPENSSL_ia32cap=0x16980010 apps/openssl', or better yet 'env OPENSSL_ia32cap=~0x1000000 apps/openssl' to achieve same effect without modifying the application source code. Alternatively you can reconfigure the toolkit with no-sse2 option and recompile."
8,0,"the ENGINE will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler, so it is up to the ENGINE to reply to these ""discovery"" commands itself.",1,,If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag,"If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these ""discovery"" commands itself.","Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries. An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions. If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these ""discovery"" commands itself. If that flag is not set, then the OpenSSL framework code will work with the following rules;"
0,0,"A `` close notify '' shutdown alert was sent to the peer , the connection is being considered closed and the session is closed and correct",,,null,"A ""close notify"" shutdown alert was sent to the peer, the connection is being considered closed and the session is closed and correct.","A ""close notify"" shutdown alert was sent to the peer, the connection is being considered closed and the session is closed and correct."
0,0,Host name checks are out of scope with the DANE-EE_APIName certificate usage,,,null,"Host name checks are out of scope with the DANE-EE_APIName certificate usage, and the internal checks will be suppressed as appropriate when DANE support is added to OpenSSL.","Applications are encouraged to use X509_VERIFY_PARAM_set1_host_APIName rather than explicitly calling X509_check_host_APIName . Host name checks are out of scope with the DANE-EE_APIName certificate usage, and the internal checks will be suppressed as appropriate when DANE support is added to OpenSSL."
0,0,The RAND_screen_APIName function is available for the convenience of Windows programmers,,,null,The RAND_screen_APIName function is available for the convenience of Windows programmers.,"The RAND_screen_APIName function is available for the convenience of Windows programmers. It adds the current contents of the screen to the PRNG. For applications that can catch Windows events, seeding the PRNG by calling RAND_event_APIName is a significantly better source of randomness. It should be noted that both methods cannot be used on servers that run without user interaction."
0,0,"it can supply a ctrl_APIName handler , it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE 's flags , and it can expose an array of control command descriptions",,,null,"An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions.","Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries. An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions. If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these ""discovery"" commands itself. If that flag is not set, then the OpenSSL framework code will work with the following rules;"
0,0,the internal checks will be suppressed as appropriate,,,when DANE support is added to OpenSSL,"Host name checks are out of scope with the DANE-EE_APIName certificate usage, and the internal checks will be suppressed as appropriate when DANE support is added to OpenSSL.","Applications are encouraged to use X509_VERIFY_PARAM_set1_host_APIName rather than explicitly calling X509_check_host_APIName . Host name checks are out of scope with the DANE-EE_APIName certificate usage, and the internal checks will be suppressed as appropriate when DANE support is added to OpenSSL."
0,0,X509_STORE_CTX_set0_param_APIName sets the intenal verification parameter pointer to X509_STORE_CTX_set0_param_APIParam_2,,,null,X509_STORE_CTX_set0_param_APIName sets the intenal verification parameter pointer to X509_STORE_CTX_set0_param_APIParam_2.,X509_STORE_CTX_set0_param_APIName sets the intenal verification parameter pointer to X509_STORE_CTX_set0_param_APIParam_2. After this call X509_STORE_CTX_set0_param_APIParam_2 should not be used.
0,0,PKCS7_decrypt_APIName extracts and decrypts the content from a PKCS # 7 envelopedData structure,,,null,PKCS7_decrypt_APIName extracts and decrypts the content from a PKCS#7 envelopedData structure.,"PKCS7_decrypt_APIName extracts and decrypts the content from a PKCS#7 envelopedData structure. PKCS7_decrypt_APIParam_2 is the private key of the recipient, PKCS7_decrypt_APIParam_3 is the recipients certificate, PKCS7_decrypt_APIParam_4 is a BIO to write the content to and PKCS7_decrypt_APIParam_5 is an optional set of flags."
0,0,A session was reused,,,null,A session was reused.,A session was reused.
0,0,Use the sequence SSL_get_session_APIName,,,null,Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired).,"SSL_clear_APIName resets the SSL object to allow for another connection. The reset operation however keeps several settings of the last sessions (some of these settings were made automatically during the last handshake). It only makes sense for a new connection with the exact same peer that shares these settings, and may fail if that peer changes its settings between connections. Use the sequence SSL_get_session_APIName ; SSL_new_APIName ; SSL_set_session_APIName ; SSL_free_APIName instead to avoid such failures (or simply SSL_free_APIName ; SSL_new_APIName if session reuse is not desired)."
0,0,EVP_EncodeInit_APIName initialises EVP_EncodeInit_APIParam_1 for the start of a new encoding operation,,,null,EVP_EncodeInit_APIName initialises EVP_EncodeInit_APIParam_1 for the start of a new encoding operation.,EVP_EncodeInit_APIName initialises EVP_EncodeInit_APIParam_1 for the start of a new encoding operation.
0,0,The prefix `` i2d '' is arguably wrong,1,,because the function outputs BER format,The prefix `` i2d '' is arguably wrong  .,"The prefix ""i2d"" is arguably wrong because the function outputs BER format."
0,0,Some might not give any useful information at all,,,during key or parameter generation,Some might not give any useful information at all during key or parameter generation.,The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm. Some might not give any useful information at all during key or parameter generation. Others might not even call the callback.
0,0,ASN1_add_oid_module_APIName adds just the ASN1 OBJECT module,,,null,ASN1_add_oid_module_APIName adds just the ASN1 OBJECT module.,ASN1_add_oid_module_APIName adds just the ASN1 OBJECT module.
0,0,BN_ucmp_APIName compares their absolute values,,,null,BN_ucmp_APIName compares their absolute values.,BN_cmp_APIName compares the numbers BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2. BN_ucmp_APIName compares their absolute values.
0,0,The EVP_BytesToKey_APIName function provides some limited support for password based encryption,,,null,The EVP_BytesToKey_APIName function provides some limited support for password based encryption.,"The EVP_BytesToKey_APIName function provides some limited support for password based encryption. Careful selection of the parameters will provide a PKCS#5 PBKDF1 compatible implementation. However, new applications should not typically use this (preferring, for example, PBKDF2 from PCKS#5)."
0,0,A server will only understand TLSv1 .1 client hello messages,,,null,A server will only understand TLSv1.1 client hello messages.,A TLS/SSL connection established with these methods will only understand the TLSv1.1 protocol. A client will send out TLSv1.1 client hello messages and will also indicate that client only understand TLSv1.1. A server will only understand TLSv1.1 client hello messages.
0,0,BN_cmp_APIName compares the numbers BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2,,,null,BN_cmp_APIName compares the numbers BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2.,BN_cmp_APIName compares the numbers BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2. BN_ucmp_APIName compares their absolute values.
0,0,X509_NAME_delete_entry_APIName deletes an entry from X509_NAME_delete_entry_APIParam_1 at position X509_NAME_delete_entry_APIParam_2,,,null,X509_NAME_delete_entry_APIName deletes an entry from X509_NAME_delete_entry_APIParam_1 at position X509_NAME_delete_entry_APIParam_2.,X509_NAME_delete_entry_APIName deletes an entry from X509_NAME_delete_entry_APIParam_1 at position X509_NAME_delete_entry_APIParam_2. The deleted entry is returned and must be freed up.
0,0,all these functions are implemented using macros,,,null,Note: all these functions are implemented using macros.,Note: all these functions are implemented using macros.
0,0,SSL_SESSION_set_time_APIName replaces the creation time of the session SSL_SESSION_set_time_APIParam_1 with the chosen value SSL_SESSION_set_time_APIParam_2,,,null,SSL_SESSION_set_time_APIName replaces the creation time of the session SSL_SESSION_set_time_APIParam_1 with the chosen value SSL_SESSION_set_time_APIParam_2.,SSL_SESSION_set_time_APIName replaces the creation time of the session SSL_SESSION_set_time_APIParam_1 with the chosen value SSL_SESSION_set_time_APIParam_2.
0,0,BF_set_key_APIName sets up the BF_set_key_APIParam_1 BF_set_key_APIParam_1 using the BF_set_key_APIParam_2 bytes long key at BF_set_key_APIParam_3,,,null,BF_set_key_APIName sets up the BF_set_key_APIParam_1 BF_set_key_APIParam_1 using the BF_set_key_APIParam_2 bytes long key at BF_set_key_APIParam_3.,BF_set_key_APIName sets up the BF_set_key_APIParam_1 BF_set_key_APIParam_1 using the BF_set_key_APIParam_2 bytes long key at BF_set_key_APIParam_3.
0,0,A TLS/SSL connection established with these methods will only understand the TLSv1 .1 protocol,,,null,A TLS/SSL connection established with these methods will only understand the TLSv1.1 protocol.,A TLS/SSL connection established with these methods will only understand the TLSv1.1 protocol. A client will send out TLSv1.1 client hello messages and will also indicate that client only understand TLSv1.1. A server will only understand TLSv1.1 client hello messages.
0,0,The error code can be obtained by calling ERR_get_error_APIName,,,null,The error code can be obtained by calling ERR_get_error_APIName .,i2d_PrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling ERR_get_error_APIName .
0,0,"Also , dynamic locks are currently not used internally by OpenSSL , but may do so in the future",,,null,"Also, dynamic locks are currently not used internally by OpenSSL, but may do so in the future.","Also, dynamic locks are currently not used internally by OpenSSL, but may do so in the future."
0,0,"These defaults are: 40 bit RC2 encryption for certificates, triple DES encryption for private keys, a key iteration count of PKCS12_DEFAULT_ITER (currently 2048) and a MAC iteration count of 1.",1,,null,"These defaults are: 40 bit RC2 encryption for certificates, triple DES encryption for private keys, a key iteration count of PKCS12_DEFAULT_ITER (currently 2048) and a MAC iteration count of 1.","These defaults are: 40 bit RC2 encryption for certificates, triple DES encryption for private keys, a key iteration count of PKCS12_DEFAULT_ITER (currently 2048) and a MAC iteration count of 1."
0,0,Careful selection of the parameters will provide a PKCS # 5 PBKDF1 compatible implementation,,,null,Careful selection of the parameters will provide a PKCS#5 PBKDF1 compatible implementation.,"The EVP_BytesToKey_APIName function provides some limited support for password based encryption. Careful selection of the parameters will provide a PKCS#5 PBKDF1 compatible implementation. However, new applications should not typically use this (preferring, for example, PBKDF2 from PCKS#5)."
0,0,The OpenSSL library handles incoming data by a dynamically allocated buffer,,,null,The OpenSSL library handles incoming data by a dynamically allocated buffer.,"During the handshake process, the peer may send a certificate chain. The TLS/SSL standard does not give any maximum size of the certificate chain. The OpenSSL library handles incoming data by a dynamically allocated buffer. In order to prevent this buffer from growing without bounds due to data received from a faulty or malicious peer, a maximum size for the certificate chain is set."
0,0,This mechanism is entirely based on the use of name-value pairs and assumes ASCII input -LRB- no unicode or UTF for now !,,,null,This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now!,"There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,This library performs arithmetic operations on integers of arbitrary size,,,null,This library performs arithmetic operations on integers of arbitrary size.,"This library performs arithmetic operations on integers of arbitrary size. It was written for use in public key cryptography, such as RSA and Diffie-Hellman."
0,0,The TLS/SSL standard does not give any maximum size of the certificate chain,,,null,The TLS/SSL standard does not give any maximum size of the certificate chain.,"During the handshake process, the peer may send a certificate chain. The TLS/SSL standard does not give any maximum size of the certificate chain. The OpenSSL library handles incoming data by a dynamically allocated buffer. In order to prevent this buffer from growing without bounds due to data received from a faulty or malicious peer, a maximum size for the certificate chain is set."
0,0,the callback function may not be called,,,If processing a received protocol message results in an error,"If processing a received protocol message results in an error, the callback function may not be called.","If processing a received protocol message results in an error, the callback function may not be called. For example, the callback function will never see messages that are considered too large to be processed."
0,0,This lifetime is specified by storing the creation time of the session and the timeout value valid at this time,,,null,This lifetime is specified by storing the creation time of the session and the timeout value valid at this time.,"Whenever a new session is created, the new session is assigned a maximum lifetime. This lifetime is specified by storing the creation time of the session and the timeout value valid at this time. If the actual time is later than creation time plus timeout, the session is not reused."
0,0,d2i_X509_bio_APIName is similar to d2i_X509_APIName except d2i_X509_bio_APIName attempts to parse data from BIO d2i_X509_bio_APIParam_1,,,null,d2i_X509_bio_APIName is similar to d2i_X509_APIName except d2i_X509_bio_APIName attempts to parse data from BIO d2i_X509_bio_APIParam_1.,d2i_X509_bio_APIName is similar to d2i_X509_APIName except d2i_X509_bio_APIName attempts to parse data from BIO d2i_X509_bio_APIParam_1.
0,0,X509_check_private_key_APIName function checks the consistency of private key X509_check_private_key_APIParam_2 with the public key in X509_check_private_key_APIParam_1,,,null,X509_check_private_key_APIName function checks the consistency of private key X509_check_private_key_APIParam_2 with the public key in X509_check_private_key_APIParam_1.,X509_check_private_key_APIName function checks the consistency of private key X509_check_private_key_APIParam_2 with the public key in X509_check_private_key_APIParam_1.
0,0,The available SSL_set_ssl_method_APIParam_2 SSL_CTX_set_ssl_version_APIParam_2 choices are described in SSL_CTX_new_APIName,,,null,The available SSL_set_ssl_method_APIParam_2 SSL_CTX_set_ssl_version_APIParam_2 choices are described in SSL_CTX_new_APIName .,The available SSL_set_ssl_method_APIParam_2 SSL_CTX_set_ssl_version_APIParam_2 choices are described in SSL_CTX_new_APIName .
0,0,The builtin UI method doesn't care about this info,,,null,The builtin UI method doesn't care about this info.,"UI_add_user_data_APIName adds a piece of memory for the method to use at any time. The builtin UI method doesn't care about this info. Note that several calls to this function doesn't add data, several calls to this function replaces the previous blob with the one given as argument."
0,0,In OpenSSL 0.9.7 and later,,,if digest contexts are not cleaned up after use memory leaks,In OpenSSL 0.9.7 and later if digest contexts are not cleaned up after use memory leaks will occur.,In OpenSSL 0.9.7 and later if digest contexts are not cleaned up after use memory leaks will occur.
0,0,the new session is assigned a maximum lifetime,1,,Whenever a new session,"Whenever a new session is created, the new session is assigned a maximum lifetime.","Whenever a new session is created, the new session is assigned a maximum lifetime. This lifetime is specified by storing the creation time of the session and the timeout value valid at this time. If the actual time is later than creation time plus timeout, the session is not reused."
0,0,BN_RECP_CTX_free_APIName frees the components of the BN_RECP_CTX_free_APIParam_1 ,,,"if it was created by BN_RECP_CTX_new_APIName , also the structure itself","BN_RECP_CTX_free_APIName frees the components of the BN_RECP_CTX_free_APIParam_1, and, if it was created by BN_RECP_CTX_new_APIName, also the structure itself.","BN_RECP_CTX_free_APIName frees the components of the BN_RECP_CTX_free_APIParam_1, and, if it was created by BN_RECP_CTX_new_APIName, also the structure itself."
0,0,the default size is used,,,If either size is zero,If either size is zero then the default size is used.,"BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName, BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1, BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4. If either size is zero then the default size is used. BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO, the values are overwritten, BIO_free_APIName is not called."
0,0,The old session is removed and replaced by the new session,,,If the same session is stored in a different SSL_SESSION object,"If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session.","When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists. In this case it is assumed that both sessions are identical. If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session. If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session_APIName is a no-op, and the return value is 0."
0,0,the session is not reused,,,If the actual time is later than creation time plus timeout,"If the actual time is later than creation time plus timeout, the session is not reused.","Whenever a new session is created, the new session is assigned a maximum lifetime. This lifetime is specified by storing the creation time of the session and the timeout value valid at this time. If the actual time is later than creation time plus timeout, the session is not reused."
0,0,contains the peer 's certificate,,,null,"If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName .","SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName . If the peer did not present a certificate, NULL is returned."
0,0,the stack also contains the peer's certificate,1,,If called on the client side,"If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName .","SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName . If the peer did not present a certificate, NULL is returned."
0,0,d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 will be freed and replaced on a successful call,,,If the d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 is not NULL when calling d2i_PrivateKey_APIName or d2i_AutoPrivateKey_APIName and the key format is PKCS # 8,"If the d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 is not NULL when calling d2i_PrivateKey_APIName or d2i_AutoPrivateKey_APIName (ie an existing structure is being reused) and the key format is PKCS#8, then d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 will be freed and replaced on a successful call.","If the d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 is not NULL when calling d2i_PrivateKey_APIName or d2i_AutoPrivateKey_APIName (ie an existing structure is being reused) and the key format is PKCS#8, then d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 will be freed and replaced on a successful call."
0,0,Some applications will want to allow the user to specify exactly which ENGINE they want used,1,,if any is to be used at all.,Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all.,"The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are ""registered"" or called into use by OpenSSL automatically - that behaviour is something for the application to control. Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all. Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing. There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides."
0,0,The default mode is SSL_SESS_CACHE_SERVER,,,null,The default mode is SSL_SESS_CACHE_SERVER.,The default mode is SSL_SESS_CACHE_SERVER.
0,0,any other value indicates failure,1,,EVP_DigestVerifyFinal_APIName returns 1 for success,EVP_DigestVerifyFinal_APIName returns 1 for success; any other value indicates failure.,"EVP_DigestVerifyFinal_APIName returns 1 for success; any other value indicates failure. A return value of zero indicates that the signature did not verify successfully (that is, tbs did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form)."
0,0,On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded,,,null,On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded.,"On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded. In other words if you have to make it work in multi- lingual environment, encode file names in UTF-8."
0,0,Blowfish consists of a key setup phase and the actual encryption or decryption phase,,,null,Blowfish consists of a key setup phase and the actual encryption or decryption phase.,Blowfish consists of a key setup phase and the actual encryption or decryption phase.
0,0,UI_add_user_data_APIName adds a piece of memory for the method to use at any time,,,null,UI_add_user_data_APIName adds a piece of memory for the method to use at any time.,"UI_add_user_data_APIName adds a piece of memory for the method to use at any time. The builtin UI method doesn't care about this info. Note that several calls to this function doesn't add data, several calls to this function replaces the previous blob with the one given as argument."
0,0,"octet string , BIGNUM and hexadecimal respectively",,,null,"The functions EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point, EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats: octet string, BIGNUM and hexadecimal respectively.","The functions EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point, EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats: octet string, BIGNUM and hexadecimal respectively."
0,0,The behaviour of SSL_shutdown_APIName additionally depends on the underlying BIO,,,null,The behaviour of SSL_shutdown_APIName additionally depends on the underlying BIO.,The behaviour of SSL_shutdown_APIName additionally depends on the underlying BIO.
0,0,This function is either a trinomial of the form,,,null,This function is either a trinomial of the form:,"The functions EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis should only be called for curves defined over an F2^m field. Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial function f(x). This function is either a trinomial of the form:"
0,0,"It was written for use in public key cryptography , such as RSA and Diffie-Hellman",,,null,"It was written for use in public key cryptography, such as RSA and Diffie-Hellman.","This library performs arithmetic operations on integers of arbitrary size. It was written for use in public key cryptography, such as RSA and Diffie-Hellman."
0,0,SSL_read_APIName tries to read SSL_read_APIParam_3 bytes from the specified SSL_read_APIParam_1 into the buffer SSL_read_APIParam_2,,,null,SSL_read_APIName tries to read SSL_read_APIParam_3 bytes from the specified SSL_read_APIParam_1 into the buffer SSL_read_APIParam_2.,SSL_read_APIName tries to read SSL_read_APIParam_3 bytes from the specified SSL_read_APIParam_1 into the buffer SSL_read_APIParam_2.
0,0,Don't prefer ECDHE-ECDSA ciphers,,,when the client appears to be Safari on OS X. OS X 10.8,Don't prefer ECDHE-ECDSA ciphers when the client appears to be Safari on OS X. OS X 10.8..10.8.3 has broken support for ECDHE-ECDSA ciphers.,Don't prefer ECDHE-ECDSA ciphers when the client appears to be Safari on OS X. OS X 10.8..10.8.3 has broken support for ECDHE-ECDSA ciphers.
0,0,recognise options intended for command line or configuration file use,,,null,recognise options intended for command line or configuration file use.,recognise options intended for command line or configuration file use. At least one of these flags must be set.
0,0,SSL_SESSION_get_ex_new_index_APIName is used to register a new index for application specific data,,,null,SSL_SESSION_get_ex_new_index_APIName is used to register a new index for application specific data.,SSL_SESSION_get_ex_new_index_APIName is used to register a new index for application specific data.
0,0,"PKCS7_decrypt_APIParam_2 is the private key of the recipient , PKCS7_decrypt_APIParam_3 is the recipients certificate , PKCS7_decrypt_APIParam_4 is a BIO to write the content to and PKCS7_decrypt_APIParam_5 is an optional set of flags",,,null,"PKCS7_decrypt_APIParam_2 is the private key of the recipient, PKCS7_decrypt_APIParam_3 is the recipients certificate, PKCS7_decrypt_APIParam_4 is a BIO to write the content to and PKCS7_decrypt_APIParam_5 is an optional set of flags.","PKCS7_decrypt_APIName extracts and decrypts the content from a PKCS#7 envelopedData structure. PKCS7_decrypt_APIParam_2 is the private key of the recipient, PKCS7_decrypt_APIParam_3 is the recipients certificate, PKCS7_decrypt_APIParam_4 is a BIO to write the content to and PKCS7_decrypt_APIParam_5 is an optional set of flags."
0,0,CMS_RecipientInfo_encrypt_APIName attempts to encrypt CMS_RecipientInfo structure CMS_RecipientInfo_encrypt_APIParam_2 CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_encrypt_APIParam_1 CMS_RecipientInfo_decrypt_APIParam_1,,,null,CMS_RecipientInfo_encrypt_APIName attempts to encrypt CMS_RecipientInfo structure CMS_RecipientInfo_encrypt_APIParam_2 CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_encrypt_APIParam_1 CMS_RecipientInfo_decrypt_APIParam_1.,CMS_RecipientInfo_encrypt_APIName attempts to encrypt CMS_RecipientInfo structure CMS_RecipientInfo_encrypt_APIParam_2 CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_encrypt_APIParam_1 CMS_RecipientInfo_decrypt_APIParam_1. A key must have been associated with the structure first and the content encryption key must be available: for example by a previous call to CMS_RecipientInfo_decrypt_APIName.
0,0,RC4 consists of a key setup phase and the actual encryption or decryption phase,,,null,RC4 consists of a key setup phase and the actual encryption or decryption phase.,RC4 consists of a key setup phase and the actual encryption or decryption phase.
0,0,RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3,,,null,RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 (usually a session key) using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3.,RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 (usually a session key) using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3. RSA_public_encrypt_APIParam_3 must point to RSA_size(RSA_public_encrypt_APIParam_4) bytes of memory.
0,0,"The functions EC_POINT_point2oct , EC_POINT_oct2point , EC_POINT_point2bn , EC_POINT_bn2point , EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats",,,null,"The functions EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point, EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats: octet string, BIGNUM and hexadecimal respectively.","The functions EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point, EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats: octet string, BIGNUM and hexadecimal respectively."
0,0,"It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names , descriptions , and input flags of their available `` control commands '' , providing a more flexible configuration scheme",,,null,"It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme.","There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,Error codes can be obtained by calling ERR_get_error_APIName,,,null,Error codes can be obtained by calling ERR_get_error_APIName .,"The RSA_padding_add_xxx_APIName functions return 1 on success, 0 on error. The RSA_padding_check_xxx_APIName functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling ERR_get_error_APIName ."
0,0,SSL_CTX_flush_sessions_APIName will only check sessions stored in the internal cache,,,null,SSL_CTX_flush_sessions_APIName will only check sessions stored in the internal cache.,"SSL_CTX_flush_sessions_APIName will only check sessions stored in the internal cache. When a session is found and removed, the remove_session_cb is however called to synchronize with the external cache (see SSL_CTX_sess_set_get_cb_APIName )."
0,0,It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert_APIName,,,null,It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert_APIName.,An application will typically call SSL_use_certificate_APIName and SSL_use_PrivateKey_APIName to set the end entity certificate and private key. It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert_APIName.
0,0,"The SSL_get_time_APIName , SSL_set_time_APIName , SSL_get_timeout_APIName , and SSL_set_timeout_APIName functions are synonyms for the SSL_SESSION __ APIName counterparts",,,null,"The SSL_get_time_APIName, SSL_set_time_APIName, SSL_get_timeout_APIName, and SSL_set_timeout_APIName functions are synonyms for the SSL_SESSION_*_APIName counterparts.","The SSL_get_time_APIName, SSL_set_time_APIName, SSL_get_timeout_APIName, and SSL_set_timeout_APIName functions are synonyms for the SSL_SESSION_*_APIName counterparts."
0,0,EVP_VerifyFinal_APIName verifies the data in EVP_VerifyFinal_APIParam_1 using the public key EVP_VerifyFinal_APIParam_4 and against the EVP_VerifyFinal_APIParam_3 bytes at EVP_VerifyFinal_APIParam_2,,,null,EVP_VerifyFinal_APIName verifies the data in EVP_VerifyFinal_APIParam_1 using the public key EVP_VerifyFinal_APIParam_4 and against the EVP_VerifyFinal_APIParam_3 bytes at EVP_VerifyFinal_APIParam_2.,EVP_VerifyFinal_APIName verifies the data in EVP_VerifyFinal_APIParam_1 using the public key EVP_VerifyFinal_APIParam_4 and against the EVP_VerifyFinal_APIParam_3 bytes at EVP_VerifyFinal_APIParam_2.
0,0,Addition and multiplication operations within an F2 ^ m field are performed using an irreducible polynomial function f,,,null,Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial function f(x).,"The functions EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis should only be called for curves defined over an F2^m field. Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial function f(x). This function is either a trinomial of the form:"
0,0,encode file names in UTF-8,,,if you have to make it work in multi - lingual environment,"In other words if you have to make it work in multi- lingual environment, encode file names in UTF-8.","On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded. In other words if you have to make it work in multi- lingual environment, encode file names in UTF-8."
0,0,BN_mod_sqr_APIName takes the square of BN_mod_sqr_APIParam_2 modulo BN_mod_sqr_APIParam_3 and places the result in BN_mod_sqr_APIParam_1,,,null,BN_mod_sqr_APIName takes the square of BN_mod_sqr_APIParam_2 modulo BN_mod_sqr_APIParam_3 and places the result in BN_mod_sqr_APIParam_1.,BN_mod_sqr_APIName takes the square of BN_mod_sqr_APIParam_2 modulo BN_mod_sqr_APIParam_3 and places the result in BN_mod_sqr_APIParam_1.
0,0,An application will typically call SSL_use_certificate_APIName and SSL_use_PrivateKey_APIName to set the end entity certificate and private key,,,null,An application will typically call SSL_use_certificate_APIName and SSL_use_PrivateKey_APIName to set the end entity certificate and private key.,An application will typically call SSL_use_certificate_APIName and SSL_use_PrivateKey_APIName to set the end entity certificate and private key. It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert_APIName.
0,0,"This flag has no effect on SSL v2 connections , or on DTLS connections",,,null,"This flag has no effect on SSL v2 connections, or on DTLS connections.","When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it. Released memory is either appended to a list of unused RAM chunks on the SSL_CTX, or simply freed if the list of unused chunks would become longer than SSL_CTX->freelist_max_len, which defaults to 32. Using this flag can save around 34k per idle SSL connection. This flag has no effect on SSL v2 connections, or on DTLS connections."
0,0,"However , this is not required",,,when memory usage is an issue,"However, this is not required when memory usage is an issue.","One of these functions should be called before generating textual error messages. However, this is not required when memory usage is an issue."
0,0,ALPN protocol not selected,,,null,ALPN protocol not selected.,ALPN protocol not selected.
0,0,The output lines are indented by RSA_print_fp_APIParam_3 DSA_print_fp_APIParam_3 RSA_print_APIParam_3 DSA_print_APIParam_3 spaces,,,null,The output lines are indented by RSA_print_fp_APIParam_3 DSA_print_fp_APIParam_3 RSA_print_APIParam_3 DSA_print_APIParam_3 spaces.,The output lines are indented by RSA_print_fp_APIParam_3 DSA_print_fp_APIParam_3 RSA_print_APIParam_3 DSA_print_APIParam_3 spaces.
0,0,This function is effectively a version of the PEM_write_bio_PKCS7_APIName supporting streaming,,,null,This function is effectively a version of the PEM_write_bio_PKCS7_APIName supporting streaming.,This function is effectively a version of the PEM_write_bio_PKCS7_APIName supporting streaming.
0,0,it possible to work around this by adding a buffering BIO BIO_f_buffer_APIName to the chain,,,If the BIO_gets_APIName function is not supported by a BIO,"If the BIO_gets_APIName function is not supported by a BIO ,then it possible to work around this by adding a buffering BIO BIO_f_buffer_APIName to the chain.","If the BIO_gets_APIName function is not supported by a BIO ,then it possible to work around this by adding a buffering BIO BIO_f_buffer_APIName to the chain."
0,0,the BIO will behave in the manner described in the BIO_read_APIName and BIO_should_retry_APIName manual pages,,,If the underlying file descriptor is in a non blocking mode,"If the underlying file descriptor is in a non blocking mode ,then the BIO will behave in the manner described in the BIO_read_APIName and BIO_should_retry_APIName manual pages.","The behaviour of BIO_read_APIName and BIO_write_APIName depends on the behavior of the platforms read_APIName and write_APIName calls on the descriptor. If the underlying file descriptor is in a non blocking mode ,then the BIO will behave in the manner described in the BIO_read_APIName and BIO_should_retry_APIName manual pages."
0,0,"BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName , BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 , BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4",,,null,"BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName, BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1, BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4.","BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName, BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1, BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4. If either size is zero then the default size is used. BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO, the values are overwritten, BIO_free_APIName is not called."
0,0,BIO_write_APIName will succeed and place data in the write buffer,,,null,BIO_write_APIName will succeed and place data in the write buffer.,"To see why this is important consider a case where a request is sent using BIO_write_APIName and a response read with BIO_read_APIName, this can occur during an TLS/SSL handshake for example. BIO_write_APIName will succeed and place data in the write buffer. BIO_read_APIName will initially fail and BIO_should_read_APIName will be true. If the application then waits for data to be available on the underlying transport before flushing the write buffer ,it will never succeed because the request was never sent!"
0,0,SSL_SESS_CACHE_BOTH means that enable both SSL_SESS_CACHE_CLIENT and SSL_SESS_CACHE_SERVER at the same time,,,null,SSL_SESS_CACHE_BOTH means that enable both SSL_SESS_CACHE_CLIENT and SSL_SESS_CACHE_SERVER at the same time.,SSL_SESS_CACHE_BOTH means that enable both SSL_SESS_CACHE_CLIENT and SSL_SESS_CACHE_SERVER at the same time.
0,0,EC_POINT_clear_free destroys any sensitive data held within the EC_POINT and frees the EC_POINT memory,,,null,EC_POINT_clear_free destroys any sensitive data held within the EC_POINT and then frees the EC_POINT memory.,EC_POINT_clear_free destroys any sensitive data held within the EC_POINT and then frees the EC_POINT memory.
0,0,All other functions described here use des_read_pw_APIName to do the work,,,null,All other functions described here use des_read_pw_APIName to do the work.,"des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal. The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned. The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. A return code of -1 indicates a system error, 1 failure due to use interaction, and 0 is success. All other functions described here use des_read_pw_APIName to do the work."
0,0,"EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName are implemented as macros",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName are implemented as macros.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName are implemented as macros."
0,0,BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection,,,null,BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection.,"BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection. BIO_do_handshake_APIName returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established, the call BIO_should_retry_APIName should be used for non blocking connect BIOs to determine if the call should be retried. If an SSL connection has already been established ,this call has no effect."
0,0,EC_POINT_mul calculates the value generator EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 + EC_POINT_mul_APIParam_4 EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6 and stores the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2,,,null,EC_POINT_mul calculates the value generator * EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 + EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6 and stores the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2.,EC_POINT_mul calculates the value generator * EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 + EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6 and stores the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. The value EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 may be NULL in which case the result is just EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6.
0,0,they will automatically support ECDH using the most appropriate shared curve,,,null,and they will automatically support ECDH using the most appropriate shared curve.,and they will automatically support ECDH using the most appropriate shared curve.
0,0,BF_ofb64_encrypt_APIName is the OFB mode for Blowfish with 64 bit feedback,,,null,BF_ofb64_encrypt_APIName is the OFB mode for Blowfish with 64 bit feedback.,"BF_ofb64_encrypt_APIName is the OFB mode for Blowfish with 64 bit feedback. It uses the same parameters as BF_cfb64_encrypt_APIName, which must be initialized the same way."
2,0,The CMS_decrypt_APIParam_4 parameter will normally be set to NULL,,,null,The CMS_decrypt_APIParam_4 parameter will normally be set to NULL.,The CMS_decrypt_APIParam_4 parameter is used in the rare case where the encrypted content is detached. The CMS_decrypt_APIParam_4 parameter will normally be set to NULL.
0,0,The following descriptions apply in the case of the built-in procedure,,,null,The following descriptions apply in the case of the built-in procedure.,"The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback_APIName . The following descriptions apply in the case of the built-in procedure. An application provided procedure also has access to the verify depth information and the verify_callback_APIName function, but the way this information is used may be different."
0,0,SMIME_write_PKCS7_APIParam_4 is an optional set of flags,,,null,SMIME_write_PKCS7_APIParam_4 is an optional set of flags.,"SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to. SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure. If streaming is enabled, then the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument. SMIME_write_PKCS7_APIParam_4 is an optional set of flags."
0,0,Algorithms are loaded with OpenSSL_add_all_algorithms_APIName,,,null,Algorithms are loaded with OpenSSL_add_all_algorithms_APIName .,Algorithms are loaded with OpenSSL_add_all_algorithms_APIName .
0,0,SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2,,,null,SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2.,SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2. The format of the string is described in ciphers_APIName . The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1.
0,0,the remove_session_cb is however called to synchronize with the external cache,,,When a session is found and removed,"When a session is found and removed, the remove_session_cb is however called to synchronize with the external cache (see SSL_CTX_sess_set_get_cb_APIName ).","SSL_CTX_flush_sessions_APIName will only check sessions stored in the internal cache. When a session is found and removed, the remove_session_cb is however called to synchronize with the external cache (see SSL_CTX_sess_set_get_cb_APIName )."
0,0,SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to,,,null,SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to.,"SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to. SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure. If streaming is enabled, then the content must be supplied in the SMIME_write_PKCS7_APIParam_3 argument. SMIME_write_PKCS7_APIParam_4 is an optional set of flags."
0,0,The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1,,,null,The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1.,SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2. The format of the string is described in ciphers_APIName . The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1.
0,0,The order of operations is significant,,,null,The order of operations is significant.,The order of operations is significant. This can be used to set either defaults or values which cannot be overridden. For example if an application calls:
0,0,DSA_SIG_new_APIName allocates and initializes a DSA_SIG_new_APIParam_0 structure,,,null,DSA_SIG_new_APIName allocates and initializes a DSA_SIG_new_APIParam_0 structure.,DSA_SIG_new_APIName allocates and initializes a DSA_SIG_new_APIParam_0 structure.
0,0,These functions are implemented as macros,,,null,These functions are implemented as macros.,These functions are implemented as macros.
0,0,Details depend on the application,,,null,Details depend on the application.,The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb_APIName has asked to be called again. The TLS/SSL I/O function should be called again later. Details depend on the application.
0,0,"For the shift functions , BN_lshift1_APIParam_1 BN_rshift1_APIParam_1 BN_lshift_APIParam_1 BN_rshift_APIParam_1 and BN_is_bit_set_APIParam_1 BN_clear_bit_APIParam_1 BN_lshift1_APIParam_2 BN_rshift1_APIParam_2 BN_lshift_APIParam_2 BN_mask_bits_APIParam_1 BN_set_bit_APIParam_1 BN_rshift_APIParam_2 may be the same variable",,,null,"For the shift functions, BN_lshift1_APIParam_1 BN_rshift1_APIParam_1 BN_lshift_APIParam_1 BN_rshift_APIParam_1 and BN_is_bit_set_APIParam_1 BN_clear_bit_APIParam_1 BN_lshift1_APIParam_2 BN_rshift1_APIParam_2 BN_lshift_APIParam_2 BN_mask_bits_APIParam_1 BN_set_bit_APIParam_1 BN_rshift_APIParam_2 may be the same variable.","For the shift functions, BN_lshift1_APIParam_1 BN_rshift1_APIParam_1 BN_lshift_APIParam_1 BN_rshift_APIParam_1 and BN_is_bit_set_APIParam_1 BN_clear_bit_APIParam_1 BN_lshift1_APIParam_2 BN_rshift1_APIParam_2 BN_lshift_APIParam_2 BN_mask_bits_APIParam_1 BN_set_bit_APIParam_1 BN_rshift_APIParam_2 may be the same variable."
0,0,The operation did not complete,,,null,The operation did not complete  .,The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb_APIName has asked to be called again. The TLS/SSL I/O function should be called again later. Details depend on the application.
0,0,RC4_set_key_APIName sets up the RC4_set_key_APIParam_1 RC4_set_key_APIParam_1 using the RC4_set_key_APIParam_2 bytes long key at RC4_set_key_APIParam_3,,,null,RC4_set_key_APIName sets up the RC4_set_key_APIParam_1 RC4_set_key_APIParam_1 using the RC4_set_key_APIParam_2 bytes long key at RC4_set_key_APIParam_3.,RC4_set_key_APIName sets up the RC4_set_key_APIParam_1 RC4_set_key_APIParam_1 using the RC4_set_key_APIParam_2 bytes long key at RC4_set_key_APIParam_3.
0,0,RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1,,,null,RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1.,"RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1. This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have RSA keys that only work with certain RSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results."
0,0,SSL_SESSION_set_timeout_APIName sets the timeout value for session SSL_SESSION_set_timeout_APIParam_1 in seconds to SSL_SESSION_set_timeout_APIParam_2,,,null,SSL_SESSION_set_timeout_APIName sets the timeout value for session SSL_SESSION_set_timeout_APIParam_1 in seconds to SSL_SESSION_set_timeout_APIParam_2.,SSL_SESSION_set_timeout_APIName sets the timeout value for session SSL_SESSION_set_timeout_APIParam_1 in seconds to SSL_SESSION_set_timeout_APIParam_2.
0,0,it will await an incoming connection before processing I/O calls,,,When an accept BIO is at the end of a chain,When an accept BIO is at the end of a chain it will await an incoming connection before processing I/O calls.,When an accept BIO is at the end of a chain it will await an incoming connection before processing I/O calls. When an accept BIO is not at then end of a chain it passes I/O calls to the next BIO in the chain.
0,0,CRYPTO_THREADID_current_APIName records the currently-executing thread ID into the given CRYPTO_THREADID_current_APIParam_1 object,,,null,CRYPTO_THREADID_current_APIName records the currently-executing thread ID into the given CRYPTO_THREADID_current_APIParam_1 object.,CRYPTO_THREADID_current_APIName records the currently-executing thread ID into the given CRYPTO_THREADID_current_APIParam_1 object.
0,0,The EVP encode routines provide a high level interface to base 64 encoding and decoding,,,null,The EVP encode routines provide a high level interface to base 64 encoding and decoding.,"The EVP encode routines provide a high level interface to base 64 encoding and decoding. Base 64 encoding converts binary data into a printable form that uses the characters A-Z, a-z, 0-9, ""+"" and ""/"" to represent the data. For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines (see below). If the input data length is not a multiple of 3 then the output data will be padded at the end using the ""="" character."
0,0,SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store,,,null,SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store.,"SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store. The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName . Note: versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types, OpenSSL 1.0.2 and later have a separate chain store for each type. SSL_CTX_use_certificate_chain_file_APIName should be used instead of the SSL_CTX_use_certificate_file_APIName function in order to allow the use of complete certificate chains even when no trusted CA storage is used or when the CA issuing the certificate shall not be added to the trusted CA storage."
0,0,The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName,,,null,The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName .,"SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store. The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName . Note: versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types, OpenSSL 1.0.2 and later have a separate chain store for each type. SSL_CTX_use_certificate_chain_file_APIName should be used instead of the SSL_CTX_use_certificate_file_APIName function in order to allow the use of complete certificate chains even when no trusted CA storage is used or when the CA issuing the certificate shall not be added to the trusted CA storage."
0,0,DES_pcbc_encrypt_APIName encrypt/decrypts using the propagating cipher block chaining mode used by Kerberos v4,,,null,DES_pcbc_encrypt_APIName encrypt/decrypts using the propagating cipher block chaining mode used by Kerberos v4.,DES_pcbc_encrypt_APIName encrypt/decrypts using the propagating cipher block chaining mode used by Kerberos v4. Kerberos v4 parameters are the same as DES_ncbc_encrypt_APIName.
0,0,The state is internally maintained,,,null,The state is internally maintained.,"During its use, an SSL objects passes several states. The state is internally maintained. Querying the state information is not very informative before or when a connection has been established. the state information however can be of significant interest during the handshake."
0,0,the state information however can be of significant interest,,,during the handshake,the state information however can be of significant interest during the handshake.,"During its use, an SSL objects passes several states. The state is internally maintained. Querying the state information is not very informative before or when a connection has been established. the state information however can be of significant interest during the handshake."
0,0,the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client,,,when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1,SSL_CTX_add_client_CA_APIName adds the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.,SSL_CTX_add_client_CA_APIName adds the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.
0,0,SSL_CTX_add_client_CA_APIName adds the CA name,1,,null,SSL_CTX_add_client_CA_APIName adds the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.,SSL_CTX_add_client_CA_APIName adds the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.
0,0,The SSL_CTX _ class of functions loads the certificates and keys into the SSL_CTX object SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1,,,null,The SSL_CTX_* class of functions loads the certificates and keys into the SSL_CTX object SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1.,"The SSL_CTX_* class of functions loads the certificates and keys into the SSL_CTX object SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1. The information is passed to SSL objects SSL_use_RSAPrivateKey_file_APIParam_1 SSL_use_certificate_ASN1_APIParam_1 SSL_use_PrivateKey_APIParam_1 SSL_use_PrivateKey_file_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_certificate_file_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_2 SSL_check_private_key_APIParam_1 SSL_use_RSAPrivateKey_ASN1_APIParam_1 created from SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1 with SSL_new_APIName by copying, so that changes applied to SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1 do not propagate to already existing SSL objects."
0,0,SSL_get_ex_new_index_APIName is used to register a new index for application specific data,,,null,SSL_get_ex_new_index_APIName is used to register a new index for application specific data.,SSL_get_ex_new_index_APIName is used to register a new index for application specific data.
0,0,Querying the state information is not very informative ,1,,before or when a connection has been established,Querying the state information is not very informative before or when a connection has been established.,"During its use, an SSL objects passes several states. The state is internally maintained. Querying the state information is not very informative before or when a connection has been established. the state information however can be of significant interest during the handshake."
0,0,BIO_reset_APIName clears any data in the write buffer,,,null,BIO_reset_APIName clears any data in the write buffer.,BIO_reset_APIName clears any data in the write buffer.
0,0,"CA certificates are additionally looked up in the locations of trusted CA certificates , see SSL_CTX_load_verify_locations_APIName",,,If additional certificates are needed to complete the chain during the TLS negotiation,"If additional certificates are needed to complete the chain during the TLS negotiation, CA certificates are additionally looked up in the locations of trusted CA certificates, see SSL_CTX_load_verify_locations_APIName .","If additional certificates are needed to complete the chain during the TLS negotiation, CA certificates are additionally looked up in the locations of trusted CA certificates, see SSL_CTX_load_verify_locations_APIName ."
0,0,There is no corresponding function working on a single SSL object,,,null,There is no corresponding function working on a single SSL object.,"SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1. The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA. There is no corresponding function working on a single SSL object."
0,0,The result is placed back in EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3,,,null,The result is placed back in EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3.,EC_POINT_invert calculates the inverse of the supplied point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3. The result is placed back in EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3.
0,0,EC_POINT_invert calculates the inverse of the supplied point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3,,,null,EC_POINT_invert calculates the inverse of the supplied point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3.,EC_POINT_invert calculates the inverse of the supplied point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3. The result is placed back in EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3.
0,0,an SSL objects passes several states,,,During its use,"During its use, an SSL objects passes several states.","During its use, an SSL objects passes several states. The state is internally maintained. Querying the state information is not very informative before or when a connection has been established. the state information however can be of significant interest during the handshake."
0,0,SSL_CTX_set1_curves_list_APIName sets the supported curves for SSL_CTX_set1_curves_list_APIParam_1 to string SSL_CTX_set1_curves_list_APIParam_2,,,null,SSL_CTX_set1_curves_list_APIName sets the supported curves for SSL_CTX_set1_curves_list_APIParam_1 to string SSL_CTX_set1_curves_list_APIParam_2.,"SSL_CTX_set1_curves_list_APIName sets the supported curves for SSL_CTX_set1_curves_list_APIParam_1 to string SSL_CTX_set1_curves_list_APIParam_2. The string is a colon separated list of curve NIDs or names, for example ""P-521:P-384:P-256""."
0,0,Any content written through the filter is used verbatim,,,null,Any content written through the filter is used verbatim: no canonical translation is performed.,Any content written through the filter is used verbatim: no canonical translation is performed.
0,0,SSL_set_info_callback_APIName does not provide diagnostic information,,,null,SSL_set_info_callback_APIName does not provide diagnostic information.,SSL_set_info_callback_APIName does not provide diagnostic information.
0,0,no canonical translation is performed,,,null,Any content written through the filter is used verbatim: no canonical translation is performed.,Any content written through the filter is used verbatim: no canonical translation is performed.
0,0,Anonymous ciphers also use ephemeral DH keys,,,null,Anonymous ciphers (without a permanent server key) also use ephemeral DH keys.,"When using a cipher with RSA authentication, an ephemeral DH key exchange can take place. Ciphers with DSA keys always use ephemeral DH keys as well. In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing. Anonymous ciphers (without a permanent server key) also use ephemeral DH keys."
0,0,SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1,,,null,SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1.,"SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1. The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA. There is no corresponding function working on a single SSL object."
0,0,"Setting the maximum depth to 2 allows the levels 0 , 1 , and 2",,,null,"Setting the maximum depth to 2 allows the levels 0, 1, and 2.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,SSL_CTX_set_ex_data_APIName is used to store application data at SSL_CTX_set_ex_data_APIParam_3 for SSL_CTX_set_ex_data_APIParam_2 into the SSL_CTX_set_ex_data_APIParam_1 object,,,null,SSL_CTX_set_ex_data_APIName is used to store application data at SSL_CTX_set_ex_data_APIParam_3 for SSL_CTX_set_ex_data_APIParam_2 into the SSL_CTX_set_ex_data_APIParam_1 object.,SSL_CTX_set_ex_data_APIName is used to store application data at SSL_CTX_set_ex_data_APIParam_3 for SSL_CTX_set_ex_data_APIParam_2 into the SSL_CTX_set_ex_data_APIParam_1 object.
0,0,Applications do not have to call BIO_do_handshake_APIName but may wish to do so to separate the handshake process from other I/O processing,,,null,Applications do not have to call BIO_do_handshake_APIName but may wish to do so to separate the handshake process from other I/O processing.,Applications do not have to call BIO_do_handshake_APIName but may wish to do so to separate the handshake process from other I/O processing.
0,0,Comparison is described in BN_cmp_APIName,,,null,"Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations.","The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations. Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations. The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName ."
0,0,"higher level CA certificate '' , and so on",,,null,"The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,SSL_CTX_set_cert_verify_callback_APIName does not provide diagnostic information,,,null,SSL_CTX_set_cert_verify_callback_APIName does not provide diagnostic information.,SSL_CTX_set_cert_verify_callback_APIName does not provide diagnostic information.
0,0,BN_init_APIName initializes an existing uninitialized BN_init_APIParam_1,,,null,BN_init_APIName initializes an existing uninitialized BN_init_APIParam_1.,BN_new_APIName allocates and initializes a BN_init_APIParam_1 structure. BN_init_APIName initializes an existing uninitialized BN_init_APIParam_1.
0,0,BN_new_APIName allocates and initializes a BN_init_APIParam_1 structure,,,null,BN_new_APIName allocates and initializes a BN_init_APIParam_1 structure.,BN_new_APIName allocates and initializes a BN_init_APIParam_1 structure. BN_init_APIName initializes an existing uninitialized BN_init_APIParam_1.
0,0,BN_add_APIName describes most of the arithmetic operations,,,null,The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations.,"The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations. Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations. The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName ."
0,0,The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName,,,null,The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName .,"The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations. Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations. The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName ."
0,0,The output lines are indented by ECPKParameters_print_fp_APIParam_3 ECPKParameters_print_APIParam_3 spaces,,,null,The output lines are indented by ECPKParameters_print_fp_APIParam_3 ECPKParameters_print_APIParam_3 spaces.,The ECPKParameters_print and ECPKParameters_print_fp functions print a human-readable output of the public parameters of the EC_GROUP to ECPKParameters_print_APIParam_1 or ECPKParameters_print_fp_APIParam_1. The output lines are indented by ECPKParameters_print_fp_APIParam_3 ECPKParameters_print_APIParam_3 spaces.
0,0,The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName,,,null,The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations.,"The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations. Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations. The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName ."
0,0,The ALPN and SNI callbacks are both executed Hello processing,,,during Client,The ALPN and SNI callbacks are both executed during Client Hello processing.,"The ALPN and SNI callbacks are both executed during Client Hello processing. The servername callback is executed first, followed by the ALPN callback."
0,0,SSL_CTX_clear_extra_chain_certs_APIName clears all extra chain certificates associated with SSL_CTX_clear_extra_chain_certs_APIParam_1,,,null,SSL_CTX_clear_extra_chain_certs_APIName clears all extra chain certificates associated with SSL_CTX_clear_extra_chain_certs_APIParam_1.,SSL_CTX_clear_extra_chain_certs_APIName clears all extra chain certificates associated with SSL_CTX_clear_extra_chain_certs_APIParam_1.
0,0,SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which,,,null,SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure.,"SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,"BN_zero_APIName describes certain assignments , BN_rand_APIName the generation of random numbers , BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations",,,null,"Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations.","The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName ; BN_add_APIName describes most of the arithmetic operations. Comparison is described in BN_cmp_APIName ; BN_zero_APIName describes certain assignments, BN_rand_APIName the generation of random numbers, BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations. The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName ."
0,0,BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s,,,null,"Then, BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s.","A function must call BN_CTX_start_APIName first. Then, BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s. All BN_CTX_get_APIName calls must be made before calling any other functions that use the BN_CTX_start_APIParam_1 BN_CTX_get_APIParam_1 BN_CTX_get_APIParam_1 as an argument."
0,0,You can find out,,,if OpenSSL was configured with thread support,You can find out if OpenSSL was configured with thread support:,You can find out if OpenSSL was configured with thread support:
0,0,EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName,,,null,EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName.,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3. EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function. EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName. If EVP_DigestInit_ex_APIParam_3 is NULL then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used.
0,0,depth certificates in a chain are used,,,during the verification procedure,SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure.,"SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,an ephemeral DH key exchange can take place,,,When using a cipher with RSA authentication,"When using a cipher with RSA authentication, an ephemeral DH key exchange can take place.","When using a cipher with RSA authentication, an ephemeral DH key exchange can take place. Ciphers with DSA keys always use ephemeral DH keys as well. In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing. Anonymous ciphers (without a permanent server key) also use ephemeral DH keys."
0,0,HMAC_CTX_cleanup_APIName erases the key and other data from the HMAC_CTX_cleanup_APIParam_1 and releases any associated resources,,,null,HMAC_CTX_cleanup_APIName erases the key and other data from the HMAC_CTX_cleanup_APIParam_1 and releases any associated resources.,HMAC_CTX_cleanup_APIName erases the key and other data from the HMAC_CTX_cleanup_APIParam_1 and releases any associated resources. HMAC_CTX_cleanup_APIName must be called when an HMAC_CTX_cleanup_APIParam_1 is no longer required.
0,0,This will replace the RSA_METHOD used by the RSA key and,,,null,"This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change.","RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1. This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have RSA keys that only work with certain RSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results."
0,0,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3,,,null,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3.,EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3. EVP_DigestInit_ex_APIParam_1 must be initialized before calling this function. EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName. If EVP_DigestInit_ex_APIParam_3 is NULL then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used.
0,0,a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued,,,"if these certificates would not be present , most likely","Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,d2i_ECPKParameters_fp_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_fp_APIName attempts to parse data from FILE pointer ECPKParameters_print_fp_APIParam_1,,,null,d2i_ECPKParameters_fp_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_fp_APIName attempts to parse data from FILE pointer ECPKParameters_print_fp_APIParam_1.,d2i_ECPKParameters_fp_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_fp_APIName attempts to parse data from FILE pointer ECPKParameters_print_fp_APIParam_1.
0,0,"starting with the subject 's certificate , followed by intermediate CA certificates , and ending at the highest level CA",,,if applicable,"The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA.","SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1. The certificates must be in PEM format and must be sorted starting with the subject's certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA. There is no corresponding function working on a single SSL object."
0,0,Why is this useful you ask ?,,,null,Why is this useful you ask?,"DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback. Why is this useful you ask? Because this routine will allow you to encrypt an arbitrary number of bytes, no 8 byte padding. Each call to this routine will encrypt the input bytes to output and then update ivec and num. num contains 'how far' we are though ivec. If this does not make much sense, read more about cfb mode of DES :-)."
0,0,This handshake is being canceled for some reason unrelated to a protocol failure,,,null,This handshake is being canceled for some reason unrelated to a protocol failure.,"This handshake is being canceled for some reason unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning."
0,0,SSL_CTX_set0_verify_cert_store_APIName and SSL_CTX_set1_verify_cert_store_APIName set the certificate store used for certificate verification to SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2,,,null,SSL_CTX_set0_verify_cert_store_APIName and SSL_CTX_set1_verify_cert_store_APIName set the certificate store used for certificate verification to SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2.,SSL_CTX_set0_verify_cert_store_APIName and SSL_CTX_set1_verify_cert_store_APIName set the certificate store used for certificate verification to SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2.
0,0,OpenSSL_add_all_ciphers_APIName adds all encryption algorithms to the table including password based encryption algorithms,,,null,OpenSSL_add_all_ciphers_APIName adds all encryption algorithms to the table including password based encryption algorithms.,OpenSSL_add_all_ciphers_APIName adds all encryption algorithms to the table including password based encryption algorithms.
0,0,RSA_blinding_off_APIName turns blinding off and frees the memory used for the blinding factor,,,null,RSA_blinding_off_APIName turns blinding off and frees the memory used for the blinding factor.,RSA_blinding_off_APIName turns blinding off and frees the memory used for the blinding factor.
0,0,DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback,,,null,DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback.,"DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback. Why is this useful you ask? Because this routine will allow you to encrypt an arbitrary number of bytes, no 8 byte padding. Each call to this routine will encrypt the input bytes to output and then update ivec and num. num contains 'how far' we are though ivec. If this does not make much sense, read more about cfb mode of DES :-)."
0,0,d2i_RSA_PUBKEY_APIName and i2d_RSA_PUBKEY_APIName decode and encode an RSA public key using a SubjectPublicKeyInfo structure,,,null,d2i_RSA_PUBKEY_APIName and i2d_RSA_PUBKEY_APIName decode and encode an RSA public key using a SubjectPublicKeyInfo (certificate public key) structure.,d2i_RSA_PUBKEY_APIName and i2d_RSA_PUBKEY_APIName decode and encode an RSA public key using a SubjectPublicKeyInfo (certificate public key) structure.
0,0,BIO_read_APIName and BIO_write_APIName read or write the underlying socket,,,null,BIO_read_APIName and BIO_write_APIName read or write the underlying socket.,BIO_read_APIName and BIO_write_APIName read or write the underlying socket. BIO_puts_APIName is supported but BIO_gets_APIName is not.
0,0,"versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types , OpenSSL 1.0.2 and later have a separate chain store for each type",,,null,"Note: versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types, OpenSSL 1.0.2 and later have a separate chain store for each type.","SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store. The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName . Note: versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types, OpenSSL 1.0.2 and later have a separate chain store for each type. SSL_CTX_use_certificate_chain_file_APIName should be used instead of the SSL_CTX_use_certificate_file_APIName function in order to allow the use of complete certificate chains even when no trusted CA storage is used or when the CA issuing the certificate shall not be added to the trusted CA storage."
0,0,The ECPKParameters_print and ECPKParameters_print_fp functions print a human-readable output of the public parameters of the EC_GROUP to ECPKParameters_print_APIParam_1 or ECPKParameters_print_fp_APIParam_1,,,null,The ECPKParameters_print and ECPKParameters_print_fp functions print a human-readable output of the public parameters of the EC_GROUP to ECPKParameters_print_APIParam_1 or ECPKParameters_print_fp_APIParam_1.,The ECPKParameters_print and ECPKParameters_print_fp functions print a human-readable output of the public parameters of the EC_GROUP to ECPKParameters_print_APIParam_1 or ECPKParameters_print_fp_APIParam_1. The output lines are indented by ECPKParameters_print_fp_APIParam_3 ECPKParameters_print_APIParam_3 spaces.
0,0,SHA-1 is a cryptographic hash function with a 160 bit output,,,null,SHA-1 (Secure Hash Algorithm) is a cryptographic hash function with a 160 bit output.,SHA-1 (Secure Hash Algorithm) is a cryptographic hash function with a 160 bit output.
0,0,The type of a key can be obtained with EVP_PKEY_type,,,null,The type of a key can be obtained with EVP_PKEY_type(pkey->type).,"EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1. The type of a key can be obtained with EVP_PKEY_type(pkey->type). The return value will be EVP_PKEY_RSA, EVP_PKEY_DSA, EVP_PKEY_DH or EVP_PKEY_EC for the corresponding key types or NID_undef if the key type is unassigned."
0,0,MDC2 is a method to construct hash functions with 128 bit output from block ciphers,,,null,MDC2 is a method to construct hash functions with 128 bit output from block ciphers.,MDC2 is a method to construct hash functions with 128 bit output from block ciphers. These functions are an implementation of MDC2 with DES.
0,0,Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain,,,null,Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain.,Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain. Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain. Both BIO_gets_APIName and BIO_puts_APIName are supported.
0,0,ERR_set_mark_APIName sets a mark on the current topmost error record,,,if there is one,ERR_set_mark_APIName sets a mark on the current topmost error record if there is one.,ERR_set_mark_APIName sets a mark on the current topmost error record if there is one.
0,0,OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation,,,null,OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation.,"OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation. The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary. The total amount of space required is returned. If OBJ_obj2txt_APIParam_4 is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used."
0,0,BIO_next_APIName was added to OpenSSL 0.9.6 to provide a ` clean ' way to traverse a BIO chain or find multiple matches using BIO_find_type_APIName,,,null,BIO_next_APIName was added to OpenSSL 0.9.6 to provide a 'clean' way to traverse a BIO chain or find multiple matches using BIO_find_type_APIName.,BIO_next_APIName was added to OpenSSL 0.9.6 to provide a 'clean' way to traverse a BIO chain or find multiple matches using BIO_find_type_APIName. Previous versions had to use:
0,0,The function EVP_PKEY_cmp_APIName compares the public key components and paramters of keys EVP_PKEY_cmp_APIParam_1 and EVP_PKEY_cmp_APIParam_2,,,null,The function EVP_PKEY_cmp_APIName compares the public key components and paramters (if present) of keys EVP_PKEY_cmp_APIParam_1 and EVP_PKEY_cmp_APIParam_2.,The function EVP_PKEY_cmp_APIName compares the public key components and paramters (if present) of keys EVP_PKEY_cmp_APIParam_1 and EVP_PKEY_cmp_APIParam_2.
0,0,Each call to this routine will encrypt the input bytes to output and update ivec and num,,,null,Each call to this routine will encrypt the input bytes to output and then update ivec and num.,"DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback. Why is this useful you ask? Because this routine will allow you to encrypt an arbitrary number of bytes, no 8 byte padding. Each call to this routine will encrypt the input bytes to output and then update ivec and num. num contains 'how far' we are though ivec. If this does not make much sense, read more about cfb mode of DES :-)."
0,0,The size in bytes,,,null,The size in bytes.,The size in bytes.
0,0,OpenSSL_add_ssl_algorithms_APIName and SSLeay_add_ssl_algorithms_APIName are synonyms for SSL_library_init_APIName,,,null,OpenSSL_add_ssl_algorithms_APIName and SSLeay_add_ssl_algorithms_APIName are synonyms for SSL_library_init_APIName.,OpenSSL_add_ssl_algorithms_APIName and SSLeay_add_ssl_algorithms_APIName are synonyms for SSL_library_init_APIName.
0,0,BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3,,,null,BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3.,BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3. When set after every BIO_ctrl_APIParam_3 bytes of I/O (read and write) the SSL session is automatically renegotiated. BIO_ctrl_APIParam_3 must be at least 512 bytes.
0,0,The paramgen_init_APIName and paramgen_APIName methods deal with key parameter generation,,,null,The paramgen_init_APIName and paramgen_APIName methods deal with key parameter generation.,The paramgen_init_APIName and paramgen_APIName methods deal with key parameter generation. The paramgen_init_APIName and paramgen_APIName methods are called by EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName to handle the parameter generation process.
0,0,"des_read_pw_string_APIName is available in the MIT Kerberos library as well , and is also available under the name EVP_read_pw_string_APIName",,,null,"des_read_pw_string_APIName is available in the MIT Kerberos library as well, and is also available under the name EVP_read_pw_string_APIName.","des_read_pw_string_APIName is available in the MIT Kerberos library as well, and is also available under the name EVP_read_pw_string_APIName."
0,0,it is possible for them to fail,1,,Although the functions do not return error codes," , it is possible for them to fail .","Although the functions do not return error codes, it is possible for them to fail. This will only happen as a result of a memory allocation failure so this is not too much of a problem in practice."
0,0,new ENGINE functionality was added to OpenSSL 0.9.7,,,null,For example new ENGINE functionality was added to OpenSSL 0.9.7.,"There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
0,0,BN_CTX_init_APIName initializes an existing uninitialized BN_CTX_new_APIParam_0,,,null,BN_CTX_init_APIName (deprecated) initializes an existing uninitialized BN_CTX_new_APIParam_0.,BN_CTX_init_APIName (deprecated) initializes an existing uninitialized BN_CTX_new_APIParam_0. This should not be used for new programs. Use BN_CTX_new_APIName instead.
0,0,The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter,,,null,The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter.,X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1. Each line (for multiline formats) is indented by X509_NAME_print_ex_APIParam_3 spaces. The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter.
0,0,It is possible to directly access this database eg for searching,,,null,It is possible to directly access this database eg for searching.,"The sessions in the internal session cache are kept in an lhash_APIName type database. It is possible to directly access this database eg for searching. In parallel, the sessions form a linked list which is maintained separately from the lhash_APIName operations, so that the database must not be modified directly but by using the SSL_CTX_add_session_APIName family of functions."
0,0,SSL_SESSION_free_APIName will be called for that session,,,If there is already a session set inside SSL_set_session_APIParam_1,"If there is already a session set inside SSL_set_session_APIParam_1 (because it was set with SSL_set_session_APIName before or because the same SSL_set_session_APIParam_1 was already used for a connection), SSL_SESSION_free_APIName will be called for that session.","If there is already a session set inside SSL_set_session_APIParam_1 (because it was set with SSL_set_session_APIName before or because the same SSL_set_session_APIParam_1 was already used for a connection), SSL_SESSION_free_APIName will be called for that session."
0,0,The standard terminology for ephemeral Diffie-Hellman schemes is DHE or ECDHE,,,null,The standard terminology for ephemeral Diffie-Hellman schemes is DHE (finite field) or ECDHE (elliptic curve).,"The standard terminology for ephemeral Diffie-Hellman schemes is DHE (finite field) or ECDHE (elliptic curve). This version of OpenSSL idiosyncratically reports these schemes as EDH and EECDH, even though This version of OpenSSL also accepts the standard terminology."
0,0,BN_clear_APIName erases the memory used by BN_clear_APIParam_1 and sets BN_clear_APIParam_1 to the value 0,,,null,BN_clear_APIName erases the memory used by BN_clear_APIParam_1 and sets BN_clear_APIParam_1 to the value 0.,BN_clear_APIName is used to destroy sensitive data such as keys when they are no longer needed. BN_clear_APIName erases the memory used by BN_clear_APIParam_1 and sets BN_clear_APIParam_1 to the value 0.
0,0,X509_free_APIName frees up the X509_free_APIParam_1 structure X509_free_APIParam_1,,,null,X509_free_APIName frees up the X509_free_APIParam_1 structure X509_free_APIParam_1.,X509_free_APIName frees up the X509_free_APIParam_1 structure X509_free_APIParam_1.
0,0,EVP_DigestUpdate_APIName hashes EVP_DigestUpdate_APIParam_3 bytes of data at EVP_DigestUpdate_APIParam_2 into the digest context EVP_DigestUpdate_APIParam_1,,,null,EVP_DigestUpdate_APIName hashes EVP_DigestUpdate_APIParam_3 bytes of data at EVP_DigestUpdate_APIParam_2 into the digest context EVP_DigestUpdate_APIParam_1.,EVP_DigestUpdate_APIName hashes EVP_DigestUpdate_APIParam_3 bytes of data at EVP_DigestUpdate_APIParam_2 into the digest context EVP_DigestUpdate_APIParam_1. EVP_DigestUpdate_APIName can be called several times on the same EVP_DigestUpdate_APIParam_1 to hash additional data.
0,0,BIO_free_all_APIName can be called to free up the whole chain,,,If no additional data needs to be written,"If no additional data needs to be written ,BIO_free_all_APIName can be called to free up the whole chain.","If an application wishes to write additional data to BIO_new_CMS_APIParam_1 ,BIOs should be removed from the chain using BIO_pop_APIName and freed with BIO_free_APIName until BIO_new_CMS_APIParam_1 is reached. If no additional data needs to be written ,BIO_free_all_APIName can be called to free up the whole chain."
0,0,the numerical form will always be used,,,If OBJ_obj2txt_APIParam_4 is 1,"If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used.","OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation. The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary. The total amount of space required is returned. If OBJ_obj2txt_APIParam_4 is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used."
0,0,The paramgen_init_APIName and paramgen_APIName methods are called by EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName to handle the parameter generation process,,,null,The paramgen_init_APIName and paramgen_APIName methods are called by EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName to handle the parameter generation process.,The paramgen_init_APIName and paramgen_APIName methods deal with key parameter generation. The paramgen_init_APIName and paramgen_APIName methods are called by EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName to handle the parameter generation process.
0,0,X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1,,,null,X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1.,X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1. Each line (for multiline formats) is indented by X509_NAME_print_ex_APIParam_3 spaces. The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter.
0,0,the SSL session is automatically renegotiated,,,When set after every BIO_ctrl_APIParam_3 bytes of I/O,When set after every BIO_ctrl_APIParam_3 bytes of I/O (read and write) the SSL session is automatically renegotiated.,BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3. When set after every BIO_ctrl_APIParam_3 bytes of I/O (read and write) the SSL session is automatically renegotiated. BIO_ctrl_APIParam_3 must be at least 512 bytes.
0,0,the store associated with the parent SSL_CTX is used instead to retain compatibility with previous versions of OpenSSL,,,If the chain or the verification store is not set,"If the chain or the verification store is not set ,then the store associated with the parent SSL_CTX is used instead to retain compatibility with previous versions of OpenSSL.","If the chain or the verification store is not set ,then the store associated with the parent SSL_CTX is used instead to retain compatibility with previous versions of OpenSSL."
0,0,SSL_library_init_APIName adds ciphers and digests used directly and indirectly by SSL/TLS,,,null,SSL_library_init_APIName adds ciphers and digests used directly and indirectly by SSL/TLS.,SSL_library_init_APIName adds ciphers and digests used directly and indirectly by SSL/TLS.
0,0,The function EVP_PKEY_derive_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_derive_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_derive_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,RSA_free_APIName frees the RSA_free_APIParam_1 structure and its components,,,null,RSA_free_APIName frees the RSA_free_APIParam_1 structure and its components.,RSA_free_APIName frees the RSA_free_APIParam_1 structure and its components. The key is erased before the memory is returned to the system.
0,0,BN_clear_APIName is used to destroy sensitive data such as keys,,,when they are no longer needed,BN_clear_APIName is used to destroy sensitive data such as keys when they are no longer needed.,BN_clear_APIName is used to destroy sensitive data such as keys when they are no longer needed. BN_clear_APIName erases the memory used by BN_clear_APIParam_1 and sets BN_clear_APIParam_1 to the value 0.
0,0,EVP_DigestUpdate_APIName can be called several times on the same EVP_DigestUpdate_APIParam_1 to hash additional data,,,null,EVP_DigestUpdate_APIName can be called several times on the same EVP_DigestUpdate_APIParam_1 to hash additional data.,EVP_DigestUpdate_APIName hashes EVP_DigestUpdate_APIParam_3 bytes of data at EVP_DigestUpdate_APIParam_2 into the digest context EVP_DigestUpdate_APIParam_1. EVP_DigestUpdate_APIName can be called several times on the same EVP_DigestUpdate_APIParam_1 to hash additional data.
0,0,The representation is written as,,,null,"The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary.","OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation. The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary. The total amount of space required is returned. If OBJ_obj2txt_APIParam_4 is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used."
0,0,The sessions in the internal session cache are kept in an lhash_APIName type database,,,null,The sessions in the internal session cache are kept in an lhash_APIName type database.,"The sessions in the internal session cache are kept in an lhash_APIName type database. It is possible to directly access this database eg for searching. In parallel, the sessions form a linked list which is maintained separately from the lhash_APIName operations, so that the database must not be modified directly but by using the SSL_CTX_add_session_APIName family of functions."
0,0,All the functions work through a context of the type UI,,,null,All the functions work through a context of the type UI.,"All the functions work through a context of the type UI. This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD, which is an ordered vector of functions that carry out the actual prompting."
0,0,SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1,,,null,SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1.,"SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1. If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked."
0,0,OBJ_cleanup_APIName cleans up OpenSSLs internal object table,,,null,OBJ_cleanup_APIName cleans up OpenSSLs internal object table: this should be called before an application exits if any new objects were added using OBJ_create_APIName.,OBJ_cleanup_APIName cleans up OpenSSLs internal object table: this should be called before an application exits if any new objects were added using OBJ_create_APIName.
0,0,The following functions are included in the DES library for compatibility with the MIT Kerberos library,,,null,The following functions are included in the DES library for compatibility with the MIT Kerberos library.,The following functions are included in the DES library for compatibility with the MIT Kerberos library.
0,0,ECDSA_SIG_new_APIName allocates a new ECDSA_SIG_new_APIParam_0 structure and initialize it,,,null,ECDSA_SIG_new_APIName allocates a new ECDSA_SIG_new_APIParam_0 structure (note: this function also allocates the BIGNUMs) and initialize it.,ECDSA_SIG_new_APIName allocates a new ECDSA_SIG_new_APIParam_0 structure (note: this function also allocates the BIGNUMs) and initialize it.
0,0,The PEM functions read or write structures in PEM format,,,null,The PEM functions read or write structures in PEM format.,The PEM functions read or write structures in PEM format. In this sense PEM format is simply base64 encoded data surrounded by header lines.
0,0,BN_MONT_CTX_set_APIName sets up the BN_MONT_CTX_set_APIParam_1 structure from the modulus BN_MONT_CTX_set_APIParam_2 by precomputing its inverse and a value R,,,null,BN_MONT_CTX_set_APIName sets up the BN_MONT_CTX_set_APIParam_1 structure from the modulus BN_MONT_CTX_set_APIParam_2 by precomputing its inverse and a value R.,BN_MONT_CTX_set_APIName sets up the BN_MONT_CTX_set_APIParam_1 structure from the modulus BN_MONT_CTX_set_APIParam_2 by precomputing its inverse and a value R.
0,0,BIO_new_fp_APIName creates a file BIO wrapping BIO_new_fp_APIParam_1,,,null,BIO_new_fp_APIName creates a file BIO wrapping BIO_new_fp_APIParam_1.,"BIO_new_fp_APIName creates a file BIO wrapping BIO_new_fp_APIParam_1. Flags can be: BIO_CLOSE, BIO_NOCLOSE (the close flag) BIO_FP_TEXT (sets the underlying stream to text mode, default is binary: this only has any effect under Win32)."
0,0,These functions implement the Digital Signature Algorithm,,,null,These functions implement the Digital Signature Algorithm (DSA).,These functions implement the Digital Signature Algorithm (DSA). The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key. Signature generation and verification are described in DSA_sign_APIName .
0,0,SSL_CTX_set_options_APIName and SSL_set_options_APIName affect the protocol behaviour of the SSL library,,,null,SSL_CTX_set_options_APIName and SSL_set_options_APIName affect the (external) protocol behaviour of the SSL library.,SSL_CTX_set_options_APIName and SSL_set_options_APIName affect the (external) protocol behaviour of the SSL library. The (internal) behaviour of the API can be changed by using the similar SSL_CTX_set_mode_APIName and SSL_set_mode_APIName functions.
0,0,Signature generation and verification are described in DSA_sign_APIName,,,null,Signature generation and verification are described in DSA_sign_APIName .,These functions implement the Digital Signature Algorithm (DSA). The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key. Signature generation and verification are described in DSA_sign_APIName .
0,0,"As of version 0.9.7 , DH_METHOD implementations are grouped together with other algorithmic APIs in DH_new_method_APIParam_1 modules",,,null,"As of version 0.9.7, DH_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DH_new_method_APIParam_1 modules.","As of version 0.9.7, DH_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DH_new_method_APIParam_1 modules. If a default ENGINE is specified for DH functionality using an ENGINE API function, that will override any DH defaults set using the DH API (ie DH_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DH and other cryptographic algorithms."
0,0,In this sense PEM format is simply base64 encoded data surrounded by header lines,,,null,In this sense PEM format is simply base64 encoded data surrounded by header lines.,The PEM functions read or write structures in PEM format. In this sense PEM format is simply base64 encoded data surrounded by header lines.
0,0,"BN_is_zero_APIName , BN_is_one_APIName , BN_is_word_APIName and BN_is_odd_APIName are macros",,,null,"BN_is_zero_APIName, BN_is_one_APIName, BN_is_word_APIName and BN_is_odd_APIName are macros.","BN_is_zero_APIName, BN_is_one_APIName, BN_is_word_APIName and BN_is_odd_APIName are macros."
0,0,SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1,,,null,SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1.,"SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1. If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked."
0,0,"DES_ede3_ofb64_encrypt_APIName and DES_ede2_ofb64_encrypt_APIName is the same as DES_ofb64_encrypt_APIName , using Triple-DES",,,null,"DES_ede3_ofb64_encrypt_APIName and DES_ede2_ofb64_encrypt_APIName is the same as DES_ofb64_encrypt_APIName, using Triple-DES.","DES_ede3_ofb64_encrypt_APIName and DES_ede2_ofb64_encrypt_APIName is the same as DES_ofb64_encrypt_APIName, using Triple-DES."
0,0,This is a limitation of the current RC5 code rather than the EVP interface,,,null,This is a limitation of the current RC5 code rather than the EVP interface.,"For RC5 the number of rounds can currently only be set to 8, 12 or 16. This is a limitation of the current RC5 code rather than the EVP interface."
0,0,This constant is useful for use in comparisons and assignment,,,null,This constant is useful for use in comparisons and assignment.,BN_value_one_APIName returns a BN_value_one_APIParam_0 constant of value 1. This constant is useful for use in comparisons and assignment.
0,0,The generation of shared DSA parameters is described in DSA_generate_parameters_APIName,,,null,The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key.,These functions implement the Digital Signature Algorithm (DSA). The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key. Signature generation and verification are described in DSA_sign_APIName .
0,0,The behaviour of the API can be changed by using the similar SSL_CTX_set_mode_APIName and SSL_set_mode_APIName functions,,,null,The (internal) behaviour of the API can be changed by using the similar SSL_CTX_set_mode_APIName and SSL_set_mode_APIName functions.,SSL_CTX_set_options_APIName and SSL_set_options_APIName affect the (external) protocol behaviour of the SSL library. The (internal) behaviour of the API can be changed by using the similar SSL_CTX_set_mode_APIName and SSL_set_mode_APIName functions.
0,0,BN_bin2bn_APIName converts the positive integer in big-endian form of length BN_bin2bn_APIParam_2 at BN_bin2bn_APIParam_1 into a BN_bin2bn_APIParam_3 and places it in BN_bin2bn_APIParam_3,,,null,BN_bin2bn_APIName converts the positive integer in big-endian form of length BN_bin2bn_APIParam_2 at BN_bin2bn_APIParam_1 into a BN_bin2bn_APIParam_3 and places it in BN_bin2bn_APIParam_3.,"BN_bin2bn_APIName converts the positive integer in big-endian form of length BN_bin2bn_APIParam_2 at BN_bin2bn_APIParam_1 into a BN_bin2bn_APIParam_3 and places it in BN_bin2bn_APIParam_3. If BN_bin2bn_APIParam_3 is NULL, a new BN_bin2bn_APIParam_3 is created."
0,0,a new BN_bin2bn_APIParam_3 is created,,,If BN_bin2bn_APIParam_3 is NULL,"If BN_bin2bn_APIParam_3 is NULL, a new BN_bin2bn_APIParam_3 is created.","BN_bin2bn_APIName converts the positive integer in big-endian form of length BN_bin2bn_APIParam_2 at BN_bin2bn_APIParam_1 into a BN_bin2bn_APIParam_3 and places it in BN_bin2bn_APIParam_3. If BN_bin2bn_APIParam_3 is NULL, a new BN_bin2bn_APIParam_3 is created."
0,0,The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve,,,null,The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve.,"The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not. If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID. If not ,then asn1_flag is 0. The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve. If set ,then the curve_name must also be set."
0,0,Working in this co-ordinate system provides more efficient point multiplication operations,,,null,Working in this co-ordinate system provides more efficient point multiplication operations.,"As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively,,,null,To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively.,"As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,"There are two type of BIO , a source/sink BIO and a filter BIO",,,null,"There are two type of BIO, a source/sink BIO and a filter BIO.","There are two type of BIO, a source/sink BIO and a filter BIO."
0,0,All these functions are implemented as macros,,,null,All these functions are implemented as macros.,All these functions are implemented as macros.
0,0,DES_set_odd_parity_APIName sets the parity of the passed DES_set_odd_parity_APIParam_1 to odd,,,null,DES_set_odd_parity_APIName sets the parity of the passed DES_set_odd_parity_APIParam_1 to odd.,DES_set_odd_parity_APIName sets the parity of the passed DES_set_odd_parity_APIParam_1 to odd.
0,0,it does n't need to know or care about ENGINE control operations a configuration file,,,If an application calls OPENSSL_config_APIName,"If an application calls OPENSSL_config_APIName , it does n't need to know or care about ENGINE control operations  a configuration file .","There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
0,0,A server will only understand TLSv1 .2 client hello messages,,,null,A server will only understand TLSv1.2 client hello messages.,A TLS/SSL connection established with these methods will only understand the TLSv1.2 protocol. A client will send out TLSv1.2 client hello messages and will also indicate that client only understand TLSv1.2. A server will only understand TLSv1.2 client hello messages.
0,0,EVP_DecodeInit_APIName initialises EVP_DecodeInit_APIParam_1 for the start of a new decoding operation,,,null,EVP_DecodeInit_APIName initialises EVP_DecodeInit_APIParam_1 for the start of a new decoding operation.,EVP_DecodeInit_APIName initialises EVP_DecodeInit_APIParam_1 for the start of a new decoding operation.
0,0,SSL_CTX_set_quiet_shutdown_APIName sets the `` quiet shutdown '' flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2,,,null,"SSL_CTX_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2.","SSL_CTX_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2. SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called. SSL_CTX_set_quiet_shutdown_APIParam_2 may be 0 or 1."
0,0,An EC_KEY represents a public key and an associated private key,,,null,An EC_KEY represents a public key and (optionaly) an associated private key.,An EC_KEY represents a public key and (optionaly) an associated private key. A new EC_KEY (with no associated curve) can be constructed by calling EC_KEY_new. The reference count for the newly created EC_KEY is initially set to 1. A curve can be associated with the EC_KEY by calling EC_KEY_set_group.
0,0,A new EC_KEY can be constructed by calling EC_KEY_new,,,null,A new EC_KEY (with no associated curve) can be constructed by calling EC_KEY_new.,An EC_KEY represents a public key and (optionaly) an associated private key. A new EC_KEY (with no associated curve) can be constructed by calling EC_KEY_new. The reference count for the newly created EC_KEY is initially set to 1. A curve can be associated with the EC_KEY by calling EC_KEY_set_group.
0,0,the last item installed will be checked,,,If more than one key/certificate pair is installed,"If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked.","SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1. If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked."
0,0,BIO_set_fd_APIName sets the socket of BIO BIO_set_fd_APIParam_1 to BIO_set_fd_APIParam_2 and the close flag to BIO_set_fd_APIParam_3,,,null,BIO_set_fd_APIName sets the socket of BIO BIO_set_fd_APIParam_1 to BIO_set_fd_APIParam_2 and the close flag to BIO_set_fd_APIParam_3.,BIO_set_fd_APIName sets the socket of BIO BIO_set_fd_APIParam_1 to BIO_set_fd_APIParam_2 and the close flag to BIO_set_fd_APIParam_3.
0,0,it is possible for BIO_should_io_special_APIName with the reason BIO_RR_ACCEPT,,,If the underlying accept socket is non-blocking and BIO_do_accept_APIName is called to await an incoming connection,"If the underlying accept socket is non-blocking and BIO_do_accept_APIName is called to await an incoming connection, it is possible for BIO_should_io_special_APIName with the reason BIO_RR_ACCEPT.","If the underlying accept socket is non-blocking and BIO_do_accept_APIName is called to await an incoming connection, it is possible for BIO_should_io_special_APIName with the reason BIO_RR_ACCEPT. If this happens then it is an indication that an accept attempt would block: the application should take appropriate action to wait until the underlying socket has accepted a connection and retry the call."
0,0,A null bio can be placed on the end of a chain to discard any data passed through it,,,null,A null bio can be placed on the end of a chain to discard any data passed through it.,A null bio can be placed on the end of a chain to discard any data passed through it.
0,0,this is a named curve with an associated ASN1 OID,,,If the asn1_flag is 1,"If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID.","The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not. If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID. If not ,then asn1_flag is 0. The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve. If set ,then the curve_name must also be set."
0,0,The function EVP_PKEY_verify_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_verify_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_verify_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and,,,null,"BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 or, after specific number of uses and if the necessary parameters are set, by re-creating the blinding parameters.","BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 or, after specific number of uses and if the necessary parameters are set, by re-creating the blinding parameters."
0,0,"BN_BLINDING_new_APIParam_2 or , after specific number of uses and , by re-creating the blinding parameters",,,if the necessary parameters are set,"BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 or, after specific number of uses and if the necessary parameters are set, by re-creating the blinding parameters.","BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 or, after specific number of uses and if the necessary parameters are set, by re-creating the blinding parameters."
0,0,the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked,,,If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1,"If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked.","SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1. If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked."
0,0,the RSA key/certificate pair will be checked,,,If eg the last item was a RSA certificate or key,"If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked.","SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1. If more than one key/certificate pair (RSA/DSA) is installed, the last item installed will be checked. If eg the last item was a RSA certificate or key, the RSA key/certificate pair will be checked. SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1. If no key/certificate was explicitly added for this SSL_check_private_key_APIParam_1, the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked."
0,0,"These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO , respectively",,,null,"These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively.","The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName. The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms, select_APIName or poll_APIName for writing on the socket file descriptor can be used."
0,0,the method of the SSL object is reset to the method currently set in the corresponding SSL_CTX object,,,When SSL_clear_APIName is called and no session is connected to an SSL object,"When SSL_clear_APIName is called and no session is connected to an SSL object, the method of the SSL object is reset to the method currently set in the corresponding SSL_CTX object.","When SSL_clear_APIName is called and no session is connected to an SSL object, the method of the SSL object is reset to the method currently set in the corresponding SSL_CTX object."
0,0,A TLS/SSL connection established with these methods will only understand the TLSv1 .2 protocol,,,null,A TLS/SSL connection established with these methods will only understand the TLSv1.2 protocol.,A TLS/SSL connection established with these methods will only understand the TLSv1.2 protocol. A client will send out TLSv1.2 client hello messages and will also indicate that client only understand TLSv1.2. A server will only understand TLSv1.2 client hello messages.
0,0,BIO_get_fd_APIName and BIO_set_fd_APIName can be called to retrieve or set the accept socket,,,null,BIO_get_fd_APIName and BIO_set_fd_APIName can be called to retrieve or set the accept socket.,BIO_get_fd_APIName and BIO_set_fd_APIName can be called to retrieve or set the accept socket. See BIO_s_fd_APIName
0,0,A curve can be associated with the EC_KEY by calling EC_KEY_set_group,,,null,A curve can be associated with the EC_KEY by calling EC_KEY_set_group.,An EC_KEY represents a public key and (optionaly) an associated private key. A new EC_KEY (with no associated curve) can be constructed by calling EC_KEY_new. The reference count for the newly created EC_KEY is initially set to 1. A curve can be associated with the EC_KEY by calling EC_KEY_set_group.
0,0,The reference count for the newly created EC_KEY is initially set to 1,,,null,The reference count for the newly created EC_KEY is initially set to 1.,An EC_KEY represents a public key and (optionaly) an associated private key. A new EC_KEY (with no associated curve) can be constructed by calling EC_KEY_new. The reference count for the newly created EC_KEY is initially set to 1. A curve can be associated with the EC_KEY by calling EC_KEY_set_group.
0,0,The verification of certificates can be controlled by a set of logically or'ed SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags,,,null,The verification of certificates can be controlled by a set of logically or'ed SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags:,The verification of certificates can be controlled by a set of logically or'ed SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags:
0,0,A new session was negotiated,,,null,A new session was negotiated.,A new session was negotiated.
0,0,"256 bit AES , Gost R3411-94 , Gost 28147-89 , 192 bit AES , 128 bit AES , triple DES , 128 bit RC2 , 64 bit RC2 , DES and 40 bit RC2",,,null,"If present the SMIMECapabilities attribute indicates support for the following algorithms in preference order: 256 bit AES, Gost R3411-94, Gost 28147-89, 192 bit AES, 128 bit AES, triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2.","If present the SMIMECapabilities attribute indicates support for the following algorithms in preference order: 256 bit AES, Gost R3411-94, Gost 28147-89, 192 bit AES, 128 bit AES, triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any of these algorithms is not available then it will not be included: for example the GOST algorithms will not be included if the GOST ENGINE is not loaded."
0,0,CMS_add1_signer_APIName adds a signer with certificate CMS_add1_signer_APIParam_2 and private key CMS_add1_signer_APIParam_3 using message digest CMS_add1_signer_APIParam_4 to CMS_ContentInfo SignedData structure CMS_add1_signer_APIParam_1,,,null,CMS_add1_signer_APIName adds a signer with certificate CMS_add1_signer_APIParam_2 and private key CMS_add1_signer_APIParam_3 using message digest CMS_add1_signer_APIParam_4 to CMS_ContentInfo SignedData structure CMS_add1_signer_APIParam_1.,CMS_add1_signer_APIName adds a signer with certificate CMS_add1_signer_APIParam_2 and private key CMS_add1_signer_APIParam_3 using message digest CMS_add1_signer_APIParam_4 to CMS_ContentInfo SignedData structure CMS_add1_signer_APIParam_1.
0,0,EVP_PKEY_meth_copy_APIName copies an EVP_PKEY_meth_copy_APIParam_1 object from EVP_PKEY_meth_copy_APIParam_2 to EVP_PKEY_meth_copy_APIParam_1,,,null,EVP_PKEY_meth_copy_APIName copies an EVP_PKEY_meth_copy_APIParam_1 object from EVP_PKEY_meth_copy_APIParam_2 to EVP_PKEY_meth_copy_APIParam_1.,EVP_PKEY_meth_copy_APIName copies an EVP_PKEY_meth_copy_APIParam_1 object from EVP_PKEY_meth_copy_APIParam_2 to EVP_PKEY_meth_copy_APIParam_1.
0,0,BIO_reset_APIName attempts to change the file pointer to the start of file using fseek,,,null,"BIO_reset_APIName attempts to change the file pointer to the start of file using fseek(stream, 0, 0).","BIO_reset_APIName attempts to change the file pointer to the start of file using fseek(stream, 0, 0)."
0,0,SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName can be used to add additional items the list of client CAs,,,null,SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName can be used to add additional items the list of client CAs.,"SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName can be used to add additional items the list of client CAs. If no list was specified before using SSL_CTX_set_client_CA_list_APIName or SSL_set_client_CA_list_APIName, a new client CA list for SSL_CTX_add_client_CA_APIParam_1 or SSL_add_client_CA_APIParam_1 (as appropriate) is opened."
0,0,The underlying BIO was not connected yet to the peer and the call would block in connect_APIName / accept_APIName,,,null,The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName.,"The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName. The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms, select_APIName or poll_APIName for writing on the socket file descriptor can be used."
0,0,it is passed and retrieved as a CRYPTO_EX_new_APIParam_1 CRYPTO_EX_dup_APIParam_3 RSA_get_ex_new_index_APIParam_2 CRYPTO_EX_free_APIParam_1 RSA_set_ex_data_APIParam_3 type,,,null,it is passed and retrieved as a CRYPTO_EX_new_APIParam_1 CRYPTO_EX_dup_APIParam_3 RSA_get_ex_new_index_APIParam_2 CRYPTO_EX_free_APIParam_1 RSA_set_ex_data_APIParam_3 type .,Since the application data can be anything at all it is passed and retrieved as a CRYPTO_EX_new_APIParam_1 CRYPTO_EX_dup_APIParam_3 RSA_get_ex_new_index_APIParam_2 CRYPTO_EX_free_APIParam_1 RSA_set_ex_data_APIParam_3 type.
0,0,The call to EVP_DigestSignFinal_APIName internally finalizes a copy of the digest context,,,null,The call to EVP_DigestSignFinal_APIName internally finalizes a copy of the digest context.,The call to EVP_DigestSignFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_DigestSignUpdate_APIName and EVP_DigestSignFinal_APIName can be called later to digest and sign additional data.
0,0,EVP_cleanup_APIName removes all ciphers and digests from the table,,,null,EVP_cleanup_APIName removes all ciphers and digests from the table.,EVP_cleanup_APIName removes all ciphers and digests from the table.
0,0,In previous versions of OpenSSL there was a link between message digest types and public key algorithms,,,null,In previous versions of OpenSSL there was a link between message digest types and public key algorithms.,"In previous versions of OpenSSL there was a link between message digest types and public key algorithms. This meant that ""clone"" digests such as EVP_dss1_APIName needed to be used to sign using SHA1 and DSA. This is no longer necessary and the use of clone digest is now discouraged."
0,0,select_APIName or poll_APIName for writing on the socket file descriptor can be used,,,null," , select_APIName or poll_APIName for writing on the socket file descriptor can be used .","The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect_APIName/accept_APIName. The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms, select_APIName or poll_APIName for writing on the socket file descriptor can be used."
0,0,SMIME_write_PKCS7_APIName adds the appropriate MIME headers to a PKCS # 7 structure to produce an S/MIME message,,,null,SMIME_write_PKCS7_APIName adds the appropriate MIME headers to a PKCS#7 structure to produce an S/MIME message.,SMIME_write_PKCS7_APIName adds the appropriate MIME headers to a PKCS#7 structure to produce an S/MIME message.
0,0,The certificate verification depth set with SSL_verify_depth_APIName stops the verification at a certain depth,,,null,The certificate verification depth set with SSL[_CTX]_verify_depth_APIName stops the verification at a certain depth.,The certificate verification depth set with SSL[_CTX]_verify_depth_APIName stops the verification at a certain depth. The error message produced will be that of an incomplete certificate chain and not X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected.
0,0,"This function is thread safe , unlike the normal crypt",,,null,"This function is thread safe, unlike the normal crypt.","DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function. This version takes only a small amount of space relative to other fast crypt_APIName implementations. This is different to the normal crypt in that the third parameter is the buffer that the return value is written into. the third parameter needs to be at least 14 bytes long. This function is thread safe, unlike the normal crypt."
0,0,i2d_PKCS7_bio_stream_APIName outputs a PKCS7 structure in BER format,,,null,i2d_PKCS7_bio_stream_APIName outputs a PKCS7 structure in BER format.,i2d_PKCS7_bio_stream_APIName outputs a PKCS7 structure in BER format.
0,0,DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function,,,null,DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function.,"DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function. This version takes only a small amount of space relative to other fast crypt_APIName implementations. This is different to the normal crypt in that the third parameter is the buffer that the return value is written into. the third parameter needs to be at least 14 bytes long. This function is thread safe, unlike the normal crypt."
0,0,BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port,,,null,BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port.,"BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port. The port is represented as a string of the form ""host:port"", where ""host"" is the interface to use and ""port"" is the port. The host can be can be ""*"" which is interpreted as meaning any interface; ""port"" has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs, that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table."
0,0,The prime number generation has a negligible error probability,,,null,The prime number generation has a negligible error probability.,The PRNG must be seeded prior to calling BN_generate_prime_ex_APIName. The prime number generation has a negligible error probability.
0,0,SSL_clear_APIName does not affect the settings,,,null,SSL_clear_APIName does not affect the settings.,"During a handshake, the option settings of the SSL object are used. When a new SSL object is created from a context using SSL_new_APIName, the current option setting is copied. Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects. SSL_clear_APIName does not affect the settings."
0,0,EC_GROUP_get_degree gets the degree of the field,,,null,EC_GROUP_get_degree gets the degree of the field.,EC_GROUP_get_degree gets the degree of the field. For Fp fields this will be the number of bits in p. For F2^m fields this will be the value m.
0,0,RSA_verify_ASN1_OCTET_STRING_APIParam_1 RSA_sign_ASN1_OCTET_STRING_APIParam_1 is ignored,,,null,RSA_verify_ASN1_OCTET_STRING_APIParam_1 RSA_sign_ASN1_OCTET_STRING_APIParam_1 is ignored.,RSA_verify_ASN1_OCTET_STRING_APIParam_1 RSA_sign_ASN1_OCTET_STRING_APIParam_1 is ignored.
0,0,SSL_clear_options_APIName clears the options set via bitmask in SSL_clear_options_APIParam_2 to SSL_clear_options_APIParam_1,,,null,SSL_clear_options_APIName clears the options set via bitmask in SSL_clear_options_APIParam_2 to SSL_clear_options_APIParam_1.,SSL_clear_options_APIName clears the options set via bitmask in SSL_clear_options_APIParam_2 to SSL_clear_options_APIParam_1.
0,0,"The RSA_padding_xxx_xxx_APIName functions are called from the RSA encrypt , decrypt , sign and verify functions",,,null,"The RSA_padding_xxx_xxx_APIName functions are called from the RSA encrypt, decrypt, sign and verify functions.","The RSA_padding_xxx_xxx_APIName functions are called from the RSA encrypt, decrypt, sign and verify functions. Normally The RSA_padding_xxx_xxx_APIName functions should not be called from application programs."
0,0,In other cases an application might consider a configuration file error as fatal and exit immediately,,,null,In other cases an application might consider a configuration file error as fatal and exit immediately.,Errors during configuration may also be handled differently by different applications. For example in some cases an error may simply print out a warning message and the application continue. In other cases an application might consider a configuration file error as fatal and exit immediately.
0,0,This version takes only a small amount of space relative to other fast crypt_APIName implementations,,,null,This version takes only a small amount of space relative to other fast crypt_APIName implementations.,"DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function. This version takes only a small amount of space relative to other fast crypt_APIName implementations. This is different to the normal crypt in that the third parameter is the buffer that the return value is written into. the third parameter needs to be at least 14 bytes long. This function is thread safe, unlike the normal crypt."
0,0,EVP_PKEY_CTX_dup_APIName duplicates the context EVP_PKEY_CTX_dup_APIParam_1,,,null,EVP_PKEY_CTX_dup_APIName duplicates the context EVP_PKEY_CTX_dup_APIParam_1.,EVP_PKEY_CTX_dup_APIName duplicates the context EVP_PKEY_CTX_dup_APIParam_1.
0,0,"These paramaters include the EC_GROUP_set_generator_APIParam_2 , the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2",,,null,"These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2.","EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve. These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2. The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2. The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve."
0,0,Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects,,,null,Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects.,"During a handshake, the option settings of the SSL object are used. When a new SSL object is created from a context using SSL_new_APIName, the current option setting is copied. Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects. SSL_clear_APIName does not affect the settings."
0,0,Errors may also be handled differently by different applications,,,during configuration,Errors during configuration may also be handled differently by different applications.,Errors during configuration may also be handled differently by different applications. For example in some cases an error may simply print out a warning message and the application continue. In other cases an application might consider a configuration file error as fatal and exit immediately.
0,0,The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations,,,null,The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations.,"EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve. These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2. The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2. The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve."
0,0,BIO_should_io_special_APIName is true,,,if some special condition,"BIO_should_io_special_APIName is true if some ""special"" condition, that is a reason other than reading or writing is the cause of the condition.","BIO_should_io_special_APIName is true if some ""special"" condition, that is a reason other than reading or writing is the cause of the condition."
0,0,After the call to EVP_PKEY_sign_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_sign_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation (see EVP_PKEY_CTX_ctrl_APIName ).,After the call to EVP_PKEY_sign_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation (see EVP_PKEY_CTX_ctrl_APIName ).
0,0,BN_generate_prime_ex_APIParam_3 will be a safe prime,,,If BN_generate_prime_ex_APIParam_3 is true,"If BN_generate_prime_ex_APIParam_3 is true, BN_generate_prime_ex_APIParam_3 will be a safe prime (ie a prime p so that (p-1)/2 is also prime).","If BN_generate_prime_ex_APIParam_3 is true, BN_generate_prime_ex_APIParam_3 will be a safe prime (ie a prime p so that (p-1)/2 is also prime)."
0,0,the correct handshake routines are automatically set,,,When using the SSL_connect_APIName or SSL_accept_APIName routines,"When using the SSL_connect_APIName or SSL_accept_APIName routines, the correct handshake routines are automatically set.","When using the SSL_connect_APIName or SSL_accept_APIName routines, the correct handshake routines are automatically set. When performing a transparent negotiation using SSL_write_APIName or SSL_read_APIName , the handshake routines must be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName."
0,0,a new client CA list for SSL_CTX_add_client_CA_APIParam_1 or SSL_add_client_CA_APIParam_1 is opened,,,If no list was specified before using SSL_CTX_set_client_CA_list_APIName or SSL_set_client_CA_list_APIName,"If no list was specified before using SSL_CTX_set_client_CA_list_APIName or SSL_set_client_CA_list_APIName, a new client CA list for SSL_CTX_add_client_CA_APIParam_1 or SSL_add_client_CA_APIParam_1 (as appropriate) is opened.","SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName can be used to add additional items the list of client CAs. If no list was specified before using SSL_CTX_set_client_CA_list_APIName or SSL_set_client_CA_list_APIName, a new client CA list for SSL_CTX_add_client_CA_APIParam_1 or SSL_add_client_CA_APIParam_1 (as appropriate) is opened."
0,0,So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed,,,if desired,So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed if desired.,"If a server SSL_CTX is configured with the SSL_SESS_CACHE_NO_INTERNAL_STORE flag ,then the internal cache will not be populated automatically by new sessions negotiated by the SSL/TLS implementation, even though the internal cache will be searched automatically for session-resume requests (the latter can be suppressed by SSL_SESS_CACHE_NO_INTERNAL_LOOKUP). So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed if desired."
0,0,The main purpose of these functions is to enable an application to lookup recipient keys using any appropriate technique,,,when the simpler method of CMS_decrypt_APIName is not appropriate,The main purpose of these functions is to enable an application to lookup recipient keys using any appropriate technique when the simpler method of CMS_decrypt_APIName is not appropriate.,The main purpose of these functions is to enable an application to lookup recipient keys using any appropriate technique when the simpler method of CMS_decrypt_APIName is not appropriate.
0,0,the current option setting is copied,,,When a new SSL object is created from a context using SSL_new_APIName,"When a new SSL object is created from a context using SSL_new_APIName, the current option setting is copied.","During a handshake, the option settings of the SSL object are used. When a new SSL object is created from a context using SSL_new_APIName, the current option setting is copied. Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects. SSL_clear_APIName does not affect the settings."
0,0,an application has been configured by its user or admin to want to use the ACME ENGINE,,,if it is available in the version of OpenSSL the application was compiled with,"Here we'll assume an application has been configured by its user or admin to want to use the ""ACME"" ENGINE if it is available in the version of OpenSSL the application was compiled with.","Here we'll assume an application has been configured by its user or admin to want to use the ""ACME"" ENGINE if it is available in the version of OpenSSL the application was compiled with. If it is available, it should be used by default for all RSA, DSA, and symmetric cipher operations, otherwise OpenSSL should use its builtin software as per usual. The following code illustrates how to approach this;"
0,0,the option settings of the SSL object are used,,,During a handshake,"During a handshake, the option settings of the SSL object are used.","During a handshake, the option settings of the SSL object are used. When a new SSL object is created from a context using SSL_new_APIName, the current option setting is copied. Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects. SSL_clear_APIName does not affect the settings."
0,0,BN_CTX_new_APIName allocates and initializes a BN_CTX_new_APIParam_0 structure,,,null,BN_CTX_new_APIName allocates and initializes a BN_CTX_new_APIParam_0 structure.,BN_CTX_new_APIName allocates and initializes a BN_CTX_new_APIParam_0 structure.
0,0,The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve,,,null,The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve.,"EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve. These paramaters include the EC_GROUP_set_generator_APIParam_2, the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2. The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and n-1 where n is the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2. The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve."
0,0,A certificate has expired or is not currently valid,,,null,A certificate has expired or is not currently valid.,A certificate has expired or is not currently valid.
0,0,It will typically be called in the certificate callback,,,null,It will typically be called in the certificate callback.,SSL_check_chain_APIName must be called in servers after a client hello message or in clients after a certificate request message. It will typically be called in the certificate callback.
0,0,the password dialog may ask for the same password twice for comparison,,,null,In this case the password dialog may ask for the same password twice for comparison  .,"When asking for the password interactively, pem_passwd_cb_APIName can use pem_passwd_cb_APIParam_3 to check, whether an item shall be encrypted (rwflag=1). In this case the password dialog may ask for the same password twice for comparison in order to catch typos, that would make decryption impossible."
0,0,The new structure inherits the settings of the underlying context SSL_new_APIParam_1,,,null,"The new structure inherits the settings of the underlying context SSL_new_APIParam_1: connection method (SSLv2/v3/TLSv1), options, verification settings, timeout settings.","SSL_new_APIName creates a new SSL_new_APIParam_1 structure which is needed to hold the data for a TLS/SSL connection. The new structure inherits the settings of the underlying context SSL_new_APIParam_1: connection method (SSLv2/v3/TLSv1), options, verification settings, timeout settings."
0,0,Changes of the timeout value do not affect already established sessions,,,null,Changes of the timeout value do not affect already established sessions.,"Due to this realization, all sessions behave according to the timeout value valid at the time of the session negotiation. Changes of the timeout value do not affect already established sessions."
0,0,The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags_APIName to encode the data all on one line or expect the data to be all on one line,,,null,The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags_APIName to encode the data all on one line or expect the data to be all on one line.,The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags_APIName to encode the data all on one line or expect the data to be all on one line.
0,0,These can be used by passing EVP_rc2_40_cbc_APIName and EVP_rc2_64_cbc_APIName respectively,,,null,These can be used by passing EVP_rc2_40_cbc_APIName and EVP_rc2_64_cbc_APIName respectively.,"Some old ""export grade"" clients may only support weak encryption using 40 or 64 bit RC2. These can be used by passing EVP_rc2_40_cbc_APIName and EVP_rc2_64_cbc_APIName respectively."
0,0,The digestsign_APIName and digestverify_APIName methods could be called by EVP_DigetSign_APIName and EVP_DigestVerify_APIName,,,null,The digestsign_APIName and digestverify_APIName methods could be called by EVP_DigetSign_APIName and EVP_DigestVerify_APIName .,The digestsign_APIName and digestverify_APIName methods are used to generate or verify a signature in a one-shot mode. The digestsign_APIName and digestverify_APIName methods could be called by EVP_DigetSign_APIName and EVP_DigestVerify_APIName .
0,0,SSL_CTX_get_ex_data_APIName is used to retrieve the information for SSL_CTX_get_ex_data_APIParam_2 from SSL_CTX_get_ex_data_APIParam_1,,,null,SSL_CTX_get_ex_data_APIName is used to retrieve the information for SSL_CTX_get_ex_data_APIParam_2 from SSL_CTX_get_ex_data_APIParam_1.,SSL_CTX_get_ex_data_APIName is used to retrieve the information for SSL_CTX_get_ex_data_APIParam_2 from SSL_CTX_get_ex_data_APIParam_1.
0,0,SSL_CTX_set_tlsext_servername_arg_APIName sets a context-specific argument to be passed into the callback for this SSL_CTX_set_tlsext_servername_arg_APIParam_1,,,null,SSL_CTX_set_tlsext_servername_arg_APIName sets a context-specific argument to be passed into the callback for this SSL_CTX_set_tlsext_servername_arg_APIParam_1.,SSL_CTX_set_tlsext_servername_arg_APIName sets a context-specific argument to be passed into the callback for this SSL_CTX_set_tlsext_servername_arg_APIParam_1.
0,0,DSA_new_APIName allocates and initializes a DSA_new_APIParam_0 structure,,,null,DSA_new_APIName allocates and initializes a DSA_new_APIParam_0 structure.,DSA_new_APIName allocates and initializes a DSA_new_APIParam_0 structure. It is equivalent to calling DSA_new_method(NULL).
0,0,CMS_decrypt_APIName extracts and decrypts the content from a CMS EnvelopedData structure,,,null,CMS_decrypt_APIName extracts and decrypts the content from a CMS EnvelopedData structure.,"CMS_decrypt_APIName extracts and decrypts the content from a CMS EnvelopedData structure. CMS_decrypt_APIParam_2 is the private key of the recipient, CMS_decrypt_APIParam_3 is the recipient's certificate, CMS_decrypt_APIParam_5 is a BIO to write the content to and CMS_decrypt_APIParam_6 is an optional set of flags."
0,0,"Due to this realization , all sessions behave according to the timeout value valid at the time of the session negotiation",,,null,"Due to this realization, all sessions behave according to the timeout value valid at the time of the session negotiation.","Due to this realization, all sessions behave according to the timeout value valid at the time of the session negotiation. Changes of the timeout value do not affect already established sessions."
0,0,The operation performed by key or parameter generation depends on the algorithm used,,,null,The operation performed by key or parameter generation depends on the algorithm used.,"The operation performed by key or parameter generation depends on the algorithm used. In some cases (eg EC with a supplied named curve) the ""generation"" option merely sets the appropriate fields in an EVP_PKEY structure."
0,0,It is equivalent to calling DSA_new_method,,,null,It is equivalent to calling DSA_new_method(NULL).,DSA_new_APIName allocates and initializes a DSA_new_APIParam_0 structure. It is equivalent to calling DSA_new_method(NULL).
0,0,SSL BIOs are exceptional in that,,,if the underlying transport is non blocking SSL BIOs can still request a retry in exceptional circumstances,SSL BIOs are exceptional in that if the underlying transport is non blocking SSL BIOs can still request a retry in exceptional circumstances.,"SSL BIOs are exceptional in that if the underlying transport is non blocking SSL BIOs can still request a retry in exceptional circumstances. Specifically this will happen if a session renegotiation takes place during a BIO_read_APIName operation, one case where this happens is when step up occurs."
0,0,The stores pointers associated with an SSL_CTX structure are copied to any SSL structures,,,when SSL_new_APIName is called,The stores pointers associated with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called.,The stores pointers associated with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called. As a result SSL structures will not be affected if the parent SSL_CTX store pointer is set to a new value.
0,0,SMIME_write_CMS_APIParam_4 is an optional set of flags,,,null,SMIME_write_CMS_APIParam_4 is an optional set of flags.,SMIME_write_CMS_APIParam_1 is the BIO to write the data to. SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure. If streaming is enabled then the content must be supplied in the SMIME_write_CMS_APIParam_3 argument. SMIME_write_CMS_APIParam_4 is an optional set of flags.
0,0,SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used,,,when the TLS/SSL connection is to be established,SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established.,"SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established. SSL_set_session_APIName is only useful for TLS/SSL clients. When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect_APIName. Whether the session was reused can be queried with the SSL_session_reused_APIName call."
0,0,As a result SSL structures will not be affected,,,if the parent SSL_CTX store pointer is set to a new value,As a result SSL structures will not be affected if the parent SSL_CTX store pointer is set to a new value.,The stores pointers associated with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called. As a result SSL structures will not be affected if the parent SSL_CTX store pointer is set to a new value.
0,0,EVP_PKEY_free_APIName frees up the private key EVP_PKEY_free_APIParam_1,,,null,EVP_PKEY_free_APIName frees up the private key EVP_PKEY_free_APIParam_1.,EVP_PKEY_free_APIName frees up the private key EVP_PKEY_free_APIParam_1.
0,0,The digestsign_APIName and digestverify_APIName methods are used to generate or verify a signature in a one-shot mode,,,null,The digestsign_APIName and digestverify_APIName methods are used to generate or verify a signature in a one-shot mode.,The digestsign_APIName and digestverify_APIName methods are used to generate or verify a signature in a one-shot mode. The digestsign_APIName and digestverify_APIName methods could be called by EVP_DigetSign_APIName and EVP_DigestVerify_APIName .
0,0,The EVP_PKEY_CTX_set_signature_md_APIName macro can be used with any public key algorithm supporting signature operations,,,null,The EVP_PKEY_CTX_set_signature_md_APIName macro can be used with any public key algorithm supporting signature operations.,The EVP_PKEY_CTX_set_signature_md_APIName macro sets the message digest type used in a signature. The EVP_PKEY_CTX_set_signature_md_APIName macro can be used with any public key algorithm supporting signature operations.
0,0,RIPEMD-160 is a cryptographic hash function with a 160 bit output,,,null,RIPEMD-160 is a cryptographic hash function with a 160 bit output.,RIPEMD-160 is a cryptographic hash function with a 160 bit output.
0,0,The EVP_PKEY_CTX_set_signature_md_APIName macro sets the message digest type used in a signature,,,null,The EVP_PKEY_CTX_set_signature_md_APIName macro sets the message digest type used in a signature.,The EVP_PKEY_CTX_set_signature_md_APIName macro sets the message digest type used in a signature. The EVP_PKEY_CTX_set_signature_md_APIName macro can be used with any public key algorithm supporting signature operations.
0,0,SMIME_write_CMS_APIParam_1 is the BIO to write the data to,,,null,SMIME_write_CMS_APIParam_1 is the BIO to write the data to.,SMIME_write_CMS_APIParam_1 is the BIO to write the data to. SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure. If streaming is enabled then the content must be supplied in the SMIME_write_CMS_APIParam_3 argument. SMIME_write_CMS_APIParam_4 is an optional set of flags.
0,0,In some cases the generation option merely sets the appropriate fields in an EVP_PKEY structure,,,null,"In some cases (eg EC with a supplied named curve) the ""generation"" option merely sets the appropriate fields in an EVP_PKEY structure.","The operation performed by key or parameter generation depends on the algorithm used. In some cases (eg EC with a supplied named curve) the ""generation"" option merely sets the appropriate fields in an EVP_PKEY structure."
0,0,The PEM_write_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_bio_NETSCAPE_CERT_SEQUENCE_APIParam_2 functions process a Netscape Certificate Sequence using a NETSCAPE_CERT_SEQUENCE structure,,,null,The PEM_write_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_bio_NETSCAPE_CERT_SEQUENCE_APIParam_2 functions process a Netscape Certificate Sequence using a NETSCAPE_CERT_SEQUENCE structure.,The PEM_write_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_bio_NETSCAPE_CERT_SEQUENCE_APIParam_2 functions process a Netscape Certificate Sequence using a NETSCAPE_CERT_SEQUENCE structure.
0,0,the reference count is decremented again during SSL_connect_APIName,,,If the session is not reused,"If the session is not reused, the reference count is decremented again during SSL_connect_APIName.","SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established. SSL_set_session_APIName is only useful for TLS/SSL clients. When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect_APIName. Whether the session was reused can be queried with the SSL_session_reused_APIName call."
0,0,SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure,,,null,SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure.,SMIME_write_CMS_APIParam_1 is the BIO to write the data to. SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure. If streaming is enabled then the content must be supplied in the SMIME_write_CMS_APIParam_3 argument. SMIME_write_CMS_APIParam_4 is an optional set of flags.
0,0,The file descriptor linked to SSL_get_fd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_rfd_APIParam_1,,,null,The file descriptor linked to SSL_get_fd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_rfd_APIParam_1.,The file descriptor linked to SSL_get_fd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_rfd_APIParam_1.
0,0,d2i_RSAPublicKey_APIName and i2d_RSAPublicKey_APIName decode and encode a PKCS # 1 RSAPublicKey structure,,,null,d2i_RSAPublicKey_APIName and i2d_RSAPublicKey_APIName decode and encode a PKCS#1 RSAPublicKey structure.,d2i_RSAPublicKey_APIName and i2d_RSAPublicKey_APIName decode and encode a PKCS#1 RSAPublicKey structure.
0,0,the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1,,,When the session is set,"When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1.","SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established. SSL_set_session_APIName is only useful for TLS/SSL clients. When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect_APIName. Whether the session was reused can be queried with the SSL_session_reused_APIName call."
0,0,RAND_load_file_APIName reads a number of bytes from file RAND_load_file_APIParam_1 and adds them to the PRNG,,,null,RAND_load_file_APIName reads a number of bytes from file RAND_load_file_APIParam_1 and adds them to the PRNG.,"RAND_load_file_APIName reads a number of bytes from file RAND_load_file_APIParam_1 and adds them to the PRNG. If RAND_load_file_APIParam_2 is non-negative, up to to RAND_load_file_APIParam_2 are read; starting with OpenSSL 0.9.5, if RAND_load_file_APIParam_2 is -1, the complete file is read."
0,0,The previous two bugs are fixed in the newer EVP_VerifyDigest_APIName function,,,null,The previous two bugs are fixed in the newer EVP_VerifyDigest*_APIName function.,The previous two bugs are fixed in the newer EVP_VerifyDigest*_APIName function.
0,0,Cache space may also be reclaimed by calling SSL_CTX_flush_sessions_APIName to remove expired sessions,,,null,Cache space may also be reclaimed by calling SSL_CTX_flush_sessions_APIName to remove expired sessions.,"If adding the session makes the cache exceed its size, then unused sessions are dropped from the end of the cache. Cache space may also be reclaimed by calling SSL_CTX_flush_sessions_APIName to remove expired sessions."
0,0,EC_GROUP_dup creates a new EC_GROUP object and copies the content from EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 to the newly created EC_GROUP object,,,null,EC_GROUP_dup creates a new EC_GROUP object and copies the content from EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 to the newly created EC_GROUP object.,EC_GROUP_dup creates a new EC_GROUP object and copies the content from EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 to the newly created EC_GROUP object.
0,0,SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX,,,null,SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX.,The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called. SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX.
0,0,SSL_CTX_flush_sessions_APIName causes a run through the session cache of SSL_CTX_flush_sessions_APIParam_1 to remove sessions expired at time SSL_CTX_flush_sessions_APIParam_2,,,null,SSL_CTX_flush_sessions_APIName causes a run through the session cache of SSL_CTX_flush_sessions_APIParam_1 to remove sessions expired at time SSL_CTX_flush_sessions_APIParam_2.,SSL_CTX_flush_sessions_APIName causes a run through the session cache of SSL_CTX_flush_sessions_APIParam_1 to remove sessions expired at time SSL_CTX_flush_sessions_APIParam_2.
0,0,It is a BIO_ctrl_APIName macro,,,null,It is a BIO_ctrl_APIName macro.,BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2: this must be called to initialize a digest BIO before any data is passed through digest BIO. It is a BIO_ctrl_APIName macro.
0,0,The function EC_POINT_point2hex_APIName will allocate sufficient memory to store the hexadecimal string,,,null,The function EC_POINT_point2hex_APIName will allocate sufficient memory to store the hexadecimal string.,The function EC_POINT_point2hex_APIName will allocate sufficient memory to store the hexadecimal string. It is the caller's responsibility to free this memory with a subsequent call to OPENSSL_free_APIName.
0,0,The text variant of the version number and the release date,,,null,The text variant of the version number and the release date.,"The text variant of the version number and the release date. For example, ""OpenSSL 0.9.5a 1 Apr 2000""."
0,0,The chain store is used to build the certificate chain,,,null,The chain store is used to build the certificate chain.,The chain store is used to build the certificate chain.
0,0,"The functions EC_GFp_nistp224_method , EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224 , P256 and P521 curves respectively",,,null,"The functions EC_GFp_nistp224_method, EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224, P256 and P521 curves respectively.","The functions EC_GFp_nistp224_method, EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224, P256 and P521 curves respectively. Note, however, that these implementations are not available on all platforms."
0,0,The ENGINE API and internal architecture is currently being reviewed,,,null,The ENGINE API and internal architecture is currently being reviewed.,"The ENGINE API and internal architecture is currently being reviewed. Slated for possible release in 0.9.8 is support for transparent loading of ""dynamic"" ENGINEs (built as self-contained shared-libraries). This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications, and would also remove any requirement for applications to explicitly use the ""dynamic"" ENGINE to bind to shared-library implementations."
0,0,Several OpenSSL structures can have application specific data attached to them,,,null,Several OpenSSL structures can have application specific data attached to them.,"Several OpenSSL structures can have application specific data attached to them. This has several potential uses, it can be used to cache data associated with a structure (for example the hash of some part of the structure) or some additional data (for example a handle to the data in an external library)."
0,0,These functions decode and encode an X509 CRL,,,null,These functions decode and encode an X509 CRL (certificate revocation list).,These functions decode and encode an X509 CRL (certificate revocation list).
0,0,CMS_SignerInfo_cert_cmp_APIName compares the certificate CMS_SignerInfo_cert_cmp_APIParam_2 against the signer identifier CMS_SignerInfo_cert_cmp_APIParam_1,,,null,CMS_SignerInfo_cert_cmp_APIName compares the certificate CMS_SignerInfo_cert_cmp_APIParam_2 against the signer identifier CMS_SignerInfo_cert_cmp_APIParam_1.,CMS_SignerInfo_cert_cmp_APIName compares the certificate CMS_SignerInfo_cert_cmp_APIParam_2 against the signer identifier CMS_SignerInfo_cert_cmp_APIParam_1. CMS_SignerInfo_cert_cmp_APIName  returns zero if the comparison is successful and non zero if not.
0,0,ASN1_TIME_check_APIName checks the syntax of ASN1_TIME structure ASN1_TIME_check_APIParam_1,,,null,ASN1_TIME_check_APIName checks the syntax of ASN1_TIME structure ASN1_TIME_check_APIParam_1.,ASN1_TIME_check_APIName checks the syntax of ASN1_TIME structure ASN1_TIME_check_APIParam_1.
0,0,EC_POINT_copy copies the point EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 into EC_POINT_copy_APIParam_1,,,null,EC_POINT_copy copies the point EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 into EC_POINT_copy_APIParam_1.,EC_POINT_copy copies the point EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 into EC_POINT_copy_APIParam_1. Both EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 and EC_POINT_copy_APIParam_1 must use the same EC_METHOD.
0,0,CONF_modules_unload_APIName finishes and unloads configuration modules,,,null,CONF_modules_unload_APIName finishes and unloads configuration modules.,"CONF_modules_unload_APIName finishes and unloads configuration modules. If CONF_modules_unload_APIParam_1 is set to 0 ,only modules loaded from DSOs will be unloads. If CONF_modules_unload_APIParam_1 is 1 all modules, including builtin modules will be unloaded."
0,0,CRYPTO_get_new_dynlockid_APIName is used to create locks,,,null,CRYPTO_get_new_dynlockid_APIName is used to create locks.,CRYPTO_get_new_dynlockid_APIName is used to create locks. CRYPTO_get_new_dynlockid_APIName will call dyn_create_function for the actual creation.
0,0,BIO_should_read_APIName is true,,,if the cause of the condition is that a BIO needs to read data,BIO_should_read_APIName is true if the cause of the condition is that a BIO needs to read data.,BIO_should_read_APIName is true if the cause of the condition is that a BIO needs to read data.
0,0,CRYPTO_get_new_dynlockid_APIName will call dyn_create_function for the actual creation,,,null,CRYPTO_get_new_dynlockid_APIName will call dyn_create_function for the actual creation.,CRYPTO_get_new_dynlockid_APIName is used to create locks. CRYPTO_get_new_dynlockid_APIName will call dyn_create_function for the actual creation.
0,0,X509_STORE_CTX_set_default_APIName looks up and sets the default verification method to X509_STORE_CTX_set_default_APIParam_2,,,null,X509_STORE_CTX_set_default_APIName looks up and sets the default verification method to X509_STORE_CTX_set_default_APIParam_2.,X509_STORE_CTX_set_default_APIName looks up and sets the default verification method to X509_STORE_CTX_set_default_APIParam_2. This uses the function X509_VERIFY_PARAM_lookup_APIName to find an appropriate set of parameters from X509_STORE_CTX_set_default_APIParam_2.
0,0,UI_new_APIName creates a new UI using the default UI method,,,null,UI_new_APIName creates a new UI using the default UI method.,"UI_new_APIName creates a new UI using the default UI method. When done with this UI, a new UI should be freed using UI_free_APIName."
0,0,The session id context becomes part of the session,,,null,The session id context becomes part of the session.,The session id context becomes part of the session. The session id context is set by the SSL/TLS server. The SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName functions are therefore only useful on the server side.
0,0,the no shared cipher error is generated,,,When these conditions are not met for any cipher in the list,"When these conditions are not met for any cipher in the list (eg a client only supports export RSA ciphers with a asymmetric key length of 512 bits and the server is not configured to use temporary RSA keys), the ""no shared cipher"" (SSL_R_NO_SHARED_CIPHER) error is generated and the handshake will fail.","When these conditions are not met for any cipher in the list (eg a client only supports export RSA ciphers with a asymmetric key length of 512 bits and the server is not configured to use temporary RSA keys), the ""no shared cipher"" (SSL_R_NO_SHARED_CIPHER) error is generated and the handshake will fail."
0,0,i2d_X509_APIName the DER encoded data to the buffer at i2d_X509_APIParam_2,,,If i2d_X509_APIParam_2 is not NULL is writes,"If i2d_X509_APIParam_2 is not NULL, i2d_X509_APIName the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written.","i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format. If i2d_X509_APIParam_2, i2d_X509_APIName the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written. If the return value is negative an error occurred, otherwise i2d_X509_APIName returns the length of the encoded data."
0,0,The session id context is set by the SSL/TLS server,,,If i2d_X509_APIParam_2 is not NULL,The session id context is set by the SSL/TLS server.,The session id context becomes part of the session. The session id context is set by the SSL/TLS server. The SSL_CTX_set_session_id_context_APIName and SSL_set_session_id_context_APIName functions are therefore only useful on the server side.
0,0,The chains associate with an SSL_CTX structure are copied to any SSL structures,,,when SSL_new_APIName is called.,The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called.,The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called. SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX.
0,0,an SSL_CTX structure are copied to any SSL structures,,,when SSL_new_APIName is called,The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called.,The chains associate with an SSL_CTX structure are copied to any SSL structures when SSL_new_APIName is called. SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX.
0,0,The EVP_PKEY_CTX_set_dh_paramgen_generator_APIName macro sets DH generator to EVP_PKEY_CTX_set_dh_paramgen_generator_APIParam_2 for DH parameter generation,,,null,The EVP_PKEY_CTX_set_dh_paramgen_generator_APIName macro sets DH generator to EVP_PKEY_CTX_set_dh_paramgen_generator_APIParam_2 for DH parameter generation.,The EVP_PKEY_CTX_set_dh_paramgen_generator_APIName macro sets DH generator to EVP_PKEY_CTX_set_dh_paramgen_generator_APIParam_2 for DH parameter generation. If not specified 2 is used.
0,0,"CMS_decrypt_APIParam_2 is the private key of the recipient , CMS_decrypt_APIParam_3 is the recipient 's certificate , CMS_decrypt_APIParam_5 is a BIO to write the content to and CMS_decrypt_APIParam_6 is an optional set of flags",,,null,"CMS_decrypt_APIParam_2 is the private key of the recipient, CMS_decrypt_APIParam_3 is the recipient's certificate, CMS_decrypt_APIParam_5 is a BIO to write the content to and CMS_decrypt_APIParam_6 is an optional set of flags.","CMS_decrypt_APIName extracts and decrypts the content from a CMS EnvelopedData structure. CMS_decrypt_APIParam_2 is the private key of the recipient, CMS_decrypt_APIParam_3 is the recipient's certificate, CMS_decrypt_APIParam_5 is a BIO to write the content to and CMS_decrypt_APIParam_6 is an optional set of flags."
0,0,"starting with OpenSSL 0.9.5, the complete file is read",,,if RAND_load_file_APIParam_2 is -1,"If RAND_load_file_APIParam_2 is non-negative, up to to RAND_load_file_APIParam_2 are read; starting with OpenSSL 0.9.5, if RAND_load_file_APIParam_2 is -1, the complete file is read.","RAND_load_file_APIName reads a number of bytes from file RAND_load_file_APIParam_1 and adds them to the PRNG. If RAND_load_file_APIParam_2 is non-negative, up to to RAND_load_file_APIParam_2 are read; starting with OpenSSL 0.9.5, if RAND_load_file_APIParam_2 is -1, the complete file is read."
0,0,unused sessions are dropped from the end of the cache,,,If adding the session makes the cache exceed its size,"If adding the session makes the cache exceed its size, then unused sessions are dropped from the end of the cache.","If adding the session makes the cache exceed its size, then unused sessions are dropped from the end of the cache. Cache space may also be reclaimed by calling SSL_CTX_flush_sessions_APIName to remove expired sessions."
0,0,BN_ucmp_APIName is the same using the absolute values of BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2,,,null,BN_ucmp_APIName is the same using the absolute values of BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2.,"BN_cmp_APIName returns -1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 < BN_cmp_APIParam_2 BN_ucmp_APIParam_2, 0 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 == BN_cmp_APIParam_2 BN_ucmp_APIParam_2 and 1 if BN_cmp_APIParam_1 BN_ucmp_APIParam_1 > BN_cmp_APIParam_2 BN_ucmp_APIParam_2. BN_ucmp_APIName is the same using the absolute values of BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2."
0,0,This uses the function X509_VERIFY_PARAM_lookup_APIName to find an appropriate set of parameters from X509_STORE_CTX_set_default_APIParam_2,,,null,This uses the function X509_VERIFY_PARAM_lookup_APIName to find an appropriate set of parameters from X509_STORE_CTX_set_default_APIParam_2.,X509_STORE_CTX_set_default_APIName looks up and sets the default verification method to X509_STORE_CTX_set_default_APIParam_2. This uses the function X509_VERIFY_PARAM_lookup_APIName to find an appropriate set of parameters from X509_STORE_CTX_set_default_APIParam_2.
0,0,data can be buffered inside SSL_pending_APIParam_1 and are ready for immediate retrieval with SSL_read_APIName,,,null,Therefore data can be buffered inside SSL_pending_APIParam_1 and are ready for immediate retrieval with SSL_read_APIName .,Data are received in blocks from the peer. Therefore data can be buffered inside SSL_pending_APIParam_1 and are ready for immediate retrieval with SSL_read_APIName .
0,0,Automatic chain building is performed on each new session,,,null,Automatic chain building is performed on each new session.,Calling SSL_CTX_build_cert_chain_APIName or SSL_build_cert_chain_APIName is more efficient than the automatic chain building as it is only performed once. Automatic chain building is performed on each new session.
0,0,"For reference , on x86 flush cache line was introduced with the SSE2 extensions",,,null,"For reference, on x86 'flush cache line' was introduced with the SSE2 extensions.","Return value of 0 indicates that CPU is not capable of performing the benchmark, either because oscillator counter or 'flush cache line' is not available on current platform. For reference, on x86 'flush cache line' was introduced with the SSE2 extensions."
0,0,"UI_add_input_string_APIName and UI_add_verify_string_APIName add a prompt to the UI , as well as flags and a result buffer and the desired minimum and maximum sizes of the result , not counting the final NUL character",,,null,"UI_add_input_string_APIName and UI_add_verify_string_APIName add a prompt to the UI, as well as flags and a result buffer and the desired minimum and maximum sizes of the result, not counting the final NUL character.","UI_add_input_string_APIName and UI_add_verify_string_APIName add a prompt to the UI, as well as flags and a result buffer and the desired minimum and maximum sizes of the result, not counting the final NUL character. The given information is used to prompt for information, for example a password, and to verify a password (ie having the user enter it twice and check that the same string was entered twice). UI_add_verify_string_APIName takes and extra argument that should be a pointer to the result buffer of the input string that it's supposed to verify, or verification will fail."
0,0,X509_NAME_ENTRY_set_data_APIName sets the field value of X509_NAME_ENTRY_set_data_APIParam_1 to string type X509_NAME_ENTRY_set_data_APIParam_2 and value determined by X509_NAME_ENTRY_set_data_APIParam_3 and X509_NAME_ENTRY_set_data_APIParam_4,,,null,X509_NAME_ENTRY_set_data_APIName sets the field value of X509_NAME_ENTRY_set_data_APIParam_1 to string type X509_NAME_ENTRY_set_data_APIParam_2 and value determined by X509_NAME_ENTRY_set_data_APIParam_3 and X509_NAME_ENTRY_set_data_APIParam_4.,X509_NAME_ENTRY_set_data_APIName sets the field value of X509_NAME_ENTRY_set_data_APIParam_1 to string type X509_NAME_ENTRY_set_data_APIParam_2 and value determined by X509_NAME_ENTRY_set_data_APIParam_3 and X509_NAME_ENTRY_set_data_APIParam_4.
0,0,SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place,,,null,SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place.,"SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place. If the connection is in client mode, the handshake will be started. The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName ."
0,0,2 is used,,,If not specified,If not specified 2 is used.,The EVP_PKEY_CTX_set_dh_paramgen_generator_APIName macro sets DH generator to EVP_PKEY_CTX_set_dh_paramgen_generator_APIParam_2 for DH parameter generation. If not specified 2 is used.
0,0,BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption,,,null,BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption.,"BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption. BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2. BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish. The alternative is to use BF_ecb_encrypt_APIName. If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones."
0,0,EVP_CIPHER_CTX_ctrl_APIName allows various cipher specific parameters to be determined and set,,,null,EVP_CIPHER_CTX_ctrl_APIName allows various cipher specific parameters to be determined and set.,EVP_CIPHER_CTX_ctrl_APIName allows various cipher specific parameters to be determined and set.
0,0," all modules , including builtin modules will be unloaded",,,If CONF_modules_unload_APIParam_1 is 1,"If CONF_modules_unload_APIParam_1 is 1 all modules, including builtin modules will be unloaded.","CONF_modules_unload_APIName finishes and unloads configuration modules. If CONF_modules_unload_APIParam_1 is set to 0 ,only modules loaded from DSOs will be unloads. If CONF_modules_unload_APIParam_1 is 1 all modules, including builtin modules will be unloaded."
0,0,All the remaining `` functions '' are implemented as macros,,,null,"All the remaining ""functions"" are implemented as macros.","All the remaining ""functions"" are implemented as macros."
0,0,The size can be determined by calling BN_bn2mpi,,,null,"The size can be determined by calling BN_bn2mpi(BN_bn2mpi_APIParam_1, NULL).","BN_bn2mpi_APIName stores the representation of BN_bn2mpi_APIParam_1 at BN_bn2mpi_APIParam_2, where BN_bn2mpi_APIParam_2 must be large enough to hold the result. The size can be determined by calling BN_bn2mpi(BN_bn2mpi_APIParam_1, NULL)."
0,0,The alternative is to use BF_ecb_encrypt_APIName,,,null,The alternative is to use BF_ecb_encrypt_APIName.,"BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption. BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2. BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish. The alternative is to use BF_ecb_encrypt_APIName. If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones."
0,0,The seed values can not be recovered from the PRNG output,,,null,The seed values cannot be recovered from the PRNG output.,RAND_add_APIName may be called with sensitive data such as user entered passwords. The seed values cannot be recovered from the PRNG output.
0,0,RAND_add_APIName may be called with sensitive data such as user entered passwords,,,null,RAND_add_APIName may be called with sensitive data such as user entered passwords.,RAND_add_APIName may be called with sensitive data such as user entered passwords. The seed values cannot be recovered from the PRNG output.
0,0,Envelope encryption is the usual method of using public key encryption on large amounts of data.,,,null,Envelope encryption is the usual method of using public key encryption on large amounts of data.,"Envelope encryption is the usual method of using public key encryption on large amounts of data, this is because public key encryption is slow but symmetric encryption is fast. So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption."
0,0,These functions decode and encode an CMS ContentInfo structure,,,null,These functions decode and encode an CMS ContentInfo structure.,These functions decode and encode an CMS ContentInfo structure.
0,0,It uses dynamic memory allocation for storing its data structures,,,null,It uses dynamic memory allocation for storing its data structures.,"It uses dynamic memory allocation for storing its data structures. That means that there is no limit on the size of the numbers manipulated by these functions, but return values must always be checked in case a memory allocation error has occurred."
0,0,The first form is those defined over the prime field Fp,,,null,The first form is those defined over the prime field Fp.,"Within the library there are two forms of elliptic curve that are of interest. The first form is those defined over the prime field Fp. The elements of Fp are the integers 0 to p-1, where p is a prime number. This gives us a revised elliptic curve equation as follows:"
0,0,One chain can be set for each key type supported by a server,,,null,One chain can be set for each key type supported by a server.,"One chain can be set for each key type supported by a server. So, for example, an RSA and a DSA certificate can (and often will) have different chains."
0,0,SSL_CTX_get0_chain_certs_APIName retrieves the chain associated with the current certificate of SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1,,,null,SSL_CTX_get0_chain_certs_APIName retrieves the chain associated with the current certificate of SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1.,SSL_CTX_get0_chain_certs_APIName retrieves the chain associated with the current certificate of SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1.
0,0,"These implementations are registered in the tables and indexed by an ` nid ' value , , and ENGINEs can support arbitrarily many of them",,,null,"These implementations are registered in the tables and indexed by an ` nid ' value ,  , and ENGINEs can support arbitrarily many of them .","For each supported abstraction, the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default. These implementations are registered in the tables and indexed by an 'nid' value, because abstractions like EVP_CIPHER and EVP_DIGEST support many distinct algorithms and modes, and ENGINEs can support arbitrarily many of them. In the case of other abstractions like RSA, DSA, etc, there is only one ""algorithm"" so all implementations implicitly register using the same 'nid' index."
0,0,The macro EVP_PKEY_CTX_set_rsa_padding_APIName sets the RSA padding mode for EVP_PKEY_CTX_set_rsa_padding_APIParam_1,,,null,The macro EVP_PKEY_CTX_set_rsa_padding_APIName sets the RSA padding mode for EVP_PKEY_CTX_set_rsa_padding_APIParam_1.,"The macro EVP_PKEY_CTX_set_rsa_padding_APIName sets the RSA padding mode for EVP_PKEY_CTX_set_rsa_padding_APIParam_1. The EVP_PKEY_CTX_set_rsa_padding_APIParam_2 parameter can take the value RSA_PKCS1_PADDING for PKCS#1 padding, RSA_SSLV23_PADDING for SSLv23 padding, RSA_NO_PADDING for no padding, RSA_PKCS1_OAEP_PADDING for OAEP padding (encrypt and decrypt only), RSA_X931_PADDING for X9.31 padding (signature operations only) and RSA_PKCS1_PSS_PADDING (sign and verify only)."
0,0,SSL_set_bio_APIName can not fail,,,null,SSL_set_bio_APIName cannot fail.,SSL_set_bio_APIName cannot fail.
0,0,EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1,,,null,EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1.,EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1. This is useful if large amounts of data are to be hashed which only differ in the last few bytes. EVP_MD_CTX_copy_ex_APIParam_1 must be initialized before calling this function.
0,0,BN_BLINDING_convert_APIName and BN_BLINDING_invert_APIName are wrapper functions for BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName with BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 set to NULL,,,null,BN_BLINDING_convert_APIName and BN_BLINDING_invert_APIName are wrapper functions for BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName with BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 set to NULL.,BN_BLINDING_convert_APIName and BN_BLINDING_invert_APIName are wrapper functions for BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName with BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 set to NULL.
0,0,This allows applications to initialize the context externally,,,if the standard calls such as BIO_set_md_APIName are not sufficiently flexible.,This allows applications to initialize the context externally if the standard calls such as BIO_set_md_APIName are not sufficiently flexible.,Before OpenSSL 1.0.0 the call to BIO_get_md_ctx_APIName would only work if the BIO had been initialized for example by calling BIO_set_md_APIName ). In OpenSSL 1.0.0 and later the context is always returned and the BIO is state is set to initialized. This allows applications to initialize the context externally if the standard calls such as BIO_set_md_APIName are not sufficiently flexible.
0,0,The function EVP_PKEY_verify_recover_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_verify_recover_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_verify_recover_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,PKCS12_parse_APIName parses a PKCS12 structure,,,null,PKCS12_parse_APIName parses a PKCS12 structure.,PKCS12_parse_APIName parses a PKCS12 structure.
0,0,RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1,,,null,RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1.,"RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1. If RAND_query_egd_bytes_APIParam_2 is given, RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2. If RAND_query_egd_bytes_APIParam_2 is NULL, RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName ."
0,0,BIO_make_bio_pair_APIName joins two separate BIOs into a connected pair,,,null,BIO_make_bio_pair_APIName joins two separate BIOs into a connected pair.,BIO_make_bio_pair_APIName joins two separate BIOs into a connected pair.
0,0,"SSL_new_APIName , SSL_free_APIName , SSL_shutdown_APIName , SSL_set_shutdown_APIName , SSL_CTX_set_options_APIName , ssl_APIName , SSL_CTX_set_client_cert_cb_APIName",,,null,"SSL_new_APIName , SSL_free_APIName , SSL_shutdown_APIName , SSL_set_shutdown_APIName , SSL_CTX_set_options_APIName , ssl_APIName , SSL_CTX_set_client_cert_cb_APIName","SSL_new_APIName , SSL_free_APIName , SSL_shutdown_APIName , SSL_set_shutdown_APIName , SSL_CTX_set_options_APIName , ssl_APIName , SSL_CTX_set_client_cert_cb_APIName"
0,0,Callback has been called to indicate error exit of a handshake function,,,null,Callback has been called to indicate error exit of a handshake function.,Callback has been called to indicate error exit of a handshake function. (May be soft error with retry option for non-blocking setups.)
0,0,the handshake will be started,,,If the connection is in client mode,"If the connection is in client mode, the handshake will be started.","SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place. If the connection is in client mode, the handshake will be started. The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state_APIName or SSL_set_accept_state_APIName ."
0,0,using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode,,,if BIO_new_ssl_APIParam_2 is non zero,BIO_new_ssl_APIName allocates an SSL BIO using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode if BIO_new_ssl_APIParam_2 is non zero.,BIO_new_ssl_APIName allocates an SSL BIO using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode if BIO_new_ssl_APIParam_2 is non zero.
0,0,BIO_new_ssl_APIName allocates an SSL BIO,,,null,BIO_new_ssl_APIName allocates an SSL BIO using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode if BIO_new_ssl_APIParam_2 is non zero.,BIO_new_ssl_APIName allocates an SSL BIO using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode if BIO_new_ssl_APIParam_2 is non zero.
0,0,only modules loaded from DSOs will be unloads,,,If CONF_modules_unload_APIParam_1 is set to 0,"If CONF_modules_unload_APIParam_1 is set to 0 ,only modules loaded from DSOs will be unloads.","CONF_modules_unload_APIName finishes and unloads configuration modules. If CONF_modules_unload_APIParam_1 is set to 0 ,only modules loaded from DSOs will be unloads. If CONF_modules_unload_APIParam_1 is 1 all modules, including builtin modules will be unloaded."
0,0,This is useful,,,if large amounts of data are to be hashed which only differ in the last few bytes,This is useful if large amounts of data are to be hashed which only differ in the last few bytes.,EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1. This is useful if large amounts of data are to be hashed which only differ in the last few bytes. EVP_MD_CTX_copy_ex_APIParam_1 must be initialized before calling this function.
0,0,RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2,,,If RAND_query_egd_bytes_APIParam_2 is given,"If RAND_query_egd_bytes_APIParam_2 is given, RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2.","RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1. If RAND_query_egd_bytes_APIParam_2 is given, RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2. If RAND_query_egd_bytes_APIParam_2 is NULL, RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName ."
0,0,the PSK identity and the pre-shared key to use,,,during the connection setup phase,The purpose of the callback function is to select the PSK identity and the pre-shared key to use during the connection setup phase.,The purpose of the callback function is to select the PSK identity and the pre-shared key to use during the connection setup phase.
0,0,RAND_egd is a wrapper for RAND_egd_bytes,,,null,"RAND_egd(path) is a wrapper for RAND_egd_bytes(path, 255);","RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1. RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG. RAND_egd(path) is a wrapper for RAND_egd_bytes(path, 255);"
0,0,Applications can use longer keys to maintain a consistent level of security,,,null,Applications can use longer keys to maintain a consistent level of security.,Applications can use longer keys to maintain a consistent level of security. For example if a ciphersuite uses 256 bit ciphers but only a 128 bit ticket key the overall security is only 128 bits because breaking the ticket key will enable an attacker to obtain the session keys.
0,0,"BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1 , using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2",,,null,"BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2.","BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption. BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1, using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2. BF_encrypt_APIName and BF_decrypt_APIName should not be used unless you implement 'modes' of Blowfish. The alternative is to use BF_ecb_encrypt_APIName. If you still want to use BF_encrypt_APIName and BF_decrypt_APIName, you should be aware that BF_encrypt_APIName and BF_decrypt_APIName take each 32-bit chunk in host-byte order, which is little-endian on little-endian platforms and big-endian on big-endian ones."
0,0,Applications can also use SSL_CTX_cmd_APIName to process command lines,,,null,Applications can also use SSL_CTX_cmd_APIName to process command lines  .,"Applications can also use SSL_CTX_cmd_APIName to process command lines though the utility function SSL_CTX_cmd_argv_APIName is normally used instead. One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix_APIName, pass the current argument to SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 and the following argument to SSL_CONF_cmd_APIParam_3 (which may be NULL)."
0,0,RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1,,,null,RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1.,"RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1. RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG. RAND_egd(path) is a wrapper for RAND_egd_bytes(path, 255);"
0,0,Enable both SSL_SESS_CACHE_NO_INTERNAL_LOOKUP and SSL_SESS_CACHE_NO_INTERNAL_STORE at the same time,,,null,Enable both SSL_SESS_CACHE_NO_INTERNAL_LOOKUP and SSL_SESS_CACHE_NO_INTERNAL_STORE at the same time.,Enable both SSL_SESS_CACHE_NO_INTERNAL_LOOKUP and SSL_SESS_CACHE_NO_INTERNAL_STORE at the same time.
0,0,The purpose of the callback function is to select,,,null,The purpose of the callback function is to select the PSK identity and the pre-shared key to use during the connection setup phase.,The purpose of the callback function is to select the PSK identity and the pre-shared key to use during the connection setup phase.
0,0,DH_generate_key_APIName performs the first step of a Diffie-Hellman key exchange by generating private and public DH values,,,null,DH_generate_key_APIName performs the first step of a Diffie-Hellman key exchange by generating private and public DH values.,"DH_generate_key_APIName performs the first step of a Diffie-Hellman key exchange by generating private and public DH values. By calling DH_compute_key_APIName, these are combined with the other party's public value to compute the shared key."
0,0,RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG,,,null,RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG.,"RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1. RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG. RAND_egd(path) is a wrapper for RAND_egd_bytes(path, 255);"
0,0,BN_num_bytes_APIName is a macro,,,null,BN_num_bytes_APIName is a macro.,BN_num_bytes_APIName is a macro.
0,0,In X509_NAME_add_entry_by_txt_APIName the X509_NAME_add_entry_by_txt_APIParam_2 string represents the field name using OBJ_txt2obj,,,null,"In X509_NAME_add_entry_by_txt_APIName the X509_NAME_add_entry_by_txt_APIParam_2 string represents the field name using OBJ_txt2obj(field, 0).","In X509_NAME_add_entry_by_txt_APIName the X509_NAME_add_entry_by_txt_APIParam_2 string represents the field name using OBJ_txt2obj(field, 0)."
0,0,A TLSCiphertext decrypted in an invalid way,,,null,"A TLSCiphertext decrypted in an invalid way: either TLSCiphertext wasn't an even multiple of the block length or TLSCiphertext's padding values, when checked, weren't correct.","A TLSCiphertext decrypted in an invalid way: either TLSCiphertext wasn't an even multiple of the block length or TLSCiphertext's padding values, when checked, weren't correct. This message is always fatal."
0,0,SHA1_Init_APIName initializes a SHA1_Init_APIParam_1 structure,,,null,SHA1_Init_APIName initializes a SHA1_Init_APIParam_1 structure.,SHA1_Init_APIName initializes a SHA1_Init_APIParam_1 structure.
0,0,SSL_CTX_clear_options_APIName clears the options set via bitmask in SSL_CTX_clear_options_APIParam_2 to SSL_CTX_clear_options_APIParam_1,,,null,SSL_CTX_clear_options_APIName clears the options set via bitmask in SSL_CTX_clear_options_APIParam_2 to SSL_CTX_clear_options_APIParam_1.,SSL_CTX_clear_options_APIName clears the options set via bitmask in SSL_CTX_clear_options_APIParam_2 to SSL_CTX_clear_options_APIParam_1.
0,0,"The status nibble has one of the values 0 for development , 1 to e for betas 1 to 14 , and f for release",,,null,"The status nibble has one of the values 0 for development, 1 to e for betas 1 to 14, and f for release.","The status nibble has one of the values 0 for development, 1 to e for betas 1 to 14, and f for release."
0,0,"By calling DH_compute_key_APIName , these are combined with the other party 's public value to compute the shared key",,,null,"By calling DH_compute_key_APIName, these are combined with the other party's public value to compute the shared key.","DH_generate_key_APIName performs the first step of a Diffie-Hellman key exchange by generating private and public DH values. By calling DH_compute_key_APIName, these are combined with the other party's public value to compute the shared key."
0,0,The PEM_read_PKCS7_APIParam_2 PEM_write_bio_PKCS7_APIParam_2 PEM_write_PKCS7_APIParam_2 PEM_read_bio_PKCS7_APIParam_2 functions process a PKCS # 7 ContentInfo using a PKCS7 structure,,,null,The PEM_read_PKCS7_APIParam_2 PEM_write_bio_PKCS7_APIParam_2 PEM_write_PKCS7_APIParam_2 PEM_read_bio_PKCS7_APIParam_2 functions process a PKCS#7 ContentInfo using a PKCS7 structure.,The PEM_read_PKCS7_APIParam_2 PEM_write_bio_PKCS7_APIParam_2 PEM_write_PKCS7_APIParam_2 PEM_read_bio_PKCS7_APIParam_2 functions process a PKCS#7 ContentInfo using a PKCS7 structure.
0,0,BN_MONT_CTX_new_APIName allocates and initializes a BN_MONT_CTX_init_APIParam_1 structure,,,null,BN_MONT_CTX_new_APIName allocates and initializes a BN_MONT_CTX_init_APIParam_1 structure.,BN_MONT_CTX_new_APIName allocates and initializes a BN_MONT_CTX_init_APIParam_1 structure. BN_MONT_CTX_init_APIName initializes an existing uninitialized BN_MONT_CTX_init_APIParam_1.
0,0,After the call to EVP_PKEY_encrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_encrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_encrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1,,,null,SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1.,"The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1. SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1. The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL."
0,0,ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL,,,if no additional configuration will be used,ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL if no additional configuration will be used.,ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from. ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions. ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL if no additional configuration will be used.
0,0,SSL_set_verify_result_APIName overrides the verification result,,,null,SSL_set_verify_result_APIName overrides the verification result.,"SSL_set_verify_result_APIName overrides the verification result. It only changes the verification result of the SSL_set_verify_result_APIParam_1 object. It does not become part of the established session, so if the session is to be reused later, the original value will reappear."
0,0,BN_MONT_CTX_init_APIName initializes an existing uninitialized BN_MONT_CTX_init_APIParam_1,,,null,BN_MONT_CTX_init_APIName initializes an existing uninitialized BN_MONT_CTX_init_APIParam_1.,BN_MONT_CTX_new_APIName allocates and initializes a BN_MONT_CTX_init_APIParam_1 structure. BN_MONT_CTX_init_APIName initializes an existing uninitialized BN_MONT_CTX_init_APIParam_1.
0,0,RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName,,,If RAND_query_egd_bytes_APIParam_2 is NULL,"If RAND_query_egd_bytes_APIParam_2 is NULL, RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName .","RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1. If RAND_query_egd_bytes_APIParam_2 is given, RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2. If RAND_query_egd_bytes_APIParam_2 is NULL, RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName ."
0,0,SSL_want_APIName examines the internal state information of the SSL object,,,null,SSL_want_APIName examines the internal state information of the SSL object.,"SSL_want_APIName examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error_APIName . Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under non-blocking I/O. Error conditions are not handled and must be treated using SSL_get_error_APIName ."
0,0,The length of the memory block can be obtained using EC_GROUP_get_seed_len,,,null,The length of the memory block can be obtained using EC_GROUP_get_seed_len.,"ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,"Additionally , OpenSSL supports dynamic locks , and sometimes , some parts of OpenSSL need it for better performance",,,null,"Additionally, OpenSSL supports dynamic locks, and sometimes, some parts of OpenSSL need it for better performance.","Additionally, OpenSSL supports dynamic locks, and sometimes, some parts of OpenSSL need it for better performance. To enable this, the following is required:"
0,0,It only changes the verification result of the SSL_set_verify_result_APIParam_1 object,,,null,It only changes the verification result of the SSL_set_verify_result_APIParam_1 object.,"SSL_set_verify_result_APIName overrides the verification result. It only changes the verification result of the SSL_set_verify_result_APIParam_1 object. It does not become part of the established session, so if the session is to be reused later, the original value will reappear."
0,0,"SSL_CTX_new_APIName initializes the list of ciphers , the session cache setting , the callbacks , the keys and certificates and the options to SSL_CTX_new_APIName default values",,,null,"SSL_CTX_new_APIName initializes the list of ciphers, the session cache setting, the callbacks, the keys and certificates and the options to SSL_CTX_new_APIName default values.","SSL_CTX_new_APIName initializes the list of ciphers, the session cache setting, the callbacks, the keys and certificates and the options to SSL_CTX_new_APIName default values."
0,0,The DSA_verify_APIParam_1 DSA_sign_APIParam_1 parameter is ignored,,,null,The DSA_verify_APIParam_1 DSA_sign_APIParam_1 parameter is ignored.,The DSA_verify_APIParam_1 DSA_sign_APIParam_1 parameter is ignored.
0,0,An invalid value for SSLeay_version_APIParam_1 was given,,,null,An invalid value for SSLeay_version_APIParam_1 was given.,An invalid value for SSLeay_version_APIParam_1 was given.
0,0,ANSI X9 .62 defines a method of generating the curve parameter b from a random number,,,null,ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number.,"ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,d2i_AutoPrivateKey_APIName is similar to d2i_PrivateKey_APIName except d2i_AutoPrivateKey_APIName attempts to automatically detect the private key format,,,null,d2i_AutoPrivateKey_APIName is similar to d2i_PrivateKey_APIName except d2i_AutoPrivateKey_APIName attempts to automatically detect the private key format.,d2i_AutoPrivateKey_APIName is similar to d2i_PrivateKey_APIName except d2i_AutoPrivateKey_APIName attempts to automatically detect the private key format.
0,0,"the BIO can transparently handle SSL connections , unencrypted network connections and file I/O",,,If an application uses a BIO for its I/O,"If an application uses a BIO for its I/O ,the BIO can transparently handle SSL connections, unencrypted network connections and file I/O.","A BIO is an I/O abstraction, BIO hides many of the underlying I/O details from an application. If an application uses a BIO for its I/O ,the BIO can transparently handle SSL connections, unencrypted network connections and file I/O."
0,0,either TLSCiphertext was not an even multiple of the block length or TLSCiphertext 's padding values were not correct,,,when checked,"A TLSCiphertext decrypted in an invalid way: either TLSCiphertext wasn't an even multiple of the block length or TLSCiphertext's padding values, when checked, weren't correct.","A TLSCiphertext decrypted in an invalid way: either TLSCiphertext wasn't an even multiple of the block length or TLSCiphertext's padding values, when checked, weren't correct. This message is always fatal."
0,0,"The SHA224 , SHA256 , SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions",,,null,"The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions.","The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1. SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1. The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL."
0,0,The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed,,,null,The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed.,"ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,"this may include identifiers for the application session , application algorithms or parameters , or the lifetime of the context",,,null,"For example this may include identifiers for the application session, application algorithms or parameters, or the lifetime of the context.","An application may need to securely establish the context within which this keying material will be used. For example this may include identifiers for the application session, application algorithms or parameters, or the lifetime of the context. The context value is left to the application but must be the same on both sides of the communication."
0,0,HMAC_CTX_init_APIName initialises a HMAC_CTX_init_APIParam_1 before first use,,,null,HMAC_CTX_init_APIName initialises a HMAC_CTX_init_APIParam_1 before first use.,HMAC_CTX_init_APIName initialises a HMAC_CTX_init_APIParam_1 before first use. HMAC_CTX_init_APIName must be called.
0,0,The reference count of the X509 object is incremented by one,,,null,"The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed.","The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed. The X509 object must be explicitly freed using X509_free_APIName."
0,0,the overall security is only 128 bits,,,if a ciphersuite uses 256 bit ciphers but only a 128 bit ticket key,For example if a ciphersuite uses 256 bit ciphers but only a 128 bit ticket key the overall security is only 128 bits  .,Applications can use longer keys to maintain a consistent level of security. For example if a ciphersuite uses 256 bit ciphers but only a 128 bit ticket key the overall security is only 128 bits because breaking the ticket key will enable an attacker to obtain the session keys.
0,0,Check the error stack for more information,,,null,Check the error stack for more information.,"BIO_new_bio_pair_APIName returns 1 on success, with the new BIOs available in BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3, or 0 on failure, with NULL pointers stored into the locations for BIO_new_bio_pair_APIParam_1 and BIO_new_bio_pair_APIParam_3. Check the error stack for more information."
0,0,EC_POINT_method_of obtains the EC_METHOD associated with EC_POINT_free_APIParam_1 EC_POINT_clear_free_APIParam_1 EC_POINT_set_to_infinity_APIParam_2 EC_POINT_method_of_APIParam_1,,,null,EC_POINT_method_of obtains the EC_METHOD associated with EC_POINT_free_APIParam_1 EC_POINT_clear_free_APIParam_1 EC_POINT_set_to_infinity_APIParam_2 EC_POINT_method_of_APIParam_1.,EC_POINT_method_of obtains the EC_METHOD associated with EC_POINT_free_APIParam_1 EC_POINT_clear_free_APIParam_1 EC_POINT_set_to_infinity_APIParam_2 EC_POINT_method_of_APIParam_1.
0,0,it will not be destroyed,,,when the session containing the peer certificate is freed,"The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed.","The reference count of the X509 object is incremented by one, so that it will not be destroyed when the session containing the peer certificate is freed. The X509 object must be explicitly freed using X509_free_APIName."
0,0,These functions are used to obtain temporary BN_CTX_get_APIParam_0 variables from a BN_CTX_start_APIParam_1 BN_CTX_end_APIParam_1 BN_CTX_get_APIParam_1,,,null,These functions are used to obtain temporary BN_CTX_get_APIParam_0 variables from a BN_CTX_start_APIParam_1 BN_CTX_end_APIParam_1 BN_CTX_get_APIParam_1  .,These functions are used to obtain temporary BN_CTX_get_APIParam_0 variables from a BN_CTX_start_APIParam_1 BN_CTX_end_APIParam_1 BN_CTX_get_APIParam_1 (which can been created by using BN_CTX_new_APIName ) in order to save the overhead of repeatedly creating and freeing BN_CTX_get_APIParam_0s in functions that are called from inside a loop.
0,0,"EC_POINT_copy , EC_POINT_set_to_infinity , EC_POINT_set_Jprojective_coordinates_GFp , EC_POINT_get_Jprojective_coordinates_GFp , EC_POINT_set_affine_coordinates_GFp , EC_POINT_get_affine_coordinates_GFp , EC_POINT_set_compressed_coordinates_GFp , EC_POINT_set_affine_coordinates_GF2m , EC_POINT_get_affine_coordinates_GF2m , EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point",,,null,"The following functions return 1 on success or 0 on error: EC_POINT_copy, EC_POINT_set_to_infinity, EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_get_Jprojective_coordinates_GFp, EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m, EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point.","The following functions return 1 on success or 0 on error: EC_POINT_copy, EC_POINT_set_to_infinity, EC_POINT_set_Jprojective_coordinates_GFp, EC_POINT_get_Jprojective_coordinates_GFp, EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp, EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m, EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point."
0,0,The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5,,,null,The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5.,"X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2, an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively. The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5. If X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5 is -1 then the field length is calculated internally using strlen(bytes)."
0,0,SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1,,,null,SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1.,"SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
0,0,"The EVP_PKEY_CTX_set_rsa_padding_APIParam_2 parameter can take the value RSA_PKCS1_PADDING for PKCS # 1 padding , RSA_SSLV23_PADDING for SSLv23 padding , RSA_NO_PADDING for no padding , RSA_PKCS1_OAEP_PADDING for OAEP padding , RSA_X931_PADDING for X9 .31 padding and RSA_PKCS1_PSS_PADDING",,,null,"The EVP_PKEY_CTX_set_rsa_padding_APIParam_2 parameter can take the value RSA_PKCS1_PADDING for PKCS#1 padding, RSA_SSLV23_PADDING for SSLv23 padding, RSA_NO_PADDING for no padding, RSA_PKCS1_OAEP_PADDING for OAEP padding (encrypt and decrypt only), RSA_X931_PADDING for X9.31 padding (signature operations only) and RSA_PKCS1_PSS_PADDING (sign and verify only).","The macro EVP_PKEY_CTX_set_rsa_padding_APIName sets the RSA padding mode for EVP_PKEY_CTX_set_rsa_padding_APIParam_1. The EVP_PKEY_CTX_set_rsa_padding_APIParam_2 parameter can take the value RSA_PKCS1_PADDING for PKCS#1 padding, RSA_SSLV23_PADDING for SSLv23 padding, RSA_NO_PADDING for no padding, RSA_PKCS1_OAEP_PADDING for OAEP padding (encrypt and decrypt only), RSA_X931_PADDING for X9.31 padding (signature operations only) and RSA_PKCS1_PSS_PADDING (sign and verify only)."
0,0,SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1,,,null,SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1.,"SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
0,0,It is implemented as a macro,,,null,It is implemented as a macro.,BIO_get_mem_data_APIName sets *BIO_get_mem_data_APIParam_2 to a pointer to the start of the memory BIOs data and returns the total amount of data available. It is implemented as a macro.
0,0,SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN can be set at the same time,,,null,SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN can be set at the same time.,SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN can be set at the same time.
0,0,The use of a read only memory BIO avoids this problem,,,null,The use of a read only memory BIO avoids this problem.,"Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow. The use of a read only memory BIO avoids this problem. If the BIO must be read write then adding a buffering BIO to the chain will speed up the process."
0,0,CRYPTO_destroy_dynlockid_APIName is used to destroy locks,,,null,CRYPTO_destroy_dynlockid_APIName is used to destroy locks.,CRYPTO_destroy_dynlockid_APIName is used to destroy locks. CRYPTO_destroy_dynlockid_APIName will call dyn_destroy_function for the actual destruction.
0,0,CRYPTO_destroy_dynlockid_APIName will call dyn_destroy_function for the actual destruction,,,null,CRYPTO_destroy_dynlockid_APIName will call dyn_destroy_function for the actual destruction.,CRYPTO_destroy_dynlockid_APIName is used to destroy locks. CRYPTO_destroy_dynlockid_APIName will call dyn_destroy_function for the actual destruction.
0,0,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2,,,null,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2.,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2. The array consist of all NIDs of curves in preference order. For a TLS client the curves are used directly in the supported curves extension. For a TLS server the curves are used to determine the set of shared curves.
0,0,OpenSSL versions after 1.0.2 will report the standard terms via SSL_CIPHER_get_name and SSL_CIPHER_description,,,null,OpenSSL versions after 1.0.2 will report the standard terms via SSL_CIPHER_get_name and SSL_CIPHER_description.,It is recommended to use the standard terminology (DHE and ECDHE) during configuration (eg via SSL_CTX_set_cipher_list) for clarity of configuration. OpenSSL versions after 1.0.2 will report the standard terms via SSL_CIPHER_get_name and SSL_CIPHER_description.
0,0,SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1,,,null,SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1.,"SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
0,0,In this way any platform specific operations are hidden by the BIO abstraction,,,null,In this way any platform specific operations are hidden by the BIO abstraction.,"Using accept BIOs, TCP/IP connections can be accepted and data transferred using only BIO routines. In this way any platform specific operations are hidden by the BIO abstraction."
0,0,For a TLS client the curves are used directly in the supported curves extension,,,null,For a TLS client the curves are used directly in the supported curves extension.,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2. The array consist of all NIDs of curves in preference order. For a TLS client the curves are used directly in the supported curves extension. For a TLS server the curves are used to determine the set of shared curves.
0,0,"Having called any of these functions , ENGINE objects would have been dynamically allocated and populated with these implementations and linked into OpenSSL 's internal linked list",,,null,"Having called any of these functions, ENGINE objects would have been dynamically allocated and populated with these implementations and linked into OpenSSL's internal linked list.","Having called any of these functions, ENGINE objects would have been dynamically allocated and populated with these implementations and linked into OpenSSL's internal linked list. At this point it is important to mention an important API function;"
0,0,The function OPENSSL_load_builtin_modules_APIName adds all the standard OpenSSL configuration modules to the internal list,,,null,The function OPENSSL_load_builtin_modules_APIName adds all the standard OpenSSL configuration modules to the internal list.,The function OPENSSL_load_builtin_modules_APIName adds all the standard OpenSSL configuration modules to the internal list. They can then be used by the OpenSSL configuration code.
0,0,The behaviour of SSL_read_APIName depends on the underlying BIO,,,null,The behaviour of SSL_read_APIName depends on the underlying BIO.,"If necessary, SSL_read_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_read_APIName operation. The behaviour of SSL_read_APIName depends on the underlying BIO."
0,0,The reference count of the STACK_OF object is not incremented,,,null,The reference count of the STACK_OF(X509) object is not incremented.,"The reference count of the STACK_OF(X509) object is not incremented. If the corresponding session is freed, the pointer must not be used any longer."
0,0,SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1,,,null,SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1.,"SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1. SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1; SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1. If a certificate has already been set and the private does not belong to the certificate an error is returned. To change a certificate, private key pair the new certificate needs to be set with SSL_use_certificate_APIName or SSL_CTX_use_certificate_APIName before setting the private key with SSL_CTX_use_PrivateKey_APIName or SSL_use_PrivateKey_APIName."
0,0,"Using accept BIOs , TCP/IP connections can be accepted and data transferred using only BIO routines",,,null,"Using accept BIOs, TCP/IP connections can be accepted and data transferred using only BIO routines.","Using accept BIOs, TCP/IP connections can be accepted and data transferred using only BIO routines. In this way any platform specific operations are hidden by the BIO abstraction."
0,0,They can be used by the OpenSSL configuration code,,,null,They can then be used by the OpenSSL configuration code.,The function OPENSSL_load_builtin_modules_APIName adds all the standard OpenSSL configuration modules to the internal list. They can then be used by the OpenSSL configuration code.
0,0,For a TLS server the curves are used to determine the set of shared curves,,,null,For a TLS server the curves are used to determine the set of shared curves.,SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2. The array consist of all NIDs of curves in preference order. For a TLS client the curves are used directly in the supported curves extension. For a TLS server the curves are used to determine the set of shared curves.
0,0,"In public keys , the private exponent and the related secret values are NULL",,,null,"In public keys, the private exponent and the related secret values are NULL.","In public keys, the private exponent and the related secret values are NULL."
0,0,the original value will reappear,,,if the session is to be reused later,"It does not become part of the established session, so if the session is to be reused later, the original value will reappear.","SSL_set_verify_result_APIName overrides the verification result. It only changes the verification result of the SSL_set_verify_result_APIParam_1 object. It does not become part of the established session, so if the session is to be reused later, the original value will reappear."
0,0,"BN_MONT_CTX_free_APIName frees the components of the BN_MONT_CTX_free_APIParam_1 , and",,,"if BN_MONT_CTX_free_APIParam_1 was created by BN_MONT_CTX_new_APIName , also the structure itself","BN_MONT_CTX_free_APIName frees the components of the BN_MONT_CTX_free_APIParam_1, and, if BN_MONT_CTX_free_APIParam_1 was created by BN_MONT_CTX_new_APIName, also the structure itself.","BN_MONT_CTX_free_APIName frees the components of the BN_MONT_CTX_free_APIParam_1, and, if BN_MONT_CTX_free_APIParam_1 was created by BN_MONT_CTX_new_APIName, also the structure itself."
0,0,The TLS standard allows the integration of compression methods into the communication,,,null,The TLS standard (or SSLv3) allows the integration of compression methods into the communication.,"The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure."
0,0,"It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block , along with the length of the seed",,,null,"It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed.","ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,the field length is calculated internally using strlen,,,If X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5 is -1,If X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5 is -1 then the field length is calculated internally using strlen(bytes).,"X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2, an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively. The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5. If X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5 is -1 then the field length is calculated internally using strlen(bytes)."
0,0,The function SSL_CONF_CTX_new_APIName allocates and initialises an SSL_CONF_CTX_new_APIParam_0 structure for use with the SSL_CONF functions,,,null,The function SSL_CONF_CTX_new_APIName allocates and initialises an SSL_CONF_CTX_new_APIParam_0 structure for use with the SSL_CONF functions.,The function SSL_CONF_CTX_new_APIName allocates and initialises an SSL_CONF_CTX_new_APIParam_0 structure for use with the SSL_CONF functions.
0,0,it will be performed transparently during the SSL_read_APIName operation,,,If the peer requests a re-negotiation,"If the peer requests a re-negotiation, it will be performed transparently during the SSL_read_APIName operation.","If necessary, SSL_read_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_read_APIName operation. The behaviour of SSL_read_APIName depends on the underlying BIO."
0,0,Not all members of the X509_STORE are used,,,when the verification takes place,Not all members of the X509_STORE are used when the verification takes place.,Currently no detailed documentation on how to use the X509_STORE object is available. Not all members of the X509_STORE are used when the verification takes place. So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions. This document must therefore be updated when documentation about the X509_STORE object and its handling becomes available.
0,0,the current time is used,,,If X509_cmp_time_APIParam_2 is NULL,"If X509_cmp_time_APIParam_2 is NULL, the current time is used.","If X509_cmp_time_APIParam_2 is NULL, the current time is used."
0,0,then adding a buffering BIO to the chain will speed up the process,,,If the BIO must be read write,If the BIO must be read write then adding a buffering BIO to the chain will speed up the process.,"Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow. The use of a read only memory BIO avoids this problem. If the BIO must be read write then adding a buffering BIO to the chain will speed up the process."
0,0,These functions handle application specific data in X509_STORE_CTX structures,,,null,These functions handle application specific data in X509_STORE_CTX structures.,"These functions handle application specific data in X509_STORE_CTX structures. These functions usage is identical to that of RSA_get_ex_new_index_APIName, RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName ."
0,0,It does not become part of the established session,,,null,"It does not become part of the established session, so if the session is to be reused later, the original value will reappear.","SSL_set_verify_result_APIName overrides the verification result. It only changes the verification result of the SSL_set_verify_result_APIParam_1 object. It does not become part of the established session, so if the session is to be reused later, the original value will reappear."
0,0,The SSL BIO is reset to the initial accept or connect state,,,null,The SSL BIO is then reset to the initial accept or connect state.,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName. BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport. The SSL BIO is then reset to the initial accept or connect state.
0,0,Applications can use the CONF_modules_load_APIName function,,,if Applications wish to load a configuration file Applications and have finer control over how errors are treated,Applications can use the CONF_modules_load_APIName function if Applications wish to load a configuration file Applications and have finer control over how errors are treated.,Applications can use the CONF_modules_load_APIName function if Applications wish to load a configuration file Applications and have finer control over how errors are treated.
0,0,"d2i_Netscape_RSA_APIName , i2d_Netscape_RSA_APIName decode and encode an RSA private key in NET format",,,null,"d2i_Netscape_RSA_APIName, i2d_Netscape_RSA_APIName decode and encode an RSA private key in NET format.","d2i_Netscape_RSA_APIName, i2d_Netscape_RSA_APIName decode and encode an RSA private key in NET format."
0,0,BIO_ssl_copy_session_id_APIName copies an SSL session id between BIO chains BIO_ssl_copy_session_id_APIParam_2 and BIO_ssl_copy_session_id_APIParam_1,,,null,BIO_ssl_copy_session_id_APIName copies an SSL session id between BIO chains BIO_ssl_copy_session_id_APIParam_2 and BIO_ssl_copy_session_id_APIParam_1.,BIO_ssl_copy_session_id_APIName copies an SSL session id between BIO chains BIO_ssl_copy_session_id_APIParam_2 and BIO_ssl_copy_session_id_APIParam_1. It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id_APIName on the internal SSL pointer.
0,0,this will typically disconnect the underlying transport,,,null,BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport.,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName. BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport. The SSL BIO is then reset to the initial accept or connect state.
0,0,The current state information can be obtained using the SSL_state_string_APIName family of functions,,,null,The current state information can be obtained using the SSL_state_string_APIName family of functions.,The current state information can be obtained using the SSL_state_string_APIName family of functions.
0,0,"Some other issue arose in processing the certificate , rendering it unacceptable",,,null,"Some other (unspecified) issue arose in processing the certificate, rendering it unacceptable.","Some other (unspecified) issue arose in processing the certificate, rendering it unacceptable."
0,0,BIO_reset_APIName is sent to the next BIO in the chain,,,null,BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport.,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName. BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport. The SSL BIO is then reset to the initial accept or connect state.
0,0,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName,,,null,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName.,Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName. BIO_reset_APIName is then sent to the next BIO in the chain: this will typically disconnect the underlying transport. The SSL BIO is then reset to the initial accept or connect state.
0,0,The ssl session contains all information required to re-establish the connection without a new handshake,,,null,The ssl session contains all information required to re-establish the connection without a new handshake.,The ssl session contains all information required to re-establish the connection without a new handshake.
0,0,The EVP_PKEY_CTX_new_APIName function allocates public key algorithm context using the algorithm specified in EVP_PKEY_CTX_new_APIParam_1 and ENGINE EVP_PKEY_CTX_new_APIParam_2,,,null,The EVP_PKEY_CTX_new_APIName function allocates public key algorithm context using the algorithm specified in EVP_PKEY_CTX_new_APIParam_1 and ENGINE EVP_PKEY_CTX_new_APIParam_2.,The EVP_PKEY_CTX_new_APIName function allocates public key algorithm context using the algorithm specified in EVP_PKEY_CTX_new_APIParam_1 and ENGINE EVP_PKEY_CTX_new_APIParam_2.
0,0,Applications for non-public use may agree on certain compression methods,,,null,Applications for non-public use may agree on certain compression methods.,"The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure."
0,0,CRYPTO_THREADID_cmp_APIName compares two thread IDs,,,null,"CRYPTO_THREADID_cmp_APIName compares two thread IDs (returning zero for equality, ie the same semantics as memcmp_APIName).","CRYPTO_THREADID_cmp_APIName compares two thread IDs (returning zero for equality, ie the same semantics as memcmp_APIName)."
0,0,SSL_CTX_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_CTX_set_generate_session_id_APIParam_1 to be SSL_CTX_set_generate_session_id_APIParam_2,,,null,SSL_CTX_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_CTX_set_generate_session_id_APIParam_1 to be SSL_CTX_set_generate_session_id_APIParam_2.,SSL_CTX_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_CTX_set_generate_session_id_APIParam_1 to be SSL_CTX_set_generate_session_id_APIParam_2.
0,0,These functions handle RSA signatures at a low level,,,null,These functions handle RSA signatures at a low level.,These functions handle RSA signatures at a low level.
0,0,"EC_POINT_add , EC_POINT_dbl , EC_POINT_invert , EC_POINT_make_affine , EC_POINTs_make_affine , EC_POINTs_make_affine , EC_POINT_mul , EC_POINTs_mul and EC_GROUP_precompute_mult",,,null,"The following functions return 1 on success or 0 on error: EC_POINT_add, EC_POINT_dbl, EC_POINT_invert, EC_POINT_make_affine, EC_POINTs_make_affine, EC_POINTs_make_affine, EC_POINT_mul, EC_POINTs_mul and EC_GROUP_precompute_mult.","The following functions return 1 on success or 0 on error: EC_POINT_add, EC_POINT_dbl, EC_POINT_invert, EC_POINT_make_affine, EC_POINTs_make_affine, EC_POINTs_make_affine, EC_POINT_mul, EC_POINTs_mul and EC_GROUP_precompute_mult."
0,0,A server will only understand SSLv2 client hello messages,,,null,A server will only understand SSLv2 client hello messages.,"A TLS/SSL connection established with these methods will only understand the SSLv2 protocol. A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2. A server will only understand SSLv2 client hello messages. The SSLv2 protocol offers little to no security and should not be used. As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2."
0,0,A functional reference can be obtained in one of two ways,,,null,"A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose.","As mentioned, functional references exist when the cryptographic functionality of an ENGINE is required to be available. A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose."
0,0,It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id_APIName on the internal SSL pointer,,,null,It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id_APIName on the internal SSL pointer.,BIO_ssl_copy_session_id_APIName copies an SSL session id between BIO chains BIO_ssl_copy_session_id_APIParam_2 and BIO_ssl_copy_session_id_APIParam_1. It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id_APIName on the internal SSL pointer.
0,0,SSL_CTX_get_ex_new_index_APIName is used to register a new index for application specific data,,,null,SSL_CTX_get_ex_new_index_APIName is used to register a new index for application specific data.,SSL_CTX_get_ex_new_index_APIName is used to register a new index for application specific data.
0,0,The function SSL_CONF_finish_APIName is used to finalise any operations or to process defaults,,,null,The function SSL_CONF_finish_APIName is used to finalise any operations or to process defaults.,The function SSL_CONF_finish_APIName must be called after all configuration operations have been completed. The function SSL_CONF_finish_APIName is used to finalise any operations or to process defaults.
0,0,this will normally be a public key,,,null,The EVP_PKEY_derive_set_peer_APIName function sets the peer key: this will normally be a public key.,The EVP_PKEY_derive_set_peer_APIName function sets the peer key: this will normally be a public key.
0,0,A TLS/SSL connection established with these methods will only understand the SSLv2 protocol,,,null,A TLS/SSL connection established with these methods will only understand the SSLv2 protocol.,"A TLS/SSL connection established with these methods will only understand the SSLv2 protocol. A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2. A server will only understand SSLv2 client hello messages. The SSLv2 protocol offers little to no security and should not be used. As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2."
0,0,BIO_set_APIName sets the method of an already existing BIO,,,null,BIO_set_APIName sets the method of an already existing BIO.,BIO_set_APIName sets the method of an already existing BIO.
0,0,The MIME parser used by SMIME_read_PKCS7_APIName is somewhat primitive,,,null,The MIME parser used by SMIME_read_PKCS7_APIName is somewhat primitive.,The MIME parser used by SMIME_read_PKCS7_APIName is somewhat primitive. While The MIME parser used by SMIME_read_PKCS7_APIName will handle most S/MIME messages more complex compound formats may not work.
0,0,The EVP signature verification routines are a high level interface to digital signatures,,,null,The EVP signature verification routines are a high level interface to digital signatures.,The EVP signature verification routines are a high level interface to digital signatures.
0,0,The EVP_PKEY_derive_set_peer_APIName function sets the peer key,,,null,The EVP_PKEY_derive_set_peer_APIName function sets the peer key: this will normally be a public key.,The EVP_PKEY_derive_set_peer_APIName function sets the peer key: this will normally be a public key.
0,0,Calls to BIO_read_APIName and BIO_write_APIName read and write data to the underlying stream,,,null,Calls to BIO_read_APIName and BIO_write_APIName read and write data to the underlying stream.,Calls to BIO_read_APIName and BIO_write_APIName read and write data to the underlying stream. BIO_gets_APIName and BIO_puts_APIName are supported on file BIOs.
0,0,BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure,,,null,BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure.,"BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure. This is to help users provide proper locking if needed for multi-threaded use. The ""thread id"" object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called."
0,0,d2i_DSA_PUBKEY_APIName and i2d_DSA_PUBKEY_APIName decode and encode an DSA public key using a SubjectPublicKeyInfo structure,,,null,d2i_DSA_PUBKEY_APIName and i2d_DSA_PUBKEY_APIName decode and encode an DSA public key using a SubjectPublicKeyInfo (certificate public key) structure.,d2i_DSA_PUBKEY_APIName and i2d_DSA_PUBKEY_APIName decode and encode an DSA public key using a SubjectPublicKeyInfo (certificate public key) structure.
8,0,"As of OpenSSL 1.0.2 g , EXPORT ciphers and 56-bit DES are no longer available with SSLv2",,,null,"As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2.","A TLS/SSL connection established with these methods will only understand the SSLv2 protocol. A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2. A server will only understand SSLv2 client hello messages. The SSLv2 protocol offers little to no security and should not be used. As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2."
0,0,BN_BLINDING_free_APIName frees the BN_BLINDING_free_APIParam_1 structure,,,null,BN_BLINDING_free_APIName frees the BN_BLINDING_free_APIParam_1 structure.,BN_BLINDING_free_APIName frees the BN_BLINDING_free_APIParam_1 structure.
0,0,OpenSSL_add_all_algorithms_APIName adds all algorithms to the table,,,null,OpenSSL_add_all_algorithms_APIName adds all algorithms to the table (digests and ciphers).,OpenSSL_add_all_algorithms_APIName adds all algorithms to the table (digests and ciphers).
0,0,BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2,,,null,BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2.,BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2. BIO_set_close_APIParam_2 can take the value BIO_CLOSE or BIO_NOCLOSE. Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.
0,0,"from an existing structural reference to the required ENGINE , or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose",,,null,"A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose.","As mentioned, functional references exist when the cryptographic functionality of an ENGINE is required to be available. A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose."
0,0,SSL_set_quiet_shutdown_APIName sets the `` quiet shutdown '' flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2,,,null,"SSL_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2.","SSL_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2. The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again. It is not changed when SSL_clear_APIName is called. SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1."
0,0,The random number generator does not need to be seeded for RSA signatures,,,null,The random number generator does not need to be seeded for RSA signatures.,When signing with DSA private keys the random number generator must be seeded or the operation will fail. The random number generator does not need to be seeded for RSA signatures.
0,0,"SSL_CTX_use_certificate_APIName loads the certificate SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_CTX_use_certificate_APIParam_1 , SSL_use_certificate_APIName loads SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_use_certificate_APIParam_1",,,null,"SSL_CTX_use_certificate_APIName loads the certificate SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_CTX_use_certificate_APIParam_1, SSL_use_certificate_APIName loads SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_use_certificate_APIParam_1.","SSL_CTX_use_certificate_APIName loads the certificate SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_CTX_use_certificate_APIParam_1, SSL_use_certificate_APIName loads SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_use_certificate_APIParam_1. The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert_APIName function."
0,0,This is to help users provide proper locking,1,,if needed for multi-threaded use,This is to help users provide proper locking if needed for multi-threaded use.,"BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure. This is to help users provide proper locking if needed for multi-threaded use. The ""thread id"" object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called."
0,0,The mark is removed,,,null,The mark is then removed.,"ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found. The mark is then removed. If there is no mark, the whole stack is removed."
0,0,the SSL_SESSION object is automatically allocated,,,When using d2i_SSL_SESSION_APIName,"When using d2i_SSL_SESSION_APIName, the SSL_SESSION object is automatically allocated.","When using d2i_SSL_SESSION_APIName, the SSL_SESSION object is automatically allocated. The reference count is 1, so that the session must be explicitly removed using SSL_SESSION_free_APIName , unless the SSL_SESSION object is completely taken over, when being called inside the get_session_cb_APIName (see SSL_CTX_sess_set_get_cb_APIName )."
0,0,"These functions are not normally called directly , various macros are used instead",,,null,"These functions are not normally called directly, various macros are used instead.","BIO_ctrl_APIName, BIO_callback_ctrl_APIName, BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO ""control"" operations taking arguments of various types. These functions are not normally called directly, various macros are used instead. The standard macros are described below, macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls."
0,0,The function EVP_PKEY_decrypt_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_decrypt_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_decrypt_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,"BIO_ctrl_APIName , BIO_callback_ctrl_APIName , BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO `` control '' operations taking arguments of various types",,,null,"BIO_ctrl_APIName, BIO_callback_ctrl_APIName, BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO ""control"" operations taking arguments of various types.","BIO_ctrl_APIName, BIO_callback_ctrl_APIName, BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO ""control"" operations taking arguments of various types. These functions are not normally called directly, various macros are used instead. The standard macros are described below, macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls."
0,0,This is to help users provide proper,,,null,This is to help users provide proper locking if needed for multi-threaded use.,"BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure. This is to help users provide proper locking if needed for multi-threaded use. The ""thread id"" object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called."
0,0,the BIO waits for an incoming connection,,,If no connection is established and the port is set up properly,"If no connection is established and the port (see below) is set up properly ,then the BIO waits for an incoming connection.","Read and write operations on an accept BIO will perform I/O on the underlying connection. If no connection is established and the port (see below) is set up properly ,then the BIO waits for an incoming connection."
0,0,"In some cases , these BIGNUM values will not be used by the implementation or may be used for alternative data storage",,,null,"In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage.","Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations, either directly or by the use of DH_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using DH structure elements directly and instead use API functions to query or modify keys."
0,0,There is no data to be written or to be read,,,null,There is no data to be written or to be read.,There is no data to be written or to be read.
0,0,the data just read with an internal copy operation,,,if a BIO contains a lot of data,"Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow.","Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow. The use of a read only memory BIO avoids this problem. If the BIO must be read write then adding a buffering BIO to the chain will speed up the process."
0,0,The best solution is probably to avoid deleting items from the hash table inside a `` doall '' callback !,,,null,"The best solution is probably to avoid deleting items from the hash table inside a ""doall"" callback!","When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration. The second best solution to this problem is to set hash->down_load=0 before you start (which will stop the hash table ever decreasing in size). The best solution is probably to avoid deleting items from the hash table inside a ""doall"" callback!"
0,0,It is not changed,,,when SSL_clear_APIName is called,It is not changed when SSL_clear_APIName is called.,"SSL_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2. The setting stays valid until SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 is removed with SSL_free_APIName or SSL_set_quiet_shutdown_APIName is called again. It is not changed when SSL_clear_APIName is called. SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2 may be 0 or 1."
0,0,RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor,,,null,RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor.,RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor. RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2 is NULL or a pre-allocated and initialized RSA_blinding_on_APIParam_2 RSA_blinding_on_APIParam_2. The random number generator must be seeded prior to calling RSA_blinding_on_APIName.
0,0,The server will always generate a new DH key,,,during the negotiation,The server will always generate a new DH key during the negotiation.,"In order to perform a DH key exchange, the server must use a DH group (DH parameters) and generate a DH key. The server will always generate a new DH key during the negotiation."
0,0,"Every read from a read write memory BIO will remove and the BIO is read in small chunks , the operation can be very slow",,,null,"Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow.","Every read from a read write memory BIO will remove the data just read with an internal copy operation, if a BIO contains a lot of data and the BIO is read in small chunks ,the operation can be very slow. The use of a read only memory BIO avoids this problem. If the BIO must be read write then adding a buffering BIO to the chain will speed up the process."
0,0,HMAC_Update_APIName can be called repeatedly with chunks of the message to be authenticated,,,null,HMAC_Update_APIName can be called repeatedly with chunks of the message to be authenticated (HMAC_Update_APIParam_3 bytes at HMAC_Update_APIParam_2).,HMAC_Update_APIName can be called repeatedly with chunks of the message to be authenticated (HMAC_Update_APIParam_3 bytes at HMAC_Update_APIParam_2).
0,0,"The functions EC_KEY_get0_group , EC_KEY_set_group , EC_KEY_get0_private_key , EC_KEY_set_private_key , EC_KEY_get0_public_key , and EC_KEY_set_public_key get and set the EC_GROUP object , the private key and the EC_POINT public key for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1 respectively",,,null,"The functions EC_KEY_get0_group, EC_KEY_set_group, EC_KEY_get0_private_key, EC_KEY_set_private_key, EC_KEY_get0_public_key, and EC_KEY_set_public_key get and set the EC_GROUP object, the private key and the EC_POINT public key for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1 respectively.","The functions EC_KEY_get0_group, EC_KEY_set_group, EC_KEY_get0_private_key, EC_KEY_set_private_key, EC_KEY_get0_public_key, and EC_KEY_set_public_key get and set the EC_GROUP object, the private key and the EC_POINT public key for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1 respectively."
0,0,The supplied data is copied,,,null,The supplied data is copied.,ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3. The supplied data is copied. If ASN1_STRING_set_APIParam_3 is -1 then the length is determined by strlen(data).
0,0,Content is processed and streamed on the fly and not all held in memory at once,,,null,Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures.,The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.
0,0,The output of the filter is written to BIO_new_CMS_APIParam_1,,,null,The output of the filter is written to BIO_new_CMS_APIParam_1.,BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2. The output of the filter is written to BIO_new_CMS_APIParam_1. Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type.
0,0,"`` INTERNAL '' commands are not intended to be exposed to text-based configuration by applications , administrations , users , etc",,,null,"""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc.","If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName. ""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension)."
0,0,"for files command names such as ""SSLProtocol"", ""SSLOptions"" etc are recognised instead of ""Protocol"" and ""Options""",1,,"if the prefix ""SSL"" is set","for files, if the prefix ""SSL"" is set ,then command names such as ""SSLProtocol"", ""SSLOptions"" etc. are recognised instead of ""Protocol"" and ""Options""","Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls. For example for files, if the prefix ""SSL"" is set ,then command names such as ""SSLProtocol"", ""SSLOptions"" etc. are recognised instead of ""Protocol"" and ""Options"". Similarly for command lines if the prefix is ""--ssl-"" then ""--ssl-no_tls1_2"" is recognised instead of ""-no_tls1_2""."
0,0,BIO_do_accept_APIName serves two functions,,,null,BIO_do_accept_APIName serves two functions.,"BIO_do_accept_APIName serves two functions. When it is first called, after the accept BIO has been setup, it will attempt to create the accept socket and bind an address to it. Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection, or request a retry in non blocking mode."
0,0,Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls,,,null,Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls.,"Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls. For example for files, if the prefix ""SSL"" is set ,then command names such as ""SSLProtocol"", ""SSLOptions"" etc. are recognised instead of ""Protocol"" and ""Options"". Similarly for command lines if the prefix is ""--ssl-"" then ""--ssl-no_tls1_2"" is recognised instead of ""-no_tls1_2""."
0,0,An appropriate default implementation method will be used,,,null,An appropriate default implementation method will be used.,The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are shortcuts for calling EC_GROUP_new and the appropriate EC_group_set_curve function. An appropriate default implementation method will be used.
0,0,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim,,,null,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice. X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.
0,0,BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2,,,null,BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2.,"BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2. If BIO_new_ssl_APIParam_2 is 1 client mode is set. If BIO_new_ssl_APIParam_2 is 0 ,server mode is set."
0,0,ECDSA_SIG_free_APIName frees the ECDSA_SIG_free_APIParam_1 structure ECDSA_SIG_free_APIParam_1,,,null,ECDSA_SIG_free_APIName frees the ECDSA_SIG_free_APIParam_1 structure ECDSA_SIG_free_APIParam_1.,ECDSA_SIG_free_APIName frees the ECDSA_SIG_free_APIParam_1 structure ECDSA_SIG_free_APIParam_1.
0,0,"On the server side , additional restrictions apply",,,null,"On the server side, additional restrictions apply.","It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
0,0,All ciphers have additional requirements,,,null,All ciphers have additional requirements.,"It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
0,0,For a description of point_conversion_forms please refer to EC_POINT_new_APIName,,,null,For a description of point_conversion_forms please refer to EC_POINT_new_APIName .,The functions EC_KEY_get_conv_form and EC_KEY_set_conv_form get and set the point_conversion_form for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1. For a description of point_conversion_forms please refer to EC_POINT_new_APIName .
0,0,SSL_get_shared_curve_APIName returns the total number of shared curves,1,,if SSL_get_shared_curve_APIParam_2 is -1,SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2; or the total number of shared curves if SSL_get_shared_curve_APIParam_2 is -1.,SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2; or the total number of shared curves if SSL_get_shared_curve_APIParam_2 is -1.
0,0,Some BIOs can be used immediately after calling BIO_new_APIName,,,null,Some BIOs (such as memory BIOs) can be used immediately after calling BIO_new_APIName.,"Some BIOs (such as memory BIOs) can be used immediately after calling BIO_new_APIName. Others (such as file BIOs) need some additional initialization, and frequently a utility function exists to create and initialize such BIOs."
0,0,ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3,,,null,ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3.,ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3. The supplied data is copied. If ASN1_STRING_set_APIParam_3 is -1 then the length is determined by strlen(data).
0,0,"This basic type of reference is used for instantiating new ENGINEs , iterating across OpenSSL 's internal linked-list of loaded ENGINEs , reading information about an ENGINE , etc",,,null,"This basic type of reference is used for instantiating new ENGINEs, iterating across OpenSSL's internal linked-list of loaded ENGINEs, reading information about an ENGINE, etc.","This basic type of reference is used for instantiating new ENGINEs, iterating across OpenSSL's internal linked-list of loaded ENGINEs, reading information about an ENGINE, etc. Essentially a structural reference is sufficient if you only need to query or manipulate the data of an ENGINE implementation rather than use an ENGINE implementation functionality."
0,0,PEM_write_bio_PKCS7_stream_APIName outputs a PKCS7 structure in PEM format,,,null,PEM_write_bio_PKCS7_stream_APIName outputs a PKCS7 structure in PEM format.,PEM_write_bio_PKCS7_stream_APIName outputs a PKCS7 structure in PEM format.
0,0,PKCS # 1 v1 .5 padding,,,null,PKCS #1 v1.5 padding.,PKCS #1 v1.5 padding. This currently is the most widely used mode.
0,0,The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are shortcuts for calling EC_GROUP_new and the appropriate EC_group_set_curve function,,,null,The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are shortcuts for calling EC_GROUP_new and the appropriate EC_group_set_curve function.,The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are shortcuts for calling EC_GROUP_new and the appropriate EC_group_set_curve function. An appropriate default implementation method will be used.
0,0,This currently is the most widely used mode,,,null,This currently is the most widely used mode.,PKCS #1 v1.5 padding. This currently is the most widely used mode.
0,0,the SSL server will always follow the clients preferences.,,,When not set,"When not set, the SSL server will always follow the clients preferences.","When choosing a cipher, use the server's preferences instead of the client preferences. When not set, the SSL server will always follow the clients preferences. When set, the SSLv3/TLSv1 server will choose following its own preferences. Because of the different protocol, for SSLv2, the server will send its list of preferences to the client and the client chooses."
0,0,"On the client side , the inclusion into the list is also sufficient",,,null,"On the client side, the inclusion into the list is also sufficient.","It should be noted, that inclusion of a cipher to be used into the list is a necessary condition. On the client side, the inclusion into the list is also sufficient. On the server side, additional restrictions apply. All ciphers have additional requirements. ADH ciphers don't need a certificate, but DH-parameters must have been set. All other ciphers need a corresponding certificate and key."
0,0,The CMS_RecipientInfo_encrypt_APIName can be used to add a new recipient to an existing enveloped data structure,,,null,The CMS_RecipientInfo_encrypt_APIName can be used to add a new recipient to an existing enveloped data structure.,"The CMS_RecipientInfo_encrypt_APIName can be used to add a new recipient to an existing enveloped data structure. Typically an application will first decrypt an appropriate CMS_RecipientInfo structure to make the content encrypt key available, it will then add a new recipient using a function such as CMS_add1_recipient_cert_APIName and finally encrypt the content encryption key using CMS_RecipientInfo_encrypt_APIName."
0,0, client mode is set,,,If BIO_new_ssl_APIParam_2 is 1,If BIO_new_ssl_APIParam_2 is 1 client mode is set.,"BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2. If BIO_new_ssl_APIParam_2 is 1 client mode is set. If BIO_new_ssl_APIParam_2 is 0 ,server mode is set."
0,0,Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type,,,null,Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type.,BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2. The output of the filter is written to BIO_new_CMS_APIParam_1. Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type.
0,0,"These objects act as containers for implementations of cryptographic algorithms , and support a reference-counted mechanism to allow them to be dynamically loaded in and out of the running application",,,null,"These objects act as containers for implementations of cryptographic algorithms, and support a reference-counted mechanism to allow them to be dynamically loaded in and out of the running application.","These functions create, manipulate, and use cryptographic modules in the form of ENGINE_get_DH_APIParam_1 ENGINE_load_private_key_APIParam_1 ENGINE_free_APIParam_1 ENGINE_register_RAND_APIParam_1 ENGINE_set_ECDH_APIParam_1 ENGINE_get_cipher_APIParam_1 ENGINE_get_DSA_APIParam_1 ENGINE_set_digests_APIParam_1 ENGINE_set_default_ciphers_APIParam_1 ENGINE_get_cmd_defns_APIParam_1 ENGINE_set_load_privkey_function_APIParam_1 ENGINE_get_STORE_APIParam_1 ENGINE_set_ciphers_APIParam_1 ENGINE_unregister_STORE_APIParam_1 ENGINE_set_default_RAND_APIParam_1 ENGINE_ctrl_cmd_APIParam_1 ENGINE_add_APIParam_1 ENGINE_get_ECDSA_APIParam_1 ENGINE_register_digests_APIParam_1 ENGINE_get_finish_function_APIParam_1 ENGINE_set_DH_APIParam_1 ENGINE_up_ref_APIParam_1 ENGINE_unregister_DSA_APIParam_1 ENGINE_register_STORE_APIParam_1 ENGINE_get_ex_data_APIParam_1 ENGINE_get_RSA_APIParam_1 ENGINE_unregister_ECDSA_APIParam_1 ENGINE_set_finish_function_APIParam_1 ENGINE_get_prev_APIParam_1 ENGINE_set_ex_data_APIParam_1 ENGINE_get_ctrl_function_APIParam_1 ENGINE_get_id_APIParam_1 ENGINE_set_default_DH_APIParam_1 ENGINE_unregister_digests_APIParam_1 ENGINE_set_load_pubkey_function_APIParam_1 ENGINE_set_default_RSA_APIParam_1 ENGINE_get_digests_APIParam_1 ENGINE_get_flags_APIParam_1 ENGINE_ctrl_cmd_string_APIParam_1 ENGINE_get_load_pubkey_function_APIParam_1 ENGINE_get_load_privkey_function_APIParam_1 ENGINE_unregister_DH_APIParam_1 ENGINE_set_default_APIParam_1 ENGINE_unregister_ciphers_APIParam_1 ENGINE_register_complete_APIParam_1 ENGINE_set_DSA_APIParam_1 ENGINE_register_RSA_APIParam_1 ENGINE_set_init_function_APIParam_1 ENGINE_set_name_APIParam_1 ENGINE_get_ciphers_APIParam_1 ENGINE_set_cmd_defns_APIParam_1 ENGINE_get_destroy_function_APIParam_1 ENGINE_set_default_string_APIParam_1 ENGINE_init_APIParam_1 ENGINE_set_destroy_function_APIParam_1 ENGINE_set_RAND_APIParam_1 ENGINE_get_RAND_APIParam_1 ENGINE_set_RSA_APIParam_1 ENGINE_set_STORE_APIParam_1 ENGINE_finish_APIParam_1 ENGINE_set_flags_APIParam_1 ENGINE_load_public_key_APIParam_1 ENGINE_unregister_RAND_APIParam_1 ENGINE_register_ECDSA_APIParam_1 ENGINE_register_ECDH_APIParam_1 ENGINE_get_next_APIParam_1 ENGINE_get_name_APIParam_1 ENGINE_set_default_DSA_APIParam_1 ENGINE_remove_APIParam_1 ENGINE_unregister_ECDH_APIParam_1 ENGINE_register_DSA_APIParam_1 ENGINE_set_default_digests_APIParam_1 ENGINE_register_DH_APIParam_1 ENGINE_set_default_ECDSA_APIParam_1 ENGINE_cmd_is_executable_APIParam_1 ENGINE_get_digest_APIParam_1 ENGINE_register_ciphers_APIParam_1 ENGINE_get_ECDH_APIParam_1 ENGINE_set_ctrl_function_APIParam_1 ENGINE_set_id_APIParam_1 ENGINE_set_default_ECDH_APIParam_1 ENGINE_unregister_RSA_APIParam_1 ENGINE_get_init_function_APIParam_1 ENGINE_set_ECDSA_APIParam_1 objects. These objects act as containers for implementations of cryptographic algorithms, and support a reference-counted mechanism to allow them to be dynamically loaded in and out of the running application."
0,0,These functions implement the Diffie-Hellman key agreement protocol,,,null,These functions implement the Diffie-Hellman key agreement protocol.,These functions implement the Diffie-Hellman key agreement protocol. The generation of shared DH parameters is described in DH_generate_parameters_APIName ; DH_generate_key_APIName describes how to perform a key agreement.
0,0,the SSL server will always follow the clients preferences,,,null,"When not set, the SSL server will always follow the clients preferences.","When choosing a cipher, use the server's preferences instead of the client preferences. When not set, the SSL server will always follow the clients preferences. When set, the SSLv3/TLSv1 server will choose following its own preferences. Because of the different protocol, for SSLv2, the server will send its list of preferences to the client and the client chooses."
0,0,server mode is set,,,If BIO_new_ssl_APIParam_2 is 0,"If BIO_new_ssl_APIParam_2 is 0 ,server mode is set.","BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2. If BIO_new_ssl_APIParam_2 is 1 client mode is set. If BIO_new_ssl_APIParam_2 is 0 ,server mode is set."
0,0,"Three additional callback function , dyn_create_function , dyn_lock_function and dyn_destroy_function",,,null,"Three additional callback function, dyn_create_function, dyn_lock_function and dyn_destroy_function.","Three additional callback function, dyn_create_function, dyn_lock_function and dyn_destroy_function."
0,0,the length is determined by strlen,,,If ASN1_STRING_set_APIParam_3 is -1,If ASN1_STRING_set_APIParam_3 is -1 then the length is determined by strlen(data).,ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3. The supplied data is copied. If ASN1_STRING_set_APIParam_3 is -1 then the length is determined by strlen(data).
0,0,A list of algorithms and associated public key algorithms appears in EVP_DigestInit_APIName,,,null,A list of algorithms and associated public key algorithms appears in EVP_DigestInit_APIName .,Due to the link between message digests and public key algorithms the correct digest algorithm must be used with the correct public key type. A list of algorithms and associated public key algorithms appears in EVP_DigestInit_APIName .
0,0,SMIME_write_CMS_APIName adds the appropriate MIME headers to a CMS structure to produce an S/MIME message,,,null,SMIME_write_CMS_APIName adds the appropriate MIME headers to a CMS structure to produce an S/MIME message.,SMIME_write_CMS_APIName adds the appropriate MIME headers to a CMS structure to produce an S/MIME message.
0,0,EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object,,,null,EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object.,EVP_EncodeFinal_APIName must be called at the end of an encoding operation. EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object. The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3. It is the caller's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (ie 66 bytes in total).
0,0,The MIME parser used by SMIME_read_CMS_APIName is somewhat primitive,,,null,The MIME parser used by SMIME_read_CMS_APIName is somewhat primitive.,The MIME parser used by SMIME_read_CMS_APIName is somewhat primitive. While The MIME parser used by SMIME_read_CMS_APIName will handle most S/MIME messages more complex compound formats may not work.
0,0,This library implements type-checked dynamic hash tables,,,null,This library implements type-checked dynamic hash tables.,This library implements type-checked dynamic hash tables. The hash table entries can be arbitrary structures. Usually The hash table entries consist of key and value fields.
0,0,SMIME_read_PKCS7_APIParam_1 is a BIO to read the message from,,,null,SMIME_read_PKCS7_APIParam_1 is a BIO to read the message from.,SMIME_read_PKCS7_APIParam_1 is a BIO to read the message from.
0,0,SSL_set_fd_APIParam_2 will typically be the socket file descriptor of a network connection,,,null,SSL_set_fd_APIParam_2 will typically be the socket file descriptor of a network connection.,SSL_set_fd_APIName sets the file descriptor SSL_set_fd_APIParam_2 as the input/output facility for the TLS/SSL (encrypted) side of SSL_set_fd_APIParam_1. SSL_set_fd_APIParam_2 will typically be the socket file descriptor of a network connection.
0,0,The hash table entries can be arbitrary structures,,,null,The hash table entries can be arbitrary structures.,This library implements type-checked dynamic hash tables. The hash table entries can be arbitrary structures. Usually The hash table entries consist of key and value fields.
0,0,ALPN protocol selected,,,null,ALPN protocol selected.,ALPN protocol selected.
0,0,"Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection , or request a retry in non blocking mode",,,null,"Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection, or request a retry in non blocking mode.","BIO_do_accept_APIName serves two functions. When it is first called, after the accept BIO has been setup, it will attempt to create the accept socket and bind an address to it. Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection, or request a retry in non blocking mode."
0,0,The reference count is 1,,,null,"The reference count is 1, so that the session must be explicitly removed using SSL_SESSION_free_APIName , unless the SSL_SESSION object is completely taken over, when being called inside the get_session_cb_APIName (see SSL_CTX_sess_set_get_cb_APIName ).","When using d2i_SSL_SESSION_APIName, the SSL_SESSION object is automatically allocated. The reference count is 1, so that the session must be explicitly removed using SSL_SESSION_free_APIName , unless the SSL_SESSION object is completely taken over, when being called inside the get_session_cb_APIName (see SSL_CTX_sess_set_get_cb_APIName )."
0,0,any other flags are purely informational to the caller,,,If the ENGINE_CMD_FLAG_INTERNAL flag is set,"If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName.","If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName. ""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension)."
0,0,this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName.,,,If the ENGINE_CMD_FLAG_INTERNAL flag is set,"If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName.","If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely informational to the caller - this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName. ""INTERNAL"" commands are not intended to be exposed to text-based configuration by applications, administrations, users, etc. These can support arbitrary operations via ENGINE_ctrl_APIName, including passing to and/or from the control commands data of any arbitrary type. These commands are supported in the discovery mechanisms simply to allow applications determinie if an ENGINE supports certain specific commands it might want to use (eg application ""foo"" might query various ENGINEs to see if they implement ""FOO_GET_VENDOR_LOGO_GIF"" - and ENGINE could therefore decide whether or not to support this ""foo""-specific extension)."
0,0,"be careful : the table may decrease in size, moving the item that you are currently on down lower in the hash table",1,,"When doing this, if you delete entries from the hash table in your callbacks","When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration.","When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration. The second best solution to this problem is to set hash->down_load=0 before you start (which will stop the hash table ever decreasing in size). The best solution is probably to avoid deleting items from the hash table inside a ""doall"" callback!"
0,0,it will attempt to create the accept socket and bind an address to it,,,"When it is first called , after the accept BIO has been setup","When it is first called, after the accept BIO has been setup, it will attempt to create the accept socket and bind an address to it.","BIO_do_accept_APIName serves two functions. When it is first called, after the accept BIO has been setup, it will attempt to create the accept socket and bind an address to it. Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection, or request a retry in non blocking mode."
0,0,des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName,,,null,des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName; des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function.,des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName; des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function.
0,0,The generation of shared DH parameters is described in DH_generate_parameters_APIName,,,null,The generation of shared DH parameters is described in DH_generate_parameters_APIName ; DH_generate_key_APIName describes how to perform a key agreement.,These functions implement the Diffie-Hellman key agreement protocol. The generation of shared DH parameters is described in DH_generate_parameters_APIName ; DH_generate_key_APIName describes how to perform a key agreement.
0,0,SSL_set_fd_APIName sets the file descriptor SSL_set_fd_APIParam_2 as the input/output facility for the TLS/SSL side of SSL_set_fd_APIParam_1,,,null,SSL_set_fd_APIName sets the file descriptor SSL_set_fd_APIParam_2 as the input/output facility for the TLS/SSL (encrypted) side of SSL_set_fd_APIParam_1.,SSL_set_fd_APIName sets the file descriptor SSL_set_fd_APIParam_2 as the input/output facility for the TLS/SSL (encrypted) side of SSL_set_fd_APIParam_1. SSL_set_fd_APIParam_2 will typically be the socket file descriptor of a network connection.
0,0,this can be achieved by adding a null sink BIO to the end of the chain,,,null," , this can be achieved by adding a null sink BIO to the end of the chain","A null sink is useful if, for example, an application wishes to digest some data by writing through a digest bio but not send the digested data anywhere. Since a BIO chain must normally include a source/sink BIO, this can be achieved by adding a null sink BIO to the end of the chain"
0,0,"ERR_GET_LIB_APIName , ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName can be used to extract these",,,null,"ERR_GET_LIB_APIName, ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName can be used to extract these.","The error code returned by ERR_get_error_APIName consists of a library number, function code and reason code. ERR_GET_LIB_APIName, ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName can be used to extract these."
0,0,d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2,,,null,d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2.,"d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
0,0,The SSL_CTX_load_verify_locations_APIParam_2 is processed on execution of the SSL_CTX_load_verify_locations_APIName function,,,null,The SSL_CTX_load_verify_locations_APIParam_2 is processed on execution of the SSL_CTX_load_verify_locations_APIName function.,The SSL_CTX_load_verify_locations_APIParam_2 is processed on execution of the SSL_CTX_load_verify_locations_APIName function.
0,0,compound formats may not work,,,While The MIME parser used by SMIME_read_CMS_APIName will handle most S/MIME messages more complex,While The MIME parser used by SMIME_read_CMS_APIName will handle most S/MIME messages more complex compound formats may not work.,The MIME parser used by SMIME_read_CMS_APIName is somewhat primitive. While The MIME parser used by SMIME_read_CMS_APIName will handle most S/MIME messages more complex compound formats may not work.
0,0,CMS_final_APIName finalises the structure CMS_final_APIParam_1,,,null,CMS_final_APIName finalises the structure CMS_final_APIParam_1.,CMS_final_APIName finalises the structure CMS_final_APIParam_1. It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields. The parameter CMS_final_APIParam_2 contains the content to be processed. The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.
0,0,These functions are implemented in C and for several platforms in assembly language,,,null,These functions are implemented in C and for several platforms in assembly language:,These functions are implemented in C and for several platforms in assembly language:
0,0,CRYPTO_THREADID_cpy_APIName duplicates a thread ID value,,,null,"CRYPTO_THREADID_cpy_APIName duplicates a thread ID value,","CRYPTO_THREADID_cpy_APIName duplicates a thread ID value,"
0,0,Otherwise the total number of curves will be provided,,,null,Otherwise the total number of curves will be provided.,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,The function EVP_PKEY_sign_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The function EVP_PKEY_sign_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The function EVP_PKEY_sign_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName,,,null,This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName.,"Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake, a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected. To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index. This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName. The index value is set when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake."
0,0,call the function EC_get_builtin_curves,,,null," , call the function EC_get_builtin_curves .","Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves,,,null,The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves.,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,The parameter CMS_final_APIParam_2 contains the content to be processed,,,null,The parameter CMS_final_APIParam_2 contains the content to be processed.,CMS_final_APIName finalises the structure CMS_final_APIParam_1. It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields. The parameter CMS_final_APIParam_2 contains the content to be processed. The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.
0,0,The function EVP_PKEY_set_cb_APIName sets the key or parameter generation callback to EVP_PKEY_CTX_get_cb_APIParam_0,,,null,The function EVP_PKEY_set_cb_APIName sets the key or parameter generation callback to EVP_PKEY_CTX_get_cb_APIParam_0.,The function EVP_PKEY_set_cb_APIName sets the key or parameter generation callback to EVP_PKEY_CTX_get_cb_APIParam_0. The function EVP_PKEY_CTX_get_cb_APIName returns the key or parameter generation callback.
0,0,X509_NAME_ENTRY_get_object_APIName retrieves the field name of X509_NAME_ENTRY_get_object_APIParam_1 in and X509_NAME_ENTRY_get_object_APIParam_0 structure,,,null,X509_NAME_ENTRY_get_object_APIName retrieves the field name of X509_NAME_ENTRY_get_object_APIParam_1 in and X509_NAME_ENTRY_get_object_APIParam_0 structure.,X509_NAME_ENTRY_get_object_APIName retrieves the field name of X509_NAME_ENTRY_get_object_APIParam_1 in and X509_NAME_ENTRY_get_object_APIParam_0 structure.
0,0,On failure an error code can be obtained from ERR_get_error_APIName,,,null,On failure an error code can be obtained from ERR_get_error_APIName .,On failure an error code can be obtained from ERR_get_error_APIName .
0,0,Textual representation of the cipher name,,,null,Textual representation of the cipher name.,Textual representation of the cipher name.
0,0,The functions EC_KEY_get_conv_form and EC_KEY_set_conv_form get and set the point_conversion_form for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1,,,null,The functions EC_KEY_get_conv_form and EC_KEY_set_conv_form get and set the point_conversion_form for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1.,The functions EC_KEY_get_conv_form and EC_KEY_set_conv_form get and set the point_conversion_form for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1. For a description of point_conversion_forms please refer to EC_POINT_new_APIName .
0,0,the underlying BUF_MEM structure is also freed,,,If the BIO_CLOSE flag is set when a memory BIO is freed,"If the BIO_CLOSE flag is set when a memory BIO is freed ,then the underlying BUF_MEM structure is also freed.","If the BIO_CLOSE flag is set when a memory BIO is freed ,then the underlying BUF_MEM structure is also freed."
0,0,The i2d_ECDSA_SIG_APIParam_1 ECDSA_SIG_free_APIParam_1 d2i_ECDSA_SIG_APIParam_1 structure consists of two BIGNUMs for the r and s value of a ECDSA signature,,,null,The i2d_ECDSA_SIG_APIParam_1 ECDSA_SIG_free_APIParam_1 d2i_ECDSA_SIG_APIParam_1 structure consists of two BIGNUMs for the r and s value of a ECDSA signature (see X9.62 or FIPS 186-2).,The i2d_ECDSA_SIG_APIParam_1 ECDSA_SIG_free_APIParam_1 d2i_ECDSA_SIG_APIParam_1 structure consists of two BIGNUMs for the r and s value of a ECDSA signature (see X9.62 or FIPS 186-2).
0,0,the key length will be set to the value of the recovered key length,,,If the cipher passed in the EVP_OpenInit_APIParam_2 parameter is a variable length cipher,"If the cipher passed in the EVP_OpenInit_APIParam_2 parameter is a variable length cipher ,then the key length will be set to the value of the recovered key length.","If the cipher passed in the EVP_OpenInit_APIParam_2 parameter is a variable length cipher ,then the key length will be set to the value of the recovered key length. If the cipher is a fixed length cipher then the recovered key length must match the fixed cipher length."
0,0,BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments,,,null,BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments.,"BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments. There are two types of BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure that are supported: ""new"" style and ""old"" style. New programs should prefer the ""new"" style, whilst the ""old"" style is provided for backwards compatibility purposes."
0,0,The index value is set,,,when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake,The index value is set when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake.,"Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake, a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected. To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index. This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName. The index value is set when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake."
0,0,the internal SSL structure is also freed using SSL_free_APIName,,,If the close flag is set when an SSL BIO is freed,"If the close flag is set when an SSL BIO is freed ,then the internal SSL structure is also freed using SSL_free_APIName.","If the close flag is set when an SSL BIO is freed ,then the internal SSL structure is also freed using SSL_free_APIName."
0,0,d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data,,,If the call is successful,"If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data.","d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
0,0,the library will try to complete the chain from the available CA certificates in the trusted CA storage,,,If no chain is specified,"If no chain is specified, the library will try to complete the chain from the available CA certificates in the trusted CA storage, see SSL_CTX_load_verify_locations_APIName .","If no chain is specified, the library will try to complete the chain from the available CA certificates in the trusted CA storage, see SSL_CTX_load_verify_locations_APIName ."
0,0,BIO_set_fd_APIName and BIO_get_fd_APIName are macros,,,null,BIO_set_fd_APIName and BIO_get_fd_APIName are macros.,BIO_set_fd_APIName and BIO_get_fd_APIName are macros.
0,0,The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing,,,null,The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.,CMS_final_APIName finalises the structure CMS_final_APIParam_1. It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields. The parameter CMS_final_APIParam_2 contains the content to be processed. The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.
0,0,EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed,,,when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 is freed,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 is freed.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 is freed."
0,0,X509_STORE_CTX_cleanup_APIName internally cleans up an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 structure,,,null,X509_STORE_CTX_cleanup_APIName internally cleans up an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 structure.,X509_STORE_CTX_cleanup_APIName internally cleans up an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 structure. The context can then be reused with an new call to X509_STORE_CTX_init_APIName.
0,0,"Similarly for command lines ""--ssl-no_tls1_2"" is recognised instead of ""-no_tls1_2"" instead of ""-no_tls1_2"".",,,"if the prefix is ""--ssl-""","Similarly for command lines if the prefix is ""--ssl-"" then ""--ssl-no_tls1_2"" is recognised instead of ""-no_tls1_2"" instead of ""-no_tls1_2"".","Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls. For example for files, if the prefix ""SSL"" is set ,then command names such as ""SSLProtocol"", ""SSLOptions"" etc. are recognised instead of ""Protocol"" and ""Options"". Similarly for command lines if the prefix is ""--ssl-"" then ""--ssl-no_tls1_2"" is recognised instead of ""-no_tls1_2""."
0,0,"EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 is freed.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 is freed."
0,0,"Note , this is a non-standard OpenSSL-specific data format",,,null,"Note, this is a non-standard OpenSSL-specific data format.","i2d_X509_AUX_APIName is similar to i2d_X509_APIName, but the encoded output contains both the certificate and any auxiliary trust information. This is used by the PEM routines to write ""TRUSTED CERTIFICATE"" objects. Note, this is a non-standard OpenSSL-specific data format."
0,0,CMS_SignerInfo_set1_signer_cert_APIName sets the signers certificate of CMS_SignerInfo_set1_signer_cert_APIParam_1 to CMS_SignerInfo_set1_signer_cert_APIParam_2,,,null,CMS_SignerInfo_set1_signer_cert_APIName sets the signers certificate of CMS_SignerInfo_set1_signer_cert_APIParam_1 to CMS_SignerInfo_set1_signer_cert_APIParam_2.,CMS_SignerInfo_set1_signer_cert_APIName sets the signers certificate of CMS_SignerInfo_set1_signer_cert_APIParam_1 to CMS_SignerInfo_set1_signer_cert_APIParam_2.
0,0,After the call to EVP_PKEY_decrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_decrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_decrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,EC_KEY_up_ref increments the reference count associated with the EC_KEY object,,,null,EC_KEY_up_ref increments the reference count associated with the EC_KEY object.,EC_KEY_up_ref increments the reference count associated with the EC_KEY object.
0,0,almost all current BIO types will not request a retry,,,If the underlying I/O structure is in a blocking mode,"If the underlying I/O structure is in a blocking mode , almost all current BIO types will not request a retry ,  .","If the underlying I/O structure is in a blocking mode ,almost all current BIO types will not request a retry, because the underlying I/O calls will not. If the application knows that the BIO type will never signal a retry then the application need not call BIO_should_retry_APIName after a failed BIO I/O call. This is typically done with file BIOs."
0,0,only passing the relevant data to ASN1 functions,,,when the entire structure can be read or written,This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write. This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.
0,0,This is usually worked around by,,,null,This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.,The OpenSSL ASN1 functions cannot gracefully deal with non blocking I/O: that is they cannot retry after a partial read or write. This is usually worked around by only passing the relevant data to ASN1 functions when the entire structure can be read or written.
0,0,New objects can be added by calling OBJ_create_APIName,,,null,New objects can be added by calling OBJ_create_APIName.,New objects can be added by calling OBJ_create_APIName.
0,0,New attributes can also be added using CMS_encrypt_APIParam_0 and the CMS attribute utility functions,,,null,New attributes can also be added using  CMS_encrypt_APIParam_0  and the CMS attribute utility functions,The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate. For example if one or more KEKRecipientInfo structures need to be added. New attributes can also be added using  CMS_encrypt_APIParam_0  and the CMS attribute utility functions
0,0,a server may request a certificate from the client,,,During a handshake,During a handshake (or renegotiation) a server may request a certificate from the client.,"During a handshake (or renegotiation) a server may request a certificate from the client. A client certificate must only be sent, when the server did send the request."
0,0,The context can be reused with an new call to X509_STORE_CTX_init_APIName,,,null,The context can then be reused with an new call to X509_STORE_CTX_init_APIName.,X509_STORE_CTX_cleanup_APIName internally cleans up an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 structure. The context can then be reused with an new call to X509_STORE_CTX_init_APIName.
0,0,EC_KEY_precompute_mult stores multiples of the underlying EC_GROUP generator for faster point multiplication,,,null,EC_KEY_precompute_mult stores multiples of the underlying EC_GROUP generator for faster point multiplication.,EC_KEY_precompute_mult stores multiples of the underlying EC_GROUP generator for faster point multiplication. See also EC_POINT_add_APIName .
0,0,This is used by the PEM routines to write `` TRUSTED CERTIFICATE '' objects,,,null,"This is used by the PEM routines to write ""TRUSTED CERTIFICATE"" objects.","i2d_X509_AUX_APIName is similar to i2d_X509_APIName, but the encoded output contains both the certificate and any auxiliary trust information. This is used by the PEM routines to write ""TRUSTED CERTIFICATE"" objects. Note, this is a non-standard OpenSSL-specific data format."
0,0,Make it possible to retry SSL_write_APIName with changed buffer location,,,null,Make it possible to retry SSL_write_APIName with changed buffer location (the buffer contents must stay the same).,Make it possible to retry SSL_write_APIName with changed buffer location (the buffer contents must stay the same). This is not the default to avoid the misconception that non-blocking SSL_write_APIName behaves like non-blocking write_APIName.
0,0,This list is globally maintained for all SSL operations within this application,,,null,This list is globally maintained for all SSL operations within this application.,SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods. This list is globally maintained for all SSL operations within this application. the list of available compression methods cannot be set for specific SSL_CTX or SSL objects.
0,0,SSL_get_cipher_APIName and SSL_get_cipher_name_APIName are identical macros to obtain the name of the currently used cipher,,,null,SSL_get_cipher_APIName and SSL_get_cipher_name_APIName are identical macros to obtain the name of the currently used cipher.,SSL_get_cipher_APIName and SSL_get_cipher_name_APIName are identical macros to obtain the name of the currently used cipher. SSL_get_cipher_bits_APIName is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version_APIName returns the protocol name. See SSL_CIPHER_get_name_APIName for more details.
0,0,The call to EVP_DigestVerifyFinal_APIName internally finalizes a copy of the digest context,,,null,The call to EVP_DigestVerifyFinal_APIName internally finalizes a copy of the digest context.,The call to EVP_DigestVerifyFinal_APIName internally finalizes a copy of the digest context. This means that EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.
0,0,The functions EC_GROUP_set_point_conversion_form and EC_GROUP_get_point_conversion_form set and get the point_conversion_form for the curve respectively,,,null,The functions EC_GROUP_set_point_conversion_form and EC_GROUP_get_point_conversion_form set and get the point_conversion_form for the curve respectively.,The functions EC_GROUP_set_point_conversion_form and EC_GROUP_get_point_conversion_form set and get the point_conversion_form for the curve respectively.
0,0,"i2d_X509_AUX_APIName is similar to i2d_X509_APIName , but the encoded output contains both the certificate and any auxiliary trust information",,,null,"i2d_X509_AUX_APIName is similar to i2d_X509_APIName, but the encoded output contains both the certificate and any auxiliary trust information.","i2d_X509_AUX_APIName is similar to i2d_X509_APIName, but the encoded output contains both the certificate and any auxiliary trust information. This is used by the PEM routines to write ""TRUSTED CERTIFICATE"" objects. Note, this is a non-standard OpenSSL-specific data format."
0,0,The function ASN1_TIME_set_APIName sets the ASN1_TIME structure ASN1_TIME_set_APIParam_1 to the time represented by the time_t value ASN1_TIME_set_APIParam_2,,,null,The function ASN1_TIME_set_APIName sets the ASN1_TIME structure ASN1_TIME_set_APIParam_1 to the time represented by the time_t value ASN1_TIME_set_APIParam_2.,"The function ASN1_TIME_set_APIName sets the ASN1_TIME structure ASN1_TIME_set_APIParam_1 to the time represented by the time_t value ASN1_TIME_set_APIParam_2. If ASN1_TIME_set_APIParam_1 is NULL , a new ASN1_TIME structure is allocated and returned."
0,0,The function SSL_CONF_CTX_set_flags_APIName sets SSL_CONF_CTX_set_flags_APIParam_2 in the context SSL_CONF_CTX_set_flags_APIParam_1,,,null,The function SSL_CONF_CTX_set_flags_APIName sets SSL_CONF_CTX_set_flags_APIParam_2 in the context SSL_CONF_CTX_set_flags_APIParam_1.,The function SSL_CONF_CTX_set_flags_APIName sets SSL_CONF_CTX_set_flags_APIParam_2 in the context SSL_CONF_CTX_set_flags_APIParam_1.
0,0,SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2,,,null,SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2.,SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2. This value is a hint and not an absolute; see the notes below.
0,0,SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods,,,null,SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods.,SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods. This list is globally maintained for all SSL operations within this application. the list of available compression methods cannot be set for specific SSL_CTX or SSL objects.
0,0,"A human-readable hexadecimal output of the components of the RSA key , DSA parameters or key or DH parameters is printed to RSA_print_APIParam_1 DSA_print_APIParam_1 DHparams_print_APIParam_1 DSAparams_print_APIParam_1 or RSA_print_fp_APIParam_1 DSA_print_fp_APIParam_1 DHparams_print_fp_APIParam_1 DSAparams_print_fp_APIParam_1",,,null,"A human-readable hexadecimal output of the components of the RSA key, DSA parameters or key or DH parameters is printed to RSA_print_APIParam_1 DSA_print_APIParam_1 DHparams_print_APIParam_1 DSAparams_print_APIParam_1 or RSA_print_fp_APIParam_1 DSA_print_fp_APIParam_1 DHparams_print_fp_APIParam_1 DSAparams_print_fp_APIParam_1.","A human-readable hexadecimal output of the components of the RSA key, DSA parameters or key or DH parameters is printed to RSA_print_APIParam_1 DSA_print_APIParam_1 DHparams_print_APIParam_1 DSAparams_print_APIParam_1 or RSA_print_fp_APIParam_1 DSA_print_fp_APIParam_1 DHparams_print_fp_APIParam_1 DSAparams_print_fp_APIParam_1."
0,0,then the default digest for the public key algorithm will be used,1,,"If the PKCS7_sign_add_signer_APIParam_4 parameter is NULL , the default digest for the public key algorithm","If the PKCS7_sign_add_signer_APIParam_4 parameter is NULL ,then the default digest for the public key algorithm will be used.","If the PKCS7_sign_add_signer_APIParam_4 parameter is NULL ,then the default digest for the public key algorithm will be used."
0,0,the error string will contain the numeric code,,,If there is no text string registered for the given error code,"If there is no text string registered for the given error code, the error string will contain the numeric code.","The OpenSSL error strings should be loaded by calling ERR_load_crypto_strings_APIName or, for SSL applications, SSL_load_error_strings_APIName first. If there is no text string registered for the given error code, the error string will contain the numeric code."
0,0,this can be used,,,when the application wishes to use a non standard transport for TLS/SSL,"One typical use of BIO pairs is to place TLS/SSL I/O under application control, this can be used when the application wishes to use a non standard transport for TLS/SSL or the normal socket routines are inappropriate.","One typical use of BIO pairs is to place TLS/SSL I/O under application control, this can be used when the application wishes to use a non standard transport for TLS/SSL or the normal socket routines are inappropriate."
0,0,"Expired sessions are removed from the internal session cache , either directly by the application or automatically",,,whenever SSL_CTX_flush_sessions_APIName is called,"Expired sessions are removed from the internal session cache, whenever SSL_CTX_flush_sessions_APIName is called, either directly by the application or automatically (see SSL_CTX_set_session_cache_mode_APIName )","Expired sessions are removed from the internal session cache, whenever SSL_CTX_flush_sessions_APIName is called, either directly by the application or automatically (see SSL_CTX_set_session_cache_mode_APIName )"
0,0,SSL_CTX_set_timeout_APIName sets the timeout for newly created sessions for SSL_CTX_set_timeout_APIParam_1 to SSL_CTX_set_timeout_APIParam_2,,,null,SSL_CTX_set_timeout_APIName sets the timeout for newly created sessions for SSL_CTX_set_timeout_APIParam_1 to SSL_CTX_set_timeout_APIParam_2.,SSL_CTX_set_timeout_APIName sets the timeout for newly created sessions for SSL_CTX_set_timeout_APIParam_1 to SSL_CTX_set_timeout_APIParam_2. The timeout value SSL_CTX_set_timeout_APIParam_2 must be given in seconds.
0,0,These functions decode and encode an ASN1 OBJECT IDENTIFIER,,,null,These functions decode and encode an ASN1 OBJECT IDENTIFIER.,These functions decode and encode an ASN1 OBJECT IDENTIFIER.
0,0,The header of the record is being evaluated,,,null,The header of the record is being evaluated.,The header of the record is being evaluated.
0,0,the 3bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4 word array bn_sqr_normal_APIParam_4 bn_sqr_recursive_APIParam_4,,,null,and the 3*bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4 word array bn_sqr_normal_APIParam_4 bn_sqr_recursive_APIParam_4.,"bn_mul_high(bn_mul_normal_APIParam_1 bn_sqr_normal_APIParam_1 bn_set_low_APIParam_1 bn_sqr_comba4_APIParam_1 mul_add_APIParam_1 bn_mul_comba4_APIParam_1 bn_set_high_APIParam_1 bn_sqr_recursive_APIParam_1 bn_mul_low_recursive_APIParam_1 bn_sqr_comba8_APIParam_1 bn_mul_high_APIParam_1 bn_mul_low_normal_APIParam_1 bn_mul_comba8_APIParam_1 bn_mul_recursive_APIParam_1 mul_APIParam_1 bn_mul_part_recursive_APIParam_1, bn_mul_normal_APIParam_2 bn_sqr_normal_APIParam_2 bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_sqr_comba4_APIParam_2 bn_fix_top_APIParam_1 mul_add_APIParam_2 bn_mul_comba4_APIParam_2 bn_print_APIParam_1 bn_set_high_APIParam_2 bn_sqr_recursive_APIParam_2 bn_mul_low_recursive_APIParam_2 bn_sqr_comba8_APIParam_2 bn_expand_APIParam_1 bn_mul_high_APIParam_2 sqr_APIParam_3 bn_mul_low_normal_APIParam_2 bn_cmp_words_APIParam_1 bn_mul_comba8_APIParam_2 bn_check_top_APIParam_1 bn_mul_recursive_APIParam_2 mul_APIParam_2 bn_expand2_APIParam_1 bn_wexpand_APIParam_1 bn_mul_part_recursive_APIParam_2, bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3, bn_div_words_APIParam_2 bn_mul_high_APIParam_4, bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4, bn_sqr_normal_APIParam_4 bn_sqr_recursive_APIParam_4) operates on the bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4 word arrays bn_mul_normal_APIParam_1 bn_sqr_normal_APIParam_1 bn_set_low_APIParam_1 bn_sqr_comba4_APIParam_1 mul_add_APIParam_1 bn_mul_comba4_APIParam_1 bn_set_high_APIParam_1 bn_sqr_recursive_APIParam_1 bn_mul_low_recursive_APIParam_1 bn_sqr_comba8_APIParam_1 bn_mul_high_APIParam_1 bn_mul_low_normal_APIParam_1 bn_mul_comba8_APIParam_1 bn_mul_recursive_APIParam_1 mul_APIParam_1 bn_mul_part_recursive_APIParam_1, bn_mul_normal_APIParam_2 bn_sqr_normal_APIParam_2 bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_sqr_comba4_APIParam_2 bn_fix_top_APIParam_1 mul_add_APIParam_2 bn_mul_comba4_APIParam_2 bn_print_APIParam_1 bn_set_high_APIParam_2 bn_sqr_recursive_APIParam_2 bn_mul_low_recursive_APIParam_2 bn_sqr_comba8_APIParam_2 bn_expand_APIParam_1 bn_mul_high_APIParam_2 sqr_APIParam_3 bn_mul_low_normal_APIParam_2 bn_cmp_words_APIParam_1 bn_mul_comba8_APIParam_2 bn_check_top_APIParam_1 bn_mul_recursive_APIParam_2 mul_APIParam_2 bn_expand2_APIParam_1 bn_wexpand_APIParam_1 bn_mul_part_recursive_APIParam_2, bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 and bn_div_words_APIParam_2 bn_mul_high_APIParam_4 (?) and the 3*bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4 word array bn_sqr_normal_APIParam_4 bn_sqr_recursive_APIParam_4."
0,0,lh_node_stats_APIName prints the number of entries for each ` bucket ' in the hash table,,,null,lh_node_stats_APIName prints the number of entries for each 'bucket' in the hash table.,lh_node_stats_APIName prints the number of entries for each 'bucket' in the hash table.
0,0,EVP_VerifyInit_ex_APIName sets up verification context EVP_VerifyInit_ex_APIParam_1 to use digest EVP_VerifyInit_ex_APIParam_2 from ENGINE EVP_VerifyInit_ex_APIParam_3,,,null,EVP_VerifyInit_ex_APIName sets up verification context EVP_VerifyInit_ex_APIParam_1 to use digest EVP_VerifyInit_ex_APIParam_2 from ENGINE EVP_VerifyInit_ex_APIParam_3.,EVP_VerifyInit_ex_APIName sets up verification context EVP_VerifyInit_ex_APIParam_1 to use digest EVP_VerifyInit_ex_APIParam_2 from ENGINE EVP_VerifyInit_ex_APIParam_3. EVP_VerifyInit_ex_APIParam_1 must be initialized by calling EVP_MD_CTX_init_APIName before calling this function.
0,0,The client can only send exactly one session ticket,,,null,The client can only send exactly one session ticket.,"In order to reuse a session, a TLS client must send the a session ticket extension to the server. The client can only send exactly one session ticket. The server, through the callback function, either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket."
0,0,"One typical use of BIO pairs is to place TLS/SSL I/O under application control , or the normal socket routines are inappropriate",,,null,"One typical use of BIO pairs is to place TLS/SSL I/O under application control, this can be used when the application wishes to use a non standard transport for TLS/SSL or the normal socket routines are inappropriate.","One typical use of BIO pairs is to place TLS/SSL I/O under application control, this can be used when the application wishes to use a non standard transport for TLS/SSL or the normal socket routines are inappropriate."
0,0,SSL_CTX_add0_chain_cert_APIName and SSL_CTX_add1_chain_cert_APIName append the single certificate SSL_CTX_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 to the chain associated with the current certificate of SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1,,,null,SSL_CTX_add0_chain_cert_APIName and SSL_CTX_add1_chain_cert_APIName append the single certificate SSL_CTX_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 to the chain associated with the current certificate of SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1.,SSL_CTX_add0_chain_cert_APIName and SSL_CTX_add1_chain_cert_APIName append the single certificate SSL_CTX_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 to the chain associated with the current certificate of SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1.
0,0,The ssl session has reference counts from two users : the SSL object,1,,null,"The ssl session has reference counts from two users : the SSL object ,  .","The ssl session has reference counts from two users: the SSL object, for which the reference count is removed by SSL_free_APIName and the internal session cache. If the session is considered bad, because SSL_shutdown_APIName was not called for the connection and SSL_set_shutdown_APIName was not used to set the SSL_SENT_SHUTDOWN state, the session will also be removed from the session cache as required by RFC2246."
0,0,BN_zero_APIName and BN_one_APIName are macros,,0,null,BN_zero_APIName and BN_one_APIName are macros.,"BN_zero_APIName, BN_one_APIName and BN_set_word_APIName set BN_zero_APIParam_1 BN_one_APIParam_1 BN_set_word_APIParam_1 BN_zero_APIParam_1 BN_one_APIParam_1 to the values 0, 1 and BN_set_word_APIParam_2 respectively. BN_zero_APIName and BN_one_APIName are macros."
0,0,This is a common query in the OpenSSL mailing lists,,,null,This is a common query in the OpenSSL mailing lists.,"The cipher and digest lookup functions are used in many parts of the library. If the table is not initialized, several functions will misbehave and complain several functions cannot find algorithms. This includes the PEM, PKCS#12, SSL and S/MIME libraries. This is a common query in the OpenSSL mailing lists."
0,0,"This includes the PEM , PKCS # 12 , SSL and S/MIME libraries",,,null,"This includes the PEM, PKCS#12, SSL and S/MIME libraries.","The cipher and digest lookup functions are used in many parts of the library. If the table is not initialized, several functions will misbehave and complain several functions cannot find algorithms. This includes the PEM, PKCS#12, SSL and S/MIME libraries. This is a common query in the OpenSSL mailing lists."
0,0,i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2,,,null,i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2.,"i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2. The length of the resulting ASN1 representation is returned. If i2d_SSL_SESSION_APIParam_2 is the NULL pointer, only the length is calculated and returned."
0,0,This flag will prevent sessions being stored in the internal cache,,,null,This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session_APIName ).,"Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse. Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX. This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session_APIName ). Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (ie for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well."
0,0,BN_to_montgomery_APIName is a macro,,,null,BN_to_montgomery_APIName is a macro.,BN_to_montgomery_APIName is a macro.
0,0,The ssl session has reference counts from two users,,,null,"The ssl session has reference counts from two users : the SSL object ,  .","The ssl session has reference counts from two users: the SSL object, for which the reference count is removed by SSL_free_APIName and the internal session cache. If the session is considered bad, because SSL_shutdown_APIName was not called for the connection and SSL_set_shutdown_APIName was not used to set the SSL_SENT_SHUTDOWN state, the session will also be removed from the session cache as required by RFC2246."
0,0,"For all functions , BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_set_APIParam_3 is a previously allocated BN_MONT_CTX_set_APIParam_3 used for temporary variables",,,null,"For all functions, BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_set_APIParam_3 is a previously allocated BN_MONT_CTX_set_APIParam_3 used for temporary variables.","For all functions, BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_set_APIParam_3 is a previously allocated BN_MONT_CTX_set_APIParam_3 used for temporary variables."
0,0,SSL_CTX_set_options_APIName adds the options set via bitmask in SSL_CTX_set_options_APIParam_2 to SSL_CTX_set_options_APIParam_1,,,null,SSL_CTX_set_options_APIName adds the options set via bitmask in SSL_CTX_set_options_APIParam_2 to SSL_CTX_set_options_APIParam_1.,SSL_CTX_set_options_APIName adds the options set via bitmask in SSL_CTX_set_options_APIParam_2 to SSL_CTX_set_options_APIParam_1. Options already set before are not cleared!
0,0,BN_div_recp_APIName divides BN_div_recp_APIParam_3 by BN_RECP_CTX_set_APIParam_2 using BN_div_recp_APIParam_4,,,null,BN_div_recp_APIName divides BN_div_recp_APIParam_3 by BN_RECP_CTX_set_APIParam_2 using BN_div_recp_APIParam_4.,BN_div_recp_APIName divides BN_div_recp_APIParam_3 by BN_RECP_CTX_set_APIParam_2 using BN_div_recp_APIParam_4. It places the quotient in BN_div_recp_APIParam_1 and the remainder in BN_div_recp_APIParam_2.
0,0,It places the quotient in BN_div_recp_APIParam_1 and the remainder in BN_div_recp_APIParam_2,,,null,It places the quotient in BN_div_recp_APIParam_1 and the remainder in BN_div_recp_APIParam_2.,BN_div_recp_APIName divides BN_div_recp_APIParam_3 by BN_RECP_CTX_set_APIParam_2 using BN_div_recp_APIParam_4. It places the quotient in BN_div_recp_APIParam_1 and the remainder in BN_div_recp_APIParam_2.
0,0,This behaviour violates the TLS standard,,,null,This behaviour violates the TLS standard.,"When setting the ""quiet shutdown"" flag to 1, SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN. ( SSL_shutdown_APIName then behaves like SSL_set_shutdown_APIName called with SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.) The session is thus considered to be shutdown, but no ""close notify"" alert is sent to the peer. This behaviour violates the TLS standard."
0,0,CRYPTO_lock_APIName is used to lock and unlock the locks,,,null,CRYPTO_lock_APIName is used to lock and unlock the locks.,"CRYPTO_lock_APIName is used to lock and unlock the locks. mode is a bitfield describing what should be done with the lock. n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName. mode can be combined from 1,2,4,8. These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):"
0,0,"BN_pseudo_rand_APIName does the same , but pseudo-random numbers generated by this function are not necessarily unpredictable",,,null,"BN_pseudo_rand_APIName does the same, but pseudo-random numbers generated by this function are not necessarily unpredictable.","BN_pseudo_rand_APIName does the same, but pseudo-random numbers generated by this function are not necessarily unpredictable. pseudo-random numbers generated by this function can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc."
0,0,"BN_zero_APIName , BN_one_APIName and BN_set_word_APIName set BN_zero_APIParam_1 BN_one_APIParam_1 BN_set_word_APIParam_1 BN_zero_APIParam_1 BN_one_APIParam_1 to the values 0 , 1 and BN_set_word_APIParam_2 respectively",,,null,"BN_zero_APIName, BN_one_APIName and BN_set_word_APIName set BN_zero_APIParam_1 BN_one_APIParam_1 BN_set_word_APIParam_1 BN_zero_APIParam_1 BN_one_APIParam_1 to the values 0, 1 and BN_set_word_APIParam_2 respectively.","BN_zero_APIName, BN_one_APIName and BN_set_word_APIName set BN_zero_APIParam_1 BN_one_APIParam_1 BN_set_word_APIParam_1 BN_zero_APIParam_1 BN_one_APIParam_1 to the values 0, 1 and BN_set_word_APIParam_2 respectively. BN_zero_APIName and BN_one_APIName are macros."
0,0,The details of the ciphers obtained by SSL_get_ciphers_APIName can be obtained using the SSL_CIPHER_get_name_APIName family of functions,,,null,The details of the ciphers obtained by SSL_get_ciphers_APIName can be obtained using the SSL_CIPHER_get_name_APIName family of functions.,The details of the ciphers obtained by SSL_get_ciphers_APIName can be obtained using the SSL_CIPHER_get_name_APIName family of functions.
0,0,"Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER , sessions negotiated in an SSL/TLS handshake may be cached for possible reuse",,,null,"Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse.","Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse. Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX. This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session_APIName ). Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (ie for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well."
0,0,"Also , user-defined random data can be passed down to the underlying method through calls to UI_add_user_data",,,null,"Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data.","The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName, then add information to it with the UI_add or UI_dup functions. Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data. The default UI method doesn't care about these data, but other methods might. Finally, use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt."
0,0,"The default UI method does n't care about these data , but other methods might",,,null,"The default UI method doesn't care about these data, but other methods might.","The first thing to do is to create a UI with UI_new_APIName or UI_new_method_APIName, then add information to it with the UI_add or UI_dup functions. Also, user-defined random data can be passed down to the underlying method through calls to UI_add_user_data. The default UI method doesn't care about these data, but other methods might. Finally, use UI_process_APIName to actually perform the prompting and UI_get0_result_APIName to find the result to the prompt."
0,0,"ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 , and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2",,,null,"ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2.","ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
0,0,ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters ,1,,null,ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary.,"ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
0,0,ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that truncates the string ,1,,if necessary,ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary.,"ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
0,0,SSL_free_APIName decrements the reference count of SSL_free_APIParam_1,1,,null,"SSL_free_APIName decrements the reference count of SSL_free_APIParam_1, and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory if the reference count has reached 0.","SSL_free_APIName decrements the reference count of SSL_free_APIParam_1, and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory if the reference count has reached 0."
0,0,SSL_free_APIName and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory ,1,,if the reference count has reached 0.,"SSL_free_APIName decrements the reference count of SSL_free_APIParam_1, and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory if the reference count has reached 0.","SSL_free_APIName decrements the reference count of SSL_free_APIParam_1, and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory if the reference count has reached 0."
0,0,"Depending on the settings, the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache",,,null,"Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,SSL_set_tmp_rsa_APIName sets the key only for SSL_set_tmp_rsa_APIParam_1,,,null,SSL_set_tmp_rsa_APIName sets the key only for SSL_set_tmp_rsa_APIParam_1.,SSL_set_tmp_rsa_APIName sets the key only for SSL_set_tmp_rsa_APIParam_1.
0,0,The difference between the two is only conceptual,,,null,The difference between the two is only conceptual.,"UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string. The difference between the two is only conceptual. With the builtin method, there's no technical difference between them. Other methods may make a difference between them, however."
0,0,The following routines mostly operate on an input and output stream of DES_set_key_unchecked_APIParam_1 DES_is_weak_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1 DES_cbc_cksum_APIParam_2 DES_string_to_key_APIParam_2 DES_ecb2_encrypt_APIParam_1 DES_random_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_quad_cksum_APIParam_2 DES_set_key_APIParam_1 DES_set_key_checked_APIParam_1s,,,null,The following routines mostly operate on an input and output stream of DES_set_key_unchecked_APIParam_1 DES_is_weak_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1 DES_cbc_cksum_APIParam_2 DES_string_to_key_APIParam_2 DES_ecb2_encrypt_APIParam_1 DES_random_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_quad_cksum_APIParam_2 DES_set_key_APIParam_1 DES_set_key_checked_APIParam_1s.,The following routines mostly operate on an input and output stream of DES_set_key_unchecked_APIParam_1 DES_is_weak_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1 DES_cbc_cksum_APIParam_2 DES_string_to_key_APIParam_2 DES_ecb2_encrypt_APIParam_1 DES_random_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_quad_cksum_APIParam_2 DES_set_key_APIParam_1 DES_set_key_checked_APIParam_1s.
0,0,the automatic flushing may be disabled and SSL_CTX_flush_sessions_APIName can be called explicitly by the application,,,null," , the automatic flushing may be disabled and SSL_CTX_flush_sessions_APIName can be called explicitly by the application .","Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions_APIName function. Since this may lead to a delay which cannot be controlled, the automatic flushing may be disabled and SSL_CTX_flush_sessions_APIName can be called explicitly by the application."
0,0,A server will only understand TLSv1 client hello messages,,,null,A server will only understand TLSv1 client hello messages.,A TLS/SSL connection established with these methods will only understand the TLSv1 protocol. A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1. A server will only understand TLSv1 client hello messages.
0,0,A TLS/SSL connection established with these methods will only understand the TLSv1 protocol,,,null,A TLS/SSL connection established with these methods will only understand the TLSv1 protocol.,A TLS/SSL connection established with these methods will only understand the TLSv1 protocol. A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1. A server will only understand TLSv1 client hello messages.
0,0,The alert is sent as a special message and does not influence the normal data stream,,,null,The alert is sent as a special message and does not influence the normal data stream (unless its contents results in the communication being canceled).,"When one side of an SSL/TLS communication wants to inform the peer about a special situation, it sends an alert. The alert is sent as a special message and does not influence the normal data stream (unless its contents results in the communication being canceled)."
0,0,"The session is thus considered to be shutdown , but no `` close notify '' alert is sent to the peer",,,null,"The session is thus considered to be shutdown, but no ""close notify"" alert is sent to the peer.","When setting the ""quiet shutdown"" flag to 1, SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN. ( SSL_shutdown_APIName then behaves like SSL_set_shutdown_APIName called with SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.) The session is thus considered to be shutdown, but no ""close notify"" alert is sent to the peer. This behaviour violates the TLS standard."
0,0,SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2,,,null,SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2.,SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2.
0,0,bn_mul_add_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2,,,null,"bn_mul_add_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3, mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2.","bn_mul_add_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3, mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 * mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3 + bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry)."
0,0,"The server , through the callback function , either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket",,,null,"The server, through the callback function, either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket.","In order to reuse a session, a TLS client must send the a session ticket extension to the server. The client can only send exactly one session ticket. The server, through the callback function, either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket."
0,0,"pseudo-random numbers generated by this function can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols , but usually not for key generation etc",,,null,"pseudo-random numbers generated by this function can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc.","BN_pseudo_rand_APIName does the same, but pseudo-random numbers generated by this function are not necessarily unpredictable. pseudo-random numbers generated by this function can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc."
0,0,"bn_sub_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 , bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1",,,null,"bn_sub_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1.","bn_sub_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 - bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the carry (1 if bn_sub_words_APIParam_3 bn_add_words_APIParam_3 > bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, 0 otherwise)."
0,0,SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN,,,When setting the `` quiet shutdown '' flag to 1,"When setting the ""quiet shutdown"" flag to 1, SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.","When setting the ""quiet shutdown"" flag to 1, SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN. ( SSL_shutdown_APIName then behaves like SSL_set_shutdown_APIName called with SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.) The session is thus considered to be shutdown, but no ""close notify"" alert is sent to the peer. This behaviour violates the TLS standard."
0,0,"SSL_CTX_set_default_read_ahead is a synonym for SSL_CTX_set_read_ahead , and SSL_CTX_get_default_read_ahead is a synonym for SSL_CTX_get_read_ahead",,,null,"SSL_CTX_set_default_read_ahead is a synonym for SSL_CTX_set_read_ahead, and SSL_CTX_get_default_read_ahead is a synonym for SSL_CTX_get_read_ahead.","SSL_CTX_set_default_read_ahead is a synonym for SSL_CTX_set_read_ahead, and SSL_CTX_get_default_read_ahead is a synonym for SSL_CTX_get_read_ahead."
0,0,These failures may also appear delayed,1,,null,"These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,Suitable input comes from user interaction and certain hardware events,,,null,"Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events.","RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state. Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable. Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events. The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes. Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750."
0,0,Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation,,,null,Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation:,Versions prior to 0.9.3 have identifiers < 0x0930. Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation:
0,0,RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state,,,null,RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state.,"RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state. Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable. Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events. The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes. Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750."
0,0,BIO_read_APIName and BIO_write_APIName read or write the underlying descriptor,,,null,BIO_read_APIName and BIO_write_APIName read or write the underlying descriptor.,BIO_read_APIName and BIO_write_APIName read or write the underlying descriptor. BIO_puts_APIName is supported but BIO_gets_APIName is not.
0,0,This indicates an unknown protocol version,,,null,This indicates an unknown protocol version.,This indicates an unknown protocol version.
0,0,"BN_is_zero_APIName , BN_is_one_APIName and BN_is_word_APIName test if BN_is_zero_APIParam_1 BN_is_one_APIParam_1 BN_is_word_APIParam_1 BN_is_odd_APIParam_1 equals 0 , 1 , or BN_is_word_APIParam_2 respectively",1,,null,"BN_is_zero_APIName, BN_is_one_APIName and BN_is_word_APIName test if BN_is_zero_APIParam_1 BN_is_one_APIParam_1 BN_is_word_APIParam_1 BN_is_odd_APIParam_1 equals 0, 1, or BN_is_word_APIParam_2 respectively.","BN_is_zero_APIName, BN_is_one_APIName and BN_is_word_APIName test if BN_is_zero_APIParam_1 BN_is_one_APIParam_1 BN_is_word_APIParam_1 BN_is_odd_APIParam_1 equals 0, 1, or BN_is_word_APIParam_2 respectively. BN_is_odd_APIName tests if a is odd."
0,0,The SSL _ class of functions only loads certificates and keys into a specific SSL object,,,null,The SSL_* class of functions only loads certificates and keys into a specific SSL object.,"The SSL_* class of functions only loads certificates and keys into a specific SSL object. The specific information is kept, when SSL_clear_APIName is called for this SSL object."
0,0,BN_gcd_APIName computes the greatest common divisor of BN_gcd_APIParam_2 and BN_gcd_APIParam_3 and places the result in BN_gcd_APIParam_1,,,null,BN_gcd_APIName computes the greatest common divisor of BN_gcd_APIParam_2 and BN_gcd_APIParam_3 and places the result in BN_gcd_APIParam_1.,BN_gcd_APIName computes the greatest common divisor of BN_gcd_APIParam_2 and BN_gcd_APIParam_3 and places the result in BN_gcd_APIParam_1. BN_gcd_APIParam_1 may be the same BN_gcd_APIParam_1 as BN_gcd_APIParam_2 or BN_gcd_APIParam_3.
0,0,SSL_CTX_set_mode_APIName adds the mode set via bitmask in SSL_CTX_set_mode_APIParam_2 to SSL_CTX_set_mode_APIParam_1,,,null,SSL_CTX_set_mode_APIName adds the mode set via bitmask in SSL_CTX_set_mode_APIParam_2 to SSL_CTX_set_mode_APIParam_1.,SSL_CTX_set_mode_APIName adds the mode set via bitmask in SSL_CTX_set_mode_APIParam_2 to SSL_CTX_set_mode_APIParam_1. Options already set before are not cleared.
0,0,"EVP_PKEY_sign_APIName does not hash the data to be signed , and is normally used to sign digests",,,null,"EVP_PKEY_sign_APIName does not hash the data to be signed, and therefore is normally used to sign digests.","EVP_PKEY_sign_APIName does not hash the data to be signed, and therefore is normally used to sign digests. For signing arbitrary messages, see the EVP_DigestSignInit_APIName and EVP_SignInit_APIName signing interfaces instead."
0,0,a random prime number is called as described in BN_generate_prime_APIName,,,While a random prime number is generated,"While a random prime number is generated, a random prime number is called as described in BN_generate_prime_APIName .","While a random prime number is generated, a random prime number is called as described in BN_generate_prime_APIName ."
0,0,bn_mul_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2,,,null,"bn_mul_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3, mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2.","bn_mul_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3, mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 * mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry)."
0,0,Data is only written to the next BIO in the chain,,,when the write buffer fills or when BIO_flush_APIName is called.,Data is only written to the next BIO in the chain when the write buffer fills or when BIO_flush_APIName is called.,Data is only written to the next BIO in the chain when the write buffer fills or when BIO_flush_APIName is called. It is therefore important to call BIO_flush_APIName whenever any pending data should be written such as when removing a buffering BIO using BIO_pop_APIName. BIO_flush_APIName may need to be retried if the ultimate source/sink BIO is non blocking.
0,0,This can be done by calling BIO_pending_APIName on the other half of the pair and reading it and sending it to the underlying transport.,1,,if any data is pending,"This can be done by calling BIO_pending_APIName on the other half of the pair and, if any data is pending, reading it and sending it to the underlying transport.","When used in bidirectional applications (such as TLS/SSL) care should be taken to flush any data in the write buffer. This can be done by calling BIO_pending_APIName on the other half of the pair and, if any data is pending, reading it and sending it to the underlying transport. This must be done before any normal processing (such as calling select_APIName ) due to a request and BIO_should_read_APIName being true."
0,0,BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0,1,,null,"BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0, and if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName, also the structure itself.","BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0, and if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName, also the structure itself. If BN_CTX_start_APIName has been used on the BN_CTX_new_APIParam_0, BN_CTX_end_APIName must be called before the BN_CTX_new_APIParam_0 may be freed by BN_CTX_free_APIName."
0,0,BN_CTX_free_APIName frees the structure itself.,1,,if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName,"BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0, and if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName, also the structure itself.","BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0, and if BN_CTX_new_APIParam_0 was created by BN_CTX_new_APIName, also the structure itself. If BN_CTX_start_APIName has been used on the BN_CTX_new_APIParam_0, BN_CTX_end_APIName must be called before the BN_CTX_new_APIParam_0 may be freed by BN_CTX_free_APIName."
0,0,the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3,,,"If EVP_DigestSignFinal_APIParam_2 is not NULL , before the call the EVP_DigestSignFinal_APIParam_3 parameter should contain the length of the EVP_DigestSignFinal_APIParam_2 buffer , if the call is successful","If EVP_DigestSignFinal_APIParam_2 is not NULL ,then before the call the EVP_DigestSignFinal_APIParam_3 parameter should contain the length of the EVP_DigestSignFinal_APIParam_2 buffer, if the call is successful ,the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3.","EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2. If EVP_DigestSignFinal_APIParam_2 is NULL, then the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter. If EVP_DigestSignFinal_APIParam_2 is not NULL ,then before the call the EVP_DigestSignFinal_APIParam_3 parameter should contain the length of the EVP_DigestSignFinal_APIParam_2 buffer, if the call is successful ,the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3."
0,0,"Thus , , this increases the uncertainty about the state and makes the PRNG output less predictable",,,if the data at RAND_add_APIParam_1 are unpredictable to an adversary,"Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable.","RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state. Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable. Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events. The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes. Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750."
0,0,The derive_init_APIName and derive_APIName methods are called by EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName,,,null,The derive_init_APIName and derive_APIName methods are called by EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName .,"The derive_init_APIName and derive_APIName methods are used to derive the shared secret from a public key algorithm (for instance, the DH algorithm). The derive_init_APIName and derive_APIName methods are called by EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName ."
0,0,In addition EC_POINTs can be converted to and from various external representations,,,null,In addition EC_POINTs can be converted to and from various external representations.,"In addition EC_POINTs can be converted to and from various external representations. Supported representations are octet strings, BIGNUMs and hexadecimal. Octet strings are stored in a buffer along with an associated buffer length. A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer. Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f)."
0,0,The decrypt_init_APIName and decrypt_APIName methods are called by EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName,,,null,The decrypt_init_APIName and decrypt_APIName methods are called by EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName .,The decrypt_init_APIName and decrypt_APIName methods are used to decrypt a piece of data. The decrypt_init_APIName and decrypt_APIName methods are called by EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName .
0,0,The decrypt_init_APIName and decrypt_APIName methods are used to decrypt a piece of data,,,null,The decrypt_init_APIName and decrypt_APIName methods are used to decrypt a piece of data.,The decrypt_init_APIName and decrypt_APIName methods are used to decrypt a piece of data. The decrypt_init_APIName and decrypt_APIName methods are called by EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName .
0,0,CMS_add0_crl_APIName and CMS_add1_crl_APIName add CRL CMS_add0_crl_APIParam_2 CMS_add1_crl_APIParam_2 to CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1,,,null,CMS_add0_crl_APIName and CMS_add1_crl_APIName add CRL CMS_add0_crl_APIParam_2 CMS_add1_crl_APIParam_2 to CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1.,CMS_add0_crl_APIName and CMS_add1_crl_APIName add CRL CMS_add0_crl_APIParam_2 CMS_add1_crl_APIParam_2 to CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1. CMS_get1_crls_APIName returns any CRLs in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1.
0,0,Octet strings are stored in a buffer along with an associated buffer length,,,null,Octet strings are stored in a buffer along with an associated buffer length.,"In addition EC_POINTs can be converted to and from various external representations. Supported representations are octet strings, BIGNUMs and hexadecimal. Octet strings are stored in a buffer along with an associated buffer length. A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer. Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f)."
0,0,A callback function may be used to provide feedback about the progress of the key generation,,,null,A callback function may be used to provide feedback about the progress of the key generation.,"A callback function may be used to provide feedback about the progress of the key generation. If DSA_generate_parameters_APIParam_0 is not NULL, DSA_generate_parameters_APIParam_0 will be called as shown below. For information on the BN_GENCB structure and the BN_GENCB_call function discussed below, refer to BN_generate_prime_APIName ."
0,0,SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName set automatic curve selection for server SSL_CTX_set_ecdh_auto_APIParam_1 or SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1 to SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2,,,null,SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName set automatic curve selection for server SSL_CTX_set_ecdh_auto_APIParam_1 or SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1 to SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2.,"SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName set automatic curve selection for server SSL_CTX_set_ecdh_auto_APIParam_1 or SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1 to SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2. If SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2 is 1, then the highest preference curve is automatically used for ECDH temporary keys used during key exchange."
0,0,The derive_init_APIName and derive_APIName methods are used to derive the shared secret from a public key algorithm,,,null,"The derive_init_APIName and derive_APIName methods are used to derive the shared secret from a public key algorithm (for instance, the DH algorithm).","The derive_init_APIName and derive_APIName methods are used to derive the shared secret from a public key algorithm (for instance, the DH algorithm). The derive_init_APIName and derive_APIName methods are called by EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName ."
0,0,"For information on the BN_GENCB structure and the BN_GENCB_call function discussed below , refer to BN_generate_prime_APIName",,,null,"For information on the BN_GENCB structure and the BN_GENCB_call function discussed below, refer to BN_generate_prime_APIName .","A callback function may be used to provide feedback about the progress of the key generation. If DSA_generate_parameters_APIParam_0 is not NULL, DSA_generate_parameters_APIParam_0 will be called as shown below. For information on the BN_GENCB structure and the BN_GENCB_call function discussed below, refer to BN_generate_prime_APIName ."
0,0,BN_MONT_CTX_copy_APIName copies the BN_MONT_CTX_copy_APIParam_1 BN_MONT_CTX_copy_APIParam_2 to BN_MONT_CTX_copy_APIParam_1,,,null,BN_MONT_CTX_copy_APIName copies the BN_MONT_CTX_copy_APIParam_1 BN_MONT_CTX_copy_APIParam_2 to BN_MONT_CTX_copy_APIParam_1.,BN_MONT_CTX_copy_APIName copies the BN_MONT_CTX_copy_APIParam_1 BN_MONT_CTX_copy_APIParam_2 to BN_MONT_CTX_copy_APIParam_1.
0,0,SSL_set_mode_APIName adds the mode set via bitmask in SSL_set_mode_APIParam_2 to SSL_set_mode_APIParam_1,,,null,SSL_set_mode_APIName adds the mode set via bitmask in SSL_set_mode_APIParam_2 to SSL_set_mode_APIParam_1.,SSL_set_mode_APIName adds the mode set via bitmask in SSL_set_mode_APIParam_2 to SSL_set_mode_APIParam_1. Options already set before are not cleared.
0,0,SSL_write_APIName will only report success once the complete chunk was written.,1,,When not set,"When not set (the default), SSL_write_APIName will only report success once the complete chunk was written.","Allow SSL_write(..., n) to return r with 0 < r < n (ie report success when just a single record has been written). When not set (the default), SSL_write_APIName will only report success once the complete chunk was written. Once SSL_write_APIName returns with r, r bytes have been successfully written and the next call to SSL_write_APIName must only send the n-r bytes left, imitating the behaviour of write_APIName."
0,0,This will replace the DH_METHOD used by the DH key,1,,null,"This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change.","DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1. This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DH keys that only work with certain DH_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results."
0,0,the handle to that ENGINE will be released during the change.,1,,if the previous method was supplied by an ENGINE,"This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change.","DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1. This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DH keys that only work with certain DH_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results."
0,0,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3,,,null,X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3.,"X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3. X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3 should initially be set to -1. If there are no more entries, -1 is returned. If X509_NAME_get_index_by_NID_APIParam_2 is invalid (doesn't correspond to a valid OID) ,then -2 is returned."
0,0,it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively,,,If only one private key is handled,"If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively.","When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored."
0,0,"In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 , SSL_get_error_APIName inspects the current thread 's OpenSSL error queue",,,null,"In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2, SSL_get_error_APIName inspects the current thread's OpenSSL error queue.","In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2, SSL_get_error_APIName inspects the current thread's OpenSSL error queue. Thus, SSL_get_error_APIName must be used in the same thread that performed the TLS/SSL I/O operation, and no other OpenSSL function calls should appear in between. The current thread's error queue must be empty before the TLS/SSL I/O operation is attempted, or SSL_get_error_APIName will not work reliably."
0,0,EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1,,,null,EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1.,"EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
0,0,A point held in a BIGNUM is calculated by converting the point to an octet string and converting that octet string into a BIGNUM integer,,,null,A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer.,"In addition EC_POINTs can be converted to and from various external representations. Supported representations are octet strings, BIGNUMs and hexadecimal. Octet strings are stored in a buffer along with an associated buffer length. A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer. Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f)."
0,0,the actual key is newly generated,,,during the negotiation,"DH parameters can be reused, as the actual key is newly generated during the negotiation.","As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
0,0,Multiple lines are used,,,if the output exceeds 80 characters,Multiple lines are used if the output (including indent) exceeds 80 characters.,X509_NAME_print_APIName prints out X509_NAME_print_APIParam_2 to X509_NAME_print_APIParam_1 indenting each line by X509_NAME_print_APIParam_3 characters. Multiple lines are used if the output (including indent) exceeds 80 characters.
0,0,"DH parameters can be reused, as the actual key is newly generated during the negotiation.",1,,null,"DH parameters can be reused, as the actual key is newly generated during the negotiation.","As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
0,0,the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively,,,null,Then the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively.,Then the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively. SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection. SSL_shutdown_APIName can be used to shut down the TLS/SSL connection.
0,0,The encrypt_init_APIName and encrypt_APIName methods are called by EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName,,,null,The encrypt_init_APIName and encrypt_APIName methods are called by EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName .,The encrypt_init_APIName and encrypt_APIName methods are used to encrypt a piece of data. The encrypt_init_APIName and encrypt_APIName methods are called by EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName .
0,0,SSL_set_tmp_rsa_callback_APIName sets the callback only for SSL_set_tmp_rsa_APIParam_1 SSL_need_tmp_rsa_APIParam_1,,,null,SSL_set_tmp_rsa_callback_APIName sets the callback only for SSL_set_tmp_rsa_APIParam_1 SSL_need_tmp_rsa_APIParam_1.,SSL_set_tmp_rsa_callback_APIName sets the callback only for SSL_set_tmp_rsa_APIParam_1 SSL_need_tmp_rsa_APIParam_1.
0,0,EC_GROUP_copy copies the curve EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 into EC_GROUP_copy_APIParam_1,,,null,EC_GROUP_copy copies the curve EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 into EC_GROUP_copy_APIParam_1.,EC_GROUP_copy copies the curve EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 into EC_GROUP_copy_APIParam_1. Both EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 and EC_GROUP_copy_APIParam_1 must use the same EC_METHOD.
0,0,The encrypt_init_APIName and encrypt_APIName methods are used to encrypt a piece of data,,,null,The encrypt_init_APIName and encrypt_APIName methods are used to encrypt a piece of data.,The encrypt_init_APIName and encrypt_APIName methods are used to encrypt a piece of data. The encrypt_init_APIName and encrypt_APIName methods are called by EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName .
0,0,SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection,,,null,SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection.,Then the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively. SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection. SSL_shutdown_APIName can be used to shut down the TLS/SSL connection.
0,0,CMS_RecipientInfo_decrypt_APIName attempts to decrypt CMS_RecipientInfo structure CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_decrypt_APIParam_1,,,null,CMS_RecipientInfo_decrypt_APIName attempts to decrypt CMS_RecipientInfo structure CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_decrypt_APIParam_1.,CMS_RecipientInfo_decrypt_APIName attempts to decrypt CMS_RecipientInfo structure CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_decrypt_APIParam_1. A key must have been associated with the structure first.
0,0,it can be processed,1,,Only when a record has been completely received,"Only when a record has been completely received, it can be processed (decryption and check of integrity).","SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,the equivalent is EVP_PKEY_base_id,,,null,this is no longer possible : the equivalent is EVP_PKEY_base_id .,Previous versions of this document suggested using EVP_PKEY_type(pkey->type) to determine the type of a key. Since EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_set1_engine_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_get0_hmac_APIParam_1 EVP_PKEY_get0_poly1305_APIParam_1 EVP_PKEY_get0_engine_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 EVP_PKEY_get0_RSA_APIParam_1 EVP_PKEY_get0_EC_KEY_APIParam_1 EVP_PKEY_set1_RSA_APIParam_1 EVP_PKEY_id_APIParam_1 EVP_PKEY_set1_DH_APIParam_1 EVP_PKEY_set1_EC_KEY_APIParam_1 EVP_PKEY_get0_siphash_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get0_DSA_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_set_alias_type_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 EVP_PKEY_base_id_APIParam_1 EVP_PKEY_set1_DSA_APIParam_1 EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_get0_DH_APIParam_1 is now opaque this is no longer possible: the equivalent is EVP_PKEY_base_id(pkey).
0,0,"ERR_GET_LIB_APIName , ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName are macros",,,null,"ERR_GET_LIB_APIName, ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName are macros.","ERR_GET_LIB_APIName, ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName are macros."
0,0,SSL_shutdown_APIName can be used to shut down the TLS/SSL connection,,,null,SSL_shutdown_APIName can be used to shut down the TLS/SSL connection.,Then the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively. SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection. SSL_shutdown_APIName can be used to shut down the TLS/SSL connection.
0,0,the functions,,,null,For example the functions:,Some of the newer functions follow a naming convention using the numbers 0 and 1. For example the functions:
0,0,OPENSSL_VERSION_TEXT is the text variant of the version number and the release date,,,null,OPENSSL_VERSION_TEXT is the text variant of the version number and the release date.,"OPENSSL_VERSION_TEXT is the text variant of the version number and the release date. For example, ""OpenSSL 1.0.1a 15 Oct 2015""."
0,0,synchronization with the internal session cache is realized via callback functions,,,null," , synchronization with the internal session cache is realized via callback functions .","In order to allow external session caching, synchronization with the internal session cache is realized via callback functions. Inside these callback functions, session can be saved to disk or put into a database using the d2i_SSL_SESSION_APIName interface."
0,0,"Inside these callback functions , session can be saved to disk or put into a database using the d2i_SSL_SESSION_APIName interface",,,null,"Inside these callback functions, session can be saved to disk or put into a database using the d2i_SSL_SESSION_APIName interface.","In order to allow external session caching, synchronization with the internal session cache is realized via callback functions. Inside these callback functions, session can be saved to disk or put into a database using the d2i_SSL_SESSION_APIName interface."
0,0,The certificate used depends on the cipher selected,,,null,"The certificate used depends on the cipher selected, see also SSL_CTX_set_cipher_list_APIName .","The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time. The certificate used depends on the cipher selected, see also SSL_CTX_set_cipher_list_APIName ."
0,0,An inappropriate message was received,,,null,An inappropriate message was received.,An inappropriate message was received. This alert is always fatal and should never be observed in communication between proper implementations.
0,0,MD2_Init_APIName initializes a MD2_Init_APIParam_1 structure,,,null,MD2_Init_APIName initializes a MD2_Init_APIParam_1 structure.,MD2_Init_APIName initializes a MD2_Init_APIParam_1 structure.
0,0,i2d_ECPKParameters_APIParam_2 is not incremented and it points to the start of the data just written,,,null,In this case i2d_ECPKParameters_APIParam_2 is not incremented and it points to the start of the data just written.,"If i2d_ECPKParameters_APIParam_2 is NULL ,memory will be allocated for a buffer and the encoded data written to it. In this case i2d_ECPKParameters_APIParam_2 is not incremented and it points to the start of the data just written."
0,0,it is possible to obtain state information from the SSL/TLS engine,,,When setting up a connection and during use,"When setting up a connection and during use, it is possible to obtain state information from the SSL/TLS engine.","When setting up a connection and during use, it is possible to obtain state information from the SSL/TLS engine. When set, an information callback function is called whenever the state changes, an alert appears, or an error occurs."
0,0,The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time,,,null,The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time.,"The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time. The certificate used depends on the cipher selected, see also SSL_CTX_set_cipher_list_APIName ."
0,0,BIO_puts_APIName attempts to write a null terminated string BIO_puts_APIParam_2 to BIO BIO_puts_APIParam_1,,,null,BIO_puts_APIName attempts to write a null terminated string BIO_puts_APIParam_2 to BIO BIO_puts_APIParam_1.,BIO_puts_APIName attempts to write a null terminated string BIO_puts_APIParam_2 to BIO BIO_puts_APIParam_1.
0,0,BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call,,,null,BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call: that is it creates a new accept BIO with port BIO_new_accept_APIParam_1.,BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call: that is it creates a new accept BIO with port BIO_new_accept_APIParam_1.
0,0,BN_rand_range_APIName generates a cryptographically strong pseudo-random number BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 in the range 0 < = BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 < BN_rand_range_APIParam_2 BN_pseudo_rand_range_APIParam_2,,,null,BN_rand_range_APIName generates a cryptographically strong pseudo-random number BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 in the range 0 <= BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 < BN_rand_range_APIParam_2 BN_pseudo_rand_range_APIParam_2.,"BN_rand_range_APIName generates a cryptographically strong pseudo-random number BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 in the range 0 <= BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 < BN_rand_range_APIParam_2 BN_pseudo_rand_range_APIParam_2. BN_pseudo_rand_range_APIName does the same, but is based on BN_pseudo_rand_APIName, and hence numbers generated by BN_pseudo_rand_range_APIName are not necessarily unpredictable."
0,0,"BN_pseudo_rand_range_APIName does the same , but is based on BN_pseudo_rand_APIName , and hence numbers generated by BN_pseudo_rand_range_APIName are not necessarily unpredictable",,,null,"BN_pseudo_rand_range_APIName does the same, but is based on BN_pseudo_rand_APIName, and hence numbers generated by BN_pseudo_rand_range_APIName are not necessarily unpredictable.","BN_rand_range_APIName generates a cryptographically strong pseudo-random number BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 in the range 0 <= BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 < BN_rand_range_APIParam_2 BN_pseudo_rand_range_APIParam_2. BN_pseudo_rand_range_APIName does the same, but is based on BN_pseudo_rand_APIName, and hence numbers generated by BN_pseudo_rand_range_APIName are not necessarily unpredictable."
0,0,BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime,1,,null,BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime.,"BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime. The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite; if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests, it is considered prime."
0,0,MDC2_APIName computes the MDC2 message digest of the MDC2_APIParam_2 bytes at MDC2_APIParam_1 and places it in MDC2_Final_APIParam_1,,,null,MDC2_APIName computes the MDC2 message digest of the MDC2_APIParam_2 bytes at MDC2_APIParam_1 and places it in MDC2_Final_APIParam_1 (which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output).,"MDC2_APIName computes the MDC2 message digest of the MDC2_APIParam_2 bytes at MDC2_APIParam_1 and places it in MDC2_Final_APIParam_1 (which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output). If MDC2_Final_APIParam_1 is NULL, the digest is placed in a static array."
0,0,Some of the newer functions follow a naming convention using the numbers 0 and 1,,,null,Some of the newer functions follow a naming convention using the numbers 0 and 1.,Some of the newer functions follow a naming convention using the numbers 0 and 1. For example the functions:
0,0,SSL_read_APIName will trigger the processing of the next record,,,If no more bytes are in the buffer,"If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record.","SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,RIPEMD160_APIName computes the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes at RIPEMD160_APIParam_1 and places the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes in RIPEMD160_Final_APIParam_1,,,null,RIPEMD160_APIName computes the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes at RIPEMD160_APIParam_1 and places the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes in RIPEMD160_Final_APIParam_1 (which must have space for RIPEMD160_DIGEST_LENGTH == 20 bytes of output).,"RIPEMD160_APIName computes the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes at RIPEMD160_APIParam_1 and places the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes in RIPEMD160_Final_APIParam_1 (which must have space for RIPEMD160_DIGEST_LENGTH == 20 bytes of output). If RIPEMD160_Final_APIParam_1 is NULL, the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes is placed in a static array."
0,0,The ctrl_APIName and ctrl_str_APIName methods are used to adjust algorithm-specific settings,,,null,The ctrl_APIName and ctrl_str_APIName methods are used to adjust algorithm-specific settings.,The ctrl_APIName and ctrl_str_APIName methods are used to adjust algorithm-specific settings. See EVP_PKEY_CTX_ctrl_APIName and related functions for detail.
0,0,"BN_mpi2bn_APIName converts the BN_mpi2bn_APIParam_2 bytes long representation at BN_mpi2bn_APIParam_1 to a BN_mpi2bn_APIParam_3 and stores it at BN_mpi2bn_APIParam_3 , or in a newly allocated BN_mpi2bn_APIParam_3",,,if BN_mpi2bn_APIParam_3 is NULL,"BN_mpi2bn_APIName converts the BN_mpi2bn_APIParam_2 bytes long representation at BN_mpi2bn_APIParam_1 to a BN_mpi2bn_APIParam_3 and stores it at BN_mpi2bn_APIParam_3, or in a newly allocated BN_mpi2bn_APIParam_3 if BN_mpi2bn_APIParam_3 is NULL.","BN_mpi2bn_APIName converts the BN_mpi2bn_APIParam_2 bytes long representation at BN_mpi2bn_APIParam_1 to a BN_mpi2bn_APIParam_3 and stores it at BN_mpi2bn_APIParam_3, or in a newly allocated BN_mpi2bn_APIParam_3 if BN_mpi2bn_APIParam_3 is NULL."
0,0,The valid codes for SSL_set_verify_result_APIParam_2 are documented in verify_APIName,,,null,The valid codes for SSL_set_verify_result_APIParam_2 are documented in verify_APIName .,The valid codes for SSL_set_verify_result_APIParam_2 are documented in verify_APIName .
0,0,This function first searches through the user-defined method objects and the built-in objects,,,null,This function first searches through the user-defined method objects and then the built-in objects.,EVP_PKEY_meth_find_APIName finds an EVP_PKEY_meth_find_APIParam_0 object with the EVP_PKEY_meth_new_APIParam_1. This function first searches through the user-defined method objects and then the built-in objects.
0,0,The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN,,,null,"The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the ""close notify"" alert but to not wait for the peer's answer, when the underlying connection is closed).","The shutdown state of the connection is used to determine the state of the ssl session. If the session is still open, when SSL_clear_APIName or SSL_free_APIName is called, it is considered bad and removed according to RFC2246. The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the ""close notify"" alert but to not wait for the peer's answer, when the underlying connection is closed). SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer (see SSL_shutdown_APIName )."
0,0,"EVP_EncryptInit_APIName , EVP_DecryptInit_APIName and EVP_CipherInit_APIName behave in a similar way to EVP_EncryptInit_ex_APIName , EVP_DecryptInit_ex and EVP_CipherInit_ex_APIName except the EVP_EncryptInit_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 parameter does not need to be initialized and they always use the default cipher implementation",,,null,"EVP_EncryptInit_APIName, EVP_DecryptInit_APIName and EVP_CipherInit_APIName behave in a similar way to EVP_EncryptInit_ex_APIName, EVP_DecryptInit_ex and EVP_CipherInit_ex_APIName except the EVP_EncryptInit_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 parameter does not need to be initialized and they always use the default cipher implementation.","EVP_EncryptInit_APIName, EVP_DecryptInit_APIName and EVP_CipherInit_APIName behave in a similar way to EVP_EncryptInit_ex_APIName, EVP_DecryptInit_ex and EVP_CipherInit_ex_APIName except the EVP_EncryptInit_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 parameter does not need to be initialized and they always use the default cipher implementation."
0,0,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName set the verification parameters to SSL_CTX_set1_param_APIParam_2 SSL_set1_param_APIParam_2 for SSL_CTX_set1_param_APIParam_1 or SSL_set1_param_APIParam_1,,,null,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName set the verification parameters to SSL_CTX_set1_param_APIParam_2 SSL_set1_param_APIParam_2 for SSL_CTX_set1_param_APIParam_1 or SSL_set1_param_APIParam_1.,SSL_CTX_set1_param_APIName and SSL_set1_param_APIName set the verification parameters to SSL_CTX_set1_param_APIParam_2 SSL_set1_param_APIParam_2 for SSL_CTX_set1_param_APIParam_1 or SSL_set1_param_APIParam_1.
0,0,"EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName , EVP_PKEY_assign_EC_KEY_APIName , EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2",,,null,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 is freed.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 is freed."
0,0,DH_free_APIName frees the DH_free_APIParam_1 structure and its components,,,null,DH_free_APIName frees the DH_free_APIParam_1 structure and its components.,DH_free_APIName frees the DH_free_APIParam_1 structure and its components. The values are erased before the memory is returned to the system.
0,0,The shutdown state of the connection is used to determine the state of the ssl session,,,null,The shutdown state of the connection is used to determine the state of the ssl session.,"The shutdown state of the connection is used to determine the state of the ssl session. If the session is still open, when SSL_clear_APIName or SSL_free_APIName is called, it is considered bad and removed according to RFC2246. The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the ""close notify"" alert but to not wait for the peer's answer, when the underlying connection is closed). SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer (see SSL_shutdown_APIName )."
0,0,SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer,,,null,SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer (see SSL_shutdown_APIName ).,"The shutdown state of the connection is used to determine the state of the ssl session. If the session is still open, when SSL_clear_APIName or SSL_free_APIName is called, it is considered bad and removed according to RFC2246. The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN (according to the TLS RFC, it is acceptable to only send the ""close notify"" alert but to not wait for the peer's answer, when the underlying connection is closed). SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer (see SSL_shutdown_APIName )."
0,0,These functions decode and encode PKCS # 3 DH parameters using the DHparameter structure described in PKCS # 3,,,null,These functions decode and encode PKCS#3 DH parameters using the DHparameter structure described in PKCS#3.,These functions decode and encode PKCS#3 DH parameters using the DHparameter structure described in PKCS#3.
0,0,the SSL_load_client_CA_file_APIName function can be used to help importing the necessary data,,,If the list of acceptable CAs is compiled in a file,"If the list of acceptable CAs is compiled in a file, the SSL_load_client_CA_file_APIName function can be used to help importing the necessary data.","If the list of acceptable CAs is compiled in a file, the SSL_load_client_CA_file_APIName function can be used to help importing the necessary data."
0,0,"SSL_CTX_sess_set_new_cb_APIName sets the callback function, which is automatically called",1,,whenever a new session was negotiated,"SSL_CTX_sess_set_new_cb_APIName sets the callback function, which is automatically called whenever a new session was negotiated.","SSL_CTX_sess_set_new_cb_APIName sets the callback function, which is automatically called whenever a new session was negotiated."
0,0,BIO_set_accept_bios_APIName can be used to set a chain of BIOs which will be duplicated and prepended to the chain,1,,when an incoming connection is received,BIO_set_accept_bios_APIName can be used to set a chain of BIOs which will be duplicated and prepended to the chain when an incoming connection is received.,"BIO_set_accept_bios_APIName can be used to set a chain of BIOs which will be duplicated and prepended to the chain when an incoming connection is received. This is useful if, for example, a buffering or SSL BIO is required for each connection. The chain of BIOs must not be freed after this call, they will be automatically freed when the accept BIO is freed."
0,0,"the session cache , the list of ciphers , the list of Client CAs , the certificates and keys",,,null,"SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items, if applicable: the session cache, the list of ciphers, the list of Client CAs, the certificates and keys.","SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items, if applicable: the session cache, the list of ciphers, the list of Client CAs, the certificates and keys."
0,0,the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server.,,,If the chain only has a length of 2,"If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server.","The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate. If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server. For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate). This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable."
0,0,Calling EC_KEY_free decrements the reference count for the EC_KEY object,1,,null,"Calling EC_KEY_free decrements the reference count for the EC_KEY object, and if the reference count for the EC_KEY object has dropped to zero ,then frees the memory associated with it.","Calling EC_KEY_free decrements the reference count for the EC_KEY object, and if the reference count for the EC_KEY object has dropped to zero ,then frees the memory associated with it."
0,0,Calling EC_KEY_free frees the memory associated with it,1,,if the reference count for the EC_KEY object has dropped to zero,Calling EC_KEY_free decrements the reference count for the EC_KEY object,"Calling EC_KEY_free decrements the reference count for the EC_KEY object, and if the reference count for the EC_KEY object has dropped to zero ,then frees the memory associated with it."
0,0,"The library number , function code and reason code respectively",,,null,"The library number, function code and reason code respectively.","The library number, function code and reason code respectively."
0,0,The verify_init_APIName and verify_APIName methods are called by EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName,,,null,The verify_init_APIName and verify_APIName methods are called by EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName .,The verify_init_APIName and verify_APIName methods are used to verify whether a signature is valid. The verify_init_APIName and verify_APIName methods are called by EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName .
0,0,SSL_set_tmp_dh_APIName sets the parameters only for SSL_set_tmp_dh_APIParam_1,,,null,SSL_set_tmp_dh_APIName sets the parameters only for SSL_set_tmp_dh_APIParam_1.,SSL_set_tmp_dh_APIName sets the parameters only for SSL_set_tmp_dh_APIParam_1.
0,0,ASN1_TIME_print_APIName currently does not print out the time zone,,,null,"ASN1_TIME_print_APIName currently does not print out the time zone: ASN1_TIME_print_APIName either prints out ""GMT"" or nothing.","ASN1_TIME_print_APIName currently does not print out the time zone: ASN1_TIME_print_APIName either prints out ""GMT"" or nothing. But all certificates complying with RFC5280 et al use GMT anyway."
0,0,ASN1_TIME_print_APIName either prints out `` GMT '' or nothing,,,null,"ASN1_TIME_print_APIName currently does not print out the time zone: ASN1_TIME_print_APIName either prints out ""GMT"" or nothing.","ASN1_TIME_print_APIName currently does not print out the time zone: ASN1_TIME_print_APIName either prints out ""GMT"" or nothing. But all certificates complying with RFC5280 et al use GMT anyway."
0,0,The retrieved context can be used in conjunction with the standard cipher routines to set it up,,,null,The retrieved context can be used in conjunction with the standard cipher routines to set it up.,BIO_get_cipher_ctx_APIName is a BIO_ctrl_APIName macro which retrieves the internal BIO cipher context. The retrieved context can be used in conjunction with the standard cipher routines to set it up. This is useful when BIO_set_cipher_APIName is not flexible enough for the applications needs.
0,0,The application data is only maintained for sessions held in memory,,,null,The application data is only maintained for sessions held in memory.,The application data is only maintained for sessions held in memory. The application data is not included when dumping the session with i2d_SSL_SESSION_APIName (and all functions indirectly calling the dump functions like PEM_write_SSL_SESSION_APIName and PEM_write_bio_SSL_SESSION_APIName) and can therefore not be restored.
0,0,The data encoded by the private key functions is unencrypted and offers no private key security,,,null,The data encoded by the private key functions is unencrypted and therefore offers no private key security.,The data encoded by the private key functions is unencrypted and therefore offers no private key security.
0,0,Only the last verification error that occurred during the processing is available from SSL_get_verify_result_APIName.,1,,null,Only the last verification error that occurred during the processing is available from SSL_get_verify_result_APIName.,SSL_get_verify_result_APIName can only return one error code while the verification of a certificate can fail because of many reasons at the same time. Only the last verification error that occurred during the processing is available from SSL_get_verify_result_APIName.
0,0,"A filter BIO takes data from one BIO and passes it through to another , or the application",,,null,"A filter BIO takes data from one BIO and passes it through to another, or the application.","A filter BIO takes data from one BIO and passes it through to another, or the application. The data may be left unmodified (for example a message digest BIO) or translated (for example an encryption BIO). The effect of a filter BIO may change according to the I/O operation it is performing: for example an encryption BIO will encrypt data if it is being written to and decrypt data if it is being read from."
0,0,A client will only send a certificate,,,when explicitly requested to do so by the server,A client will only send a certificate when explicitly requested to do so by the server (see SSL_CTX_set_verify_APIName ).,"Due to the protocol definition, a TLS/SSL server will always send a certificate, if present. A client will only send a certificate when explicitly requested to do so by the server (see SSL_CTX_set_verify_APIName ). If an anonymous cipher is used, no certificates are sent."
0,0,A session will be automatically removed from the session cache and marked as non-resumable,1,,if a fatal error occurs on the connection or SSL_shutdown_APIName is not called prior to SSL_free_APIName .,"A session will be automatically removed from the session cache and marked as non-resumable if the connection is not closed down cleanly, eg if a fatal error occurs on the connection or SSL_shutdown_APIName is not called prior to SSL_free_APIName .","A session will be automatically removed from the session cache and marked as non-resumable if the connection is not closed down cleanly, eg if a fatal error occurs on the connection or SSL_shutdown_APIName is not called prior to SSL_free_APIName ."
0,0,"UI stands for User Interface , and is general purpose set of routines to prompt the user for text-based information",,,null,"UI stands for User Interface, and is general purpose set of routines to prompt the user for text-based information.","UI stands for User Interface, and is general purpose set of routines to prompt the user for text-based information. Through user-written methods (see ui_create_APIName ), prompting can be done in any way imaginable, be it plain text prompting, through dialog boxes or from a cell phone."
0,0,DES_random_key_APIName generates a random key,,,null,DES_random_key_APIName generates a random key.,"DES_random_key_APIName generates a random key. The PRNG must be seeded prior to using this function (see rand_APIName ). If the PRNG could not generate a secure key, 0 is returned."
0,0,it is possible to make this one half of a BIO pair and have all the data processed by the chain under application control,,,null," , it is possible to make this one half of a BIO pair and have all the data processed by the chain under application control .","Since BIO chains typically end in a source/sink BIO, it is possible to make this one half of a BIO pair and have all the data processed by the chain under application control."
0,0,RAND_cleanup_APIName erases the memory used by the PRNG,,,null,RAND_cleanup_APIName erases the memory used by the PRNG.,RAND_cleanup_APIName erases the memory used by the PRNG.
0,0,These functions handle application specific data in DSA structures,,,null,These functions handle application specific data in DSA structures.,"These functions handle application specific data in DSA structures. These functions usage is identical to that of RSA_get_ex_new_index_APIName, RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName ."
0,0,This can be done by waiting for a connection and calling,,,null,This can be done by waiting for a connection and then calling:,"If a server wishes to process multiple connections (as is normally the case) ,then the accept BIO must be made available for further incoming connections. This can be done by waiting for a connection and then calling:"
0,0,BIO_ssl_shutdown_APIName closes down an SSL connection on BIO chain BIO_ssl_shutdown_APIParam_1,,,null,BIO_ssl_shutdown_APIName closes down an SSL connection on BIO chain BIO_ssl_shutdown_APIParam_1.,BIO_ssl_shutdown_APIName closes down an SSL connection on BIO chain BIO_ssl_shutdown_APIParam_1. It does this by locating the SSL BIO in the chain and calling SSL_shutdown_APIName on its internal SSL pointer.
0,0,This can be resolved by using BIO_pop_APIName and freeing up the accept BIO after the initial connection,,,null,This can be resolved by using BIO_pop_APIName (see above) and freeing up the accept BIO after the initial connection.,"If only a single connection will be processed ,it is possible to perform I/O using the accept BIO itself. This is often undesirable however because the accept BIO will still accept additional incoming connections. This can be resolved by using BIO_pop_APIName (see above) and freeing up the accept BIO after the initial connection."
0,0,"Each EC_builtin_curve item has a unique integer id , and a human readable comment string describing the curve",,,null,"Each EC_builtin_curve item has a unique integer id (EC_GROUP_new_by_curve_name_APIParam_1), and a human readable comment string describing the curve.","Each EC_builtin_curve item has a unique integer id (EC_GROUP_new_by_curve_name_APIParam_1), and a human readable comment string describing the curve."
0,0,"BIO_get_ssl_APIName retrieves the SSL pointer of BIO BIO_ctrl_APIParam_1 , BIO_get_ssl_APIName can be manipulated using the standard SSL library functions",,,null,"BIO_get_ssl_APIName retrieves the SSL pointer of BIO BIO_ctrl_APIParam_1, BIO_get_ssl_APIName can then be manipulated using the standard SSL library functions.","BIO_get_ssl_APIName retrieves the SSL pointer of BIO BIO_ctrl_APIParam_1, BIO_get_ssl_APIName can then be manipulated using the standard SSL library functions."
0,0,It does this by locating the SSL BIO in the chain and calling SSL_shutdown_APIName on its internal SSL pointer,,,null,It does this by locating the SSL BIO in the chain and calling SSL_shutdown_APIName on its internal SSL pointer.,BIO_ssl_shutdown_APIName closes down an SSL connection on BIO chain BIO_ssl_shutdown_APIParam_1. It does this by locating the SSL BIO in the chain and calling SSL_shutdown_APIName on its internal SSL pointer.
0,0,SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1,,,null,SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1.,SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1.
0,0,The verification callback can be set and inherited from the parent structure performing the operation,,,null,The verification callback can be set and inherited from the parent structure performing the operation.,The verification callback can be set and inherited from the parent structure performing the operation. In some cases (such as S/MIME verification) the X509_STORE_CTX_set_verify_cb_APIParam_1 structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE_CTX_set_verify_cb_APIParam_1.
0,0,The X509_verify_cert_APIName function attempts to discover and validate a certificate chain based on parameters in X509_verify_cert_APIParam_1,,,null,The X509_verify_cert_APIName function attempts to discover and validate a certificate chain based on parameters in X509_verify_cert_APIParam_1.,The X509_verify_cert_APIName function attempts to discover and validate a certificate chain based on parameters in X509_verify_cert_APIParam_1. A complete description of the process is contained in the verify_APIName manual page.
0,0,Call SSL_shutdown_APIName for a second time,,,if a bidirectional shutdown shall be performed,"Call SSL_shutdown_APIName for a second time, if a bidirectional shutdown shall be performed.","The shutdown is not yet finished. Call SSL_shutdown_APIName for a second time, if a bidirectional shutdown shall be performed. The output of SSL_get_error_APIName may be misleading, as an erroneous SSL_ERROR_SYSCALL may be flagged even though no error occurred."
0,0,EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object,,,null,EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object.,"EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object. This data is treated as a ""black box"" by the ec library. The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter, which must have associated functions for duplicating, freeing and ""clear_freeing"" the data item. If a subsequent EC_KEY_get_key_method_data call is issued, the functions for duplicating, freeing and ""clear_freeing"" the data item must be provided again, and they must be the same as they were when the data item was inserted."
0,0,"SSL_CTX_sess_set_remove_cb_APIName sets the callback function , which is automatically called",,,whenever a session is removed by the SSL engine,"SSL_CTX_sess_set_remove_cb_APIName sets the callback function , which is automatically called whenever a session is removed by the SSL engine ,  .","SSL_CTX_sess_set_remove_cb_APIName sets the callback function, which is automatically called whenever a session is removed by the SSL engine, because it is considered faulty or the session has become obsolete because of exceeding the timeout value."
0,0,recognise certificate and private key options,,,null,recognise certificate and private key options.,recognise certificate and private key options.
0,0,This is described in RAND_add_APIName,,,null,This is described in RAND_add_APIName .,A cryptographic PRNG must be seeded with unpredictable data such as mouse movements or keys pressed at random by the user. This is described in RAND_add_APIName . Its state can be saved in a seed file (see RAND_load_file_APIName ) to avoid having to go through the seeding process whenever the application is started.
0,0,CRYPTO_lock_APIParam_3 and CRYPTO_lock_APIParam_4 are the file number of the function setting the lock,,,null,CRYPTO_lock_APIParam_3 and CRYPTO_lock_APIParam_4 are the file number of the function setting the lock.,CRYPTO_lock_APIParam_3 and CRYPTO_lock_APIParam_4 are the file number of the function setting the lock. They can be useful for debugging.
0,0,SSL_shutdown_APIName shuts down an active TLS/SSL connection,,,null,SSL_shutdown_APIName shuts down an active TLS/SSL connection.,"SSL_shutdown_APIName shuts down an active TLS/SSL connection. SSL_shutdown_APIName sends the ""close notify"" shutdown alert to the peer."
0,0,BN_mod_sub_APIName subtracts BN_mod_sub_APIParam_3 from BN_mod_sub_APIParam_2 modulo BN_mod_sub_APIParam_4 and places the non-negative result in BN_mod_sub_APIParam_1,,,null,BN_mod_sub_APIName subtracts BN_mod_sub_APIParam_3 from BN_mod_sub_APIParam_2 modulo BN_mod_sub_APIParam_4 and places the non-negative result in BN_mod_sub_APIParam_1.,BN_mod_sub_APIName subtracts BN_mod_sub_APIParam_3 from BN_mod_sub_APIParam_2 modulo BN_mod_sub_APIParam_4 and places the non-negative result in BN_mod_sub_APIParam_1.
0,0,BN_BLINDING_new_APIName allocates a new BN_BLINDING_new_APIParam_0 structure and copies the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 values into the newly created BN_BLINDING_new_APIParam_0 object,,,null,BN_BLINDING_new_APIName allocates a new BN_BLINDING_new_APIParam_0 structure and copies the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 values into the newly created BN_BLINDING_new_APIParam_0 object.,BN_BLINDING_new_APIName allocates a new BN_BLINDING_new_APIParam_0 structure and copies the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 values into the newly created BN_BLINDING_new_APIParam_0 object.
0,0,The mechanisms described below relate solely to the software PRNG implementation built in to OpenSSL and used by default,,,null,The mechanisms described below relate solely to the software PRNG implementation built in to OpenSSL and used by default.,"If an alternative RAND_set_rand_method_APIParam_1 implementation is being used (either set directly or as provided by an ENGINE module), then it is entirely responsible for the generation and management of a cryptographically secure PRNG stream. The mechanisms described below relate solely to the software PRNG implementation built in to OpenSSL and used by default."
0,0,The EVP envelope routines decrypt a public key encrypted symmetric key and decrypt data using a public key encrypted symmetric key,,,null,The EVP envelope routines decrypt a public key encrypted symmetric key and then decrypt data using a public key encrypted symmetric key.,The EVP envelope routines are a high level interface to envelope decryption. The EVP envelope routines decrypt a public key encrypted symmetric key and then decrypt data using a public key encrypted symmetric key.
0,0,This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName,,,null,This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName .,"SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
0,0,SSL_add_session_APIName and SSL_remove_session_APIName are synonyms for their SSL_CTX __ APIName counterparts,,,null,SSL_add_session_APIName and SSL_remove_session_APIName are synonyms for their SSL_CTX_*_APIName counterparts.,SSL_add_session_APIName and SSL_remove_session_APIName are synonyms for their SSL_CTX_*_APIName counterparts.
0,0,Some clients step down to SSLv3 with respect to the server 's answer and violate the version rollback protection,,,null,Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.),"During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)"
0,0,"the client sends a SSLv2 hello and accepts up to SSLv3 .1 = TLSv1 , the server only understands up to SSLv3",,,null,"(Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3.","During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)"
0,0,"The methods exist in a generic type , a server only type , and a client only type",,,null,"The methods exist in a generic type (for client and server use), a server only type, and a client only type.","The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method. The methods exist in a generic type (for client and server use), a server only type, and a client only type. SSL_CTX_new_APIParam_1 can be of the following types:"
0,0,Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName,,,null,Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName.,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client. If set it will override any temporary ECDH parameters set by a server. Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName. Newer applications should just call:
0,0,it will be reused and a flag is being set that can be queried by the application.,1,,If both client and server agree on the session,"If both client and server agree on the session, it will be reused and a flag is being set that can be queried by the application.","During the negotiation, a client can propose to reuse a session. The server then looks up the session in its cache. If both client and server agree on the session, it will be reused and a flag is being set that can be queried by the application."
0,0,"the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName",1,,null,"the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName and if any of those succeed, that ENGINE will be set as the default for RSA use from then on.","That's all that's required. Eg. the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName and if any of those succeed, that ENGINE will be set as the default for RSA use from then on."
0,0,the new entry is appended,,,if X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 is -1,X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted: if X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 is -1  the new entry  is appended.,X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted: if X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 is -1  the new entry  is appended.
0,0,5 padding bytes of value 5 will be added,,,if the block size is 8 and 11 bytes are to be encrypted,For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.,PKCS padding works by adding EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 padding bytes of value EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 to make the total length of the encrypted data a multiple of the block size. Padding is always added so if the data is already a multiple of the block size EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 will equal the block size. For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.
0,0,All other flags are left in their existing state,,,null,All other flags are left in their existing state.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,The ASN1_TIME structure is represented as an ASN1_STRING internally and can be freed up using ASN1_STRING_free_APIName,,,null,The ASN1_TIME structure is represented as an ASN1_STRING internally and can be freed up using ASN1_STRING_free_APIName.,The ASN1_TIME structure is represented as an ASN1_STRING internally and can be freed up using ASN1_STRING_free_APIName.
0,0,DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys,,,null,DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys.,"DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys. q is lost during that conversion, but the resulting DH parameters contain the resulting DH parameters length."
0,0,It will not be reset by calling SSL_clear_APIName,,,null,It will not be reset by calling SSL_clear_APIName .,"If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear_APIName . If the callback returns no certificate, the OpenSSL library will not send a certificate."
0,0,EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter,,,null,EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object,,,null,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,X509_NAME_ENTRY_set_object_APIName sets the field name of X509_NAME_ENTRY_set_object_APIParam_1 to X509_NAME_ENTRY_set_object_APIParam_2,,,null,X509_NAME_ENTRY_set_object_APIName sets the field name of X509_NAME_ENTRY_set_object_APIParam_1 to X509_NAME_ENTRY_set_object_APIParam_2.,X509_NAME_ENTRY_set_object_APIName sets the field name of X509_NAME_ENTRY_set_object_APIParam_1 to X509_NAME_ENTRY_set_object_APIParam_2.
0,0,BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1,,,null,BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1.,"BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
0,0,"BIO_new_buffer_ssl_connect_APIName creates a new BIO chain consisting of a buffering BIO , an SSL BIO and a connect BIO",,,null,"BIO_new_buffer_ssl_connect_APIName creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using BIO_new_buffer_ssl_connect_APIParam_1) and a connect BIO.","BIO_new_buffer_ssl_connect_APIName creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using BIO_new_buffer_ssl_connect_APIParam_1) and a connect BIO."
0,0,SSL_CTX_set_ssl_version_APIName sets a new default TLS/SSL SSL_CTX_set_ssl_version_APIParam_2 for SSL objects newly created from this SSL_CTX_set_ssl_version_APIParam_1,,,null,SSL_CTX_set_ssl_version_APIName sets a new default TLS/SSL SSL_CTX_set_ssl_version_APIParam_2 for SSL objects newly created from this SSL_CTX_set_ssl_version_APIParam_1.,"SSL_CTX_set_ssl_version_APIName sets a new default TLS/SSL SSL_CTX_set_ssl_version_APIParam_2 for SSL objects newly created from this SSL_CTX_set_ssl_version_APIParam_1. SSL objects already created with SSL_new_APIName are not affected, except when SSL_clear_APIName is being called."
0,0,"All the symmetric algorithms , digests and asymmetric algorithms can be replaced by ENGINE modules providing alternative implementations",,,null,"All the symmetric algorithms (ciphers), digests and asymmetric algorithms (public key algorithms) can be replaced by ENGINE modules providing alternative implementations.","All the symmetric algorithms (ciphers), digests and asymmetric algorithms (public key algorithms) can be replaced by ENGINE modules providing alternative implementations. If ENGINE implementations of ciphers or digests are registered as defaults, then the various EVP functions will automatically use those implementations automatically in preference to built in software implementations. For more information, consult the engine_APIName man page."
0,0,the number will be odd,,,If BN_rand_APIParam_4 is true,"If BN_rand_APIParam_4 is true, the number will be odd.","BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
0,0,locking_function is needed to perform locking on shared data structures,,,null,"locking_function(int mode, int n, const char *file, int line) is needed to perform locking on shared data structures.","locking_function(int mode, int n, const char *file, int line) is needed to perform locking on shared data structures. (Note that OpenSSL uses a number of global data structures that will be implicitly shared whenever multiple threads use OpenSSL.) Multi-threaded applications will crash at random if locking on shared data structures is not set."
0,0,BIO_read_APIName attempts to read BIO_read_APIParam_3 bytes from BIO BIO_read_APIParam_1 and places the data in BIO_read_APIParam_2,,,null,BIO_read_APIName attempts to read BIO_read_APIParam_3 bytes from BIO BIO_read_APIParam_1 and places the data in BIO_read_APIParam_2.,BIO_read_APIName attempts to read BIO_read_APIParam_3 bytes from BIO BIO_read_APIParam_1 and places the data in BIO_read_APIParam_2.
0,0,The version of the OpenSSL library including the release date,,,null,The version of the OpenSSL library including the release date.,The version of the OpenSSL library including the release date.
0,0,A server will only understand SSLv3 client hello messages,,,null,A server will only understand SSLv3 client hello messages.,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol. A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3. A server will only understand SSLv3 client hello messages. The SSLv3 protocol is deprecated and should not be used.
0,0,the most significant bit of the random number can be zero,,,If BN_rand_APIParam_3 is -1,"If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero.","BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
0,0,q is lost,,,during that conversion,"q is lost during that conversion, but the resulting DH parameters contain the resulting DH parameters length.","DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys. q is lost during that conversion, but the resulting DH parameters contain the resulting DH parameters length."
0,0,SSL_SESSION objects keep internal link information about the session cache list,,,when being inserted into one SSL_CTX object 's session cache,"SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache.","SSL_SESSION objects keep internal link information about the session cache list, when being inserted into one SSL_CTX object's session cache. One SSL_SESSION object, regardless of its reference count, must therefore only be used with one SSL_CTX object (and the SSL objects created from this SSL_CTX object)."
0,0,int CMS_get1_ReceiptRequest_APIName looks for a signed receipt request in CMS_get1_ReceiptRequest_APIParam_1,,,if any is found it is decoded and written to CMS_get1_ReceiptRequest_APIParam_2,"int CMS_get1_ReceiptRequest_APIName looks for a signed receipt request in CMS_get1_ReceiptRequest_APIParam_1, if any is found it is decoded and written to CMS_get1_ReceiptRequest_APIParam_2.","int CMS_get1_ReceiptRequest_APIName looks for a signed receipt request in CMS_get1_ReceiptRequest_APIParam_1, if any is found it is decoded and written to CMS_get1_ReceiptRequest_APIParam_2."
0,0,it is set to 1,,,If BN_rand_APIParam_3 is 0,"If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length.","BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
0,0,"the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length.",,,if BN_rand_APIParam_3 is 1,"If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length.","BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1. If BN_rand_APIParam_2 is less than zero, or too small to accomodate the requirements specified by the BN_rand_APIParam_3 and BN_rand_APIParam_4 parameters, an error is returned. If BN_rand_APIParam_3 is -1, the most significant bit of the random number can be zero. If BN_rand_APIParam_3 is 0, it is set to 1, and if BN_rand_APIParam_3 is 1, the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length. If BN_rand_APIParam_4 is true, the number will be odd. The value of BN_rand_APIParam_2 must be zero or greater. If BN_rand_APIParam_2 is 1 then BN_rand_APIParam_3 cannot also be 1."
0,0,the callback function will be called,,,If a callback function is defined and no certificate was yet defined for the SSL object,"If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called.","If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear_APIName . If the callback returns no certificate, the OpenSSL library will not send a certificate."
0,0,"at start-up , this list is empty and in fact",,,"if an application does not call any ENGINE API calls and it uses static linking against openssl , the resulting application binary will not contain any alternative ENGINE code at all","OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all.","This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg"
0,0,SSL objects already created with SSL_new_APIName are not affected,1,,except when SSL_clear_APIName is being called,"SSL objects already created with SSL_new_APIName are not affected, except when SSL_clear_APIName is being called.","SSL_CTX_set_ssl_version_APIName sets a new default TLS/SSL SSL_CTX_set_ssl_version_APIParam_2 for SSL objects newly created from this SSL_CTX_set_ssl_version_APIParam_1. SSL objects already created with SSL_new_APIName are not affected, except when SSL_clear_APIName is being called."
0,0,For this form the elliptic curve equation is modified to,,,null,For this form the elliptic curve equation is modified to:,The second form is those defined over a binary field F2^m where the elements of the field are integers of length at most m bits. For this form the elliptic curve equation is modified to:
0,0,the various EVP functions will automatically use those implementations automatically in preference to built in software implementations,,,If ENGINE implementations of ciphers or digests are registered as defaults,"If ENGINE implementations of ciphers or digests are registered as defaults, then the various EVP functions will automatically use those implementations automatically in preference to built in software implementations.","All the symmetric algorithms (ciphers), digests and asymmetric algorithms (public key algorithms) can be replaced by ENGINE modules providing alternative implementations. If ENGINE implementations of ciphers or digests are registered as defaults, then the various EVP functions will automatically use those implementations automatically in preference to built in software implementations. For more information, consult the engine_APIName man page."
0,0,The SSL_clear_APIName operation was successful,,,null,The SSL_clear_APIName operation was successful.,The SSL_clear_APIName operation was successful.
0,0,There is currently no corresponding inverse BIO,,,null,There is currently no corresponding inverse BIO: ie one which can decode a CMS structure on the fly.,There is currently no corresponding inverse BIO: ie one which can decode a CMS structure on the fly.
0,0,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol,,,null,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol.,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol. A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3. A server will only understand SSLv3 client hello messages. The SSLv3 protocol is deprecated and should not be used.
0,0,SSL_SESSION_get_ex_data_APIName is used to retrieve the information for SSL_SESSION_get_ex_data_APIParam_2 from SSL_SESSION_get_ex_data_APIParam_1,,,null,SSL_SESSION_get_ex_data_APIName is used to retrieve the information for SSL_SESSION_get_ex_data_APIParam_2 from SSL_SESSION_get_ex_data_APIParam_1.,SSL_SESSION_get_ex_data_APIName is used to retrieve the information for SSL_SESSION_get_ex_data_APIParam_2 from SSL_SESSION_get_ex_data_APIParam_1.
0,0,The function SSL_CONF_CTX_free_APIName frees up the context SSL_CONF_CTX_free_APIParam_1,,,null,The function SSL_CONF_CTX_free_APIName frees up the context SSL_CONF_CTX_free_APIParam_1.,The function SSL_CONF_CTX_free_APIName frees up the context SSL_CONF_CTX_free_APIParam_1.
0,0,No shutdown setting yet,,,null,No shutdown setting yet.,No shutdown setting yet.
0,0,EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths,,,null,EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths.,"EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths. If custom ciphers exceed these values, the results are unpredictable. This is because it has become standard practice to define a generic key as a fixed unsigned char array containing EVP_MAX_KEY_LENGTH bytes."
0,0,The reference count of the BIO is not incremented,,,null,The reference count of the BIO is not incremented.,"SSL_get_rbio_APIName and SSL_get_wbio_APIName return pointers to the BIOs for the read or the write channel, which can be different. The reference count of the BIO is not incremented."
0,0,The LHASH code regards table entries as constant data,,,null,The LHASH code regards table entries as constant data.,"The LHASH code regards table entries as constant data. As such, it internally represents lh_insert_APIName'd items with a ""const void *"" pointer type. This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with ""const"", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is ""const"" at all times as far as the LHASH code is concerned. However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant."
0,0,EVP_CIPHER_CTX_cleanup_APIName clears all information from a cipher context and free up any allocated memory associate with EVP_CIPHER_CTX_cleanup_APIName,,,null,EVP_CIPHER_CTX_cleanup_APIName clears all information from a cipher context and free up any allocated memory associate with EVP_CIPHER_CTX_cleanup_APIName.,EVP_CIPHER_CTX_cleanup_APIName clears all information from a cipher context and free up any allocated memory associate with EVP_CIPHER_CTX_cleanup_APIName. EVP_CIPHER_CTX_cleanup_APIName should be called after all operations using a cipher are complete so sensitive information does not remain in memory.
0,0,These functions perform arithmetic operations on BIGNUMs with unsigned integers,,,null,These functions perform arithmetic operations on BIGNUMs with unsigned integers.,These functions perform arithmetic operations on BIGNUMs with unsigned integers. These functions are much more efficient than the normal BIGNUM arithmetic operations.
0,0,RAND_bytes_APIName puts RAND_bytes_APIParam_2 cryptographically strong pseudo-random bytes into RAND_bytes_APIParam_1,,,null,RAND_bytes_APIName puts RAND_bytes_APIParam_2 cryptographically strong pseudo-random bytes into RAND_bytes_APIParam_1.,RAND_bytes_APIName puts RAND_bytes_APIParam_2 cryptographically strong pseudo-random bytes into RAND_bytes_APIParam_1.
0,0,The read operation was successful,,,null,The read operation was successful.,The read operation was successful. The return value is the number of bytes actually read from the TLS/SSL connection.
0,0,"It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName , EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName",,,null,"It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName, EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName.","BIO_f_cipher_APIName returns the cipher BIO method. This is a filter BIO that encrypts any data written through it, and decrypts any data read from it. It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName, EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName."
0,0,des_read_pw_string_APIName is a variant of des_read_pw_APIName,1,,if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.,des_read_pw_string_APIName is a variant of des_read_pw_APIName that provides a buffer for you if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.,des_read_pw_string_APIName is a variant of des_read_pw_APIName that provides a buffer for you if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.
0,0,that provides a buffer for you,1,,if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.,des_read_pw_string_APIName is a variant of des_read_pw_APIName that provides a buffer for you if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.,des_read_pw_string_APIName is a variant of des_read_pw_APIName that provides a buffer for you if des_read_pw_string_APIParam_4 des_read_pw_APIParam_5 is set.
0,0,The verification result is part of the established session and is restored,,,when a session is reused,The verification result is part of the established session and is restored when a session is reused.,The verification result is part of the established session and is restored when a session is reused.
0,0,The function SSL_export_keying_material_APIName enables an application to use some of this keying material for The function SSL_export_keying_material_APIName own purposes in accordance with RFC5705,,,null,The function SSL_export_keying_material_APIName enables an application to use some of this keying material for The function SSL_export_keying_material_APIName own purposes in accordance with RFC5705.,During the creation of a TLS or DTLS connection shared keying material is established between the two endpoints. The function SSL_export_keying_material_APIName enables an application to use some of this keying material for The function SSL_export_keying_material_APIName own purposes in accordance with RFC5705.
0,0,SSL_CTX_free_APIName does not provide diagnostic information,,,null,SSL_CTX_free_APIName does not provide diagnostic information.,SSL_CTX_free_APIName does not provide diagnostic information.
0,0,BIO_get_mem_ptr_APIName places the underlying BUF_MEM structure in BIO_get_mem_ptr_APIParam_2,,,null,BIO_get_mem_ptr_APIName places the underlying BUF_MEM structure in *BIO_get_mem_ptr_APIParam_2.,BIO_get_mem_ptr_APIName places the underlying BUF_MEM structure in *BIO_get_mem_ptr_APIParam_2. *BIO_get_mem_ptr_APIParam_2 is a macro.
0,0,the results are unpredictable,,,If custom ciphers exceed these values,"If custom ciphers exceed these values, the results are unpredictable.","EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths. If custom ciphers exceed these values, the results are unpredictable. This is because it has become standard practice to define a generic key as a fixed unsigned char array containing EVP_MAX_KEY_LENGTH bytes."
0,0,These are discussed in the next section,,,null,"These are discussed in the next section ,  .","The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task, eg by ENGINE_get_default_RSA_APIName, ENGINE_get_default_cipher_engine_APIName, etc. These are discussed in the next section, though they are not usually required by application programmers as they are used automatically when creating and using the relevant algorithm-specific types in OpenSSL, such as RSA, DSA, EVP_CIPHER_CTX, etc."
0,0,EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2,,,null,EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2.,EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. In both cases it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4.
0,0,The sign_init_APIName and sign_APIName methods are called by EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName,,,null,The sign_init_APIName and sign_APIName methods are called by EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName .,The sign_init_APIName and sign_APIName methods are used to generate the signature of a piece of data using a private key. The sign_init_APIName and sign_APIName methods are called by EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName .
0,0,In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.,1,,null,In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.,Session resumption shortcuts the TLS so that the client certificate negiotation don't occur. It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket. In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.
0,0,it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4,,,null,In both cases it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4.,EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. In both cases it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4.
0,0,DSA_generate_parameters_ex_APIName places the iteration count in DSA_generate_parameters_APIParam_0 and a counter used for finding a generator in DSA_generate_parameters_APIParam_0,,,unless these are NULL,"DSA_generate_parameters_ex_APIName places the iteration count in *DSA_generate_parameters_APIParam_0 and a counter used for finding a generator in *DSA_generate_parameters_APIParam_0, unless these are NULL.","DSA_generate_parameters_ex_APIName places the iteration count in *DSA_generate_parameters_APIParam_0 and a counter used for finding a generator in *DSA_generate_parameters_APIParam_0, unless these are NULL."
0,0,BIO_get_mem_ptr_APIName is a macro,,,null,*BIO_get_mem_ptr_APIParam_2 is a macro.,BIO_get_mem_ptr_APIName places the underlying BUF_MEM structure in *BIO_get_mem_ptr_APIParam_2. *BIO_get_mem_ptr_APIParam_2 is a macro.
0,0,The connection uses the SSLv3 protocol,,,null,The connection uses the SSLv3 protocol.,The connection uses the SSLv3 protocol.
0,0,This is a warning alert,,,null,This is a warning alert.,The connection shall be closed. This is a warning alert.
0,0,DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName may run for several hours before finding a suitable prime,,,null,DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName may run for several hours before finding a suitable prime.,DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName may run for several hours before finding a suitable prime.
0,0,X509_new_APIName allocates and initializes a X509 structure,,,null,X509_new_APIName allocates and initializes a X509 structure.,X509_new_APIName allocates and initializes a X509 structure.
0,0,"ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName are the same as the above, but ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName additionally store the file name and line number where the error occurred in *ERR_get_error_line_APIParam_1 ERR_peek_error_line_APIParam_1 ERR_peek_last_error_line_APIParam_1 and *ERR_get_error_line_APIParam_2 ERR_peek_error_line_APIParam_2 ERR_peek_last_error_line_APIParam_2",1,,unless these are NULL.,"ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName are the same as the above, but ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName additionally store the file name and line number where the error occurred in *ERR_get_error_line_APIParam_1 ERR_peek_error_line_APIParam_1 ERR_peek_last_error_line_APIParam_1 and *ERR_get_error_line_APIParam_2 ERR_peek_error_line_APIParam_2 ERR_peek_last_error_line_APIParam_2, unless these are NULL.","ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName are the same as the above, but ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName additionally store the file name and line number where the error occurred in *ERR_get_error_line_APIParam_1 ERR_peek_error_line_APIParam_1 ERR_peek_last_error_line_APIParam_1 and *ERR_get_error_line_APIParam_2 ERR_peek_error_line_APIParam_2 ERR_peek_last_error_line_APIParam_2, unless these are NULL."
0,0,EC_POINT_free frees the memory associated with the EC_POINT,,,null,EC_POINT_free frees the memory associated with the EC_POINT.,EC_POINT_free frees the memory associated with the EC_POINT.
0,0,SSL_set_tmp_dh_callback_APIName sets the callback only for SSL_set_tmp_dh_APIParam_1,,,null,SSL_set_tmp_dh_callback_APIName sets the callback only for SSL_set_tmp_dh_APIParam_1.,SSL_set_tmp_dh_callback_APIName sets the callback only for SSL_set_tmp_dh_APIParam_1.
0,0,The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2,,,null,The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2.,The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2. The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed. The SSL_CONF_cmd_argv_APIParam_2 argument can be set to NULL is The SSL_CONF_cmd_argv_APIParam_2 argument is not used.
0,0,It is used to hold a single large integer,,,null,It is used to hold a single large integer.,The basic object in this library is a BN_init_APIParam_1. It is used to hold a single large integer. BN_init_APIParam_1 should be considered opaque and fields should not be modified or accessed directly.
0,0,This can be achieved by setting and verifying the signers certificates manually using the signed data utility functions,,,null,This can be achieved by setting and verifying the signers certificates manually using the signed data utility functions.,In some cases the standard techniques for looking up and validating certificates are not appropriate: for example an application may wish to lookup certificates in a database or perform customised verification. This can be achieved by setting and verifying the signers certificates manually using the signed data utility functions.
0,0,BN_bn2bin_APIName converts the absolute value of BN_bn2bin_APIParam_1 into big-endian form and stores BN_bn2bin_APIParam_1 at BN_bn2bin_APIParam_2,,,null,BN_bn2bin_APIName converts the absolute value of BN_bn2bin_APIParam_1 into big-endian form and stores BN_bn2bin_APIParam_1 at BN_bn2bin_APIParam_2.,BN_bn2bin_APIName converts the absolute value of BN_bn2bin_APIParam_1 into big-endian form and stores BN_bn2bin_APIParam_1 at BN_bn2bin_APIParam_2. BN_bn2bin_APIParam_2 must point to BN_num_bytes(BN_bn2bin_APIParam_1) bytes of memory.
0,0,Certain signatures with an improper algorithm identifier are accepted for compatibility with SSLeay 0.4.5,,,null,Certain signatures with an improper algorithm identifier are accepted for compatibility with SSLeay 0.4.5 :-),Certain signatures with an improper algorithm identifier are accepted for compatibility with SSLeay 0.4.5 :-)
0,0,The basic object in this library is a BN_init_APIParam_1,,,null,The basic object in this library is a BN_init_APIParam_1.,The basic object in this library is a BN_init_APIParam_1. It is used to hold a single large integer. BN_init_APIParam_1 should be considered opaque and fields should not be modified or accessed directly.
0,0,These functions decode and encode a PKCS # 10 certificate request,,,null,These functions decode and encode a PKCS#10 certificate request.,These functions decode and encode a PKCS#10 certificate request.
0,0,The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed,,,null,The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed.,The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2. The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed. The SSL_CONF_cmd_argv_APIParam_2 argument can be set to NULL is The SSL_CONF_cmd_argv_APIParam_2 argument is not used.
0,0,The sign_init_APIName and sign_APIName methods are used to generate the signature of a piece of data using a private key,,,null,The sign_init_APIName and sign_APIName methods are used to generate the signature of a piece of data using a private key.,The sign_init_APIName and sign_APIName methods are used to generate the signature of a piece of data using a private key. The sign_init_APIName and sign_APIName methods are called by EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName .
0,0,It will obtain the signer certificate by some unspecified means and set it using CMS_SignerInfo_set1_signer_cert_APIName,,,null,It will then obtain the signer certificate by some unspecified means (or return and error if it cannot be found) and set it using CMS_SignerInfo_set1_signer_cert_APIName.,In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo_APIName and retrieve the identifier information using CMS. It will then obtain the signer certificate by some unspecified means (or return and error if it cannot be found) and set it using CMS_SignerInfo_set1_signer_cert_APIName.
0,0,EVP_MD_CTX_init_APIName initializes digest context EVP_MD_CTX_init_APIParam_1,,,null,EVP_MD_CTX_init_APIName initializes digest context EVP_MD_CTX_init_APIParam_1.,EVP_MD_CTX_init_APIName initializes digest context EVP_MD_CTX_init_APIParam_1.
0,0,"OBJ_create_APIParam_1 is the numerical form of the object , OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name",,,null,"OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name.","OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object."
0,0,Two RSA padding modes behave differently,,,if EVP_PKEY_CTX_set_signature_md_APIName is used,Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used.,"Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used. If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte."
0,0,The session id is an arbitrary sequence of bytes,,,null,The session id is an arbitrary sequence of bytes.,"When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1. The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information."
0,0,In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo_APIName and retrieve the identifier information using CMS,,,null,In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo_APIName and retrieve the identifier information using CMS.,In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo_APIName and retrieve the identifier information using CMS. It will then obtain the signer certificate by some unspecified means (or return and error if it cannot be found) and set it using CMS_SignerInfo_set1_signer_cert_APIName.
0,0,BN_RECP_CTX_new_APIName allocates and initializes a BN_RECP_CTX_init_APIParam_1 structure,,,null,BN_RECP_CTX_new_APIName allocates and initializes a BN_RECP_CTX_init_APIParam_1 structure.,BN_RECP_CTX_new_APIName allocates and initializes a BN_RECP_CTX_init_APIParam_1 structure. BN_RECP_CTX_init_APIName initializes an existing uninitialized BN_RECP_CTX_init_APIParam_1.
0,0,65537 is used,,,If this macro is not called,If this macro is not called then 65537 is used.,The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIName macro sets the public exponent value for RSA key generation to EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 currently EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should be an odd integer. The EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 pointer is used internally by this function so EVP_PKEY_CTX_set_rsa_keygen_pubexp_APIParam_2 should not be modified or free after the call. If this macro is not called then 65537 is used.
0,0,The function SSL_CONF_CTX_set1_prefix_APIName sets the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 to SSL_CONF_CTX_set1_prefix_APIParam_2,,,null,The function SSL_CONF_CTX_set1_prefix_APIName sets the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 to SSL_CONF_CTX_set1_prefix_APIParam_2.,The function SSL_CONF_CTX_set1_prefix_APIName sets the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 to SSL_CONF_CTX_set1_prefix_APIParam_2. If SSL_CONF_CTX_set1_prefix_APIParam_2 is NULL the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 is restored to the default value.
0,0,no checks are performed and the supplied data in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 is used directly.,1,,If instead an ASN1 type is used,"If instead an ASN1 type is used ,no checks are performed and the supplied data in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 is used directly.","If instead an ASN1 type is used ,no checks are performed and the supplied data in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 is used directly."
0,0,The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4,,,null,The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4.,"X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1. The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4. Since a copy of X509_NAME_add_entry_APIParam_2 is added, X509_NAME_add_entry_APIParam_2 must be freed up after the call."
0,0,data is used directly and not encapsulated,,,If this control is not used with RSA and PKCS # 1 padding the supplied,If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated.,"Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used. If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte."
0,0,BN_RECP_CTX_init_APIName initializes an existing uninitialized BN_RECP_CTX_init_APIParam_1,,,null,BN_RECP_CTX_init_APIName initializes an existing uninitialized BN_RECP_CTX_init_APIParam_1.,BN_RECP_CTX_new_APIName allocates and initializes a BN_RECP_CTX_init_APIParam_1 structure. BN_RECP_CTX_init_APIName initializes an existing uninitialized BN_RECP_CTX_init_APIParam_1.
0,0,"The exact definition of those can be found in the X. 509 document from ITU-T , or in RFC3280 from PKIX",,,null,"The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX.","A X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine. A X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid. The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX. In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL."
0,0,"Additionally , the session id is transmitted in the clear information",,,when reusing the session so the session id must not contain sensitive,"Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information.","When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1. The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information."
0,0,only the first one will be examined,,,"If several CA certificates matching the name , key identifier , and serial number condition are available","If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined.","If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined. This may lead to unexpected results if the same CA certificate is available with different expiration dates. If a ""certificate expired"" verification error occurs, no other certificate will be searched. Make sure to not have expired certificates mixed with valid ones."
0,0,X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1,,,null,X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1.,"X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1. The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4. Since a copy of X509_NAME_add_entry_APIParam_2 is added, X509_NAME_add_entry_APIParam_2 must be freed up after the call."
0,0,"In OpenSSL , the type X509 is used to express such a certificate , and the type X509_CRL is used to express a CRL",,,null,"In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL.","A X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine. A X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid. The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX. In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL."
0,0,"Without a callback being set , an OpenSSL server will generate a unique session id from pseudo random numbers of the maximum possible length",,,null,"Without a callback being set, an OpenSSL server will generate a unique session id from pseudo random numbers of the maximum possible length.","Without a callback being set, an OpenSSL server will generate a unique session id from pseudo random numbers of the maximum possible length. Using the callback function, the session id can be changed to contain additional information like eg a host id in order to improve load balancing or external caching techniques."
0,0,X509_STORE_CTX_set_cert_APIName sets the certificate to be vertified in X509_STORE_CTX_set_cert_APIParam_1 to X509_STORE_CTX_set_cert_APIParam_2,,,null,X509_STORE_CTX_set_cert_APIName sets the certificate to be vertified in X509_STORE_CTX_set_cert_APIParam_1 to X509_STORE_CTX_set_cert_APIParam_2.,X509_STORE_CTX_set_cert_APIName sets the certificate to be vertified in X509_STORE_CTX_set_cert_APIParam_1 to X509_STORE_CTX_set_cert_APIParam_2.
0,0,no other certificate will be searched,,,If a `` certificate expired '' verification error occurs,"If a ""certificate expired"" verification error occurs, no other certificate will be searched.","If several CA certificates matching the name, key identifier, and serial number condition are available, only the first one will be examined. This may lead to unexpected results if the same CA certificate is available with different expiration dates. If a ""certificate expired"" verification error occurs, no other certificate will be searched. Make sure to not have expired certificates mixed with valid ones."
0,0,A server will look up the session in its internal session storage,,,null,A server will look up the session in its internal session storage.,"A server will look up the session in its internal session storage. If the session is not found in internal storage or lookups for the internal storage have been deactivated (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP), the server will try the external storage if available."
0,0,In the case of X9 .31 padding for RSA the algorithm identifier byte is added or checked and removed,,,if this control is called,In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called.,"Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used. If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte."
0,0,These are the version-specific methods for DTLSv1,,,null,These are the version-specific methods for DTLSv1.,These are the version-specific methods for DTLSv1.
0,0,This constraint is violated by the default behavior of the OpenSSL library,,,null,This constraint is violated by the default behavior of the OpenSSL library.,"When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent."
0,0,the server generates a session id,,,When a new session is established between client and server,"When a new session is established between client and server, the server generates a session id.","When a new session is established between client and server, the server generates a session id. The session id is an arbitrary sequence of bytes. The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1. The session id is not security critical but must be unique for the server. Additionally, the session id is transmitted in the clear when reusing the session so the session id must not contain sensitive information."
0,0,The EVP_PKEY functions support the full range of asymmetric algorithm operations,,,null,The EVP_PKEY functions support the full range of asymmetric algorithm operations:,The EVP_PKEY functions support the full range of asymmetric algorithm operations:
0,0,It is possible to determine the correct recipient key by other means and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey_APIName,,,null,It is possible to determine the correct recipient key by other means (for example looking them up in a database) and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey_APIName.,It is possible to determine the correct recipient key by other means (for example looking them up in a database) and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey_APIName. In this case both CMS_decrypt_APIParam_3 and CMS_decrypt_APIParam_2 should be set to NULL.
0,0,"As always , , it can be achieved by preceding the cipher BIO with a buffering BIO",,,if BIO_gets_APIName or BIO_puts_APIName support is needed,"As always, if BIO_gets_APIName or BIO_puts_APIName support is needed ,then it can be achieved by preceding the cipher BIO with a buffering BIO.","As always, if BIO_gets_APIName or BIO_puts_APIName support is needed ,then it can be achieved by preceding the cipher BIO with a buffering BIO."
0,0,UI_set_method_APIName changes the UI method associated with a given UI,,,null,UI_set_method_APIName changes the UI method associated with a given UI.,UI_set_method_APIName changes the UI method associated with a given UI.
0,0,The behaviour of SSL_do_handshake_APIName depends on the underlying BIO,,,null,The behaviour of SSL_do_handshake_APIName depends on the underlying BIO.,The behaviour of SSL_do_handshake_APIName depends on the underlying BIO.
0,0,The same applies for DES_string_to_2key_APIName,,,null,The same applies for DES_string_to_2key_APIName.,DES_string_to_key_APIName is available for backward compatibility with the MIT library. New applications should use a cryptographic hash function. The same applies for DES_string_to_2key_APIName.
0,0,SSL_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_set_generate_session_id_APIParam_1 to be SSL_set_generate_session_id_APIParam_3,,,null,SSL_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_set_generate_session_id_APIParam_1 to be SSL_set_generate_session_id_APIParam_3.,SSL_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_set_generate_session_id_APIParam_1 to be SSL_set_generate_session_id_APIParam_3.
0,0,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2 ^ m,,,null,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2^m.,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2^m. In this case EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial. Therefore there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial. EC_group_get_curve_GF2m obtains the previously set curve parameters.
0,0,EC_group_get_curve_GF2m obtains the previously set curve parameters,,,null,EC_group_get_curve_GF2m obtains the previously set curve parameters.,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2^m. In this case EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial. Therefore there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial. EC_group_get_curve_GF2m obtains the previously set curve parameters.
0,0,This depends on the behaviour of the platforms I/O functions,,,null,This depends on the behaviour of the platforms I/O functions.,It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data. This depends on the behaviour of the platforms I/O functions. This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.
0,0,DES_string_to_key_APIName is available for backward compatibility with the MIT library,,,null,DES_string_to_key_APIName is available for backward compatibility with the MIT library.,DES_string_to_key_APIName is available for backward compatibility with the MIT library. New applications should use a cryptographic hash function. The same applies for DES_string_to_2key_APIName.
0,0,Detailed description of possible states to be included later,,,null,Detailed description of possible states to be included later.,Detailed description of possible states to be included later.
0,0,OPENSSL_no_config_APIName disables configuration,,,null,OPENSSL_no_config_APIName disables configuration.,OPENSSL_no_config_APIName disables configuration. If called before OPENSSL_config_APIName no configuration takes place.
0,0,EC_GROUP_clear_free destroys any sensitive data held within the EC_GROUP and frees its memory,,,null,EC_GROUP_clear_free destroys any sensitive data held within the EC_GROUP and then frees its memory.,EC_GROUP_clear_free destroys any sensitive data held within the EC_GROUP and then frees its memory.
0,0,There is a naming convention for such functions,,,null,There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*_APIName and a filter BIO BIO_f_*_APIName;,Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD. There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*_APIName and a filter BIO BIO_f_*_APIName;
0,0,one solution is to use non blocking I/O and use a timeout on the select_APIName call,,,null,This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.,It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data. This depends on the behaviour of the platforms I/O functions. This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.
0,0,The EVP_PKEY_get_default_digest_nid_APIName function sets EVP_PKEY_get_default_digest_nid_APIParam_2 to the default message digest NID for the public key signature operations associated with key EVP_PKEY_get_default_digest_nid_APIParam_1,,,null,The EVP_PKEY_get_default_digest_nid_APIName function sets EVP_PKEY_get_default_digest_nid_APIParam_2 to the default message digest NID for the public key signature operations associated with key EVP_PKEY_get_default_digest_nid_APIParam_1.,The EVP_PKEY_get_default_digest_nid_APIName function sets EVP_PKEY_get_default_digest_nid_APIParam_2 to the default message digest NID for the public key signature operations associated with key EVP_PKEY_get_default_digest_nid_APIParam_1.
0,0,the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 is restored to the default value,,,If SSL_CONF_CTX_set1_prefix_APIParam_2 is NULL,If SSL_CONF_CTX_set1_prefix_APIParam_2 is NULL the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 is restored to the default value.,The function SSL_CONF_CTX_set1_prefix_APIName sets the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 to SSL_CONF_CTX_set1_prefix_APIParam_2. If SSL_CONF_CTX_set1_prefix_APIParam_2 is NULL the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 is restored to the default value.
0,0,BN_is_bit_set_APIName tests if bit BN_is_bit_set_APIParam_2 in BN_is_bit_set_APIParam_1 is set,1,,null,BN_is_bit_set_APIName tests if bit BN_is_bit_set_APIParam_2 in BN_is_bit_set_APIParam_1 is set.,BN_is_bit_set_APIName tests if bit BN_is_bit_set_APIParam_2 in BN_is_bit_set_APIParam_1 is set.
0,0,the old value is replaced,,,If there already is an entry with the same key,"If there already is an entry with the same key, the old value is replaced.","lh_<type>_insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1. If there already is an entry with the same key, the old value is replaced. Note that lh_<type>_insert_APIName stores pointers, the data are not copied."
0,0,BIO_reset_APIName reinitialises a digest BIO,,,null,BIO_reset_APIName reinitialises a digest BIO.,BIO_reset_APIName reinitialises a digest BIO.
0,0,The keygen_init_APIName and keygen_APIName methods are called by EVP_PKEY_keygen_init_APIName and EVP_PKEY_keygen_APIName,,,null,The keygen_init_APIName and keygen_APIName methods are called by EVP_PKEY_keygen_init_APIName and EVP_PKEY_keygen_APIName .,The keygen_init_APIName and keygen_APIName methods are used to generate the actual key for the specified algorithm. The keygen_init_APIName and keygen_APIName methods are called by EVP_PKEY_keygen_init_APIName and EVP_PKEY_keygen_APIName .
0,0,a source/sink BIO is normally called BIO_s __ APIName and a filter BIO BIO_f __ APIName,,,null,There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*_APIName and a filter BIO BIO_f_*_APIName;,Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD. There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*_APIName and a filter BIO BIO_f_*_APIName;
0,0,A `` negative zero '' is converted to zero,,,null,"A ""negative zero"" is converted to zero.","BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1. If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created. If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits. If the string starts with '-', the number is negative. A ""negative zero"" is converted to zero. BN_dec2bn_APIName is the same using the decimal system."
0,0,OpenSSL_add_all_digests_APIName adds all digest algorithms to the table,,,null,OpenSSL_add_all_digests_APIName adds all digest algorithms to the table.,OpenSSL_add_all_digests_APIName adds all digest algorithms to the table.
0,0,nothing is done,,,If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL,"If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL, nothing is done.","BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself. BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system. If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL, nothing is done."
0,0,BN_dec2bn_APIName is the same using the decimal system,,,null,BN_dec2bn_APIName is the same using the decimal system.,"BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1. If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created. If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits. If the string starts with '-', the number is negative. A ""negative zero"" is converted to zero. BN_dec2bn_APIName is the same using the decimal system."
0,0,SSL BIOs can request a retry,,,null,SSL BIOs are the only current exception to this rule : SSL BIOs can request a retry  .,"SSL BIOs are the only current exception to this rule: SSL BIOs can request a retry even if the underlying I/O structure is blocking, if a handshake occurs during a call to BIO_read_APIName. An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure."
0,0,These sessions are not included in the SSL_CTX_sess_hits_APIName count,,,null,These sessions are not included in the SSL_CTX_sess_hits_APIName count.,"SSL_CTX_sess_timeouts_APIName returns the number of sessions proposed by clients and either found in the internal or external session cache in server mode, but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits_APIName count."
0,0,UI_new_method_APIName creates a new UI using the given UI method,,,null,UI_new_method_APIName creates a new UI using the given UI method.,"UI_new_method_APIName creates a new UI using the given UI method. When done with this UI, a new UI should be freed using UI_free_APIName."
0,0,this is used to flush and possibly pad the final block through the BIO,,,null,BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted: this is used to flush and possibly pad the final block through the BIO.,BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted: this is used to flush and possibly pad the final block through the BIO.
0,0,BN_free_APIName frees also the structure itself.,1,,if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName,"BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself.","BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself. BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system. If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL, nothing is done."
0,0,BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1,1,,null,"BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself.","BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself. BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system. If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL, nothing is done."
0,0,only a certificate is sent,,,if it matches the list of acceptable CAs sent by the server,"The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server.","When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent."
0,0,it will be sent to the server,,,When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions,"When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server.","When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent."
0,0,SSL_SESSION_free_APIName decrements the reference count of SSL_SESSION_free_APIParam_1 and removes the SSL_SESSION_free_APIParam_1 structure pointed to by SSL_SESSION_free_APIParam_1 and frees up the allocated memory,1,,if the reference count has reached 0.,"SSL_SESSION_free_APIName decrements the reference count of SSL_SESSION_free_APIParam_1 and removes the SSL_SESSION_free_APIParam_1 structure pointed to by SSL_SESSION_free_APIParam_1 and frees up the allocated memory, if the reference count has reached 0.","SSL_SESSION_free_APIName decrements the reference count of SSL_SESSION_free_APIParam_1 and removes the SSL_SESSION_free_APIParam_1 structure pointed to by SSL_SESSION_free_APIParam_1 and frees up the allocated memory, if the reference count has reached 0."
0,0,The SSL_set_verify_APIName functions do not provide diagnostic information,,,null,The SSL*_set_verify*_APIName functions do not provide diagnostic information.,The SSL*_set_verify*_APIName functions do not provide diagnostic information.
0,0,a new RDN is created,,,If X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 is zero,"If X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 is zero ,a new RDN is created.","X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 determines how the new type is added. If X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 is zero ,a new RDN is created."
0,0,The function EVP_PKEY_cmp_parameters_APIName compares the parameters of keys EVP_PKEY_cmp_parameters_APIParam_1 and EVP_PKEY_cmp_parameters_APIParam_2,,,null,The function EVP_PKEY_cmp_parameters_APIName compares the parameters of keys EVP_PKEY_cmp_parameters_APIParam_1 and EVP_PKEY_cmp_parameters_APIParam_2.,The function EVP_PKEY_cmp_parameters_APIName compares the parameters of keys EVP_PKEY_cmp_parameters_APIParam_1 and EVP_PKEY_cmp_parameters_APIParam_2.
0,0,that is an SSL/TLS client will use the verification store to verify the server 's certificate chain and a SSL/TLS server will use it to verify any client certificate chain,,,null,The verification store is used to verify the certificate chain sent by the peer: that is an SSL/TLS client will use the verification store to verify the server's certificate chain and a SSL/TLS server will use it to verify any client certificate chain.,The verification store is used to verify the certificate chain sent by the peer: that is an SSL/TLS client will use the verification store to verify the server's certificate chain and a SSL/TLS server will use it to verify any client certificate chain.
0,0,The string types and content are compared,,,null,The string types and content are compared.,ASN1_STRING_cmp_APIName compares ASN1_STRING_cmp_APIParam_1 and ASN1_STRING_cmp_APIParam_2 returning 0 if the two are identical. The string types and content are compared.
0,0,SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer,1,,if any.,"SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer, if any.","SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer, if any."
0,0,The user-defined argument optionally defined by SSL_CTX_set_msg_callback_arg_APIName or SSL_set_msg_callback_arg_APIName,,,null,The user-defined argument optionally defined by SSL_CTX_set_msg_callback_arg_APIName or SSL_set_msg_callback_arg_APIName.,The user-defined argument optionally defined by SSL_CTX_set_msg_callback_arg_APIName or SSL_set_msg_callback_arg_APIName.
0,0,EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial,,,null,In this case EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial.,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2^m. In this case EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial. Therefore there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial. EC_group_get_curve_GF2m obtains the previously set curve parameters.
0,0,The keygen_init_APIName and keygen_APIName methods are used to generate the actual key for the specified algorithm,,,null,The keygen_init_APIName and keygen_APIName methods are used to generate the actual key for the specified algorithm.,The keygen_init_APIName and keygen_APIName methods are used to generate the actual key for the specified algorithm. The keygen_init_APIName and keygen_APIName methods are called by EVP_PKEY_keygen_init_APIName and EVP_PKEY_keygen_APIName .
0,0,SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer,,,if any,"SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer, if any.","SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer, if any."
0,0,ASN1_OCTET_STRING_new_APIName calls ASN1_STRING_type,,,null,For example ASN1_OCTET_STRING_new_APIName calls ASN1_STRING_type(V_ASN1_OCTET_STRING).,Other string types call the ASN1_STRING_free_APIParam_1 functions. For example ASN1_OCTET_STRING_new_APIName calls ASN1_STRING_type(V_ASN1_OCTET_STRING).
0,0,SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1,,,null,SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1.,"SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1."
0,0,These functions implement a cryptographically secure pseudo-random number generator,,,null,These functions implement a cryptographically secure pseudo-random number generator (PRNG).,"These functions implement a cryptographically secure pseudo-random number generator (PRNG). It is used by other library functions for example to generate random keys, and applications can use it when they need randomness."
0,0,DSA_free_APIName frees the DSA_free_APIParam_1 structure and its components,,,null,DSA_free_APIName frees the DSA_free_APIParam_1 structure and its components.,DSA_free_APIName frees the DSA_free_APIParam_1 structure and its components. The values are erased before the memory is returned to the system.
0,0,Otherwise the type of CMS_get0_type_APIParam_0 can be determined using CMS_get0_type_APIName,,,null,Otherwise the type of  CMS_get0_type_APIParam_0  can be determined using CMS_get0_type_APIName,Otherwise the type of  CMS_get0_type_APIParam_0  can be determined using CMS_get0_type_APIName
0,0,X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2,,,null,X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2.,"X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2. If X509_NAME_oneline_APIParam_2 is NULL, then a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored. Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned."
0,0,The verify_recover_init_APIName and verify_recover_APIName methods are called by EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName,,,null,The verify_recover_init_APIName and verify_recover_APIName methods are called by EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName .,"The verify_recover_init_APIName and verify_recover_APIName methods are used to verify a signature and then recover the digest from the signature (for instance, a signature that was generated by RSA signing algorithm). The verify_recover_init_APIName and verify_recover_APIName methods are called by EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName ."
0,0,"Normally , lh_retrieve_APIParam_2 is a structure with the key field set",,,null,"Normally, lh_retrieve_APIParam_2 is a structure with the key field(s) set; the function will return a pointer to a fully populated structure.","lh_<type>_retrieve_APIName looks up an entry in lh_retrieve_APIParam_1. Normally, lh_retrieve_APIParam_2 is a structure with the key field(s) set; the function will return a pointer to a fully populated structure."
0,0,"d2i_DSAPrivateKey_APIName , i2d_DSAPrivateKey_APIName decode and encode the DSA private key components",,,null,"d2i_DSAPrivateKey_APIName, i2d_DSAPrivateKey_APIName decode and encode the DSA private key components.","d2i_DSAPrivateKey_APIName, i2d_DSAPrivateKey_APIName decode and encode the DSA private key components."
0,0,The DES library contained a few routines to prompt for passwords,,,null,The DES library contained a few routines to prompt for passwords.,"The DES library contained a few routines to prompt for passwords. These aren't necessarely dependent on DES, and have therefore become part of the UI compatibility library."
0,0,The following are DES-based transformations,,,null,The following are DES-based transformations:,The following are DES-based transformations:
0,0,the handshake is not immediately added to the cache,,,null," , the handshake is not immediately added to the cache .","SSL_has_matching_session_id_APIName will only query the internal session cache, not the external one. Since the session id is generated before the handshake is completed, the handshake is not immediately added to the cache. If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id. Collisions can also occur when using an external session cache, since the external cache is not tested with SSL_has_matching_session_id_APIName and the same race condition applies."
0,0,use the function EC_GROUP_new_by_curve_name and provide the EC_GROUP_new_by_curve_name_APIParam_1 of the curve to be constructed,,,null," , use the function EC_GROUP_new_by_curve_name and provide the EC_GROUP_new_by_curve_name_APIParam_1 of the curve to be constructed .","In order to construct a builtin curve, use the function EC_GROUP_new_by_curve_name and provide the EC_GROUP_new_by_curve_name_APIParam_1 of the curve to be constructed."
0,0,SSL_set_bio_APIName connects the BIOs SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 for the read and write operations of the TLS/SSL side of SSL_set_bio_APIParam_1,,,null,SSL_set_bio_APIName connects the BIOs SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 for the read and write operations of the TLS/SSL (encrypted) side of SSL_set_bio_APIParam_1.,SSL_set_bio_APIName connects the BIOs SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 for the read and write operations of the TLS/SSL (encrypted) side of SSL_set_bio_APIParam_1.
0,0,These functions handle application specific data in DH structures,,,null,These functions handle application specific data in DH structures.,"These functions handle application specific data in DH structures. These functions usage is identical to that of RSA_get_ex_new_index_APIName, RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName ."
0,0,BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1,,,null,BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1.,"BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1. If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created. If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits. If the string starts with '-', the number is negative. A ""negative zero"" is converted to zero. BN_dec2bn_APIName is the same using the decimal system."
0,0,DH_new_APIName allocates and initializes a DH_new_APIParam_0 structure,,,null,DH_new_APIName allocates and initializes a DH_new_APIParam_0 structure.,DH_new_APIName allocates and initializes a DH_new_APIParam_0 structure.
0,0,"For backward compatibility , SSLEAY_VERSION_NUMBER is also defined",,,null,"For backward compatibility, SSLEAY_VERSION_NUMBER is also defined.","For backward compatibility, SSLEAY_VERSION_NUMBER is also defined."
0,0,DSA_generate_parameters_ex_APIName generates primes p and q and a generator g for use in the DSA and stores the result in DSA_generate_parameters_ex_APIParam_1,,,null,DSA_generate_parameters_ex_APIName generates primes p and q and a generator g for use in the DSA and stores the result in DSA_generate_parameters_ex_APIParam_1.,DSA_generate_parameters_ex_APIName generates primes p and q and a generator g for use in the DSA and stores the result in DSA_generate_parameters_ex_APIParam_1.
0,0,a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created,,,If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL,"If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created.","BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1. If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created. If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits. If the string starts with '-', the number is negative. A ""negative zero"" is converted to zero. BN_dec2bn_APIName is the same using the decimal system."
0,0,EVP_DigestVerifyFinal_APIName verifies the data in EVP_DigestVerifyFinal_APIParam_1 against the signature in EVP_DigestVerifyFinal_APIParam_2 of length EVP_DigestVerifyFinal_APIParam_3,,,null,EVP_DigestVerifyFinal_APIName verifies the data in EVP_DigestVerifyFinal_APIParam_1 against the signature in EVP_DigestVerifyFinal_APIParam_2 of length EVP_DigestVerifyFinal_APIParam_3.,EVP_DigestVerifyFinal_APIName verifies the data in EVP_DigestVerifyFinal_APIParam_1 against the signature in EVP_DigestVerifyFinal_APIParam_2 of length EVP_DigestVerifyFinal_APIParam_3.
0,0,BN_generate_prime_ex_APIName generates a pseudo-random prime number of bit length BN_generate_prime_ex_APIParam_2,,,null,BN_generate_prime_ex_APIName generates a pseudo-random prime number of bit length BN_generate_prime_ex_APIParam_2.,"BN_generate_prime_ex_APIName generates a pseudo-random prime number of bit length BN_generate_prime_ex_APIParam_2. If BN_generate_prime_ex_APIParam_1 is not NULL, BN_generate_prime_ex_APIParam_1 will be used to store the number."
0,0,The verify_recover_init_APIName and verify_recover_APIName methods are used to verify a signature and recover the digest from the signature,,,null,"The verify_recover_init_APIName and verify_recover_APIName methods are used to verify a signature and then recover the digest from the signature (for instance, a signature that was generated by RSA signing algorithm).","The verify_recover_init_APIName and verify_recover_APIName methods are used to verify a signature and then recover the digest from the signature (for instance, a signature that was generated by RSA signing algorithm). The verify_recover_init_APIName and verify_recover_APIName methods are called by EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName ."
0,0,"SSL_has_matching_session_id_APIName will only query the internal session cache , not the external one",,,null,"SSL_has_matching_session_id_APIName will only query the internal session cache, not the external one.","SSL_has_matching_session_id_APIName will only query the internal session cache, not the external one. Since the session id is generated before the handshake is completed, the handshake is not immediately added to the cache. If another thread is using the same internal session cache, a race condition can occur in that another thread generates the same session id. Collisions can also occur when using an external session cache, since the external cache is not tested with SSL_has_matching_session_id_APIName and the same race condition applies."
0,0,"These are n't necessarely dependent on DES , and have become part of the UI compatibility library",,,null,"These aren't necessarely dependent on DES, and have therefore become part of the UI compatibility library.","The DES library contained a few routines to prompt for passwords. These aren't necessarely dependent on DES, and have therefore become part of the UI compatibility library."
0,0,SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1,,,null,SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1.,"SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1."
0,0,Several certificates can be added one after another,,,null,Several certificates can be added one after another.,SSL_CTX_add_extra_chain_cert_APIName adds the certificate SSL_CTX_add_extra_chain_cert_APIParam_2 to the extra chain certificates associated with SSL_CTX_add_extra_chain_cert_APIParam_1. Several certificates can be added one after another.
0,0,SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1,,,null,SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1.,"SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1."
0,0,d2i_ECPKParameters_bio_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_bio_APIName attempts to parse data from BIO ECPKParameters_print_APIParam_1,,,null,d2i_ECPKParameters_bio_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_bio_APIName attempts to parse data from BIO ECPKParameters_print_APIParam_1.,d2i_ECPKParameters_bio_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_bio_APIName attempts to parse data from BIO ECPKParameters_print_APIParam_1.
0,0,The connection uses the TLSv1 .1 protocol,,,null,The connection uses the TLSv1.1 protocol.,The connection uses the TLSv1.1 protocol.
0,0,SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1,,,null,SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1.,"SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. The formatting SSL_CTX_use_PrivateKey_file_APIParam_3 SSL_CTX_use_RSAPrivateKey_file_APIParam_3 SSL_use_PrivateKey_file_APIParam_3 SSL_use_RSAPrivateKey_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1. SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1; SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1."
0,0,This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call,,,null,This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call.,"The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT, currently 1024*20, so that up to 20000 sessions can be held. This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call. A special case is the size 0, which is used for unlimited size."
0,0,it is not limited to CA certificates,,,While the name suggests the specific usage as support function for SSL_CTX_set_client_CA_list_APIName,"While the name suggests the specific usage as support function for SSL_CTX_set_client_CA_list_APIName , it is not limited to CA certificates.","SSL_load_client_CA_file_APIName reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found. While the name suggests the specific usage as support function for SSL_CTX_set_client_CA_list_APIName , it is not limited to CA certificates."
0,0,SSL_CTX_add_extra_chain_cert_APIName adds the certificate SSL_CTX_add_extra_chain_cert_APIParam_2 to the extra chain certificates associated with SSL_CTX_add_extra_chain_cert_APIParam_1,,,null,SSL_CTX_add_extra_chain_cert_APIName adds the certificate SSL_CTX_add_extra_chain_cert_APIParam_2 to the extra chain certificates associated with SSL_CTX_add_extra_chain_cert_APIParam_1.,SSL_CTX_add_extra_chain_cert_APIName adds the certificate SSL_CTX_add_extra_chain_cert_APIParam_2 to the extra chain certificates associated with SSL_CTX_add_extra_chain_cert_APIParam_1. Several certificates can be added one after another.
0,0,it only computes the number 's length in hexadecimal digits,2,,If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL,"If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits.","BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in **BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1. If *BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created. If BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is NULL, it only computes the number's length in hexadecimal digits. If the string starts with '-', the number is negative. A ""negative zero"" is converted to zero. BN_dec2bn_APIName is the same using the decimal system."
0,0,"Likewise , it will cache a NULL response so that future queries wo n't repeat the same iteration unless the state table changes",1,,if no ENGINE was available,"Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes.","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,RSA_new_APIName allocates and initializes an RSA_new_APIParam_0 structure,,,null,RSA_new_APIName allocates and initializes an RSA_new_APIParam_0 structure.,RSA_new_APIName allocates and initializes an RSA_new_APIParam_0 structure. It is equivalent to calling RSA_new_method(NULL).
0,0,BN_mod_add_APIName adds BN_mod_add_APIParam_2 to BN_mod_add_APIParam_3 modulo BN_mod_add_APIParam_4 and places the non-negative result in BN_mod_add_APIParam_1,,,null,BN_mod_add_APIName adds BN_mod_add_APIParam_2 to BN_mod_add_APIParam_3 modulo BN_mod_add_APIParam_4 and places the non-negative result in BN_mod_add_APIParam_1.,BN_mod_add_APIName adds BN_mod_add_APIParam_2 to BN_mod_add_APIParam_3 modulo BN_mod_add_APIParam_4 and places the non-negative result in BN_mod_add_APIParam_1.
0,0,This is the default,,,null,This is the default.,"Server sessions are added to the session cache. When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available. If the session is found, the server will try to reuse the session. This is the default."
0,0,OpenSSL automatically queries,,,null,"OpenSSL automatically queries EGD when entropy is requested via RAND_bytes_APIName or the status is checked via RAND_status_APIName for the first time, if the socket is located at /var/run/egd-pool, /dev/egd-pool or /etc/egd-pool.","OpenSSL automatically queries EGD when entropy is requested via RAND_bytes_APIName or the status is checked via RAND_status_APIName for the first time, if the socket is located at /var/run/egd-pool, /dev/egd-pool or /etc/egd-pool."
0,0,"The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name , set and get the NID for the curve respectively",,,null,"The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name, set and get the NID for the curve respectively (see EC_GROUP_new_APIName ).","The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name, set and get the NID for the curve respectively (see EC_GROUP_new_APIName ). If a curve does not have a NID associated with it, then EC_GROUP_get_curve_name will return 0."
0,0,The ASN1 object utility functions such as OBJ_nid2obj_APIName are used instead,,,null,The ASN1 object utility functions such as OBJ_nid2obj_APIName are used instead.,"Although ASN1_OBJECT_new_APIName allocates a new ASN1_OBJECT structure, ASN1_OBJECT_new_APIName is almost never used in applications. The ASN1 object utility functions such as OBJ_nid2obj_APIName are used instead."
0,0,y ^ 2 mod p = x ^ 3 + ax + b mod p,,,null,y^2 mod p = x^3 +ax + b mod p,y^2 mod p = x^3 +ax + b mod p
0,0,"Unlike the mechanisms to set a cipher list , there is no method available to restrict the list of compression method on a per connection basis",,,null,"Unlike the mechanisms to set a cipher list, there is no method available to restrict the list of compression method on a per connection basis.","An OpenSSL client speaking a protocol that allows compression (SSLv3, TLSv1) will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method_APIName to the server during the handshake. Unlike the mechanisms to set a cipher list, there is no method available to restrict the list of compression method on a per connection basis."
0,0,It is equivalent to calling RSA_new_method,,,null,It is equivalent to calling RSA_new_method(NULL).,RSA_new_APIName allocates and initializes an RSA_new_APIParam_0 structure. It is equivalent to calling RSA_new_method(NULL).
0,0,Server sessions are added to the session cache,,,null,Server sessions are added to the session cache.,"Server sessions are added to the session cache. When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available. If the session is found, the server will try to reuse the session. This is the default."
0,0,The body of the record is being evaluated,,,null,The body of the record is being evaluated.,The body of the record is being evaluated.
0,0,The functions EVP_PKEY_CTX_set_app_data_APIName and EVP_PKEY_CTX_get_app_data_APIName set and retrieve an opaque pointer,,,null,The functions EVP_PKEY_CTX_set_app_data_APIName and EVP_PKEY_CTX_get_app_data_APIName set and retrieve an opaque pointer.,"The functions EVP_PKEY_CTX_set_app_data_APIName and EVP_PKEY_CTX_get_app_data_APIName set and retrieve an opaque pointer. This can be used to set some application defined value which can be retrieved in the callback: for example a handle which is used to update a ""progress dialog""."
0,0,EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object,,,null,EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object.,"EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object. EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling this function. The private key is a random integer (0 < priv_key < order, where order is the order of the EC_GROUP object). The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key."
0,0,The EVP_PKEY_CTX_new_id_APIName function allocates public key algorithm context using the algorithm specified by EVP_PKEY_CTX_new_id_APIParam_1 and ENGINE EVP_PKEY_CTX_new_id_APIParam_2,,,null,The EVP_PKEY_CTX_new_id_APIName function allocates public key algorithm context using the algorithm specified by EVP_PKEY_CTX_new_id_APIParam_1 and ENGINE EVP_PKEY_CTX_new_id_APIParam_2.,"The EVP_PKEY_CTX_new_id_APIName function allocates public key algorithm context using the algorithm specified by EVP_PKEY_CTX_new_id_APIParam_1 and ENGINE EVP_PKEY_CTX_new_id_APIParam_2. The EVP_PKEY_CTX_new_id_APIName function is normally used when no EVP_PKEY_CTX_new_id_APIParam_0 structure is associated with the operations, for example during parameter generation of key genration for some algorithms."
0,0,Any data written to a memory BIO can be recalled by reading from the memory BIO,,,null,Any data written to a memory BIO can be recalled by reading from the memory BIO.,Any data written to a memory BIO can be recalled by reading from the memory BIO. Unless the memory BIO is read only any data read from  the memory BIO is deleted from the BIO.
0,0,SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2,,,null,SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2.,SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2. The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with <SSL_new_APIName|SSL_new_APIName>. Already created SSL objects are not affected.
0,0,X509_VERIFY_PARAM_set_purpose_APIName sets the verification purpose in X509_VERIFY_PARAM_set_purpose_APIParam_1 to X509_VERIFY_PARAM_set_purpose_APIParam_2,,,null,X509_VERIFY_PARAM_set_purpose_APIName sets the verification purpose in X509_VERIFY_PARAM_set_purpose_APIParam_1 to X509_VERIFY_PARAM_set_purpose_APIParam_2.,"X509_VERIFY_PARAM_set_purpose_APIName sets the verification purpose in X509_VERIFY_PARAM_set_purpose_APIParam_1 to X509_VERIFY_PARAM_set_purpose_APIParam_2. This determines the acceptable purpose of the certificate chain, for example SSL client or SSL server."
0,0,This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name,,,null,This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name.,Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve. Refer to EC_GROUP_new_APIName for a description of curve names. This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name.
0,0,For almost all applications X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 can be set to -1 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 to 0,,,null,For almost all applications X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 can be set to -1 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 to 0.,The X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 parameters determine where a new entry should be added. For almost all applications X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 can be set to -1 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 to 0. This adds a new entry to the end of X509_NAME_add_entry_by_txt_APIParam_1 X509_NAME_add_entry_by_NID_APIParam_1 X509_NAME_delete_entry_APIParam_1 X509_NAME_add_entry_APIParam_1 X509_NAME_add_entry_by_OBJ_APIParam_1 as a single valued RelativeDistinguishedName (RDN).
0,0,Refer to EC_GROUP_new_APIName for a description of curve names,,,null,Refer to EC_GROUP_new_APIName for a description of curve names.,Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve. Refer to EC_GROUP_new_APIName for a description of curve names. This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name.
0,0,Already created SSL objects are not affected,,,null,Already created SSL objects are not affected.,SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2. The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with <SSL_new_APIName|SSL_new_APIName>. Already created SSL objects are not affected.
0,0,BN_generate_prime_ex_APIParam_1 will be used to store the number,,,If BN_generate_prime_ex_APIParam_1 is not NULL,"If BN_generate_prime_ex_APIParam_1 is not NULL, BN_generate_prime_ex_APIParam_1 will be used to store the number.","BN_generate_prime_ex_APIName generates a pseudo-random prime number of bit length BN_generate_prime_ex_APIParam_2. If BN_generate_prime_ex_APIParam_1 is not NULL, BN_generate_prime_ex_APIParam_1 will be used to store the number."
0,0,Calls to BIO_read_APIName will read data from the buffer or request a retry,1,,if no data is available.,Calls to BIO_read_APIName will read data from the buffer or request a retry if no data is available.,Calls to BIO_read_APIName will read data from the buffer or request a retry if no data is available.
0,0,SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm,,,If SSL_CIPHER_get_bits_APIParam_2 is not NULL,"If SSL_CIPHER_get_bits_APIParam_2 is not NULL, SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm.","SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1. If SSL_CIPHER_get_bits_APIParam_2 is not NULL, SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm. If SSL_CIPHER_get_bits_APIParam_1 is NULL, 0 is returned."
0,0,"As of version 0.9.7 , DSA_METHOD implementations are grouped together with other algorithmic APIs in DSA_new_method_APIParam_1 modules",,,null,"As of version 0.9.7, DSA_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DSA_new_method_APIParam_1 modules.","As of version 0.9.7, DSA_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DSA_new_method_APIParam_1 modules. If a default ENGINE is specified for DSA functionality using an ENGINE API function, that will override any DSA defaults set using the DSA API (ie DSA_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DSA and other cryptographic algorithms."
0,0,DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated,,,null,DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated; the DSS allows a maximum of 1024 bits.,DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated; the DSS allows a maximum of 1024 bits.
0,0,The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key,,,null,The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key.,"EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object. EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 must have an EC_GROUP object associated with it before calling this function. The private key is a random integer (0 < priv_key < order, where order is the order of the EC_GROUP object). The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key."
0,0,This adds a new entry to the end of X509_NAME_add_entry_by_txt_APIParam_1 X509_NAME_add_entry_by_NID_APIParam_1 X509_NAME_delete_entry_APIParam_1 X509_NAME_add_entry_APIParam_1 X509_NAME_add_entry_by_OBJ_APIParam_1 as a single valued RelativeDistinguishedName,,,null,This adds a new entry to the end of X509_NAME_add_entry_by_txt_APIParam_1 X509_NAME_add_entry_by_NID_APIParam_1 X509_NAME_delete_entry_APIParam_1 X509_NAME_add_entry_APIParam_1 X509_NAME_add_entry_by_OBJ_APIParam_1 as a single valued RelativeDistinguishedName (RDN).,The X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 parameters determine where a new entry should be added. For almost all applications X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 can be set to -1 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 to 0. This adds a new entry to the end of X509_NAME_add_entry_by_txt_APIParam_1 X509_NAME_add_entry_by_NID_APIParam_1 X509_NAME_delete_entry_APIParam_1 X509_NAME_add_entry_APIParam_1 X509_NAME_add_entry_by_OBJ_APIParam_1 as a single valued RelativeDistinguishedName (RDN).
0,0,X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2,,,null,X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2.,X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2. Acceptable values for X509_NAME_get_entry_APIParam_2 run from 0 to (X509_NAME_entry_count(name) - 1). The value returned is an internal pointer which must not be freed.
0,0,BIO_write_APIName attempts to write BIO_write_APIParam_3 bytes from BIO_write_APIParam_2 to BIO BIO_write_APIParam_1,,,null,BIO_write_APIName attempts to write BIO_write_APIParam_3 bytes from BIO_write_APIParam_2 to BIO BIO_write_APIParam_1.,BIO_write_APIName attempts to write BIO_write_APIParam_3 bytes from BIO_write_APIParam_2 to BIO BIO_write_APIParam_1.
0,0,This behaviour can also be changed,,,null,"This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table.","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with < SSL_new_APIName | SSL_new_APIName >,,,null,The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with <SSL_new_APIName|SSL_new_APIName>.,SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2. The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with <SSL_new_APIName|SSL_new_APIName>. Already created SSL objects are not affected.
0,0,The private keys loaded from file can be encrypted,,,null,The private keys loaded from file can be encrypted.,"The private keys loaded from file can be encrypted. In order to successfully load encrypted keys, a function returning the passphrase must have been supplied, see SSL_CTX_set_default_passwd_cb_APIName . (Certificate files might be encrypted as well from the technical point of view, it however does not make sense as the data in the certificate is considered public anyway.)"
0,0,The previous two bugs are fixed in the newer EVP_SignDigest_APIName function,,,null,The previous two bugs are fixed in the newer EVP_SignDigest*_APIName function.,The previous two bugs are fixed in the newer EVP_SignDigest*_APIName function.
0,0,Calling BIO_reset_APIName on a buffering BIO clears any buffered data,,,null,Calling BIO_reset_APIName on a buffering BIO clears any buffered data.,Calling BIO_reset_APIName on a buffering BIO clears any buffered data.
0,0,The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1,,,null,The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1.,The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1. An error is returned if the parameters are missing in EVP_PKEY_copy_parameters_APIParam_2 or present in both EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 and mismatch. If the parameters in EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 are both present and match this function has no effect.
0,0,PEM_write_bio_CMS_stream_APIName outputs a CMS_ContentInfo structure in PEM format,,,null,PEM_write_bio_CMS_stream_APIName outputs a CMS_ContentInfo structure in PEM format.,PEM_write_bio_CMS_stream_APIName outputs a CMS_ContentInfo structure in PEM format.
0,0,No BIO was connected to the SSL object,,,null,No BIO was connected to the SSL object,No BIO was connected to the SSL object
0,0,No certificate was presented by the peer or no connection was established,,,null,No certificate was presented by the peer or no connection was established.,No certificate was presented by the peer or no connection was established.
0,0,only any data read from the memory BIO is deleted from the BIO,1,,Unless the memory BIO is read ,Unless the memory BIO is read only any data read from  the memory BIO is deleted from the BIO.,Any data written to a memory BIO can be recalled by reading from the memory BIO. Unless the memory BIO is read only any data read from  the memory BIO is deleted from the BIO.
0,0,the server will try to reuse the session,,,If the session is found,"If the session is found, the server will try to reuse the session.","Server sessions are added to the session cache. When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available. If the session is found, the server will try to reuse the session. This is the default."
0,0,These functions apply to SSL/TLS servers only,,,null,These functions apply to SSL/TLS servers only.,These functions apply to SSL/TLS servers only.
0,0,They can take appropriate action based on the status of the certificate,,,null,They can then take appropriate action based on the status of the certificate.,Applications will typically call OCSP_resp_find_status_APIName using the certificate ID of interest and then check its validity using OCSP_check_validity_APIName. They can then take appropriate action based on the status of the certificate.
0,0,a new socket BIO is created for the connection and appended to the chain,,,When a connection is established,When a connection is established a new socket BIO is created for the connection and appended to the chain.,When a connection is established a new socket BIO is created for the connection and appended to the chain. That is the chain is now accept->socket. This effectively means that attempting I/O on an initial accept socket will await an incoming connection then perform I/O on an incoming connection.
0,0,"the server looks for the corresponding session in the internal session cache , in the external cache if available",,,When a client proposes a session to be reused,"When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available.","Server sessions are added to the session cache. When a client proposes a session to be reused, the server looks for the corresponding session in (first) the internal session cache (unless SSL_SESS_CACHE_NO_INTERNAL_LOOKUP is set), then (second) in the external cache if available. If the session is found, the server will try to reuse the session. This is the default."
0,0,The decompression function received improper input,,,null,The decompression function received improper input (eg data that would expand to excessive length).,The decompression function received improper input (eg data that would expand to excessive length). This message is always fatal.
0,0,"For all functions , BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 is a previously allocated BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 used for temporary variables",,,null,"For all functions, BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 is a previously allocated BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 used for temporary variables; see BN_CTX_new_APIName .","For all functions, BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 is a previously allocated BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 used for temporary variables; see BN_CTX_new_APIName ."
0,0,Applications will typically call OCSP_resp_find_status_APIName using the certificate ID of interest and check its validity using OCSP_check_validity_APIName,,,null,Applications will typically call OCSP_resp_find_status_APIName using the certificate ID of interest and then check its validity using OCSP_check_validity_APIName.,Applications will typically call OCSP_resp_find_status_APIName using the certificate ID of interest and then check its validity using OCSP_check_validity_APIName. They can then take appropriate action based on the status of the certificate.
0,0,The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1,,,null,The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1.,"The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1. If EVP_PKEY_derive_APIParam_2 is NULL ,then the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter. If EVP_PKEY_derive_APIParam_2 is not NULL ,then before the call the EVP_PKEY_derive_APIParam_3 parameter should contain the length of the EVP_PKEY_derive_APIParam_2 buffer, if the call is successful ,the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3."
0,0,SSL_shutdown_APIName supports both uni - and bidirectional shutdown by SSL_shutdown_APIName 2 step behaviour,,,null,SSL_shutdown_APIName supports both uni- and bidirectional shutdown by SSL_shutdown_APIName 2 step behaviour.,SSL_shutdown_APIName supports both uni- and bidirectional shutdown by SSL_shutdown_APIName 2 step behaviour.
0,0,BUF_MEM_new_APIName allocates a new buffer of zero size,,,null,BUF_MEM_new_APIName allocates a new buffer of zero size.,BUF_MEM_new_APIName allocates a new buffer of zero size.
0,0,"there is no need to use these pseudo-digests in OpenSSL 1.0.0 and later , they are however retained for compatibility",,,null,"Note: there is no need to use these pseudo-digests in OpenSSL 1.0.0 and later, they are however retained for compatibility.","EVP_dss_APIName and EVP_dss1_APIName return EVP_dss_APIParam_0 EVP_dss1_APIParam_0 structures for SHA and SHA1 digest algorithms but using DSS (DSA) for the signature algorithm. Note: there is no need to use these pseudo-digests in OpenSSL 1.0.0 and later, they are however retained for compatibility."
0,0,BN_from_montgomery_APIName performs the Montgomery reduction BN_from_montgomery_APIParam_1 = BN_from_montgomery_APIParam_2R ^ -1,,,null,BN_from_montgomery_APIName performs the Montgomery reduction BN_from_montgomery_APIParam_1 = BN_from_montgomery_APIParam_2*R^-1.,BN_from_montgomery_APIName performs the Montgomery reduction BN_from_montgomery_APIParam_1 = BN_from_montgomery_APIParam_2*R^-1.
0,0,EC_POINT_dup creates a new EC_POINT object and copies the content from EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 to the newly created EC_POINT object,,,null,EC_POINT_dup creates a new EC_POINT object and copies the content from EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 to the newly created EC_POINT object.,EC_POINT_dup creates a new EC_POINT object and copies the content from EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 to the newly created EC_POINT object.
0,0,SSL_write_APIName writes SSL_write_APIParam_3 bytes from the buffer SSL_write_APIParam_2 into the specified SSL_write_APIParam_1 connection,,,null,SSL_write_APIName writes SSL_write_APIParam_3 bytes from the buffer SSL_write_APIParam_2 into the specified SSL_write_APIParam_1 connection.,SSL_write_APIName writes SSL_write_APIParam_3 bytes from the buffer SSL_write_APIParam_2 into the specified SSL_write_APIParam_1 connection.
0,0,SSL_free_APIName does not provide diagnostic information,,,null,SSL_free_APIName does not provide diagnostic information.,SSL_free_APIName does not provide diagnostic information.
0,0,SSL_set_ex_data_APIName is used to store application data at SSL_set_ex_data_APIParam_3 for SSL_set_ex_data_APIParam_2 into the SSL_set_ex_data_APIParam_1 object,,,null,SSL_set_ex_data_APIName is used to store application data at SSL_set_ex_data_APIParam_3 for SSL_set_ex_data_APIParam_2 into the SSL_set_ex_data_APIParam_1 object.,SSL_set_ex_data_APIName is used to store application data at SSL_set_ex_data_APIParam_3 for SSL_set_ex_data_APIParam_2 into the SSL_set_ex_data_APIParam_1 object.
0,0,After the call to EVP_PKEY_keygen_init_APIName or EVP_PKEY_paramgen_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_keygen_init_APIName or EVP_PKEY_paramgen_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_keygen_init_APIName or EVP_PKEY_paramgen_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,EVP_SignUpdate_APIName hashes EVP_SignUpdate_APIParam_3 bytes of data at EVP_SignUpdate_APIParam_2 into the signature context EVP_SignUpdate_APIParam_1,,,null,EVP_SignUpdate_APIName hashes EVP_SignUpdate_APIParam_3 bytes of data at EVP_SignUpdate_APIParam_2 into the signature context EVP_SignUpdate_APIParam_1.,EVP_SignUpdate_APIName hashes EVP_SignUpdate_APIParam_3 bytes of data at EVP_SignUpdate_APIParam_2 into the signature context EVP_SignUpdate_APIParam_1. This function can be called several times on the same EVP_SignUpdate_APIParam_1 to include additional data.
0,0,This function can be called several times on the same EVP_SignUpdate_APIParam_1 to include additional data,,,null,This function can be called several times on the same EVP_SignUpdate_APIParam_1 to include additional data.,EVP_SignUpdate_APIName hashes EVP_SignUpdate_APIParam_3 bytes of data at EVP_SignUpdate_APIParam_2 into the signature context EVP_SignUpdate_APIParam_1. This function can be called several times on the same EVP_SignUpdate_APIParam_1 to include additional data.
0,0,The usage of all of these functions is similar to the d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page,,,null,The usage of all of these functions is similar to the d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.,The usage of all of these functions is similar to the d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.
0,0,SSL_flush_sessions_APIName is a synonym for SSL_CTX_flush_sessions_APIName,,,null,SSL_flush_sessions_APIName is a synonym for SSL_CTX_flush_sessions_APIName.,SSL_flush_sessions_APIName is a synonym for SSL_CTX_flush_sessions_APIName.
0,0,DSA_SIG_free_APIName frees the DSA_SIG_free_APIParam_1 structure and its components,,,null,DSA_SIG_free_APIName frees the DSA_SIG_free_APIParam_1 structure and its components.,DSA_SIG_free_APIName frees the DSA_SIG_free_APIParam_1 structure and its components. The values are erased before the memory is returned to the system.
0,0,The buffer library handles simple character arrays,,,null,The buffer library handles simple character arrays.,"The buffer library handles simple character arrays. Buffers are used for various purposes in the library, most notably memory BIOs."
0,0,After the call to EVP_PKEY_derive_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_derive_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_derive_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,"ENGINE_by_id_APIName , ENGINE_get_first_APIName , ENGINE_get_last_APIName , ENGINE_get_next_APIName , ENGINE_get_prev_APIName",,,null,"There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName.","The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName. All structural references should be released by a corresponding to call to the ENGINE_free_APIName function. The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released."
0,0,There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY,,,null,There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY.,"The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY. These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey. If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key."
4,0,this function has no effect,1,,If the parameters in EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 are both present and match this function,If the parameters in EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 are both present and match this function has no effect.,The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1. An error is returned if the parameters are missing in EVP_PKEY_copy_parameters_APIParam_2 or present in both EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 and mismatch. If the parameters in EVP_PKEY_copy_parameters_APIParam_2 and EVP_PKEY_copy_parameters_APIParam_1 are both present and match this function has no effect.
0,0,the session object will be kept and all settings corresponding.,1,,If a session was closed cleanly,"If a session was closed cleanly, the session object will be kept and all settings corresponding.","If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that eg the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if SSLv23_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties."
0,0,BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1,,,null,BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1.,BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1. After this call no further writes on BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 are allowed (they will return an error). Reads on the other half of the pair will return any pending data or EOF when all pending data has been read.
0,0,Typically the server callback would set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName,1,,null,Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName.,"A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName. A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument."
0,0,see draft-ietf-tls-downgrade-scsv-00 for details,,,null,To be set only by applications that reconnect with a downgraded protocol version; see draft-ietf-tls-downgrade-scsv-00 for details.,Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications that reconnect with a downgraded protocol version; see draft-ietf-tls-downgrade-scsv-00 for details.
0,0,Send TLS_FALLBACK_SCSV in the ClientHello,,,null,Send TLS_FALLBACK_SCSV in the ClientHello.,Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications that reconnect with a downgraded protocol version; see draft-ietf-tls-downgrade-scsv-00 for details.
0,0,A failure or the X509_NAME could not be extracted from SSL_add_client_CA_APIParam_2 SSL_CTX_add_client_CA_APIParam_2,,,while manipulating the STACK_OF object occurred,A failure while manipulating the STACK_OF(X509_NAME) object occurred or the X509_NAME could not be extracted from SSL_add_client_CA_APIParam_2 SSL_CTX_add_client_CA_APIParam_2.,A failure while manipulating the STACK_OF(X509_NAME) object occurred or the X509_NAME could not be extracted from SSL_add_client_CA_APIParam_2 SSL_CTX_add_client_CA_APIParam_2. Check the error stack to find out the reason.
0,0,Typically the server callback would obtain the OCSP response to be sent back,1,,null,Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName.,"A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName. A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument."
0,0,"Buffers are used for various purposes in the library , most notably memory BIOs",,,null,"Buffers are used for various purposes in the library, most notably memory BIOs.","The buffer library handles simple character arrays. Buffers are used for various purposes in the library, most notably memory BIOs."
0,0,The server either agrees to reuse the session or it starts a full handshake,,,null,The server then either agrees to reuse the session or it starts a full handshake (to create a new session).,"In order to reuse a session, a client must send the session's id to the server. It can only send exactly one id. The server then either agrees to reuse the session or it starts a full handshake (to create a new session)."
0,0,eg the special method used will be kept for the next handshake,,,during the session,"This explicitly means, that eg the special method used during the session will be kept for the next handshake.","If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that eg the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if SSLv23_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties."
0,0,"Similarly , SSL_get_psk_identity_APIName is used to retrieve the PSK identity used",,,during the connection setup,"Similarly, SSL_get_psk_identity_APIName is used to retrieve the PSK identity used during the connection setup.","SSL_get_psk_identity_hint_APIName is used to retrieve the PSK identity hint used during the connection setup related to SSL object SSL_get_psk_identity_hint_APIParam_1 SSL_get_psk_identity_APIParam_1. Similarly, SSL_get_psk_identity_APIName is used to retrieve the PSK identity used during the connection setup."
0,0,the public key is not encoded along with the private key,,,If EC_PKEY_NO_PUBKEY is set,"If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key.","The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY. These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey. If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key."
0,0,"This explicitly means , that",,,null,"This explicitly means, that eg the special method used during the session will be kept for the next handshake.","If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that eg the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if SSLv23_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties."
0,0,SSL_get_psk_identity_hint_APIName is used to retrieve the PSK identity hint used,,,during the connection setup related to SSL object SSL_get_psk_identity_hint_APIParam_1 SSL_get_psk_identity_APIParam_1,SSL_get_psk_identity_hint_APIName is used to retrieve the PSK identity hint used during the connection setup related to SSL object SSL_get_psk_identity_hint_APIParam_1 SSL_get_psk_identity_APIParam_1.,"SSL_get_psk_identity_hint_APIName is used to retrieve the PSK identity hint used during the connection setup related to SSL object SSL_get_psk_identity_hint_APIParam_1 SSL_get_psk_identity_APIParam_1. Similarly, SSL_get_psk_identity_APIName is used to retrieve the PSK identity used during the connection setup."
0,0,this functionality is disabled and tickets will not be used by clients or servers.,1,,If this option is set,If this option is set this functionality is disabled and tickets will not be used by clients or servers.,If this option is set this functionality is disabled and tickets will not be used by clients or servers.
0,0,the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3,,,"If EVP_PKEY_derive_APIParam_2 is not NULL , before the call the EVP_PKEY_derive_APIParam_3 parameter should contain the length of the EVP_PKEY_derive_APIParam_2 buffer , if the call is successful","If EVP_PKEY_derive_APIParam_2 is not NULL ,then before the call the EVP_PKEY_derive_APIParam_3 parameter should contain the length of the EVP_PKEY_derive_APIParam_2 buffer, if the call is successful ,the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3.","The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1. If EVP_PKEY_derive_APIParam_2 is NULL ,then the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter. If EVP_PKEY_derive_APIParam_2 is not NULL ,then before the call the EVP_PKEY_derive_APIParam_3 parameter should contain the length of the EVP_PKEY_derive_APIParam_2 buffer, if the call is successful ,the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3."
0,0,the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter,,,If EVP_PKEY_derive_APIParam_2 is NULL,"If EVP_PKEY_derive_APIParam_2 is NULL ,then the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter.","The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1. If EVP_PKEY_derive_APIParam_2 is NULL ,then the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter. If EVP_PKEY_derive_APIParam_2 is not NULL ,then before the call the EVP_PKEY_derive_APIParam_3 parameter should contain the length of the EVP_PKEY_derive_APIParam_2 buffer, if the call is successful ,the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3."
0,0,"a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method , * _ methods were chosen on startup .",1,,if the session was a TLSv1 session,"So if the session was a TLSv1 session , a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method ,  * _ methods were chosen on startup .","If a session was closed cleanly, the session object will be kept and all settings corresponding. This explicitly means, that eg the special method used during the session will be kept for the next handshake. So if the session was a TLSv1 session, a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method, even if SSLv23_*_methods were chosen on startup. This will might lead to connection failures (see SSL_new_APIName ) for a description of the method's properties."
0,0,A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error,,,null,A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error.,"Although the decryption operation can produce an error if padding is enabled, it is not a strong test that the input data or key is correct. A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error."
0,0,simply copy the data,,,null,simply copy the data,simply copy the data
0,0,This is a wrapper round the platform 's socket routines,,,null,This is a wrapper round the platform's socket routines.,BIO_s_socket_APIName returns the socket BIO method. This is a wrapper round the platform's socket routines.
0,0,"EVP_EncryptFinal_APIName , EVP_DecryptFinal_APIName and EVP_CipherFinal_APIName are identical to EVP_EncryptFinal_ex_APIName , EVP_DecryptFinal_ex_APIName and EVP_CipherFinal_ex_APIName",,,null,"EVP_EncryptFinal_APIName, EVP_DecryptFinal_APIName and EVP_CipherFinal_APIName are identical to EVP_EncryptFinal_ex_APIName, EVP_DecryptFinal_ex_APIName and EVP_CipherFinal_ex_APIName.","EVP_EncryptFinal_APIName, EVP_DecryptFinal_APIName and EVP_CipherFinal_APIName are identical to EVP_EncryptFinal_ex_APIName, EVP_DecryptFinal_ex_APIName and EVP_CipherFinal_ex_APIName. In previous releases they also cleaned up the EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1, but this is no longer done and EVP_CIPHER_CTX_clean_APIName must be called to free any context resources."
0,0,BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode,,,null,BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode.,"BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR."
0,0,y ^ 2 + xy = x ^ 3 + ax ^ 2 + b,,,null,y^2 + xy = x^3 + ax^2 + b (where b != 0),y^2 + xy = x^3 + ax^2 + b (where b != 0)
0,0,"EC_GROUP_copy , EC_GROUP_set_generator , EC_GROUP_check , EC_GROUP_check_discriminant , EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis",,,null,"The following functions return 1 on success or 0 on error: EC_GROUP_copy, EC_GROUP_set_generator, EC_GROUP_check, EC_GROUP_check_discriminant, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis.","The following functions return 1 on success or 0 on error: EC_GROUP_copy, EC_GROUP_set_generator, EC_GROUP_check, EC_GROUP_check_discriminant, EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis."
0,0,The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1,,,null,The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1.,"The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY. These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey. If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key."
0,0,it is the applications responsibility to set the inner content type of any outer CMS_ContentInfo structures,,,null,In this case it is the applications responsibility to set the inner content type of any outer CMS_ContentInfo structures.,"It is possible to chain multiple BIOs to, for example, create a triple wrapped signed, enveloped, signed structure. In this case it is the applications responsibility to set the inner content type of any outer CMS_ContentInfo structures."
0,0,RIPEMD160_Init_APIName initializes a RIPEMD160_Init_APIParam_1 structure,,,null,RIPEMD160_Init_APIName initializes a RIPEMD160_Init_APIParam_1 structure.,RIPEMD160_Init_APIName initializes a RIPEMD160_Init_APIParam_1 structure.
0,0,other sockets can bind to the same port,,,If BIO_BIND_REUSEADDR is set,If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port.,"BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR."
0,0,The number of bits processed can be different from the secret bits,,,null,The number of bits processed can be different from the secret bits.,"The number of bits processed can be different from the secret bits. An export cipher like eg EXP-RC4-MD5 has only 40 secret bits. The algorithm does use the full 128 bits (which would be returned for SSL_CIPHER_get_bits_APIParam_2), of which however 88bits are fixed. The search space is hence only 40 bits."
0,0,"The predecessor of SHA-1 , SHA , is also implemented , but",,,null,"The predecessor of SHA-1, SHA, is also implemented, but SHA-1 and SHA should be used only when backward compatibility is required.","The predecessor of SHA-1, SHA, is also implemented, but SHA-1 and SHA should be used only when backward compatibility is required."
0,0,the public parameters for the curve are not encoded along with the private key,,,If EC_PKEY_NO_PARAMETERS is set,"If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key.","The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY. These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey. If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key."
0,0,After the call to EVP_PKEY_verify_recover_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_verify_recover_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_verify_recover_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,"BIO_get_fp_APIName retrieves the fp of a file BIO , BIO_get_fp_APIName is a macro",,,null,"BIO_get_fp_APIName retrieves the fp of a file BIO, BIO_get_fp_APIName is a macro.","BIO_get_fp_APIName retrieves the fp of a file BIO, BIO_get_fp_APIName is a macro."
0,0,"BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 has the same meaning as in BIO_new_fp_APIName , BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 is a macro",,,null,"BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 has the same meaning as in BIO_new_fp_APIName, BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 is a macro.","BIO_set_fp_APIName set the fp of a file BIO to BIO_set_fp_APIParam_2. BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 has the same meaning as in BIO_new_fp_APIName, BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 is a macro."
0,0,Blowfish is a block cipher that operates on 64 bit blocks of data,,,null,Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data.,"Blowfish is a block cipher that operates on 64 bit (8 byte) blocks of data. Blowfish uses a variable size key, but typically, 128 bit (16 byte) keys are considered good for strong encryption. Blowfish can be used in the same modes as DES (see des_modes_APIName ). Blowfish is currently one of the faster block ciphers. Blowfish is quite a bit faster than DES, and much faster than IDEA or RC2."
0,0,This means that calls to EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data,,,null,This means that calls to EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.,The call to EVP_VerifyFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.
0,0,Any data written or read through a digest BIO using BIO_read_APIName and BIO_write_APIName is digested,,,null,Any data written or read through a digest BIO using BIO_read_APIName and BIO_write_APIName is digested.,Any data written or read through a digest BIO using BIO_read_APIName and BIO_write_APIName is digested.
0,0,For most applications the EVP_DigestInit_ex_APIParam_3 parameter to EVP_DigestInit_ex_APIName will be set to NULL to use the default digest implementation,,,null,For most applications the EVP_DigestInit_ex_APIParam_3 parameter to EVP_DigestInit_ex_APIName will be set to NULL to use the default digest implementation.,For most applications the EVP_DigestInit_ex_APIParam_3 parameter to EVP_DigestInit_ex_APIName will be set to NULL to use the default digest implementation.
0,0,Note that different libraries may use the same value to signal different functions and reasons,,,null,Note that different libraries may use the same value to signal different functions and reasons.,Each sub-library of OpenSSL has a unique library number; function and reason codes are unique within each sub-library. Note that different libraries may use the same value to signal different functions and reasons.
0,0,the session data are negotiated using the ephemeral/temporary RSA key and the RSA key supplied and certified by the certificate chain is only used for signing,,,null,In this case the session data are negotiated using the ephemeral/temporary RSA key and the RSA key supplied and certified by the certificate chain is only used for signing.,"When using a cipher with RSA authentication, an ephemeral RSA key exchange can take place. In this case the session data are negotiated using the ephemeral/temporary RSA key and the RSA key supplied and certified by the certificate chain is only used for signing."
0,0,"Objects do not need to be in the internal tables to be processed , the functions OBJ_txt2obj_APIName and OBJ_obj2txt_APIName can process the numerical form of an OID",,,null,"Objects do not need to be in the internal tables to be processed, the functions OBJ_txt2obj_APIName and OBJ_obj2txt_APIName can process the numerical form of an OID.","Objects do not need to be in the internal tables to be processed, the functions OBJ_txt2obj_APIName and OBJ_obj2txt_APIName can process the numerical form of an OID."
0,0,"The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines , Windows is one such platform",,,null,"The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines, Windows is one such platform.","The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines, Windows is one such platform. Any code mixing the two will not work on all platforms."
0,0,"This implies , that all corresponding sessions from an external session cache are removed as well",,,null,"This implies, that all corresponding sessions from an external session cache are removed as well.","If a session-remove callback is set (SSL_CTX_sess_set_remove_cb_APIName), this callback will be called for each session being freed from SSL_CTX_free_APIParam_1's session cache. This implies, that all corresponding sessions from an external session cache are removed as well. If this is not desired, the user should explicitly unset the callback by calling SSL_CTX_sess_set_remove_cb(SSL_CTX_free_APIParam_1, NULL) prior to calling SSL_CTX_free_APIName."
0,0,the EGD-interface compatible daemon PRNGD is available from http,,,null,the EGD-interface compatible daemon PRNGD is available from http://prngd.sourceforge.net/ .,"Alternatively, the EGD-interface compatible daemon PRNGD can be used. the EGD-interface compatible daemon PRNGD is available from http://prngd.sourceforge.net/ . PRNGD does employ an internal PRNG itself and can therefore never run out of entropy."
0,0,The SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object that received or sent the message,,,null,The SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object that received or sent the message.,The SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object that received or sent the message.
0,0,This means that calls to EVP_SignUpdate_APIName and EVP_SignFinal_APIName can be called later to digest and sign additional data,,,null,This means that calls to EVP_SignUpdate_APIName and EVP_SignFinal_APIName can be called later to digest and sign additional data.,The call to EVP_SignFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_SignUpdate_APIName and EVP_SignFinal_APIName can be called later to digest and sign additional data.
0,0,The data is zeroed before freeing up in case the buffer contains sensitive data,,,null,The data is zeroed before freeing up in case the buffer contains sensitive data.,BUF_MEM_free_APIName frees up an already existing buffer. The data is zeroed before freeing up in case the buffer contains sensitive data.
0,0,RSA_new_method_APIName allocates and initializes an RSA_new_method_APIParam_1 structure so that RSA_new_method_APIParam_1 will be used for the RSA operations,,,null,RSA_new_method_APIName allocates and initializes an RSA_new_method_APIParam_1 structure so that RSA_new_method_APIParam_1 will be used for the RSA operations.,"RSA_new_method_APIName allocates and initializes an RSA_new_method_APIParam_1 structure so that RSA_new_method_APIParam_1 will be used for the RSA operations. If RSA_new_method_APIParam_1 is NULL, the default method is used."
0,0,PKCS # 1 v1 .5 padding with an SSL-specific modification that denotes that the server is SSL3 capable,,,null,PKCS #1 v1.5 padding with an SSL-specific modification that denotes that the server is SSL3 capable.,PKCS #1 v1.5 padding with an SSL-specific modification that denotes that the server is SSL3 capable.
0,0,"Old documentation indicated a difference between 0 and -1 , and that -1 was retryable",,,null,"Old documentation indicated a difference between 0 and -1, and that -1 was retryable.","Old documentation indicated a difference between 0 and -1, and that -1 was retryable. You should instead call SSL_get_error_APIName to find out if it's retryable."
0,0,after one structure is encoded or decoded another will processed after it,,,null,The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions: after one structure is encoded or decoded another will processed after it.,The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions: after one structure is encoded or decoded another will processed after it.
0,0,Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function,,,null,Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function.,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName. The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data. Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function. If the server has not provided any response data then SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1.
0,0,the sending of the `` close notify '' shutdown alert and the reception of the peer 's `` close notify '' shutdown alert,,,null,"The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert.","The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert. According to the TLS standard, it is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response (this way resources can be saved, as the process can already terminate or serve another connection). When the underlying connection shall be used for more communications, the complete shutdown procedure (bidirectional ""close notify"" alerts) must be performed, so that the peers stay synchronized."
0,0,"BIO_push_APIName joins two BIO chains whereas BIO_pop_APIName deletes a single BIO from a chain , the deleted BIO does not need to be at the end of a chain",,,null,"BIO_push_APIName joins two BIO chains whereas BIO_pop_APIName deletes a single BIO from a chain, the deleted BIO does not need to be at the end of a chain.","The names of these functions are perhaps a little misleading. BIO_push_APIName joins two BIO chains whereas BIO_pop_APIName deletes a single BIO from a chain, the deleted BIO does not need to be at the end of a chain."
0,0,The parser assumes that the CMS_ContentInfo structure is always base64 encoded and will not handle the case where the CMS_ContentInfo structure is in binary format or uses quoted printable format,,,null,The parser assumes that the CMS_ContentInfo structure is always base64 encoded and will not handle the case where the CMS_ContentInfo structure is in binary format or uses quoted printable format.,The parser assumes that the CMS_ContentInfo structure is always base64 encoded and will not handle the case where the CMS_ContentInfo structure is in binary format or uses quoted printable format.
0,0,the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes,,,null,the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes.,"On systems without /dev/*random devices providing entropy from the kernel, the EGD entropy gathering daemon can be used to collect entropy. the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes. Several chunks can be queried during one connection."
0,0,the internal session cache will collect all sessions established up to the specified maximum number,,,If enabled,"If enabled, the internal session cache will collect all sessions established up to the specified maximum number (see SSL_CTX_sess_set_cache_size_APIName).","If enabled, the internal session cache will collect all sessions established up to the specified maximum number (see SSL_CTX_sess_set_cache_size_APIName). As sessions will not be reused ones they are expired, they should be removed from the cache to save resources. This can either be done automatically whenever 255 new sessions were established (see SSL_CTX_set_session_cache_mode_APIName ) or manually by calling SSL_CTX_flush_sessions_APIName."
0,0,passing a public key to EVP_PKEY_print_private_APIName will only print the public components,,,null,For example passing a public key to EVP_PKEY_print_private_APIName will only print the public components.,"If the key does not include all the components indicated by the function, then only those contained in the key will be printed. For example passing a public key to EVP_PKEY_print_private_APIName will only print the public components."
0,0,"According to the TLS standard , it is acceptable for an application to only send its shutdown alert and close the underlying connection without waiting for the peer 's response",,,null,"According to the TLS standard, it is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response (this way resources can be saved, as the process can already terminate or serve another connection).","The shutdown procedure consists of 2 steps: the sending of the ""close notify"" shutdown alert and the reception of the peer's ""close notify"" shutdown alert. According to the TLS standard, it is acceptable for an application to only send its shutdown alert and then close the underlying connection without waiting for the peer's response (this way resources can be saved, as the process can already terminate or serve another connection). When the underlying connection shall be used for more communications, the complete shutdown procedure (bidirectional ""close notify"" alerts) must be performed, so that the peers stay synchronized."
0,0,The BN_RECP_CTX_set_APIParam_1 BN_div_recp_APIParam_4 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 structure is defined as follows,,,null,The BN_RECP_CTX_set_APIParam_1 BN_div_recp_APIParam_4 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 structure is defined as follows:,The BN_RECP_CTX_set_APIParam_1 BN_div_recp_APIParam_4 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 structure is defined as follows:
0,0,The actual NID value is an internal value which may not have a corresponding OBJECT IDENTIFIER,,,null,The actual NID value is an internal value which may not have a corresponding OBJECT IDENTIFIER.,EVP_CIPHER_nid_APIName and EVP_CIPHER_CTX_nid_APIName return the NID of a cipher when passed an EVP_EncryptFinal_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CIPHER_param_to_asn1_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_1 or EVP_EncryptFinal_APIParam_1 EVP_CIPHER_CTX_init_APIParam_1 EVP_CIPHER_CTX_cleanup_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_CIPHER_CTX_set_padding_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CIPHER_param_to_asn1_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_CTX_set_key_length_APIParam_1 EVP_CIPHER_asn1_to_param_APIParam_1 EVP_DecryptUpdate_APIParam_1 structure. The actual NID value is an internal value which may not have a corresponding OBJECT IDENTIFIER.
0,0,as a result a statically linked executable can be quite large,,,null,Calling OpenSSL_add_all_algorithms_APIName links in all algorithms: as a result a statically linked executable can be quite large.,"Calling OpenSSL_add_all_algorithms_APIName links in all algorithms: as a result a statically linked executable can be quite large. If this is important, it is possible to just add the required ciphers and digests."
0,0,RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data,,,null,RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data.,RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3. RSA_private_decrypt_APIParam_3 must point to a memory section large enough to hold the decrypted data (which is smaller than RSA_size(RSA_private_decrypt_APIParam_4)). RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data.
0,0,instead of calling the RC4 functions directly,,,null,instead of calling the RC4 functions directly.,Applications should use the higher level functions EVP_EncryptInit_APIName etc. instead of calling the RC4 functions directly.
0,0,"lh_stats_bio_APIName , lh_node_stats_bio_APIName and lh_node_usage_stats_bio_APIName are the same as the above , except that the output goes to a lh_stats_bio_APIParam_2 lh_node_stats_bio_APIParam_2 lh_node_usage_stats_bio_APIParam_2",,,null,"lh_stats_bio_APIName, lh_node_stats_bio_APIName and lh_node_usage_stats_bio_APIName are the same as the above, except that the output goes to a lh_stats_bio_APIParam_2 lh_node_stats_bio_APIParam_2 lh_node_usage_stats_bio_APIParam_2.","lh_stats_bio_APIName, lh_node_stats_bio_APIName and lh_node_usage_stats_bio_APIName are the same as the above, except that the output goes to a lh_stats_bio_APIParam_2 lh_node_stats_bio_APIParam_2 lh_node_usage_stats_bio_APIParam_2."
0,0,"The prompt itself is divided in two , one part being the descriptive text and one describing the possible answers",,,null,"The prompt itself is divided in two, one part being the descriptive text (given through the UI_add_input_boolean_APIParam_2 argument) and one describing the possible answers (given through the UI_add_input_boolean_APIParam_3 argument).","UI_add_input_boolean_APIName adds a prompt to the UI that's supposed to be answered in a boolean way, with a single character for yes and a different character for no. A set of characters that can be used to cancel the prompt is given as well. The prompt itself is divided in two, one part being the descriptive text (given through the UI_add_input_boolean_APIParam_2 argument) and one describing the possible answers (given through the UI_add_input_boolean_APIParam_3 argument)."
0,0,"The ` actual load ' is the average number of items per ` bucket ' , but only for buckets which contain entries",,,null,"The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries.","lh_node_usage_stats_APIName prints out a short summary of the state of the hash table. lh_node_usage_stats_APIName prints the 'load' and the 'actual load'. The load is the average number of data items per 'bucket' in the hash table. The 'actual load' is the average number of items per 'bucket', but only for buckets which contain entries. So the 'actual load' is the average number of searches that will need to find an item in the hash table, while the 'load' is the average number that will be done to record a miss."
0,0,Freeing up any half of the pair will automatically destroy the association,,,null,Freeing up any half of the pair will automatically destroy the association.,BIO_destroy_pair_APIName destroys the association between two connected BIOs. Freeing up any half of the pair will automatically destroy the association.
0,0,The error codes can be obtained by ERR_get_error_APIName,,,null,The error codes can be obtained by ERR_get_error_APIName .,"For the other functions, 1 is returned for success, 0 on error. The error codes can be obtained by ERR_get_error_APIName ."
0,0,Check the error stack to find out the reason,,,null,Check the error stack to find out the reason.,The creation of a new SSL structure failed. Check the error stack to find out the reason.
0,0,"UI_add_input_boolean_APIName adds a prompt to the UI that 's supposed to be answered in a boolean way , with a single character for yes and a different character for no",,,null,"UI_add_input_boolean_APIName adds a prompt to the UI that's supposed to be answered in a boolean way, with a single character for yes and a different character for no.","UI_add_input_boolean_APIName adds a prompt to the UI that's supposed to be answered in a boolean way, with a single character for yes and a different character for no. A set of characters that can be used to cancel the prompt is given as well. The prompt itself is divided in two, one part being the descriptive text (given through the UI_add_input_boolean_APIParam_2 argument) and one describing the possible answers (given through the UI_add_input_boolean_APIParam_3 argument)."
0,0,A memory BIO is a source/sink BIO which uses memory for its I/O,,,null,A memory BIO is a source/sink BIO which uses memory for its I/O.,A memory BIO is a source/sink BIO which uses memory for its I/O. Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data.
0,0,A new point is constructed by calling the function EC_POINT_new and providing the EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_point2oct_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 object that the point relates to,,,null,A new point is constructed by calling the function EC_POINT_new and providing the EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_point2oct_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 object that the point relates to.,An EC_POINT represents a point on a curve. A new point is constructed by calling the function EC_POINT_new and providing the EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_point2oct_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 object that the point relates to.
0,0,This is mostly a legacy of Eric Young writing this library for the reasons of implementing what looked like a nice algorithm rather than for a particular software product,,,null,This is mostly a legacy of Eric Young writing this library for the reasons of implementing what looked like a nice algorithm rather than for a particular software product.,The lh_node_usage_stats_APIParam_1 lh_node_stats_APIParam_1 lh_stats_bio_APIParam_1 lh_stats_APIParam_1 lh_node_usage_stats_bio_APIParam_1 lh_node_stats_bio_APIParam_1 structure records statistics about most aspects of accessing the hash table. This is mostly a legacy of Eric Young writing this library for the reasons of implementing what looked like a nice algorithm rather than for a particular software product.
0,0,This is a wrapper round the platform 's TCP/IP socket accept routines,,,null,This is a wrapper round the platform's TCP/IP socket accept routines.,BIO_s_accept_APIName returns the accept BIO method. This is a wrapper round the platform's TCP/IP socket accept routines.
0,0,"In case of an error , an error code is set , which can be obtained by ERR_get_error_APIName",,,null,"In case of an error, an error code is set, which can be obtained by ERR_get_error_APIName .","BN_CTX_get_APIName returns a pointer to the BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0, or NULL on error. Once BN_CTX_get_APIName has failed, the subsequent calls will return NULL as well, so it is sufficient to check the return value of the last BN_CTX_get_APIName call. In case of an error, an error code is set, which can be obtained by ERR_get_error_APIName ."
0,0,"This often means there is no need to locate the required BIO for a particular operation , it can be called on a chain and it will be automatically passed to the relevant BIO",,,null,"This often means there is no need to locate the required BIO for a particular operation, it can be called on a chain and it will be automatically passed to the relevant BIO.","Filter BIOs if they do not internally handle a particular BIO_ctrl_APIName operation usually pass the operation to the next BIO in the chain. This often means there is no need to locate the required BIO for a particular operation, it can be called on a chain and it will be automatically passed to the relevant BIO. However this can cause unexpected results: for example no current filter BIOs implement BIO_seek_APIName, but this may still succeed if the chain ends in a FILE or file descriptor BIO."
0,0,Alternatively you can reconfigure the toolkit with no-sse2 option and recompile,,,null,Alternatively you can reconfigure the toolkit with no-sse2 option and recompile.,"For example, clearing bit #26 at run-time disables high-performance SSE2 code present in the crypto library, while clearing bit #24 disables SSE2 code operating on 128-bit XMM register bank. You might have to do the latter if target OpenSSL application is executed on SSE2 capable CPU, but under control of OS that does not enable XMM registers. Even though you can manipulate the value programmatically, you most likely will find the value more appropriate to set up an environment variable with the same name prior starting target application, eg on Intel P4 processor 'env OPENSSL_ia32cap=0x16980010 apps/openssl', or better yet 'env OPENSSL_ia32cap=~0x1000000 apps/openssl' to achieve same effect without modifying the application source code. Alternatively you can reconfigure the toolkit with no-sse2 option and recompile."
0,0,The default is normal shutdown behaviour as described by the TLS standard,,,null,The default is normal shutdown behaviour as described by the TLS standard.,The default is normal shutdown behaviour as described by the TLS standard.
0,0,I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs,,,null,I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs.,"I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs. If an SSL connection is not established ,then an attempt is made to establish one on the first I/O call."
0,0,The RSA_print_APIParam_2 RSA_blinding_off_APIParam_1 RSA_free_APIParam_1 RSA_get_ex_data_APIParam_1 RSA_set_method_APIParam_1 RSA_print_fp_APIParam_2 RSA_set_ex_data_APIParam_1 RSA_get_method_APIParam_1 RSA_set_default_method_APIParam_1 RSA_size_APIParam_1 RSA_blinding_on_APIParam_1 RSA_flags_APIParam_1 RSA_check_key_APIParam_1 structure consists of several BIGNUM components,,,null,The RSA_print_APIParam_2 RSA_blinding_off_APIParam_1 RSA_free_APIParam_1 RSA_get_ex_data_APIParam_1 RSA_set_method_APIParam_1 RSA_print_fp_APIParam_2 RSA_set_ex_data_APIParam_1 RSA_get_method_APIParam_1 RSA_set_default_method_APIParam_1 RSA_size_APIParam_1 RSA_blinding_on_APIParam_1 RSA_flags_APIParam_1 RSA_check_key_APIParam_1 structure consists of several BIGNUM components.,The RSA_print_APIParam_2 RSA_blinding_off_APIParam_1 RSA_free_APIParam_1 RSA_get_ex_data_APIParam_1 RSA_set_method_APIParam_1 RSA_print_fp_APIParam_2 RSA_set_ex_data_APIParam_1 RSA_get_method_APIParam_1 RSA_set_default_method_APIParam_1 RSA_size_APIParam_1 RSA_blinding_on_APIParam_1 RSA_flags_APIParam_1 RSA_check_key_APIParam_1 structure consists of several BIGNUM components. It can contain public as well as private RSA keys:
0,0,Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data,,,null,Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data.,A memory BIO is a source/sink BIO which uses memory for its I/O. Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data.
0,0,An ENGINE has 3 properties it exposes that can affect how this behaves,,,null,"An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions.","Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries. An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions. If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these ""discovery"" commands itself. If that flag is not set, then the OpenSSL framework code will work with the following rules;"
0,0,"The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication , whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done",,,null,"The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication, whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done.","The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication, whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done. See EC_GROUP_copy_APIName for information about the generator."
0,0,BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded,,,null,BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded: this is used to flush the final block through the BIO.,BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded: this is used to flush the final block through the BIO.
0,0,"Whilst these commands are automatically processed by the OpenSSL framework code , they use various properties exposed by each ENGINE to process these queries",,,null,"Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries.","Whilst these commands are automatically processed by the OpenSSL framework code, they use various properties exposed by each ENGINE to process these queries. An ENGINE has 3 properties it exposes that can affect how this behaves; it can supply a ctrl_APIName handler, it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an array of control command descriptions. If an ENGINE specifies the ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these ""core"" control commands directly to the ENGINE's ctrl_APIName handler (and thus, it must have supplied one), so it is up to the ENGINE to reply to these ""discovery"" commands itself. If that flag is not set, then the OpenSSL framework code will work with the following rules;"
0,0,"The X509 encode and decode routines encode and parse an i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure , which represents an X509 certificate",,,null,"The X509 encode and decode routines encode and parse an i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure, which represents an X509 certificate.","The X509 encode and decode routines encode and parse an i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure, which represents an X509 certificate."
0,0,Normally applications will only call CONF_modules_free_APIName at application to tidy up any configuration performed,,,null,Normally applications will only call CONF_modules_free_APIName at application to tidy up any configuration performed.,Normally applications will only call CONF_modules_free_APIName at application to tidy up any configuration performed.
0,0,An application can decide how to process the CMS_ContentInfo structure based on this value,,,null,An application can then decide how to process the CMS_ContentInfo structure based on this value.,CMS_get0_type_APIName returns the content type of a CMS_ContentInfo structure as and ASN1_OBJECT pointer. An application can then decide how to process the CMS_ContentInfo structure based on this value.
0,0,it is assumed that both sessions are identical,,,null,In this case it is assumed that both sessions are identical.,"When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists. In this case it is assumed that both sessions are identical. If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session. If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session_APIName is a no-op, and the return value is 0."
0,0,the callback function will never see messages that are considered too large to be processed,,,null,"For example, the callback function will never see messages that are considered too large to be processed.","If processing a received protocol message results in an error, the callback function may not be called. For example, the callback function will never see messages that are considered too large to be processed."
0,0,The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm,,,null,The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm.,The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm. Some might not give any useful information at all during key or parameter generation. Others might not even call the callback.
0,0,SSL_pending_APIName can be used to find out whether there are buffered bytes available for immediate retrieval,,,null,SSL_pending_APIName can be used to find out whether there are buffered bytes available for immediate retrieval.,SSL_pending_APIName can be used to find out whether there are buffered bytes available for immediate retrieval. In this case SSL_read_APIName can be called without blocking or actually receiving new data from the underlying socket.
0,0,A client will send out TLSv1 .1 client hello messages and will also indicate that client only understand TLSv1 .1,,,null,A client will send out TLSv1.1 client hello messages and will also indicate that client only understand TLSv1.1.,A TLS/SSL connection established with these methods will only understand the TLSv1.1 protocol. A client will send out TLSv1.1 client hello messages and will also indicate that client only understand TLSv1.1. A server will only understand TLSv1.1 client hello messages.
0,0,it is examined whether a session with the same session id already exists,,,When adding a new session to the internal session cache,"When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists.","When adding a new session to the internal session cache, it is examined whether a session with the same session id already exists. In this case it is assumed that both sessions are identical. If the same session is stored in a different SSL_SESSION object, The old session is removed and replaced by the new session. If the session is actually identical (the SSL_SESSION object is identical), SSL_CTX_add_session_APIName is a no-op, and the return value is 0."
0,0,This mechanism is entirely based on the use of name-value pairs and assumes ASCII input ,1,,null,"), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs.","There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,so This mechanism is ideal,1,,"if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs.","), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs.","There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,the peer may send a certificate chain,,,During the handshake process,"During the handshake process, the peer may send a certificate chain.","During the handshake process, the peer may send a certificate chain. The TLS/SSL standard does not give any maximum size of the certificate chain. The OpenSSL library handles incoming data by a dynamically allocated buffer. In order to prevent this buffer from growing without bounds due to data received from a faulty or malicious peer, a maximum size for the certificate chain is set."
0,0,BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro,,,null,BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro.,BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO. Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry. BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro.
0,0,decryption uses the same function calls as encryption,,,null," , decryption uses the same function calls as encryption .","Since RC4 is a stream cipher (the input is XORed with a pseudo-random key stream to produce the output), decryption uses the same function calls as encryption."
0,0,DES_ofb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName using Output Feed Back mode,,,null,DES_ofb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName using Output Feed Back mode.,DES_ofb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName using Output Feed Back mode.
0,0,A more advanced callback might examine the handshake parameters and set whatever chain is appropriate,,,null,A more advanced callback might examine the handshake parameters and set whatever chain is appropriate.,A more advanced callback might examine the handshake parameters and set whatever chain is appropriate. For example a legacy client supporting only TLS v1.0 might receive a certificate chain signed using SHA1 whereas a TLS v1.2 client which advertises support for SHA256 could receive a chain using SHA256.
0,0,The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid,,,null,The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid.,The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid. For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is simply b. In either case for the curve to be valid the discriminant must be non zero.
0,0,ERR_print_errors_APIName can be used to print all error codes currently in the queue,,,null,ERR_print_errors_APIName can be used to print all error codes currently in the queue.,ERR_print_errors_APIName can be used to print all error codes currently in the queue.
0,0,This is a wrapper round the platforms file descriptor routines such as read_APIName and write_APIName,,,null,This is a wrapper round the platforms file descriptor routines such as read_APIName and write_APIName.,BIO_s_fd_APIName returns the file descriptor BIO method. This is a wrapper round the platforms file descriptor routines such as read_APIName and write_APIName.
0,0,"In the latter case , OpenSSL will from on behave the way it used to before the ENGINE API existed",,,null,"In the latter case, OpenSSL will from then on behave the way it used to before the ENGINE API existed.","When a default ENGINE is requested for a given abstraction/algorithm/mode, (eg when calling RSA_new_method(NULL)), a ""get_default"" call will be made to the ENGINE subsystem to process the corresponding state table and return a functional reference to an initialised ENGINE whose implementation should be used. If no ENGINE should (or can) be used, a ""get_default"" call will return NULL and the caller will operate with a NULL ENGINE handle - this usually equates to using the conventional software implementation. In the latter case, OpenSSL will from then on behave the way it used to before the ENGINE API existed."
0,0,The fact that ENGINEs are made visible to OpenSSL does not mean they are `` registered '' or called into use by OpenSSL automatically - that behaviour is something for the application to control,,,null,"The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are ""registered"" or called into use by OpenSSL automatically - that behaviour is something for the application to control.","The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are ""registered"" or called into use by OpenSSL automatically - that behaviour is something for the application to control. Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all. Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing. There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides."
0,0,"However , applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user",,,if the user is expected to know which ENGINE device he/she is using,"However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user.","There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,"Once the identities of the compression methods for the TLS protocol have been standardized , the compression API will most likely be changed",,,null,"Once the identities of the compression methods for the TLS protocol have been standardized, the compression API will most likely be changed.","Once the identities of the compression methods for the TLS protocol have been standardized, the compression API will most likely be changed. Using the compression API in the current state is not recommended."
0,0,There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration `` commands '' and expose them to OpenSSL and any applications based on OpenSSL,,,null,"There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL.","There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration ""commands"" and expose them to OpenSSL and any applications based on OpenSSL. This mechanism is entirely based on the use of name-value pairs and assumes ASCII input (no unicode or UTF for now! ), so it is ideal if applications want to provide a transparent way for users to provide arbitrary configuration ""directives"" directly to such ENGINEs. It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names, descriptions, and input flags of their available ""control commands"", providing a more flexible configuration scheme. However, if the user is expected to know which ENGINE device he/she is using (in the case of specialised hardware, this goes without saying) then applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user."
0,0,This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO `` flavour '' to SSL I/O,,,null,"This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO ""flavour"" to SSL I/O.","BIO_f_ssl_APIName returns the SSL BIO method. This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO ""flavour"" to SSL I/O."
0,0,The behaviour of BIO_read_APIName and BIO_write_APIName depends on the behavior of the platforms read_APIName and write_APIName calls on the descriptor,,,null,The behaviour of BIO_read_APIName and BIO_write_APIName depends on the behavior of the platforms read_APIName and write_APIName calls on the descriptor.,"The behaviour of BIO_read_APIName and BIO_write_APIName depends on the behavior of the platforms read_APIName and write_APIName calls on the descriptor. If the underlying file descriptor is in a non blocking mode ,then the BIO will behave in the manner described in the BIO_read_APIName and BIO_should_retry_APIName manual pages."
0,0,the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used,,,If streaming is performed,"If streaming is performed, the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used.","If streaming is performed, the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used."
0,0,"SSL_CTX_use_certificate_ASN1_APIName loads the ASN1 encoded certificate from the memory location SSL_CTX_use_certificate_ASN1_APIParam_3 SSL_use_certificate_ASN1_APIParam_2 into SSL_CTX_use_certificate_ASN1_APIParam_1 , SSL_use_certificate_ASN1_APIName loads the ASN1 encoded certificate into SSL_use_certificate_ASN1_APIParam_1",,,null,"SSL_CTX_use_certificate_ASN1_APIName loads the ASN1 encoded certificate from the memory location SSL_CTX_use_certificate_ASN1_APIParam_3 SSL_use_certificate_ASN1_APIParam_2 (with length SSL_CTX_use_certificate_ASN1_APIParam_2 SSL_use_certificate_ASN1_APIParam_3) into SSL_CTX_use_certificate_ASN1_APIParam_1, SSL_use_certificate_ASN1_APIName loads the ASN1 encoded certificate into SSL_use_certificate_ASN1_APIParam_1.","SSL_CTX_use_certificate_ASN1_APIName loads the ASN1 encoded certificate from the memory location SSL_CTX_use_certificate_ASN1_APIParam_3 SSL_use_certificate_ASN1_APIParam_2 (with length SSL_CTX_use_certificate_ASN1_APIParam_2 SSL_use_certificate_ASN1_APIParam_3) into SSL_CTX_use_certificate_ASN1_APIParam_1, SSL_use_certificate_ASN1_APIName loads the ASN1 encoded certificate into SSL_use_certificate_ASN1_APIParam_1."
0,0,"BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO , the values are overwritten , BIO_free_APIName is not called",,,null,"BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO, the values are overwritten, BIO_free_APIName is not called.","BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName, BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1, BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4. If either size is zero then the default size is used. BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO, the values are overwritten, BIO_free_APIName is not called."
0,0,"The context need not be set or The context can be set to NULL in which case only syntax checking of commands is performed , where possible",,,null,"The context need not be set or The context can be set to NULL in which case only syntax checking of commands is performed, where possible.","The context need not be set or The context can be set to NULL in which case only syntax checking of commands is performed, where possible."
0,0,"Note that several calls to this function does n't add data , several calls to this function replaces the previous blob with the one given as argument",,,null,"Note that several calls to this function doesn't add data, several calls to this function replaces the previous blob with the one given as argument.","UI_add_user_data_APIName adds a piece of memory for the method to use at any time. The builtin UI method doesn't care about this info. Note that several calls to this function doesn't add data, several calls to this function replaces the previous blob with the one given as argument."
0,0,Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing,,,null,Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing.,"The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are ""registered"" or called into use by OpenSSL automatically - that behaviour is something for the application to control. Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all. Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing. There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides."
0,0,"There are probably numerous other ways in which applications may prefer to handle things , so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl 's builtin utilities as guides",,,null,"There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides.","The fact that ENGINEs are made visible to OpenSSL (and thus are linked into the program and loaded into memory at run-time) does not mean they are ""registered"" or called into use by OpenSSL automatically - that behaviour is something for the application to control. Some applications will want to allow the user to specify exactly which ENGINE they want used if any is to be used at all. Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing. There are probably numerous other ways in which applications may prefer to handle things, so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl's builtin utilities as guides."
0,0,"ERR_print_errors_fp_APIName is the same , except that the output goes to a ERR_print_errors_fp_APIParam_1",,,null,"ERR_print_errors_fp_APIName is the same, except that the output goes to a ERR_print_errors_fp_APIParam_1.","ERR_print_errors_fp_APIName is the same, except that the output goes to a ERR_print_errors_fp_APIParam_1."
0,0,This flag is 0,1,,when a protocol message has been received,This flag is 0 when a protocol message has been received and 1 when a protocol message has been sent.,This flag is 0 when a protocol message has been received and 1 when a protocol message has been sent.
0,0,This flag is 1,1,,when a protocol message has been sent,This flag is 0 when a protocol message has been received and 1 when a protocol message has been sent.,This flag is 0 when a protocol message has been received and 1 when a protocol message has been sent.
0,0,The functions EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName can be called more than once on the same context,,,if several operations are performed using the same parameters,The functions EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName can be called more than once on the same context if several operations are performed using the same parameters.,The functions EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName can be called more than once on the same context if several operations are performed using the same parameters.
0,0,The value EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 may be NULL in which case the result is just EC_POINT_mul_APIParam_4 EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6,,,null,The value EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 may be NULL in which case the result is just EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6.,EC_POINT_mul calculates the value generator * EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 + EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6 and stores the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. The value EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 may be NULL in which case the result is just EC_POINT_mul_APIParam_4 * EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6.
0,0,Using this flag can save around 34k per idle SSL connection,,,null,Using this flag can save around 34k per idle SSL connection.,"When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it. Released memory is either appended to a list of unused RAM chunks on the SSL_CTX, or simply freed if the list of unused chunks would become longer than SSL_CTX->freelist_max_len, which defaults to 32. Using this flag can save around 34k per idle SSL connection. This flag has no effect on SSL v2 connections, or on DTLS connections."
0,0,For a curve defined over Fp the discriminant is given by the formula 4a ^ 3 + 27b ^ 2 whilst for F2 ^ m curves the discriminant is simply b,,,null,For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is simply b.,The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid. For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is simply b. In either case for the curve to be valid the discriminant must be non zero.
0,0,Many browsers implement a `` sign and encrypt '' option which is simply an S/MIME envelopedData containing an S/MIME signed message,,,null,"Many browsers implement a ""sign and encrypt"" option which is simply an S/MIME envelopedData containing an S/MIME signed message.","Many browsers implement a ""sign and encrypt"" option which is simply an S/MIME envelopedData containing an S/MIME signed message. This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt_APIName."
0,0,The main purpose of the functions EVP_PKEY_missing_parameters_APIName and EVP_PKEY_copy_parameters_APIName is to handle public keys in certificates where the parameters are sometimes omitted from a public key,,,if they are inherited from the CA that signed it,The main purpose of the functions EVP_PKEY_missing_parameters_APIName and EVP_PKEY_copy_parameters_APIName is to handle public keys in certificates where the parameters are sometimes omitted from a public key if they are inherited from the CA that signed it.,The main purpose of the functions EVP_PKEY_missing_parameters_APIName and EVP_PKEY_copy_parameters_APIName is to handle public keys in certificates where the parameters are sometimes omitted from a public key if they are inherited from the CA that signed it.
0,0,This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt_APIName,,,null,This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt_APIName.,"Many browsers implement a ""sign and encrypt"" option which is simply an S/MIME envelopedData containing an S/MIME signed message. This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt_APIName."
0,0,Older versions of this documentation wrongly stated that calls to EVP_SignUpdate_APIName could not be made after calling EVP_SignFinal_APIName,,,null,Older versions of this documentation wrongly stated that calls to EVP_SignUpdate_APIName could not be made after calling EVP_SignFinal_APIName.,Older versions of this documentation wrongly stated that calls to EVP_SignUpdate_APIName could not be made after calling EVP_SignFinal_APIName.
0,0,"lh_stats_APIName prints out statistics on the size of the hash table , how many entries are in the hash table , and the number and result of calls to the routines in this library",,,null,"lh_stats_APIName prints out statistics on the size of the hash table, how many entries are in the hash table, and the number and result of calls to the routines in this library.","lh_stats_APIName prints out statistics on the size of the hash table, how many entries are in the hash table, and the number and result of calls to the routines in this library."
0,0,des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal,,,null,des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal.,"des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal. The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned. The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. A return code of -1 indicates a system error, 1 failure due to use interaction, and 0 is success. All other functions described here use des_read_pw_APIName to do the work."
0,0,The CMS_decrypt_APIParam_4 parameter is used in the rare case where the encrypted content is detached,,,null,The CMS_decrypt_APIParam_4 parameter is used in the rare case where the encrypted content is detached.,The CMS_decrypt_APIParam_4 parameter is used in the rare case where the encrypted content is detached. The CMS_decrypt_APIParam_4 parameter will normally be set to NULL.
0,0,Prepending a BIO_f_buffer_APIName buffering BIO will prevent this,,,null,Prepending a BIO_f_buffer_APIName buffering BIO will prevent this.,Large numbers of small writes through the chain should be avoided as this will produce an output consisting of lots of OCTET STRING structures. Prepending a BIO_f_buffer_APIName buffering BIO will prevent this.
0,0,This can be used to set either defaults or values which can not be overridden,,,null,This can be used to set either defaults or values which cannot be overridden.,The order of operations is significant. This can be used to set either defaults or values which cannot be overridden. For example if an application calls:
0,0,it passes I/O calls to the next BIO in the chain,,,When an accept BIO is not at end of a chain,When an accept BIO is not at then end of a chain it passes I/O calls to the next BIO in the chain.,When an accept BIO is at the end of a chain it will await an incoming connection before processing I/O calls. When an accept BIO is not at then end of a chain it passes I/O calls to the next BIO in the chain.
0,0,The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition,,,null,The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition.,"BIO_get_retry_BIO_APIName determines the precise reason for the special condition, BIO_get_retry_BIO_APIName returns the BIO that caused this condition and if BIO_get_retry_BIO_APIParam_2 is not NULL BIO_get_retry_BIO_APIParam_2 contains the reason code. The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition."
0,0,"Released memory is either appended to a list of unused RAM chunks on the SSL_CTX , or simply freed",,,"if the list of unused chunks would become longer than SSL_CTX - > freelist_max_len , which defaults to 32","Released memory is either appended to a list of unused RAM chunks on the SSL_CTX, or simply freed if the list of unused chunks would become longer than SSL_CTX->freelist_max_len, which defaults to 32.","When we no longer need a read buffer or a write buffer for a given SSL, then release the memory we were using to hold it. Released memory is either appended to a list of unused RAM chunks on the SSL_CTX, or simply freed if the list of unused chunks would become longer than SSL_CTX->freelist_max_len, which defaults to 32. Using this flag can save around 34k per idle SSL connection. This flag has no effect on SSL v2 connections, or on DTLS connections."
0,0,"An application provided procedure also has access to the verify depth information and the verify_callback_APIName function , but the way this information is used may be different",,,null,"An application provided procedure also has access to the verify depth information and the verify_callback_APIName function, but the way this information is used may be different.","The actual verification procedure is performed either using the built-in verification procedure or using another application provided verification function set with SSL_CTX_set_cert_verify_callback_APIName . The following descriptions apply in the case of the built-in procedure. An application provided procedure also has access to the verify depth information and the verify_callback_APIName function, but the way this information is used may be different."
0,0,"UI_free_APIName removes a UI from memory , along with all other pieces of memory that 's connected to it , like duplicated input strings , results and others",,,null,"UI_free_APIName removes a UI from memory, along with all other pieces of memory that's connected to it, like duplicated input strings, results and others.","UI_free_APIName removes a UI from memory, along with all other pieces of memory that's connected to it, like duplicated input strings, results and others."
0,0,In OpenSSL 0.9.6 and later the SSL flag SSL_AUTO_RETRY can be set to disable this behaviour,,,null,In OpenSSL 0.9.6 and later the SSL flag SSL_AUTO_RETRY can be set to disable this behaviour.,In OpenSSL 0.9.6 and later the SSL flag SSL_AUTO_RETRY can be set to disable this behaviour. That is when this flag is set an SSL BIO using a blocking transport will never request a retry.
0,0,EVP_PKEY_meth_add0_APIName adds EVP_PKEY_meth_add0_APIParam_1 to the user defined stack of methods,,,null,EVP_PKEY_meth_add0_APIName adds EVP_PKEY_meth_add0_APIParam_1 to the user defined stack of methods.,EVP_PKEY_meth_add0_APIName adds EVP_PKEY_meth_add0_APIParam_1 to the user defined stack of methods.
0,0,For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines,,,null,For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines (see below).,"The EVP encode routines provide a high level interface to base 64 encoding and decoding. Base 64 encoding converts binary data into a printable form that uses the characters A-Z, a-z, 0-9, ""+"" and ""/"" to represent the data. For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines (see below). If the input data length is not a multiple of 3 then the output data will be padded at the end using the ""="" character."
0,0,The BN_from_montgomery_APIParam_3 BN_MONT_CTX_copy_APIParam_1 BN_to_montgomery_APIParam_3 BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_free_APIParam_1 BN_MONT_CTX_set_APIParam_1 structure is defined as follows,,,null,The BN_from_montgomery_APIParam_3 BN_MONT_CTX_copy_APIParam_1 BN_to_montgomery_APIParam_3 BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_free_APIParam_1 BN_MONT_CTX_set_APIParam_1 structure is defined as follows:,The BN_from_montgomery_APIParam_3 BN_MONT_CTX_copy_APIParam_1 BN_to_montgomery_APIParam_3 BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_free_APIParam_1 BN_MONT_CTX_set_APIParam_1 structure is defined as follows:
0,0,PKCS7_sign_add_signer_APIName adds a signer with certificate PKCS7_sign_add_signer_APIParam_2 and private key PKCS7_sign_add_signer_APIParam_3 using message digest PKCS7_sign_add_signer_APIParam_4 to a PKCS7 signed data structure PKCS7_sign_add_signer_APIParam_1,,,null,PKCS7_sign_add_signer_APIName adds a signer with certificate PKCS7_sign_add_signer_APIParam_2 and private key PKCS7_sign_add_signer_APIParam_3 using message digest PKCS7_sign_add_signer_APIParam_4 to a PKCS7 signed data structure PKCS7_sign_add_signer_APIParam_1.,PKCS7_sign_add_signer_APIName adds a signer with certificate PKCS7_sign_add_signer_APIParam_2 and private key PKCS7_sign_add_signer_APIParam_3 using message digest PKCS7_sign_add_signer_APIParam_4 to a PKCS7 signed data structure PKCS7_sign_add_signer_APIParam_1.
0,0,"The default depth limit is 100 , allowing for the peer certificate and additional 100 CA certificates",,,null,"The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates.","SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which depth certificates in a chain are used during the verification procedure. If the certificate chain is longer than allowed, the certificates above the limit are ignored. Error messages are generated as if these certificates would not be present, most likely a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued. The depth count is ""level 0:peer certificate"", ""level 1: CA certificate"", ""level 2: higher level CA certificate"", and so on. Setting the maximum depth to 2 allows the levels 0, 1, and 2. The default depth limit is 100, allowing for the peer certificate and additional 100 CA certificates."
0,0,"For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two possible solutions for y has been used , followed by the octets for x , followed by the octets for y",,,null,"For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two possible solutions for y has been used, followed by the octets for x, followed by the octets for y.","For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two possible solutions for y has been used, followed by the octets for x, followed by the octets for y."
0,0,The process of calling BIO_push_APIName and BIO_pop_APIName on a BIO may have additional consequences any effects will be noted in the descriptions of individual BIOs,,,null,The process of calling BIO_push_APIName and BIO_pop_APIName on a BIO may have additional consequences (a control call is made to the affected BIOs) any effects will be noted in the descriptions of individual BIOs.,The process of calling BIO_push_APIName and BIO_pop_APIName on a BIO may have additional consequences (a control call is made to the affected BIOs) any effects will be noted in the descriptions of individual BIOs.
0,0,"In these cases , the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing",,,null,"In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing.","When using a cipher with RSA authentication, an ephemeral DH key exchange can take place. Ciphers with DSA keys always use ephemeral DH keys as well. In these cases, the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing. Anonymous ciphers (without a permanent server key) also use ephemeral DH keys."
0,0,the handle to that ENGINE will be released during the change,,,if the previous method was supplied by an ENGINE,"This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change.","RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1. This will replace the RSA_METHOD used by the RSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have RSA keys that only work with certain RSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the RSA_METHOD for the key can have unexpected results."
0,0,SSL_CTX_set_verify_depth_APIName sets the maximum SSL_CTX_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for SSL_CTX_set_verify_depth_APIParam_1,,,null,SSL_CTX_set_verify_depth_APIName sets the maximum SSL_CTX_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for SSL_CTX_set_verify_depth_APIParam_1.,SSL_CTX_set_verify_depth_APIName sets the maximum SSL_CTX_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for SSL_CTX_set_verify_depth_APIParam_1. (See the BUGS section.)
0,0,It will also performs certain sanity checks on the key to confirm that it is valid,,,null,It will also performs certain sanity checks on the key to confirm that it is valid.,"EC_KEY_set_public_key_affine_coordinates sets the public key for EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1 based on its affine co-ordinates, ie it constructs an EC_POINT object based on the supplied EC_KEY_set_public_key_affine_coordinates_APIParam_2 and EC_KEY_set_public_key_affine_coordinates_APIParam_3 values and sets the public key to be this EC_POINT. It will also performs certain sanity checks on the key to confirm that it is valid."
0,0,"CMS_add0_recipient_key_APIName adds symmetric key CMS_add0_recipient_key_APIParam_3 of length CMS_add0_recipient_key_APIParam_4 using wrapping algorithm CMS_add0_recipient_key_APIParam_2 , identifier CMS_add0_recipient_key_APIParam_5 of length CMS_add0_recipient_key_APIParam_6 and optional values CMS_add0_recipient_key_APIParam_7 , CMS_add0_recipient_key_APIParam_8 and CMS_add0_recipient_key_APIParam_9 to CMS_ContentInfo enveloped data structure CMS_add0_recipient_key_APIParam_1 as a KEKRecipientInfo structure",,,null,"CMS_add0_recipient_key_APIName adds symmetric key CMS_add0_recipient_key_APIParam_3 of length CMS_add0_recipient_key_APIParam_4 using wrapping algorithm CMS_add0_recipient_key_APIParam_2, identifier CMS_add0_recipient_key_APIParam_5 of length CMS_add0_recipient_key_APIParam_6 and optional values CMS_add0_recipient_key_APIParam_7, CMS_add0_recipient_key_APIParam_8 and CMS_add0_recipient_key_APIParam_9 to CMS_ContentInfo enveloped data structure CMS_add0_recipient_key_APIParam_1 as a KEKRecipientInfo structure.","CMS_add0_recipient_key_APIName adds symmetric key CMS_add0_recipient_key_APIParam_3 of length CMS_add0_recipient_key_APIParam_4 using wrapping algorithm CMS_add0_recipient_key_APIParam_2, identifier CMS_add0_recipient_key_APIParam_5 of length CMS_add0_recipient_key_APIParam_6 and optional values CMS_add0_recipient_key_APIParam_7, CMS_add0_recipient_key_APIParam_8 and CMS_add0_recipient_key_APIParam_9 to CMS_ContentInfo enveloped data structure CMS_add0_recipient_key_APIParam_1 as a KEKRecipientInfo structure."
0,0,"OBJ_nid2obj_APIName , OBJ_nid2ln_APIName and OBJ_nid2sn_APIName convert the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 to an ASN1_OBJECT structure , the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 long name and the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 short name respectively , or NULL",,,if an error occurred,"OBJ_nid2obj_APIName, OBJ_nid2ln_APIName and OBJ_nid2sn_APIName convert the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 to an ASN1_OBJECT structure, the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 long name and the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 short name respectively, or NULL if an error occurred.","OBJ_nid2obj_APIName, OBJ_nid2ln_APIName and OBJ_nid2sn_APIName convert the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 to an ASN1_OBJECT structure, the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 long name and the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 short name respectively, or NULL if an error occurred."
0,0,"A shutdown alert was received form the peer , either a normal `` close notify '' or a fatal error",,,null,"A shutdown alert was received form the peer, either a normal ""close notify"" or a fatal error.","A shutdown alert was received form the peer, either a normal ""close notify"" or a fatal error."
0,0,Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain,,,null,Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain.,Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain. Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain. Both BIO_gets_APIName and BIO_puts_APIName are supported.
0,0,"Under previous export restrictions , ciphers with RSA keys shorter than the usual key length of 1024 bits were created",,,null,"Under previous export restrictions, ciphers with RSA keys shorter (512 bits) than the usual key length of 1024 bits were created.","Under previous export restrictions, ciphers with RSA keys shorter (512 bits) than the usual key length of 1024 bits were created. To use these ciphers with RSA keys of usual length, an ephemeral key exchange must be performed, as the normal (certified) key cannot be directly used."
0,0,Sent by the server to indicate that the server does not recognize a PSK identity or an SRP identity,,,null,Sent by the server to indicate that the server does not recognize a PSK identity or an SRP identity.,Sent by the server to indicate that the server does not recognize a PSK identity or an SRP identity.
0,0,"As an example , a hash table may be maintained by code that , for reasons of encapsulation , has only `` const '' access to the data being indexed in the hash table - the LHASH prototypes are appropriate as-is",,,null,"As an example, a hash table may be maintained by code that, for reasons of encapsulation, has only ""const"" access to the data being indexed in the hash table (ie it is returned as ""const"" from elsewhere in their code) - in this case the LHASH prototypes are appropriate as-is.","As an example, a hash table may be maintained by code that, for reasons of encapsulation, has only ""const"" access to the data being indexed in the hash table (ie it is returned as ""const"" from elsewhere in their code) - in this case the LHASH prototypes are appropriate as-is. Conversely, if the caller is responsible for the life-time of the data in question, then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks (see the ""STUFF_cleanup"" example above). If so, the caller can either cast the ""const"" away (if they're providing the raw callbacks themselves) or use the macros to declare/implement the wrapper functions without ""const"" types."
0,0,Objects which are not in the table have the NID value NID_undef,,,null,Objects which are not in the table have the NID value NID_undef.,Objects which are not in the table have the NID value NID_undef.
0,0,no 8 byte padding,1,,null,"Because this routine will allow you to encrypt an arbitrary number of bytes, no 8 byte padding.","DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback. Why is this useful you ask? Because this routine will allow you to encrypt an arbitrary number of bytes, no 8 byte padding. Each call to this routine will encrypt the input bytes to output and then update ivec and num. num contains 'how far' we are though ivec. If this does not make much sense, read more about cfb mode of DES :-)."
0,0,"Base 64 encoding converts binary data into a printable form that uses the characters A-Z , a-z , 0-9 , '' + '' and '' / '' to represent the data",,,null,"Base 64 encoding converts binary data into a printable form that uses the characters A-Z, a-z, 0-9, ""+"" and ""/"" to represent the data.","The EVP encode routines provide a high level interface to base 64 encoding and decoding. Base 64 encoding converts binary data into a printable form that uses the characters A-Z, a-z, 0-9, ""+"" and ""/"" to represent the data. For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines (see below). If the input data length is not a multiple of 3 then the output data will be padded at the end using the ""="" character."
0,0,There are several reasons why calling the OpenSSL configuration routines is advisable,,,null,There are several reasons why calling the OpenSSL configuration routines is advisable.,"There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
0,0,any error relating to the private key will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate_APIName,,,null," , any error relating to the private key will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate_APIName .","Since the public key is passed in the call to EVP_SignFinal_APIName, any error relating to the private key (for example an unsuitable key and digest combination) will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate_APIName."
0,0,However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs,,,null,However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs.,"There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
0,0,"In the case where PSK identity hint is NULL , the server does not send the ServerKeyExchange message to the client",,,null,"In the case where PSK identity hint is NULL, the server does not send the ServerKeyExchange message to the client.","In the case where PSK identity hint is NULL, the server does not send the ServerKeyExchange message to the client."
0,0,"In OpenSSL 0.9.7 control functions can be supported by ENGINEs , this can be used to load dynamic ENGINEs from shared libraries",,,null,"In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs).","There are several reasons why calling the OpenSSL configuration routines is advisable. For example new ENGINE functionality was added to OpenSSL 0.9.7. In OpenSSL 0.9.7 control functions can be supported by ENGINEs, this can be used (among other things) to load dynamic ENGINEs from shared libraries (DSOs). However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs. Equally in future more sophisticated ENGINEs will require certain control operations to customize them. If an application calls OPENSSL_config_APIName ,it doesn't need to know or care about ENGINE control operations because they can be performed by editing a configuration file."
0,0,X509_STORE_set_verify_cb_func_APIName also sets the verification callback but X509_STORE_set_verify_cb_func_APIName is implemented as a macro,,,null,X509_STORE_set_verify_cb_func_APIName also sets the verification callback but X509_STORE_set_verify_cb_func_APIName is implemented as a macro.,X509_STORE_set_verify_cb_func_APIName also sets the verification callback but X509_STORE_set_verify_cb_func_APIName is implemented as a macro.
0,0,The error message produced will be that of an incomplete certificate chain and not X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected,,,null,The error message produced will be that of an incomplete certificate chain and not X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected.,The certificate verification depth set with SSL[_CTX]_verify_depth_APIName stops the verification at a certain depth. The error message produced will be that of an incomplete certificate chain and not X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected.
0,0,This will only happen as a result of a memory allocation failure so this is not too much of a problem in practice,,,null,This will only happen as a result of a memory allocation failure so this is not too much of a problem in practice.,"Although the functions do not return error codes, it is possible for them to fail. This will only happen as a result of a memory allocation failure so this is not too much of a problem in practice."
0,0,DSA_generate_key_APIName describes how to generate a signature key,,,null,The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key.,These functions implement the Digital Signature Algorithm (DSA). The generation of shared DSA parameters is described in DSA_generate_parameters_APIName ; DSA_generate_key_APIName describes how to generate a signature key. Signature generation and verification are described in DSA_sign_APIName .
0,0,"This is a filter BIO that digests any data passed through it , it is a BIO wrapper for the digest routines EVP_DigestInit_APIName , EVP_DigestUpdate_APIName and EVP_DigestFinal_APIName",,,null,"This is a filter BIO that digests any data passed through it, it is a BIO wrapper for the digest routines EVP_DigestInit_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_APIName.","BIO_f_md_APIName returns the message digest BIO method. This is a filter BIO that digests any data passed through it, it is a BIO wrapper for the digest routines EVP_DigestInit_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_APIName."
0,0,Conversion to Jacobian projective to affine co-ordinates is simple,,,null,Conversion to Jacobian projective to affine co-ordinates is simple.,"As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,A mapping exists between Jacobian projective co-ordinates and affine co-ordinates,,,null,A mapping exists between Jacobian projective co-ordinates and affine co-ordinates.,"As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not,,,null,The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not.,"The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not. If the asn1_flag is 1 ,then this is a named curve with an associated ASN1 OID. If not ,then asn1_flag is 0. The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve. If set ,then the curve_name must also be set."
0,0,"Jacobian projective co-ordinates are expressed as three values x , y and z",,,null,"Jacobian projective co-ordinates are expressed as three values x, y and z.","As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,"The EVP_PKEY_keygen_APIName function performs a key generation operation , the generated key is written to EVP_PKEY_keygen_APIParam_2",,,null,"The EVP_PKEY_keygen_APIName function performs a key generation operation, the generated key is written to EVP_PKEY_keygen_APIParam_2.","The EVP_PKEY_keygen_APIName function performs a key generation operation, the generated key is written to EVP_PKEY_keygen_APIParam_2."
0,0,The following code illustrates how to approach this,,,null,The following code illustrates how to approach this;,"Here we'll assume an application has been configured by its user or admin to want to use the ""ACME"" ENGINE if it is available in the version of OpenSSL the application was compiled with. If it is available, it should be used by default for all RSA, DSA, and symmetric cipher operations, otherwise OpenSSL should use its builtin software as per usual. The following code illustrates how to approach this;"
0,0,"A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)).",,,null,"A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)).","As well as the affine co-ordinates, a point can alternatively be described in terms of its Jacobian projective co-ordinates (for Fp curves only). Jacobian projective co-ordinates are expressed as three values x, y and z. Working in this co-ordinate system provides more efficient point multiplication operations. A mapping exists between Jacobian projective co-ordinates and affine co-ordinates. A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to (x, y, 1). To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively."
0,0,"As its name implies a source/sink BIO is a source and/or sink of data , examples include a socket BIO and a file BIO",,,null,"As its name implies a source/sink BIO is a source and/or sink of data, examples include a socket BIO and a file BIO.","As its name implies a source/sink BIO is a source and/or sink of data, examples include a socket BIO and a file BIO."
0,0,"Normally clients and servers will , where possible , transparently make use of RFC4507bis tickets for stateless session resumption",,,null,"Normally clients and servers will, where possible, transparently make use of RFC4507bis tickets for stateless session resumption.","Normally clients and servers will, where possible, transparently make use of RFC4507bis tickets for stateless session resumption."
0,0,"In OpenSSL versions before 1.0.0 the BIO_pop_APIName call was handled incorrectly , the I/O BIO reference count was incorrectly incremented and dissociated with the SSL BIO",,,null,"In OpenSSL versions before 1.0.0 the BIO_pop_APIName call was handled incorrectly , the I/O BIO reference count was incorrectly incremented and dissociated with the SSL BIO  .","In OpenSSL versions before 1.0.0 the BIO_pop_APIName call was handled incorrectly, the I/O BIO reference count was incorrectly incremented (instead of decremented) and dissociated with the SSL BIO even if the SSL BIO was not explicitly being popped (eg a pop higher up the chain). Applications which included workarounds for this bug (eg freeing BIOs more than once) should be modified to handle this fix or they may free up an already freed BIO."
0,0,that will override any DH defaults set using the DH API,,,If a default ENGINE is specified for DH functionality using an ENGINE API function,"If a default ENGINE is specified for DH functionality using an ENGINE API function, that will override any DH defaults set using the DH API (ie DH_set_default_method_APIName).","As of version 0.9.7, DH_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in DH_new_method_APIParam_1 modules. If a default ENGINE is specified for DH functionality using an ENGINE API function, that will override any DH defaults set using the DH API (ie DH_set_default_method_APIName). For this reason, the ENGINE API is the recommended way to control default implementations for use in DH and other cryptographic algorithms."
0,0,pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption or writing/encryption,,,null,pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1).,"The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to pem_passwd_cb_APIParam_4 is provided. The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2. The actual length of the password must be returned to the calling function. pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1)."
0,0,"This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD , which is an ordered vector of functions that carry out the actual prompting",,,null,"This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD, which is an ordered vector of functions that carry out the actual prompting.","All the functions work through a context of the type UI. This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD, which is an ordered vector of functions that carry out the actual prompting."
0,0,Othewise these behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page,,,null,Othewise these behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.,Othewise these behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.
0,0,This indicates that no description is available for this alert type,,,null,This indicates that no description is available for this alert type.,This indicates that no description is available for this alert type. Probably SSL_alert_desc_string_long_APIParam_1 SSL_alert_type_string_long_APIParam_1 SSL_alert_desc_string_APIParam_1 SSL_alert_type_string_APIParam_1 does not contain a correct alert message.
0,0,On invocation a pointer to pem_passwd_cb_APIParam_4 is provided,,,null,On invocation a pointer to pem_passwd_cb_APIParam_4 is provided.,"The pem_passwd_cb_APIName, which must be provided by the application, hands back the password to be used during decryption. On invocation a pointer to pem_passwd_cb_APIParam_4 is provided. The pem_passwd_cb must write the password into the provided buffer pem_passwd_cb_APIParam_1 which is of size pem_passwd_cb_APIParam_2. The actual length of the password must be returned to the calling function. pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption (rwflag=0) or writing/encryption (rwflag=1)."
0,0,A client will send out TLSv1 .2 client hello messages and will also indicate that client only understand TLSv1 .2,,,null,A client will send out TLSv1.2 client hello messages and will also indicate that client only understand TLSv1.2.,A TLS/SSL connection established with these methods will only understand the TLSv1.2 protocol. A client will send out TLSv1.2 client hello messages and will also indicate that client only understand TLSv1.2. A server will only understand TLSv1.2 client hello messages.
0,0,SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called,,,null,SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called.,"SSL_CTX_set_quiet_shutdown_APIName sets the ""quiet shutdown"" flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2. SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called. SSL_CTX_set_quiet_shutdown_APIParam_2 may be 0 or 1."
0,0,This means that calls to EVP_DigestSignUpdate_APIName and EVP_DigestSignFinal_APIName can be called later to digest and sign additional data,,,null,This means that calls to EVP_DigestSignUpdate_APIName and EVP_DigestSignFinal_APIName can be called later to digest and sign additional data.,The call to EVP_DigestSignFinal_APIName internally finalizes a copy of the digest context. This means that calls to EVP_DigestSignUpdate_APIName and EVP_DigestSignFinal_APIName can be called later to digest and sign additional data.
0,0,Any command value lower than this symbol is considered a `` generic '' command is handled directly by the OpenSSL core routines,,,null,"Any command value lower than this symbol is considered a ""generic"" command is handled directly by the OpenSSL core routines.","It is possible to discover at run-time the names, numerical-ids, descriptions and input parameters of the control commands supported by an ENGINE using a structural reference. Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE, ie the ENGINE's ctrl_APIName handler is not used for the control command. openssl/engine.h defines an index, ENGINE_CMD_BASE, that all control commands implemented by ENGINEs should be numbered from. Any command value lower than this symbol is considered a ""generic"" command is handled directly by the OpenSSL core routines."
0,0,A DH_set_default_method_APIParam_1 DH_set_method_APIParam_2 specifies the functions that OpenSSL uses for Diffie-Hellman operations,,,null,A DH_set_default_method_APIParam_1 DH_set_method_APIParam_2 specifies the functions that OpenSSL uses for Diffie-Hellman operations.,"A DH_set_default_method_APIParam_1 DH_set_method_APIParam_2 specifies the functions that OpenSSL uses for Diffie-Hellman operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DH API functions are affected by the use of DH_new_method_APIParam_1 API calls."
0,0,"By modifying the method , alternative implementations such as hardware accelerators may be used",,,null,"By modifying the method, alternative implementations such as hardware accelerators may be used.","A DH_set_default_method_APIParam_1 DH_set_method_APIParam_2 specifies the functions that OpenSSL uses for Diffie-Hellman operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DH API functions are affected by the use of DH_new_method_APIParam_1 API calls."
0,0,then close_APIName is called on the underlying file descriptor,1,,"If the close flag is set, when the BIO is freed","If the close flag is set ,then then close_APIName is called on the underlying file descriptor when the BIO is freed.","If the close flag is set ,then then close_APIName is called on the underlying file descriptor when the BIO is freed."
0,0,"These CA certificates are made available via lookup methods , handled inside the X509_STORE",,,null,"These CA certificates are made available via lookup methods, handled inside the X509_STORE.","In order to verify the certificates presented by the peer, trusted CA certificates must be accessed. These CA certificates are made available via lookup methods, handled inside the X509_STORE. From the X509_STORE the X509_STORE_CTX used when verifying certificates is created."
0,0,in some cases an error may simply print out a warning message and the application continue,,,null,For example in some cases an error may simply print out a warning message and the application continue.,Errors during configuration may also be handled differently by different applications. For example in some cases an error may simply print out a warning message and the application continue. In other cases an application might consider a configuration file error as fatal and exit immediately.
0,0,"These functions are very similar to the X509 functions described in d2i_X509_APIName , where further notes and examples are available",,,null,"These functions are very similar to the X509 functions described in d2i_X509_APIName , where further notes and examples are available.","These functions are very similar to the X509 functions described in d2i_X509_APIName , where further notes and examples are available."
0,0,"It is possible to discover at run-time the names , numerical-ids , descriptions and input parameters of the control commands supported by an ENGINE using a structural reference",,,null,"It is possible to discover at run-time the names, numerical-ids, descriptions and input parameters of the control commands supported by an ENGINE using a structural reference.","It is possible to discover at run-time the names, numerical-ids, descriptions and input parameters of the control commands supported by an ENGINE using a structural reference. Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE, ie the ENGINE's ctrl_APIName handler is not used for the control command. openssl/engine.h defines an index, ENGINE_CMD_BASE, that all control commands implemented by ENGINEs should be numbered from. Any command value lower than this symbol is considered a ""generic"" command is handled directly by the OpenSSL core routines."
0,0,From the X509_STORE the X509_STORE_CTX used is created,,,when verifying certificates,From the X509_STORE the X509_STORE_CTX used when verifying certificates is created.,"In order to verify the certificates presented by the peer, trusted CA certificates must be accessed. These CA certificates are made available via lookup methods, handled inside the X509_STORE. From the X509_STORE the X509_STORE_CTX used when verifying certificates is created."
0,0,the results for earlier versions of TLS and DTLS may not be very useful,1,,null,Since the supported signature algorithms extension is only used in TLS 1.2 and DTLS 1.2 the results for earlier versions of TLS and DTLS may not be very useful.,"Since the supported signature algorithms extension is only used in TLS 1.2 and DTLS 1.2 the results for earlier versions of TLS and DTLS may not be very useful. Applications may wish to specify a different ""legacy"" chain for earlier versions of TLS or DTLS."
0,0,"X509_check_ip_asc_APIName is similar , except that the NUL-terminated string X509_check_ip_asc_APIParam_2 is first converted to the internal representation",,,null,"X509_check_ip_asc_APIName is similar, except that the NUL-terminated string X509_check_ip_asc_APIParam_2 is first converted to the internal representation.","X509_check_ip_asc_APIName is similar, except that the NUL-terminated string X509_check_ip_asc_APIParam_2 is first converted to the internal representation."
0,0,So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that,,,null,So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed if desired.,"If a server SSL_CTX is configured with the SSL_SESS_CACHE_NO_INTERNAL_STORE flag ,then the internal cache will not be populated automatically by new sessions negotiated by the SSL/TLS implementation, even though the internal cache will be searched automatically for session-resume requests (the latter can be suppressed by SSL_SESS_CACHE_NO_INTERNAL_LOOKUP). So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed if desired."
0,0,"pem_passwd_cb_APIName can use pem_passwd_cb_APIParam_3 to check , whether an item shall be encrypted",,,When asking for the password interactively,"When asking for the password interactively, pem_passwd_cb_APIName can use pem_passwd_cb_APIParam_3 to check, whether an item shall be encrypted (rwflag=1).","When asking for the password interactively, pem_passwd_cb_APIName can use pem_passwd_cb_APIParam_3 to check, whether an item shall be encrypted (rwflag=1). In this case the password dialog may ask for the same password twice for comparison in order to catch typos, that would make decryption impossible."
0,0,The function EC_GROUP_check performs a number of checks on a curve to verify that it is valid,,,null,The function EC_GROUP_check performs a number of checks on a curve to verify that it is valid.,The function EC_GROUP_check performs a number of checks on a curve to verify that it is valid. Checks performed include verifying that the discriminant is non zero; that a generator has been defined; that the generator is on the curve and has the correct order.
0,0,"Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE , ie the ENGINE 's ctrl_APIName handler is not used for the control command",,,null,"Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE, ie the ENGINE's ctrl_APIName handler is not used for the control command.","It is possible to discover at run-time the names, numerical-ids, descriptions and input parameters of the control commands supported by an ENGINE using a structural reference. Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE, ie the ENGINE's ctrl_APIName handler is not used for the control command. openssl/engine.h defines an index, ENGINE_CMD_BASE, that all control commands implemented by ENGINEs should be numbered from. Any command value lower than this symbol is considered a ""generic"" command is handled directly by the OpenSSL core routines."
0,0,Sometimes however it is useful to obtain the data originally signed using a signing operation,,,null,Sometimes however it is useful to obtain the data originally signed using a signing operation.,Sometimes however it is useful to obtain the data originally signed using a signing operation. Only certain public key algorithms can recover a signature in this way (for example RSA in PKCS padding mode).
0,0,i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format,,,null,i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format.,"i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format. If i2d_X509_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written. If the return value is negative an error occurred, otherwise i2d_X509_APIName returns the length of the encoded data."
0,0,HMAC_Init_APIName initializes a HMAC_Init_APIParam_1 structure to use the hash function HMAC_APIParam_1 and the key HMAC_Init_APIParam_2 which is HMAC_Init_APIParam_3 bytes long,,,null,HMAC_Init_APIName initializes a HMAC_Init_APIParam_1 structure to use the hash function HMAC_APIParam_1 and the key HMAC_Init_APIParam_2 which is HMAC_Init_APIParam_3 bytes long.,HMAC_Init_APIName initializes a HMAC_Init_APIParam_1 structure to use the hash function HMAC_APIParam_1 and the key HMAC_Init_APIParam_2 which is HMAC_Init_APIParam_3 bytes long. HMAC_Init_APIName is deprecated and only included for backward compatibility with OpenSSL 0.9.6b.
0,0,"Checks performed include verifying that the discriminant is non zero, a generator has been defined and the generator is on the curve and has the correct order.",1,,null,Checks performed include verifying that the discriminant is non zero; that a generator has been defined; that the generator is on the curve and has the correct order.,The function EC_GROUP_check performs a number of checks on a curve to verify that it is valid. Checks performed include verifying that the discriminant is non zero; that a generator has been defined; that the generator is on the curve and has the correct order.
0,0,The functions SSL_CTX_build_cert_chain_APIName and SSL_build_cert_chain_APIName can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order,,,null,The functions SSL_CTX_build_cert_chain_APIName and SSL_build_cert_chain_APIName can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order.,The functions SSL_CTX_build_cert_chain_APIName and SSL_build_cert_chain_APIName can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order. Misconfigured applications sending incorrect certificate chains often cause problems with peers.
0,0,The functions are as follows,,,null,The functions are as follows:,The functions are as follows:
0,0,EVP_VerifyInit_APIName initializes verification context EVP_VerifyInit_APIParam_1 to use the default implementation of digest EVP_VerifyInit_APIParam_2,,,null,EVP_VerifyInit_APIName initializes verification context EVP_VerifyInit_APIParam_1 to use the default implementation of digest EVP_VerifyInit_APIParam_2.,EVP_VerifyInit_APIName initializes verification context EVP_VerifyInit_APIParam_1 to use the default implementation of digest EVP_VerifyInit_APIParam_2.
0,0,Whether the session was reused can be queried with the SSL_session_reused_APIName call,,,null,Whether the session was reused can be queried with the SSL_session_reused_APIName call.,"SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used when the TLS/SSL connection is to be established. SSL_set_session_APIName is only useful for TLS/SSL clients. When the session is set, the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1. If the session is not reused, the reference count is decremented again during SSL_connect_APIName. Whether the session was reused can be queried with the SSL_session_reused_APIName call."
0,0,Protocol messages are passed to the callback function after decryption and fragment collection where applicable,,,null,Protocol messages are passed to the callback function after decryption and fragment collection where applicable.,Protocol messages are passed to the callback function after decryption and fragment collection where applicable. (Thus record boundaries are not visible.)
0,0,The EVP_PKEY_new_APIName function allocates an empty EVP_PKEY_new_APIParam_0 structure which is used by OpenSSL to store private keys,,,null,The EVP_PKEY_new_APIName function allocates an empty EVP_PKEY_new_APIParam_0 structure which is used by OpenSSL to store private keys.,The EVP_PKEY_new_APIName function allocates an empty EVP_PKEY_new_APIParam_0 structure which is used by OpenSSL to store private keys.
0,0,"Specifically , one case where this happens is when step up occurs",,,null,"Specifically this will happen if a session renegotiation takes place during a BIO_read_APIName operation, one case where this happens is when step up occurs.","SSL BIOs are exceptional in that if the underlying transport is non blocking SSL BIOs can still request a retry in exceptional circumstances. Specifically this will happen if a session renegotiation takes place during a BIO_read_APIName operation, one case where this happens is when step up occurs."
0,0,"DH_generate_parameters_ex_APIName generates Diffie-Hellman parameters that can be shared among a group of users , and stores them in the provided DH_generate_parameters_ex_APIParam_1 structure",,,null,"DH_generate_parameters_ex_APIName generates Diffie-Hellman parameters that can be shared among a group of users, and stores them in the provided DH_generate_parameters_ex_APIParam_1 structure.","DH_generate_parameters_ex_APIName generates Diffie-Hellman parameters that can be shared among a group of users, and stores them in the provided DH_generate_parameters_ex_APIParam_1 structure. The pseudo-random number generator must be seeded prior to calling DH_generate_parameters_APIName."
0,0,These functions allow an ASN1_STRING_set_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_data_APIParam_1 ASN1_STRING_type_APIParam_1 structure to be manipulated,,,null,These functions allow an ASN1_STRING_set_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_data_APIParam_1 ASN1_STRING_type_APIParam_1 structure to be manipulated.,These functions allow an ASN1_STRING_set_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_data_APIParam_1 ASN1_STRING_type_APIParam_1 structure to be manipulated.
0,0,The error code that can be obtained by ERR_get_error_APIName,,,null,The error code that can be obtained by ERR_get_error_APIName .,"d2i_X509_APIName, d2i_X509_bio_APIName and d2i_X509_fp_APIName return a valid d2i_X509_APIParam_1 d2i_X509_bio_APIParam_2 d2i_X509_fp_APIParam_2 structure or NULL if an error occurs. The error code that can be obtained by ERR_get_error_APIName . If the ""reuse"" capability has been used with a valid X509 structure being passed in via d2i_X509_APIParam_1 then the object is not freed in the event of error but may be in a potentially invalid or inconsistent state."
0,0,In some versions of OpenSSL and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one,,,null,"In some versions of OpenSSL the ""reuse"" behaviour of d2i_X509_APIName when d2i_X509_APIParam_1 is valid is broken and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one.","In some versions of OpenSSL the ""reuse"" behaviour of d2i_X509_APIName when d2i_X509_APIParam_1 is valid is broken and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one. As a result the use of this ""reuse"" behaviour is strongly discouraged."
0,0,EC_KEY_check_key performs various sanity checks on the EC_KEY object to confirm that EC_KEY object is valid,,,null,EC_KEY_check_key performs various sanity checks on the EC_KEY object to confirm that EC_KEY object is valid.,EC_KEY_check_key performs various sanity checks on the EC_KEY object to confirm that EC_KEY object is valid.
0,0,The encoding of the TBSCertificate portion of a certificate is cached in the i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure internally to improve encoding performance and to ensure certificate signatures are verified correctly in some certificates with broken encodings,,,null,The encoding of the TBSCertificate portion of a certificate is cached in the i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure internally to improve encoding performance and to ensure certificate signatures are verified correctly in some certificates with broken (non-DER) encodings.,The encoding of the TBSCertificate portion of a certificate is cached in the i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure internally to improve encoding performance and to ensure certificate signatures are verified correctly in some certificates with broken (non-DER) encodings.
0,0,The error codes that can be obtained by ERR_get_error_APIName,,,null,The error codes that can be obtained by ERR_get_error_APIName .,The error codes that can be obtained by ERR_get_error_APIName .
0,0,"A UI can contain more than one prompt , which are performed in the given sequence",,,null,"A UI can contain more than one prompt, which are performed in the given sequence.","A UI can contain more than one prompt, which are performed in the given sequence. Each prompt gets an index number which is returned by the UI_add and UI_dup functions, and has to be used to get the corresponding result with UI_get0_result_APIName."
0,0,EVP_PKEY_meth_free_APIName frees an existing EVP_PKEY_meth_free_APIParam_1 pointed by EVP_PKEY_meth_free_APIParam_1,,,null,EVP_PKEY_meth_free_APIName frees an existing EVP_PKEY_meth_free_APIParam_1 pointed by EVP_PKEY_meth_free_APIParam_1.,EVP_PKEY_meth_free_APIName frees an existing EVP_PKEY_meth_free_APIParam_1 pointed by EVP_PKEY_meth_free_APIParam_1.
0,0,"HMAC is a MAC , ie a keyed hash function used for message authentication , which is based on a hash function",,,null,"HMAC is a MAC (message authentication code), ie a keyed hash function used for message authentication, which is based on a hash function.","HMAC is a MAC (message authentication code), ie a keyed hash function used for message authentication, which is based on a hash function."
0,0,Slated for possible release in 0.9.8 is support for transparent loading of `` dynamic '' ENGINEs,,,null,"Slated for possible release in 0.9.8 is support for transparent loading of ""dynamic"" ENGINEs (built as self-contained shared-libraries).","The ENGINE API and internal architecture is currently being reviewed. Slated for possible release in 0.9.8 is support for transparent loading of ""dynamic"" ENGINEs (built as self-contained shared-libraries). This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications, and would also remove any requirement for applications to explicitly use the ""dynamic"" ENGINE to bind to shared-library implementations."
0,0,"is writes the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written.",1,,If i2d_X509_APIParam_2 is not NULL,"If i2d_X509_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written.","i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format. If i2d_X509_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written. If the return value is negative an error occurred, otherwise i2d_X509_APIName returns the length of the encoded data."
0,0,"This has several potential uses , it can be used to cache data associated with a structure or some additional data",,,null,"This has several potential uses, it can be used to cache data associated with a structure (for example the hash of some part of the structure) or some additional data (for example a handle to the data in an external library).","Several OpenSSL structures can have application specific data attached to them. This has several potential uses, it can be used to cache data associated with a structure (for example the hash of some part of the structure) or some additional data (for example a handle to the data in an external library)."
0,0,RAND_write_file_APIName writes a number of random bytes to file RAND_write_file_APIParam_1 RAND_load_file_APIParam_1 which can be used to initialize the PRNG by calling RAND_load_file_APIName in a later session,,,null,RAND_write_file_APIName writes a number of random bytes (currently 1024) to file RAND_write_file_APIParam_1 RAND_load_file_APIParam_1 which can be used to initialize the PRNG by calling RAND_load_file_APIName in a later session.,RAND_write_file_APIName writes a number of random bytes (currently 1024) to file RAND_write_file_APIParam_1 RAND_load_file_APIParam_1 which can be used to initialize the PRNG by calling RAND_load_file_APIName in a later session.
0,0,"BIO_read_filename_APIName , BIO_write_filename_APIName , BIO_append_filename_APIName and BIO_rw_filename_APIName set the file BIO BIO_read_filename_APIParam_1 BIO_write_filename_APIParam_1 BIO_append_filename_APIParam_1 BIO_rw_filename_APIParam_1 to use file BIO_read_filename_APIParam_2 BIO_write_filename_APIParam_2 BIO_append_filename_APIParam_2 BIO_rw_filename_APIParam_2 for reading , writing , append or read write respectively",,,null,"BIO_read_filename_APIName, BIO_write_filename_APIName, BIO_append_filename_APIName and BIO_rw_filename_APIName set the file BIO BIO_read_filename_APIParam_1 BIO_write_filename_APIParam_1 BIO_append_filename_APIParam_1 BIO_rw_filename_APIParam_1 to use file BIO_read_filename_APIParam_2 BIO_write_filename_APIParam_2 BIO_append_filename_APIParam_2 BIO_rw_filename_APIParam_2 for reading, writing, append or read write respectively.","BIO_read_filename_APIName, BIO_write_filename_APIName, BIO_append_filename_APIName and BIO_rw_filename_APIName set the file BIO BIO_read_filename_APIParam_1 BIO_write_filename_APIParam_1 BIO_append_filename_APIParam_1 BIO_rw_filename_APIParam_1 to use file BIO_read_filename_APIParam_2 BIO_write_filename_APIParam_2 BIO_append_filename_APIParam_2 BIO_rw_filename_APIParam_2 for reading, writing, append or read write respectively."
0,0,"A TLSCiphertext record was received which had a length more than 2 ^ 14 +2048 bytes , or a record decrypted to a TLSCompressed record with more than 2 ^ 14 +1024 bytes",,,null,"A TLSCiphertext record was received which had a length more than 2^14+2048 bytes, or a record decrypted to a TLSCompressed record with more than 2^14+1024 bytes.","A TLSCiphertext record was received which had a length more than 2^14+2048 bytes, or a record decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always fatal."
0,0,EC_GROUP_cmp compares EC_GROUP_cmp_APIParam_1 and EC_GROUP_cmp_APIParam_2 to determine whether they represent the same curve or not,,,null,EC_GROUP_cmp compares EC_GROUP_cmp_APIParam_1 and EC_GROUP_cmp_APIParam_2 to determine whether they represent the same curve or not.,EC_GROUP_cmp compares EC_GROUP_cmp_APIParam_1 and EC_GROUP_cmp_APIParam_2 to determine whether they represent the same curve or not.
0,0,Data are received in blocks from the peer,,,null,Data are received in blocks from the peer.,Data are received in blocks from the peer. Therefore data can be buffered inside SSL_pending_APIParam_1 and are ready for immediate retrieval with SSL_read_APIName .
0,0,SSL_set1_curves_APIName and SSL_set1_curves_list_APIName are similar except SSL_set1_curves_APIName and SSL_set1_curves_list_APIName set supported curves for the SSL structure SSL_set1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1,,,null,SSL_set1_curves_APIName and SSL_set1_curves_list_APIName are similar except SSL_set1_curves_APIName and SSL_set1_curves_list_APIName set supported curves for the SSL structure SSL_set1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1.,SSL_set1_curves_APIName and SSL_set1_curves_list_APIName are similar except SSL_set1_curves_APIName and SSL_set1_curves_list_APIName set supported curves for the SSL structure SSL_set1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1.
0,0,So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption,,,null,So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption.,"Envelope encryption is the usual method of using public key encryption on large amounts of data, this is because public key encryption is slow but symmetric encryption is fast. So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption."
0,0,Check out the error stack to find out the reason for failure,,,null,Check out the error stack to find out the reason for failure.,SSL_CTX_add_extra_chain_cert_APIName and SSL_CTX_clear_extra_chain_certs_APIName return 1 on success and 0 for failure. Check out the error stack to find out the reason for failure.
0,0,Calling SSL_CTX_build_cert_chain_APIName or SSL_build_cert_chain_APIName is more efficient than the automatic chain building as it is only performed once,,,null,Calling SSL_CTX_build_cert_chain_APIName or SSL_build_cert_chain_APIName is more efficient than the automatic chain building as it is only performed once.,Calling SSL_CTX_build_cert_chain_APIName or SSL_build_cert_chain_APIName is more efficient than the automatic chain building as it is only performed once. Automatic chain building is performed on each new session.
0,0,DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key,,,null,DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key.,"DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key. If the parity is wrong, then -1 is returned. If the key is a weak key, then -2 is returned. If an error is returned, the key schedule is not generated."
0,0,"For each supported abstraction , the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default",,,null,"For each supported abstraction, the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default.","For each supported abstraction, the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default. These implementations are registered in the tables and indexed by an 'nid' value, because abstractions like EVP_CIPHER and EVP_DIGEST support many distinct algorithms and modes, and ENGINEs can support arbitrarily many of them. In the case of other abstractions like RSA, DSA, etc, there is only one ""algorithm"" so all implementations implicitly register using the same 'nid' index."
0,0,"In the case of other abstractions like RSA , DSA , etc , there is only one `` algorithm '' so all implementations implicitly register using the same ` nid ' index",,,null,"In the case of other abstractions like RSA, DSA, etc, there is only one ""algorithm"" so all implementations implicitly register using the same 'nid' index.","For each supported abstraction, the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default. These implementations are registered in the tables and indexed by an 'nid' value, because abstractions like EVP_CIPHER and EVP_DIGEST support many distinct algorithms and modes, and ENGINEs can support arbitrarily many of them. In the case of other abstractions like RSA, DSA, etc, there is only one ""algorithm"" so all implementations implicitly register using the same 'nid' index."
0,0,BN_set_word_APIParam_2 is a macro that will be an unsigned integral type optimied for the most efficient implementation on the local platform,,,null,BN_set_word_APIParam_2 is a macro that will be an unsigned integral type optimied for the most efficient implementation on the local platform.,BN_set_word_APIParam_2 is a macro that will be an unsigned integral type optimied for the most efficient implementation on the local platform.
0,0,"This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications , and would also remove any requirement for applications to explicitly use the `` dynamic '' ENGINE to bind to shared-library implementations",,,null,"This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications, and would also remove any requirement for applications to explicitly use the ""dynamic"" ENGINE to bind to shared-library implementations.","The ENGINE API and internal architecture is currently being reviewed. Slated for possible release in 0.9.8 is support for transparent loading of ""dynamic"" ENGINEs (built as self-contained shared-libraries). This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications, and would also remove any requirement for applications to explicitly use the ""dynamic"" ENGINE to bind to shared-library implementations."
0,0,"A BIO is an I/O abstraction , BIO hides many of the underlying I/O details from an application",,,null,"A BIO is an I/O abstraction, BIO hides many of the underlying I/O details from an application.","A BIO is an I/O abstraction, BIO hides many of the underlying I/O details from an application. If an application uses a BIO for its I/O ,the BIO can transparently handle SSL connections, unencrypted network connections and file I/O."
0,0,The various LHASH macros and callback types exist to make it possible to write type-checked code without resorting to function-prototype casting - an evil that makes application code much harder to audit/verify and also opens the window of opportunity for stack corruption and other hard-to-find bugs,,,null,The various LHASH macros and callback types exist to make it possible to write type-checked code without resorting to function-prototype casting - an evil that makes application code much harder to audit/verify and also opens the window of opportunity for stack corruption and other hard-to-find bugs.,"The various LHASH macros and callback types exist to make it possible to write type-checked code without resorting to function-prototype casting - an evil that makes application code much harder to audit/verify and also opens the window of opportunity for stack corruption and other hard-to-find bugs. It also, apparently, violates ANSI-C."
0,0,ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from,,,null,ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from.,ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from. ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions. ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL if no additional configuration will be used.
0,0,The CMS_uncompress_APIParam_2 parameter is used in the rare case where the compressed content is detached,,,null,The CMS_uncompress_APIParam_2 parameter is used in the rare case where the compressed content is detached.,The CMS_uncompress_APIParam_2 parameter is used in the rare case where the compressed content is detached. The CMS_uncompress_APIParam_2 parameter will normally be set to NULL.
0,0,DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations,,,null,DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations.,"DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations. If DSA_new_method_APIParam_1 is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method_APIName is used."
0,0,"One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix_APIName , pass the current argument to SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 and the following argument to SSL_CONF_cmd_APIParam_3",,,null,"One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix_APIName, pass the current argument to SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 and the following argument to SSL_CONF_cmd_APIParam_3 (which may be NULL).","Applications can also use SSL_CTX_cmd_APIName to process command lines though the utility function SSL_CTX_cmd_argv_APIName is normally used instead. One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix_APIName, pass the current argument to SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 and the following argument to SSL_CONF_cmd_APIParam_3 (which may be NULL)."
0,0,EC_POINT_is_on_curve tests whether the supplied point is on the curve or not,,,null,EC_POINT_is_on_curve tests whether the supplied point is on the curve or not.,EC_POINT_is_on_curve tests whether the supplied point is on the curve or not.
0,0,Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1,,,null,Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1.,"The SHA224, SHA256, SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions. Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1. SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1. The buffer SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 must have space for the output from the SHA variant being used (defined by SHA224_DIGEST_LENGTH, SHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and SHA512_DIGEST_LENGTH). Also note that, as for the SHA1_APIName function above, the SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName functions are not thread safe if SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA256_Final_APIParam_1 SHA1_Final_APIParam_1 SHA224_Final_APIParam_1 is NULL."
0,0,ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions,,,null,ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions.,ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from. ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions. ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL if no additional configuration will be used.
0,0,A number of the builtin curves within the library provide seed values that can be obtained,,,null,A number of the builtin curves within the library provide seed values that can be obtained.,"ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,"Unlike SSL_get_error_APIName , which also evaluates the error queue , the results are obtained by examining an internal state flag only",,,null,"Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only.","SSL_want_APIName examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error_APIName . Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under non-blocking I/O. Error conditions are not handled and must be treated using SSL_get_error_APIName ."
0,0,the b parameter was generated in a verifiable fashion using that seed,,,If the seed is present for a curve,"If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed.","ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,"Here we 'll assume we want to load and register all ENGINE implementations bundled with OpenSSL , such that",,,null,"Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used.","Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used. The following code illustrates how this can work;"
0,0,"EVP_DigestInit_APIName behaves in the same way as EVP_DigestInit_ex_APIName except the passed context EVP_DigestInit_APIParam_1 EVP_DigestInit_ex_APIParam_1 does not have to be initialized , and it always uses the default digest implementation",,,null,"EVP_DigestInit_APIName behaves in the same way as EVP_DigestInit_ex_APIName except the passed context EVP_DigestInit_APIParam_1 EVP_DigestInit_ex_APIParam_1 does not have to be initialized, and it always uses the default digest implementation.","EVP_DigestInit_APIName behaves in the same way as EVP_DigestInit_ex_APIName except the passed context EVP_DigestInit_APIParam_1 EVP_DigestInit_ex_APIParam_1 does not have to be initialized, and it always uses the default digest implementation."
0,0,The flags set affect how subsequent calls to SSL_CONF_cmd_APIName or SSL_CONF_argv_APIName behave,,,null,The flags set affect how subsequent calls to SSL_CONF_cmd_APIName or SSL_CONF_argv_APIName behave.,The flags set affect how subsequent calls to SSL_CONF_cmd_APIName or SSL_CONF_argv_APIName behave.
0,0,Additionally `` old style '' callbacks are used instead of the newer BN_GENCB based approach,,,null,"Additionally ""old style"" callbacks are used instead of the newer BN_GENCB based approach.","DSA_generate_parameters_APIName (deprecated) works in much the same way as for DSA_generate_parameters_ex, except that no DSA_generate_parameters_ex_APIParam_1 parameter is passed and instead a newly allocated DSA_generate_parameters_APIParam_0 structure is returned. Additionally ""old style"" callbacks are used instead of the newer BN_GENCB based approach. Refer to BN_generate_prime_APIName for further information."
0,0,RAND_bytes_APIName describes how to obtain random data from the PRNG,,,null,RAND_bytes_APIName describes how to obtain random data from the PRNG.,RAND_bytes_APIName describes how to obtain random data from the PRNG.
0,0,"X509_NAME_add_entry_by_txt_APIName , X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2 , an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively",,,null,"X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2, an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively.","X509_NAME_add_entry_by_txt_APIName, X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2, an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively. The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5. If X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5 is -1 then the field length is calculated internally using strlen(bytes)."
0,0,"This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks , or have any trapdoors in it",,,null,"This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it.","ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,Currently no detailed documentation on how to use the X509_STORE object is available,,,null,Currently no detailed documentation on how to use the X509_STORE object is available.,Currently no detailed documentation on how to use the X509_STORE object is available. Not all members of the X509_STORE are used when the verification takes place. So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions. This document must therefore be updated when documentation about the X509_STORE object and its handling becomes available.
0,0,starting with the one it considers the most secure,,,null,An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure.,An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure. It could then use the chain of the first set which returns suitable flags.
0,0,"As mentioned , functional references exist",,,when the cryptographic functionality of an ENGINE is required to be available,"As mentioned, functional references exist when the cryptographic functionality of an ENGINE is required to be available.","As mentioned, functional references exist when the cryptographic functionality of an ENGINE is required to be available. A functional reference can be obtained in one of two ways; from an existing structural reference to the required ENGINE, or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose."
0,0,"SSL_read_APIName will negotiate a TLS/SSL session , if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName",,,If necessary,"If necessary, SSL_read_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName .","If necessary, SSL_read_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_read_APIName operation. The behaviour of SSL_read_APIName depends on the underlying BIO."
0,0,So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions,,,null,So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions.,Currently no detailed documentation on how to use the X509_STORE object is available. Not all members of the X509_STORE are used when the verification takes place. So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions. This document must therefore be updated when documentation about the X509_STORE object and its handling becomes available.
0,0,the default engine for DSA operations is used,1,,If DSA_new_method_APIParam_1 is NULL,"If DSA_new_method_APIParam_1 is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method_APIName is used.","DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations. If DSA_new_method_APIParam_1 is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method_APIName is used."
0,0,the DSA_METHOD controlled by DSA_set_default_method_APIName is used,1,,if no default ENGINE is set,"If DSA_new_method_APIParam_1 is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method_APIName is used.","DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations. If DSA_new_method_APIParam_1 is NULL, the default engine for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD controlled by DSA_set_default_method_APIName is used."
0,0,The other digest algorithms are still in common use,,,null,The other digest algorithms are still in common use.,New applications should use the SHA2 digest algorithms such as SHA256. The other digest algorithms are still in common use.
0,0,"any additional BIOs are placed between the socket and the accept BIO , that is the chain will be accept - > otherbios - > socket",,,If any additional BIOs have been set using BIO_set_accept_bios_APIName,"If any additional BIOs have been set using BIO_set_accept_bios_APIName ,then any additional BIOs are placed between the socket and the accept BIO, that is the chain will be accept->otherbios->socket.","If any additional BIOs have been set using BIO_set_accept_bios_APIName ,then any additional BIOs are placed between the socket and the accept BIO, that is the chain will be accept->otherbios->socket."
0,0,"it was either assigned a dedicated client method , a dedicated server method , or a generic method , that can be used for both client and server connections",,,When the SSL_CTX object was created with SSL_CTX_new_APIName,"When the SSL_CTX object was created with SSL_CTX_new_APIName , it was either assigned a dedicated client method, a dedicated server method, or a generic method, that can be used for both client and server connections.","When the SSL_CTX object was created with SSL_CTX_new_APIName , it was either assigned a dedicated client method, a dedicated server method, or a generic method, that can be used for both client and server connections. (The method might have been changed with SSL_CTX_set_ssl_version_APIName or SSL_set_ssl_method_APIName.)"
0,0,"These functions usage is identical to that of RSA_get_ex_new_index_APIName , RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName",,,null,"These functions usage is identical to that of RSA_get_ex_new_index_APIName, RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName .","These functions handle application specific data in X509_STORE_CTX structures. These functions usage is identical to that of RSA_get_ex_new_index_APIName, RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName ."
0,0,"The certificate matching functions are used to check whether a certificate matches a given host name , email address , or IP address",,,null,"The certificate matching functions are used to check whether a certificate matches a given host name, email address, or IP address.","The certificate matching functions are used to check whether a certificate matches a given host name, email address, or IP address. The validity of the certificate and its trust level has to be checked by other means."
0,0,Read and write operations on an accept BIO will perform I/O on the underlying connection,,,null,Read and write operations on an accept BIO will perform I/O on the underlying connection.,"Read and write operations on an accept BIO will perform I/O on the underlying connection. If no connection is established and the port (see below) is set up properly ,then the BIO waits for an incoming connection."
0,0,A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2,,,null,A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2.,"A TLS/SSL connection established with these methods will only understand the SSLv2 protocol. A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2. A server will only understand SSLv2 client hello messages. The SSLv2 protocol offers little to no security and should not be used. As of OpenSSL 1.0.2g, EXPORT ciphers and 56-bit DES are no longer available with SSLv2."
0,0,ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found,,,null,ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found.,"ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found. The mark is then removed. If there is no mark, the whole stack is removed."
0,0,The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert_APIName function,,,null,The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert_APIName function.,"SSL_CTX_use_certificate_APIName loads the certificate SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_CTX_use_certificate_APIParam_1, SSL_use_certificate_APIName loads SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_use_certificate_APIParam_1. The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert_APIName function."
0,0,"Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations , either directly or by the use of DH_new_method_APIParam_1 modules",,,null,"Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations, either directly or by the use of DH_new_method_APIParam_1 modules.","Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations, either directly or by the use of DH_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using DH structure elements directly and instead use API functions to query or modify keys."
0,0,The `` thread id '' object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called,,,null,"The ""thread id"" object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called.","BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure. This is to help users provide proper locking if needed for multi-threaded use. The ""thread id"" object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called."
0,0,the whole stack is removed,,,If there is no mark,"If there is no mark, the whole stack is removed.","ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found. The mark is then removed. If there is no mark, the whole stack is removed."
0,0,"The TLS RFC does however not specify compression methods or their corresponding identifiers , so there is currently no compatible way to integrate compression with unknown peers",,,null,"The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers.","The TLS standard (or SSLv3) allows the integration of compression methods into the communication. The TLS RFC does however not specify compression methods or their corresponding identifiers, so there is currently no compatible way to integrate compression with unknown peers. It is therefore currently not recommended to integrate compression into applications. Applications for non-public use may agree on certain compression methods. Using different compression methods with the same identifier will lead to connection failure."
0,0,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice,,,null,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice.,X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice. X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.
0,0,so it is possible to encode very large structures,,,null,Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures.,The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.
0,0,SSL_CTX_new_APIName creates a new SSL_CTX_new_APIParam_0 object as framework to establish TLS/SSL enabled connections,,,null,SSL_CTX_new_APIName creates a new SSL_CTX_new_APIParam_0 object as framework to establish TLS/SSL enabled connections.,SSL_CTX_new_APIName creates a new SSL_CTX_new_APIParam_0 object as framework to establish TLS/SSL enabled connections.
0,0,At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated,,,null,At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated.,"X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned. At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated. The length of the output string written is returned excluding the terminating null. If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is <NULL> then the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 (excluding the final null) is returned."
0,0,Essentially a structural reference is sufficient,,,if you only need to query or manipulate the data of an ENGINE implementation rather than use an ENGINE implementation functionality,Essentially a structural reference is sufficient if you only need to query or manipulate the data of an ENGINE implementation rather than use an ENGINE implementation functionality.,"This basic type of reference is used for instantiating new ENGINEs, iterating across OpenSSL's internal linked-list of loaded ENGINEs, reading information about an ENGINE, etc. Essentially a structural reference is sufficient if you only need to query or manipulate the data of an ENGINE implementation rather than use an ENGINE implementation functionality."
0,0,bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number,,,null,bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number.,"bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number. bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number. If the number has to be expanded, both macros call bn_expand2_APIName, which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data. both macros return NULL on error, bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 otherwise."
0,0,bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number,,,null,bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number.,"bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number. bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number. If the number has to be expanded, both macros call bn_expand2_APIName, which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data. both macros return NULL on error, bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 otherwise."
0,0,"Note that DSA keys may use non-standard DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 implementations , either directly or by the use of DSA_new_method_APIParam_1 modules",,,null,"Note that DSA keys may use non-standard DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 implementations, either directly or by the use of DSA_new_method_APIParam_1 modules.","Note that DSA keys may use non-standard DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 implementations, either directly or by the use of DSA_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using DSA structure elements directly and instead use API functions to query or modify keys."
0,0,The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3,,,null,The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3.,EVP_EncodeFinal_APIName must be called at the end of an encoding operation. EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object. The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3. It is the caller's responsibility to ensure that EVP_EncodeFinal_APIParam_2 is sufficiently large to accommodate the output data which will never be more than 65 bytes plus an additional NUL terminator (ie 66 bytes in total).
0,0,"both macros call bn_expand2_APIName , which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data",,,If the number has to be expanded,"If the number has to be expanded, both macros call bn_expand2_APIName, which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data.","bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number. bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number. If the number has to be expanded, both macros call bn_expand2_APIName, which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data. both macros return NULL on error, bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 otherwise."
0,0,"www.microsoft.com - , if session-id reuse is performed , the session-id passed back in the server-finished message is different from the one decided upon",,,null,"www.microsoft.com - when talking SSLv2, if session-id reuse is performed, the session-id passed back in the server-finished message is different from the one decided upon.","www.microsoft.com - when talking SSLv2, if session-id reuse is performed, the session-id passed back in the server-finished message is different from the one decided upon."
0,0,Usually The hash table entries consist of key and value fields,,,null,Usually The hash table entries consist of key and value fields.,This library implements type-checked dynamic hash tables. The hash table entries can be arbitrary structures. Usually The hash table entries consist of key and value fields.
0,0,DH_generate_key_APIName describes how to perform a key agreement,,,null,The generation of shared DH parameters is described in DH_generate_parameters_APIName ; DH_generate_key_APIName describes how to perform a key agreement.,These functions implement the Diffie-Hellman key agreement protocol. The generation of shared DH parameters is described in DH_generate_parameters_APIName ; DH_generate_key_APIName describes how to perform a key agreement.
0,0,des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function,,,null,des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName; des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function.,des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName; des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function.
0,0,To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index,,,null,To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index.,"Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake, a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected. To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index. This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName. The index value is set when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake."
0,0,"EVP_OpenUpdate_APIName and EVP_OpenFinal_APIName have exactly the same properties as the EVP_DecryptUpdate_APIName and EVP_DecryptFinal_APIName routines , as documented on the EVP_EncryptInit_APIName manual page",,,null,"EVP_OpenUpdate_APIName and EVP_OpenFinal_APIName have exactly the same properties as the EVP_DecryptUpdate_APIName and EVP_DecryptFinal_APIName routines, as documented on the EVP_EncryptInit_APIName manual page.","EVP_OpenUpdate_APIName and EVP_OpenFinal_APIName have exactly the same properties as the EVP_DecryptUpdate_APIName and EVP_DecryptFinal_APIName routines, as documented on the EVP_EncryptInit_APIName manual page."
0,0,i2d_ECPKParameters_APIName encodes the structure pointed to by i2d_ECPKParameters_APIParam_1 into DER format,,,null,i2d_ECPKParameters_APIName encodes the structure pointed to by i2d_ECPKParameters_APIParam_1 into DER format.,"i2d_ECPKParameters_APIName encodes the structure pointed to by i2d_ECPKParameters_APIParam_1 into DER format. If i2d_ECPKParameters_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_ECPKParameters_APIParam_2, and increments the DER encoded data to point after the data just written. If the return value is negative an error occurred, otherwise i2d_ECPKParameters_APIName returns the length of the encoded data."
0,0,"Because of the different protocol , for SSLv2 , the server will send its list of preferences to the client and the client chooses",,,null,"Because of the different protocol, for SSLv2, the server will send its list of preferences to the client and the client chooses.","When choosing a cipher, use the server's preferences instead of the client preferences. When not set, the SSL server will always follow the clients preferences. When set, the SSLv3/TLSv1 server will choose following its own preferences. Because of the different protocol, for SSLv2, the server will send its list of preferences to the client and the client chooses."
0,0,"ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format , the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1",,,null,"ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format, the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1.","ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format, the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1. The length of ASN1_STRING_to_UTF8_APIParam_1 is returned or a negative error code by ASN1_STRING_to_UTF8_APIName or a negative error code. The buffer ASN1_STRING_to_UTF8_APIParam_1 should be free using OPENSSL_free_APIName."
0,0,The ECPrivateKey encode and decode routines encode and parse an d2i_ECPrivateKey_APIParam_1 EC_KEY_set_enc_flags_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 structure into a binary format and back again,,,null,The ECPrivateKey encode and decode routines encode and parse an d2i_ECPrivateKey_APIParam_1 EC_KEY_set_enc_flags_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 structure into a binary format (ASN.1 DER) and back again.,The ECPrivateKey encode and decode routines encode and parse an d2i_ECPrivateKey_APIParam_1 EC_KEY_set_enc_flags_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 structure into a binary format (ASN.1 DER) and back again.
0,0,they can obtain the master secret for any ticket using that key and decrypt any traffic using that session,,,If an attacker can obtain the key used to encrypt a session ticket,"If an attacker can obtain the key used to encrypt a session ticket , they can obtain the master secret for any ticket using that key and decrypt any traffic using that session :  .","If an attacker can obtain the key used to encrypt a session ticket, they can obtain the master secret for any ticket using that key and decrypt any traffic using that session: even if the ciphersuite supports forward secrecy. As a result applications may wish to use multiple keys and avoid using long term keys stored in files."
0,0,"BIO_flush_APIName normally writes out any internally buffered data , in some cases BIO_flush_APIName is used to signal EOF and that no more data will be written",,,null,"BIO_flush_APIName normally writes out any internally buffered data, in some cases BIO_flush_APIName is used to signal EOF and that no more data will be written.","BIO_flush_APIName normally writes out any internally buffered data, in some cases BIO_flush_APIName is used to signal EOF and that no more data will be written."
0,0,It 's purpose is to perform any operations necessary on CMS_final_APIParam_1 and set the appropriate fields,,,null,It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields.,CMS_final_APIName finalises the structure CMS_final_APIParam_1. It's purpose is to perform any operations necessary on CMS_final_APIParam_1 (digest computation for example) and set the appropriate fields. The parameter CMS_final_APIParam_2 contains the content to be processed. The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing: this is only used with detached data and will usually be set to NULL.
0,0,"Whilst the library can be used to create any curve using the functions described above , there are also a number of predefined curves that are available",,,null,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available.","Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,it will disable SSLv3 support by default but the user can override it,,,null,it will disable SSLv3 support by default but the user can override it.,it will disable SSLv3 support by default but the user can override it. If however the call sequence is:
0,0,"X509_NAME_ENTRY_create_by_txt_APIName , X509_NAME_ENTRY_create_by_OBJ_APIName , X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_set_data_APIName are seldom used in practice are typically used to create and add new entries in a single operation",,,null,"X509_NAME_ENTRY_create_by_txt_APIName , X509_NAME_ENTRY_create_by_OBJ_APIName , X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_set_data_APIName are seldom used in practice  are typically used to create and add new entries in a single operation .","X509_NAME_ENTRY_create_by_txt_APIName, X509_NAME_ENTRY_create_by_OBJ_APIName, X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_set_data_APIName are seldom used in practice because X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_set_data_APIParam_1 structures are almost always part of X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_set_data_APIParam_1 structures and the corresponding X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_set_data_APIParam_1 functions are typically used to create and add new entries in a single operation."
0,0,This means that EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data,,,null,This means that EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.,The call to EVP_DigestVerifyFinal_APIName internally finalizes a copy of the digest context. This means that EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data.
0,0,The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate,,,null,The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate.,The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate. For example if one or more KEKRecipientInfo structures need to be added. New attributes can also be added using  CMS_encrypt_APIParam_0  and the CMS attribute utility functions
0,0,This setting stays valid until a new value is set,,,null,This setting stays valid until a new value is set.,SSL_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for SSL_set_max_cert_list_APIParam_1 to be <size> bytes. This setting stays valid until a new value is set.
0,0,This is not the default to avoid the misconception that non-blocking SSL_write_APIName behaves like non-blocking write_APIName,,,null,This is not the default to avoid the misconception that non-blocking SSL_write_APIName behaves like non-blocking write_APIName.,Make it possible to retry SSL_write_APIName with changed buffer location (the buffer contents must stay the same). This is not the default to avoid the misconception that non-blocking SSL_write_APIName behaves like non-blocking write_APIName.
0,0,This is a filter BIO that base64 encodes any data written through it and decodes any data read through it,,,null,This is a filter BIO that base64 encodes any data written through it and decodes any data read through it.,BIO_f_base64_APIName returns the base64 BIO method. This is a filter BIO that base64 encodes any data written through it and decodes any data read through it.
0,0,SSL_set_max_cert_list_APIName sets the maximum size allowed for the peer 's certificate chain for SSL_set_max_cert_list_APIParam_1 to be <size> bytes,,,null,SSL_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for SSL_set_max_cert_list_APIParam_1 to be <size> bytes.,SSL_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for SSL_set_max_cert_list_APIParam_1 to be <size> bytes. This setting stays valid until a new value is set.
0,0,"BN_print_APIName and BN_print_fp_APIName write the hexadecimal encoding of BN_print_APIParam_2 BN_print_fp_APIParam_2 , with a leading ' - ' for negative numbers , to the BN_print_APIParam_1 or BN_print_fp_APIParam_1 BN_print_APIParam_1 BN_print_fp_APIParam_1",,,null,"BN_print_APIName and BN_print_fp_APIName write the hexadecimal encoding of BN_print_APIParam_2 BN_print_fp_APIParam_2, with a leading '-' for negative numbers, to the BN_print_APIParam_1 or BN_print_fp_APIParam_1 BN_print_APIParam_1 BN_print_fp_APIParam_1.","BN_print_APIName and BN_print_fp_APIName write the hexadecimal encoding of BN_print_APIParam_2 BN_print_fp_APIParam_2, with a leading '-' for negative numbers, to the BN_print_APIParam_1 or BN_print_fp_APIParam_1 BN_print_APIParam_1 BN_print_fp_APIParam_1."
0,0,These functions implement RSA public key encryption and signatures as defined in PKCS # 1 v2 .0 -LSB- RFC 2437 -RSB-,,,null,These functions implement RSA public key encryption and signatures as defined in PKCS #1 v2.0 [RFC 2437].,These functions implement RSA public key encryption and signatures as defined in PKCS #1 v2.0 [RFC 2437].
0,0,"it writes the DER encoded data to the buffer at i2d_ECPKParameters_APIParam_2, and increments the DER encoded data to point after the data just written.",1,,If i2d_ECPKParameters_APIParam_2 is not NULL,"If i2d_ECPKParameters_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_ECPKParameters_APIParam_2, and increments the DER encoded data to point after the data just written.","i2d_ECPKParameters_APIName encodes the structure pointed to by i2d_ECPKParameters_APIParam_1 into DER format. If i2d_ECPKParameters_APIParam_2 is not NULL is writes the DER encoded data to the buffer at i2d_ECPKParameters_APIParam_2, and increments the DER encoded data to point after the data just written. If the return value is negative an error occurred, otherwise i2d_ECPKParameters_APIName returns the length of the encoded data."
0,0,a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected,,,Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake ,"Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake, a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected.","Whenever a X509_STORE_CTX object is created for the verification of the peers certificate during a handshake, a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected. To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index. This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName. The index value is set when SSL_get_ex_data_X509_STORE_CTX_idx_APIName is first called either by the application program directly or indirectly during other SSL setup functions or during the handshake."
0,0,How this is done depends on the underlying I/O structure,,,null,How this is done depends on the underlying I/O structure.,While an application may retry a failed non blocking call immediately this is likely to be very inefficient because the call will fail repeatedly until data can be processed or is available. An application will normally wait until the necessary condition is satisfied. How this is done depends on the underlying I/O structure.
0,0,"SSL_get1_session_APIName will increment the reference count , so that the session will not be implicitly removed by other operations but stays in memory",,,If the data is to be kept,"If the data is to be kept, SSL_get1_session_APIName will increment the reference count, so that the session will not be implicitly removed by other operations but stays in memory.","If the data is to be kept, SSL_get1_session_APIName will increment the reference count, so that the session will not be implicitly removed by other operations but stays in memory. In order to remove the session, SSL_SESSION_free_APIName must be explicitly called once to decrement the reference count again."
0,0,the decryption operation will always succeed,1,,"If padding is disabled, if the total amount of data decrypted is a multiple of the block size","If padding is disabled ,then the decryption operation will always succeed if the total amount of data decrypted is a multiple of the block size.","If padding is disabled ,then the decryption operation will always succeed if the total amount of data decrypted is a multiple of the block size."
0,0,d2i_ECPKParameters_APIParam_0 is written to d2i_ECPKParameters_APIParam_1,1,,If d2i_ECPKParameters_APIParam_1 is not NULL,"If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it.","d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
0,0,The cipher and digest lookup functions are used in many parts of the library,,,null,The cipher and digest lookup functions are used in many parts of the library.,"The cipher and digest lookup functions are used in many parts of the library. If the table is not initialized, several functions will misbehave and complain several functions cannot find algorithms. This includes the PEM, PKCS#12, SSL and S/MIME libraries. This is a common query in the OpenSSL mailing lists."
0,0,Additionally all the options supported by ASN1_STRING_print_ex_APIName can be used to control how each field value is displayed,,,null,Additionally all the options supported by ASN1_STRING_print_ex_APIName can be used to control how each field value is displayed.,Additionally all the options supported by ASN1_STRING_print_ex_APIName can be used to control how each field value is displayed.
0,0,EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves,,,null,EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new_APIName ).,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation. All other implementations are based on this one. EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery_APIName ). EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new_APIName ).
0,0,"This is currently used to support SM2 keys , which use an identical encoding to ECDSA",,,null,"This is currently used to support SM2 keys, which use an identical encoding to ECDSA.","EVP_PKEY_set_alias_type_APIName allows modifying a EVP_PKEY to use a different set of algorithms than the default. This is currently used to support SM2 keys, which use an identical encoding to ECDSA."
0,0,The ASN1 code is incomplete The ASN1 code has only been tested for certain common S/MIME ciphers in CBC mode,,,null,"The ASN1 code is incomplete (and sometimes inaccurate) The ASN1 code has only been tested for certain common S/MIME ciphers (RC2, DES, triple DES) in CBC mode.","The ASN1 code is incomplete (and sometimes inaccurate) The ASN1 code has only been tested for certain common S/MIME ciphers (RC2, DES, triple DES) in CBC mode."
0,0,a BIO is automatically used as the SSL BIOs read and write BIOs,,,If a BIO is appended to an SSL BIO using BIO_push_APIName,"If a BIO is appended to an SSL BIO using BIO_push_APIName ,a BIO is automatically used as the SSL BIOs read and write BIOs.","If a BIO is appended to an SSL BIO using BIO_push_APIName ,a BIO is automatically used as the SSL BIOs read and write BIOs."
0,0,they do n't handle multi character fields and have various quirks and inconsistencies,,,null,"The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies.","The functions X509_NAME_oneline_APIName and X509_NAME_print_APIName are legacy functions which produce a non standard output form, they don't handle multi character fields and have various quirks and inconsistencies. Their use is strongly discouraged in new applications."
0,0,the session will also be removed from the session cache as required by RFC2246,,,If the session is considered bad,"If the session is considered bad ,  , the session will also be removed from the session cache as required by RFC2246 .","The ssl session has reference counts from two users: the SSL object, for which the reference count is removed by SSL_free_APIName and the internal session cache. If the session is considered bad, because SSL_shutdown_APIName was not called for the connection and SSL_set_shutdown_APIName was not used to set the SSL_SENT_SHUTDOWN state, the session will also be removed from the session cache as required by RFC2246."
0,0,DES_ede3_cfb64_encrypt_APIName and DES_ede2_cfb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName except that Triple-DES is used,,,null,DES_ede3_cfb64_encrypt_APIName and DES_ede2_cfb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName except that Triple-DES is used.,DES_ede3_cfb64_encrypt_APIName and DES_ede2_cfb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName except that Triple-DES is used.
0,0,Normally a new session is added to the internal cache as well as any external session caching that is configured for the SSL_CTX,,,null,Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX.,"Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse. Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX. This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session_APIName ). Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (ie for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well."
0,0,mode is a bitfield describing what should be done with the lock,,,null,mode is a bitfield describing what should be done with the lock.,"CRYPTO_lock_APIName is used to lock and unlock the locks. mode is a bitfield describing what should be done with the lock. n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName. mode can be combined from 1,2,4,8. These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):"
0,0,"as a session may be reused , several SSL objects may be using one SSL_SESSION object at the same time",,,null,"SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,X509_VERIFY_PARAM_set_depth_APIParam_2 is the maximum number of untrusted CA certificates that can appear in a chain,,,null,That is the maximum number of untrusted CA certificates that can appear in a chain.,X509_VERIFY_PARAM_set_depth_APIName sets the maximum verification depth to X509_VERIFY_PARAM_set_depth_APIParam_2. That is the maximum number of untrusted CA certificates that can appear in a chain.
0,0,CMS_add1_recipient_cert_APIName adds recipient CMS_add1_recipient_cert_APIParam_2 to CMS_ContentInfo enveloped data structure CMS_add1_recipient_cert_APIParam_1 as a KeyTransRecipientInfo structure,,,null,CMS_add1_recipient_cert_APIName adds recipient CMS_add1_recipient_cert_APIParam_2 to CMS_ContentInfo enveloped data structure CMS_add1_recipient_cert_APIParam_1 as a KeyTransRecipientInfo structure.,CMS_add1_recipient_cert_APIName adds recipient CMS_add1_recipient_cert_APIParam_2 to CMS_ContentInfo enveloped data structure CMS_add1_recipient_cert_APIParam_1 as a KeyTransRecipientInfo structure.
0,0,EVP_MD_CTX_copy_APIName is similar to EVP_MD_CTX_copy_ex_APIName except the destination EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 does not have to be initialized,,,null,EVP_MD_CTX_copy_APIName is similar to EVP_MD_CTX_copy_ex_APIName except the destination EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 does not have to be initialized.,EVP_MD_CTX_copy_APIName is similar to EVP_MD_CTX_copy_ex_APIName except the destination EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 does not have to be initialized.
0,0,The parser assumes that the PKCS7 structure is always base64 encoded and will not handle the case where the PKCS7 structure is in binary format or uses quoted printable format,,,null,The parser assumes that the PKCS7 structure is always base64 encoded and will not handle the case where the PKCS7 structure is in binary format or uses quoted printable format.,The parser assumes that the PKCS7 structure is always base64 encoded and will not handle the case where the PKCS7 structure is in binary format or uses quoted printable format.
0,0,A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1,,,null,A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1.,A TLS/SSL connection established with these methods will only understand the TLSv1 protocol. A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1. A server will only understand TLSv1 client hello messages.
0,0,we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE,,,null,In this case we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE.,"Note that ENGINE_ctrl_cmd_string_APIName accepts a boolean argument that can relax the semantics of the function - if set non-zero ,ENGINE_ctrl_cmd_string_APIName will only return failure if the ENGINE supported the given command name but failed while executing the command name, if the ENGINE doesn't support the command name ,it will simply return success without doing anything. In this case we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE."
0,0,"Note that RSA keys may use non-standard RSA_set_method_APIParam_2 RSA_set_default_method_APIParam_1 implementations , either directly or by the use of RSA_new_method_APIParam_1 modules",,,null,"Note that RSA keys may use non-standard RSA_set_method_APIParam_2 RSA_set_default_method_APIParam_1 implementations, either directly or by the use of RSA_new_method_APIParam_1 modules.","Note that RSA keys may use non-standard RSA_set_method_APIParam_2 RSA_set_default_method_APIParam_1 implementations, either directly or by the use of RSA_new_method_APIParam_1 modules. In some cases (eg an ENGINE providing support for hardware-embedded keys), these BIGNUM values will not be used by the implementation or may be used for alternative data storage. For this reason, applications should generally avoid using RSA structure elements directly and instead use API functions to query or modify keys."
0,0,EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2,,,null,EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2.,"EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2. If EVP_DigestSignFinal_APIParam_2 is NULL, then the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter. If EVP_DigestSignFinal_APIParam_2 is not NULL ,then before the call the EVP_DigestSignFinal_APIParam_3 parameter should contain the length of the EVP_DigestSignFinal_APIParam_2 buffer, if the call is successful ,the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3."
0,0,in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way,,,null,For example in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way.,The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases. For example in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way. For other types of BIO they may not be supported.
0,0,X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address,,,null,X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address.,"X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address. The X509_check_ip_APIParam_2 array is in binary format, in network byte order. The length is either 4 (IPv4) or 16 (IPv6). Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored."
0,0,"SSL_write_APIName will negotiate a TLS/SSL session , if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName",,,If necessary,"If necessary, SSL_write_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName .","If necessary, SSL_write_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_write_APIName operation. The behaviour of SSL_write_APIName depends on the underlying BIO."
0,0,"It computes BN_mod_mul_reciprocal_APIParam_1 = % BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4 = 1/BN _ RECP_CTX_set_APIParam_2 , which is set as described below",,,null,"It computes BN_mod_mul_reciprocal_APIParam_1=(BN_mod_mul_reciprocal_APIParam_2*BN_mod_mul_reciprocal_APIParam_3)%BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4=1/BN_RECP_CTX_set_APIParam_2, which is set as described below.","BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation when the operation will be performed repeatedly with the same modulus. It computes BN_mod_mul_reciprocal_APIParam_1=(BN_mod_mul_reciprocal_APIParam_2*BN_mod_mul_reciprocal_APIParam_3)%BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4=1/BN_RECP_CTX_set_APIParam_2, which is set as described below. BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables."
0,0,UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string,,,null,UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string.,"UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string. The difference between the two is only conceptual. With the builtin method, there's no technical difference between them. Other methods may make a difference between them, however."
0,0,There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored,,,null,"There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored: one is a built-in static array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_meth_add0_APIName .","There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored: one is a built-in static array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_meth_add0_APIName ."
0,0,IP addresses stored in DNS names and Common Names are ignored,,,null,Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored.,"X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address. The X509_check_ip_APIParam_2 array is in binary format, in network byte order. The length is either 4 (IPv4) or 16 (IPv6). Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored."
0,0,The error codes can be obtained from ERR_get_error_APIName,,,null,The error codes can be obtained from ERR_get_error_APIName .,The error codes can be obtained from ERR_get_error_APIName .
0,0,This might occur where a user clicks on a `` cancel '' button,,,during a time consuming operation,"This might occur during a time consuming operation where a user clicks on a ""cancel"" button.","If the callback returns 0, then the key genration operation is aborted and an error occurs. This might occur during a time consuming operation where a user clicks on a ""cancel"" button."
0,0,"The parameter SSL_flush_sessions_APIParam_2 SSL_CTX_flush_sessions_APIParam_2 specifies the time which should be used for the expiration test , in most cases the actual time given by time_APIName will be used",,,null,"The parameter SSL_flush_sessions_APIParam_2 SSL_CTX_flush_sessions_APIParam_2 specifies the time which should be used for the expiration test, in most cases the actual time given by time_APIName will be used.","The parameter SSL_flush_sessions_APIParam_2 SSL_CTX_flush_sessions_APIParam_2 specifies the time which should be used for the expiration test, in most cases the actual time given by time_APIName will be used."
0,0,DH_new_method_APIName allocates and initializes a DH structure so that DH_new_method_APIParam_1 will be used for the DH operations,,,null,DH_new_method_APIName allocates and initializes a DH structure so that DH_new_method_APIParam_1 will be used for the DH operations.,"DH_new_method_APIName allocates and initializes a DH structure so that DH_new_method_APIParam_1 will be used for the DH operations. If DH_new_method_APIParam_1 is NULL, the default ENGINE for DH operations is used, and if no default ENGINE is set, the DH_METHOD controlled by DH_set_default_method_APIName is used."
0,0,SSL_CTX_sess_set_get_cb_APIName sets the callback function which is called,,,whenever a SSL/TLS client proposed to resume a session but the session could not be found in the internal session cache,"SSL_CTX_sess_set_get_cb_APIName sets the callback function which is called, whenever a SSL/TLS client proposed to resume a session but the session could not be found in the internal session cache (see SSL_CTX_set_session_cache_mode_APIName ).","SSL_CTX_sess_set_get_cb_APIName sets the callback function which is called, whenever a SSL/TLS client proposed to resume a session but the session could not be found in the internal session cache (see SSL_CTX_set_session_cache_mode_APIName ). (SSL/TLS server only.)"
0,0,"As the shutdown is not specially handled in the SSLv2 protocol , SSL_shutdown_APIName will succeed on the first call",,,null,"As the shutdown is not specially handled in the SSLv2 protocol, SSL_shutdown_APIName will succeed on the first call.","It is therefore recommended, to check the return value of SSL_shutdown_APIName and call SSL_shutdown_APIName again, if the bidirectional shutdown is not yet complete (return value of the first call is 0). As the shutdown is not specially handled in the SSLv2 protocol, SSL_shutdown_APIName will succeed on the first call."
0,0,EC_POINT_cmp compares the two supplied points and tests whether or not they are equal,,,null,EC_POINT_cmp compares the two supplied points and tests whether or not they are equal.,EC_POINT_cmp compares the two supplied points and tests whether or not they are equal.
0,0,An `` unknown_psk_identity '' alert message will be sent and the connection setup fails,,,null,"An ""unknown_psk_identity"" alert message will be sent and the connection setup fails.","PSK identity was not found. An ""unknown_psk_identity"" alert message will be sent and the connection setup fails."
0,0,"in any SSL/TLS servers where external caching is configured , any successful session lookups in the external cache would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well",,,null,"Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (ie for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well.","Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER, sessions negotiated in an SSL/TLS handshake may be cached for possible reuse. Normally a new session is added to the internal cache as well as any external session caching (callback) that is configured for the SSL_CTX. This flag will prevent sessions being stored in the internal cache (though the application can add them manually using SSL_CTX_add_session_APIName ). Note: in any SSL/TLS servers where external caching is configured, any successful session lookups in the external cache (ie for session-resume requests) would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well."
0,0,The function EC_POINT_is_at_infinity tests whether the supplied point is at infinity or not,,,null,The function EC_POINT_is_at_infinity tests whether the supplied point is at infinity or not.,The function EC_POINT_is_at_infinity tests whether the supplied point is at infinity or not.
0,0,"The RAND_add_APIParam_3 argument is an estimate of how much randomness is contained in RAND_add_APIParam_1 , measured in bytes",,,null,"The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes.","RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state. Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable. Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events. The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes. Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750."
0,0,HMAC_APIName computes the message authentication code of the HMAC_APIParam_1 bytes at HMAC_APIParam_2 using the hash function HMAC_APIParam_1 and the key HMAC_APIParam_2 which is HMAC_Init_ex_APIParam_3 HMAC_Init_APIParam_3 bytes long,,,null,HMAC_APIName computes the message authentication code of the HMAC_APIParam_1 bytes at HMAC_APIParam_2 using the hash function HMAC_APIParam_1 and the key HMAC_APIParam_2 which is HMAC_Init_ex_APIParam_3 HMAC_Init_APIParam_3 bytes long.,HMAC_APIName computes the message authentication code of the HMAC_APIParam_1 bytes at HMAC_APIParam_2 using the hash function HMAC_APIParam_1 and the key HMAC_APIParam_2 which is HMAC_Init_ex_APIParam_3 HMAC_Init_APIParam_3 bytes long.
0,0,X509_REQ_check_private_key_APIName is equivalent to X509_check_private_key_APIName except that X509_REQ_check_private_key_APIParam_1 X509_check_private_key_APIParam_1 represents a certificate request of structure X509_REQ_check_private_key_APIParam_1,,,null,X509_REQ_check_private_key_APIName is equivalent to X509_check_private_key_APIName except that X509_REQ_check_private_key_APIParam_1 X509_check_private_key_APIParam_1 represents a certificate request of structure X509_REQ_check_private_key_APIParam_1.,X509_REQ_check_private_key_APIName is equivalent to X509_check_private_key_APIName except that X509_REQ_check_private_key_APIParam_1 X509_check_private_key_APIParam_1 represents a certificate request of structure X509_REQ_check_private_key_APIParam_1.
0,0,The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure,,,null,The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure.,The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure. Therefore the following:
0,0,"Note that this function is only defined for TLSv1 .0 and above , and DTLSv1 .0 and above",,,null,"Note that this function is only defined for TLSv1.0 and above, and DTLSv1.0 and above.","Note that this function is only defined for TLSv1.0 and above, and DTLSv1.0 and above. Attempting to use this function in SSLv3 will result in an error."
0,0,BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is used as follows,,,If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL,"If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is used as follows:","If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is used as follows:"
0,0,"the default ENGINE for DH operations is used , and if no default ENGINE is set , the DH_METHOD controlled by DH_set_default_method_APIName is used",,,If DH_new_method_APIParam_1 is NULL,"If DH_new_method_APIParam_1 is NULL, the default ENGINE for DH operations is used, and if no default ENGINE is set, the DH_METHOD controlled by DH_set_default_method_APIName is used.","DH_new_method_APIName allocates and initializes a DH structure so that DH_new_method_APIParam_1 will be used for the DH operations. If DH_new_method_APIParam_1 is NULL, the default ENGINE for DH operations is used, and if no default ENGINE is set, the DH_METHOD controlled by DH_set_default_method_APIName is used."
0,0,"Details about sources of randomness and how to estimate their entropy can be found in the literature , eg RFC 1750",,,null,"Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750.","RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state. Thus, if the data at RAND_add_APIParam_1 are unpredictable to an adversary, this increases the uncertainty about the state and makes the PRNG output less predictable. Suitable input comes from user interaction (random key presses, mouse movements) and certain hardware events. The RAND_add_APIParam_3 argument is (the lower bound of) an estimate of how much randomness is contained in RAND_add_APIParam_1, measured in bytes. Details about sources of randomness and how to estimate their entropy can be found in the literature, eg RFC 1750."
0,0,"As the generation of a RSA key is however costly , it will lead to a significant delay in the handshake procedure",,,null,"As the generation of a RSA key is however costly, it will lead to a significant delay in the handshake procedure.","An application may either directly specify the key or can supply the key via a callback function. The callback approach has the advantage, that the callback may generate the key only in case it is actually needed. As the generation of a RSA key is however costly, it will lead to a significant delay in the handshake procedure. Another advantage of the callback function is that it can supply keys of different size while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed."
0,0,this flag guarantees that all lookups are directed to the external cache,,,If external session caching callbacks are in use,"If external session caching callbacks are in use, this flag guarantees that all lookups are directed to the external cache.","By setting this flag, session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache, even if sessions are automatically stored there. If external session caching callbacks are in use, this flag guarantees that all lookups are directed to the external cache. As automatic lookup only applies for SSL/TLS servers, the flag has no effect on clients."
0,0,As BIO_s_file_APIName name implies BIO_s_file_APIName is a wrapper round the stdio FILE structure and BIO_s_file_APIName is a source/sink BIO,,,null,As BIO_s_file_APIName name implies BIO_s_file_APIName is a wrapper round the stdio FILE structure and BIO_s_file_APIName is a source/sink BIO.,BIO_s_file_APIName returns the BIO file method. As BIO_s_file_APIName name implies BIO_s_file_APIName is a wrapper round the stdio FILE structure and BIO_s_file_APIName is a source/sink BIO.
0,0,"Currently all the functions use BIOs or FILE pointers , there are no functions which work directly on memory",,,null,"Currently all the functions use BIOs or FILE pointers, there are no functions which work directly on memory: this can be readily worked around by converting the buffers to memory BIOs, see BIO_s_mem_APIName for details.","Currently all the functions use BIOs or FILE pointers, there are no functions which work directly on memory: this can be readily worked around by converting the buffers to memory BIOs, see BIO_s_mem_APIName for details."
0,0,"The callback approach has the advantage , that the callback may generate the key only in case it is actually needed",,,null,"The callback approach has the advantage, that the callback may generate the key only in case it is actually needed.","An application may either directly specify the key or can supply the key via a callback function. The callback approach has the advantage, that the callback may generate the key only in case it is actually needed. As the generation of a RSA key is however costly, it will lead to a significant delay in the handshake procedure. Another advantage of the callback function is that it can supply keys of different size while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed."
0,0,"UI_dup_input_string_APIName , UI_dup_verify_string_APIName , UI_dup_input_boolean_APIName , UI_dup_info_string_APIName and UI_dup_error_string_APIName are basically the same as their UI_add counterparts , except that they make their own copies of all strings",,,null,"UI_dup_input_string_APIName, UI_dup_verify_string_APIName, UI_dup_input_boolean_APIName, UI_dup_info_string_APIName and UI_dup_error_string_APIName are basically the same as their UI_add counterparts, except that they make their own copies of all strings.","UI_dup_input_string_APIName, UI_dup_verify_string_APIName, UI_dup_input_boolean_APIName, UI_dup_info_string_APIName and UI_dup_error_string_APIName are basically the same as their UI_add counterparts, except that they make their own copies of all strings."
0,0,old session will be removed at the next time a session shall be added,,,If the size of the session cache is reduced and more sessions are already in the session cache,"If the size of the session cache is reduced and more sessions are already in the session cache, old session will be removed at the next time a session shall be added.","If the size of the session cache is reduced and more sessions are already in the session cache, old session will be removed at the next time a session shall be added. This removal is not synchronized with the expiration of sessions."
0,0,"SSL_set0_chain_APIName , SSL_set1_chain_APIName , SSL_add0_chain_cert_APIName , SSL_add1_chain_cert_APIName , SSL_get0_chain_certs_APIName , SSL_clear_chain_certs_APIName , SSL_build_cert_chain_APIName , SSL_select_current_cert_APIName and SSL_set_current_cert_APIName are similar except they apply to SSL structure SSL_add0_chain_cert_APIParam_1 SSL_add1_chain_cert_APIParam_1 SSL_clear_chain_certs_APIParam_1 SSL_build_cert_chain_APIParam_1 SSL_select_current_cert_APIParam_1 SSL_set_current_cert_APIParam_1",,,null,"SSL_set0_chain_APIName, SSL_set1_chain_APIName, SSL_add0_chain_cert_APIName, SSL_add1_chain_cert_APIName, SSL_get0_chain_certs_APIName, SSL_clear_chain_certs_APIName, SSL_build_cert_chain_APIName, SSL_select_current_cert_APIName and SSL_set_current_cert_APIName are similar except they apply to SSL structure SSL_add0_chain_cert_APIParam_1 SSL_add1_chain_cert_APIParam_1 SSL_clear_chain_certs_APIParam_1 SSL_build_cert_chain_APIParam_1 SSL_select_current_cert_APIParam_1 SSL_set_current_cert_APIParam_1.","SSL_set0_chain_APIName, SSL_set1_chain_APIName, SSL_add0_chain_cert_APIName, SSL_add1_chain_cert_APIName, SSL_get0_chain_certs_APIName, SSL_clear_chain_certs_APIName, SSL_build_cert_chain_APIName, SSL_select_current_cert_APIName and SSL_set_current_cert_APIName are similar except they apply to SSL structure SSL_add0_chain_cert_APIParam_1 SSL_add1_chain_cert_APIParam_1 SSL_clear_chain_certs_APIParam_1 SSL_build_cert_chain_APIParam_1 SSL_select_current_cert_APIParam_1 SSL_set_current_cert_APIParam_1."
0,0,The way this password can be supplied may depend on the application,,,null,The way this password can be supplied may depend on the application.,"When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored."
0,0,"one is a built-in static array representing the standard methods for different algorithms , and the other one is a stack of user-defined application-specific methods , which can be manipulated by using EVP_PKEY_meth_add0_APIName",,,null,"There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored: one is a built-in static array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_meth_add0_APIName .","There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored: one is a built-in static array representing the standard methods for different algorithms, and the other one is a stack of user-defined application-specific methods, which can be manipulated by using EVP_PKEY_meth_add0_APIName ."
0,0,"By setting this flag , session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache",,,null,"By setting this flag , session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache ,  .","By setting this flag, session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache, even if sessions are automatically stored there. If external session caching callbacks are in use, this flag guarantees that all lookups are directed to the external cache. As automatic lookup only applies for SSL/TLS servers, the flag has no effect on clients."
0,0,Calling BIO_reset_APIName on a accept BIO will close any active connection and reset the BIO into a state where it awaits another incoming connection,,,null,Calling BIO_reset_APIName on a accept BIO will close any active connection and reset the BIO into a state where it awaits another incoming connection.,Calling BIO_reset_APIName on a accept BIO will close any active connection and reset the BIO into a state where it awaits another incoming connection.
0,0,The best fix will probably be to introduce a `` check_key_APIName '' handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers,,,null,"The best fix will probably be to introduce a ""check_key_APIName"" handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers.","A method of verifying the RSA key using opaque RSA API functions might need to be considered. Right now RSA_check_key_APIName simply uses the RSA structure elements directly, bypassing the RSA_METHOD table altogether (and completely violating encapsulation and object-orientation in the process). The best fix will probably be to introduce a ""check_key_APIName"" handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers."
0,0,"It is possible to have DH keys that only work with certain DH_METHOD implementations , and attempting to change the DH_METHOD for the key can have unexpected results",,,null,"It is possible to have DH keys that only work with certain DH_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results.","DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1. This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DH keys that only work with certain DH_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results."
0,0,This function can be used to determine how much memory must be allocated for an RSA encrypted value,,,null,This function can be used to determine how much memory must be allocated for an RSA encrypted value.,This function returns the RSA modulus size in bytes. This function can be used to determine how much memory must be allocated for an RSA encrypted value.
0,0,Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F,,,null,Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f).,"In addition EC_POINTs can be converted to and from various external representations. Supported representations are octet strings, BIGNUMs and hexadecimal. Octet strings are stored in a buffer along with an associated buffer length. A point held in a BIGNUM is calculated by converting the point to an octet string and then converting that octet string into a BIGNUM integer. Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F (or a-f)."
0,0,By prepending a buffering BIO to a chain it is possible to provide BIO_gets_APIName functionality,,,if the following BIOs do not support it,By prepending a buffering BIO to a chain it is therefore possible to provide BIO_gets_APIName functionality if the following BIOs do not support it (for example SSL BIOs).,Buffering BIOs implement BIO_gets_APIName by using BIO_read_APIName operations on the next BIO in the chain. By prepending a buffering BIO to a chain it is therefore possible to provide BIO_gets_APIName functionality if the following BIOs do not support it (for example SSL BIOs).
0,0,"EVP_SealUpdate_APIName and EVP_SealFinal_APIName have exactly the same properties as the EVP_EncryptUpdate_APIName and EVP_EncryptFinal_APIName routines , as documented on the EVP_EncryptInit_APIName manual page",,,null,"EVP_SealUpdate_APIName and EVP_SealFinal_APIName have exactly the same properties as the EVP_EncryptUpdate_APIName and EVP_EncryptFinal_APIName routines, as documented on the EVP_EncryptInit_APIName manual page.","EVP_SealUpdate_APIName and EVP_SealFinal_APIName have exactly the same properties as the EVP_EncryptUpdate_APIName and EVP_EncryptFinal_APIName routines, as documented on the EVP_EncryptInit_APIName manual page."
0,0,Another advantage of the callback function is that it can supply keys of different size,1,,while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed.,Another advantage of the callback function is that it can supply keys of different size while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed.,"An application may either directly specify the key or can supply the key via a callback function. The callback approach has the advantage, that the callback may generate the key only in case it is actually needed. As the generation of a RSA key is however costly, it will lead to a significant delay in the handshake procedure. Another advantage of the callback function is that it can supply keys of different size while the explicit setting of the key is only useful for key size of 512 bits to satisfy the export restricted ciphers and does give away key length if a longer key would be allowed."
0,0,"Version 0.9.5 a had an interim interpretation that is like the current one , except the patch level got the highest bit set , to keep continuity",,,null,"Version 0.9.5a had an interim interpretation that is like the current one, except the patch level got the highest bit set, to keep continuity.","Version 0.9.5a had an interim interpretation that is like the current one, except the patch level got the highest bit set, to keep continuity. The number was therefore 0x0090581f."
0,0,DSA_sign_setup_APIName may be used to precompute part of the signing operation for each signature in case signature generation is time-critical,,,null,DSA_sign_setup_APIName may be used to precompute part of the signing operation for each signature in case signature generation is time-critical.,DSA_sign_setup_APIName may be used to precompute part of the signing operation for each signature in case signature generation is time-critical.
0,0,"This library implements the Blowfish cipher , which was invented and described by Counterpane",,,null,"This library implements the Blowfish cipher, which was invented and described by Counterpane (see http://www.counterpane.com/blowfish.html ).","This library implements the Blowfish cipher, which was invented and described by Counterpane (see http://www.counterpane.com/blowfish.html )."
0,0,"an information callback function is called whenever the state changes, an alert appears, or an error occurs.",1,,When set,"When set, an information callback function is called whenever the state changes, an alert appears, or an error occurs.","When setting up a connection and during use, it is possible to obtain state information from the SSL/TLS engine. When set, an information callback function is called whenever the state changes, an alert appears, or an error occurs."
0,0,"A client , that was asked to send a certificate , does not send a certificate",,,null,"A client, that was asked to send a certificate, does not send a certificate (SSLv3 only).","A client, that was asked to send a certificate, does not send a certificate (SSLv3 only)."
0,0,The output will be padded with 0 bits to ensure that the output is always 3 bytes for every 4 input bytes,,,if necessary,The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes.,"EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
0,0,that is it creates a new accept BIO with port BIO_new_accept_APIParam_1,,,null,BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call: that is it creates a new accept BIO with port BIO_new_accept_APIParam_1.,BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call: that is it creates a new accept BIO with port BIO_new_accept_APIParam_1.
0,0,but These functions may be useful when several operations are to be performed using the same modulus,,,null,"These functions are used automatically when BN_mod_exp_APIName is called with suitable input, but These functions may be useful when several operations are to be performed using the same modulus.","These functions implement Montgomery multiplication. These functions are used automatically when BN_mod_exp_APIName is called with suitable input, but These functions may be useful when several operations are to be performed using the same modulus."
0,0,The `` close notify '' alert was sent and the peer 's `` close notify '' alert was received,,,null,"The ""close notify"" alert was sent and the peer's ""close notify"" alert was received.","The shutdown was successfully completed. The ""close notify"" alert was sent and the peer's ""close notify"" alert was received."
0,0,The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite,,,null,"The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite; if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests, it is considered prime.","BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime. The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite; if BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 passes all these tests, it is considered prime."
0,0,the digest is placed in a static array,2,,If MDC2_Final_APIParam_1 is NULL,"If MDC2_Final_APIParam_1 is NULL, the digest is placed in a static array.","MDC2_APIName computes the MDC2 message digest of the MDC2_APIParam_2 bytes at MDC2_APIParam_1 and places it in MDC2_Final_APIParam_1 (which must have space for MDC2_DIGEST_LENGTH == 16 bytes of output). If MDC2_Final_APIParam_1 is NULL, the digest is placed in a static array."
0,0,"as that servername callback may update the SSL_CTX , and subsequently , the ALPN callback",,,null,"The ALPN callback is executed after the servername callback; as that servername callback may update the SSL_CTX, and subsequently, the ALPN callback.","The ALPN callback is executed after the servername callback; as that servername callback may update the SSL_CTX, and subsequently, the ALPN callback."
0,0,Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations_APIName,,,null,Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations_APIName .,Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations_APIName . Using the SSL_CTX_set_cert_store_APIName and SSL_CTX_get_cert_store_APIName functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations_APIName call.
0,0,data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName,,,null,Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName.,"SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,The referred module is available as <openssl> / ms/applink.c,,,null,The referred module is available as <openssl>/ms/applink.c.,"OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment. Even though it appears at application side, it's essentially OpenSSL private interface. For this reason application developers are not expected to implement it, but to compile provided module with compiler of their choice and link it into the target application. The referred module is available as <openssl>/ms/applink.c."
0,0,"For both blocking or non-blocking sockets , the details state information can be used within the info_callback function set with the SSL_set_info_callback_APIName call",,,null,"For both blocking or non-blocking sockets, the details state information can be used within the info_callback function set with the SSL_set_info_callback_APIName call.","For both blocking or non-blocking sockets, the details state information can be used within the info_callback function set with the SSL_set_info_callback_APIName call."
0,0,The downside is that creating a RSA key is computationally expensive,,,null,The downside is that creating a RSA key is computationally expensive.,"Using ephemeral RSA key exchange yields forward secrecy, as the connection can only be decrypted, when the RSA key is known. By generating a temporary RSA key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) RSA key, as this key was used for signing only. The downside is that creating a RSA key is computationally expensive."
0,0,The value depends on other index values defined for X509_STORE_CTX objects before the SSL index is created,,,null,The value depends on other index values defined for X509_STORE_CTX objects before the SSL index is created.,The value depends on other index values defined for X509_STORE_CTX objects before the SSL index is created.
0,0,Using the SSL_CTX_set_cert_store_APIName and SSL_CTX_get_cert_store_APIName functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations_APIName call,,,null,Using the SSL_CTX_set_cert_store_APIName and SSL_CTX_get_cert_store_APIName functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations_APIName call.,Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations_APIName . Using the SSL_CTX_set_cert_store_APIName and SSL_CTX_get_cert_store_APIName functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations_APIName call.
0,0,Since OpenSSL private keys contain public key components too the function EVP_PKEY_cmp_APIName can also be used to determine if a private key matches a public key,,,null,Since OpenSSL private keys contain public key components too the function EVP_PKEY_cmp_APIName can also be used to determine if a private key matches a public key.,Since OpenSSL private keys contain public key components too the function EVP_PKEY_cmp_APIName can also be used to determine if a private key matches a public key.
0,0,OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment,,,null,OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment.,"OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment. Even though it appears at application side, it's essentially OpenSSL private interface. For this reason application developers are not expected to implement it, but to compile provided module with compiler of their choice and link it into the target application. The referred module is available as <openssl>/ms/applink.c."
0,0,The EVP digest routines are a high level interface to message digests,,,null,The EVP digest routines are a high level interface to message digests.,The EVP digest routines are a high level interface to message digests.
0,0,The DH_check_APIParam_1 DH_generate_key_APIParam_1 DH_set_ex_data_APIParam_1 DH_size_APIParam_1 DH_set_method_APIParam_1 DH_set_default_method_APIParam_1 DHparams_print_APIParam_2 DHparams_print_fp_APIParam_2 i2d_DHparams_APIParam_1 DH_free_APIParam_1 d2i_DHparams_APIParam_1 DH_compute_key_APIParam_3 DH_get_ex_data_APIParam_1 structure consists of several BIGNUM components,,,null,The DH_check_APIParam_1 DH_generate_key_APIParam_1 DH_set_ex_data_APIParam_1 DH_size_APIParam_1 DH_set_method_APIParam_1 DH_set_default_method_APIParam_1 DHparams_print_APIParam_2 DHparams_print_fp_APIParam_2 i2d_DHparams_APIParam_1 DH_free_APIParam_1 d2i_DHparams_APIParam_1 DH_compute_key_APIParam_3 DH_get_ex_data_APIParam_1 structure consists of several BIGNUM components.,The DH_check_APIParam_1 DH_generate_key_APIParam_1 DH_set_ex_data_APIParam_1 DH_size_APIParam_1 DH_set_method_APIParam_1 DH_set_default_method_APIParam_1 DHparams_print_APIParam_2 DHparams_print_fp_APIParam_2 i2d_DHparams_APIParam_1 DH_free_APIParam_1 d2i_DHparams_APIParam_1 DH_compute_key_APIParam_3 DH_get_ex_data_APIParam_1 structure consists of several BIGNUM components.
0,0,UI_set_default_method_APIName changes the default UI method to the one given,,,null,UI_set_default_method_APIName changes the default UI method to the one given.,UI_set_default_method_APIName changes the default UI method to the one given.
0,0,Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue,,,null,Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue.,"As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer. An application must not rely on the error value of SSL_operation_APIName but must assure that the write buffer is always flushed first. Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue."
0,0,"The ECPKParameters encode and decode routines encode and parse the public parameters for an d2i_ECPKParameters_APIParam_1 i2d_ECPKParameters_APIParam_1 ECPKParameters_print_fp_APIParam_2 ECPKParameters_print_APIParam_2 structure , which represents a curve",,,null,"The ECPKParameters encode and decode routines encode and parse the public parameters for an d2i_ECPKParameters_APIParam_1 i2d_ECPKParameters_APIParam_1 ECPKParameters_print_fp_APIParam_2 ECPKParameters_print_APIParam_2 structure, which represents a curve.","The ECPKParameters encode and decode routines encode and parse the public parameters for an d2i_ECPKParameters_APIParam_1 i2d_ECPKParameters_APIParam_1 ECPKParameters_print_fp_APIParam_2 ECPKParameters_print_APIParam_2 structure, which represents a curve."
0,0,This function can be used to determine how much memory must be allocated for a DSA signature,,,null,This function can be used to determine how much memory must be allocated for a DSA signature.,This function returns the size of an ASN.1 encoded DSA signature in bytes. This function can be used to determine how much memory must be allocated for a DSA signature.
0,0,lh _ <type> _ delete_APIName deletes an entry from lh_retrieve_APIParam_1,,,null,lh_<type>_delete_APIName deletes an entry from lh_retrieve_APIParam_1.,lh_<type>_delete_APIName deletes an entry from lh_retrieve_APIParam_1.
0,0,On a read only BIO it restores the BIO to its original state and the read only data can be read again,,,null,On a read only BIO it restores the BIO to its original state and the read only data can be read again.,Calling BIO_reset_APIName on a read write memory BIO clears any data in it. On a read only BIO it restores the BIO to its original state and the read only data can be read again.
0,0,"Using ephemeral RSA key exchange yields forward secrecy , as the connection can only be decrypted",,,when the RSA key is known,"Using ephemeral RSA key exchange yields forward secrecy, as the connection can only be decrypted, when the RSA key is known.","Using ephemeral RSA key exchange yields forward secrecy, as the connection can only be decrypted, when the RSA key is known. By generating a temporary RSA key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) RSA key, as this key was used for signing only. The downside is that creating a RSA key is computationally expensive."
0,0,OBJ_obj2txt_APIName does n't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written,,,null,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written.,OBJ_obj2txt_APIName is awkward and messy to use: OBJ_obj2txt_APIName doesn't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written. Instead OBJ_obj2txt_APIParam_1 must point to a valid buffer and OBJ_obj2txt_APIParam_2 should be set to a positive value. A buffer length of 80 should be more than enough to handle any OID encountered in practice.
0,0,BIO_get_cipher_ctx_APIName is a BIO_ctrl_APIName macro which retrieves the internal BIO cipher context,,,null,BIO_get_cipher_ctx_APIName is a BIO_ctrl_APIName macro which retrieves the internal BIO cipher context.,BIO_get_cipher_ctx_APIName is a BIO_ctrl_APIName macro which retrieves the internal BIO cipher context. The retrieved context can be used in conjunction with the standard cipher routines to set it up. This is useful when BIO_set_cipher_APIName is not flexible enough for the applications needs.
0,0,These functions determine why a BIO is not able to read or write data,,,null,These functions determine why a BIO is not able to read or write data.,These functions determine why a BIO is not able to read or write data. These functions will typically be called after a failed BIO_read_APIName or BIO_write_APIName call.
0,0,The main purpose of this function is to provide finer control over a PKCS # 7 signed data structure where the simpler PKCS7_sign_APIName function defaults are not appropriate,,,null,The main purpose of this function is to provide finer control over a PKCS#7 signed data structure where the simpler PKCS7_sign_APIName function defaults are not appropriate.,The main purpose of this function is to provide finer control over a PKCS#7 signed data structure where the simpler PKCS7_sign_APIName function defaults are not appropriate. For example if multiple signers or non default digest algorithms are needed.
0,0,The verify_init_APIName and verify_APIName methods are used to verify whether a signature is valid,,,null,The verify_init_APIName and verify_APIName methods are used to verify whether a signature is valid.,The verify_init_APIName and verify_APIName methods are used to verify whether a signature is valid. The verify_init_APIName and verify_APIName methods are called by EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName .
0,0,Similarly a newline character will also be output,,,null,Similarly a newline character will also be output.,"Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output."
0,0,"In client mode , it is not checked whether the SSL_VERIFY_PEER flag is set , but whether SSL_VERIFY_NONE is not set",,,null,"In client mode, it is not checked whether the SSL_VERIFY_PEER flag is set, but whether SSL_VERIFY_NONE is not set.","In client mode, it is not checked whether the SSL_VERIFY_PEER flag is set, but whether SSL_VERIFY_NONE is not set. This can lead to unexpected behaviour, if the SSL_VERIFY_PEER and SSL_VERIFY_NONE are not used as required (exactly one must be set at any time)."
0,0,A fatal alert always leads to a connection abort,,,null,A fatal alert always leads to a connection abort.,Several alert messages must be sent as fatal alert messages as specified by the TLS RFC. A fatal alert always leads to a connection abort.
0,0,"The X509 ASN1 allocation routines , allocate and free an X509 structure , which represents an X509 certificate",,,null,"The X509 ASN1 allocation routines, allocate and free an X509 structure, which represents an X509 certificate.","The X509 ASN1 allocation routines, allocate and free an X509 structure, which represents an X509 certificate."
0,0,"Finally , there 's the supertype X509_INFO , which can contain a CRL , a certificate and a corresponding private key",,,null,"Finally, there's the supertype X509_INFO, which can contain a CRL, a certificate and a corresponding private key.","Finally, there's the supertype X509_INFO, which can contain a CRL, a certificate and a corresponding private key."
0,0,For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character,,,null,For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total).,"Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output."
0,0,"MD4_Init_APIName , MD4_Update_APIName , MD4_Final_APIName , MD5_Init_APIName , MD5_Update_APIName , and MD5_Final_APIName are analogous using an MD4_Init_APIParam_1 MD4_Update_APIParam_1 MD4_Final_APIParam_2 and MD5_Init_APIParam_1 MD5_Update_APIParam_1 MD5_Final_APIParam_2 structure",,,null,"MD4_Init_APIName, MD4_Update_APIName, MD4_Final_APIName, MD5_Init_APIName, MD5_Update_APIName, and MD5_Final_APIName are analogous using an MD4_Init_APIParam_1 MD4_Update_APIParam_1 MD4_Final_APIParam_2 and MD5_Init_APIParam_1 MD5_Update_APIParam_1 MD5_Final_APIParam_2 structure.","MD4_Init_APIName, MD4_Update_APIName, MD4_Final_APIName, MD5_Init_APIName, MD5_Update_APIName, and MD5_Final_APIName are analogous using an MD4_Init_APIParam_1 MD4_Update_APIParam_1 MD4_Final_APIParam_2 and MD5_Init_APIParam_1 MD5_Update_APIParam_1 MD5_Final_APIParam_2 structure."
0,0,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server,,,null,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
0,0,SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer,,,null,SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
0,0,"By generating a temporary RSA key inside the server application that , it becomes impossible for an attacker to decrypt past sessions",,,null,"By generating a temporary RSA key inside the server application that is lost when the application is left , it becomes impossible for an attacker to decrypt past sessions ,  .","Using ephemeral RSA key exchange yields forward secrecy, as the connection can only be decrypted, when the RSA key is known. By generating a temporary RSA key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) RSA key, as this key was used for signing only. The downside is that creating a RSA key is computationally expensive."
0,0,"ERR_print_errors_APIName is a convenience function that prints the error strings for all errors that OpenSSL has recorded to ERR_print_errors_APIParam_1 , thus emptying the error queue",,,null,"ERR_print_errors_APIName is a convenience function that prints the error strings for all errors that OpenSSL has recorded to ERR_print_errors_APIParam_1, thus emptying the error queue.","ERR_print_errors_APIName is a convenience function that prints the error strings for all errors that OpenSSL has recorded to ERR_print_errors_APIParam_1, thus emptying the error queue."
0,0,"Through user-written methods , prompting can be done in any way imaginable , be it plain text prompting , through dialog boxes or from a cell phone",,,null,"Through user-written methods (see ui_create_APIName ), prompting can be done in any way imaginable, be it plain text prompting, through dialog boxes or from a cell phone.","UI stands for User Interface, and is general purpose set of routines to prompt the user for text-based information. Through user-written methods (see ui_create_APIName ), prompting can be done in any way imaginable, be it plain text prompting, through dialog boxes or from a cell phone."
0,0,"By combining the retry conditions of several non blocking BIOs in a single select_APIName call it is possible to service several BIOs in a single thread , delays can occur",,,during the initial handshake process,"By combining the retry conditions of several non blocking BIOs in a single select_APIName call it is possible to service several BIOs in a single thread ,  delays can occur during the initial handshake process .","For example if the cause is ultimately a socket and BIO_should_read_APIName is true then a call to select_APIName may be made to wait until data is available and then retry the BIO operation. By combining the retry conditions of several non blocking BIOs in a single select_APIName call it is possible to service several BIOs in a single thread, though the performance may be poor if SSL BIOs are present because long delays can occur during the initial handshake process."
0,0,Othewise the functions behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page,,,null,Othewise the functions behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.,Othewise the functions behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.
0,0,An OpenSSL private key is equivalent to what some libraries call a `` key pair '',,,null,"An OpenSSL private key is equivalent to what some libraries call a ""key pair"".","In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters (if any). An OpenSSL private key is equivalent to what some libraries call a ""key pair"". A private key can be used in functions which require the use of a public key or parameters."
0,0,In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters,,,null,In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters (if any).,"In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters (if any). An OpenSSL private key is equivalent to what some libraries call a ""key pair"". A private key can be used in functions which require the use of a public key or parameters."
0,0,A private key can be used in functions which require the use of a public key or parameters,,,null,A private key can be used in functions which require the use of a public key or parameters.,"In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters (if any). An OpenSSL private key is equivalent to what some libraries call a ""key pair"". A private key can be used in functions which require the use of a public key or parameters."
0,0,A similar condition on a file BIO will mean that it has reached EOF,,,null,A similar condition on a file BIO will mean that it has reached EOF.,"If BIO_should_retry_APIName returns false ,then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation. For example if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false then the cause will be that the connection closed. A similar condition on a file BIO will mean that it has reached EOF. Some BIO types may place additional information on the error queue. For more details see the individual BIO type manual pages."
0,0,Once all signer certificates have been set CMS_verify_APIName can be used,,,null,Once all signer certificates have been set CMS_verify_APIName can be used.,Once all signer certificates have been set CMS_verify_APIName can be used.
0,0,Calling BIO_free_APIName may also have some effect on the underlying I/O structure,,,null,"Calling BIO_free_APIName may also have some effect on the underlying I/O structure ,  .","BIO_free_APIName frees up a single BIO, BIO_vfree_APIName also frees up a single BIO but BIO_vfree_APIName does not return a value. Calling BIO_free_APIName may also have some effect on the underlying I/O structure, for example BIO_vfree_APIName may close the file being referred to under certain circumstances. For more details see the individual BIO_METHOD descriptions."
0,0,SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1,,,null,SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1.,SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1.
0,0,This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to CMS_encrypt_APIName,,,null,This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to CMS_encrypt_APIName.,"Many browsers implement a ""sign and encrypt"" option which is simply an S/MIME envelopedData containing an S/MIME signed message. This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to CMS_encrypt_APIName."
0,0,SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1,,,null,SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1.,SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 (length SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_3 SSL_use_PrivateKey_ASN1_APIParam_4 SSL_use_RSAPrivateKey_ASN1_APIParam_3) to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1. SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1.
0,0,In some cases the X509_STORE_CTX_set_verify_cb_APIParam_1 structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE_CTX_set_verify_cb_APIParam_1,,,null,In some cases (such as S/MIME verification) the X509_STORE_CTX_set_verify_cb_APIParam_1 structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE_CTX_set_verify_cb_APIParam_1.,The verification callback can be set and inherited from the parent structure performing the operation. In some cases (such as S/MIME verification) the X509_STORE_CTX_set_verify_cb_APIParam_1 structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE_CTX_set_verify_cb_APIParam_1.
0,0,CONF_modules_load_APIName is idential to CONF_modules_load_file_APIName except CONF_modules_load_APIName reads configuration information from CONF_modules_load_APIParam_1,,,null,CONF_modules_load_APIName is idential to CONF_modules_load_file_APIName except CONF_modules_load_APIName reads configuration information from CONF_modules_load_APIParam_1.,CONF_modules_load_APIName is idential to CONF_modules_load_file_APIName except CONF_modules_load_APIName reads configuration information from CONF_modules_load_APIParam_1.
0,0,SSL_CTX_set_default_passwd_cb_userdata_APIName sets a pointer to pem_passwd_cb_APIParam_4 which will be provided to the password callback on invocation,,,null,SSL_CTX_set_default_passwd_cb_userdata_APIName sets a pointer to pem_passwd_cb_APIParam_4 which will be provided to the password callback on invocation.,SSL_CTX_set_default_passwd_cb_userdata_APIName sets a pointer to pem_passwd_cb_APIParam_4 which will be provided to the password callback on invocation.
0,0,SSL_shutdown_APIName sends the `` close notify '' shutdown alert to the peer,,,null,"SSL_shutdown_APIName sends the ""close notify"" shutdown alert to the peer.","SSL_shutdown_APIName shuts down an active TLS/SSL connection. SSL_shutdown_APIName sends the ""close notify"" shutdown alert to the peer."
0,0,Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack,,,null,Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack.,Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer RSA_PKCS1_OAEP_PADDING.
0,0,"The removed BIO becomes a single BIO with no association with the original chain , single BIO with no association with the original chain can thus be freed or attached to a different chain",,,null,"The removed BIO then becomes a single BIO with no association with the original chain, single BIO with no association with the original chain can thus be freed or attached to a different chain.","BIO_pop_APIName removes the BIO BIO_pop_APIParam_1 from a chain and returns the next BIO in the chain, or NULL if there is no next BIO. The removed BIO then becomes a single BIO with no association with the original chain, single BIO with no association with the original chain can thus be freed or attached to a different chain."
0,0,"EME-OAEP as defined in PKCS # 1 v2 .0 with SHA-1 , MGF1 and an empty encoding parameter",,,null,"EME-OAEP as defined in PKCS #1 v2.0 with SHA-1, MGF1 and an empty encoding parameter.","EME-OAEP as defined in PKCS #1 v2.0 with SHA-1, MGF1 and an empty encoding parameter. This mode is recommended for all new applications."
0,0,X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted,,,null,X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted: if X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 is -1  the new entry  is appended.,X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted: if X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 is -1  the new entry  is appended.
0,0,the socket is shut down and closed when the BIO is freed,,,If the close flag is set,"If the close flag is set ,then the socket is shut down and closed when the BIO is freed.","If the close flag is set ,then the socket is shut down and closed when the BIO is freed."
0,0,Similarly all of the functions to set a new private key will replace any private key that has already been set,,,null,Similarly all of the functions to set a new private key will replace any private key that has already been set.,All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set. Similarly all of the functions to set a new private key will replace any private key that has already been set. Applications should call SSL_CTX_check_private_key_APIName or SSL_check_private_key_APIName as appropriate after loading a new certificate and private key to confirm that the certificate and key match.
0,0,any bundled that ENGINE will be set as the default for RSA use from then on.,1,,if any of those succeed,"the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName and if any of those succeed, that ENGINE will be set as the default for RSA use from then on.","That's all that's required. Eg. the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName and if any of those succeed, that ENGINE will be set as the default for RSA use from then on."
0,0,All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set,,,null,All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set.,All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set. Similarly all of the functions to set a new private key will replace any private key that has already been set. Applications should call SSL_CTX_check_private_key_APIName or SSL_check_private_key_APIName as appropriate after loading a new certificate and private key to confirm that the certificate and key match.
0,0,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client,,,null,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client.,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client. If set it will override any temporary ECDH parameters set by a server. Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName. Newer applications should just call:
0,0,BUF_strndup makes the explicit guarantee that BUF_strndup will never read past the first BUF_memdup_APIParam_2 BUF_strndup_APIParam_2 bytes of BUF_MEM_grow_APIParam_1 BUF_strndup_APIParam_1 BUF_strdup_APIParam_1 BUF_strnlen_APIParam_1,,,null,BUF_strndup makes the explicit guarantee that BUF_strndup will never read past the first BUF_memdup_APIParam_2 BUF_strndup_APIParam_2 bytes of BUF_MEM_grow_APIParam_1 BUF_strndup_APIParam_1 BUF_strdup_APIParam_1 BUF_strnlen_APIParam_1.,BUF_strndup makes the explicit guarantee that BUF_strndup will never read past the first BUF_memdup_APIParam_2 BUF_strndup_APIParam_2 bytes of BUF_MEM_grow_APIParam_1 BUF_strndup_APIParam_1 BUF_strdup_APIParam_1 BUF_strnlen_APIParam_1.
0,0,"For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by the octets for x , followed by the octets for y",,,null,"For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by the octets for x, followed by the octets for y.","For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by the octets for x, followed by the octets for y."
0,0,Any flags that are already set are left set,,,null,Any flags that are already set are left set.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,"MD2_APIName , MD4_APIName , and MD5_APIName compute the MD2 , MD4 , and MD5 message digest of the MD2_APIParam_2 MD4_APIParam_2 MD5_APIParam_2 bytes at MD2_APIParam_1 MD4_APIParam_1 MD5_APIParam_1 and place it in MD4_Final_APIParam_1 MD2_Final_APIParam_1 MD5_Final_APIParam_1",,,null,"MD2_APIName, MD4_APIName, and MD5_APIName compute the MD2, MD4, and MD5 message digest of the MD2_APIParam_2 MD4_APIParam_2 MD5_APIParam_2 bytes at MD2_APIParam_1 MD4_APIParam_1 MD5_APIParam_1 and place it in MD4_Final_APIParam_1 MD2_Final_APIParam_1 MD5_Final_APIParam_1 (which must have space for MD2_DIGEST_LENGTH == MD4_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16 bytes of output).","MD2_APIName, MD4_APIName, and MD5_APIName compute the MD2, MD4, and MD5 message digest of the MD2_APIParam_2 MD4_APIParam_2 MD5_APIParam_2 bytes at MD2_APIParam_1 MD4_APIParam_1 MD5_APIParam_1 and place it in MD4_Final_APIParam_1 MD2_Final_APIParam_1 MD5_Final_APIParam_1 (which must have space for MD2_DIGEST_LENGTH == MD4_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16 bytes of output). If MD4_Final_APIParam_1 MD2_Final_APIParam_1 MD5_Final_APIParam_1 is NULL, the digest is placed in a static array."
0,0,Thus it will permanently install the certificate and key for this SSL object,,,null,Thus it will permanently install the certificate and key for this SSL object.,"If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear_APIName . If the callback returns no certificate, the OpenSSL library will not send a certificate."
0,0,"Up to OpenSSL 0.9.6 , SSL_pending_APIName does not check if the record type of pending data is application data",,,null,"Up to OpenSSL 0.9.6, SSL_pending_APIName does not check if the record type of pending data is application data.","Up to OpenSSL 0.9.6, SSL_pending_APIName does not check if the record type of pending data is application data."
0,0,In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit,,,null,In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit.,SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions. In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit. In server mode a session successfully retrieved from internal or external cache is counted as a hit.
0,0,In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h,,,null,In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,In server mode a session successfully retrieved from internal or external cache is counted as a hit,,,null,In server mode a session successfully retrieved from internal or external cache is counted as a hit.,SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions. In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit. In server mode a session successfully retrieved from internal or external cache is counted as a hit.
0,0,This function can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key_APIName,,,null,This function can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key_APIName.,This function returns the Diffie-Hellman size in bytes. This function can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key_APIName.
0,0,The point_coversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9 .62,,,null,The point_coversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9.62 (ECDSA).,The point_coversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9.62 (ECDSA). point_conversion_form_t is an enum defined as follows:
0,0,Check out the error stack to find out the reason,,,null,Check out the error stack to find out the reason.,"On success, the functions return 1. On failure, the functions return 0. Check out the error stack to find out the reason."
0,0,"BIO_get_md_APIName places the a pointer to the digest BIOs digest method in BIO_get_md_APIParam_2 , it is a BIO_ctrl_APIName macro",,,null,"BIO_get_md_APIName places the a pointer to the digest BIOs digest method in BIO_get_md_APIParam_2, it is a BIO_ctrl_APIName macro.","BIO_get_md_APIName places the a pointer to the digest BIOs digest method in BIO_get_md_APIParam_2, it is a BIO_ctrl_APIName macro."
0,0,"The library number and function code describe where the error occurred , the reason code is the information about what went wrong",,,null,"The library number and function code describe where the error occurred, the reason code is the information about what went wrong.","The library number and function code describe where the error occurred, the reason code is the information about what went wrong."
0,0,but the resulting DH parameters contain the resulting DH parameters length,,,null,"q is lost during that conversion, but the resulting DH parameters contain the resulting DH parameters length.","DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys. q is lost during that conversion, but the resulting DH parameters contain the resulting DH parameters length."
0,0,"BIO_set_accept_port_APIName , BIO_get_accept_port_APIName , BIO_set_nbio_accept_APIName , BIO_set_accept_bios_APIName , BIO_set_bind_mode_APIName , BIO_get_bind_mode_APIName and BIO_do_accept_APIName are macros",,,null,"BIO_set_accept_port_APIName, BIO_get_accept_port_APIName, BIO_set_nbio_accept_APIName, BIO_set_accept_bios_APIName, BIO_set_bind_mode_APIName, BIO_get_bind_mode_APIName and BIO_do_accept_APIName are macros.","BIO_set_accept_port_APIName, BIO_get_accept_port_APIName, BIO_set_nbio_accept_APIName, BIO_set_accept_bios_APIName, BIO_set_bind_mode_APIName, BIO_get_bind_mode_APIName and BIO_do_accept_APIName are macros."
0,0,"So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various `` load '' functions , eg",,,null,"So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg","This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg"
0,0,OpenSSL maintains an internal linked list of `` visible '' ENGINEs from which it has to operate -,,,null,"OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all.","This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user. The first thing to consider is whether the programmer wishes to make alternative ENGINE modules available to the application and user. OpenSSL maintains an internal linked list of ""visible"" ENGINEs from which it has to operate - at start-up, this list is empty and in fact if an application does not call any ENGINE API calls and it uses static linking against openssl, then the resulting application binary will not contain any alternative ENGINE code at all. So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various ""load"" functions, eg"
0,0,A DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 specifies the functions that OpenSSL uses for DSA operations,,,null,A DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 specifies the functions that OpenSSL uses for DSA operations.,"A DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 specifies the functions that OpenSSL uses for DSA operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DSA API functions are affected by the use of DSA_new_method_APIParam_1 API calls."
0,0,ie one which can decode a CMS structure on the fly,,,null,There is currently no corresponding inverse BIO: ie one which can decode a CMS structure on the fly.,There is currently no corresponding inverse BIO: ie one which can decode a CMS structure on the fly.
0,0,A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3,,,null,A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3.,A TLS/SSL connection established with these methods will only understand the SSLv3 protocol. A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3. A server will only understand SSLv3 client hello messages. The SSLv3 protocol is deprecated and should not be used.
0,0,Session resumption shortcuts the TLS so that the client certificate negiotation do n't occur,,,null,Session resumption shortcuts the TLS so that the client certificate negiotation don't occur.,Session resumption shortcuts the TLS so that the client certificate negiotation don't occur. It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket. In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.
0,0,Alternatively the NID validity can be determined first by checking OBJ_nid2obj is not NULL,,,null,Alternatively the NID validity can be determined first by checking OBJ_nid2obj(nid) is not NULL.,Applications which could pass invalid NIDs to X509_NAME_get_index_by_NID_APIName should check for the return value of -2. Alternatively the NID validity can be determined first by checking OBJ_nid2obj(nid) is not NULL.
0,0,It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket,,,null,It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket.,Session resumption shortcuts the TLS so that the client certificate negiotation don't occur. It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket. In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.
0,0,Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2,,,null,Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2.,EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2. In both cases it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4.
0,0,"BUF_strdup_APIName , BUF_strndup_APIName , BUF_memdup_APIName , BUF_strlcpy_APIName , BUF_strlcat_APIName and BUF_strnlen are equivalents of the standard C library functions",,,null,"BUF_strdup_APIName, BUF_strndup_APIName, BUF_memdup_APIName, BUF_strlcpy_APIName, BUF_strlcat_APIName and BUF_strnlen are equivalents of the standard C library functions.","BUF_strdup_APIName, BUF_strndup_APIName, BUF_memdup_APIName, BUF_strlcpy_APIName, BUF_strlcat_APIName and BUF_strnlen are equivalents of the standard C library functions. The dup_APIName functions use OPENSSL_malloc_APIName underneath and so should be used in preference to the standard library for memory leak checking or replacing the malloc_APIName function."
0,0,"As such , it internally represents lh_insert_APIName 'd items with a `` const void '' pointer type",,,null,"As such, it internally represents lh_insert_APIName'd items with a ""const void *"" pointer type.","The LHASH code regards table entries as constant data. As such, it internally represents lh_insert_APIName'd items with a ""const void *"" pointer type. This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with ""const"", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is ""const"" at all times as far as the LHASH code is concerned. However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant."
0,0,See the NOTES section for important information about how these DSA API functions are affected by the use of DSA_new_method_APIParam_1 API calls,,,null,IMPORTANT: See the NOTES section for important information about how these DSA API functions are affected by the use of DSA_new_method_APIParam_1 API calls.,"A DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 specifies the functions that OpenSSL uses for DSA operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these DSA API functions are affected by the use of DSA_new_method_APIParam_1 API calls."
0,0,shared keying material is established between the two endpoints,,,During the creation of a TLS or DTLS connection ,During the creation of a TLS or DTLS connection shared keying material is established between the two endpoints.,During the creation of a TLS or DTLS connection shared keying material is established between the two endpoints. The function SSL_export_keying_material_APIName enables an application to use some of this keying material for The function SSL_export_keying_material_APIName own purposes in accordance with RFC5705.
0,0,"This is a filter BIO that encrypts any data written through it , and decrypts any data read from it",,,null,"This is a filter BIO that encrypts any data written through it, and decrypts any data read from it.","BIO_f_cipher_APIName returns the cipher BIO method. This is a filter BIO that encrypts any data written through it, and decrypts any data read from it. It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName, EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName."
0,0,which will be identical in almost all cases,,,null,Most applications wishing to know a key type will simply call EVP_PKEY_base_id_APIName and will not care about the actual type: which will be identical in almost all cases.,Most applications wishing to know a key type will simply call EVP_PKEY_base_id_APIName and will not care about the actual type: which will be identical in almost all cases.
0,0,Changes made to this context will affect the digest BIO itself,,,null,Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.,The context returned by BIO_get_md_ctx_APIName is an internal context structure. Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.
0,0,"However , as callers are themselves providing these pointers , they can choose whether they too should be treating all such parameters as constant",,,null,"However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant.","The LHASH code regards table entries as constant data. As such, it internally represents lh_insert_APIName'd items with a ""const void *"" pointer type. This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with ""const"", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is ""const"" at all times as far as the LHASH code is concerned. However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant."
0,0,SSL_shutdown_APIName can be modified to only set the connection to `` shutdown '' state but not actually send the `` close notify '' alert messages,,,null,"SSL_shutdown_APIName can be modified to only set the connection to ""shutdown"" state but not actually send the ""close notify"" alert messages, see SSL_CTX_set_quiet_shutdown_APIName .","SSL_shutdown_APIName can be modified to only set the connection to ""shutdown"" state but not actually send the ""close notify"" alert messages, see SSL_CTX_set_quiet_shutdown_APIName . When ""quiet shutdown"" is enabled, SSL_shutdown_APIName will always succeed and return 1."
0,0,"The TLS/SSL handshake was successfully completed , a TLS/SSL connection has been established",,,null,"The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been established.","The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been established."
0,0,"Once the SSL object has been used in conjunction with the callback function , the certificate will be set for the SSL object and will not be cleared even",,,when SSL_clear_APIName is being called,"Once the SSL object has been used in conjunction with the callback function, the certificate will be set for the SSL object and will not be cleared even when SSL_clear_APIName is being called.","Once the SSL object has been used in conjunction with the callback function, the certificate will be set for the SSL object and will not be cleared even when SSL_clear_APIName is being called. It is therefore mandatory to destroy the SSL object using SSL_free_APIName and create a new one to return to the previous state."
0,0,"This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with `` const '' , even for the parameters that pass back the table items ' data pointers - for consistency , user-provided data is `` const '' at all times as far as the LHASH code is concerned",,,null,"This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with ""const"", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is ""const"" at all times as far as the LHASH code is concerned.","The LHASH code regards table entries as constant data. As such, it internally represents lh_insert_APIName'd items with a ""const void *"" pointer type. This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with ""const"", even for the parameters that pass back the table items' data pointers - for consistency, user-provided data is ""const"" at all times as far as the LHASH code is concerned. However, as callers are themselves providing these pointers, they can choose whether they too should be treating all such parameters as constant."
0,0,A X. 509 CRL is a tool to help determine if a certificate is still valid,,,null,A X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid.,"A X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine. A X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid. The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX. In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL."
0,0,The EVP_PKEY_free_APIParam_1 structure is used by various OpenSSL functions which require a general private key without reference to any particular algorithm,,,null,The EVP_PKEY_free_APIParam_1 structure is used by various OpenSSL functions which require a general private key without reference to any particular algorithm.,The EVP_PKEY_free_APIParam_1 structure is used by various OpenSSL functions which require a general private key without reference to any particular algorithm.
0,0,They will also process a trusted X509 certificate but any trust settings are discarded,,,null,They will also process a trusted X509 certificate but any trust settings are discarded.,The PEM_read_bio_X509_CRL_APIParam_2 PEM_write_bio_X509_APIParam_2 PEM_write_X509_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_write_X509_AUX_APIParam_2 PEM_write_X509_REQ_APIParam_2 PEM_read_bio_X509_AUX_APIParam_2 PEM_read_bio_X509_APIParam_2 PEM_read_X509_AUX_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_read_X509_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_write_X509_CRL_APIParam_2 PEM_write_bio_X509_AUX_APIParam_2 PEM_read_X509_REQ_APIParam_2 functions process an X509 certificate using an X509 structure. They will also process a trusted X509 certificate but any trust settings are discarded.
0,0,OPENSSL_instrument_bus performs OPENSSL_instrument_bus_APIParam_2 OPENSSL_instrument_bus2_APIParam_2 probes and records the number of oscillator cycles every probe took,,,null,OPENSSL_instrument_bus performs OPENSSL_instrument_bus_APIParam_2 OPENSSL_instrument_bus2_APIParam_2 probes and records the number of oscillator cycles every probe took.,OPENSSL_instrument_bus performs OPENSSL_instrument_bus_APIParam_2 OPENSSL_instrument_bus2_APIParam_2 probes and records the number of oscillator cycles every probe took.
0,0,"The reference count of the SSL_get_session_APIParam_0 is not incremented , so that the pointer can become invalid by other operations",,,null,"The reference count of the SSL_get_session_APIParam_0 is not incremented, so that the pointer can become invalid by other operations.","SSL_get_session_APIName returns a pointer to the SSL_get_session_APIParam_0 actually used in SSL_get_session_APIParam_1. The reference count of the SSL_get_session_APIParam_0 is not incremented, so that the pointer can become invalid by other operations."
0,0,"A X. 509 certificate is a structured grouping of information about an individual , a device , or anything one can imagine",,,null,"A X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine.","A X.509 certificate is a structured grouping of information about an individual, a device, or anything one can imagine. A X.509 CRL (certificate revocation list) is a tool to help determine if a certificate is still valid. The exact definition of those can be found in the X.509 document from ITU-T, or in RFC3280 from PKIX. In OpenSSL, the type X509 is used to express such a certificate, and the type X509_CRL is used to express a CRL."
0,0,SSL_CTX_get_read_ahead_APIName and SSL_get_read_ahead_APIName indicate whether reading ahead has been set or not,,,null,SSL_CTX_get_read_ahead_APIName and SSL_get_read_ahead_APIName indicate whether reading ahead has been set or not.,SSL_CTX_get_read_ahead_APIName and SSL_get_read_ahead_APIName indicate whether reading ahead has been set or not.
0,0,UI_get0_user_data_APIName retrieves the data that has last been given to the UI with UI_add_user_data_APIName,,,null,UI_get0_user_data_APIName retrieves the data that has last been given to the UI with UI_add_user_data_APIName.,UI_get0_user_data_APIName retrieves the data that has last been given to the UI with UI_add_user_data_APIName.
0,0,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS # 1 when signing and this structure is expected when verifying,,,If this macro is called for PKCS # 1 padding,"If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying.","Two RSA padding modes behave differently if EVP_PKEY_CTX_set_signature_md_APIName is used. If this macro is called for PKCS#1 padding ,the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS#1 when signing and this structure is expected (and stripped off) when verifying. If this control is not used with RSA and PKCS#1 padding then the supplied data is used directly and not encapsulated. In the case of X9.31 padding for RSA the algorithm identifier byte is added or checked and removed if this control is called. If this control is not called then the first byte of the plaintext buffer is expected to be the algorithm identifier byte."
0,0,lh _ <type> _ insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1,,,null,lh_<type>_insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1.,"lh_<type>_insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1. If there already is an entry with the same key, the old value is replaced. Note that lh_<type>_insert_APIName stores pointers, the data are not copied."
0,0,Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function,,,null,Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function.,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName. Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function. Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecpientInfo_decrypt_APIName called. If successful CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content.
0,0,Thus no syntax checking takes place,,,null,Thus no syntax checking takes place.,"The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration (ciphers compiled in). Thus no syntax checking takes place. Items that are not recognized, because the corresponding ciphers are not compiled in or because the corresponding ciphers are mistyped, are simply ignored. Failure is only flagged if no ciphers could be collected at all."
0,0,CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content,1,,If successful ,If successful CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content.,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName. Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function. Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecpientInfo_decrypt_APIName called. If successful CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content.
0,0,X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 determines how the new type is added,,,null,X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 determines how the new type is added.,"X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 determines how the new type is added. If X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 is zero ,a new RDN is created."
0,0,"Items that are not recognized , or , are simply ignored",,,null,"Items that are not recognized ,  or  , are simply ignored .","The control string SSL_CTX_set_cipher_list_APIParam_2 SSL_set_cipher_list_APIParam_2 should be universally usable and not depend on details of the library configuration (ciphers compiled in). Thus no syntax checking takes place. Items that are not recognized, because the corresponding ciphers are not compiled in or because the corresponding ciphers are mistyped, are simply ignored. Failure is only flagged if no ciphers could be collected at all."
0,0,The verification store is used to verify the certificate chain sent by the peer,,,null,The verification store is used to verify the certificate chain sent by the peer: that is an SSL/TLS client will use the verification store to verify the server's certificate chain and a SSL/TLS server will use it to verify any client certificate chain.,The verification store is used to verify the certificate chain sent by the peer: that is an SSL/TLS client will use the verification store to verify the server's certificate chain and a SSL/TLS server will use it to verify any client certificate chain.
0,0,there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial,,,null,Therefore there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial.,EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2^m. In this case EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial. Therefore there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial. EC_group_get_curve_GF2m obtains the previously set curve parameters.
0,0,BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted,,,null,BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted: this is used to flush and possibly pad the final block through the BIO.,BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted: this is used to flush and possibly pad the final block through the BIO.
0,0,it can associated with the structure and CMS_RecpientInfo_decrypt_APIName called,1,,if the corresponding secret or private key can be obtained by any appropriate means,Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecpientInfo_decrypt_APIName called.,In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName. Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function. Then if the corresponding secret or private key can be obtained by any appropriate means it can then associated with the structure and CMS_RecpientInfo_decrypt_APIName called. If successful CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content.
0,0,Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent,,,null,Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent.,"When a certificate was set using the SSL_CTX_use_certificate_APIName family of functions, it will be sent to the server. The TLS standard requires that only a certificate is sent, if it matches the list of acceptable CAs sent by the server. This constraint is violated by the default behavior of the OpenSSL library. Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent."
0,0,lh _ <type> _ retrieve_APIName looks up an entry in lh_retrieve_APIParam_1,,,null,lh_<type>_retrieve_APIName looks up an entry in lh_retrieve_APIParam_1.,"lh_<type>_retrieve_APIName looks up an entry in lh_retrieve_APIParam_1. Normally, lh_retrieve_APIParam_2 is a structure with the key field(s) set; the function will return a pointer to a fully populated structure."
0,0,The functions EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName are similar except parameters are generated,,,null,The functions EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName are similar except parameters are generated.,The functions EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName are similar except parameters are generated.
0,0,Otherwise check out the error stack to find out the reason,,,null,Otherwise check out the error stack to find out the reason.,"On success, the functions return 1. Otherwise check out the error stack to find out the reason."
0,0,SSL_load_client_CA_file_APIName reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found,,,null,SSL_load_client_CA_file_APIName reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found.,"SSL_load_client_CA_file_APIName reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found. While the name suggests the specific usage as support function for SSL_CTX_set_client_CA_list_APIName , it is not limited to CA certificates."
0,0,Older versions of this documentation wrongly stated that calls to EVP_VerifyUpdate_APIName could not be made after calling EVP_VerifyFinal_APIName,,,null,Older versions of this documentation wrongly stated that calls to EVP_VerifyUpdate_APIName could not be made after calling EVP_VerifyFinal_APIName.,Older versions of this documentation wrongly stated that calls to EVP_VerifyUpdate_APIName could not be made after calling EVP_VerifyFinal_APIName.
0,0,For any given x co-ordinate for a point on a curve it is possible to derive two possible y values,,,null,For any given x co-ordinate for a point on a curve it is possible to derive two possible y values.,"For any given x co-ordinate for a point on a curve it is possible to derive two possible y values. For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used, followed by the octets for x."
0,0,Each state table has a flag to note whether it has processed this `` get_default '' query,,,null,Each state table has a flag to note whether it has processed this `` get_default '' query  .,"Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,The PKCS # 8 functions encode and decode private keys in PKCS # 8 format using both PKCS # 5 v1 .5 and PKCS # 5 v2 .0 password based encryption algorithms,,,null,The PKCS#8 functions encode and decode private keys in PKCS#8 format using both PKCS#5 v1.5 and PKCS#5 v2.0 password based encryption algorithms.,The PKCS#8 functions encode and decode private keys in PKCS#8 format using both PKCS#5 v1.5 and PKCS#5 v2.0 password based encryption algorithms.
0,0,"A special case is the size 0 , which is used for unlimited size",,,null,"A special case is the size 0, which is used for unlimited size.","The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT, currently 1024*20, so that up to 20000 sessions can be held. This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call. A special case is the size 0, which is used for unlimited size."
0,0,EGD is checked via RAND_status_APIName for the first time,,,"when entropy is requested via RAND_bytes_APIName or the status,  if the socket is located at / var/run/egd-pool , / dev/egd-pool or / etc/egd-pool","OpenSSL automatically queries EGD when entropy is requested via RAND_bytes_APIName or the status is checked via RAND_status_APIName for the first time, if the socket is located at /var/run/egd-pool, /dev/egd-pool or /etc/egd-pool.","OpenSSL automatically queries EGD when entropy is requested via RAND_bytes_APIName or the status is checked via RAND_status_APIName for the first time, if the socket is located at /var/run/egd-pool, /dev/egd-pool or /etc/egd-pool."
0,0,"This indicates that it was not possible to set/retrieve a session ticket and the SSL/TLS session will continue by by negiotationing a set of cryptographic parameters or using the alternate SSL/TLS resumption mechanism , session ids",,,null,"This indicates that it was not possible to set/retrieve a session ticket and the SSL/TLS session will continue by by negiotationing a set of cryptographic parameters or using the alternate SSL/TLS resumption mechanism, session ids.","This indicates that it was not possible to set/retrieve a session ticket and the SSL/TLS session will continue by by negiotationing a set of cryptographic parameters or using the alternate SSL/TLS resumption mechanism, session ids."
0,0,"For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used , followed by the octets for x",,,null,"For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used, followed by the octets for x.","For any given x co-ordinate for a point on a curve it is possible to derive two possible y values. For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used, followed by the octets for x."
0,0,An OpenSSL client speaking a protocol that allows compression will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method_APIName to the server,,,during the handshake,"An OpenSSL client speaking a protocol that allows compression (SSLv3, TLSv1) will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method_APIName to the server during the handshake.","An OpenSSL client speaking a protocol that allows compression (SSLv3, TLSv1) will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method_APIName to the server during the handshake. Unlike the mechanisms to set a cipher list, there is no method available to restrict the list of compression method on a per connection basis."
0,0,lh _ <type> _ error_APIName is a macro,,,null,lh_<type>_error_APIName is a macro.,lh_<type>_error_APIName can be used to determine if an error occurred in the last operation. lh_<type>_error_APIName is a macro.
0,0,That is the chain is now accept - > socket,,,null,That is the chain is now accept->socket.,When a connection is established a new socket BIO is created for the connection and appended to the chain. That is the chain is now accept->socket. This effectively means that attempting I/O on an initial accept socket will await an incoming connection then perform I/O on an incoming connection.
0,0,"MD2 , MD4 , and MD5 are cryptographic hash functions with a 128 bit output",,,null,"MD2, MD4, and MD5 are cryptographic hash functions with a 128 bit output.","MD2, MD4, and MD5 are cryptographic hash functions with a 128 bit output."
0,0,lh _ <type> _ error_APIName can be used to determine if an error occurred in the last operation,,,null,lh_<type>_error_APIName can be used to determine if an error occurred in the last operation.,lh_<type>_error_APIName can be used to determine if an error occurred in the last operation. lh_<type>_error_APIName is a macro.
0,0,The result and the number of bits it was shifted left will later be stored in BN_RECP_CTX_set_APIParam_1,,,null,The result and the number of bits it was shifted left will later be stored in BN_RECP_CTX_set_APIParam_1.,BN_RECP_CTX_set_APIName stores BN_RECP_CTX_set_APIParam_2 in BN_RECP_CTX_set_APIParam_1 and sets it up for computing 1/BN_RECP_CTX_set_APIParam_2 and shifting it left by BN_num_bits(BN_RECP_CTX_set_APIParam_2)+1 to make it an integer. The result and the number of bits it was shifted left will later be stored in BN_RECP_CTX_set_APIParam_1.
0,0,"The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT , currently 102420 , so that up to 20000 sessions can be held",,,null,"The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT, currently 1024*20, so that up to 20000 sessions can be held.","The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT, currently 1024*20, so that up to 20000 sessions can be held. This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call. A special case is the size 0, which is used for unlimited size."
0,0,"Before , between , and after the certificates text is allowed which can be used eg for descriptions of the certificates",,,null,"Before, between, and after the certificates text is allowed which can be used eg for descriptions of the certificates.","sequences. Before, between, and after the certificates text is allowed which can be used eg for descriptions of the certificates."
0,0,Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve,,,null,Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve.,Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve. Refer to EC_GROUP_new_APIName for a description of curve names. This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name.
0,0,This effectively means that attempting I/O on an initial accept socket will await an incoming connection perform I/O on an incoming connection,,,null,This effectively means that attempting I/O on an initial accept socket will await an incoming connection then perform I/O on an incoming connection.,When a connection is established a new socket BIO is created for the connection and appended to the chain. That is the chain is now accept->socket. This effectively means that attempting I/O on an initial accept socket will await an incoming connection then perform I/O on an incoming connection.
0,0,BIO_gets_APIName performs the BIOs `` gets '' operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2,,,null,"BIO_gets_APIName performs the BIOs ""gets"" operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2.","BIO_gets_APIName performs the BIOs ""gets"" operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2. Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3. There are exceptions to this however, for example BIO_gets_APIName on a digest BIO will calculate and return the digest and other BIOs may not support BIO_gets_APIName at all."
0,0,BN_RECP_CTX_set_APIName stores BN_RECP_CTX_set_APIParam_2 in BN_RECP_CTX_set_APIParam_1 and sets it up for computing 1/BN _ RECP_CTX_set_APIParam_2 and shifting it left by BN_num_bits +1 to make it an integer,,,null,BN_RECP_CTX_set_APIName stores BN_RECP_CTX_set_APIParam_2 in BN_RECP_CTX_set_APIParam_1 and sets it up for computing 1/BN_RECP_CTX_set_APIParam_2 and shifting it left by BN_num_bits(BN_RECP_CTX_set_APIParam_2)+1 to make it an integer.,BN_RECP_CTX_set_APIName stores BN_RECP_CTX_set_APIParam_2 in BN_RECP_CTX_set_APIParam_1 and sets it up for computing 1/BN_RECP_CTX_set_APIParam_2 and shifting it left by BN_num_bits(BN_RECP_CTX_set_APIParam_2)+1 to make it an integer. The result and the number of bits it was shifted left will later be stored in BN_RECP_CTX_set_APIParam_1.
0,0,"In the case of abstractions like EVP_CIPHER , where implementations are indexed by ` nid ' , these flags and cached-responses are distinct for each ` nid ' value",,,null,"In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value.","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2,,,null,X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2.,"X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2. Only the mailbox syntax of RFC 822 is supported, comments are not allowed, and no attempt is made to normalize quoted characters. The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen(X509_check_email_APIParam_2)."
0,0,SSL_get_secure_renegotiation_support_APIName indicates whether the peer supports secure renegotiation,,,null,SSL_get_secure_renegotiation_support_APIName indicates whether the peer supports secure renegotiation.,SSL_get_secure_renegotiation_support_APIName indicates whether the peer supports secure renegotiation.
0,0,PEM_write_bio_PKCS8PrivateKey_nid_APIName and PEM_write_PKCS8PrivateKey_nid_APIName also write out a private key as a PKCS # 8 EncryptedPrivateKeyInfo however it uses PKCS # 5 v1 .5 or PKCS # 12 encryption algorithms instead,,,null,PEM_write_bio_PKCS8PrivateKey_nid_APIName and PEM_write_PKCS8PrivateKey_nid_APIName also write out a private key as a PKCS#8 EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12 encryption algorithms instead.,PEM_write_bio_PKCS8PrivateKey_nid_APIName and PEM_write_PKCS8PrivateKey_nid_APIName also write out a private key as a PKCS#8 EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12 encryption algorithms instead. The algorithm to use is specified in the PEM_write_bio_PKCS8PrivateKey_nid_APIParam_3 PEM_write_PKCS8PrivateKey_nid_APIParam_3 parameter and should be the NID of the corresponding OBJECT IDENTIFIER (see NOTES section).
0,0,Otherwise they behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page,,,null,Otherwise they behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.,Otherwise they behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page.
0,0,Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3,,,null,Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3.,"BIO_gets_APIName performs the BIOs ""gets"" operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2. Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3. There are exceptions to this however, for example BIO_gets_APIName on a digest BIO will calculate and return the digest and other BIOs may not support BIO_gets_APIName at all."
0,0,"It is using these `` core '' control commands that one can discover the the control commands implemented by a given ENGINE , specifically the commands",,,null,"It is using these ""core"" control commands that one can discover the the control commands implemented by a given ENGINE, specifically the commands;","It is using these ""core"" control commands that one can discover the the control commands implemented by a given ENGINE, specifically the commands;"
0,0,BIO_get_cipher_status_APIName is a BIO_ctrl_APIName macro which can be called to determine whether the decryption operation was successful,,,null,BIO_get_cipher_status_APIName is a BIO_ctrl_APIName macro which can be called to determine whether the decryption operation was successful.,When reading from an encryption BIO the final block is automatically decrypted and checked when EOF is detected. BIO_get_cipher_status_APIName is a BIO_ctrl_APIName macro which can be called to determine whether the decryption operation was successful.
0,0,it is not a strong test that the input data or key is correct,,,null," , it is not a strong test that the input data or key is correct .","Although the decryption operation can produce an error if padding is enabled, it is not a strong test that the input data or key is correct. A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error."
0,0,"The ASN1_OBJECT allocation routines , allocate and free an ASN1_OBJECT structure , which represents an ASN1 OBJECT IDENTIFIER",,,null,"The ASN1_OBJECT allocation routines, allocate and free an ASN1_OBJECT structure, which represents an ASN1 OBJECT IDENTIFIER.","The ASN1_OBJECT allocation routines, allocate and free an ASN1_OBJECT structure, which represents an ASN1 OBJECT IDENTIFIER."
0,0,"SSL_COMP_free_compression_methods_APIName frees the internal table of compression methods that were built internally , and possibly augmented by adding SSL_COMP_add_compression_method_APIName",,,null,"SSL_COMP_free_compression_methods_APIName frees the internal table of compression methods that were built internally, and possibly augmented by adding SSL_COMP_add_compression_method_APIName.","SSL_COMP_free_compression_methods_APIName frees the internal table of compression methods that were built internally, and possibly augmented by adding SSL_COMP_add_compression_method_APIName."
0,0,Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName,,,null,Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName.,"A server application must also call the SSL_CTX_set_tlsext_status_cb_APIName function if A server application wants to be able to provide clients with OCSP Certificate Status responses. Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName; obtain the OCSP response to be sent back; and then set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName. A pointer to the response data should be provided in the SSL_set_tlsext_status_ocsp_resp_APIParam_2 argument, and the length of that data should be in the SSL_set_tlsext_status_ocsp_resp_APIParam_3 argument."
0,0,The ENGINE object itself will only actually be cleaned up and deallocated,,,when the last structural reference is released,The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released.,"The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName. All structural references should be released by a corresponding to call to the ENGINE_free_APIName function. The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released."
0,0,the final block is automatically decrypted and checked,1,,"When reading from an encryption BIO, when EOF is detected",When reading from an encryption BIO the final block is automatically decrypted and checked when EOF is detected.,When reading from an encryption BIO the final block is automatically decrypted and checked when EOF is detected. BIO_get_cipher_status_APIName is a BIO_ctrl_APIName macro which can be called to determine whether the decryption operation was successful.
0,0,The SSL objects inherit the setting valid for SSL_CTX_set_max_cert_list_APIParam_1 at the time SSL_new_APIName is being called,,,null,The SSL objects inherit the setting valid for SSL_CTX_set_max_cert_list_APIParam_1 at the time SSL_new_APIName is being called.,SSL_CTX_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for all SSL objects created from SSL_CTX_set_max_cert_list_APIParam_1 to be <size> bytes. The SSL objects inherit the setting valid for SSL_CTX_set_max_cert_list_APIParam_1 at the time SSL_new_APIName is being called.
0,0,SSL_shutdown_APIName tries to send the `` close notify '' shutdown alert to the peer,,,null,"SSL_shutdown_APIName tries to send the ""close notify"" shutdown alert to the peer.","SSL_shutdown_APIName tries to send the ""close notify"" shutdown alert to the peer. Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse."
0,0, the final block is checked to see if the final block has the correct form.,,,When decrypting,When decrypting the final block is checked to see if the final block has the correct form.,When decrypting the final block is checked to see if the final block has the correct form.
0,0,"By generating a temporary DH key inside the server application that , it becomes impossible for an attacker to decrypt past sessions",,,null,"By generating a temporary DH key inside the server application that is lost when the application is left , it becomes impossible for an attacker to decrypt past sessions ,  .","Using ephemeral DH key exchange yields forward secrecy, as the connection can only be decrypted, when the DH key is known. By generating a temporary DH key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) key, as this key was only used for signing."
0,0,An export cipher like eg EXP-RC4-MD5 has only 40 secret bits,,,null,An export cipher like eg EXP-RC4-MD5 has only 40 secret bits.,"The number of bits processed can be different from the secret bits. An export cipher like eg EXP-RC4-MD5 has only 40 secret bits. The algorithm does use the full 128 bits (which would be returned for SSL_CIPHER_get_bits_APIParam_2), of which however 88bits are fixed. The search space is hence only 40 bits."
0,0,"The algorithm does use the full 128 bits , of which however 88bits are fixed",,,null,"The algorithm does use the full 128 bits (which would be returned for SSL_CIPHER_get_bits_APIParam_2), of which however 88bits are fixed.","The number of bits processed can be different from the secret bits. An export cipher like eg EXP-RC4-MD5 has only 40 secret bits. The algorithm does use the full 128 bits (which would be returned for SSL_CIPHER_get_bits_APIParam_2), of which however 88bits are fixed. The search space is hence only 40 bits."
0,0,These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey,,,null,These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey.,"The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1. There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY. These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey. If EC_PKEY_NO_PARAMETERS is set ,then the public parameters for the curve are not encoded along with the private key. If EC_PKEY_NO_PUBKEY is set ,then the public key is not encoded along with the private key."
0,0,that is there is only a single constant structure for each table object,,,null,They are also static constant structures which are shared: that is there is only a single constant structure for each table object.,Table objects have certain advantages over other objects: for example their NIDs can be used in a C language switch statement. They are also static constant structures which are shared: that is there is only a single constant structure for each table object.
0,0,They are also static constant structures which are shared,,,null,They are also static constant structures which are shared: that is there is only a single constant structure for each table object.,Table objects have certain advantages over other objects: for example their NIDs can be used in a C language switch statement. They are also static constant structures which are shared: that is there is only a single constant structure for each table object.
0,0,SSL_CTX_set_max_cert_list_APIName sets the maximum size allowed for the peer 's certificate chain for all SSL objects created from SSL_CTX_set_max_cert_list_APIParam_1 to be <size> bytes,,,null,SSL_CTX_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for all SSL objects created from SSL_CTX_set_max_cert_list_APIParam_1 to be <size> bytes.,SSL_CTX_set_max_cert_list_APIName sets the maximum size allowed for the peer's certificate chain for all SSL objects created from SSL_CTX_set_max_cert_list_APIParam_1 to be <size> bytes. The SSL objects inherit the setting valid for SSL_CTX_set_max_cert_list_APIParam_1 at the time SSL_new_APIName is being called.
0,0,Calls to BIO_write_APIName will place data in the buffer or request a retry,,,if the buffer is full,Calls to BIO_write_APIName will place data in the buffer or request a retry if the buffer is full.,Calls to BIO_write_APIName will place data in the buffer or request a retry if the buffer is full.
0,0,"Other items in PEM formatting can also be encrypted , it is however not usual , as certificate information is considered public",,,null,"Other items in PEM formatting (certificates) can also be encrypted, it is however not usual, as certificate information is considered public.","Other items in PEM formatting (certificates) can also be encrypted, it is however not usual, as certificate information is considered public."
0,0,any active connection on that chain is shutdown,1,,If the close flag is set on an accept BIO,"If the close flag is set on an accept BIO ,then any active connection on that chain is shutdown and the socket closed when the BIO is freed.","If the close flag is set on an accept BIO ,then any active connection on that chain is shutdown and the socket closed when the BIO is freed."
0,0,the socket closed,1,,when the BIO is freed,"If the close flag is set on an accept BIO ,then any active connection on that chain is shutdown and the socket closed when the BIO is freed.","If the close flag is set on an accept BIO ,then any active connection on that chain is shutdown and the socket closed when the BIO is freed."
0,0,A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half,,,null,A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half.,BIO_s_bio_APIName returns the method for a BIO pair. A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half. Both halves must usually by handled by the same application thread since no locking is done on the internal data structures.
0,0,This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName.,1,,during ENGINE_cleanup_APIName,This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName.,"If no ENGINE API functions are called at all in an application, then there are no inherent memory leaks to worry about from the ENGINE functionality, however if any ENGINEs are loaded, even if they are never registered or used, it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit, if the caller wishes to avoid memory leaks. This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName. This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses, yet doesn't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker."
0,0,there are no inherent memory leaks to worry about from the ENGINE functionality,,,If no ENGINE API functions are called at all in an application,"If no ENGINE API functions are called at all in an application , then there are no inherent memory leaks to worry about from the ENGINE functionality , however if any ENGINEs are loaded ,  , it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit , if the caller wishes to avoid memory leaks .","If no ENGINE API functions are called at all in an application, then there are no inherent memory leaks to worry about from the ENGINE functionality, however if any ENGINEs are loaded, even if they are never registered or used, it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit, if the caller wishes to avoid memory leaks. This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName. This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses, yet doesn't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker."
0,0,ECDSA_do_verify_APIName verifies that the signature ECDSA_do_verify_APIParam_1 is a valid ECDSA signature of the hash value ECDSA_do_verify_APIParam_1 of size ECDSA_do_verify_APIParam_2 using the public key ECDSA_size_APIParam_1 ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1,,,null,ECDSA_do_verify_APIName verifies that the signature ECDSA_do_verify_APIParam_1 is a valid ECDSA signature of the hash value ECDSA_do_verify_APIParam_1 of size ECDSA_do_verify_APIParam_2 using the public key ECDSA_size_APIParam_1 ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1.,ECDSA_do_verify_APIName verifies that the signature ECDSA_do_verify_APIParam_1 is a valid ECDSA signature of the hash value ECDSA_do_verify_APIParam_1 of size ECDSA_do_verify_APIParam_2 using the public key ECDSA_size_APIParam_1 ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1.
0,0,attempt is first made to use BIO_BIN_NORMAL ,1,,If BIO_BIND_REUSEADDR_IF_UNUSED is set,"If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR.","BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR."
0,0,a second attempt is made using BIO_BIND_REUSEADDR,1,,if this fails and the port is not in use,"If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR.","BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode. If BIO_BIND_NORMAL (the default) is set ,then another socket cannot be bound to the same port. If BIO_BIND_REUSEADDR is set then other sockets can bind to the same port. If BIO_BIND_REUSEADDR_IF_UNUSED is set ,then and attempt is first made to use BIO_BIN_NORMAL, if this fails and the port is not in use ,then a second attempt is made using BIO_BIND_REUSEADDR."
0,0,"Whether the operation succeeds or not , the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse",,,null,"Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse.","SSL_shutdown_APIName tries to send the ""close notify"" shutdown alert to the peer. Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse."
0,0,"This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses , yet does n't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker",,,null,"This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses, yet doesn't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker.","If no ENGINE API functions are called at all in an application, then there are no inherent memory leaks to worry about from the ENGINE functionality, however if any ENGINEs are loaded, even if they are never registered or used, it is necessary to use the ENGINE_cleanup_APIName function to correspondingly cleanup before program exit, if the caller wishes to avoid memory leaks. This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName. This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses, yet doesn't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker."
0,0,"The return value can be compared to the macro to make sure that the correct version of the library has been loaded, especially when using DLLs on Windows systems",,,null,"The return value can be compared to the macro to make sure that the correct version of the library has been loaded, especially when using DLLs on Windows systems.","SSLeay_APIName returns this number. The return value can be compared to the macro to make sure that the correct version of the library has been loaded, especially when using DLLs on Windows systems."
0,0,The total amount of space required is returned,,,null,The total amount of space required is returned.,"OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation. The representation is written as a null terminated string to OBJ_obj2txt_APIParam_1 at most OBJ_obj2txt_APIParam_2 bytes are written, truncating the result if necessary. The total amount of space required is returned. If OBJ_obj2txt_APIParam_4 is 0 then if the object has a long or short name then that will be used, otherwise the numerical form will be used. If OBJ_obj2txt_APIParam_4 is 1 ,then the numerical form will always be used."
0,0,The key is erased before the memory is returned to the system,,,null,The key is erased before the memory is returned to the system.,RSA_free_APIName frees the RSA_free_APIParam_1 structure and its components. The key is erased before the memory is returned to the system.
0,0," ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead",1,,If -2 is returned,"If -2 is returned ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead.","In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName. If -2 is returned ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead. If -3 is returned ,a required argument is missing and an error is indicated. If 0 is returned ,some other error occurred and this can be reported back to the user."
0,0,"DSA_generate_parameters_APIName  works in much the same way as for DSA_generate_parameters_ex, except that no DSA_generate_parameters_ex_APIParam_1 parameter is passed and instead a newly allocated DSA_generate_parameters_APIParam_0 structure is returned",,,null,"DSA_generate_parameters_APIName (deprecated) works in much the same way as for DSA_generate_parameters_ex, except that no DSA_generate_parameters_ex_APIParam_1 parameter is passed and instead a newly allocated DSA_generate_parameters_APIParam_0 structure is returned.","DSA_generate_parameters_APIName (deprecated) works in much the same way as for DSA_generate_parameters_ex, except that no DSA_generate_parameters_ex_APIParam_1 parameter is passed and instead a newly allocated DSA_generate_parameters_APIParam_0 structure is returned. Additionally ""old style"" callbacks are used instead of the newer BN_GENCB based approach. Refer to BN_generate_prime_APIName for further information."
0,0, the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3  is returned,1,,If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is NULL,If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is <NULL> then the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 (excluding the final null) is returned.,"X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned. At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated. The length of the output string written is returned excluding the terminating null. If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is <NULL> then the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 (excluding the final null) is returned."
0,0,The values are erased before the memory is returned to the system,,,null,The values are erased before the memory is returned to the system.,DH_free_APIName frees the DH_free_APIParam_1 structure and its components. The values are erased before the memory is returned to the system.
0,0,BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system,,,null,BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system.,"BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1, and if BN_free_APIParam_1 BN_clear_free_APIParam_1 was created by BN_new_APIName, also the structure itself. BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system. If BN_free_APIParam_1 BN_clear_free_APIParam_1 is NULL, nothing is done."
0,0,It is possible for a BIO to block indefinitely,1,,if the underlying I/O structure cannot process or return any data,It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data.,It is possible for a BIO to block indefinitely if the underlying I/O structure cannot process or return any data. This depends on the behaviour of the platforms I/O functions. This is often not desirable: one solution is to use non blocking I/O and use a timeout on the select_APIName (or equivalent) call.
0,0,"if the ENGINE_TABLE_FLAG_NOINIT flag is set , no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table",,,null,"This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table.","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,DSA_do_sign_APIParam_3 is the signer 's public key,,,null,DSA_do_sign_APIParam_3 is the signer's public key,DSA_do_verify() verifies that the signature DSA_do_verify_APIParam_1 matches a given message digest DSA_do_verify_APIParam_1 of size len. DSA_do_sign_APIParam_3 is the signer's public key.
0,0,DSA_do_sign computes a digital signature on the len byte message digest DSA_do_sign_APIParam_1 using the private key DSA_do_sign_APIParam_3 and returns the private key DSA_do_sign_APIParam_3 in a newly allocated DSA_do_sign_APIParam_0 structure,,,null,DSA_do_sign() computes a digital signature on the len byte message digest DSA_do_sign_APIParam_1 using the private key DSA_do_sign_APIParam_3 and returns the private key DSA_do_sign_APIParam_3 in a newly allocated DSA_do_sign_APIParam_0 structure,DSA_do_sign() computes a digital signature on the len byte message digest DSA_do_sign_APIParam_1 using the private key DSA_do_sign_APIParam_3 and returns the private key DSA_do_sign_APIParam_3 in a newly allocated DSA_do_sign_APIParam_0 structure.
0,0,This is done using ASN1_STRING_set_by_NID,,,null,This is done using ASN1_STRING_set_by_NID(),The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 parameter. This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards. This is done using ASN1_STRING_set_by_NID().
0,0,It does not provide any feedback,,,null,It does not provide any feedback,"The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache. This happens when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess. It does not provide any feedback."
0,0,DSA_do_verify verifies that the signature DSA_do_verify_APIParam_1 matches a given message digest DSA_do_verify_APIParam_1 of size len,,,null,DSA_do_verify() verifies that the signature DSA_do_verify_APIParam_1 matches a given message digest DSA_do_verify_APIParam_1 of size len,DSA_do_verify() verifies that the signature DSA_do_verify_APIParam_1 matches a given message digest DSA_do_verify_APIParam_1 of size len. DSA_do_sign_APIParam_3 is the signer's public key.
0,0,everything after the first 64 bits is ignored,,,If they are larger,"If they are larger, everything after the first 64 bits is ignored","BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less. If they are larger, everything after the first 64 bits is ignored."
0,0,it tries to read random bytes that EGD has collected,,,When RAND_egd is called with that path as an argument,"When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected","EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install). It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket. When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected. RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected. The write and read socket operations in the communication are blocking."
0,0,"Some have tried using BN_num_bits on individual numbers in RSA keys , DH keys and DSA keys , and found that they do n't always come up with the number of bits they expected",,,null,"Some have tried using BN_num_bits() on individual numbers in RSA keys, DH keys and DSA keys, and found that they don't always come up with the number of bits they expected (something like 512, 1024, 2048, ...)","Some have tried using BN_num_bits() on individual numbers in RSA keys, DH keys and DSA keys, and found that they don't always come up with the number of bits they expected (something like 512, 1024, 2048, ...). This is because generating a number with some specific number of bits doesn't always set the highest bits, thereby making the number of significant bits a little lower. If you want to know the ""key size"" of such a key, either use functions like RSA_size(), DH_size() and DSA_size(), or use BN_num_bytes() and multiply with 8 (although there's no real guarantee that will match the ""key size"", just a lot more probability)."
0,0,"Before illustrating how control commands work , it is worth mentioning what they are typically used for",,,null,"Before illustrating how control commands work, it is worth mentioning what they are typically used for","Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
0,0,"After calling EVP_DigestFinal_ex no additional calls to EVP_DigestUpdate can be made , but EVP_DigestInit_ex can be called to initialize a new digest operation",,,null,"After calling EVP_DigestFinal_ex() no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new digest operation","EVP_DigestFinal_ex() retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2. If the EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 parameter is not NULL, then the number of bytes of data written (ie the length of the digest) will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2, at most EVP_MAX_MD_SIZE bytes will be written. After calling EVP_DigestFinal_ex() no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new digest operation."
0,0,"On systems that provide / dev/urandom , the randomness device is used to seed the PRNG transparently",,,null,"On systems that provide /dev/urandom, the randomness device is used to seed the PRNG transparently","OpenSSL makes sure that the PRNG state is unique for each thread. On systems that provide /dev/urandom, the randomness device is used to seed the PRNG transparently. However, on all other systems, the application is responsible for seeding the PRNG by calling RAND_add(), RAND_egd(3) or RAND_load_file(3) ."
0,0,RAND_event collects the entropy from Windows events such as mouse movements and other user interaction,,,null,RAND_event() collects the entropy from Windows events such as mouse movements and other user interaction,"RAND_event() collects the entropy from Windows events such as mouse movements and other user interaction. It should be called with the RAND_event_APIParam_1, RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure. It will estimate the entropy contained in the event message (if any), and add it to the PRNG. The program can then process the messages as usual."
0,0,", EVP_BytesToKey returns the number of bytes needed to store the derived key",1,,If data is NULL,"If data is NULL, then EVP_BytesToKey() returns the number of bytes needed to store the derived key","If data is NULL, then EVP_BytesToKey() returns the number of bytes needed to store the derived key. Otherwise, EVP_BytesToKey() returns the size of the derived key in bytes, or 0 on error."
0,0,"Further , the thread-safety does not extend to things like multiple threads using the same SSL object at the same time",,,null,"Further, the thread-safety does not extend to things like multiple threads using the same SSL object at the same time","OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func. Note that OpenSSL is not completely thread-safe, and unfortunately not all global resources have the necessary locks. Further, the thread-safety does not extend to things like multiple threads using the same SSL object at the same time."
0,0,the first is to provide the necessary details to the implementation so that it can be initialised for use,,,null,Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use,"Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
0,0,"It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones",1,,unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL,"It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL","DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
0,0,Increasing the count parameter slows down the algorithm which makes it harder for an attacker to peform a brute force attack using a large number of candidate passwords,,,null,Increasing the count parameter slows down the algorithm which makes it harder for an attacker to peform a brute force attack using a large number of candidate passwords,Increasing the count parameter slows down the algorithm which makes it harder for an attacker to peform a brute force attack using a large number of candidate passwords.
0,0,"The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place , and these commands may work either before or after ENGINE_init , or in some cases both",,,null,"The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both","Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
0,0,"It generates a random private DH value , and computes the corresponding public value dh->pub_key, which can then be published",1,,unless dh->priv_key is already set,"It generates a random private DH value unless dh->priv_key is already set, and computes the corresponding public value dh->pub_key, which can then be published","DH_generate_key() expects DH_generate_key_APIParam_1 to contain the shared parameters dh->p and dh->g. It generates a random private DH value unless dh->priv_key is already set, and computes the corresponding public value dh->pub_key, which can then be published."
0,0,"- on Windows and BeOS this uses the system 's default thread identifying APIs , and on all other platforms it uses the address of errno",,,null,"If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno","threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1. The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based. If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno. The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility."
0,0,"This could include the path to any driver or config files it needs to load , required network addresses , smart-card identifiers , passwords to initialise protected devices , logging information , etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it , ie before calling ENGINE_init",,,null,"This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init()","Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
0,0,No attempt is made to download CRLs from the CRL distribution points extension,,,null,No attempt is made to download CRLs from the CRL distribution points extension,"If CRLs checking is enable ,CRLs are expected to be available in the corresponding X509_STORE structure. No attempt is made to download CRLs from the CRL distribution points extension."
0,0,The shutdown was not clean,,,null,The shutdown was not clean,"The TLS/SSL handshake was not successful, because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. The shutdown can also occur of action is need to continue the operation for non-blocking BIOs. Call SSL_get_error() with the return value ret to find out the reason."
0,0,Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves,,,null,Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves,"If an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is set with the EVP_PKEY_FLAG_AUTOARGLEN flag, the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework. Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves. For details on the output buffer size, refer to EVP_PKEY_sign(3) ."
0,0,the encoding of unknown fields is printed instead of the values,,,If XN_FLAG_DUMP_UNKNOWN_FIELDS is set,"If XN_FLAG_DUMP_UNKNOWN_FIELDS is set, then the encoding of unknown fields is printed instead of the values","If XN_FLAG_DUMP_UNKNOWN_FIELDS is set, then the encoding of unknown fields is printed instead of the values."
0,0,Some objects are used to represent algorithms which do not have a corresponding ASN .1 OBJECT IDENTIFIER encoding,,,null,Some objects are used to represent algorithms which do not have a corresponding ASN.1 OBJECT IDENTIFIER encoding (for example no OID currently exists for a particular algorithm),Some objects are used to represent algorithms which do not have a corresponding ASN.1 OBJECT IDENTIFIER encoding (for example no OID currently exists for a particular algorithm). As a result Some objects cannot be encoded or decoded as part of ASN.1 structures. Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length() is not zero.
0,0,EVP_SealInit initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV,,,null,EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV,"EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
0,0,This function does not handle the algorithmIdentifier specified in PKCS # 1,,,null,This function does not handle the algorithmIdentifier specified in PKCS #1,"PKCS #1 v1.5 padding. This function does not handle the algorithmIdentifier specified in PKCS #1. When generating or verifying PKCS #1 signatures, RSA_sign(3) and RSA_verify(3) should be used."
0,0,"Unlike most other RSA functions , this function does not work transparently with any underlying ENGINE implementation",,,null,"Unlike most other RSA functions , this function does not work transparently with any underlying ENGINE implementation","Unlike most other RSA functions, this function does not work transparently with any underlying ENGINE implementation because this function uses the key data in the RSA structure directly. An ENGINE implementation can override the way key data is stored and handled, and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all! If the ENGINE in question is only being used for acceleration or analysis purposes, then in all likelihood the RSA key data is complete and untouched, but this can't be assumed in the general case."
0,0,Before the callback function is started ctx and hctx have been initialised with EVP_CIPHER_CTX_init and HMAC_CTX_init respectively,,,null,Before the callback function is started ctx and hctx have been initialised with EVP_CIPHER_CTX_init and HMAC_CTX_init respectively,Before the callback function is started ctx and hctx have been initialised with EVP_CIPHER_CTX_init and HMAC_CTX_init respectively.
0,0,the supplied callback function is called instead,,,If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback,"If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead","Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called. If the application does not explicitly specify a verification callback function, the built-in verification function is used. If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead. By setting callback to NULL, the default behaviour is restored."
0,0,The parameter indent indicated how far the printout should be indented,,,null,The parameter indent indicated how far the printout should be indented,"The functions EVP_PKEY_print_public(), EVP_PKEY_print_private() and EVP_PKEY_print_params() print out the public, private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively. The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form. The parameter indent indicated how far the printout should be indented."
0,0,It provides a rich API which is documented here,,,null,It provides a rich API which is documented here,The OpenSSL ssl library implements the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols. It provides a rich API which is documented here.
0,0,HMAC_Init had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex in programs that expect it will cause them to stop working,,,null,HMAC_Init() had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex() in programs that expect it will cause them to stop working,HMAC_Init_ex() initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2. If both are NULL (or HMAC_APIParam_1 is the same as the previous digest used by HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 and HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2 is NULL) the existing key is reused. HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 must have been created with HMAC_CTX_new() before the first use of an HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 in this function. N.B. HMAC_Init() had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex() in programs that expect it will cause them to stop working.
0,0,The signedContentIdentifier field is set to 32 bytes of pseudo random data,,,if id is NULL,"The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL","CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,SSL_CTX_set_read_ahead and SSL_set_read_ahead set whether we should read as many input bytes as possible or not,,,null,SSL_CTX_set_read_ahead() and SSL_set_read_ahead() set whether we should read as many input bytes as possible (for non-blocking reads) or not,"SSL_CTX_set_read_ahead() and SSL_set_read_ahead() set whether we should read as many input bytes as possible (for non-blocking reads) or not. For example if x bytes are currently required by OpenSSL, but y bytes are available from the underlying BIO (where y > x), then OpenSSL will read all y bytes into its buffer (providing that the buffer is large enough) if reading ahead is on, or x bytes otherwise. The parameter SSL_set_read_ahead_APIParam_2 or m should be 0 to ensure reading ahead is off, or non zero otherwise."
0,0,The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2,,,null,The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2,"ASN1_TIME_adj() sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2. The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2. The offset_sec value can also exceed the number of seconds in a day. If ASN1_TIME_adj_APIParam_1 is NULL ,a new ASN1_TIME structure is allocated and returned."
0,0,RAND_file_name generates a default path for the random seed file,,,null,RAND_file_name() generates a default path for the random seed file,"RAND_file_name() generates a default path for the random seed file. RAND_file_name_APIParam_1 points to a buffer of size RAND_file_name_APIParam_2 in which to store the filename. The seed file is RANDFILE if that environment variable is set, HOME/.rnd otherwise. If HOME is not set either, or RAND_file_name_APIParam_2 is too small for the path name, an error occurs."
0,0,"The commands supported are documented in the openssl utility command line pages for the option - pkeyopt which is supported by the pkeyutl , genpkey and req commands",,,null,"The commands supported are documented in the openssl utility command line pages for the option -pkeyopt which is supported by the pkeyutl, genpkey and req commands","The function EVP_PKEY_CTX_ctrl_str() allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form. This is intended to be used for options specified on the command line or in text files. The commands supported are documented in the openssl utility command line pages for the option -pkeyopt which is supported by the pkeyutl, genpkey and req commands."
0,0,CMS_USE_KEYID will use the subject key identifier value instead,,,If CMS_USE_KEYID is set,"If CMS_USE_KEYID is set, CMS_USE_KEYID will use the subject key identifier value instead","OpenSSL will by default identify signing certificates using issuer name and serial number. If CMS_USE_KEYID is set, CMS_USE_KEYID will use the subject key identifier value instead. An error occurs if the signing certificate does not have a subject key identifier extension."
0,0,This is done,,,when the default cipher parameters are not appropriate,This is done when the default cipher parameters are not appropriate,"EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
0,0,"SSL_load_error_strings does the same , but also registers the libssl error strings",,,null,"SSL_load_error_strings() does the same, but also registers the libssl error strings","ERR_load_crypto_strings() registers the error strings for all libcrypto functions. SSL_load_error_strings() does the same, but also registers the libssl error strings."
0,0,no encryption is used and a PKCS # 8 PrivateKeyInfo structure is used instead,,,If cipher is NULL,"If cipher is NULL, then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead","PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers. If cipher is NULL, then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead."
0,0,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions,,,null,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS#10 certificate request using an X509_REQ structure. The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST (as required by some CAs). The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions.
0,0,SSL_read will also return when the underlying BIO could not satisfy the needs of SSL_read to continue the operation,1,,If the underlying BIO is non-blocking,"If the underlying BIO is non-blocking, SSL_read() will also return when the underlying BIO could not satisfy the needs of SSL_read() to continue the operation","If the underlying BIO is non-blocking, SSL_read() will also return when the underlying BIO could not satisfy the needs of SSL_read() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_read() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_read() can also cause write operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_read(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,"PKCS7_get0_signers retrieves the signer 's certificates from p7 , it does not check their validity or whether any signatures are valid",,,null,"PKCS7_get0_signers() retrieves the signer's certificates from p7, it does not check their validity or whether any signatures are valid","PKCS7_get0_signers() retrieves the signer's certificates from p7, it does not check their validity or whether any signatures are valid. The certs and flags parameters have the same meanings as in PKCS7_verify()."
0,0,"By using CONF_modules_load_file with appropriate flags, an application can customise application configuration to best suit its needs",,,null,By using CONF_modules_load_file() with appropriate flags an application can customise application configuration to best suit its needs,By using CONF_modules_load_file() with appropriate flags an application can customise application configuration to best suit its needs. In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set.
0,0,"Files dh2048.pem , and dh4096.pem in the ` apps ' directory of the current version of the OpenSSL distribution contain the ` SKIP ' DH parameters , which use safe primes and were generated verifiably pseudo-randomly",,,null,"Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly","Files dh2048.pem, and dh4096.pem in the 'apps' directory of the current version of the OpenSSL distribution contain the 'SKIP' DH parameters, which use safe primes and were generated verifiably pseudo-randomly. These files can be converted into C code using the -C option of the dhparam(1) application. Generation of custom DH parameters during installation should still be preferred to stop an attacker from specializing on a commonly used group. Files dh1024.pem and dh512.pem contain old parameters that must not be used by applications."
0,0,The CAs listed do not become trusted,,,null,"The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification","This list must explicitly be set using SSL_CTX_set_client_CA_list() for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list() for the specific SSL_add_client_CA_APIParam_1. The list specified overrides the previous setting. The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification."
0,0,The check_private_key functions do n't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not,,,null,The check_private_key functions don't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not,"The check_private_key functions don't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not. It merely compares the public materials (eg exponent and modulus of an RSA key) and/or key parameters (eg EC params of an EC key) of a key pair. So if you pass a public key to these functions in X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2, it will return success."
0,0,The signature is returned in a newly allocated ECDSA_do_sign_ex_APIParam_0 structure,,,null,The signature is returned in a newly allocated ECDSA_do_sign_ex_APIParam_0 structure (or NULL on error),ECDSA_do_sign_ex() computes a digital signature of the ECDSA_do_verify_APIParam_2 ECDSA_do_sign_APIParam_2 bytes hash value ECDSA_do_sign_ex_APIParam_1 using the private key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The signature is returned in a newly allocated ECDSA_do_sign_ex_APIParam_0 structure (or NULL on error).
0,0,The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex,,,null,The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex,ECDSA_sign_setup() may be used to precompute parts of the signing operation. ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure (or NULL). The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex.
0,0,ECDSA_do_sign is wrapper function for ECDSA_do_sign_ex with kinv and rp set to NULL,,,null,ECDSA_do_sign() is wrapper function for ECDSA_do_sign_ex with kinv and rp set to NULL,ECDSA_do_sign() is wrapper function for ECDSA_do_sign_ex with kinv and rp set to NULL.
0,0,ECDSA_sign_ex computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp,,,null,ECDSA_sign_ex() computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp,ECDSA_sign_ex() computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len. Note: ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory. The parameter ECDSA_sign_ex_APIParam_1 is ignored.
0,0,ECDSA_do_sign_ex computes a digital signature of the ECDSA_do_verify_APIParam_2 ECDSA_do_sign_APIParam_2 bytes hash value ECDSA_do_sign_ex_APIParam_1 using the private key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp,,,null,ECDSA_do_sign_ex() computes a digital signature of the ECDSA_do_verify_APIParam_2 ECDSA_do_sign_APIParam_2 bytes hash value ECDSA_do_sign_ex_APIParam_1 using the private key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp,ECDSA_do_sign_ex() computes a digital signature of the ECDSA_do_verify_APIParam_2 ECDSA_do_sign_APIParam_2 bytes hash value ECDSA_do_sign_ex_APIParam_1 using the private key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The signature is returned in a newly allocated ECDSA_do_sign_ex_APIParam_0 structure (or NULL on error).
0,0,ECDSA_verify verifies that the signature in ECDSA_verify_APIParam_2 of size siglen is a valid ECDSA signature of the hash value ECDSA_verify_APIParam_2 of size ECDSA_do_sign_ex_APIParam_2 using the public key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1,,,null,ECDSA_verify() verifies that the signature in ECDSA_verify_APIParam_2 of size siglen is a valid ECDSA signature of the hash value ECDSA_verify_APIParam_2 of size ECDSA_do_sign_ex_APIParam_2 using the public key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1,ECDSA_verify() verifies that the signature in ECDSA_verify_APIParam_2 of size siglen is a valid ECDSA signature of the hash value ECDSA_verify_APIParam_2 of size ECDSA_do_sign_ex_APIParam_2 using the public key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1. The parameter ECDSA_verify_APIParam_1 is ignored.
0,0,"Without the callback a random number is used , so that the probability of generating the same session id is extremely small",,,null,"Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1)","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
0,0,All functionalities needed are made available via other functions or macros,,,null,All functionalities needed are made available via other functions or macros,"The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects. Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3, SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4, or fp are evaluated. These functions should never be called directly. All functionalities needed are made available via other functions or macros."
0,0,"If the underlying BIO is blocking, SSL_do_handshake will only return once the handshake has been finished or an error occurred",,,null,"If the underlying BIO is blocking, SSL_do_handshake() will only return once the handshake has been finished or an error occurred","If the underlying BIO is blocking, SSL_do_handshake() will only return once the handshake has been finished or an error occurred."
0,0,X509_set1_notBefore and X509_set1_notAfter set the notBefore and notAfter fields of X509_set1_notBefore_APIParam_1 X509_set1_notAfter_APIParam_1 to X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2,,,null,X509_set1_notBefore() and X509_set1_notAfter() set the notBefore and notAfter fields of X509_set1_notBefore_APIParam_1 X509_set1_notAfter_APIParam_1 to X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2,X509_set1_notBefore() and X509_set1_notAfter() set the notBefore and notAfter fields of X509_set1_notBefore_APIParam_1 X509_set1_notAfter_APIParam_1 to X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2. Ownership of the passed parameter X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2 is not transferred by these functions so it must be freed up after the call.
0,0,SSL_do_handshake will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake to continue the handshake,1,,If the underlying BIO is non-blocking,"If the underlying BIO is non-blocking, SSL_do_handshake() will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake() to continue the handshake","If the underlying BIO is non-blocking, SSL_do_handshake() will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_do_handshake() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_do_handshake(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results,,,If the flag CMS_STREAM is set,"If the flag CMS_STREAM is set ,the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results","If the flag CMS_STREAM is set ,the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results."
0,0,"SSL_write will also return, when the underlying BIO could not satisfy the needs of SSL_write to continue the operation",1,,If the underlying BIO is non-blocking,"If the underlying BIO is non-blocking, SSL_write() will also return, when the underlying BIO could not satisfy the needs of SSL_write() to continue the operation","If the underlying BIO is non-blocking, SSL_write() will also return, when the underlying BIO could not satisfy the needs of SSL_write() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_write() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_write() can also cause read operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_write(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,it will be restored after the callback has finished and the session id will be padded with 0x00,,,null,"If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00","If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00. It is not recommended to change the id_len for SSLv2 sessions. The callback can use the SSL_get_version(3) function to check, whether the session is of type SSLv2."
0,0,uniqueness could easily be achieved without randomness added,,,"If the application codes eg a unique host id , a unique process number , and a unique sequence number into the session id","If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way)","Since the sessions must be distinguished, session ids must be unique. Without the callback a random number is used, so that the probability of generating the same session id is extremely small (2^128 possible ids for an SSLv2 session, 2^256 for SSLv3/TLSv1). In order to assure the uniqueness of the generated session id, the callback must call SSL_has_matching_session_id() and generate another id if a conflict occurs. If an id conflict is not resolved, the handshake will fail. If the application codes eg a unique host id, a unique process number, and a unique sequence number into the session id, uniqueness could easily be achieved without randomness added (it should however be taken care that no confidential information is leaked this way). If the application can not guarantee uniqueness, it is recommended to use the maximum id_len and fill in the bytes not used to code special information with random data to avoid collisions."
0,0,The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result function,,,null,The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result(3) function,"Client mode: if not using an anonymous cipher (by default disabled), the server will send a certificate which will be checked. The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result(3) function. The handshake will be continued regardless of the verification result."
0,0,This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation,,,null,This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation,This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications.
0,0,verify_callback is called with verify_callback_APIParam_1 = 1 before advancing to the next level,,,If no error is found for a certificate,"If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level","The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level."
0,0,It is called before a certificate will be used by a client or server,,,null,It is called before a certificate will be used by a client or server,"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
0,0,BN_GENCB_call is called after generating the i-th potential prime number,,,null,"BN_GENCB_call(cb, 0, i) is called after generating the i-th potential prime number","BN_GENCB_call(cb, 0, i) is called after generating the i-th potential prime number."
0,0,The subroutines in question instrument these references for purposes of gathering entropy for random number generator,,,null,The subroutines in question instrument these references for purposes of gathering entropy for random number generator,"It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations. The subroutines in question instrument these references for purposes of gathering entropy for random number generator. In order to make it bus-bound a 'flush cache line' instruction is used between probes. In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems. This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values)."
0,0,The error rate depends on the size of the prime and goes down for bigger primes,,,null,The error rate depends on the size of the prime and goes down for bigger primes,"Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations. If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input. The error rate depends on the size of the prime and goes down for bigger primes. The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits."
0,0,BN_GENCB_call is called after the j-th iteration,,,If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL,"If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_GENCB_call(cb, 1, j) is called after the j-th iteration (j = 0, 1, ...)","If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_GENCB_call(cb, 1, j) is called after the j-th iteration (j = 0, 1, ...). BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 is a pre-allocated BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 (to save the overhead of allocating and freeing the structure in a loop), or NULL."
0,0,a number of iterations is used that yields a false positive rate of at most 2 ^ -64 for random input,,,If nchecks == BN_prime_checks,"If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input","Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations. If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input. The error rate depends on the size of the prime and goes down for bigger primes. The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits."
0,0,a new random seed is chosen,,,If the given seed does not yield a prime q,"If the given seed does not yield a prime q, a new random seed is chosen","If DSA_generate_parameters_APIParam_2 is NULL or seed_len < 20, the primes will be generated at random. Otherwise, the seed is used to generate them. If the given seed does not yield a prime q, a new random seed is chosen."
0,0,the primes will be generated at random,,,If DSA_generate_parameters_APIParam_2 is NULL or seed_len < 20,"If DSA_generate_parameters_APIParam_2 is NULL or seed_len < 20, the primes will be generated at random","If DSA_generate_parameters_APIParam_2 is NULL or seed_len < 20, the primes will be generated at random. Otherwise, the seed is used to generate them. If the given seed does not yield a prime q, a new random seed is chosen."
0,0,SSL_shutdown will also return when the underlying BIO could not satisfy the needs of SSL_shutdown to continue the handshake,1,,If the underlying BIO is non-blocking,"If the underlying BIO is non-blocking, SSL_shutdown() will also return when the underlying BIO could not satisfy the needs of SSL_shutdown() to continue the handshake","If the underlying BIO is non-blocking, SSL_shutdown() will also return when the underlying BIO could not satisfy the needs of SSL_shutdown() to continue the handshake. In this case a call to SSL_get_error() with the return value of SSL_shutdown() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_shutdown(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate,,,null,Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate,SSL_CTX_set_current_cert() changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument. Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate. These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure.
0,0,After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections,,,null,After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections,"After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections. If no further connections will be accepted, the accept can be freed using BIO_free()."
0,0,The shutdown can also occur,,,if action is need to continue the operation for non-blocking BIOs,The shutdown can also occur if action is need to continue the operation for non-blocking BIOs,The shutdown was not successful because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown can also occur if action is need to continue the operation for non-blocking BIOs. Call SSL_get_error(3) with the return value ret to find out the reason.
0,0,A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1,,,null,A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,0,This method does not require any padding to 8 character groups,,,null,This method does not require any padding to 8 character groups,"DES_cfb_encrypt() encrypt/decrypts using cipher feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
0,0,The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes containing the length of the following encrypted data,,,null,The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes (in network byte order) containing the length of the following encrypted data,"DES_enc_write() writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2. The data is encrypted via pcbc_encrypt (default) using DES_enc_read_APIParam_4 for the key and iv as a starting vector. The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes (in network byte order) containing the length of the following encrypted data. The encrypted data then follows, padded with random data out to a multiple of 8 bytes."
0,0,"The encrypted data follows , padded with random data out to a multiple of 8 bytes",,,null,"The encrypted data then follows, padded with random data out to a multiple of 8 bytes","DES_enc_write() writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2. The data is encrypted via pcbc_encrypt (default) using DES_enc_read_APIParam_4 for the key and iv as a starting vector. The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes (in network byte order) containing the length of the following encrypted data. The encrypted data then follows, padded with random data out to a multiple of 8 bytes."
0,0,DES_cbc_encrypt does not modify ivec,,,null,DES_cbc_encrypt() does not modify ivec; use DES_ncbc_encrypt() instead,DES_cbc_encrypt() does not modify ivec; use DES_ncbc_encrypt() instead.
0,0,A RAND_set_rand_method_APIParam_1 specifies the functions that OpenSSL uses for random number generation,,,null,A RAND_set_rand_method_APIParam_1 specifies the functions that OpenSSL uses for random number generation,"A RAND_set_rand_method_APIParam_1 specifies the functions that OpenSSL uses for random number generation. By modifying the method, alternative implementations such as hardware RNGs may be used. IMPORTANT: See the NOTES section for important information about how these RAND API functions are affected by the use of ENGINE API calls."
0,0,The tmp_rsa_callback is called with the keylength needed and the is_export information,,,null,The tmp_rsa_callback is called with the keylength needed and the is_export information,"The tmp_rsa_callback is called with the keylength needed and the is_export information. The is_export flag is set, when the ephemeral RSA key exchange is performed with an export cipher."
0,0,"These macros , as well as those used for the `` doall '' callbacks , are defined as",,,null,"These macros, as well as those used for the ""doall"" callbacks, are defined as;","lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
0,0,"lh _ <type> _ doall will , for every entry in the hash table , call func with the data item as its parameter",,,null,"lh_<type>_doall() will, for every entry in the hash table, call func with the data item as its parameter","lh_<type>_doall() will, for every entry in the hash table, call func with the data item as its parameter. For lh_<type>_doall() and lh_<type>_doall_arg(), function pointer casting should be avoided in the callbacks (see NOTE) - instead use the declare/implement macros to create type-checked wrappers that cast variables prior to calling your type-specific callbacks. An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated:"
0,0,"Certificate matching is done based on the subject name , the key identifier , and the serial number as taken from the certificate to be verified",,,null,"Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified","When looking up CA certificates, the OpenSSL library will first search the certificates in SSL_CTX_load_verify_locations_APIParam_2, then those in CApath. Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified. If these data do not match, the next certificate will be tried. If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure."
0,0,The ways that d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 are incremented after the operation can trap the unwary,,,null,The ways that d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 are incremented after the operation can trap the unwary,The ways that d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 are incremented after the operation can trap the unwary. See the WARNINGS section for some common errors.
0,0,Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE,,,null,Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE,"Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE. In particular, SSL_read() or SSL_peek() may want to write data and SSL_write() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes."
0,0,Note that SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed,,,null,Note that in this case SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed,"The TLS/SSL connection has been closed. If the protocol version is SSL 3.0 or higher, this result code is returned only if a closure alert has occurred in the protocol, ie if the connection has been closed cleanly. Note that in this case SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed."
0,0,"The `` re '' in i2d_re_X509_tbs stands for `` re-encode '' , and ensures that a fresh encoding is generated in case the object has been modified after creation",,,null,"The ""re"" in i2d_re_X509_tbs stands for ""re-encode"", and ensures that a fresh encoding is generated in case the object has been modified after creation (see the BUGS section)","The letters i2d_re_X509_tbs_APIParam_2 d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 in for example i2d_X509 stand for ""internal"" (that is an internal C structure) and ""DER"". So i2d_X509 converts from internal to ""DER"". The ""re"" in i2d_re_X509_tbs stands for ""re-encode"", and ensures that a fresh encoding is generated in case the object has been modified after creation (see the BUGS section)."
0,0,There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level,,,null,There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level,"The operation did not complete; the same TLS/SSL I/O function should be called again later. If, by then, the underlying BIO has data available for reading (if the result code is SSL_ERROR_WANT_READ) or allows writing data (SSL_ERROR_WANT_WRITE), then some TLS/SSL protocol progress will take place, ie at least part of an TLS/SSL record will be read or written. Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition. There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level."
0,0,Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName,,,null,Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName,"BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer. This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero. It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName."
0,0,RAND_priv_bytes_APIName is intended to be used for generating values that should remain private,,,null,RAND_priv_bytes_APIName is intended to be used for generating values that should remain private,"RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName. RAND_priv_bytes_APIName is intended to be used for generating values that should remain private. If using the default RAND_METHOD, this function uses a separate ""private"" PRNG instance so that a compromise of the ""public"" PRNG instance will not affect the secrecy of these private values, as described in RAND_APIName and RAND_DRBG_APIName ."
0,0,This can be used to determine how much data should be written to the BIO so the next read will succeed,,,null,This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size,"BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer. This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero. It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName."
0,-1,UI_ctrl_APIName adds extra control for the application author,,,null,UI_ctrl_APIName adds extra control for the application author.,"UI_ctrl_APIName adds extra control for the application author. For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not."
0,-1,this will happen,,,if a session renegotiation takes place during a BIO_read_APIName operation,"Specifically this will happen if a session renegotiation takes place during a BIO_read_APIName operation, one case where this happens is when step up occurs.","SSL BIOs are exceptional in that if the underlying transport is non blocking SSL BIOs can still request a retry in exceptional circumstances. Specifically this will happen if a session renegotiation takes place during a BIO_read_APIName operation, one case where this happens is when step up occurs."
0,-1,"The standard macros are described below , macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls",,,null,"The standard macros are described below, macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls.","BIO_ctrl_APIName, BIO_callback_ctrl_APIName, BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO ""control"" operations taking arguments of various types. These functions are not normally called directly, various macros are used instead. The standard macros are described below, macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls."
0,-1,this could cause some entries to be skipped during the iteration.,1,,null,"When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration.","When doing this, be careful if you delete entries from the hash table in your callbacks: the table may decrease in size, moving the item that you are currently on down lower in the hash table - this could cause some entries to be skipped during the iteration. The second best solution to this problem is to set hash->down_load=0 before you start (which will stop the hash table ever decreasing in size). The best solution is probably to avoid deleting items from the hash table inside a ""doall"" callback!"
0,-1,Return values from the client callback are interpreted as follows,,,null,Return values from the client callback are interpreted as follows:,Return values from the client callback are interpreted as follows:
0,-1,This gives us a revised elliptic curve equation as follows,,,null,This gives us a revised elliptic curve equation as follows:,"Within the library there are two forms of elliptic curve that are of interest. The first form is those defined over the prime field Fp. The elements of Fp are the integers 0 to p-1, where p is a prime number. This gives us a revised elliptic curve equation as follows:"
0,-1,The following code illustrates how this can work,,,null,The following code illustrates how this can work;,"Here we'll assume we want to load and register all ENGINE implementations bundled with OpenSSL, such that for any cryptographic algorithm required by OpenSSL - if there is an ENGINE that implements it and can be initialised, it should be used. The following code illustrates how this can work;"
0,-1,These functions are typically called after X509_verify_cert_APIName has indicated an error or in a verification callback to determine the nature of an error,,,null,These functions are typically called after X509_verify_cert_APIName has indicated an error or in a verification callback to determine the nature of an error.,These functions are typically called after X509_verify_cert_APIName has indicated an error or in a verification callback to determine the nature of an error.
0,-1,The EC_builtin_curve structure is defined as follows,,,null,The EC_builtin_curve structure is defined as follows:,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,-1,Return values from the server callback are interpreted as follows,,,null,Return values from the server callback are interpreted as follows:,Return values from the server callback are interpreted as follows:
0,-1,This application guarantees that `` strong '' primes are used,,,null,"This application guarantees that ""strong"" primes are used.","As generating DH parameters is extremely time consuming, an application should not generate the parameters on the fly but supply the parameters. DH parameters can be reused, as the actual key is newly generated during the negotiation. The risk in reusing DH parameters is that an attacker may specialize on a very often used DH group. Applications should therefore generate their own DH parameters during the installation process using the openssl dhparam_APIName application. This application guarantees that ""strong"" primes are used."
0,-1,"This is , it does however not indicate success",,,null,"This is  , it does however not indicate success .","If no peer certificate was presented, the returned result code is X509_V_OK. This is because no verification error occurred, it does however not indicate success. SSL_get_verify_result_APIName is only useful in connection with SSL_get_peer_certificate_APIName ."
0,0,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation,,,null,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation.,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation. All other implementations are based on this one. EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery_APIName ). EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new_APIName ).
0,0,EVP_PKEY_set_alias_type_APIName allows modifying a EVP_PKEY to use a different set of algorithms than the default,,,null,EVP_PKEY_set_alias_type_APIName allows modifying a EVP_PKEY to use a different set of algorithms than the default.,"EVP_PKEY_set_alias_type_APIName allows modifying a EVP_PKEY to use a different set of algorithms than the default. This is currently used to support SM2 keys, which use an identical encoding to ECDSA."
0,0,any quirks in stdio behaviour will be mirrored by the corresponding BIO,,,null," , any quirks in stdio behaviour will be mirrored by the corresponding BIO .","Because the file BIO calls the underlying stdio functions, any quirks in stdio behaviour will be mirrored by the corresponding BIO."
0,0,X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2,,,null,X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2.,"X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2. The X509_VERIFY_PARAM_set1_ip_asc_APIParam_2 argument is a NUL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6. The condensed ""::"" notation is supported for IPv6 addresses."
0,0,EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication,,,null,EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery_APIName ).,For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation. All other implementations are based on this one. EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication (see BN_mod_mul_montgomery_APIName ). EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves (NIST curves are available through EC_GROUP_new_by_curve_name as described in EC_GROUP_new_APIName ).
0,0,d2i_ECPrivateKey generates the missing public key automatically,,,When reading a private key encoded without an associated public key,"When reading a private key encoded without an associated public key (eg if EC_PKEY_NO_PUBKEY has been used - see below), then d2i_ECPrivateKey generates the missing public key automatically.","When reading a private key encoded without an associated public key (eg if EC_PKEY_NO_PUBKEY has been used - see below), then d2i_ECPrivateKey generates the missing public key automatically. Private keys encoded without parameters (eg if EC_PKEY_NO_PARAMETERS has been used - see below) cannot be loaded using d2i_ECPrivateKey."
0,0,"A valid certificate was received , but",,,null,"A valid certificate was received, but when access control was applied, the sender decided not to proceed with negotiation.","A valid certificate was received, but when access control was applied, the sender decided not to proceed with negotiation. This message is always fatal."
0,0,the sender decided not to proceed with negotiation,,,when access control was applied,"A valid certificate was received, but when access control was applied, the sender decided not to proceed with negotiation.","A valid certificate was received, but when access control was applied, the sender decided not to proceed with negotiation. This message is always fatal."
0,0,X509_cmp_time_APIName compares the ASN1_TIME in X509_cmp_time_APIParam_1 with the time in <cmp_time>,,,null,X509_cmp_time_APIName compares the ASN1_TIME in X509_cmp_time_APIParam_1 with the time in <cmp_time>.,X509_cmp_time_APIName compares the ASN1_TIME in X509_cmp_time_APIParam_1 with the time in <cmp_time>.
0,0,The behaviour of SSL_accept_APIName depends on the underlying BIO,,,null,The behaviour of SSL_accept_APIName depends on the underlying BIO.,The behaviour of SSL_accept_APIName depends on the underlying BIO.
0,0,OBJ_cleanup_APIName releases any resources allocated by creating new objects,,,null,OBJ_cleanup_APIName releases any resources allocated by creating new objects.,OBJ_cleanup_APIName releases any resources allocated by creating new objects.
0,0,BIO_seek_APIName resets a file related BIO 's file position pointer to BIO_seek_APIParam_2 bytes from start of file,,,null,BIO_seek_APIName resets a file related BIO's (that is file descriptor and FILE BIOs) file position pointer to BIO_seek_APIParam_2 bytes from start of file.,BIO_seek_APIName resets a file related BIO's (that is file descriptor and FILE BIOs) file position pointer to BIO_seek_APIParam_2 bytes from start of file.
0,0,Setting the BIO_CLOSE flag calls fclose_APIName on the stream,,,when the BIO is freed,Setting the BIO_CLOSE flag calls fclose_APIName on the stream when the BIO is freed.,Setting the BIO_CLOSE flag calls fclose_APIName on the stream when the BIO is freed.
0,0,the error string is placed in a static buffer,,,If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL,"If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer.","ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1, and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2. ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 must be at least 120 bytes long. If ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 is NULL, the error string is placed in a static buffer. ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters (including the terminating 0) and truncates the string if necessary. For ERR_error_string_n_APIName, ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 may not be NULL."
0,0,EC_GROUP_method_of obtains the EC_METHOD of EC_GROUP_set_generator_APIParam_1 EC_GROUP_set_curve_name_APIParam_1 EC_GROUP_get_degree_APIParam_1 EC_GROUP_get_cofactor_APIParam_1 EC_GROUP_method_of_APIParam_1 EC_GROUP_get_order_APIParam_1 EC_GROUP_check_APIParam_1 EC_GROUP_set_point_conversion_form_APIParam_1 EC_GROUP_get_curve_name_APIParam_1 EC_GROUP_set_asn1_flag_APIParam_1 EC_GROUP_get_asn1_flag_APIParam_1 EC_GROUP_get0_generator_APIParam_1 EC_GROUP_check_discriminant_APIParam_1,,,null,EC_GROUP_method_of obtains the EC_METHOD of EC_GROUP_set_generator_APIParam_1 EC_GROUP_set_curve_name_APIParam_1 EC_GROUP_get_degree_APIParam_1 EC_GROUP_get_cofactor_APIParam_1 EC_GROUP_method_of_APIParam_1 EC_GROUP_get_order_APIParam_1 EC_GROUP_check_APIParam_1 EC_GROUP_set_point_conversion_form_APIParam_1 EC_GROUP_get_curve_name_APIParam_1 EC_GROUP_set_asn1_flag_APIParam_1 EC_GROUP_get_asn1_flag_APIParam_1 EC_GROUP_get0_generator_APIParam_1 EC_GROUP_check_discriminant_APIParam_1.,EC_GROUP_method_of obtains the EC_METHOD of EC_GROUP_set_generator_APIParam_1 EC_GROUP_set_curve_name_APIParam_1 EC_GROUP_get_degree_APIParam_1 EC_GROUP_get_cofactor_APIParam_1 EC_GROUP_method_of_APIParam_1 EC_GROUP_get_order_APIParam_1 EC_GROUP_check_APIParam_1 EC_GROUP_set_point_conversion_form_APIParam_1 EC_GROUP_get_curve_name_APIParam_1 EC_GROUP_set_asn1_flag_APIParam_1 EC_GROUP_get_asn1_flag_APIParam_1 EC_GROUP_get0_generator_APIParam_1 EC_GROUP_check_discriminant_APIParam_1.
0,0,SSL_CTX_set_default_passwd_cb_APIName sets the default password callback called,,,when loading/storing a PEM certificate with encryption,SSL_CTX_set_default_passwd_cb_APIName sets the default password callback called when loading/storing a PEM certificate with encryption.,SSL_CTX_set_default_passwd_cb_APIName sets the default password callback called when loading/storing a PEM certificate with encryption.
0,0,SSL_SESSION objects are allocated,,,when a TLS/SSL handshake operation is successfully completed,"SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared,,,null,Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared.,SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2.
0,0,"The condensed ""::"" notation is supported for IPv6 addresses.",,,null,"The condensed ""::"" notation is supported for IPv6 addresses.","X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2. The X509_VERIFY_PARAM_set1_ip_asc_APIParam_2 argument is a NUL-terminal ASCII string: dotted decimal quad for IPv4 and colon-separated hexadecimal for IPv6. The condensed ""::"" notation is supported for IPv6 addresses."
0,0,Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions_APIName function,,,null,Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions_APIName function.,"Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions_APIName function. Since this may lead to a delay which cannot be controlled, the automatic flushing may be disabled and SSL_CTX_flush_sessions_APIName can be called explicitly by the application."
0,0,i2d_CMS_bio_stream_APIName outputs a CMS_ContentInfo structure in BER format,,,null,i2d_CMS_bio_stream_APIName outputs a CMS_ContentInfo structure in BER format.,i2d_CMS_bio_stream_APIName outputs a CMS_ContentInfo structure in BER format.
0,0,the ALPN callback is not invoked,,,If there is no ALPN proposed in the ClientHello,"If there is no ALPN proposed in the ClientHello, the ALPN callback is not invoked.","If there is no ALPN proposed in the ClientHello, the ALPN callback is not invoked."
0,0,SSL objects may be using the SSL_SESSION object,,,null,"SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2,,,null,Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2.,SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2. Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared. Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2.
0,0,"Other methods may make a difference between them , however",,,null,"Other methods may make a difference between them, however.","UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string. The difference between the two is only conceptual. With the builtin method, there's no technical difference between them. Other methods may make a difference between them, however."
0,0,The OpenSSL error queue contains more information on the error,,,null,The OpenSSL error queue contains more information on the error.,"A non-recoverable, fatal error in the SSL library occurred, usually a protocol error. The OpenSSL error queue contains more information on the error. If this error occurs, then no further I/O operations should be performed on the connection and SSL_shutdown_APIName must not be called."
0,0,X509_VERIFY_PARAM_set_depth_APIName sets the maximum verification depth to X509_VERIFY_PARAM_set_depth_APIParam_2,,,null,X509_VERIFY_PARAM_set_depth_APIName sets the maximum verification depth to X509_VERIFY_PARAM_set_depth_APIParam_2.,X509_VERIFY_PARAM_set_depth_APIName sets the maximum verification depth to X509_VERIFY_PARAM_set_depth_APIParam_2. That is the maximum number of untrusted CA certificates that can appear in a chain.
0,0,CMS_SignerInfo_get0_signature_APIName retrieves the signature associated with CMS_SignerInfo_get0_signature_APIParam_1 in a pointer to an ASN1_OCTET_STRING structure,,,null,CMS_SignerInfo_get0_signature_APIName retrieves the signature associated with CMS_SignerInfo_get0_signature_APIParam_1 in a pointer to an ASN1_OCTET_STRING structure.,CMS_SignerInfo_get0_signature_APIName retrieves the signature associated with CMS_SignerInfo_get0_signature_APIParam_1 in a pointer to an ASN1_OCTET_STRING structure. This pointer returned corresponds to the internal signature value if CMS_SignerInfo_get0_signature_APIParam_1 so it may be read or modified.
0,0,The behaviour of SSL_write_APIName depends on the underlying BIO,,,null,The behaviour of SSL_write_APIName depends on the underlying BIO.,"If necessary, SSL_write_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_write_APIName operation. The behaviour of SSL_write_APIName depends on the underlying BIO."
0,0,"With the builtin method , there 's no technical difference between them",,,null,"With the builtin method, there's no technical difference between them.","UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string. The difference between the two is only conceptual. With the builtin method, there's no technical difference between them. Other methods may make a difference between them, however."
0,0,BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables,,,null,BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables.,"BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation when the operation will be performed repeatedly with the same modulus. It computes BN_mod_mul_reciprocal_APIParam_1=(BN_mod_mul_reciprocal_APIParam_2*BN_mod_mul_reciprocal_APIParam_3)%BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4=1/BN_RECP_CTX_set_APIParam_2, which is set as described below. BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables."
0,0,This removal is not synchronized with the expiration of sessions,,,null,This removal is not synchronized with the expiration of sessions.,"If the size of the session cache is reduced and more sessions are already in the session cache, old session will be removed at the next time a session shall be added. This removal is not synchronized with the expiration of sessions."
0,0,it will be performed transparently during the SSL_write_APIName operation,,,If the peer requests a re-negotiation,"If the peer requests a re-negotiation, it will be performed transparently during the SSL_write_APIName operation.","If necessary, SSL_write_APIName will negotiate a TLS/SSL session, if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName . If the peer requests a re-negotiation, it will be performed transparently during the SSL_write_APIName operation. The behaviour of SSL_write_APIName depends on the underlying BIO."
0,0,"The X509_check_ip_APIParam_2 array is in binary format , in network byte order",,,null,"The X509_check_ip_APIParam_2 array is in binary format, in network byte order.","X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address. The X509_check_ip_APIParam_2 array is in binary format, in network byte order. The length is either 4 (IPv4) or 16 (IPv6). Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored."
0,0,BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation,,,when the operation will be performed repeatedly with the same modulus,BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation when the operation will be performed repeatedly with the same modulus.,"BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation when the operation will be performed repeatedly with the same modulus. It computes BN_mod_mul_reciprocal_APIParam_1=(BN_mod_mul_reciprocal_APIParam_2*BN_mod_mul_reciprocal_APIParam_3)%BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4=1/BN_RECP_CTX_set_APIParam_2, which is set as described below. BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables."
0,0,BN_is_odd_APIName tests if a is odd,1,,null,BN_is_odd_APIName tests if a is odd.,"BN_is_zero_APIName, BN_is_one_APIName and BN_is_word_APIName test if BN_is_zero_APIParam_1 BN_is_one_APIParam_1 BN_is_word_APIParam_1 BN_is_odd_APIParam_1 equals 0, 1, or BN_is_word_APIParam_2 respectively. BN_is_odd_APIName tests if a is odd."
0,0,"eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation.",1,,null,"These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation.","SSL_SESSION objects are allocated, when a TLS/SSL handshake operation is successfully completed. Depending on the settings, see SSL_CTX_set_session_cache_mode_APIName , the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache. SSL objects may be using the SSL_SESSION object; as a session may be reused, several SSL objects may be using one SSL_SESSION object at the same time. It is therefore crucial to keep the reference count (usage information) correct and not delete a SSL_SESSION object that is still used, as this may lead to program failures due to dangling pointers. These failures may also appear delayed, eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation."
0,0,BIO_free_APIName will be called,,,If there was already a BIO connected to SSL_set_fd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_rfd_APIParam_1,"If there was already a BIO connected to SSL_set_fd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_rfd_APIParam_1, BIO_free_APIName will be called (for both the reading and writing side, if different).","If there was already a BIO connected to SSL_set_fd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_rfd_APIParam_1, BIO_free_APIName will be called (for both the reading and writing side, if different)."
0,0,it sends an alert,,,When one side of an SSL/TLS communication wants to inform the peer about a special situation,"When one side of an SSL/TLS communication wants to inform the peer about a special situation, it sends an alert.","When one side of an SSL/TLS communication wants to inform the peer about a special situation, it sends an alert. The alert is sent as a special message and does not influence the normal data stream (unless its contents results in the communication being canceled)."
0,0,BN_gcd_APIParam_1 may be the same BN_gcd_APIParam_1 as BN_gcd_APIParam_2 or BN_gcd_APIParam_3,,,null,BN_gcd_APIParam_1 may be the same BN_gcd_APIParam_1 as BN_gcd_APIParam_2 or BN_gcd_APIParam_3.,BN_gcd_APIName computes the greatest common divisor of BN_gcd_APIParam_2 and BN_gcd_APIParam_3 and places the result in BN_gcd_APIParam_1. BN_gcd_APIParam_1 may be the same BN_gcd_APIParam_1 as BN_gcd_APIParam_2 or BN_gcd_APIParam_3.
0,0,the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter,,,If EVP_DigestSignFinal_APIParam_2 is NULL,"If EVP_DigestSignFinal_APIParam_2 is NULL, then the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter.","EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2. If EVP_DigestSignFinal_APIParam_2 is NULL, then the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter. If EVP_DigestSignFinal_APIParam_2 is not NULL ,then before the call the EVP_DigestSignFinal_APIParam_3 parameter should contain the length of the EVP_DigestSignFinal_APIParam_2 buffer, if the call is successful ,the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3."
0,0,ERR_get_next_error_library_APIName can be used to assign library numbers to user libraries at runtime,,,null,ERR_get_next_error_library_APIName can be used to assign library numbers to user libraries at runtime.,ERR_get_next_error_library_APIName can be used to assign library numbers to user libraries at runtime.
0,0,PSK identity was not found,,,null,PSK identity was not found.,"PSK identity was not found. An ""unknown_psk_identity"" alert message will be sent and the connection setup fails."
0,0,Only explicitly marked addresses in the certificates are considered,,,null,Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored.,"X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address. The X509_check_ip_APIParam_2 array is in binary format, in network byte order. The length is either 4 (IPv4) or 16 (IPv6). Only explicitly marked addresses in the certificates are considered; IP addresses stored in DNS names and Common Names are ignored."
0,0,The function SSL_CONF_CTX_clear_flags_APIName clears SSL_CONF_CTX_clear_flags_APIParam_2 in the context SSL_CONF_CTX_clear_flags_APIParam_1,,,null,The function SSL_CONF_CTX_clear_flags_APIName clears SSL_CONF_CTX_clear_flags_APIParam_2 in the context SSL_CONF_CTX_clear_flags_APIParam_1.,The function SSL_CONF_CTX_clear_flags_APIName clears SSL_CONF_CTX_clear_flags_APIParam_2 in the context SSL_CONF_CTX_clear_flags_APIParam_1.
0,0,The index value to access the pointer,,,null,The index value to access the pointer.,The index value to access the pointer.
0,0,Options already set before are not cleared,,,null,Options already set before are not cleared.,SSL_CTX_set_mode_APIName adds the mode set via bitmask in SSL_CTX_set_mode_APIParam_2 to SSL_CTX_set_mode_APIParam_1. Options already set before are not cleared.
0,0,Versions prior to 0.9.3 have identifiers < 0x0930,,,null,Versions prior to 0.9.3 have identifiers < 0x0930.,Versions prior to 0.9.3 have identifiers < 0x0930. Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation:
0,0,ASN1_OBJECT_new_APIName allocates and initializes a ASN1_OBJECT structure,,,null,ASN1_OBJECT_new_APIName allocates and initializes a ASN1_OBJECT structure.,ASN1_OBJECT_new_APIName allocates and initializes a ASN1_OBJECT structure.
0,0,Several options can be ored together,,,null,Several options can be ored together.,Several options can be ored together.
0,0,DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1,,,null,DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1.,"DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1. This will replace the DH_METHOD used by the DH key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DH keys that only work with certain DH_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DH_METHOD for the key can have unexpected results."
0,0,BIO_flush_APIName on a file BIO calls the fflush_APIName function on the wrapped stream,,,null,BIO_flush_APIName on a file BIO calls the fflush_APIName function on the wrapped stream.,BIO_flush_APIName on a file BIO calls the fflush_APIName function on the wrapped stream.
0,0,the following,,,null,Therefore the following:,The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure. Therefore the following:
0,0,Otherwise the type of PKCS7_type_APIParam_0 can be determined using PKCS7_type_APIName,,,null,Otherwise the type of  PKCS7_type_APIParam_0  can be determined using PKCS7_type_APIName,Otherwise the type of  PKCS7_type_APIParam_0  can be determined using PKCS7_type_APIName
0,0,The NET format functions are present to provide compatibility with certain very old software,,,null,The NET format functions are present to provide compatibility with certain very old software.,The NET format functions are present to provide compatibility with certain very old software. This format has some severe security weaknesses and should be avoided if possible.
8,0,There is no session available in SSL_get_session_APIParam_1 SSL_get1_session_APIParam_1 SSL_get0_session_APIParam_1,,,null,There is no session available in SSL_get_session_APIParam_1 SSL_get1_session_APIParam_1 SSL_get0_session_APIParam_1.,There is no session available in SSL_get_session_APIParam_1 SSL_get1_session_APIParam_1 SSL_get0_session_APIParam_1.
0,0,After the call to EVP_PKEY_verify_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation,,,null,After the call to EVP_PKEY_verify_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.,After the call to EVP_PKEY_verify_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation.
0,0,SMIME_read_CMS_APIParam_1 is a BIO to read the message from,,,null,SMIME_read_CMS_APIParam_1 is a BIO to read the message from.,SMIME_read_CMS_APIParam_1 is a BIO to read the message from.
0,0,"Right now RSA_check_key_APIName simply uses the RSA structure elements directly , bypassing the RSA_METHOD table altogether",,,null,"Right now RSA_check_key_APIName simply uses the RSA structure elements directly, bypassing the RSA_METHOD table altogether (and completely violating encapsulation and object-orientation in the process).","A method of verifying the RSA key using opaque RSA API functions might need to be considered. Right now RSA_check_key_APIName simply uses the RSA structure elements directly, bypassing the RSA_METHOD table altogether (and completely violating encapsulation and object-orientation in the process). The best fix will probably be to introduce a ""check_key_APIName"" handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers."
0,0,The specific information is kept,,,when SSL_clear_APIName is called for this SSL object,"The specific information is kept, when SSL_clear_APIName is called for this SSL object.","The SSL_* class of functions only loads certificates and keys into a specific SSL object. The specific information is kept, when SSL_clear_APIName is called for this SSL object."
0,0,BIO_set_nbio_accept_APIName sets the accept socket to blocking mode ,1,,if BIO_set_nbio_accept_APIParam_2 is 0,BIO_set_nbio_accept_APIName sets the accept socket to blocking mode (the default) if BIO_set_nbio_accept_APIParam_2 is 0 or non blocking mode if BIO_set_nbio_accept_APIParam_2 is 1.,BIO_set_nbio_accept_APIName sets the accept socket to blocking mode (the default) if BIO_set_nbio_accept_APIParam_2 is 0 or non blocking mode if BIO_set_nbio_accept_APIParam_2 is 1.
0,0,BIO_set_nbio_accept_APIName sets the accept socket to non blocking mode,1,,if BIO_set_nbio_accept_APIParam_2 is 1.,BIO_set_nbio_accept_APIName sets the accept socket to blocking mode (the default) if BIO_set_nbio_accept_APIParam_2 is 0 or non blocking mode if BIO_set_nbio_accept_APIParam_2 is 1.,BIO_set_nbio_accept_APIName sets the accept socket to blocking mode (the default) if BIO_set_nbio_accept_APIParam_2 is 0 or non blocking mode if BIO_set_nbio_accept_APIParam_2 is 1.
0,0,"SSL_CTX_select_current_cert_APIName selects SSL_CTX_select_current_cert_APIParam_2 as the current end entity certificate , but only",,,if SSL_CTX_select_current_cert_APIParam_2 has already been loaded into SSL_CTX_select_current_cert_APIParam_1 using a function such as SSL_CTX_use_certificate_APIName,"SSL_CTX_select_current_cert_APIName selects SSL_CTX_select_current_cert_APIParam_2 as the current end entity certificate, but only if SSL_CTX_select_current_cert_APIParam_2 has already been loaded into SSL_CTX_select_current_cert_APIParam_1 using a function such as SSL_CTX_use_certificate_APIName.","SSL_CTX_select_current_cert_APIName selects SSL_CTX_select_current_cert_APIParam_2 as the current end entity certificate, but only if SSL_CTX_select_current_cert_APIParam_2 has already been loaded into SSL_CTX_select_current_cert_APIParam_1 using a function such as SSL_CTX_use_certificate_APIName."
0,0,OPENSSL_load_builtin_modules_APIName is called automatically,,,If the simple configuration function OPENSSL_config_APIName is called,"If the simple configuration function OPENSSL_config_APIName is called , then OPENSSL_load_builtin_modules_APIName is called automatically.","If the simple configuration function OPENSSL_config_APIName is called , then OPENSSL_load_builtin_modules_APIName is called automatically."
0,0,The behaviour of SSL_connect_APIName depends on the underlying BIO,,,null,The behaviour of SSL_connect_APIName depends on the underlying BIO.,The behaviour of SSL_connect_APIName depends on the underlying BIO.
0,0,SSL_library_init_APIName registers the available SSL/TLS ciphers and digests,,,null,SSL_library_init_APIName registers the available SSL/TLS ciphers and digests.,SSL_library_init_APIName registers the available SSL/TLS ciphers and digests.
0,0,this can be readily worked around by converting the buffers to memory BIOs,,,null,"Currently all the functions use BIOs or FILE pointers, there are no functions which work directly on memory: this can be readily worked around by converting the buffers to memory BIOs, see BIO_s_mem_APIName for details.","Currently all the functions use BIOs or FILE pointers, there are no functions which work directly on memory: this can be readily worked around by converting the buffers to memory BIOs, see BIO_s_mem_APIName for details."
0,0,These functions implement Montgomery multiplication,,,null,These functions implement Montgomery multiplication.,"These functions implement Montgomery multiplication. These functions are used automatically when BN_mod_exp_APIName is called with suitable input, but These functions may be useful when several operations are to be performed using the same modulus."
0,0,Buffering BIOs implement BIO_gets_APIName by using BIO_read_APIName operations on the next BIO in the chain,,,null,Buffering BIOs implement BIO_gets_APIName by using BIO_read_APIName operations on the next BIO in the chain.,Buffering BIOs implement BIO_gets_APIName by using BIO_read_APIName operations on the next BIO in the chain. By prepending a buffering BIO to a chain it is therefore possible to provide BIO_gets_APIName functionality if the following BIOs do not support it (for example SSL BIOs).
0,0,recognise options intended for use in SSL/TLS clients or servers,,,null,recognise options intended for use in SSL/TLS clients or servers.,recognise options intended for use in SSL/TLS clients or servers. One or both of these flags must be set.
0,0,This function is effectively a version of the PEM_write_bio_CMS_APIName supporting streaming,,,null,This function is effectively a version of the PEM_write_bio_CMS_APIName supporting streaming.,This function is effectively a version of the PEM_write_bio_CMS_APIName supporting streaming.
0,0,SMIME_read_PKCS7_APIName parses a message in S/MIME format,,,null,SMIME_read_PKCS7_APIName parses a message in S/MIME format.,SMIME_read_PKCS7_APIName parses a message in S/MIME format.
0,0,For every 4 input bytes exactly 3 output bytes will be produced,,,null,For every 4 input bytes exactly 3 output bytes will be produced.,"EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
0,0,Normally the current time is used,,,null,Normally the current time is used.,X509_VERIFY_PARAM_set_time_APIName sets the verification time in X509_VERIFY_PARAM_set_time_APIParam_1 to X509_VERIFY_PARAM_set_time_APIParam_2. Normally the current time is used.
0,0,SSL_SESSION_free_APIName is called once for SSL_CTX_remove_session_APIParam_2,,,null,SSL_SESSION_free_APIName is called once for SSL_CTX_remove_session_APIParam_2.,SSL_CTX_remove_session_APIName removes the session SSL_CTX_remove_session_APIParam_2 from the context SSL_CTX_remove_session_APIParam_1. SSL_SESSION_free_APIName is called once for SSL_CTX_remove_session_APIParam_2.
0,0,X509_NAME_print_APIName prints out X509_NAME_print_APIParam_2 to X509_NAME_print_APIParam_1 indenting each line by X509_NAME_print_APIParam_3 characters,,,null,X509_NAME_print_APIName prints out X509_NAME_print_APIParam_2 to X509_NAME_print_APIParam_1 indenting each line by X509_NAME_print_APIParam_3 characters.,X509_NAME_print_APIName prints out X509_NAME_print_APIParam_2 to X509_NAME_print_APIParam_1 indenting each line by X509_NAME_print_APIParam_3 characters. Multiple lines are used if the output (including indent) exceeds 80 characters.
0,0,DSA_generate_parameters_APIParam_0 will be called as shown below,,,If DSA_generate_parameters_APIParam_0 is not NULL,"If DSA_generate_parameters_APIParam_0 is not NULL, DSA_generate_parameters_APIParam_0 will be called as shown below.","A callback function may be used to provide feedback about the progress of the key generation. If DSA_generate_parameters_APIParam_0 is not NULL, DSA_generate_parameters_APIParam_0 will be called as shown below. For information on the BN_GENCB structure and the BN_GENCB_call function discussed below, refer to BN_generate_prime_APIName ."
0,0,X509_VERIFY_PARAM_set_time_APIName sets the verification time in X509_VERIFY_PARAM_set_time_APIParam_1 to X509_VERIFY_PARAM_set_time_APIParam_2,,,null,X509_VERIFY_PARAM_set_time_APIName sets the verification time in X509_VERIFY_PARAM_set_time_APIParam_1 to X509_VERIFY_PARAM_set_time_APIParam_2.,X509_VERIFY_PARAM_set_time_APIName sets the verification time in X509_VERIFY_PARAM_set_time_APIParam_1 to X509_VERIFY_PARAM_set_time_APIParam_2. Normally the current time is used.
0,0,a password might be supplied to protect the private key,,,When loading or storing private keys,"When loading or storing private keys, a password might be supplied to protect the private key.","When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored."
0,0,BUF_MEM_grow_APIName changes the size of an already existing buffer to BUF_MEM_grow_APIParam_2,,,null,BUF_MEM_grow_APIName changes the size of an already existing buffer to BUF_MEM_grow_APIParam_2.,BUF_MEM_grow_APIName changes the size of an already existing buffer to BUF_MEM_grow_APIParam_2. Any data already in the buffer is preserved if it increases in size.
0,0,SSL_CTX_remove_session_APIName removes the session SSL_CTX_remove_session_APIParam_2 from the context SSL_CTX_remove_session_APIParam_1,,,null,SSL_CTX_remove_session_APIName removes the session SSL_CTX_remove_session_APIParam_2 from the context SSL_CTX_remove_session_APIParam_1.,SSL_CTX_remove_session_APIName removes the session SSL_CTX_remove_session_APIParam_2 from the context SSL_CTX_remove_session_APIParam_1. SSL_SESSION_free_APIName is called once for SSL_CTX_remove_session_APIParam_2.
0,0,SSL_add_client_CA_APIName adds,,,null,"SSL_add_client_CA_APIName adds the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object.","SSL_add_client_CA_APIName adds the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object."
0,0,These functions load `` serverinfo '' TLS ServerHello Extensions into the SSL_CTX,,,null,"These functions load ""serverinfo"" TLS ServerHello Extensions into the SSL_CTX.","These functions load ""serverinfo"" TLS ServerHello Extensions into the SSL_CTX. A ""serverinfo"" extension is returned in response to an empty ClientHello Extension."
0,0,the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client,,,"when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1 , overriding the setting valid for SSL_add_client_CA_APIParam_1 's SSL_CTX object","SSL_add_client_CA_APIName adds the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object.","SSL_add_client_CA_APIName adds the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object."
0,0,These functions initialise an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_set0_param_APIParam_1 structure for subsequent use by X509_verify_cert_APIName,,,null,These functions initialise an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_set0_param_APIParam_1 structure for subsequent use by X509_verify_cert_APIName.,These functions initialise an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_set0_param_APIParam_1 structure for subsequent use by X509_verify_cert_APIName.
0,0,the highest preference curve is automatically used for ECDH temporary keys used during key exchange,,,If SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2 is 1,"If SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2 is 1, then the highest preference curve is automatically used for ECDH temporary keys used during key exchange.","SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName set automatic curve selection for server SSL_CTX_set_ecdh_auto_APIParam_1 or SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1 to SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2. If SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2 is 1, then the highest preference curve is automatically used for ECDH temporary keys used during key exchange."
0,0,Any data already in the buffer is preserved,,,if it increases in size,Any data already in the buffer is preserved if it increases in size.,BUF_MEM_grow_APIName changes the size of an already existing buffer to BUF_MEM_grow_APIParam_2. Any data already in the buffer is preserved if it increases in size.
0,0,The data are received in records,,,null,The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1).,"SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,No certificate was presented by the peer or no connection was established or the certificate chain is no longer available ,1,,when a session is reused.,No certificate was presented by the peer or no connection was established or the certificate chain is no longer available when a session is reused.,No certificate was presented by the peer or no connection was established or the certificate chain is no longer available when a session is reused.
0,0,SSL_read_APIName works based on the SSL/TLS records,,,null,SSL_read_APIName works based on the SSL/TLS records.,"SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,ERR_clear_error_APIName empties the current thread 's error queue,,,null,ERR_clear_error_APIName empties the current thread's error queue.,ERR_clear_error_APIName empties the current thread's error queue.
0,0,This function is used by Kerberos v4,,,null,This function is used by Kerberos v4.,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream (via CBC encryption). The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2. This function is used by Kerberos v4. Other applications should use EVP_DigestInit_APIName etc. instead.
0,0,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream,,,null,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream (via CBC encryption).,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream (via CBC encryption). The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2. This function is used by Kerberos v4. Other applications should use EVP_DigestInit_APIName etc. instead.
0,0,These are the version-flexible DTLS methods,,,null,These are the version-flexible DTLS methods.,These are the version-flexible DTLS methods.
0,0,d2i_X509_fp_APIName is similar to d2i_X509_APIName except d2i_X509_fp_APIName attempts to parse data from FILE pointer d2i_X509_fp_APIParam_1,,,null,d2i_X509_fp_APIName is similar to d2i_X509_APIName except d2i_X509_fp_APIName attempts to parse data from FILE pointer d2i_X509_fp_APIParam_1.,d2i_X509_fp_APIName is similar to d2i_X509_APIName except d2i_X509_fp_APIName attempts to parse data from FILE pointer d2i_X509_fp_APIParam_1.
0,0,These functions are used automatically,,,when BN_mod_exp_APIName is called with suitable input,"These functions are used automatically when BN_mod_exp_APIName is called with suitable input, but These functions may be useful when several operations are to be performed using the same modulus.","These functions implement Montgomery multiplication. These functions are used automatically when BN_mod_exp_APIName is called with suitable input, but These functions may be useful when several operations are to be performed using the same modulus."
0,0,Check the error queue to find out the reason,,,null,Check the error queue to find out the reason.,The operation failed. Check the error queue to find out the reason.
0,0,the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes is placed in a static array.,1,,If RIPEMD160_Final_APIParam_1 is NULL,"If RIPEMD160_Final_APIParam_1 is NULL, the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes is placed in a static array.","RIPEMD160_APIName computes the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes at RIPEMD160_APIParam_1 and places the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes in RIPEMD160_Final_APIParam_1 (which must have space for RIPEMD160_DIGEST_LENGTH == 20 bytes of output). If RIPEMD160_Final_APIParam_1 is NULL, the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes is placed in a static array."
0,0,EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed,,,when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 is freed,"EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 is freed.","EVP_PKEY_assign_RSA_APIName, EVP_PKEY_assign_DSA_APIName, EVP_PKEY_assign_DH_APIName, EVP_PKEY_assign_EC_KEY_APIName, EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed when the parent EVP_PKEY_assign_RSA_APIParam_1 EVP_PKEY_assign_DSA_APIParam_1 EVP_PKEY_assign_DH_APIParam_1 EVP_PKEY_assign_EC_KEY_APIParam_1 EVP_PKEY_assign_POLY1305_APIParam_1 EVP_PKEY_assign_SIPHASH_APIParam_1 is freed."
0,0,All currently supported protocols have the same default timeout value of 300 seconds,,,null,All currently supported protocols have the same default timeout value of 300 seconds.,"The default value for session timeout is decided on a per protocol basis, see SSL_get_default_timeout_APIName . All currently supported protocols have the same default timeout value of 300 seconds."
0,0,EC_group_get_curve_GFp obtains the previously set curve parameters,,,null,EC_group_get_curve_GFp obtains the previously set curve parameters.,"EC_GROUP_set_curve_GFp sets the curve parameters EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2, EC_GROUP_get_curve_GF2m_APIParam_3 EC_GROUP_new_curve_GFp_APIParam_2 EC_GROUP_get_curve_GFp_APIParam_3 EC_GROUP_new_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GF2m_APIParam_3 EC_GROUP_set_curve_GFp_APIParam_3 and EC_GROUP_get_curve_GF2m_APIParam_4 EC_GROUP_new_curve_GFp_APIParam_3 EC_GROUP_get_curve_GFp_APIParam_4 EC_GROUP_new_curve_GF2m_APIParam_3 EC_GROUP_set_curve_GF2m_APIParam_4 EC_GROUP_set_curve_GFp_APIParam_4 for a curve over Fp stored in EC_GROUP_get_curve_GF2m_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GFp_APIParam_1 EC_GROUP_clear_free_APIParam_1 EC_GROUP_free_APIParam_1. EC_group_get_curve_GFp obtains the previously set curve parameters."
0,0,The ALPN callback is executed after the servername callback,,,null,"The ALPN callback is executed after the servername callback; as that servername callback may update the SSL_CTX, and subsequently, the ALPN callback.","The ALPN callback is executed after the servername callback; as that servername callback may update the SSL_CTX, and subsequently, the ALPN callback."
0,0,ENGINE_add_conf_module_APIName adds just the ENGINE configuration module,,,null,ENGINE_add_conf_module_APIName adds just the ENGINE configuration module.,ENGINE_add_conf_module_APIName adds just the ENGINE configuration module.
0,0,EVP_PKEY_meth_find_APIName finds an EVP_PKEY_meth_find_APIParam_0 object with the EVP_PKEY_meth_new_APIParam_1,,,null,EVP_PKEY_meth_find_APIName finds an EVP_PKEY_meth_find_APIParam_0 object with the EVP_PKEY_meth_new_APIParam_1.,EVP_PKEY_meth_find_APIName finds an EVP_PKEY_meth_find_APIParam_0 object with the EVP_PKEY_meth_new_APIParam_1. This function first searches through the user-defined method objects and then the built-in objects.
0,0,No session caching for client or server takes place,,,null,No session caching for client or server takes place.,No session caching for client or server takes place.
0,0,The default value for session timeout is decided on a per protocol basis,,,null,"The default value for session timeout is decided on a per protocol basis, see SSL_get_default_timeout_APIName .","The default value for session timeout is decided on a per protocol basis, see SSL_get_default_timeout_APIName . All currently supported protocols have the same default timeout value of 300 seconds."
0,0,SSL_CTX_use_serverinfo_APIName loads one or more serverinfo extensions from a byte array into SSL_CTX_use_serverinfo_APIParam_1,,,null,SSL_CTX_use_serverinfo_APIName loads one or more serverinfo extensions from a byte array into SSL_CTX_use_serverinfo_APIParam_1.,"SSL_CTX_use_serverinfo_APIName loads one or more serverinfo extensions from a byte array into SSL_CTX_use_serverinfo_APIParam_1. The extensions must be concatenated into a sequence of bytes. Each extension must consist of a 2-byte Extension Type, a 2-byte length, and then length bytes of extension_data."
0,0,SSL_set_accept_state_APIName sets SSL_set_accept_state_APIParam_1 to work in server mode,,,null,SSL_set_accept_state_APIName sets SSL_set_accept_state_APIParam_1 to work in server mode.,SSL_set_accept_state_APIName sets SSL_set_accept_state_APIParam_1 to work in server mode.
0,0,BN_mod_mul_montgomery_APIName computes Mont,,,null,"BN_mod_mul_montgomery_APIName computes Mont(BN_mod_mul_montgomery_APIParam_2,BN_mod_mul_montgomery_APIParam_3):=BN_mod_mul_montgomery_APIParam_2*BN_mod_mul_montgomery_APIParam_3*R^-1 and places the result in BN_mod_mul_montgomery_APIParam_1.","BN_mod_mul_montgomery_APIName computes Mont(BN_mod_mul_montgomery_APIParam_2,BN_mod_mul_montgomery_APIParam_3):=BN_mod_mul_montgomery_APIParam_2*BN_mod_mul_montgomery_APIParam_3*R^-1 and places the result in BN_mod_mul_montgomery_APIParam_1."
0,0,BIO_reset_APIName attempts to change the file pointer to the start of file using lseek,,,null,"BIO_reset_APIName attempts to change the file pointer to the start of file using lseek(fd, 0, 0).","BIO_reset_APIName attempts to change the file pointer to the start of file using lseek(fd, 0, 0)."
0,0,SSL_SESSION_set_ex_data_APIName is used to store application data at SSL_SESSION_set_ex_data_APIParam_3 for SSL_SESSION_set_ex_data_APIParam_2 into the SSL_SESSION_set_ex_data_APIParam_1 object,,,null,SSL_SESSION_set_ex_data_APIName is used to store application data at SSL_SESSION_set_ex_data_APIParam_3 for SSL_SESSION_set_ex_data_APIParam_2 into the SSL_SESSION_set_ex_data_APIParam_1 object.,SSL_SESSION_set_ex_data_APIName is used to store application data at SSL_SESSION_set_ex_data_APIParam_3 for SSL_SESSION_set_ex_data_APIParam_2 into the SSL_SESSION_set_ex_data_APIParam_1 object.
0,0,"SSL_get1_session_APIName is the same as SSL_get_session_APIName , but the reference count of the SSL_get1_session_APIParam_0 SSL_get_session_APIParam_0 is incremented by one",,,null,"SSL_get1_session_APIName is the same as SSL_get_session_APIName, but the reference count of the SSL_get1_session_APIParam_0 SSL_get_session_APIParam_0 is incremented by one.","SSL_get1_session_APIName is the same as SSL_get_session_APIName, but the reference count of the SSL_get1_session_APIParam_0 SSL_get_session_APIParam_0 is incremented by one."
0,0,In addition a number options can be set for commonly used formats,,,null,In addition a number options can be set for commonly used formats.,In addition a number options can be set for commonly used formats.
0,0,BIO_reset_APIName and BIO_seek_APIName are implemented using fseek_APIName on the underlying stream,,,null,BIO_reset_APIName and BIO_seek_APIName are implemented using fseek_APIName on the underlying stream.,BIO_reset_APIName and BIO_seek_APIName are implemented using fseek_APIName on the underlying stream. The return value for fseek_APIName is 0 for success or -1 if an error occurred this differs from other types of BIO which will typically return 1 for success and a non positive value if an error occurred.
0,0,SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items,,,if applicable,"SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items, if applicable: the session cache, the list of ciphers, the list of Client CAs, the certificates and keys.","SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items, if applicable: the session cache, the list of ciphers, the list of Client CAs, the certificates and keys."
0,0,Calling BIO_reset_APIName on a read write memory BIO clears any data in it,,,null,Calling BIO_reset_APIName on a read write memory BIO clears any data in it.,Calling BIO_reset_APIName on a read write memory BIO clears any data in it. On a read only BIO it restores the BIO to its original state and the read only data can be read again.
0,0,SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1,,,null,SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1.,"SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1. The formatting SSL_CTX_use_certificate_file_APIParam_3 SSL_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1. See the NOTES section on why SSL_CTX_use_certificate_chain_file_APIName should be preferred."
0,0,SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1,,,null,SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1.,"SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1. The formatting SSL_CTX_use_certificate_file_APIParam_3 SSL_use_certificate_file_APIParam_3 of the certificate must be specified from the known types SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1. SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1. See the NOTES section on why SSL_CTX_use_certificate_chain_file_APIName should be preferred."
0,0,"In a similar way, some functions will automatically release the structural reference passed to it",1,,if part of the function 's job is to do so,"In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so.","It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned. Eg. the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName. In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so. Eg. the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller."
0,0,X509_VERIFY_PARAM X509_STORE_CTX_get0_param_APIName retrieves an intenal pointer to the verification parameters associated with X509_STORE_CTX_get0_param_APIParam_1,,,null,X509_VERIFY_PARAM *X509_STORE_CTX_get0_param_APIName retrieves an intenal pointer to the verification parameters associated with X509_STORE_CTX_get0_param_APIParam_1.,X509_VERIFY_PARAM *X509_STORE_CTX_get0_param_APIName retrieves an intenal pointer to the verification parameters associated with X509_STORE_CTX_get0_param_APIParam_1.
0,0,the encoding is automatically renewed,,,"If , after modification , the i2d_re_X509_tbs_APIParam_1 object is re-signed with X509_sign_APIName","If, after modification, the i2d_re_X509_tbs_APIParam_1 object is re-signed with X509_sign_APIName, the encoding is automatically renewed.","If, after modification, the i2d_re_X509_tbs_APIParam_1 object is re-signed with X509_sign_APIName, the encoding is automatically renewed. Otherwise, the encoding of the TBSCertificate portion of the i2d_re_X509_tbs_APIParam_1 can be manually renewed by calling i2d_re_X509_tbs_APIName."
0,0,ERR_load_strings_APIParam_2 is an array of error string data,,,null,ERR_load_strings_APIParam_2 is an array of error string data:,ERR_load_strings_APIParam_2 is an array of error string data:
0,0,The evp_APIName library provides higher-level encryption functions,,,null,The evp_APIName library provides higher-level encryption functions.,The evp_APIName library provides higher-level encryption functions.
0,0,ASN1_STRING_free_APIName frees up ASN1_STRING_free_APIParam_1,,,null,ASN1_STRING_free_APIName frees up ASN1_STRING_free_APIParam_1.,ASN1_STRING_free_APIName frees up ASN1_STRING_free_APIParam_1.
0,0,But all certificates complying with RFC5280 et al use GMT anyway,,,null,But all certificates complying with RFC5280 et al use GMT anyway.,"ASN1_TIME_print_APIName currently does not print out the time zone: ASN1_TIME_print_APIName either prints out ""GMT"" or nothing. But all certificates complying with RFC5280 et al use GMT anyway."
0,0,BIO_eof_APIName calls feof_APIName,,,null,BIO_eof_APIName calls feof_APIName.,BIO_eof_APIName calls feof_APIName.
0,0,"HMAC_APIParam_1 can be EVP_sha1_APIName , EVP_ripemd160_APIName etc",,,null,"HMAC_APIParam_1 can be EVP_sha1_APIName, EVP_ripemd160_APIName etc.","HMAC_APIParam_1 can be EVP_sha1_APIName, EVP_ripemd160_APIName etc."
0,0,The CMS_add1_ReceiptRequest_APIName function adds a signed receipt request CMS_add1_ReceiptRequest_APIParam_2 to SignerInfo structure CMS_add1_ReceiptRequest_APIParam_1,,,null,The CMS_add1_ReceiptRequest_APIName function adds a signed receipt request CMS_add1_ReceiptRequest_APIParam_2 to SignerInfo structure CMS_add1_ReceiptRequest_APIParam_1.,The CMS_add1_ReceiptRequest_APIName function adds a signed receipt request CMS_add1_ReceiptRequest_APIParam_2 to SignerInfo structure CMS_add1_ReceiptRequest_APIParam_1.
0,0,ERR_load_strings_APIName registers error strings for library number ERR_load_strings_APIParam_1,,,null,ERR_load_strings_APIName registers error strings for library number ERR_load_strings_APIParam_1.,ERR_load_strings_APIName registers error strings for library number ERR_load_strings_APIParam_1.
0,0,The file can contain several CA certificates identified by,,,null,The file can contain several CA certificates identified by,"If SSL_CTX_load_verify_locations_APIParam_2 is not NULL, it points to a file of CA certificates in PEM format. The file can contain several CA certificates identified by"
0,0,The data may be left unmodified or translated,,,null,The data may be left unmodified (for example a message digest BIO) or translated (for example an encryption BIO).,"A filter BIO takes data from one BIO and passes it through to another, or the application. The data may be left unmodified (for example a message digest BIO) or translated (for example an encryption BIO). The effect of a filter BIO may change according to the I/O operation it is performing: for example an encryption BIO will encrypt data if it is being written to and decrypt data if it is being read from."
0,0,A null sink BIO behaves in a similar manner to the Unix / dev/null device,,,null,A null sink BIO behaves in a similar manner to the Unix /dev/null device.,A null sink BIO behaves in a similar manner to the Unix /dev/null device.
0,0,Encoding of binary data is performed in blocks of 48 input bytes,,,null,Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block).,"Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output."
0,0,"Otherwise , the encoding of the TBSCertificate portion of the i2d_re_X509_tbs_APIParam_1 can be manually renewed by calling i2d_re_X509_tbs_APIName",,,null,"Otherwise, the encoding of the TBSCertificate portion of the i2d_re_X509_tbs_APIParam_1 can be manually renewed by calling i2d_re_X509_tbs_APIName.","If, after modification, the i2d_re_X509_tbs_APIParam_1 object is re-signed with X509_sign_APIName, the encoding is automatically renewed. Otherwise, the encoding of the TBSCertificate portion of the i2d_re_X509_tbs_APIParam_1 can be manually renewed by calling i2d_re_X509_tbs_APIName."
0,0,X509_VERIFY_PARAM_clear_flags_APIName clears the flags X509_VERIFY_PARAM_set_flags_APIParam_2 in X509_VERIFY_PARAM_clear_flags_APIParam_1,,,null,X509_VERIFY_PARAM_clear_flags_APIName clears the flags X509_VERIFY_PARAM_set_flags_APIParam_2 in X509_VERIFY_PARAM_clear_flags_APIParam_1.,X509_VERIFY_PARAM_clear_flags_APIName clears the flags X509_VERIFY_PARAM_set_flags_APIParam_2 in X509_VERIFY_PARAM_clear_flags_APIParam_1.
0,0,"A new curve can be constructed by calling EC_GROUP_new , using the implementation provided by EC_GROUP_new_APIParam_1",,,null,"A new curve can be constructed by calling EC_GROUP_new, using the implementation provided by EC_GROUP_new_APIParam_1 (see EC_GFp_simple_method_APIName ).","A new curve can be constructed by calling EC_GROUP_new, using the implementation provided by EC_GROUP_new_APIParam_1 (see EC_GFp_simple_method_APIName ). It is then necessary to call either EC_GROUP_set_curve_GFp or EC_GROUP_set_curve_GF2m as appropriate to create a curve defined over Fp or over F2^m respectively."
0,0,Both are NULL-terminated,,,null,Both are NULL-terminated.,"If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity. Both are NULL-terminated. SSL_get_psk_identity_hint_APIName may return NULL if no PSK identity hint was used during the connection setup."
0,0,The final block will output 4 bytes for every 3 bytes of input,,,null,The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input.,"Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output."
0,0,it points to a file of CA certificates in PEM format,,,If SSL_CTX_load_verify_locations_APIParam_2 is not NULL,"If SSL_CTX_load_verify_locations_APIParam_2 is not NULL, it points to a file of CA certificates in PEM format.","If SSL_CTX_load_verify_locations_APIParam_2 is not NULL, it points to a file of CA certificates in PEM format. The file can contain several CA certificates identified by"
0,0,no certificates are sent,,,If an anonymous cipher is used,"If an anonymous cipher is used, no certificates are sent.","Due to the protocol definition, a TLS/SSL server will always send a certificate, if present. A client will only send a certificate when explicitly requested to do so by the server (see SSL_CTX_set_verify_APIName ). If an anonymous cipher is used, no certificates are sent."
0,0,The Elliptic Curve library provides a number of different implementations through a single common interface,,,null,The Elliptic Curve library provides a number of different implementations through a single common interface.,The Elliptic Curve library provides a number of different implementations through a single common interface. When constructing a curve using EC_GROUP_new (see EC_GROUP_new_APIName ) an implementation method must be provided. The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW. It is important that the correct implementation type for the form of curve selected is used.
0,0,"By generating a temporary RSA key inside the server application that is lost , it becomes impossible for an attacker to decrypt past sessions ,  .",1,,when the application is left,"By generating a temporary RSA key inside the server application that is lost when the application is left , it becomes impossible for an attacker to decrypt past sessions ,  .","Using ephemeral RSA key exchange yields forward secrecy, as the connection can only be decrypted, when the RSA key is known. By generating a temporary RSA key inside the server application that is lost when the application is left, it becomes impossible for an attacker to decrypt past sessions, even if he gets hold of the normal (certified) RSA key, as this key was used for signing only. The downside is that creating a RSA key is computationally expensive."
0,0,the hardcoded default timeout for the protocol will be used,,,If the timeout value was not explicitly set using SSL_CTX_set_timeout_APIName,"If the timeout value was not explicitly set using SSL_CTX_set_timeout_APIName , the hardcoded default timeout for the protocol will be used.","Whenever a new session is negotiated, a new session is assigned a timeout value, after which a new session will not be accepted for session reuse. If the timeout value was not explicitly set using SSL_CTX_set_timeout_APIName , the hardcoded default timeout for the protocol will be used."
0,0,"Due to the protocol definition , a TLS/SSL server will always send a certificate",,,if present,"Due to the protocol definition, a TLS/SSL server will always send a certificate, if present.","Due to the protocol definition, a TLS/SSL server will always send a certificate, if present. A client will only send a certificate when explicitly requested to do so by the server (see SSL_CTX_set_verify_APIName ). If an anonymous cipher is used, no certificates are sent."
0,0,The format of the external representation of the public key written by i2d_ECPrivateKey is described by the point_conversion_form,,,null,The format of the external representation of the public key written by i2d_ECPrivateKey (such as whether it is stored in a compressed form or not) is described by the point_conversion_form.,The format of the external representation of the public key written by i2d_ECPrivateKey (such as whether it is stored in a compressed form or not) is described by the point_conversion_form. See EC_GROUP_copy_APIName for a description of point_conversion_form.
0,0,a full 4 bytes is still output for the final 1 or 2 bytes of input,,,If the data length is not divisible by 3,"If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input.","Encoding of binary data is performed in blocks of 48 input bytes (or less for the final block). For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character (ie 65 bytes in total). The final block (which may be less than 48 bytes) will output 4 bytes for every 3 bytes of input. If the data length is not divisible by 3 ,then a full 4 bytes is still output for the final 1 or 2 bytes of input. Similarly a newline character will also be output."
0,0,The application data is not included,,,when dumping the session with i2d_SSL_SESSION_APIName and can not be restored,The application data is not included when dumping the session with i2d_SSL_SESSION_APIName (and all functions indirectly calling the dump functions like PEM_write_SSL_SESSION_APIName and PEM_write_bio_SSL_SESSION_APIName) and can therefore not be restored.,The application data is only maintained for sessions held in memory. The application data is not included when dumping the session with i2d_SSL_SESSION_APIName (and all functions indirectly calling the dump functions like PEM_write_SSL_SESSION_APIName and PEM_write_bio_SSL_SESSION_APIName) and can therefore not be restored.
0,0,This is often undesirable however,,,null,This is often undesirable however  .,"If only a single connection will be processed ,it is possible to perform I/O using the accept BIO itself. This is often undesirable however because the accept BIO will still accept additional incoming connections. This can be resolved by using BIO_pop_APIName (see above) and freeing up the accept BIO after the initial connection."
0,0,Refer to EC_GROUP_copy_APIName for further information on the asn1_flag,,,null,Refer to EC_GROUP_copy_APIName for further information on the asn1_flag.,EC_KEY_set_asn1_flag sets the asn1_flag on the underlying EC_GROUP object (if set). Refer to EC_GROUP_copy_APIName for further information on the asn1_flag.
0,0,SSL_CTX_set_session_cache_mode_APIName enables/disables session caching by setting the operational mode for SSL_CTX_set_session_cache_mode_APIParam_1 to <mode>,,,null,SSL_CTX_set_session_cache_mode_APIName enables/disables session caching by setting the operational mode for SSL_CTX_set_session_cache_mode_APIParam_1 to <mode>.,SSL_CTX_set_session_cache_mode_APIName enables/disables session caching by setting the operational mode for SSL_CTX_set_session_cache_mode_APIParam_1 to <mode>.
0,0,The EVP library provides a high-level interface to cryptographic functions,,,null,The EVP library provides a high-level interface to cryptographic functions.,The EVP library provides a high-level interface to cryptographic functions.
0,0,EC_KEY_set_asn1_flag sets the asn1_flag on the underlying EC_GROUP object,,,null,EC_KEY_set_asn1_flag sets the asn1_flag on the underlying EC_GROUP object (if set).,EC_KEY_set_asn1_flag sets the asn1_flag on the underlying EC_GROUP object (if set). Refer to EC_GROUP_copy_APIName for further information on the asn1_flag.
0,0,The EVP cipher routines are a high level interface to certain symmetric ciphers,,,null,The EVP cipher routines are a high level interface to certain symmetric ciphers.,The EVP cipher routines are a high level interface to certain symmetric ciphers.
0,0,ASN1_TIME_print_APIName prints out the time ASN1_TIME_print_APIParam_2 to BIO ASN1_TIME_print_APIParam_1 in human readable format,,,null,ASN1_TIME_print_APIName prints out the time ASN1_TIME_print_APIParam_2 to BIO ASN1_TIME_print_APIParam_1 in human readable format.,"ASN1_TIME_print_APIName prints out the time ASN1_TIME_print_APIParam_2 to BIO ASN1_TIME_print_APIParam_1 in human readable format. BIO ASN1_TIME_print_APIParam_1 will be of the format MMM DD HH:MM:SS YYYY [GMT], for example ""Feb 3 00:55:52 2015 GMT"" it does not include a newline. If the time structure has invalid format, ASN1_TIME_print_APIName prints out ""Bad time value"" and returns an error."
0,0,The creation of a new SSL_CTX object failed,,,null,The creation of a new SSL_CTX object failed.,The creation of a new SSL_CTX object failed. Check the error stack to find out the reason.
0,0,The length-prefix byte is not included in the length,,,null,The length-prefix byte is not included in the length.,"The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
0,0,An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue,,,null,An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue (such as a memory allocation failure).,An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue (such as a memory allocation failure). This message is always fatal.
0,0,Some BIO types may place additional information on the error queue,,,null,Some BIO types may place additional information on the error queue.,"If BIO_should_retry_APIName returns false ,then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation. For example if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false then the cause will be that the connection closed. A similar condition on a file BIO will mean that it has reached EOF. Some BIO types may place additional information on the error queue. For more details see the individual BIO type manual pages."
0,0,Callback has been called to indicate state change inside a loop,,,null,Callback has been called to indicate state change inside a loop.,Callback has been called to indicate state change inside a loop.
0,0,X509_STORE_CTX_set_error_APIName sets the error code of X509_STORE_CTX_set_error_APIParam_1 to X509_STORE_CTX_set_error_APIParam_2,,,null,X509_STORE_CTX_set_error_APIName sets the error code of X509_STORE_CTX_set_error_APIParam_1 to X509_STORE_CTX_set_error_APIParam_2.,X509_STORE_CTX_set_error_APIName sets the error code of X509_STORE_CTX_set_error_APIParam_1 to X509_STORE_CTX_set_error_APIParam_2. For example it might be used in a verification callback to set an error based on additional checks.
0,0,The connection uses the TLSv1 .2 protocol,,,null,The connection uses the TLSv1.2 protocol.,The connection uses the TLSv1.2 protocol.
0,0,"The length of the vector is not in the vector itself , but in a separate variable",,,null,"The length of the vector is not in the vector itself, but in a separate variable.","The protocol-lists must be in wire-format, which is defined as a vector of non-empty, 8-bit length-prefixed, byte strings. The length-prefix byte is not included in the length. Each string is limited to 255 bytes. A byte-string length of 0 is invalid. A truncated byte-string is invalid. The length of the vector is not in the vector itself, but in a separate variable."
0,0,This data is treated as a `` black box '' by the ec library,,,null,"This data is treated as a ""black box"" by the ec library.","EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object. This data is treated as a ""black box"" by the ec library. The data to be stored by EC_KEY_insert_key_method_data is provided in the EC_KEY_insert_key_method_data_APIParam_2 parameter, which must have associated functions for duplicating, freeing and ""clear_freeing"" the data item. If a subsequent EC_KEY_get_key_method_data call is issued, the functions for duplicating, freeing and ""clear_freeing"" the data item must be provided again, and they must be the same as they were when the data item was inserted."
0,0,it might be used in a verification callback to set an error based on additional checks,,,null,For example it might be used in a verification callback to set an error based on additional checks.,X509_STORE_CTX_set_error_APIName sets the error code of X509_STORE_CTX_set_error_APIParam_1 to X509_STORE_CTX_set_error_APIParam_2. For example it might be used in a verification callback to set an error based on additional checks.
0,0,it is possible to perform I/O using the accept BIO itself,,,If only a single connection will be processed,"If only a single connection will be processed ,it is possible to perform I/O using the accept BIO itself.","If only a single connection will be processed ,it is possible to perform I/O using the accept BIO itself. This is often undesirable however because the accept BIO will still accept additional incoming connections. This can be resolved by using BIO_pop_APIName (see above) and freeing up the accept BIO after the initial connection."
0,0,A complete description of the process is contained in the verify_APIName manual page,,,null,A complete description of the process is contained in the verify_APIName manual page.,The X509_verify_cert_APIName function attempts to discover and validate a certificate chain based on parameters in X509_verify_cert_APIParam_1. A complete description of the process is contained in the verify_APIName manual page.
0,0,extra chain certificates are sent in order following the end entity certificate,,,When sending a certificate chain,"When sending a certificate chain, extra chain certificates are sent in order following the end entity certificate.","When sending a certificate chain, extra chain certificates are sent in order following the end entity certificate."
0,0,They can be useful for debugging,,,null,They can be useful for debugging.,CRYPTO_lock_APIParam_3 and CRYPTO_lock_APIParam_4 are the file number of the function setting the lock. They can be useful for debugging.
0,0,"Those methods are usually used to perform different jobs , such as generating a key , signing or verifying , encrypting or decrypting , etc",,,null,"Those methods are usually used to perform different jobs, such as generating a key, signing or verifying, encrypting or decrypting, etc.","EVP_PKEY_meth_set_sign_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 is a structure which holds a set of methods for a specific public key cryptographic algorithm. Those methods are usually used to perform different jobs, such as generating a key, signing or verifying, encrypting or decrypting, etc."
0,0,This is an inherent weakness in the PKCS # 1 v1 .5 padding design,,,null,This is an inherent weakness in the PKCS #1 v1.5 padding design.,Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer RSA_PKCS1_OAEP_PADDING.
0,0,The EVP envelope routines are a high level interface to envelope decryption,,,null,The EVP envelope routines are a high level interface to envelope decryption.,The EVP envelope routines are a high level interface to envelope decryption. The EVP envelope routines decrypt a public key encrypted symmetric key and then decrypt data using a public key encrypted symmetric key.
0,0,The connection uses the TLSv1 .0 protocol,,,null,The connection uses the TLSv1.0 protocol.,The connection uses the TLSv1.0 protocol.
0,0,The server looks up the session in its cache,,,null,The server then looks up the session in its cache.,"During the negotiation, a client can propose to reuse a session. The server then looks up the session in its cache. If both client and server agree on the session, it will be reused and a flag is being set that can be queried by the application."
0,0,OBJ_create_APIName adds a new object to the internal table,,,null,OBJ_create_APIName adds a new object to the internal table.,"OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object in case of success and NID_undef in case of failure."
0,0,PKCS12_create_APIName creates a PKCS # 12 structure,,,null,PKCS12_create_APIName creates a PKCS#12 structure.,PKCS12_create_APIName creates a PKCS#12 structure.
0,0,Some clients violate this rule by adapting to the server 's answer,,,null,Some clients violate this rule by adapting to the server's answer.,"During the client key exchange, the client must send the same information about acceptable SSL/TLS protocol levels as during the first hello. Some clients violate this rule by adapting to the server's answer. (Example: the client sends a SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only understands up to SSLv3. In this case the client must still use the same SSLv3.1=TLSv1 announcement. Some clients step down to SSLv3 with respect to the server's answer and violate the version rollback protection.)"
0,0,The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method,,,null,The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method.,"The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method. The methods exist in a generic type (for client and server use), a server only type, and a client only type. SSL_CTX_new_APIParam_1 can be of the following types:"
0,0,EVP_des_ede3_cbc_APIName is the algorithm of choice for S/MIME use,,,null,EVP_des_ede3_cbc_APIName is the algorithm of choice for S/MIME use  .,EVP_des_ede3_cbc_APIName (triple DES) is the algorithm of choice for S/MIME use because most clients will support it.
0,0,a client can propose to reuse a session,,,During the negotiation,"During the negotiation, a client can propose to reuse a session.","During the negotiation, a client can propose to reuse a session. The server then looks up the session in its cache. If both client and server agree on the session, it will be reused and a flag is being set that can be queried by the application."
0,0,the SSL_write_APIName operation is considered completed,,,null,In this case the SSL_write_APIName operation is considered completed.,"SSL_write_APIName will only return with success, when the complete contents of SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 SSL_write_APIParam_2 of length SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 SSL_write_APIParam_3 has been written. This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName . When this flag is set, SSL_write_APIName will also return with success, when a partial write has been successfully completed. In this case the SSL_write_APIName operation is considered completed. The bytes are sent and a new SSL_write_APIName operation with a new buffer (with the already sent bytes removed) must be started. A partial write is performed with the size of a message block, which is 16kB for SSLv3/TLSv1."
0,0,the OpenSSL library will have the COMP_zlib_APIName compression method available,,,If enabled during compilation,"If enabled during compilation, the OpenSSL library will have the COMP_zlib_APIName compression method available.","If enabled during compilation, the OpenSSL library will have the COMP_zlib_APIName compression method available."
0,0,EVP_PKEY_CTX_free_APIName frees up the context EVP_PKEY_CTX_free_APIParam_1,,,null,EVP_PKEY_CTX_free_APIName frees up the context EVP_PKEY_CTX_free_APIParam_1.,EVP_PKEY_CTX_free_APIName frees up the context EVP_PKEY_CTX_free_APIParam_1.
0,0,it will override any temporary ECDH parameters set by a server,,,If set,If set it will override any temporary ECDH parameters set by a server.,The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client. If set it will override any temporary ECDH parameters set by a server. Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName. Newer applications should just call:
0,0,that is,,,if the total data length is not a multiple of the block size,"If padding is disabled, then EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size.","If padding is disabled, then EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size."
0,0,Its state can be saved in a seed file to avoid having to go through the seeding process,1,,whenever the application is started,Its state can be saved in a seed file (see RAND_load_file_APIName ) to avoid having to go through the seeding process whenever the application is started.,A cryptographic PRNG must be seeded with unpredictable data such as mouse movements or keys pressed at random by the user. This is described in RAND_add_APIName . Its state can be saved in a seed file (see RAND_load_file_APIName ) to avoid having to go through the seeding process whenever the application is started.
0,0,The lack of single pass processing means that,,,null,The lack of single pass processing means that the signed content must all be held in memory if the signed content is not detached.,The lack of single pass processing means that the signed content must all be held in memory if the signed content is not detached.
0,0,Padding is always added,,,so if the data is already a multiple of the block size EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 will equal the block size,Padding is always added so if the data is already a multiple of the block size EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 will equal the block size.,PKCS padding works by adding EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 padding bytes of value EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 to make the total length of the encrypted data a multiple of the block size. Padding is always added so if the data is already a multiple of the block size EVP_EncryptFinal_APIParam_2 EVP_DecryptFinal_APIParam_2 EVP_DecryptInit_ex_APIParam_2 EVP_DecryptInit_APIParam_2 EVP_CipherInit_ex_APIParam_2 EVP_CipherFinal_ex_APIParam_2 EVP_CipherUpdate_APIParam_2 EVP_CipherFinal_APIParam_2 EVP_CIPHER_CTX_set_padding_APIParam_2 EVP_get_cipherbyname_APIParam_1 EVP_EncryptInit_ex_APIParam_2 EVP_CIPHER_CTX_ctrl_APIParam_2 EVP_DecryptFinal_ex_APIParam_2 EVP_CipherInit_APIParam_2 EVP_EncryptInit_APIParam_2 EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 EVP_CIPHER_CTX_set_key_length_APIParam_2 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_2 will equal the block size. For example if the block size is 8 and 11 bytes are to be encrypted then 5 padding bytes of value 5 will be added.
0,0,d2i_X509_APIParam_2 d2i_X509_AUX_APIParam_2 is incremented to the byte following the parsed data,,,If the call is successful,"If the call is successful, d2i_X509_APIParam_2 d2i_X509_AUX_APIParam_2 is incremented to the byte following the parsed data.","If the call is successful, d2i_X509_APIParam_2 d2i_X509_AUX_APIParam_2 is incremented to the byte following the parsed data."
0,0,"d2i_SSL_SESSION_APIName transforms the external ASN1 representation of an SSL/TLS session , stored as binary data at location d2i_SSL_SESSION_APIParam_2 with length d2i_SSL_SESSION_APIParam_3 , into an SSL_SESSION object",,,null,"d2i_SSL_SESSION_APIName transforms the external ASN1 representation of an SSL/TLS session, stored as binary data at location d2i_SSL_SESSION_APIParam_2 with length d2i_SSL_SESSION_APIParam_3, into an SSL_SESSION object.","d2i_SSL_SESSION_APIName transforms the external ASN1 representation of an SSL/TLS session, stored as binary data at location d2i_SSL_SESSION_APIParam_2 with length d2i_SSL_SESSION_APIParam_3, into an SSL_SESSION object."
0,0,SSL_CTX_get_options_APIName returns the options set for SSL_CTX_get_options_APIParam_1,,,null,SSL_CTX_get_options_APIName returns the options set for SSL_CTX_get_options_APIParam_1.,SSL_CTX_get_options_APIName returns the options set for SSL_CTX_get_options_APIParam_1.
0,0,SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1,,,null,SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1.,SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1. SSL_get_version_APIName should only be called after the initial handshake has been completed. Prior to that the results returned from this function may be unreliable.
0,0,OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure,1,,null,OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure or NULL if OCSP_resp_get0_APIParam_2 is out of range.,OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure or NULL if OCSP_resp_get0_APIParam_2 is out of range.
0,0,PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added ,1,,null,PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.,PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.
0,0,SSL_CTX_get_verify_mode_APIName returns the verification mode currently set in SSL_CTX_get_verify_mode_APIParam_1,,,null,SSL_CTX_get_verify_mode_APIName returns the verification mode currently set in SSL_CTX_get_verify_mode_APIParam_1.,SSL_CTX_get_verify_mode_APIName returns the verification mode currently set in SSL_CTX_get_verify_mode_APIParam_1.
0,0,"RSA_PKCS1_SSLeay_APIName, RSA_PKCS1_null_method_APIName, RSA_get_default_method_APIName and RSA_get_method_APIName return pointers to the respective RSA_METHODs",,,null,"RSA_PKCS1_SSLeay_APIName, RSA_PKCS1_null_method_APIName, RSA_get_default_method_APIName and RSA_get_method_APIName return pointers to the respective RSA_METHODs.","RSA_PKCS1_SSLeay_APIName, RSA_PKCS1_null_method_APIName, RSA_get_default_method_APIName and RSA_get_method_APIName return pointers to the respective RSA_METHODs."
0,0,BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string,1,,null,"BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string, or NULL on error.","BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string, or NULL on error. BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created."
0,0,CMS_get0_signers_APIName returns all signers,1,,null,CMS_get0_signers_APIName returns all signers or NULL if an error occurred.,CMS_get0_signers_APIName returns all signers or NULL if an error occurred.
0,0,SSL_alert_type_string_long_APIName returns a string indicating the type of the alert specified by SSL_alert_type_string_long_APIParam_1,,,null,SSL_alert_type_string_long_APIName returns a string indicating the type of the alert specified by SSL_alert_type_string_long_APIParam_1.,SSL_alert_type_string_long_APIName returns a string indicating the type of the alert specified by SSL_alert_type_string_long_APIParam_1.
0,0,bn_div_words divides the two word number  by bn_div_words_APIParam_3 bn_dump_APIParam_1 and returns the result,,,null,"bn_div_words(bn_div_words_APIParam_1, bn_div_words_APIParam_2 bn_mul_high_APIParam_4, bn_div_words_APIParam_3 bn_dump_APIParam_1) divides the two word number (bn_div_words_APIParam_1,bn_div_words_APIParam_2 bn_mul_high_APIParam_4) by bn_div_words_APIParam_3 bn_dump_APIParam_1 and returns the result.","bn_div_words(bn_div_words_APIParam_1, bn_div_words_APIParam_2 bn_mul_high_APIParam_4, bn_div_words_APIParam_3 bn_dump_APIParam_1) divides the two word number (bn_div_words_APIParam_1,bn_div_words_APIParam_2 bn_mul_high_APIParam_4) by bn_div_words_APIParam_3 bn_dump_APIParam_1 and returns the result."
0,0,SSL_CTX_set_timeout_APIName returns the previously set timeout value,,,null,SSL_CTX_set_timeout_APIName returns the previously set timeout value.,SSL_CTX_set_timeout_APIName returns the previously set timeout value.
0,0,Otherwise DH_new_method_APIName returns a pointer to the newly allocated structure,,,null,Otherwise DH_new_method_APIName returns a pointer to the newly allocated structure.,DH_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise DH_new_method_APIName returns a pointer to the newly allocated structure.
0,0,X509_getm_notBefore_APIName and X509_getm_notAfter_APIName are similar to X509_get0_notBefore_APIName and X509_get0_notAfter_APIName except X509_getm_notBefore_APIName and X509_getm_notAfter_APIName return non-constant mutable references to the associated date field of the certificate,,,null,X509_getm_notBefore_APIName and X509_getm_notAfter_APIName are similar to X509_get0_notBefore_APIName and X509_get0_notAfter_APIName except X509_getm_notBefore_APIName and X509_getm_notAfter_APIName return non-constant mutable references to the associated date field of the certificate.,X509_getm_notBefore_APIName and X509_getm_notAfter_APIName are similar to X509_get0_notBefore_APIName and X509_get0_notAfter_APIName except X509_getm_notBefore_APIName and X509_getm_notAfter_APIName return non-constant mutable references to the associated date field of the certificate.
0,0,"UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not",,,null,"For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not.","UI_ctrl_APIName adds extra control for the application author. For now, it understands two commands: UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not."
0,0,ASN1_STRING_new_APIName returns an allocated ASN1_STRING_new_APIParam_0 structure,,,null,ASN1_STRING_new_APIName returns an allocated ASN1_STRING_new_APIParam_0 structure.,ASN1_STRING_new_APIName returns an allocated ASN1_STRING_new_APIParam_0 structure. ASN1_STRING_new_APIName type is undefined.
0,0,BIO_get_write_buf_size_APIName returns the size of the write buffer,,,null,BIO_get_write_buf_size_APIName returns the size of the write buffer.,BIO_get_write_buf_size_APIName returns the size of the write buffer.
0,0,i2d_SSL_SESSION_APIName returns the size of the ASN1 representation in bytes,,,null,i2d_SSL_SESSION_APIName returns the size of the ASN1 representation in bytes.,"i2d_SSL_SESSION_APIName returns the size of the ASN1 representation in bytes. When the session is not valid, 0 is returned and no operation is performed."
0,0,BIO_set_cipher_APIName does not return a value,,,null,BIO_set_cipher_APIName does not return a value.,BIO_set_cipher_APIName does not return a value.
0,0,"ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the library name, function name and reason string respectively",,,null,"ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the library name, function name and reason string respectively.","ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the library name, function name and reason string respectively."
0,0,RSA_free_APIName returns no value,,,null,RSA_free_APIName returns no value.,RSA_free_APIName returns no value.
0,0,"For an unknown SSLeay_version_APIParam_1, the text ""not available"" is returned",,,null,"For an unknown SSLeay_version_APIParam_1, the text ""not available"" is returned.","For an unknown SSLeay_version_APIParam_1, the text ""not available"" is returned."
0,0,The other functions return no values,,,null,The other functions return no values.,The other functions return no values.
0,0,BIO_tell_APIName returns the current file position of a file related BIO,,,null,BIO_tell_APIName returns the current file position of a file related BIO.,BIO_tell_APIName returns the current file position of a file related BIO.
0,0,"Initially, the default DH_METHOD is the OpenSSL internal implementation, as returned by DH_OpenSSL_APIName",,,null,"Initially, the default DH_METHOD is the OpenSSL internal implementation, as returned by DH_OpenSSL_APIName.","Initially, the default DH_METHOD is the OpenSSL internal implementation, as returned by DH_OpenSSL_APIName."
0,0,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName,,,null,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName.,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName. The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data. Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function. If the server has not provided any response data then SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1.
0,0,The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data,,,null,The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data.,The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName. The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data. Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function. If the server has not provided any response data then SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be NULL and the return value from SSL_get_tlsext_status_ocsp_resp_APIName will be -1.
0,0,BIO_f_md_APIName returns the digest BIO method,,,null,BIO_f_md_APIName returns the digest BIO method.,BIO_f_md_APIName returns the digest BIO method.
0,0,Otherwise DSA_SIG_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise DSA_SIG_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, DSA_SIG_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DSA_SIG_new_APIName returns a pointer to the newly allocated structure."
0,0,SSLeay_APIName returns this number,,,null,SSLeay_APIName returns this number.,"SSLeay_APIName returns this number. The return value can be compared to the macro to make sure that the correct version of the library has been loaded, especially when using DLLs on Windows systems."
0,0,SSL_CTX_sess_misses_APIName returns the number of sessions proposed by clients that were not found in the internal session cache in server mode,,,null,SSL_CTX_sess_misses_APIName returns the number of sessions proposed by clients that were not found in the internal session cache in server mode.,SSL_CTX_sess_misses_APIName returns the number of sessions proposed by clients that were not found in the internal session cache in server mode.
0,0,X509_free_APIName returns no value,,,null,X509_free_APIName returns no value.,X509_free_APIName returns no value.
0,0,SSL_get_max_cert_list_APIName returns the currently set maximum size for SSL_set_max_cert_list_APIParam_1,,,null,SSL_get_max_cert_list_APIName returns the currently set maximum size for SSL_set_max_cert_list_APIParam_1.,SSL_get_max_cert_list_APIName returns the currently set maximum size for SSL_set_max_cert_list_APIParam_1.
0,0,DSA_OpenSSL_APIName and DSA_get_default_method_APIName return pointers to the respective DSA_OpenSSL_APIParam_0 DSA_get_default_method_APIParam_0s,,,null,DSA_OpenSSL_APIName and DSA_get_default_method_APIName return pointers to the respective DSA_OpenSSL_APIParam_0 DSA_get_default_method_APIParam_0s.,DSA_OpenSSL_APIName and DSA_get_default_method_APIName return pointers to the respective DSA_OpenSSL_APIParam_0 DSA_get_default_method_APIParam_0s.
0,0,BIO_seek_APIName returns the same value as the underlying fseek_APIName function,,,null,BIO_seek_APIName returns the same value as the underlying fseek_APIName function: 0 for success or -1 for failure.,BIO_seek_APIName returns the same value as the underlying fseek_APIName function: 0 for success or -1 for failure.
0,0,OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory,,,null,OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory; ASN1_OBJECT_free_APIName will have no effect.,OBJ_nid2obj_APIName returns an OBJ_nid2obj_APIParam_0 structure or NULL is an error occurred. OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory; ASN1_OBJECT_free_APIName will have no effect.
0,0,SSL_rstate_string_long_APIName returns a string indicating the current read state of the SSL object SSL_rstate_string_long_APIParam_1,,,null,SSL_rstate_string_long_APIName returns a string indicating the current read state of the SSL object SSL_rstate_string_long_APIParam_1.,SSL_rstate_string_long_APIName returns a string indicating the current read state of the SSL object SSL_rstate_string_long_APIParam_1.
0,0,BIO_next_APIName returns the next BIO in a chain,,,null,BIO_next_APIName returns the next BIO in a chain.,BIO_next_APIName returns the next BIO in a chain. It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type_APIName to find all BIOs of a certain type.
0,0,SSL_CTX_sess_connect_renegotiate_APIName returns the number of start renegotiations in client mode,,,null,SSL_CTX_sess_connect_renegotiate_APIName returns the number of start renegotiations in client mode.,SSL_CTX_sess_connect_renegotiate_APIName returns the number of start renegotiations in client mode.
0,0,EVP_CIPHER_nid_APIName and EVP_CIPHER_CTX_nid_APIName return a NID,,,null,EVP_CIPHER_nid_APIName and EVP_CIPHER_CTX_nid_APIName return a NID.,EVP_CIPHER_nid_APIName and EVP_CIPHER_CTX_nid_APIName return a NID.
0,0,CMS_SignerInfo_set1_signer_cert_APIName does not return a value,,,null,CMS_SignerInfo_set1_signer_cert_APIName does not return a value.,CMS_SignerInfo_set1_signer_cert_APIName does not return a value.
0,0,SSL_CTX_get_timeout_APIName returns the currently set timeout value for SSL_CTX_get_timeout_APIParam_1,,,null,SSL_CTX_get_timeout_APIName returns the currently set timeout value for SSL_CTX_get_timeout_APIParam_1.,SSL_CTX_get_timeout_APIName returns the currently set timeout value for SSL_CTX_get_timeout_APIParam_1.
0,0,"SSL_CTX_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_CTX_get_quiet_shutdown_APIParam_1",,,null,"SSL_CTX_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_CTX_get_quiet_shutdown_APIParam_1.","SSL_CTX_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_CTX_get_quiet_shutdown_APIParam_1."
0,0,BIO_s_accept_APIName returns the accept BIO method,,,null,BIO_s_accept_APIName returns the accept BIO method.,BIO_s_accept_APIName returns the accept BIO method. This is a wrapper round the platform's TCP/IP socket accept routines.
0,0,This alert is returned if a record is received with an incorrect MAC,,,null,This alert is returned if a record is received with an incorrect MAC.,This alert is returned if a record is received with an incorrect MAC. This message is always fatal.
0,0,The number of bytes pending is returned,,,null,The number of bytes pending is returned.,The number of bytes pending is returned.
0,0,EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis  for a trinomial or pentanomial respectively,,,null,EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in <openssl/obj_mac.h>) for a trinomial or pentanomial respectively.,EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in <openssl/obj_mac.h>) for a trinomial or pentanomial respectively. Alternatively in the event of an error a 0 is returned.
0,0,ERR_remove_thread_state and ERR_remove_state_APIName return no value,,,null,ERR_remove_thread_state and ERR_remove_state_APIName return no value.,ERR_remove_thread_state and ERR_remove_state_APIName return no value.
0,0,The structure returned by EVP_PKEY_new_APIName is empty,,,null,The structure returned by EVP_PKEY_new_APIName is empty.,The structure returned by EVP_PKEY_new_APIName is empty. To add a private key to this empty structure the functions described in EVP_PKEY_set1_RSA_APIName should be used.
0,0,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 + bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word",,,null,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 + bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry).","bn_add_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 + bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry)."
0,0,such errors are only reflected in the return values of SSL_CONF_set_cmd_APIName or SSL_CONF_set_argv_APIName,1,,If this option isn't set ,If this option isn't set such errors are only reflected in the return values of SSL_CONF_set_cmd_APIName or SSL_CONF_set_argv_APIName,indicate errors relating to unrecognised options or missing arguments in the error queue. If this option isn't set such errors are only reflected in the return values of SSL_CONF_set_cmd_APIName or SSL_CONF_set_argv_APIName
0,0,CMS_get0_type_APIName returns the content type of a CMS_ContentInfo structure as and ASN1_OBJECT pointer,,,null,CMS_get0_type_APIName returns the content type of a CMS_ContentInfo structure as and ASN1_OBJECT pointer.,CMS_get0_type_APIName returns the content type of a CMS_ContentInfo structure as and ASN1_OBJECT pointer. An application can then decide how to process the CMS_ContentInfo structure based on this value.
0,0,"A match was found and is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2",,,null,"A match was found and is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2.","A match was found and is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2."
0,0,CRYPTO_get_new_dynlockid_APIName returns the index to the newly created lock,,,null,CRYPTO_get_new_dynlockid_APIName returns the index to the newly created lock.,CRYPTO_get_new_dynlockid_APIName returns the index to the newly created lock.
0,0,The function CMS_get0_RecipientInfos_APIName returns all the CMS_RecipientInfo structures associated with a CMS EnvelopedData structure,,,null,The function CMS_get0_RecipientInfos_APIName returns all the CMS_RecipientInfo structures associated with a CMS EnvelopedData structure.,The function CMS_get0_RecipientInfos_APIName returns all the CMS_RecipientInfo structures associated with a CMS EnvelopedData structure.
0,0,a return value of -2 indicates the operation is not supported by the public key algorithm,,,null,In particular a return value of -2 indicates the operation is not supported by the public key algorithm.,EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.
0,0,SSL_alert_desc_string_APIName returns a two letter string as a short form describing the reason of the alert specified by SSL_alert_desc_string_APIParam_1,,,null,SSL_alert_desc_string_APIName returns a two letter string as a short form describing the reason of the alert specified by SSL_alert_desc_string_APIParam_1.,SSL_alert_desc_string_APIName returns a two letter string as a short form describing the reason of the alert specified by SSL_alert_desc_string_APIParam_1.
0,0,SSL_alert_type_string_APIName returns a one letter string indicating the type of the alert specified by SSL_alert_type_string_APIParam_1,,,null,SSL_alert_type_string_APIName returns a one letter string indicating the type of the alert specified by SSL_alert_type_string_APIParam_1.,SSL_alert_type_string_APIName returns a one letter string indicating the type of the alert specified by SSL_alert_type_string_APIParam_1.
0,0,CMS_get1_certs_APIName returns all certificates in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1,,,null,CMS_get1_certs_APIName returns all certificates in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1.,CMS_get1_certs_APIName returns all certificates in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1.
0,0,SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF certificates forming the certificate chain of the peer,,,null,SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer.,"SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF(X509) certificates forming the certificate chain of the peer. If called on the client side, the stack also contains the peer's certificate; if called on the server side, the peer's certificate must be obtained separately using SSL_get_peer_certificate_APIName . If the peer did not present a certificate, NULL is returned."
0,0,DH_free_APIName returns no value,,,null,DH_free_APIName returns no value.,DH_free_APIName returns no value.
0,0,RSA_set_default_method_APIName returns no value,,,null,RSA_set_default_method_APIName returns no value.,RSA_set_default_method_APIName returns no value.
0,0,MDC2_APIName returns a pointer to the hash value,,,null,MDC2_APIName returns a pointer to the hash value.,MDC2_APIName returns a pointer to the hash value.
0,0,i2d_PrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs,,,null,i2d_PrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs.,i2d_PrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling ERR_get_error_APIName .
0,0,X509_STORE_CTX_set_verify_cb_APIName does not return a value,,,null,X509_STORE_CTX_set_verify_cb_APIName does not return a value.,X509_STORE_CTX_set_verify_cb_APIName does not return a value.
0,0,If the return value is -2 the operation is not implemented in the specific BIO type,,,null,If the return value is -2 then the operation is not implemented in the specific BIO type.,All these functions return either the amount of data successfully read or written (if the return value is positive) or that no data was successfully read or written if the result is 0 or -1. If the return value is -2 then the operation is not implemented in the specific BIO type.
0,0,BIO_f_ssl_APIName returns the SSL BIO method,,,null,BIO_f_ssl_APIName returns the SSL BIO method.,"BIO_f_ssl_APIName returns the SSL BIO method. This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO ""flavour"" to SSL I/O."
0,0,SSL_SESSION_get_time_APIName returns the time at which the session SSL_SESSION_get_time_APIParam_1 was established,,,null,SSL_SESSION_get_time_APIName returns the time at which the session SSL_SESSION_get_time_APIParam_1 was established.,SSL_SESSION_get_time_APIName returns the time at which the session SSL_SESSION_get_time_APIParam_1 was established. The time is given in seconds since the Epoch and therefore compatible to the time delivered by the time_APIName call.
0,0,ASN1_TIME_set_APIName and ASN1_TIME_adj_APIName return a pointer to an ASN1_TIME structure or NULL if an error occurred,,,null,ASN1_TIME_set_APIName and ASN1_TIME_adj_APIName return a pointer to an ASN1_TIME structure or NULL if an error occurred.,ASN1_TIME_set_APIName and ASN1_TIME_adj_APIName return a pointer to an ASN1_TIME structure or NULL if an error occurred.
0,0,UI_get0_result_APIName returns a pointer to the result buffer associated with the information indexed by UI_get0_result_APIParam_2,,,null,UI_get0_result_APIName returns a pointer to the result buffer associated with the information indexed by UI_get0_result_APIParam_2.,UI_get0_result_APIName returns a pointer to the result buffer associated with the information indexed by UI_get0_result_APIParam_2.
0,0,ERR_get_next_error_library_APIName returns a new library number,,,null,ERR_get_next_error_library_APIName returns a new library number.,ERR_load_strings_APIName returns no value. ERR_PACK_APIName return the error code. ERR_get_next_error_library_APIName returns a new library number.
0,0,BIO_s_fd_APIName returns the file descriptor BIO method,,,null,BIO_s_fd_APIName returns the file descriptor BIO method.,BIO_s_fd_APIName returns the file descriptor BIO method.
0,0,ERR_load_strings_APIName returns no value,,,null,ERR_load_strings_APIName returns no value.,ERR_load_strings_APIName returns no value. ERR_PACK_APIName return the error code. ERR_get_next_error_library_APIName returns a new library number.
0,0,"BN_get_word_APIName returns the value BN_get_word_APIParam_1, or all-bits-set if BN_get_word_APIParam_1 cannot be represented as a BN_get_word_APIParam_0",,,null,"BN_get_word_APIName returns the value BN_get_word_APIParam_1, or all-bits-set if BN_get_word_APIParam_1 cannot be represented as a BN_get_word_APIParam_0.","BN_get_word_APIName returns the value BN_get_word_APIParam_1, or all-bits-set if BN_get_word_APIParam_1 cannot be represented as a BN_get_word_APIParam_0."
0,0,BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO,,,null,BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO.,BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO. Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry. BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro.
0,0,an application might call SSL_CTX_cmd_APIName and if SSL_CTX_cmd_APIName returns -2  continue with processing of application specific commands,,,null,For example an application might call SSL_CTX_cmd_APIName and if SSL_CTX_cmd_APIName returns -2 (unrecognised command) continue with processing of application specific commands.,For example an application might call SSL_CTX_cmd_APIName and if SSL_CTX_cmd_APIName returns -2 (unrecognised command) continue with processing of application specific commands.
0,0,"A return value of zero indicates that the signature did not verify successfully , while other values indicate a more serious error",,,null,"A return value of zero indicates that the signature did not verify successfully (that is, tbs did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form).","EVP_DigestVerifyFinal_APIName returns 1 for success; any other value indicates failure. A return value of zero indicates that the signature did not verify successfully (that is, tbs did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form)."
0,0,the servers name and port can be set using BIO_set_host_APIName on the BIO returned by BIO_new_ssl_connect_APIName without having to locate the connect BIO first,,,null," , the servers name and port can be set using BIO_set_host_APIName on the BIO returned by BIO_new_ssl_connect_APIName without having to locate the connect BIO first .","Since unknown BIO_ctrl_APIName operations are sent through filter BIOs, the servers name and port can be set using BIO_set_host_APIName on the BIO returned by BIO_new_ssl_connect_APIName without having to locate the connect BIO first."
0,0,Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry,,,null,Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry.,BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO. Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry. BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro.
0,0,SSL_SESSION_get_time_APIName and SSL_SESSION_get_timeout_APIName return the currently valid values,,,null,SSL_SESSION_get_time_APIName and SSL_SESSION_get_timeout_APIName return the currently valid values.,SSL_SESSION_get_time_APIName and SSL_SESSION_get_timeout_APIName return the currently valid values.
0,0,OBJ_txt2nid_APIName returns NID corresponding to text string <s>,,,null,OBJ_txt2nid_APIName returns NID corresponding to text string <s>.,"OBJ_txt2nid_APIName returns NID corresponding to text string <s>. OBJ_txt2nid_APIParam_1 can be a long name, a short name or the numerical representation of an object."
0,0,RC4_set_key_APIName and RC4_APIName do not return values,,,null,RC4_set_key_APIName and RC4_APIName do not return values.,RC4_set_key_APIName and RC4_APIName do not return values.
0,0,SSL_CTX_get_mode_APIName and SSL_get_mode_APIName return the current bitmask,,,null,SSL_CTX_get_mode_APIName and SSL_get_mode_APIName return the current bitmask.,SSL_CTX_get_mode_APIName and SSL_get_mode_APIName return the current bitmask.
0,0,SSL_get1_curves_APIName returns the total number of supported curves,,,null,SSL_get1_curves_APIName returns the total number of supported curves.,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension. SSL_get1_curves_APIName returns the total number of supported curves. The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes. The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order. SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.
0,0,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension,,,null,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension.,SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension. SSL_get1_curves_APIName returns the total number of supported curves. The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes. The SSL_get1_curves_APIParam_2 array is in the form of a set of curve NIDs in preference order. SSL_get1_curves_APIName can return zero if the client did not send a supported curves extension.
0,0,"If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned",,,null,"If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned.","des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal. The string is returned in des_read_pw_APIParam_1 des_read_pw_APIParam_1, which must have spac for at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned. The second password is stored in des_read_pw_APIParam_2 des_read_pw_APIParam_2, which must therefore also be at least des_read_pw_APIParam_3 des_read_pw_APIParam_3 bytes. A return code of -1 indicates a system error, 1 failure due to use interaction, and 0 is success. All other functions described here use des_read_pw_APIName to do the work."
0,0,"BIO_get_retry_BIO_APIName determines the precise reason for the special condition, BIO_get_retry_BIO_APIName returns the BIO that caused this condition and if BIO_get_retry_BIO_APIParam_2 is not NULL BIO_get_retry_BIO_APIParam_2 contains the reason code",,,null,"BIO_get_retry_BIO_APIName determines the precise reason for the special condition, BIO_get_retry_BIO_APIName returns the BIO that caused this condition and if BIO_get_retry_BIO_APIParam_2 is not NULL BIO_get_retry_BIO_APIParam_2 contains the reason code.","BIO_get_retry_BIO_APIName determines the precise reason for the special condition, BIO_get_retry_BIO_APIName returns the BIO that caused this condition and if BIO_get_retry_BIO_APIParam_2 is not NULL BIO_get_retry_BIO_APIParam_2 contains the reason code. The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition."
0,0,SSL_CTX_set_tmp_dh_callback_APIName and SSL_set_tmp_dh_callback_APIName do not return diagnostic output,,,null,SSL_CTX_set_tmp_dh_callback_APIName and SSL_set_tmp_dh_callback_APIName do not return diagnostic output.,SSL_CTX_set_tmp_dh_callback_APIName and SSL_set_tmp_dh_callback_APIName do not return diagnostic output.
0,0,CMS_get0_type_APIName and CMS_get0_eContentType_APIName return and ASN1_OBJECT structure,,,null,CMS_get0_type_APIName and CMS_get0_eContentType_APIName return and ASN1_OBJECT structure.,CMS_get0_type_APIName and CMS_get0_eContentType_APIName return and ASN1_OBJECT structure.
0,0,SSL_get_verify_mode_APIName returns the verification mode currently set in SSL_get_verify_mode_APIParam_1,,,null,SSL_get_verify_mode_APIName returns the verification mode currently set in SSL_get_verify_mode_APIParam_1.,SSL_get_verify_mode_APIName returns the verification mode currently set in SSL_get_verify_mode_APIParam_1.
0,0,DH_set_method_APIName returns non-zero if the provided DH_set_method_APIParam_2 was successfully set as the method for DH_set_method_APIParam_1,,,null,DH_set_method_APIName returns non-zero if the provided DH_set_method_APIParam_2 was successfully set as the method for DH_set_method_APIParam_1 (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).,DH_set_method_APIName returns non-zero if the provided DH_set_method_APIParam_2 was successfully set as the method for DH_set_method_APIParam_1 (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).
0,0,SSL_set_connect_state_APIName and SSL_set_accept_state_APIName do not return diagnostic information,,,null,SSL_set_connect_state_APIName and SSL_set_accept_state_APIName do not return diagnostic information.,SSL_set_connect_state_APIName and SSL_set_accept_state_APIName do not return diagnostic information.
0,0,SSL_CTX_set_tmp_rsa_callback_APIName and SSL_set_tmp_rsa_callback_APIName do not return diagnostic output,,,null,SSL_CTX_set_tmp_rsa_callback_APIName and SSL_set_tmp_rsa_callback_APIName do not return diagnostic output.,SSL_CTX_set_tmp_rsa_callback_APIName and SSL_set_tmp_rsa_callback_APIName do not return diagnostic output.
0,0,SSL_CTX_get_client_cert_cb_APIName returns a pointer to the currently set callback function,,,null,SSL_CTX_get_client_cert_cb_APIName returns a pointer to the currently set callback function.,SSL_CTX_get_client_cert_cb_APIName returns a pointer to the currently set callback function.
0,0,CMS_RecipientInfo_type_APIName returns the type of CMS_RecipientInfo structure CMS_RecipientInfo_type_APIParam_1,,,null,CMS_RecipientInfo_type_APIName returns the type of CMS_RecipientInfo structure CMS_RecipientInfo_type_APIParam_1.,"CMS_RecipientInfo_type_APIName returns the type of CMS_RecipientInfo structure CMS_RecipientInfo_type_APIParam_1. CMS_RecipientInfo_type_APIName will currently return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK, CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER."
0,0,RSA_get_default_method_APIName returns a pointer to the current default RSA_METHOD,,,null,RSA_get_default_method_APIName returns a pointer to the current default RSA_METHOD.,"RSA_get_default_method_APIName returns a pointer to the current default RSA_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
0,0,SSLeay_version_APIName returns a pointer to a constant string describing the version of the OpenSSL library or giving information about the library build,,,null,SSLeay_version_APIName returns a pointer to a constant string describing the version of the OpenSSL library or giving information about the library build.,SSLeay_version_APIName returns a pointer to a constant string describing the version of the OpenSSL library or giving information about the library build.
0,0,BN_BLINDING_get_flags_APIName returns the currently set BN_BLINDING_get_flags_APIParam_1 flags,,,null,BN_BLINDING_get_flags_APIName returns the currently set BN_BLINDING_get_flags_APIParam_1 flags (a BN_BLINDING_get_flags_APIParam_0 value).,BN_BLINDING_get_flags_APIName returns the currently set BN_BLINDING_get_flags_APIParam_1 flags (a BN_BLINDING_get_flags_APIParam_0 value).
0,0,BIO_s_file_APIName returns the file BIO method,,,null,BIO_s_file_APIName returns the file BIO method.,BIO_s_file_APIName returns the file BIO method.
0,0,EC_KEY_get_flags returns the flags associated with the EC_KEY object as an integer,,,null,EC_KEY_get_flags returns the flags associated with the EC_KEY object as an integer.,EC_KEY_get_flags returns the flags associated with the EC_KEY object as an integer.
0,0,SSL_CTX_set_mode_APIName and SSL_set_mode_APIName return the new mode bitmask after adding SSL_CTX_set_mode_APIParam_2 SSL_set_mode_APIParam_2,,,null,SSL_CTX_set_mode_APIName and SSL_set_mode_APIName return the new mode bitmask after adding SSL_CTX_set_mode_APIParam_2 SSL_set_mode_APIParam_2.,SSL_CTX_set_mode_APIName and SSL_set_mode_APIName return the new mode bitmask after adding SSL_CTX_set_mode_APIParam_2 SSL_set_mode_APIParam_2.
0,0,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation,,,null,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation.,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation. If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned. Any non negative value returns the value of that parameter. EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback.
0,0,BIO_new_socket_APIName returns a socket BIO using BIO_new_socket_APIParam_1 and BIO_new_socket_APIParam_2,,,null,BIO_new_socket_APIName returns a socket BIO using BIO_new_socket_APIParam_1 and BIO_new_socket_APIParam_2.,BIO_new_socket_APIName returns a socket BIO using BIO_new_socket_APIParam_1 and BIO_new_socket_APIParam_2.
0,0,EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1,,,null,EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1.,"EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1. The type of a key can be obtained with EVP_PKEY_type(pkey->type). The return value will be EVP_PKEY_RSA, EVP_PKEY_DSA, EVP_PKEY_DH or EVP_PKEY_EC for the corresponding key types or NID_undef if the key type is unassigned."
0,0,If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned,,,null,If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned.,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation. If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned. Any non negative value returns the value of that parameter. EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback.
0,0,Any non negative value returns the value of that parameter,,,null,Any non negative value returns the value of that parameter.,The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation. If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned. Any non negative value returns the value of that parameter. EVP_PKEY_CTX_gen_keygen_info_APIName with a non-negative value for EVP_PKEY_CTX_get_keygen_info_APIParam_2 should only be called within the generation callback.
0,0,SSL_set_verify_result_APIName does not provide a return value,,,null,SSL_set_verify_result_APIName does not provide a return value.,SSL_set_verify_result_APIName does not provide a return value.
0,0,"By checking the return code of SSL_CTX_cmd_APIName it is possible to query if a given SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised, this is useful is SSL_CTX_cmd_APIName values are mixed with additional application specific operations",,,null,"By checking the return code of SSL_CTX_cmd_APIName it is possible to query if a given SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised, this is useful is SSL_CTX_cmd_APIName values are mixed with additional application specific operations.","By checking the return code of SSL_CTX_cmd_APIName it is possible to query if a given SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised, this is useful is SSL_CTX_cmd_APIName values are mixed with additional application specific operations."
0,0,BIO_f_md_APIName returns the message digest BIO method,,,null,BIO_f_md_APIName returns the message digest BIO method.,"BIO_f_md_APIName returns the message digest BIO method. This is a filter BIO that digests any data passed through it, it is a BIO wrapper for the digest routines EVP_DigestInit_APIName, EVP_DigestUpdate_APIName and EVP_DigestFinal_APIName."
0,0,BIO_get_close_APIName returns the BIOs close flag,,,null,BIO_get_close_APIName returns the BIOs close flag.,BIO_get_close_APIName returns the BIOs close flag.
0,0,The vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input,,,null,The vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input.,The vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input. Following bits are significant:
0,0,ASN1_STRING_dup_APIName returns a copy of the structure ASN1_STRING_dup_APIParam_1,,,null,ASN1_STRING_dup_APIName returns a copy of the structure ASN1_STRING_dup_APIParam_1.,ASN1_STRING_dup_APIName returns a copy of the structure ASN1_STRING_dup_APIParam_1.
0,0,DSA_free_APIName returns no value,,,null,DSA_free_APIName returns no value.,DSA_free_APIName returns no value.
0,0,"OBJ_obj2nid_APIName, OBJ_ln2nid_APIName, OBJ_sn2nid_APIName return the corresponding NID for the object OBJ_obj2nid_APIParam_1, the long name <ln> or the short name <sn> respectively or NID_undef if an error occurred",,,null,"OBJ_obj2nid_APIName, OBJ_ln2nid_APIName, OBJ_sn2nid_APIName return the corresponding NID for the object OBJ_obj2nid_APIParam_1, the long name <ln> or the short name <sn> respectively or NID_undef if an error occurred.","OBJ_obj2nid_APIName, OBJ_ln2nid_APIName, OBJ_sn2nid_APIName return the corresponding NID for the object OBJ_obj2nid_APIParam_1, the long name <ln> or the short name <sn> respectively or NID_undef if an error occurred."
0,0,X509_VERIFY_PARAM_get_flags_APIName returns the flags in X509_VERIFY_PARAM_get_flags_APIParam_1,,,null,X509_VERIFY_PARAM_get_flags_APIName returns the flags in X509_VERIFY_PARAM_get_flags_APIParam_1.,X509_VERIFY_PARAM_get_flags_APIName returns the flags in X509_VERIFY_PARAM_get_flags_APIParam_1.
0,0,X509_NAME_entry_count_APIName returns the total number of entries in X509_NAME_entry_count_APIParam_1,,,null,X509_NAME_entry_count_APIName returns the total number of entries in X509_NAME_entry_count_APIParam_1.,X509_NAME_entry_count_APIName returns the total number of entries in X509_NAME_entry_count_APIParam_1.
0,0,ERR_peek_last_error_APIName returns the latest error code from the thread's error queue without modifying it,,,null,ERR_peek_last_error_APIName returns the latest error code from the thread's error queue without modifying it.,ERR_peek_last_error_APIName returns the latest error code from the thread's error queue without modifying it.
0,0,SSL_CTX_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_CTX_get_verify_mode_APIParam_1 SSL_CTX_get_verify_depth_APIParam_1,,,null,SSL_CTX_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_CTX_get_verify_mode_APIParam_1 SSL_CTX_get_verify_depth_APIParam_1.,"SSL_CTX_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_CTX_get_verify_mode_APIParam_1 SSL_CTX_get_verify_depth_APIParam_1. If no callback was explicitly set, the NULL pointer is returned and the default callback will be used."
0,0,CRYPTO_THREADID_hash_APIName returns a numeric value usable as a hash-table key,,,null,CRYPTO_THREADID_hash_APIName returns a numeric value usable as a hash-table key.,"CRYPTO_THREADID_hash_APIName returns a numeric value usable as a hash-table key. This is usually the exact numeric or pointer-based thread ID used internally, however this also handles the unusual case where pointers are larger than 'long' variables and the platform's thread IDs are pointer-based - in this case, mixing is done to attempt to produce a unique numeric value even though it is not as wide as the platform's true thread IDs."
0,0,"SSL_get_SSL_CTX_APIName returns a pointer to the SSL_CTX object, from which SSL_get_SSL_CTX_APIParam_1 was created with SSL_new_APIName",,,null,"SSL_get_SSL_CTX_APIName returns a pointer to the SSL_CTX object, from which SSL_get_SSL_CTX_APIParam_1 was created with SSL_new_APIName .","SSL_get_SSL_CTX_APIName returns a pointer to the SSL_CTX object, from which SSL_get_SSL_CTX_APIParam_1 was created with SSL_new_APIName ."
0,0,OCSP_resp_get0_certs_APIName returns any certificates included in OCSP_resp_find_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_count_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1,,,null,OCSP_resp_get0_certs_APIName returns any certificates included in OCSP_resp_find_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_count_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1.,OCSP_resp_get0_certs_APIName returns any certificates included in OCSP_resp_find_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_count_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1.
0,0,SSL_CTX_sess_get_cache_size_APIName returns the currently valid size,,,null,SSL_CTX_sess_get_cache_size_APIName returns the currently valid size.,SSL_CTX_sess_get_cache_size_APIName returns the currently valid size.
0,0,UI_get_method_APIName returns the UI method associated with a given UI,,,null,UI_get_method_APIName returns the UI method associated with a given UI.,UI_get_method_APIName returns the UI method associated with a given UI.
0,0,UI_get_default_method_APIName returns a pointer to the current default UI method,,,null,UI_get_default_method_APIName returns a pointer to the current default UI method.,UI_get_default_method_APIName returns a pointer to the current default UI method.
0,0,This is different to the normal crypt in that the third parameter is the buffer that the return value is written into,,,null,This is different to the normal crypt in that the third parameter is the buffer that the return value is written into.,"DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function. This version takes only a small amount of space relative to other fast crypt_APIName implementations. This is different to the normal crypt in that the third parameter is the buffer that the return value is written into. the third parameter needs to be at least 14 bytes long. This function is thread safe, unlike the normal crypt."
0,0,SSL_CTX_get_max_cert_list_APIName returns the currently set maximum size for SSL_CTX_get_max_cert_list_APIParam_1,,,null,SSL_CTX_get_max_cert_list_APIName returns the currently set maximum size for SSL_CTX_get_max_cert_list_APIParam_1.,SSL_CTX_get_max_cert_list_APIName returns the currently set maximum size for SSL_CTX_get_max_cert_list_APIParam_1.
0,0,ERR_clear_error_APIName has no return value,,,null,ERR_clear_error_APIName has no return value.,ERR_clear_error_APIName has no return value.
0,0,RAND_cleanup_APIName returns no value,,,null,RAND_cleanup_APIName returns no value.,RAND_cleanup_APIName returns no value.
0,0,BIO_tell_APIName returns the value of the position pointer,,,null,BIO_tell_APIName returns the value of the position pointer.,BIO_tell_APIName returns the value of the position pointer.
0,0,RSA_private_encrypt_APIName returns the size of the signature,,,null,"RSA_private_encrypt_APIName returns the size of the signature (ie, RSA_size(rsa)).","RSA_private_encrypt_APIName returns the size of the signature (ie, RSA_size(rsa)). RSA_public_decrypt_APIName returns the size of the recovered message digest."
0,0,SSL_CTX_sess_set_cache_size_APIName returns the previously valid size,,,null,SSL_CTX_sess_set_cache_size_APIName returns the previously valid size.,SSL_CTX_sess_set_cache_size_APIName returns the previously valid size.
0,0,RSA_public_decrypt_APIName returns the size of the recovered message digest,,,null,RSA_public_decrypt_APIName returns the size of the recovered message digest.,"RSA_private_encrypt_APIName returns the size of the signature (ie, RSA_size(rsa)). RSA_public_decrypt_APIName returns the size of the recovered message digest."
0,0,DSA_set_default_method_APIName returns no value,,,null,DSA_set_default_method_APIName returns no value.,DSA_set_default_method_APIName returns no value.
0,0,"Initially, the default DSA_METHOD is the OpenSSL internal implementation, as returned by DSA_OpenSSL_APIName",,,null,"Initially, the default DSA_METHOD is the OpenSSL internal implementation, as returned by DSA_OpenSSL_APIName.","Initially, the default DSA_METHOD is the OpenSSL internal implementation, as returned by DSA_OpenSSL_APIName."
0,0,i2d_X509_APIName returns the number of bytes successfully encoded or a negative value if an error occurs,,,null,i2d_X509_APIName returns the number of bytes successfully encoded or a negative value if an error occurs.,i2d_X509_APIName returns the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by ERR_get_error_APIName .
0,0,BIO_method_type_APIName returns the type of the BIO BIO_next_APIParam_1 BIO_find_type_APIParam_1,,,null,BIO_method_type_APIName returns the type of the BIO BIO_next_APIParam_1 BIO_find_type_APIParam_1.,BIO_method_type_APIName returns the type of the BIO BIO_next_APIParam_1 BIO_find_type_APIParam_1.
0,0,"CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added, this can be used to set additional attributes before it is finalized",,,null,"CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added, this can be used to set additional attributes before it is finalized.","CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added, this can be used to set additional attributes before it is finalized."
0,0,SSL_CTX_get_options_APIName and SSL_get_options_APIName return the current bitmask,,,null,SSL_CTX_get_options_APIName and SSL_get_options_APIName return the current bitmask.,SSL_CTX_get_options_APIName and SSL_get_options_APIName return the current bitmask.
0,0,SSL_SESSION_get_timeout_APIName returns the timeout value set for session SSL_SESSION_get_timeout_APIParam_1 in seconds,,,null,SSL_SESSION_get_timeout_APIName returns the timeout value set for session SSL_SESSION_get_timeout_APIParam_1 in seconds.,SSL_SESSION_get_timeout_APIName returns the timeout value set for session SSL_SESSION_get_timeout_APIParam_1 in seconds.
0,0,EVP_PKEY_CTX_free_APIName does not return a value,,,null,EVP_PKEY_CTX_free_APIName does not return a value.,EVP_PKEY_CTX_free_APIName does not return a value.
0,0,SSL_CTX_sess_number_APIName returns the current number of sessions in the internal session cache,,,null,SSL_CTX_sess_number_APIName returns the current number of sessions in the internal session cache.,SSL_CTX_sess_number_APIName returns the current number of sessions in the internal session cache.
0,0,"If a BN_get_word_APIParam_1 is equal to the value of all-bits-set, BN_get_word_APIParam_1 will collide with the error condition returned by BN_get_word_APIName which uses that as an error value",,,null,"If a BN_get_word_APIParam_1 is equal to the value of all-bits-set, BN_get_word_APIParam_1 will collide with the error condition returned by BN_get_word_APIName which uses that as an error value.","If a BN_get_word_APIParam_1 is equal to the value of all-bits-set, BN_get_word_APIParam_1 will collide with the error condition returned by BN_get_word_APIName which uses that as an error value."
0,0,SSL_get_current_cipher_APIName returns a pointer to an SSL_CIPHER object containing the description of the actually used cipher of a connection established with the SSL_get_current_cipher_APIParam_1 object,,,null,SSL_get_current_cipher_APIName returns a pointer to an SSL_CIPHER object containing the description of the actually used cipher of a connection established with the SSL_get_current_cipher_APIParam_1 object.,SSL_get_current_cipher_APIName returns a pointer to an SSL_CIPHER object containing the description of the actually used cipher of a connection established with the SSL_get_current_cipher_APIParam_1 object.
0,0,EVP_CIPHER_key_length_APIName and EVP_CIPHER_CTX_key_length_APIName return the key length,,,null,EVP_CIPHER_key_length_APIName and EVP_CIPHER_CTX_key_length_APIName return the key length.,EVP_CIPHER_key_length_APIName and EVP_CIPHER_CTX_key_length_APIName return the key length.
0,0,EVP_PKEY_set1_engine_APIName is typically used by an ENGINE returning an HSM key as part of its routine to load a private key,,,null,EVP_PKEY_set1_engine_APIName is typically used by an ENGINE returning an HSM key as part of its routine to load a private key.,EVP_PKEY_set1_engine_APIName is typically used by an ENGINE returning an HSM key as part of its routine to load a private key.
0,0,SSL_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_get_verify_mode_APIParam_1 SSL_get_verify_depth_APIParam_1,,,null,SSL_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_get_verify_mode_APIParam_1 SSL_get_verify_depth_APIParam_1.,"SSL_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_get_verify_mode_APIParam_1 SSL_get_verify_depth_APIParam_1. If no callback was explicitly set, the NULL pointer is returned and the default callback will be used."
0,0,ERR_print_errors_APIName and ERR_print_errors_fp_APIName return no values,,,null,ERR_print_errors_APIName and ERR_print_errors_fp_APIName return no values.,ERR_print_errors_APIName and ERR_print_errors_fp_APIName return no values.
0,0,"EVP_PKEY_meth_new_APIName creates and returns a new EVP_PKEY_meth_new_APIParam_0 object, and associates the given EVP_PKEY_meth_new_APIParam_1 and EVP_PKEY_meth_new_APIParam_2",,,null,"EVP_PKEY_meth_new_APIName creates and returns a new EVP_PKEY_meth_new_APIParam_0 object, and associates the given EVP_PKEY_meth_new_APIParam_1 and EVP_PKEY_meth_new_APIParam_2.","EVP_PKEY_meth_new_APIName creates and returns a new EVP_PKEY_meth_new_APIParam_0 object, and associates the given EVP_PKEY_meth_new_APIParam_1 and EVP_PKEY_meth_new_APIParam_2. The following flags are supported:"
0,0,"BN_num_bits_APIName returns the number of significant bits in a BN_num_bits_APIParam_1, following the same principle as BN_num_bits_word_APIName",,,null,"BN_num_bits_APIName returns the number of significant bits in a BN_num_bits_APIParam_1, following the same principle as BN_num_bits_word_APIName.","BN_num_bits_APIName returns the number of significant bits in a BN_num_bits_APIParam_1, following the same principle as BN_num_bits_word_APIName."
0,0,"BIO_get_fd_APIName places the socket in BIO_get_fd_APIParam_2, it also returns the socket",1,,if BIO_get_fd_APIParam_2 is not NULL,"BIO_get_fd_APIName places the socket in BIO_get_fd_APIParam_2 if BIO_get_fd_APIParam_2 is not NULL, it also returns the socket.","BIO_get_fd_APIName places the socket in BIO_get_fd_APIParam_2 if BIO_get_fd_APIParam_2 is not NULL, it also returns the socket. If BIO_get_fd_APIParam_2 is not NULL BIO_get_fd_APIParam_2 should be of type (int *)."
0,0,BIO_s_mem_APIName return the memory BIO method function,,,null,BIO_s_mem_APIName return the memory BIO method function.,BIO_s_mem_APIName return the memory BIO method function.
0,0,In OpenSSL 1.0.0 and later the context is always returned and the BIO is state is set to initialized,,,null,In OpenSSL 1.0.0 and later the context is always returned and the BIO is state is set to initialized.,Before OpenSSL 1.0.0 the call to BIO_get_md_ctx_APIName would only work if the BIO had been initialized for example by calling BIO_set_md_APIName ). In OpenSSL 1.0.0 and later the context is always returned and the BIO is state is set to initialized. This allows applications to initialize the context externally if the standard calls such as BIO_set_md_APIName are not sufficiently flexible.
0,0,SSL_get_ssl_method_APIName returns a function pointer to the TLS/SSL method set in SSL_get_ssl_method_APIParam_1,,,null,SSL_get_ssl_method_APIName returns a function pointer to the TLS/SSL method set in SSL_get_ssl_method_APIParam_1.,SSL_get_ssl_method_APIName returns a function pointer to the TLS/SSL method set in SSL_get_ssl_method_APIParam_1.
0,0,"All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description",,,null,"All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description.","If the ENGINE's array of control commands is empty ,then all other commands will fail, otherwise; ENGINE_CTRL_GET_FIRST_CMD_TYPE returns the identifier of the first command supported by the ENGINE, ENGINE_GET_NEXT_CMD_TYPE takes the identifier of a command supported by the ENGINE and returns the next command identifier or fails if there are no more, ENGINE_CMD_FROM_NAME takes a string name for a command and returns the corresponding identifier or fails if no such command name exists, and the remaining commands take a command identifier and return properties of the corresponding commands. All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description. ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd mask of the following possible values;"
0,0,"Initially, the default RSA_METHOD is the OpenSSL internal implementation, as returned by RSA_PKCS1_SSLeay_APIName",,,null,"Initially, the default RSA_METHOD is the OpenSSL internal implementation, as returned by RSA_PKCS1_SSLeay_APIName.","Initially, the default RSA_METHOD is the OpenSSL internal implementation, as returned by RSA_PKCS1_SSLeay_APIName."
0,0,X509_VERIFY_PARAM_get_depth_APIName returns the current verification depth,,,null,X509_VERIFY_PARAM_get_depth_APIName returns the current verification depth.,X509_VERIFY_PARAM_get_depth_APIName returns the current verification depth.
0,0,the key schedule is not generated,1,,"If an error is returned,","If an error is returned, the key schedule is not generated.","DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key. If the parity is wrong, then -1 is returned. If the key is a weak key, then -2 is returned. If an error is returned, the key schedule is not generated."
0,0,Otherwise X509_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise X509_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, X509_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise X509_new_APIName returns a pointer to the newly allocated structure."
0,0,OpenSSL clients will check the session id context returned by the server when reusing a session,,,null,OpenSSL clients will check the session id context returned by the server when reusing a session.,OpenSSL clients will check the session id context returned by the server when reusing a session.
0,0,RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced,,,null,RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced.,"RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced. However, this return value should probably be ignored because if it was supplied by an ENGINE, the pointer could be invalidated at any time if the ENGINE is unloaded (in fact it could be unloaded as a result of the RSA_set_method_APIName function releasing its handle to the ENGINE). For this reason, the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release."
0,0,SSL_CTX_sessions_APIName returns a pointer to the lhash databases containing the internal session cache for SSL_CTX_sessions_APIParam_1,,,null,SSL_CTX_sessions_APIName returns a pointer to the lhash databases containing the internal session cache for SSL_CTX_sessions_APIParam_1.,SSL_CTX_sessions_APIName returns a pointer to the lhash databases containing the internal session cache for SSL_CTX_sessions_APIParam_1.
0,0,"If module errors are not ignored ,the return code will reflect the return value of the failing module",,,null,"If module errors are not ignored ,the return code will reflect the return value of the failing module (this will always be zero or negative).","These functions return 1 for success and a zero or negative value for failure. If module errors are not ignored ,the return code will reflect the return value of the failing module (this will always be zero or negative)."
0,0,SSL_pending_APIName returns the number of bytes which are available inside SSL_pending_APIParam_1 for immediate read,,,null,SSL_pending_APIName returns the number of bytes which are available inside SSL_pending_APIParam_1 for immediate read.,SSL_pending_APIName returns the number of bytes which are available inside SSL_pending_APIParam_1 for immediate read.
0,0,the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release,,,null,"For this reason, the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release.","RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced. However, this return value should probably be ignored because if it was supplied by an ENGINE, the pointer could be invalidated at any time if the ENGINE is unloaded (in fact it could be unloaded as a result of the RSA_set_method_APIName function releasing its handle to the ENGINE). For this reason, the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release."
0,0,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName return a pointer to an SSL_CTX_get0_param_APIParam_0 SSL_get0_param_APIParam_0 structure,,,null,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName return a pointer to an SSL_CTX_get0_param_APIParam_0 SSL_get0_param_APIParam_0 structure.,SSL_CTX_get0_param_APIName and SSL_get0_param_APIName return a pointer to an SSL_CTX_get0_param_APIParam_0 SSL_get0_param_APIParam_0 structure.
0,0,The other SSL_want__APIName calls are shortcuts for the possible states returned by SSL_want_APIName,,,null,The other SSL_want_*_APIName calls are shortcuts for the possible states returned by SSL_want_APIName.,The other SSL_want_*_APIName calls are shortcuts for the possible states returned by SSL_want_APIName.
0,0,EC_KEY_get_enc_flags returns the value of the current encoding flags for the EC_KEY,,,null,EC_KEY_get_enc_flags returns the value of the current encoding flags for the EC_KEY.,EC_KEY_get_enc_flags returns the value of the current encoding flags for the EC_KEY.
0,0,"EVP_MD_CTX_create_APIName allocates, initializes and returns a digest context",,,null,"EVP_MD_CTX_create_APIName allocates, initializes and returns a digest context.","EVP_MD_CTX_create_APIName allocates, initializes and returns a digest context."
0,0,SSL_CTX_get_cert_store_APIName returns the current setting,,,null,SSL_CTX_get_cert_store_APIName returns the current setting.,SSL_CTX_get_cert_store_APIName returns the current setting.
0,0,RAND_load_file_APIName returns the number of bytes read,,,null,RAND_load_file_APIName returns the number of bytes read.,RAND_load_file_APIName returns the number of bytes read.
0,0,The function CMS_get0_SignerInfos_APIName returns all the CMS_SignerInfo structures associated with a CMS signedData structure,,,null,The function CMS_get0_SignerInfos_APIName returns all the CMS_SignerInfo structures associated with a CMS signedData structure.,The function CMS_get0_SignerInfos_APIName returns all the CMS_SignerInfo structures associated with a CMS signedData structure.
0,0,"BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName",,,null,"BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName.","BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers. Not all BIOs support these calls. BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName."
0,0,"BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers",,,null,"BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers.","BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers. Not all BIOs support these calls. BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName."
0,0,This returns a pointer to a memory block containing the seed that was used,,,null,This returns a pointer to a memory block containing the seed that was used.,"ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it. If the seed is present for a curve, then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed. This returns a pointer to a memory block containing the seed that was used. The length of the memory block can be obtained using EC_GROUP_get_seed_len. A number of the builtin curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use this seed value, although it will be preserved in any ASN1 based communications."
0,0,Its return values are similar to that of SSL_get_error_APIName,,,null,Its return values are similar to that of SSL_get_error_APIName .,"SSL_want_APIName examines the internal state information of the SSL object. Its return values are similar to that of SSL_get_error_APIName . Unlike SSL_get_error_APIName , which also evaluates the error queue, the results are obtained by examining an internal state flag only. The information must therefore only be used for normal operation under non-blocking I/O. Error conditions are not handled and must be treated using SSL_get_error_APIName ."
0,0,"X509_get0_notBefore_APIName, X509_get0_notAfter_APIName and X509_CRL_get0_lastUpdate_APIName return a pointer to an X509_get0_notBefore_APIParam_0 X509_get0_notAfter_APIParam_0 X509_CRL_get0_lastUpdate_APIParam_0 structure",,,null,"X509_get0_notBefore_APIName, X509_get0_notAfter_APIName and X509_CRL_get0_lastUpdate_APIName return a pointer to an X509_get0_notBefore_APIParam_0 X509_get0_notAfter_APIParam_0 X509_CRL_get0_lastUpdate_APIParam_0 structure.","X509_get0_notBefore_APIName, X509_get0_notAfter_APIName and X509_CRL_get0_lastUpdate_APIName return a pointer to an X509_get0_notBefore_APIParam_0 X509_get0_notAfter_APIParam_0 X509_CRL_get0_lastUpdate_APIParam_0 structure."
0,0,X509_VERIFY_PARAM_set_time_APIName and X509_VERIFY_PARAM_set_depth_APIName do not return values,,,null,X509_VERIFY_PARAM_set_time_APIName and X509_VERIFY_PARAM_set_depth_APIName do not return values.,X509_VERIFY_PARAM_set_time_APIName and X509_VERIFY_PARAM_set_depth_APIName do not return values.
0,0,BIO_get_md_ctx_APIName returns the digest BIOs context into BIO_get_md_ctx_APIParam_2,,,null,BIO_get_md_ctx_APIName returns the digest BIOs context into BIO_get_md_ctx_APIParam_2.,BIO_get_md_ctx_APIName returns the digest BIOs context into BIO_get_md_ctx_APIParam_2.
0,0,SSL_CTX_sess_connect_APIName returns the number of started SSL/TLS handshakes in client mode,,,null,SSL_CTX_sess_connect_APIName returns the number of started SSL/TLS handshakes in client mode.,SSL_CTX_sess_connect_APIName returns the number of started SSL/TLS handshakes in client mode.
0,0,SSL_CTX_set_quiet_shutdown_APIName and SSL_set_quiet_shutdown_APIName do not return diagnostic information,,,null,SSL_CTX_set_quiet_shutdown_APIName and SSL_set_quiet_shutdown_APIName do not return diagnostic information.,SSL_CTX_set_quiet_shutdown_APIName and SSL_set_quiet_shutdown_APIName do not return diagnostic information.
0,0,"EVP_MD_size_APIName and EVP_MD_CTX_size_APIName return the size of the message digest when passed an EVP_MD_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure, ie the size of the hash",,,null,"EVP_MD_size_APIName and EVP_MD_CTX_size_APIName return the size of the message digest when passed an EVP_MD_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure, ie the size of the hash.","EVP_MD_size_APIName and EVP_MD_CTX_size_APIName return the size of the message digest when passed an EVP_MD_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure, ie the size of the hash."
0,0,EVP_PKEY_meth_free_APIName and EVP_PKEY_meth_copy_APIName do not return values,,,null,EVP_PKEY_meth_free_APIName and EVP_PKEY_meth_copy_APIName do not return values.,EVP_PKEY_meth_free_APIName and EVP_PKEY_meth_copy_APIName do not return values.
0,0,BIO_tell_APIName returns the current file position,,,null,BIO_tell_APIName returns the current file position.,BIO_tell_APIName returns the current file position.
0,0,ASN1_STRING_length_APIName returns the length of the content of ASN1_STRING_length_APIParam_1,,,null,ASN1_STRING_length_APIName returns the length of the content of ASN1_STRING_length_APIParam_1.,ASN1_STRING_length_APIName returns the length of the content of ASN1_STRING_length_APIParam_1.
0,0,Only a single private key and corresponding certificate is returned by this function,,,null,Only a single private key and corresponding certificate is returned by this function.,Only a single private key and corresponding certificate is returned by this function. More complex PKCS#12 files with multiple private keys will only return the first match.
0,0,a required argument is missing and an error is indicated,1,,"If -3 is returned ,","If -3 is returned ,a required argument is missing and an error is indicated.","In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName. If -2 is returned ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead. If -3 is returned ,a required argument is missing and an error is indicated. If 0 is returned ,some other error occurred and this can be reported back to the user."
0,0,More complex PKCS#12 files with multiple private keys will only return the first match,,,null,More complex PKCS#12 files with multiple private keys will only return the first match.,Only a single private key and corresponding certificate is returned by this function. More complex PKCS#12 files with multiple private keys will only return the first match.
0,0,BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty,,,null,BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty.,"BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty. If the BIO_set_mem_eof_return_APIParam_2 is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false. If BIO_set_mem_eof_return_APIParam_2 is non zero then BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag (that is BIO_read_retry(b) is true). To avoid ambiguity with a normal positive return value BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1."
0,0,some other error occurred and this can be reported back to the user,1,,"If 0 is returned ,","If 0 is returned ,some other error occurred and this can be reported back to the user.","In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName. If -2 is returned ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead. If -3 is returned ,a required argument is missing and an error is indicated. If 0 is returned ,some other error occurred and this can be reported back to the user."
0,0,If the BIO_set_mem_eof_return_APIParam_2 is zero an empty memory BIO will return EOF,1,,null,If the BIO_set_mem_eof_return_APIParam_2 is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false.,"BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty. If the BIO_set_mem_eof_return_APIParam_2 is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false. If BIO_set_mem_eof_return_APIParam_2 is non zero then BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag (that is BIO_read_retry(b) is true). To avoid ambiguity with a normal positive return value BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1."
0,0,BIO_get_mem_data_APIName sets BIO_get_mem_data_APIParam_2 to a pointer to the start of the memory BIOs data and returns the total amount of data available,,,null,BIO_get_mem_data_APIName sets *BIO_get_mem_data_APIParam_2 to a pointer to the start of the memory BIOs data and returns the total amount of data available.,BIO_get_mem_data_APIName sets *BIO_get_mem_data_APIParam_2 to a pointer to the start of the memory BIOs data and returns the total amount of data available. It is implemented as a macro.
0,0,"PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added, this can be used to set additional attributes before it is finalized",,,null,"PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added, this can be used to set additional attributes before it is finalized.","PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added, this can be used to set additional attributes before it is finalized."
0,0,If BIO_set_mem_eof_return_APIParam_2 is non zero BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag  is true,,,null,If BIO_set_mem_eof_return_APIParam_2 is non zero then BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag (that is BIO_read_retry(b) is true).,"BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty. If the BIO_set_mem_eof_return_APIParam_2 is zero then an empty memory BIO will return EOF (that is it will return zero and BIO_should_retry(b) will be false. If BIO_set_mem_eof_return_APIParam_2 is non zero then BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag (that is BIO_read_retry(b) is true). To avoid ambiguity with a normal positive return value BIO_set_mem_eof_return_APIParam_2 should be set to a negative value, typically -1."
0,0,if the return value is positive it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName,,,null,In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName.,"In this case if the return value is positive then it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName. If -2 is returned ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead. If -3 is returned ,a required argument is missing and an error is indicated. If 0 is returned ,some other error occurred and this can be reported back to the user."
0,0,SSL_alert_desc_string_long_APIName returns a string describing the reason of the alert specified by SSL_alert_desc_string_long_APIParam_1,,,null,SSL_alert_desc_string_long_APIName returns a string describing the reason of the alert specified by SSL_alert_desc_string_long_APIParam_1.,SSL_alert_desc_string_long_APIName returns a string describing the reason of the alert specified by SSL_alert_desc_string_long_APIParam_1.
0,0,"UI_process_APIName goes through the information given so far, does all the printing and prompting and returns",,,null,"UI_process_APIName goes through the information given so far, does all the printing and prompting and returns.","UI_process_APIName goes through the information given so far, does all the printing and prompting and returns."
0,0,All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values,,,null,All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values.,"All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values. For the 'get' functions, function pointers are returned by arguments."
0,0,It could use the chain of the first set which returns suitable flags,,,null,It could then use the chain of the first set which returns suitable flags.,An application wishing to support multiple certificate chains may call this function on each chain in turn: starting with the one it considers the most secure. It could then use the chain of the first set which returns suitable flags.
0,0,HMAC_CTX_init_APIName and HMAC_CTX_cleanup_APIName do not return values,,,null,HMAC_CTX_init_APIName and HMAC_CTX_cleanup_APIName do not return values.,HMAC_CTX_init_APIName and HMAC_CTX_cleanup_APIName do not return values.
0,0,"For the 'get' functions, function pointers are returned by arguments",,,null,"For the 'get' functions, function pointers are returned by arguments.","All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values. For the 'get' functions, function pointers are returned by arguments."
0,0,The return value provides the number of octets stored,,,null,The return value provides the number of octets stored.,The function EC_POINT_point2oct must be supplied with a buffer long enough to store the octet string. The return value provides the number of octets stored. Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length.
0,0,Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length,,,null,Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length.,The function EC_POINT_point2oct must be supplied with a buffer long enough to store the octet string. The return value provides the number of octets stored. Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length.
0,0,SSLeay_version_APIName returns different strings depending on SSLeay_version_APIParam_1,,,null,SSLeay_version_APIName returns different strings depending on SSLeay_version_APIParam_1:,SSLeay_version_APIName returns different strings depending on SSLeay_version_APIParam_1:
0,0,"ERR_load_crypto_strings_APIName, SSL_load_error_strings_APIName and ERR_free_strings_APIName return no values",,,null,"ERR_load_crypto_strings_APIName, SSL_load_error_strings_APIName and ERR_free_strings_APIName return no values.","ERR_load_crypto_strings_APIName, SSL_load_error_strings_APIName and ERR_free_strings_APIName return no values."
0,0,RIPEMD160_APIName returns a pointer to the hash value,,,null,RIPEMD160_APIName returns a pointer to the hash value.,RIPEMD160_APIName returns a pointer to the hash value.
0,0,BUF_MEM_free_APIName has no return value,,,null,BUF_MEM_free_APIName has no return value.,BUF_MEM_free_APIName has no return value.
0,0,The chain returned by this function behaves like a standard filter BIO,,,null,The chain returned by this function behaves like a standard filter BIO.,The chain returned by this function behaves like a standard filter BIO. It supports non blocking I/O. Content is processed and streamed on the fly and not all held in memory at once: so it is possible to encode very large structures. After all content has been written through the chain BIO_flush_APIName must be called to finalise the structure.
0,0,BIO_free_all_APIName and BIO_vfree_APIName do not return values,,,null,BIO_free_all_APIName and BIO_vfree_APIName do not return values.,BIO_free_all_APIName and BIO_vfree_APIName do not return values.
0,0,X509_NAME_entry_count_APIName returns the total number of entries,,,null,X509_NAME_entry_count_APIName returns the total number of entries.,X509_NAME_entry_count_APIName returns the total number of entries.
0,0,"EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name, EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and EC_GROUP_get_degree return the order, cofactor, curve name , ASN1 flag, point_conversion_form and degree for the specified curve respectively",,,null,"EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name, EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and EC_GROUP_get_degree return the order, cofactor, curve name (NID), ASN1 flag, point_conversion_form and degree for the specified curve respectively.","EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name, EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and EC_GROUP_get_degree return the order, cofactor, curve name (NID), ASN1 flag, point_conversion_form and degree for the specified curve respectively. If there is no curve name associated with a curve ,then EC_GROUP_get_curve_name will return 0."
0,0,SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2,,,null,SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2; or the total number of shared curves if SSL_get_shared_curve_APIParam_2 is -1.,SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2; or the total number of shared curves if SSL_get_shared_curve_APIParam_2 is -1.
0,0,"X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned",,,null,"X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned.","X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned. At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated. The length of the output string written is returned excluding the terminating null. If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is <NULL> then the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 (excluding the final null) is returned."
0,0,BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2,,,null,BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2.,BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2. The output of the filter is written to BIO_new_CMS_APIParam_1. Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type.
0,0,"BN_init_APIName, BN_clear_APIName, BN_free_APIName and BN_clear_free_APIName have no return values",,,null,"BN_init_APIName, BN_clear_APIName, BN_free_APIName and BN_clear_free_APIName have no return values.","BN_init_APIName, BN_clear_APIName, BN_free_APIName and BN_clear_free_APIName have no return values."
0,0,The length of the output string written is returned excluding the terminating null,,,null,The length of the output string written is returned excluding the terminating null.,"X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the ""text"" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned. At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated. The length of the output string written is returned excluding the terminating null. If X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 is <NULL> then the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 (excluding the final null) is returned."
0,0,"BN_get_word_APIName returns BN_get_word_APIParam_1, if BN_get_word_APIParam_1 can be represented as a BN_get_word_APIParam_0",,,null,"BN_get_word_APIName returns BN_get_word_APIParam_1, if BN_get_word_APIParam_1 can be represented as a BN_get_word_APIParam_0.","BN_get_word_APIName returns BN_get_word_APIParam_1, if BN_get_word_APIParam_1 can be represented as a BN_get_word_APIParam_0."
0,0,The return value points to an allocated SSL structure,,,null,The return value points to an allocated SSL structure.,The return value points to an allocated SSL structure.
0,0,SSL_check_chain_APIName returns a bitmap of flags indicating the validity of the chain,,,null,SSL_check_chain_APIName returns a bitmap of flags indicating the validity of the chain.,SSL_check_chain_APIName returns a bitmap of flags indicating the validity of the chain.
0,0,The return values of the SSL_ctrl_APIName functions depend on the command supplied via the SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 parameter,,,null,The return values of the SSL*_ctrl_APIName functions depend on the command supplied via the SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 parameter.,The return values of the SSL*_ctrl_APIName functions depend on the command supplied via the SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 parameter.
0,0,Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted,,,null,Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted: an error occurs if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence.,Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted: an error occurs if the CSPRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence.
0,0,"BIO_push_APIName returns the end of the chain, BIO_push_APIParam_1",,,null,"BIO_push_APIName returns the end of the chain, BIO_push_APIParam_1.","BIO_push_APIName returns the end of the chain, BIO_push_APIParam_1."
2,0,The length of ASN1_STRING_to_UTF8_APIParam_1 is returned or a negative error code,,,null,The length of ASN1_STRING_to_UTF8_APIParam_1 is returned or a negative error code by ASN1_STRING_to_UTF8_APIName or a negative error code.,"ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format, the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1. The length of ASN1_STRING_to_UTF8_APIParam_1 is returned or a negative error code by ASN1_STRING_to_UTF8_APIName or a negative error code. The buffer ASN1_STRING_to_UTF8_APIParam_1 should be free using OPENSSL_free_APIName."
0,0,SSL_CTX_set_options_APIName and SSL_set_options_APIName return the new options bitmask after adding SSL_CTX_set_options_APIParam_2 SSL_set_options_APIParam_2,,,null,SSL_CTX_set_options_APIName and SSL_set_options_APIName return the new options bitmask after adding SSL_CTX_set_options_APIParam_2 SSL_set_options_APIParam_2.,SSL_CTX_set_options_APIName and SSL_set_options_APIName return the new options bitmask after adding SSL_CTX_set_options_APIParam_2 SSL_set_options_APIParam_2.
0,0,lh_<type>_delete_APIName returns the entry being deleted,,,null,lh_<type>_delete_APIName returns the entry being deleted.,lh_<type>_delete_APIName returns the entry being deleted. NULL is returned if there is no such value in the hash table.
0,0,CMS_get0_content_APIName returns a pointer to the CMS_get0_content_APIParam_0 pointer containing the embedded content,,,null,CMS_get0_content_APIName returns a pointer to the CMS_get0_content_APIParam_0 pointer containing the embedded content.,CMS_get0_content_APIName returns a pointer to the CMS_get0_content_APIParam_0 pointer containing the embedded content.
0,0,None of the functions return a value,,,null,None of the functions return a value.,None of the functions return a value.
0,0,SSL_CONF_cmd_argv_APIName returns the number of command arguments processed,,,null,"SSL_CONF_cmd_argv_APIName returns the number of command arguments processed: 0, 1, 2 or a negative error code.","SSL_CONF_cmd_argv_APIName returns the number of command arguments processed: 0, 1, 2 or a negative error code."
0,0,"The error code returned by ERR_get_error_APIName consists of a library number, function code and reason code",,,null,"The error code returned by ERR_get_error_APIName consists of a library number, function code and reason code.","The error code returned by ERR_get_error_APIName consists of a library number, function code and reason code. ERR_GET_LIB_APIName, ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName can be used to extract these."
0,0,X509_STORE_CTX_get_error_depth_APIName returns a non-negative error depth,,,null,X509_STORE_CTX_get_error_depth_APIName returns a non-negative error depth.,X509_STORE_CTX_get_error_depth_APIName returns a non-negative error depth.
0,0,If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned,,,null,If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned.,"d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2. If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_ECPKParameters_APIParam_1 is not NULL , d2i_ECPKParameters_APIParam_0  is written to d2i_ECPKParameters_APIParam_1 If d2i_ECPKParameters_APIParam_1 is not NULL, then it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it. If the call is successful, d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data."
0,0,"EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key in EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 or NULL if the key is not of the correct type",,,null,"EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key in EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 or NULL if the key is not of the correct type.","EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key in EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 or NULL if the key is not of the correct type."
0,0,The return value is the total number of curves available,,,null,The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not).,"Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,The function EVP_PKEY_CTX_get_cb_APIName returns the key or parameter generation callback,,,null,The function EVP_PKEY_CTX_get_cb_APIName returns the key or parameter generation callback.,The function EVP_PKEY_set_cb_APIName sets the key or parameter generation callback to EVP_PKEY_CTX_get_cb_APIParam_0. The function EVP_PKEY_CTX_get_cb_APIName returns the key or parameter generation callback.
8,0,"Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available",,,null,"Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available.","Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,"If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, the first EC_get_builtin_curves_APIParam_2 curves will be returned",,,null,"If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned.","Whilst the library can be used to create any curve using the functions described above, there are also a number of predefined curves that are available. In order to obtain a list of all of the predefined curves, call the function EC_get_builtin_curves. The parameter EC_get_builtin_curves_APIParam_1 should be an array of EC_builtin_curve structures of size EC_get_builtin_curves_APIParam_2. The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves. If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, then the first EC_get_builtin_curves_APIParam_2 curves will be returned. Otherwise the total number of curves will be provided. The return value is the total number of curves available (whether that number has been populated in EC_get_builtin_curves_APIParam_1 or not). Passing a NULL EC_get_builtin_curves_APIParam_1, or setting EC_get_builtin_curves_APIParam_2 to 0 will do nothing other than return the total number of curves available. The EC_builtin_curve structure is defined as follows:"
0,0,DSA_set_method_APIName returns non-zero if the provided DSA_set_method_APIParam_2 was successfully set as the method for DSA_set_method_APIParam_1,,,null,DSA_set_method_APIName returns non-zero if the provided DSA_set_method_APIParam_2 was successfully set as the method for DSA_set_method_APIParam_1 (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).,DSA_set_method_APIName returns non-zero if the provided DSA_set_method_APIParam_2 was successfully set as the method for DSA_set_method_APIParam_1 (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).
0,0,ASN1_OBJECT_free_APIName returns no value,,,null,ASN1_OBJECT_free_APIName returns no value.,ASN1_OBJECT_free_APIName returns no value.
0,0,BIO_tell_APIName returns the current file position by calling lseek,,,null,"BIO_tell_APIName returns the current file position by calling lseek(fd, 0, 1).","BIO_tell_APIName returns the current file position by calling lseek(fd, 0, 1)."
0,0,BN_RECP_CTX_init_APIName and BN_RECP_CTX_free_APIName have no return values,,,null,BN_RECP_CTX_init_APIName and BN_RECP_CTX_free_APIName have no return values.,BN_RECP_CTX_init_APIName and BN_RECP_CTX_free_APIName have no return values.
0,0,DH_OpenSSL_APIName and DH_get_default_method_APIName return pointers to the respective DH_OpenSSL_APIParam_0 DH_get_default_method_APIParam_0s,,,null,DH_OpenSSL_APIName and DH_get_default_method_APIName return pointers to the respective DH_OpenSSL_APIParam_0 DH_get_default_method_APIParam_0s.,DH_OpenSSL_APIName and DH_get_default_method_APIName return pointers to the respective DH_OpenSSL_APIParam_0 DH_get_default_method_APIParam_0s.
0,0,SSL_get_options_APIName returns the options set for SSL_get_options_APIParam_1,,,null,SSL_get_options_APIName returns the options set for SSL_get_options_APIParam_1.,SSL_get_options_APIName returns the options set for SSL_get_options_APIParam_1.
0,0,a new ASN1_TIME structure is allocated and returned,1,,If ASN1_TIME_set_APIParam_1 is NULL,"If ASN1_TIME_set_APIParam_1 is NULL , a new ASN1_TIME structure is allocated and returned.","The function ASN1_TIME_set_APIName sets the ASN1_TIME structure ASN1_TIME_set_APIParam_1 to the time represented by the time_t value ASN1_TIME_set_APIParam_2. If ASN1_TIME_set_APIParam_1 is NULL , a new ASN1_TIME structure is allocated and returned."
0,0,SSL_get_cipher_bits_APIName is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version_APIName returns the protocol name,,,null,SSL_get_cipher_bits_APIName is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version_APIName returns the protocol name.,SSL_get_cipher_APIName and SSL_get_cipher_name_APIName are identical macros to obtain the name of the currently used cipher. SSL_get_cipher_bits_APIName is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version_APIName returns the protocol name. See SSL_CIPHER_get_name_APIName for more details.
0,0,only the length is calculated and returned,1,,If i2d_SSL_SESSION_APIParam_2 is the NULL pointer,"If i2d_SSL_SESSION_APIParam_2 is the NULL pointer, only the length is calculated and returned.","i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2. The length of the resulting ASN1 representation is returned. If i2d_SSL_SESSION_APIParam_2 is the NULL pointer, only the length is calculated and returned."
0,0,"If an unrecognised error code is passed to X509_verify_cert_error_string_APIName, the numerical value of the unknown code is returned in a static buffer",,,null,"If an unrecognised error code is passed to X509_verify_cert_error_string_APIName, the numerical value of the unknown code is returned in a static buffer.","If an unrecognised error code is passed to X509_verify_cert_error_string_APIName, the numerical value of the unknown code is returned in a static buffer. This is not thread safe but will never happen unless an invalid code is passed."
0,0,The length of the resulting ASN1 representation is returned,,,null,The length of the resulting ASN1 representation is returned.,"i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2. The length of the resulting ASN1 representation is returned. If i2d_SSL_SESSION_APIParam_2 is the NULL pointer, only the length is calculated and returned."
0,0,SSL_CTX_get_session_cache_mode_APIName returns the currently set cache mode,,,null,SSL_CTX_get_session_cache_mode_APIName returns the currently set cache mode.,SSL_CTX_get_session_cache_mode_APIName returns the currently set cache mode.
0,0,EC_get_builtin_curves returns the number of builtin curves that are available,,,null,EC_get_builtin_curves returns the number of builtin curves that are available.,EC_get_builtin_curves returns the number of builtin curves that are available.
0,0,The return value points to the certificate presented by the peer,,,null,The return value points to the certificate presented by the peer.,The return value points to the certificate presented by the peer.
0,0,SSL_CTX_sess_cache_full_APIName returns the number of sessions that were removed,,,null,SSL_CTX_sess_cache_full_APIName returns the number of sessions that were removed  .,SSL_CTX_sess_cache_full_APIName returns the number of sessions that were removed because the maximum session cache size was exceeded.
0,0,SSL_state_string_long_APIName returns a string indicating the current state of the SSL object SSL_state_string_long_APIParam_1,,,null,SSL_state_string_long_APIName returns a string indicating the current state of the SSL object SSL_state_string_long_APIParam_1.,SSL_state_string_long_APIName returns a string indicating the current state of the SSL object SSL_state_string_long_APIParam_1.
0,0,OBJ_dup_APIName returns a copy of OBJ_dup_APIParam_1,,,null,OBJ_dup_APIName returns a copy of OBJ_dup_APIParam_1.,OBJ_dup_APIName returns a copy of OBJ_dup_APIParam_1.
0,0,X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers,,,null,X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers.,"X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers. When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with ""."") rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively. The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed. Applications must not free the return value."
0,0,"SSL_get_default_timeout_APIName return this hardcoded value, which is 300 seconds for all currently supported protocols",,,null,"SSL_get_default_timeout_APIName return this hardcoded value, which is 300 seconds for all currently supported protocols (SSLv2, SSLv3, and TLSv1).","SSL_get_default_timeout_APIName return this hardcoded value, which is 300 seconds for all currently supported protocols (SSLv2, SSLv3, and TLSv1)."
0,0,BIO_s_socket_APIName returns the socket BIO method,,,null,BIO_s_socket_APIName returns the socket BIO method.,BIO_s_socket_APIName returns the socket BIO method.
0,0,The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed,,,null,The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed.,"X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers. When wildcard matching is not disabled, or when a reference identifier specifies a parent domain (starts with ""."") rather than a hostname, the peer name may be a wildcard name or a sub-domain of the reference identifier respectively. The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed. Applications must not free the return value."
0,0,SSL_CTX_get_timeout_APIName returns the currently set timeout value,,,null,SSL_CTX_get_timeout_APIName returns the currently set timeout value.,SSL_CTX_get_timeout_APIName returns the currently set timeout value.
0,0,n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName,,,null,n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName.,"CRYPTO_lock_APIName is used to lock and unlock the locks. mode is a bitfield describing what should be done with the lock. n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName. mode can be combined from 1,2,4,8. These values are pairwise exclusive, with undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE should not be used together):"
0,0,This pointer returned corresponds to the internal signature value if CMS_SignerInfo_get0_signature_APIParam_1 so it may be read or modified,,,null,This pointer returned corresponds to the internal signature value if CMS_SignerInfo_get0_signature_APIParam_1 so it may be read or modified.,CMS_SignerInfo_get0_signature_APIName retrieves the signature associated with CMS_SignerInfo_get0_signature_APIParam_1 in a pointer to an ASN1_OCTET_STRING structure. This pointer returned corresponds to the internal signature value if CMS_SignerInfo_get0_signature_APIParam_1 so it may be read or modified.
0,0,SSL_CTX_sess_accept_APIName returns the number of started SSL/TLS handshakes in server mode,,,null,SSL_CTX_sess_accept_APIName returns the number of started SSL/TLS handshakes in server mode.,SSL_CTX_sess_accept_APIName returns the number of started SSL/TLS handshakes in server mode.
0,0,BIO_get_buffer_num_lines_APIName returns the number of lines currently buffered,,,null,BIO_get_buffer_num_lines_APIName returns the number of lines currently buffered.,BIO_get_buffer_num_lines_APIName returns the number of lines currently buffered.
0,0,SSL_CTX_sess_cb_hits_APIName returns the number of successfully retrieved sessions from the external session cache in server mode,,,null,SSL_CTX_sess_cb_hits_APIName returns the number of successfully retrieved sessions from the external session cache in server mode.,SSL_CTX_sess_cb_hits_APIName returns the number of successfully retrieved sessions from the external session cache in server mode.
0,0,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 - bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the carry",,,null,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 - bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the carry (1 if bn_sub_words_APIParam_3 bn_add_words_APIParam_3 > bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, 0 otherwise).","bn_sub_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 - bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the carry (1 if bn_sub_words_APIParam_3 bn_add_words_APIParam_3 > bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, 0 otherwise)."
0,0,For all current standard OpenSSL public key algorithms SHA1 is returned,,,null,For all current standard OpenSSL public key algorithms SHA1 is returned.,For all current standard OpenSSL public key algorithms SHA1 is returned.
0,0,The pointer to the SSL_CTX object is returned,,,null,The pointer to the SSL_CTX object is returned.,The pointer to the SSL_CTX object is returned.
0,0,SSL_set_shutdown_APIName does not return diagnostic information,,,null,SSL_set_shutdown_APIName does not return diagnostic information.,SSL_set_shutdown_APIName does not return diagnostic information.
0,0,"MD2_APIName, MD4_APIName, and MD5_APIName return pointers to the hash value",,,null,"MD2_APIName, MD4_APIName, and MD5_APIName return pointers to the hash value.","MD2_APIName, MD4_APIName, and MD5_APIName return pointers to the hash value."
0,0,SSL_CTX_get_session_cache_mode_APIName returns the currently used cache mode,,,null,SSL_CTX_get_session_cache_mode_APIName returns the currently used cache mode.,SSL_CTX_get_session_cache_mode_APIName returns the currently used cache mode.
0,0,"The BIO_push_APIName function appends the BIO BIO_push_APIParam_2 to BIO_push_APIParam_1, BIO_push_APIName returns BIO_push_APIParam_1",,,null,"The BIO_push_APIName function appends the BIO BIO_push_APIParam_2 to BIO_push_APIParam_1, BIO_push_APIName returns BIO_push_APIParam_1.","The BIO_push_APIName function appends the BIO BIO_push_APIParam_2 to BIO_push_APIParam_1, BIO_push_APIName returns BIO_push_APIParam_1."
0,0,SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1,,,null,SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1.,"SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1. SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different. If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel."
0,0,"SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different",,,null,"SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different.","SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1. SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different. If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel."
0,0,"If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel",,,null,"If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel.","SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1. SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different. If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel."
0,0,EVP_CIPHER_type_APIName and EVP_CIPHER_CTX_type_APIName return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if NID has no defined OBJECT IDENTIFIER,,,null,EVP_CIPHER_type_APIName and EVP_CIPHER_CTX_type_APIName return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if NID has no defined OBJECT IDENTIFIER.,EVP_CIPHER_type_APIName and EVP_CIPHER_CTX_type_APIName return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if NID has no defined OBJECT IDENTIFIER.
0,0,"BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the amount of pending data",,,null,"BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the amount of pending data.","BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the amount of pending data."
0,0,SSL_get_shutdown_APIName returns the shutdown mode of SSL_get_shutdown_APIParam_1,,,null,SSL_get_shutdown_APIName returns the shutdown mode of SSL_get_shutdown_APIParam_1.,SSL_get_shutdown_APIName returns the shutdown mode of SSL_get_shutdown_APIParam_1.
0,0,SSL_want_APIName returns state information for the SSL object SSL_want_APIParam_1,,,null,SSL_want_APIName returns state information for the SSL object SSL_want_APIParam_1.,SSL_want_APIName returns state information for the SSL object SSL_want_APIParam_1.
0,0,SSL_CTX_sess_accept_good_APIName returns the number of successfully established SSL/TLS sessions in server mode,,,null,SSL_CTX_sess_accept_good_APIName returns the number of successfully established SSL/TLS sessions in server mode.,SSL_CTX_sess_accept_good_APIName returns the number of successfully established SSL/TLS sessions in server mode.
0,0,BIO_s_file_APIName returns the BIO file method,,,null,BIO_s_file_APIName returns the BIO file method.,BIO_s_file_APIName returns the BIO file method. As BIO_s_file_APIName name implies BIO_s_file_APIName is a wrapper round the stdio FILE structure and BIO_s_file_APIName is a source/sink BIO.
0,0,In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack,,,null,In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack.,d2i_SSL_SESSION_APIName returns a pointer to the newly allocated SSL_SESSION object. In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack.
0,0,d2i_SSL_SESSION_APIName returns a pointer to the newly allocated SSL_SESSION object,,,null,d2i_SSL_SESSION_APIName returns a pointer to the newly allocated SSL_SESSION object.,d2i_SSL_SESSION_APIName returns a pointer to the newly allocated SSL_SESSION object. In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack.
0,0,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2  mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word",,,null,"It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 * mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry).","bn_mul_words(bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2, bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3, mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3) operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2. It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 * mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word (carry)."
0,0,SSL_get_peer_certificate_APIName returns a pointer to the X509 certificate the peer presented,,,null,SSL_get_peer_certificate_APIName returns a pointer to the X509 certificate the peer presented.,"SSL_get_peer_certificate_APIName returns a pointer to the X509 certificate the peer presented. If the peer did not present a certificate, NULL is returned."
0,0,Otherwise RSA_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise RSA_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, RSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise RSA_new_APIName returns a pointer to the newly allocated structure."
0,0,The BIO_new_APIName function returns a new BIO using method BIO_new_APIParam_1,,,null,The BIO_new_APIName function returns a new BIO using method BIO_new_APIParam_1.,The BIO_new_APIName function returns a new BIO using method BIO_new_APIParam_1.
0,0,CMS_get1_crls_APIName returns any CRLs in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1,,,null,CMS_get1_crls_APIName returns any CRLs in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1.,CMS_add0_crl_APIName and CMS_add1_crl_APIName add CRL CMS_add0_crl_APIParam_2 CMS_add1_crl_APIParam_2 to CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1. CMS_get1_crls_APIName returns any CRLs in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1.
0,0,This function returns the RSA modulus size in bytes,,,null,This function returns the RSA modulus size in bytes.,This function returns the RSA modulus size in bytes. This function can be used to determine how much memory must be allocated for an RSA encrypted value.
0,0,SSL_CTX_sess_accept_renegotiate_APIName returns the number of start renegotiations in server mode,,,null,SSL_CTX_sess_accept_renegotiate_APIName returns the number of start renegotiations in server mode.,SSL_CTX_sess_accept_renegotiate_APIName returns the number of start renegotiations in server mode.
0,0,SSL_get_verify_depth_APIName returns the verification depth limit currently set in SSL_get_verify_depth_APIParam_1,,,null,SSL_get_verify_depth_APIName returns the verification depth limit currently set in SSL_get_verify_depth_APIParam_1.,"SSL_get_verify_depth_APIName returns the verification depth limit currently set in SSL_get_verify_depth_APIParam_1. If no limit has been explicitly set, -1 is returned and the default value will be used."
0,0,EC_METHOD_get_field_type returns an integer that identifies the type of field the EC_METHOD structure supports,,,null,EC_METHOD_get_field_type returns an integer that identifies the type of field the EC_METHOD structure supports.,EC_METHOD_get_field_type returns an integer that identifies the type of field the EC_METHOD structure supports.
0,0,"Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters",,,null,"Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters.","EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1. Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters. After such trimming the length of the data in EVP_DecodeBlock_APIParam_2 must be divisbile by 4. For every 4 input bytes exactly 3 output bytes will be produced. The output will be padded with 0 bits if necessary to ensure that the output is always 3 bytes for every 4 input bytes. This function will return the length of the data decoded or -1 on error."
0,0,Otherwise DH_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise DH_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, DH_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DH_new_APIName returns a pointer to the newly allocated structure."
0,0,BIO_ctrl_pending_APIName returns the number of bytes currently stored,,,null,BIO_ctrl_pending_APIName returns the number of bytes currently stored.,BIO_ctrl_pending_APIName returns the number of bytes currently stored.
0,0,"In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored",,,null,"In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored.","When loading or storing private keys, a password might be supplied to protect the private key. The way this password can be supplied may depend on the application. If only one private key is handled, it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively. If several keys have to be handled, it can be practical to ask for the password once, then keep it in memory and use it several times. In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored."
0,0,"A ""serverinfo"" extension is returned in response to an empty ClientHello Extension",,,null,"A ""serverinfo"" extension is returned in response to an empty ClientHello Extension.","These functions load ""serverinfo"" TLS ServerHello Extensions into the SSL_CTX. A ""serverinfo"" extension is returned in response to an empty ClientHello Extension."
0,0,EVP_MD_block_size_APIName and EVP_MD_CTX_block_size_APIName return the block size of the message digest when passed an EVP_MD_block_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure,,,null,EVP_MD_block_size_APIName and EVP_MD_CTX_block_size_APIName return the block size of the message digest when passed an EVP_MD_block_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure.,EVP_MD_block_size_APIName and EVP_MD_CTX_block_size_APIName return the block size of the message digest when passed an EVP_MD_block_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure.
0,0,At most the contents of the record will be returned,,,null,At most the contents of the record will be returned.,"SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,Otherwise number of recorded values is returned,,,null,Otherwise number of recorded values is returned.,Otherwise number of recorded values is returned.
0,0,"Only when the record has been received and processed completely, SSL_read_APIName will return reporting success",,,null,"Only when the record has been received and processed completely, SSL_read_APIName will return reporting success.","SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,i2d_ECPrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs,,,null,i2d_ECPrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs.,i2d_ECPrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by ERR_get_error_APIName .
0,0,The return value points to the certificate chain presented by the peer,,,null,The return value points to the certificate chain presented by the peer.,The return value points to the certificate chain presented by the peer.
0,0,The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2,,,null,The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2.,DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream (via CBC encryption). The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2. This function is used by Kerberos v4. Other applications should use EVP_DigestInit_APIName etc. instead.
0,0,BN_new_APIName returns a pointer to the BN_new_APIParam_0 initialised to the value 0,,,null,BN_new_APIName returns a pointer to the BN_new_APIParam_0 initialised to the value 0.,"BN_new_APIName returns a pointer to the BN_new_APIParam_0 initialised to the value 0. If the allocation fails, the allocation returns NULL and sets an error code that can be obtained by ERR_get_error_APIName ."
0,0,no more non-padding base 64 characters are expected,1,,If 0 is returned,If 0 is returned then no more non-padding base 64 characters are expected.,EVP_DecodeUpdate_APIName returns -1 on error and 0 or 1 on success. If 0 is returned then no more non-padding base 64 characters are expected.
0,0,SSL_CTX_get_cert_store_APIName returns a pointer to the current certificate verification storage,,,null,SSL_CTX_get_cert_store_APIName returns a pointer to the current certificate verification storage.,SSL_CTX_get_cert_store_APIName returns a pointer to the current certificate verification storage.
0,0,Otherwise RSA_new_method_APIName returns a pointer to the newly allocated structure,,,null,Otherwise RSA_new_method_APIName returns a pointer to the newly allocated structure.,RSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise RSA_new_method_APIName returns a pointer to the newly allocated structure.
0,0,"If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered",,,null,"If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered.","SSL_read_APIName works based on the SSL/TLS records. The data are received in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only when a record has been completely received, it can be processed (decryption and check of integrity). Therefore data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName. If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered. If no more bytes are in the buffer, SSL_read_APIName will trigger the processing of the next record. Only when the record has been received and processed completely, SSL_read_APIName will return reporting success. At most the contents of the record will be returned. As the size of an SSL/TLS record may exceed the maximum packet size of the underlying transport (eg TCP), it may be necessary to read several packets from the transport layer before the record is complete and SSL_read_APIName can succeed."
0,0,SSL_CTX_set_session_cache_mode_APIName returns the previously set cache mode,,,null,SSL_CTX_set_session_cache_mode_APIName returns the previously set cache mode.,SSL_CTX_set_session_cache_mode_APIName returns the previously set cache mode.
0,0,BN_BLINDING_thread_id_APIName returns a pointer to the thread id object within a BN_BLINDING_thread_id_APIParam_1 object,,,null,BN_BLINDING_thread_id_APIName returns a pointer to the thread id object within a BN_BLINDING_thread_id_APIParam_1 object.,BN_BLINDING_thread_id_APIName returns a pointer to the thread id object within a BN_BLINDING_thread_id_APIParam_1 object.
0,0,"EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return an EVP_get_digestbyname_APIParam_0 structure when passed a digest name, a digest NID or an ASN1_OBJECT structure respectively",,,null,"EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return an EVP_get_digestbyname_APIParam_0 structure when passed a digest name, a digest NID or an ASN1_OBJECT structure respectively.","EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return an EVP_get_digestbyname_APIParam_0 structure when passed a digest name, a digest NID or an ASN1_OBJECT structure respectively. The digest table must be initialized using, for example, OpenSSL_add_all_digests_APIName for these functions to work."
0,0,"EVP_MD_type_APIName, EVP_MD_pkey_type_APIName and EVP_MD_type_APIName return the NID of the corresponding OBJECT IDENTIFIER or NID_undef if none exists",,,null,"EVP_MD_type_APIName, EVP_MD_pkey_type_APIName and EVP_MD_type_APIName return the NID of the corresponding OBJECT IDENTIFIER or NID_undef if none exists.","EVP_MD_type_APIName, EVP_MD_pkey_type_APIName and EVP_MD_type_APIName return the NID of the corresponding OBJECT IDENTIFIER or NID_undef if none exists."
0,0,Calling BIO_free_all_APIName a single BIO has the same effect as calling BIO_free_APIName on it other than the discarded return value,,,null,Calling BIO_free_all_APIName a single BIO has the same effect as calling BIO_free_APIName on it other than the discarded return value.,Calling BIO_free_all_APIName a single BIO has the same effect as calling BIO_free_APIName on it other than the discarded return value.
0,0,SSL_CTX_sess_connect_good_APIName returns the number of successfully established SSL/TLS sessions in client mode,,,null,SSL_CTX_sess_connect_good_APIName returns the number of successfully established SSL/TLS sessions in client mode.,SSL_CTX_sess_connect_good_APIName returns the number of successfully established SSL/TLS sessions in client mode.
0,0,"The write operation was successful, the return value is the number of bytes actually written to the TLS/SSL connection",,,null,"The write operation was successful, the return value is the number of bytes actually written to the TLS/SSL connection.","The write operation was successful, the return value is the number of bytes actually written to the TLS/SSL connection."
0,0,"the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName",,,null,"the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName.","It should also be noted that many ENGINE API function calls that accept a structural reference will internally obtain another reference - typically this happens whenever the supplied ENGINE will be needed by OpenSSL after the function has returned. Eg. the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, then OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName. In a similar way, some functions will automatically release the structural reference passed to it if part of the function's job is to do so. Eg. the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions are used for iterating across the internal ENGINE list - the ENGINE_get_next_APIName and ENGINE_get_prev_APIName functions will return a new structural reference to the next (or previous) ENGINE in the list or NULL if at the end (or beginning) of the list, but in either case the structural reference passed to the function is released on behalf of the caller."
0,0," ,then an argument for a command is missing",1,,If -2 is returned,"If -2 is returned ,then an argument for a command is missing.","If -2 is returned ,then an argument for a command is missing."
0,0,SSL_get_cipher_list_APIName returns a pointer to the name of the SSL_CIPHER listed for SSL_get_cipher_list_APIParam_1 with SSL_get_cipher_list_APIParam_2,,,null,SSL_get_cipher_list_APIName returns a pointer to the name of the SSL_CIPHER listed for SSL_get_cipher_list_APIParam_1 with SSL_get_cipher_list_APIParam_2.,"SSL_get_cipher_list_APIName returns a pointer to the name of the SSL_CIPHER listed for SSL_get_cipher_list_APIParam_1 with SSL_get_cipher_list_APIParam_2. If SSL_get_cipher_list_APIParam_1 is NULL, no ciphers are available, or there are less ciphers than SSL_get_cipher_list_APIParam_2 available, NULL is returned."
0,0,SSL_get_mode_APIName returns the mode set for SSL_get_mode_APIParam_1,,,null,SSL_get_mode_APIName returns the mode set for SSL_get_mode_APIParam_1.,SSL_get_mode_APIName returns the mode set for SSL_get_mode_APIParam_1.
0,0,EVP_PKEY_meth_find_APIName returns a pointer to the found EVP_PKEY_meth_find_APIParam_0 object or returns NULL if not found,,,null,EVP_PKEY_meth_find_APIName returns a pointer to the found EVP_PKEY_meth_find_APIParam_0 object or returns NULL if not found.,EVP_PKEY_meth_find_APIName returns a pointer to the found EVP_PKEY_meth_find_APIParam_0 object or returns NULL if not found.
0,0,The string returned by SSL_CIPHER_description_APIName in case of success consists of cleartext information separated by one or more blanks in the following sequence,,,null,The string returned by SSL_CIPHER_description_APIName in case of success consists of cleartext information separated by one or more blanks in the following sequence:,The string returned by SSL_CIPHER_description_APIName in case of success consists of cleartext information separated by one or more blanks in the following sequence:
0,0,"The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate",,,null,"The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate.","The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate. If the chain only has a length of 2, the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server. For a longer chain, the client must send the complete chain (with the option to leave out the root CA certificate). This can only be accomplished by either adding the intermediate CA certificates into the trusted certificate store for the SSL_CTX object (resulting in having to add CA certificates that otherwise maybe would not be trusted), or by adding the chain certificates using the SSL_CTX_add_extra_chain_cert_APIName function, which is only available for the SSL_CTX object as a whole and that therefore probably can only apply for one client certificate, making the concept of the callback function (to allow the choice from several certificates) questionable."
0,0,EVP_PKEY_meth_new_APIName returns a pointer to a new EVP_PKEY_meth_new_APIParam_0 object or returns NULL on error,,,null,EVP_PKEY_meth_new_APIName returns a pointer to a new EVP_PKEY_meth_new_APIParam_0 object or returns NULL on error.,EVP_PKEY_meth_new_APIName returns a pointer to a new EVP_PKEY_meth_new_APIParam_0 object or returns NULL on error.
0,0,"As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer",,,null,"As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer.","As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer. An application must not rely on the error value of SSL_operation_APIName but must assure that the write buffer is always flushed first. Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue."
0,0,This function returns the size of an ASN.1 encoded DSA signature in bytes,,,null,This function returns the size of an ASN.1 encoded DSA signature in bytes.,This function returns the size of an ASN.1 encoded DSA signature in bytes. This function can be used to determine how much memory must be allocated for a DSA signature.
0,0,"That a certificate is returned does not indicate information about the verification state, use SSL_get_verify_result_APIName to check the verification state",,,null,"That a certificate is returned does not indicate information about the verification state, use SSL_get_verify_result_APIName to check the verification state.","That a certificate is returned does not indicate information about the verification state, use SSL_get_verify_result_APIName to check the verification state."
0,0,"Any function which encodes an X509 structure such as i2d_X509_APIName, i2d_X509_fp_APIName or i2d_X509_bio_APIName may return a stale encoding if the i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_bio_APIParam_2 structure has been modified after deserialization or previous serialization",,,null,"Any function which encodes an X509 structure such as i2d_X509_APIName, i2d_X509_fp_APIName or i2d_X509_bio_APIName may return a stale encoding if the i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_bio_APIParam_2 structure has been modified after deserialization or previous serialization.","Any function which encodes an X509 structure such as i2d_X509_APIName, i2d_X509_fp_APIName or i2d_X509_bio_APIName may return a stale encoding if the i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_bio_APIParam_2 structure has been modified after deserialization or previous serialization."
0,0,BN_CTX_init_APIName and BN_CTX_free_APIName have no return values,,,null,BN_CTX_init_APIName and BN_CTX_free_APIName have no return values.,BN_CTX_init_APIName and BN_CTX_free_APIName have no return values.
0,0,X509_STORE_set_verify_cb_APIName and X509_STORE_set_verify_cb_func_APIName do not return a value,,,null,X509_STORE_set_verify_cb_APIName and X509_STORE_set_verify_cb_func_APIName do not return a value.,X509_STORE_set_verify_cb_APIName and X509_STORE_set_verify_cb_func_APIName do not return a value.
0,0,ERR_peek_error_APIName returns the earliest error code from the thread's error queue without modifying it,,,null,ERR_peek_error_APIName returns the earliest error code from the thread's error queue without modifying it.,ERR_peek_error_APIName returns the earliest error code from the thread's error queue without modifying it.
0,0,these functions reverse the return value convention,,,null,WARNING: these functions reverse the return value convention.,"SSL_CTX_set_alpn_protos_APIName and SSL_set_alpn_protos_APIName return 0 on success, and non-0 on failure. WARNING: these functions reverse the return value convention."
0,0,BN_num_bytes_APIName returns the size of a BN_num_bytes_APIParam_1 in bytes,,,null,BN_num_bytes_APIName returns the size of a BN_num_bytes_APIParam_1 in bytes.,BN_num_bytes_APIName returns the size of a BN_num_bytes_APIParam_1 in bytes.
0,0,"X509_STORE_CTX_cleanup_APIName, X509_STORE_CTX_free_APIName, X509_STORE_CTX_trusted_stack_APIName, X509_STORE_CTX_set_cert_APIName, X509_STORE_CTX_set_chain_APIName, X509_STORE_CTX_set0_crls_APIName and X509_STORE_CTX_set0_param_APIName do not return values",,,null,"X509_STORE_CTX_cleanup_APIName, X509_STORE_CTX_free_APIName, X509_STORE_CTX_trusted_stack_APIName, X509_STORE_CTX_set_cert_APIName, X509_STORE_CTX_set_chain_APIName, X509_STORE_CTX_set0_crls_APIName and X509_STORE_CTX_set0_param_APIName do not return values.","X509_STORE_CTX_cleanup_APIName, X509_STORE_CTX_free_APIName, X509_STORE_CTX_trusted_stack_APIName, X509_STORE_CTX_set_cert_APIName, X509_STORE_CTX_set_chain_APIName, X509_STORE_CTX_set0_crls_APIName and X509_STORE_CTX_set0_param_APIName do not return values."
0,0,This function will return available shared ciphersuites whether or not they are enabled,,,null,This function will return available shared ciphersuites whether or not they are enabled.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
0,0,"If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity",,,null,"If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity.","If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity. Both are NULL-terminated. SSL_get_psk_identity_hint_APIName may return NULL if no PSK identity hint was used during the connection setup."
0,0,The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW,,,null,The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW.,The Elliptic Curve library provides a number of different implementations through a single common interface. When constructing a curve using EC_GROUP_new (see EC_GROUP_new_APIName ) an implementation method must be provided. The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW. It is important that the correct implementation type for the form of curve selected is used.
0,0,If the supplied buffer is not large enough to contain the complete list of names a truncated list of names will be returned,,,null,If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned.,SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server. SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer. A pointer to SSL_get_shared_ciphers_APIParam_2 is returned on success or NULL on error. If the supplied buffer is not large enough to contain the complete list of names then a truncated list of names will be returned. Note that just because a ciphersuite is available (ie it is configured in the cipher list) and shared by both the client and the server it does not mean that it is enabled (for example some ciphers may not be usable by a server if there is not a suitable certificate configured). This function will return available shared ciphersuites whether or not they are enabled. This is a server side function only and must only be called after the completion of the initial handshake.
0,0,SSL_CTX_get_max_cert_list_APIName and SSL_get_max_cert_list_APIName return the currently set value,,,null,SSL_CTX_get_max_cert_list_APIName and SSL_get_max_cert_list_APIName return the currently set value.,SSL_CTX_get_max_cert_list_APIName and SSL_get_max_cert_list_APIName return the currently set value.
0,0,EC_KEY_get_conv_form return the point_conversion_form for the EC_KEY,,,null,EC_KEY_get_conv_form return the point_conversion_form for the EC_KEY.,EC_KEY_get_conv_form return the point_conversion_form for the EC_KEY.
0,0,BIO_f_buffer_APIName returns the buffering BIO method,,,null,BIO_f_buffer_APIName returns the buffering BIO method.,BIO_f_buffer_APIName returns the buffering BIO method.
0,0,X509_verify_cert_error_string_APIName returns a human readable error string for verification error X509_verify_cert_error_string_APIParam_1,,,null,X509_verify_cert_error_string_APIName returns a human readable error string for verification error X509_verify_cert_error_string_APIParam_1.,X509_verify_cert_error_string_APIName returns a human readable error string for verification error X509_verify_cert_error_string_APIParam_1.
0,0,EC_GROUP_set_seed returns the length of the seed that has been set,,,null,EC_GROUP_set_seed returns the length of the seed that has been set.,"EC_GROUP_set_seed returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1. On error 0 is returned."
0,0,A return value of -2 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised,,,null,A return value of -2 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised.,A return value of -2 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised.
0,0,OCSP_resp_get0_signature_APIName returns the signature from OCSP_resp_get0_signature_APIParam_1,,,null,OCSP_resp_get0_signature_APIName returns the signature from OCSP_resp_get0_signature_APIParam_1.,OCSP_resp_get0_signature_APIName returns the signature from OCSP_resp_get0_signature_APIParam_1.
0,0,"If the time structure has invalid format, ASN1_TIME_print_APIName prints out ""Bad time value"" and returns an error",,,null,"If the time structure has invalid format, ASN1_TIME_print_APIName prints out ""Bad time value"" and returns an error.","ASN1_TIME_print_APIName prints out the time ASN1_TIME_print_APIParam_2 to BIO ASN1_TIME_print_APIParam_1 in human readable format. BIO ASN1_TIME_print_APIParam_1 will be of the format MMM DD HH:MM:SS YYYY [GMT], for example ""Feb 3 00:55:52 2015 GMT"" it does not include a newline. If the time structure has invalid format, ASN1_TIME_print_APIName prints out ""Bad time value"" and returns an error."
0,0,EVP_PKEY_free_APIName does not return a value,,,null,EVP_PKEY_free_APIName does not return a value.,EVP_PKEY_free_APIName does not return a value.
0,0,BIO_ctrl_reset_read_request_APIName can also be used to reset the value returned by BIO_get_read_request_APIName to zero,,,null,BIO_ctrl_reset_read_request_APIName can also be used to reset the value returned by BIO_get_read_request_APIName to zero.,BIO_ctrl_reset_read_request_APIName can also be used to reset the value returned by BIO_get_read_request_APIName to zero.
0,0,"BIO_pop_APIName removes the BIO BIO_pop_APIParam_1 from a chain and returns the next BIO in the chain, or NULL if there is no next BIO",,,null,"BIO_pop_APIName removes the BIO BIO_pop_APIParam_1 from a chain and returns the next BIO in the chain, or NULL if there is no next BIO.","BIO_pop_APIName removes the BIO BIO_pop_APIParam_1 from a chain and returns the next BIO in the chain, or NULL if there is no next BIO. The removed BIO then becomes a single BIO with no association with the original chain, single BIO with no association with the original chain can thus be freed or attached to a different chain."
0,0,"then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation",1,,If BIO_should_retry_APIName returns false,"If BIO_should_retry_APIName returns false ,then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation.","If BIO_should_retry_APIName returns false ,then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation. For example if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false then the cause will be that the connection closed. A similar condition on a file BIO will mean that it has reached EOF. Some BIO types may place additional information on the error queue. For more details see the individual BIO type manual pages."
0,0,the cause will be that the connection closed,1,,if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false,For example if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false then the cause will be that the connection closed.,"If BIO_should_retry_APIName returns false ,then the precise ""error condition"" depends on the BIO type that caused it and the return code of the BIO operation. For example if a call to BIO_read_APIName on a socket BIO returns 0 and BIO_should_retry_APIName is false then the cause will be that the connection closed. A similar condition on a file BIO will mean that it has reached EOF. Some BIO types may place additional information on the error queue. For more details see the individual BIO type manual pages."
0,0,ASN1_OBJECT CMS_get0_eContentType_APIName returns a pointer to the embedded content type,,,null,ASN1_OBJECT *CMS_get0_eContentType_APIName returns a pointer to the embedded content type.,ASN1_OBJECT *CMS_get0_eContentType_APIName returns a pointer to the embedded content type.
0,0,"BIO_free_APIName frees up a single BIO, BIO_vfree_APIName also frees up a single BIO but BIO_vfree_APIName does not return a value",,,null,"BIO_free_APIName frees up a single BIO, BIO_vfree_APIName also frees up a single BIO but BIO_vfree_APIName does not return a value.","BIO_free_APIName frees up a single BIO, BIO_vfree_APIName also frees up a single BIO but BIO_vfree_APIName does not return a value. Calling BIO_free_APIName may also have some effect on the underlying I/O structure, for example BIO_vfree_APIName may close the file being referred to under certain circumstances. For more details see the individual BIO_METHOD descriptions."
0,0,SSL_CTX_get_quiet_shutdown_APIName and SSL_get_quiet_shutdown return the current setting,,,null,SSL_CTX_get_quiet_shutdown_APIName and SSL_get_quiet_shutdown return the current setting.,SSL_CTX_get_quiet_shutdown_APIName and SSL_get_quiet_shutdown return the current setting.
0,0,SSL_CTX_set_client_CA_list_APIName and SSL_set_client_CA_list_APIName do not return diagnostic information,,,null,SSL_CTX_set_client_CA_list_APIName and SSL_set_client_CA_list_APIName do not return diagnostic information.,SSL_CTX_set_client_CA_list_APIName and SSL_set_client_CA_list_APIName do not return diagnostic information.
0,0,DSA_get_default_method_APIName returns a pointer to the current default DSA_METHOD,,,null,DSA_get_default_method_APIName returns a pointer to the current default DSA_METHOD.,"DSA_get_default_method_APIName returns a pointer to the current default DSA_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
0,0,"SSL_get_ciphers_APIName returns the stack of available SSL_CIPHERs for SSL_get_cipher_list_APIParam_1, sorted by preference",,,null,"SSL_get_ciphers_APIName returns the stack of available SSL_CIPHERs for SSL_get_cipher_list_APIParam_1, sorted by preference.","SSL_get_ciphers_APIName returns the stack of available SSL_CIPHERs for SSL_get_cipher_list_APIParam_1, sorted by preference. If SSL_get_cipher_list_APIParam_1 is NULL or no ciphers are available, NULL is returned."
0,0,BN_CTX_start_APIName and BN_CTX_end_APIName return no values,,,null,BN_CTX_start_APIName and BN_CTX_end_APIName return no values.,BN_CTX_start_APIName and BN_CTX_end_APIName return no values.
0,0,i2d_ECPKParameters_APIName returns the number of bytes successfully encoded or a negative value if an error occurs,,,null,i2d_ECPKParameters_APIName returns the number of bytes successfully encoded or a negative value if an error occurs.,i2d_ECPKParameters_APIName returns the number of bytes successfully encoded or a negative value if an error occurs.
0,0,"EVP_md_null_APIName, EVP_md2_APIName, EVP_md5_APIName, EVP_sha_APIName, EVP_sha1_APIName, EVP_dss_APIName, EVP_dss1_APIName, EVP_mdc2_APIName and EVP_ripemd160_APIName return pointers to the corresponding EVP_MD structures",,,null,"EVP_md_null_APIName, EVP_md2_APIName, EVP_md5_APIName, EVP_sha_APIName, EVP_sha1_APIName, EVP_dss_APIName, EVP_dss1_APIName, EVP_mdc2_APIName and EVP_ripemd160_APIName return pointers to the corresponding EVP_MD structures.","EVP_md_null_APIName, EVP_md2_APIName, EVP_md5_APIName, EVP_sha_APIName, EVP_sha1_APIName, EVP_dss_APIName, EVP_dss1_APIName, EVP_mdc2_APIName and EVP_ripemd160_APIName return pointers to the corresponding EVP_MD structures."
0,0,SSL_CTX_get_verify_depth_APIName returns the verification depth limit currently set in SSL_CTX_get_verify_depth_APIParam_1,,,null,SSL_CTX_get_verify_depth_APIName returns the verification depth limit currently set in SSL_CTX_get_verify_depth_APIParam_1.,"SSL_CTX_get_verify_depth_APIName returns the verification depth limit currently set in SSL_CTX_get_verify_depth_APIParam_1. If no limit has been explicitly set, -1 is returned and the default value will be used."
0,0,ECDSA_size_APIName returns the maximum length of a DER encoded ECDSA signature created with the private EC key ECDSA_size_APIParam_1,,,null,ECDSA_size_APIName returns the maximum length of a DER encoded ECDSA signature created with the private EC key ECDSA_size_APIParam_1.,ECDSA_size_APIName returns the maximum length of a DER encoded ECDSA signature created with the private EC key ECDSA_size_APIParam_1.
0,0,SSL_get_ex_data_X509_STORE_CTX_idx_APIName returns the index number under which the pointer to the SSL object is stored into the X509_STORE_CTX object,,,null,SSL_get_ex_data_X509_STORE_CTX_idx_APIName returns the index number under which the pointer to the SSL object is stored into the X509_STORE_CTX object.,SSL_get_ex_data_X509_STORE_CTX_idx_APIName returns the index number under which the pointer to the SSL object is stored into the X509_STORE_CTX object.
0,0,"SSL_get_verify_result_APIName returns the result of the verification of the X509 certificate presented by the peer, if any",,,null,"SSL_get_verify_result_APIName returns the result of the verification of the X509 certificate presented by the peer, if any.","SSL_get_verify_result_APIName returns the result of the verification of the X509 certificate presented by the peer, if any."
0,0,SSL_CTX_get_mode_APIName returns the mode set for SSL_CTX_get_mode_APIParam_1,,,null,SSL_CTX_get_mode_APIName returns the mode set for SSL_CTX_get_mode_APIParam_1.,SSL_CTX_get_mode_APIName returns the mode set for SSL_CTX_get_mode_APIParam_1.
0,0,BN_MONT_CTX_init_APIName and BN_MONT_CTX_free_APIName have no return values,,,null,BN_MONT_CTX_init_APIName and BN_MONT_CTX_free_APIName have no return values.,BN_MONT_CTX_init_APIName and BN_MONT_CTX_free_APIName have no return values.
0,0,"When a hash table entry is replaced, lh_<type>_insert_APIName returns the value being replaced",,,null,"When a hash table entry is replaced, lh_<type>_insert_APIName returns the value being replaced.","When a hash table entry is replaced, lh_<type>_insert_APIName returns the value being replaced. NULL is returned on normal operation and on error."
0,0,OBJ_length_APIName returns the size of the content octets of OBJ_length_APIParam_1,,,null,OBJ_length_APIName returns the size of the content octets of OBJ_length_APIParam_1.,OBJ_length_APIName returns the size of the content octets of OBJ_length_APIParam_1.
0,0,"If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail",,,null,"If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail.","If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail. OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above."
0,0,"OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above",,,null,"OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above.","If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail. OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above."
0,0,"If padding is disabled, EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block",,,null,"If padding is disabled, then EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size.","If padding is disabled, then EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block: that is if the total data length is not a multiple of the block size."
0,0,SSL_CTX_set_cert_store_APIName does not return diagnostic output,,,null,SSL_CTX_set_cert_store_APIName does not return diagnostic output.,SSL_CTX_set_cert_store_APIName does not return diagnostic output.
0,0,EC_KEY_get_flags returns the current flags that are set for this EC_KEY,,,null,EC_KEY_get_flags returns the current flags that are set for this EC_KEY.,EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object. Any flags that are already set are left set. The currently defined standard flags are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h. EC_KEY_get_flags returns the current flags that are set for this EC_KEY. EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter. All other flags are left in their existing state.
0,0,BN_bn2bin_APIName returns the length of the big-endian number placed at BN_bn2bin_APIParam_2,,,null,BN_bn2bin_APIName returns the length of the big-endian number placed at BN_bn2bin_APIParam_2.,"BN_bn2bin_APIName returns the length of the big-endian number placed at BN_bn2bin_APIParam_2. BN_bin2bn_APIName returns the BN_bn2bin_APIParam_1 BN_bin2bn_APIParam_3, NULL on error."
0,0,RAND_get_default_method_APIName returns a pointer to the current RAND_METHOD,,,null,RAND_get_default_method_APIName returns a pointer to the current RAND_METHOD.,"RAND_get_default_method_APIName returns a pointer to the current RAND_METHOD. However, the meaningfulness of this result is dependent on whether the ENGINE API is being used, so this function is no longer recommended."
0,0,BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively,,,null,BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively.,"BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively. For negative numbers, the string is prefaced with a leading '-'. The string must be freed later using OPENSSL_free_APIName."
0,0,This function returns the Diffie-Hellman size in bytes,,,null,This function returns the Diffie-Hellman size in bytes.,This function returns the Diffie-Hellman size in bytes. This function can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key_APIName.
0,0,"If the callback returns no certificate, the OpenSSL library will not send a certificate",,,null,"If the callback returns no certificate, the OpenSSL library will not send a certificate.","If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear_APIName . If the callback returns no certificate, the OpenSSL library will not send a certificate."
0,0,SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions,,,null,SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions.,SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions. In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit. In server mode a session successfully retrieved from internal or external cache is counted as a hit.
0,0,DH_set_default_method_APIName returns no value,,,null,DH_set_default_method_APIName returns no value.,DH_set_default_method_APIName returns no value.
0,0,SSL_CTX_set_max_cert_list_APIName and SSL_set_max_cert_list_APIName return the previously set value,,,null,SSL_CTX_set_max_cert_list_APIName and SSL_set_max_cert_list_APIName return the previously set value.,SSL_CTX_set_max_cert_list_APIName and SSL_set_max_cert_list_APIName return the previously set value.
0,0,SSL_CONF_CTX_set_flags_APIName and SSL_CONF_CTX_clear_flags_APIName returns the new flags value after setting or clearing flags,,,null,SSL_CONF_CTX_set_flags_APIName and SSL_CONF_CTX_clear_flags_APIName returns the new flags value after setting or clearing flags.,SSL_CONF_CTX_set_flags_APIName and SSL_CONF_CTX_clear_flags_APIName returns the new flags value after setting or clearing flags.
0,0,"If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions",,,null,"If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions.","If a callback function is defined and no certificate was yet defined for the SSL object, the callback function will be called. If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions. Thus it will permanently install the certificate and key for this SSL object. It will not be reset by calling SSL_clear_APIName . If the callback returns no certificate, the OpenSSL library will not send a certificate."
0,0,"This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method_APIName",,,null,"This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method_APIName.","RSA_get_method_APIName returns a pointer to the RSA_METHOD being used by RSA_get_method_APIParam_1 RSA_set_method_APIParam_1. This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method_APIName."
0,0,RSA_get_method_APIName returns a pointer to the RSA_METHOD being used by RSA_get_method_APIParam_1 RSA_set_method_APIParam_1,,,null,RSA_get_method_APIName returns a pointer to the RSA_METHOD being used by RSA_get_method_APIParam_1 RSA_set_method_APIParam_1.,"RSA_get_method_APIName returns a pointer to the RSA_METHOD being used by RSA_get_method_APIParam_1 RSA_set_method_APIParam_1. This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method_APIName."
0,0,EVP_PKEY_get0_engine_APIName returns a reference to the ENGINE handling EVP_PKEY_get0_engine_APIParam_1,,,null,EVP_PKEY_get0_engine_APIName returns a reference to the ENGINE handling EVP_PKEY_get0_engine_APIParam_1.,EVP_PKEY_get0_engine_APIName returns a reference to the ENGINE handling EVP_PKEY_get0_engine_APIParam_1.
0,0,Otherwise DSA_new_method_APIName returns a pointer to the newly allocated structure,,,null,Otherwise DSA_new_method_APIName returns a pointer to the newly allocated structure.,DSA_new_method_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName if the allocation fails. Otherwise DSA_new_method_APIName returns a pointer to the newly allocated structure.
0,0,EVP_PKEY_size_APIName returns the maximum size of a signature in bytes,,,null,EVP_PKEY_size_APIName returns the maximum size of a signature in bytes.,EVP_PKEY_size_APIName returns the maximum size of a signature in bytes. The actual signature returned by EVP_SignFinal_APIName may be smaller.
0,0,The actual signature returned by EVP_SignFinal_APIName may be smaller,,,null,The actual signature returned by EVP_SignFinal_APIName may be smaller.,EVP_PKEY_size_APIName returns the maximum size of a signature in bytes. The actual signature returned by EVP_SignFinal_APIName may be smaller.
0,0,The context returned by BIO_get_md_ctx_APIName is an internal context structure,,,null,The context returned by BIO_get_md_ctx_APIName is an internal context structure.,The context returned by BIO_get_md_ctx_APIName is an internal context structure. Changes made to this context will affect the digest BIO itself and the context pointer will become invalid when the digest BIO is freed.
0,0,"Initially, the default RAND_METHOD is the OpenSSL internal implementation, as returned by RAND_SSLeay_APIName",,,null,"Initially, the default RAND_METHOD is the OpenSSL internal implementation, as returned by RAND_SSLeay_APIName.","Initially, the default RAND_METHOD is the OpenSSL internal implementation, as returned by RAND_SSLeay_APIName."
0,0,The functions return the values indicated in the DESCRIPTION section,,,null,The functions return the values indicated in the DESCRIPTION section.,The functions return the values indicated in the DESCRIPTION section.
0,0,RAND_set_rand_method_APIName returns no value,,,null,RAND_set_rand_method_APIName returns no value.,RAND_set_rand_method_APIName returns no value. RAND_get_rand_method_APIName and RAND_SSLeay_APIName return pointers to the respective methods.
0,0,It is mandatory to destroy the SSL object using SSL_free_APIName and create a new one to return to the previous state,,,null,It is therefore mandatory to destroy the SSL object using SSL_free_APIName and create a new one to return to the previous state.,"Once the SSL object has been used in conjunction with the callback function, the certificate will be set for the SSL object and will not be cleared even when SSL_clear_APIName is being called. It is therefore mandatory to destroy the SSL object using SSL_free_APIName and create a new one to return to the previous state."
0,0,The return value of CMS_get0_content_APIName is a pointer to the CMS_get0_content_APIParam_0 content pointer,,,null,The return value of CMS_get0_content_APIName is a pointer to the CMS_get0_content_APIParam_0 content pointer.,The return value of CMS_get0_content_APIName is a pointer to the CMS_get0_content_APIParam_0 content pointer. That means that for example:
0,0,"SSL_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_get_quiet_shutdown_APIParam_1",,,null,"SSL_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_get_quiet_shutdown_APIParam_1.","SSL_get_quiet_shutdown_APIName returns the ""quiet shutdown"" setting of SSL_get_quiet_shutdown_APIParam_1."
0,0,"SSL_get_rbio_APIName and SSL_get_wbio_APIName return pointers to the BIOs for the read or the write channel, which can be different",,,null,"SSL_get_rbio_APIName and SSL_get_wbio_APIName return pointers to the BIOs for the read or the write channel, which can be different.","SSL_get_rbio_APIName and SSL_get_wbio_APIName return pointers to the BIOs for the read or the write channel, which can be different. The reference count of the BIO is not incremented."
0,0,RAND_get_rand_method_APIName and RAND_SSLeay_APIName return pointers to the respective methods,,,null,RAND_get_rand_method_APIName and RAND_SSLeay_APIName return pointers to the respective methods.,RAND_set_rand_method_APIName returns no value. RAND_get_rand_method_APIName and RAND_SSLeay_APIName return pointers to the respective methods.
0,0,BIO_f_cipher_APIName returns the cipher BIO method,,,null,BIO_f_cipher_APIName returns the cipher BIO method.,"BIO_f_cipher_APIName returns the cipher BIO method. This is a filter BIO that encrypts any data written through it, and decrypts any data read from it. It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName, EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName."
0,0,OCSP_resp_find_APIName searches OCSP_resp_find_APIParam_1 for OCSP_resp_find_APIParam_2 and returns the index of the first matching entry after OCSP_resp_find_APIParam_3 or starting from the beginning if OCSP_resp_find_APIParam_3 is -1,,,null,OCSP_resp_find_APIName searches OCSP_resp_find_APIParam_1 for OCSP_resp_find_APIParam_2 and returns the index of the first matching entry after OCSP_resp_find_APIParam_3 or starting from the beginning if OCSP_resp_find_APIParam_3 is -1.,OCSP_resp_find_APIName searches OCSP_resp_find_APIParam_1 for OCSP_resp_find_APIParam_2 and returns the index of the first matching entry after OCSP_resp_find_APIParam_3 or starting from the beginning if OCSP_resp_find_APIParam_3 is -1.
0,0,The return value is the number of bytes actually read from the TLS/SSL connection,,,null,The return value is the number of bytes actually read from the TLS/SSL connection.,The read operation was successful. The return value is the number of bytes actually read from the TLS/SSL connection.
0,0,SSL_get0_session_APIName returns a pointer to the actual session,,,null,SSL_get0_session_APIName returns a pointer to the actual session.,"SSL_get0_session_APIName returns a pointer to the actual session. As the reference counter is not incremented, the pointer is only valid while the connection is in use. If SSL_clear_APIName or SSL_free_APIName is called, the session may be removed completely (if considered bad), and the pointer obtained will become invalid. Even if the session is valid, it can be removed at any time due to timeout during SSL_CTX_flush_sessions_APIName ."
0,0,SSL_CONF_CTX_free_APIName does not return a value,,,null,SSL_CONF_CTX_free_APIName does not return a value.,SSL_CONF_CTX_free_APIName does not return a value.
0,0,EC_KEY_get0_private_key returns the private key associated with the EC_KEY,,,null,EC_KEY_get0_private_key returns the private key associated with the EC_KEY.,EC_KEY_get0_private_key returns the private key associated with the EC_KEY.
0,0,SSL_get_session_APIName returns a pointer to the SSL_get_session_APIParam_0 actually used in SSL_get_session_APIParam_1,,,null,SSL_get_session_APIName returns a pointer to the SSL_get_session_APIParam_0 actually used in SSL_get_session_APIParam_1.,"SSL_get_session_APIName returns a pointer to the SSL_get_session_APIParam_0 actually used in SSL_get_session_APIParam_1. The reference count of the SSL_get_session_APIParam_0 is not incremented, so that the pointer can become invalid by other operations."
0,0,OCSP_resp_get0_APIName returns the OCSP_resp_get0_APIParam_0 structure in OCSP_resp_get0_APIParam_1 corresponding to index OCSP_resp_get0_APIParam_2,,,null,OCSP_resp_get0_APIName returns the OCSP_resp_get0_APIParam_0 structure in OCSP_resp_get0_APIParam_1 corresponding to index OCSP_resp_get0_APIParam_2.,OCSP_resp_get0_APIName returns the OCSP_resp_get0_APIParam_0 structure in OCSP_resp_get0_APIParam_1 corresponding to index OCSP_resp_get0_APIParam_2. Where OCSP_resp_get0_APIParam_2 runs from 0 to OCSP_resp_count(bs) - 1.
0,0,"EVP_MD_size_APIName, EVP_MD_block_size_APIName, EVP_MD_CTX_size_APIName and EVP_MD_CTX_block_size_APIName return the digest or block size in bytes",,,null,"EVP_MD_size_APIName, EVP_MD_block_size_APIName, EVP_MD_CTX_size_APIName and EVP_MD_CTX_block_size_APIName return the digest or block size in bytes.","EVP_MD_size_APIName, EVP_MD_block_size_APIName, EVP_MD_CTX_size_APIName and EVP_MD_CTX_block_size_APIName return the digest or block size in bytes."
0,0,None of the functions presented here return any value,,,null,None of the functions presented here return any value.,None of the functions presented here return any value.
0,0,The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion,,,null,The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion.,"Never bother the application with retries if the transport is blocking. If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ. In a non-blocking environment applications must be prepared to handle incomplete read/write operations. In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report. The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion."
0,0,"In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report",,,null,"In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report.","Never bother the application with retries if the transport is blocking. If a renegotiation take place during normal operation, a SSL_read_APIName or SSL_write_APIName would return with -1 and indicate the need to retry with SSL_ERROR_WANT_READ. In a non-blocking environment applications must be prepared to handle incomplete read/write operations. In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report. The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion."
0,0,A new NID is returned for the created object,,,null,A new NID is returned for the created object.,"OBJ_create_APIName adds a new object to the internal table. OBJ_create_APIParam_1 is the numerical form of the object, OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name. A new NID is returned for the created object."
0,0,"EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_CIPHER structure when passed a cipher name, a NID or an ASN1_OBJECT structure",,,null,"EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_CIPHER structure when passed a cipher name, a NID or an ASN1_OBJECT structure.","EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_CIPHER structure when passed a cipher name, a NID or an ASN1_OBJECT structure."
0,0,EVP_MD_CTX_md_APIName returns the EVP_MD_CTX_md_APIParam_1 structure corresponding to the passed EVP_MD_CTX_md_APIParam_1,,,null,EVP_MD_CTX_md_APIName returns the EVP_MD_CTX_md_APIParam_1 structure corresponding to the passed EVP_MD_CTX_md_APIParam_1.,EVP_MD_CTX_md_APIName returns the EVP_MD_CTX_md_APIParam_1 structure corresponding to the passed EVP_MD_CTX_md_APIParam_1.
0,0,BIO_get_buffer_num_lines_APIName returns the number of lines buffered,,,null,BIO_get_buffer_num_lines_APIName returns the number of lines buffered (may be 0).,BIO_get_buffer_num_lines_APIName returns the number of lines buffered (may be 0).
0,0,"SSL_get1_curves_APIName returns the number of curves, which may be zero",,,null,"SSL_get1_curves_APIName returns the number of curves, which may be zero.","SSL_get1_curves_APIName returns the number of curves, which may be zero."
0,0,SSL_CTX_sess_get_cache_size_APIName returns the currently valid session cache size,,,null,SSL_CTX_sess_get_cache_size_APIName returns the currently valid session cache size.,SSL_CTX_sess_get_cache_size_APIName returns the currently valid session cache size.
0,0,Otherwise DSA_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise DSA_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, DSA_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise DSA_new_APIName returns a pointer to the newly allocated structure."
0,0,BIO_new_fd_APIName returns a file descriptor BIO using BIO_new_fd_APIParam_1 and BIO_new_fd_APIParam_2,,,null,BIO_new_fd_APIName returns a file descriptor BIO using BIO_new_fd_APIParam_1 and BIO_new_fd_APIParam_2.,BIO_new_fd_APIName returns a file descriptor BIO using BIO_new_fd_APIParam_1 and BIO_new_fd_APIParam_2.
0,0,BN_CTX_new_APIName returns a pointer to the BN_CTX_new_APIParam_0,,,null,BN_CTX_new_APIName returns a pointer to the BN_CTX_new_APIParam_0.,"BN_CTX_new_APIName returns a pointer to the BN_CTX_new_APIParam_0. If the allocation fails, the allocation returns NULL and sets an error code that can be obtained by ERR_get_error_APIName ."
0,0,X509_VERIFY_PARAM_get_flags_APIName returns the current verification flags,,,null,X509_VERIFY_PARAM_get_flags_APIName returns the current verification flags.,X509_VERIFY_PARAM_get_flags_APIName returns the current verification flags.
0,0,All EC_GFp functions and EC_GF2m_simple_method always return a const pointer to an EC_METHOD structure,,,null,All EC_GFp* functions and EC_GF2m_simple_method always return a const pointer to an EC_METHOD structure.,All EC_GFp* functions and EC_GF2m_simple_method always return a const pointer to an EC_METHOD structure.
0,0,Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD,,,null,Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD.,Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD. There is a naming convention for such functions: a source/sink BIO is normally called BIO_s_*_APIName and a filter BIO BIO_f_*_APIName;
0,0,"When using non-blocking sockets, the function call performing the handshake may return with SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition, so that SSL_state_string[_long]_APIName may be called",,,null,"When using non-blocking sockets, the function call performing the handshake may return with SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition, so that SSL_state_string[_long]_APIName may be called.","When using non-blocking sockets, the function call performing the handshake may return with SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition, so that SSL_state_string[_long]_APIName may be called."
0,0,X509_STORE_CTX_new_APIName returns a newly initialised X509_STORE_CTX_new_APIParam_0 structure,,,null,X509_STORE_CTX_new_APIName returns a newly initialised X509_STORE_CTX_new_APIParam_0 structure.,X509_STORE_CTX_new_APIName returns a newly initialised X509_STORE_CTX_new_APIParam_0 structure.
0,0,CRYPTO_num_locks_APIName returns the required number of locks,,,null,CRYPTO_num_locks_APIName returns the required number of locks.,CRYPTO_num_locks_APIName returns the required number of locks.
0,0,SSL_get_shutdown_APIName returns the current setting,,,null,SSL_get_shutdown_APIName returns the current setting.,SSL_get_shutdown_APIName returns the current setting.
0,0,OCSP_resp_count_APIName returns the number of OCSP_single_get0_status_APIParam_1 structures in OCSP_resp_count_APIParam_1,,,null,OCSP_resp_count_APIName returns the number of OCSP_single_get0_status_APIParam_1 structures in OCSP_resp_count_APIParam_1.,OCSP_resp_count_APIName returns the number of OCSP_single_get0_status_APIParam_1 structures in OCSP_resp_count_APIParam_1.
0,0,This function can be called repeatedly until there are no more error codes to return,,,null,This function can be called repeatedly until there are no more error codes to return.,ERR_get_error_APIName returns the earliest error code from the thread's error queue and removes the entry. This function can be called repeatedly until there are no more error codes to return.
0,0,ERR_get_error_APIName returns the earliest error code from the thread's error queue and removes the entry,,,null,ERR_get_error_APIName returns the earliest error code from the thread's error queue and removes the entry.,ERR_get_error_APIName returns the earliest error code from the thread's error queue and removes the entry. This function can be called repeatedly until there are no more error codes to return.
0,0,DSA_SIG_free_APIName returns no value,,,null,DSA_SIG_free_APIName returns no value.,DSA_SIG_free_APIName returns no value.
0,0,EVP_CIPHER_block_size_APIName and EVP_CIPHER_CTX_block_size_APIName return the block size,,,null,EVP_CIPHER_block_size_APIName and EVP_CIPHER_CTX_block_size_APIName return the block size.,EVP_CIPHER_block_size_APIName and EVP_CIPHER_CTX_block_size_APIName return the block size.
0,0,Note that the return value is valid only during the lifetime of the SSL object SSL_get_psk_identity_APIParam_1 SSL_get_psk_identity_hint_APIParam_1,,,null,Note that the return value is valid only during the lifetime of the SSL object SSL_get_psk_identity_APIParam_1 SSL_get_psk_identity_hint_APIParam_1.,Note that the return value is valid only during the lifetime of the SSL object SSL_get_psk_identity_APIParam_1 SSL_get_psk_identity_hint_APIParam_1.
0,0,SSL_CONF_CTX_set_ssl_ctx_APIName and SSL_CTX_set_ssl_APIName do not return a value,,,null,SSL_CONF_CTX_set_ssl_ctx_APIName and SSL_CTX_set_ssl_APIName do not return a value.,SSL_CONF_CTX_set_ssl_ctx_APIName and SSL_CTX_set_ssl_APIName do not return a value.
0,0,"X509_NAME_ENTRY_create_by_txt_APIName, X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_create_by_OBJ_APIName create and return an X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 structure",,,null,"X509_NAME_ENTRY_create_by_txt_APIName, X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_create_by_OBJ_APIName create and return an X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 structure.","X509_NAME_ENTRY_create_by_txt_APIName, X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_create_by_OBJ_APIName create and return an X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 structure."
0,0,"If X509_NAME_oneline_APIParam_2 is NULL, a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored",,,null,"If X509_NAME_oneline_APIParam_2 is NULL, then a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored.","X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2. If X509_NAME_oneline_APIParam_2 is NULL, then a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored. Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned."
0,0,"Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned",,,null,"Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned.","X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2. If X509_NAME_oneline_APIParam_2 is NULL, then a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored. Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned."
0,0,RSA_public_encrypt_APIName returns the size of the encrypted data,,,null,"RSA_public_encrypt_APIName returns the size of the encrypted data (ie, RSA_size(RSA_public_encrypt_APIParam_4 RSA_private_decrypt_APIParam_4)).","RSA_public_encrypt_APIName returns the size of the encrypted data (ie, RSA_size(RSA_public_encrypt_APIParam_4 RSA_private_decrypt_APIParam_4)). RSA_private_decrypt_APIName returns the size of the recovered plaintext."
0,0,RSA_private_decrypt_APIName returns the size of the recovered plaintext,,,null,RSA_private_decrypt_APIName returns the size of the recovered plaintext.,"RSA_public_encrypt_APIName returns the size of the encrypted data (ie, RSA_size(RSA_public_encrypt_APIParam_4 RSA_private_decrypt_APIParam_4)). RSA_private_decrypt_APIName returns the size of the recovered plaintext."
0,0,the function will return a pointer to a fully populated structure,,,null,"Normally, lh_retrieve_APIParam_2 is a structure with the key field(s) set; the function will return a pointer to a fully populated structure.","lh_<type>_retrieve_APIName looks up an entry in lh_retrieve_APIParam_1. Normally, lh_retrieve_APIParam_2 is a structure with the key field(s) set; the function will return a pointer to a fully populated structure."
0,0,"If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries",,,null,"If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table).","Each state table has a flag to note whether it has processed this ""get_default"" query since the table was last modified, because to process this question it must iterate across all the registered ENGINEs in the table trying to initialise each of them in turn, in case one of them is operational. If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries (without needing to iterate across the table). Likewise, it will cache a NULL response if no ENGINE was available so that future queries won't repeat the same iteration unless the state table changes. This behaviour can also be changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using ENGINE_set_table_flags_APIName), no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the ""get_default"" query will be if one is expressly set in the table. Eg. ENGINE_set_default_RSA_APIName does the same job as ENGINE_register_RSA_APIName except that it also sets the state table's cached response for the ""get_default"" query. In the case of abstractions like EVP_CIPHER, where implementations are indexed by 'nid', these flags and cached-responses are distinct for each 'nid' value."
0,0,EC_KEY_get0_group returns the EC_GROUP associated with the EC_KEY,,,null,EC_KEY_get0_group returns the EC_GROUP associated with the EC_KEY.,EC_KEY_get0_group returns the EC_GROUP associated with the EC_KEY.
0,0,SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1,,,null,SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1.,"SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1. If SSL_CIPHER_get_bits_APIParam_2 is not NULL, SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm. If SSL_CIPHER_get_bits_APIParam_1 is NULL, 0 is returned."
0,0,"lh_<type>_free_APIName, lh_<type>_doall_APIName and lh_<type>_doall_arg_APIName return no values",,,null,"lh_<type>_free_APIName, lh_<type>_doall_APIName and lh_<type>_doall_arg_APIName return no values.","lh_<type>_free_APIName, lh_<type>_doall_APIName and lh_<type>_doall_arg_APIName return no values."
0,0,"Data written to the null sink is discarded, reads return EOF",,,null,"Data written to the null sink is discarded, reads return EOF.","BIO_s_null_APIName returns the null sink BIO method. Data written to the null sink is discarded, reads return EOF."
0,0,EVP_EncodeBlock_APIName returns the number of bytes encoded excluding the NUL terminator,,,null,EVP_EncodeBlock_APIName returns the number of bytes encoded excluding the NUL terminator.,EVP_EncodeBlock_APIName returns the number of bytes encoded excluding the NUL terminator.
0,0,SSL_CONF_cmd_value_type_APIName returns the type of value that SSL_CONF_cmd_value_type_APIParam_2 refers to,,,null,SSL_CONF_cmd_value_type_APIName returns the type of value that SSL_CONF_cmd_value_type_APIParam_2 refers to.,SSL_CONF_cmd_value_type_APIName returns the type of value that SSL_CONF_cmd_value_type_APIParam_2 refers to.
0,0,The return value points to an allocated SSL_CTX object,,,null,The return value points to an allocated SSL_CTX object.,The return value points to an allocated SSL_CTX object.
0,0,BIO_method_type_APIName returns the type of a BIO,,,null,BIO_method_type_APIName returns the type of a BIO.,BIO_method_type_APIName returns the type of a BIO.
0,0,Neither OPENSSL_config_APIName nor OPENSSL_no_config_APIName return a value,,,null,Neither OPENSSL_config_APIName nor OPENSSL_no_config_APIName return a value.,Neither OPENSSL_config_APIName nor OPENSSL_no_config_APIName return a value.
0,0,BN_bn2mpi_APIName returns the length of the representation,,,null,BN_bn2mpi_APIName returns the length of the representation.,"BN_bn2mpi_APIName returns the length of the representation. BN_mpi2bn_APIName returns the BN_bn2mpi_APIParam_1 BN_mpi2bn_APIParam_3, and NULL on error."
0,0,ASN1_STRING_type_new_APIName returns an allocated ASN1_STRING_type_new_APIParam_0 structure of type ASN1_STRING_type_new_APIParam_1,,,null,ASN1_STRING_type_new_APIName returns an allocated ASN1_STRING_type_new_APIParam_0 structure of type ASN1_STRING_type_new_APIParam_1.,ASN1_STRING_type_new_APIName returns an allocated ASN1_STRING_type_new_APIParam_0 structure of type ASN1_STRING_type_new_APIParam_1.
0,0,ASN1_STRING_free_APIName does not return a value,,,null,ASN1_STRING_free_APIName does not return a value.,ASN1_STRING_free_APIName does not return a value.
0,0,EVP_dss_APIName and EVP_dss1_APIName return EVP_dss_APIParam_0 EVP_dss1_APIParam_0 structures for SHA and SHA1 digest algorithms but using DSS  for the signature algorithm,,,null,EVP_dss_APIName and EVP_dss1_APIName return EVP_dss_APIParam_0 EVP_dss1_APIParam_0 structures for SHA and SHA1 digest algorithms but using DSS (DSA) for the signature algorithm.,"EVP_dss_APIName and EVP_dss1_APIName return EVP_dss_APIParam_0 EVP_dss1_APIParam_0 structures for SHA and SHA1 digest algorithms but using DSS (DSA) for the signature algorithm. Note: there is no need to use these pseudo-digests in OpenSSL 1.0.0 and later, they are however retained for compatibility."
0,0,"SHA1_APIName, SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName return a pointer to the hash value",,,null,"SHA1_APIName, SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName return a pointer to the hash value.","SHA1_APIName, SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName return a pointer to the hash value."
0,0,The ENGINE_new_APIName function returns a structural reference to a new  ENGINE object,,,null,The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object.,"The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName. All structural references should be released by a corresponding to call to the ENGINE_free_APIName function. The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released."
0,0,There are other ENGINE API functions that return structural references such as,,,null,"There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName.","The ENGINE_new_APIName function returns a structural reference to a new (empty) ENGINE object. There are other ENGINE API functions that return structural references such as; ENGINE_by_id_APIName, ENGINE_get_first_APIName, ENGINE_get_last_APIName, ENGINE_get_next_APIName, ENGINE_get_prev_APIName. All structural references should be released by a corresponding to call to the ENGINE_free_APIName function. The ENGINE object itself will only actually be cleaned up and deallocated when the last structural reference is released."
0,0,OCSP_resp_count_APIName returns the total number of OCSP_single_get0_status_APIParam_1 fields in OCSP_resp_count_APIParam_1,,,null,OCSP_resp_count_APIName returns the total number of OCSP_single_get0_status_APIParam_1 fields in OCSP_resp_count_APIParam_1.,OCSP_resp_count_APIName returns the total number of OCSP_single_get0_status_APIParam_1 fields in OCSP_resp_count_APIParam_1.
0,0,SSL_CTX_clear_options_APIName and SSL_clear_options_APIName return the new options bitmask after clearing SSL_CTX_clear_options_APIParam_2 SSL_clear_options_APIParam_2,,,null,SSL_CTX_clear_options_APIName and SSL_clear_options_APIName return the new options bitmask after clearing SSL_CTX_clear_options_APIParam_2 SSL_clear_options_APIParam_2.,SSL_CTX_clear_options_APIName and SSL_clear_options_APIName return the new options bitmask after clearing SSL_CTX_clear_options_APIParam_2 SSL_clear_options_APIParam_2.
0,0,Otherwise ASN1_OBJECT_new_APIName returns a pointer to the newly allocated structure,,,null,Otherwise ASN1_OBJECT_new_APIName returns a pointer to the newly allocated structure.,"If the allocation fails, ASN1_OBJECT_new_APIName returns NULL and sets an error code that can be obtained by ERR_get_error_APIName . Otherwise ASN1_OBJECT_new_APIName returns a pointer to the newly allocated structure."
0,0,RSA_blinding_off_APIName returns no value,,,null,RSA_blinding_off_APIName returns no value.,RSA_blinding_off_APIName returns no value.
0,0,SSL_get_info_callback_APIName returns the current setting,,,null,SSL_get_info_callback_APIName returns the current setting.,SSL_get_info_callback_APIName returns the current setting.
0,0,SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1,,,null,SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1.,"SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1. If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero. Other than for diagnostic purposes, most applications will only be interested in the first shared curve so SSL_get_shared_curve_APIParam_2 is normally set to zero. If the value SSL_get_shared_curve_APIParam_2 is out of range, NID_undef is returned."
0,0,SSL_CIPHER_get_name_APIName returns a pointer to the name of SSL_CIPHER_get_name_APIParam_1,,,null,SSL_CIPHER_get_name_APIName returns a pointer to the name of SSL_CIPHER_get_name_APIParam_1.,"SSL_CIPHER_get_name_APIName returns a pointer to the name of SSL_CIPHER_get_name_APIParam_1. If the argument is the NULL pointer, a pointer to the constant value ""NONE"" is returned."
0,0,"If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero",,,null,"If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero.","SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1. If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero. Other than for diagnostic purposes, most applications will only be interested in the first shared curve so SSL_get_shared_curve_APIParam_2 is normally set to zero. If the value SSL_get_shared_curve_APIParam_2 is out of range, NID_undef is returned."
0,0,The return value points to the data of an SSL session,,,null,The return value points to the data of an SSL session.,The return value points to the data of an SSL session.
0,0,Reads on the other half of the pair will return any pending data or EOF when all pending data has been read,,,null,Reads on the other half of the pair will return any pending data or EOF when all pending data has been read.,BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1. After this call no further writes on BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 are allowed (they will return an error). Reads on the other half of the pair will return any pending data or EOF when all pending data has been read.
0,0,BIO_s_bio_APIName returns the method for a BIO pair,,,null,BIO_s_bio_APIName returns the method for a BIO pair.,BIO_s_bio_APIName returns the method for a BIO pair. A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half. Both halves must usually by handled by the same application thread since no locking is done on the internal data structures.
0,0,"A negative return value from X509_verify_cert_APIName can occur if X509_verify_cert_APIName is invoked incorrectly, such as with no certificate set in X509_verify_cert_APIParam_1, or when X509_verify_cert_APIName is called twice in succession without reinitialising X509_verify_cert_APIParam_1 for the second call",,,null,"A negative return value from X509_verify_cert_APIName can occur if X509_verify_cert_APIName is invoked incorrectly, such as with no certificate set in X509_verify_cert_APIParam_1, or when X509_verify_cert_APIName is called twice in succession without reinitialising X509_verify_cert_APIParam_1 for the second call.","A negative return value from X509_verify_cert_APIName can occur if X509_verify_cert_APIName is invoked incorrectly, such as with no certificate set in X509_verify_cert_APIParam_1, or when X509_verify_cert_APIName is called twice in succession without reinitialising X509_verify_cert_APIParam_1 for the second call. A negative return value can also happen due to internal resource problems or if a retry operation is requested during internal lookups (which never happens with standard lookup methods). Applications must check for <= 0 return value on error."
0,0,enc decides if encryption or decryption shall be performed,,,null,enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed,"BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less. If they are larger, everything after the first 64 bits is ignored."
0,0,"The data is returned to the application, this will be the same value as supplied to a previous CRYPTO_set_ex_data call",,,null,"The data is returned to the application, this will be the same value as supplied to a previous CRYPTO_set_ex_data() call","CRYPTO_get_ex_data() is used to retrieve application specific data. The data is returned to the application, this will be the same value as supplied to a previous CRYPTO_set_ex_data() call."
0,0,BN_num_bits_word returns the number of significant bits in a word,,,null,BN_num_bits_word() returns the number of significant bits in a word,"BN_num_bits_word() returns the number of significant bits in a word. If we take 0x00000432 as an example, it returns 11, not 16, not 32. Basically, except for a zero, it returns floor(log2(w))+1."
0,0,"Basically, except for a zero, it returns floor+1",,,null,"Basically, except for a zero, it returns floor(log2(w))+1","BN_num_bits_word() returns the number of significant bits in a word. If we take 0x00000432 as an example, it returns 11, not 16, not 32. Basically, except for a zero, it returns floor(log2(w))+1."
0,0,the session will be immediately removed again,1,,"If the callback returns 0,","If the callback returns 0, the session will be immediately removed again","The new_session_cb() is called, whenever a new session has been negotiated and session caching is enabled (see SSL_CTX_set_session_cache_mode(3) ). The new_session_cb() is passed the ssl connection and the ssl session sess. If the callback returns 0, the session will be immediately removed again."
0,0,"If we take 0x00000432 as an example, it returns 11, not 16, not 32",,,null,"If we take 0x00000432 as an example, it returns 11, not 16, not 32","BN_num_bits_word() returns the number of significant bits in a word. If we take 0x00000432 as an example, it returns 11, not 16, not 32. Basically, except for a zero, it returns floor(log2(w))+1."
0,0,BF_ecb_encrypt is the basic Blowfish encryption and decryption function,,,null,BF_ecb_encrypt() is the basic Blowfish encryption and decryption function,"BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less. If they are larger, everything after the first 64 bits is ignored."
0,0,BF_cbc_encrypt is the Cipher Block Chaining function for Blowfish,,,null,BF_cbc_encrypt() is the Cipher Block Chaining function for Blowfish,"BF_cbc_encrypt() is the Cipher Block Chaining function for Blowfish. It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule, putting the result in BF_cbc_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector."
0,0,EGD is available from http,,,null,EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install),"EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install). It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket. When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected. RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected. The write and read socket operations in the communication are blocking."
0,0,It is not a NID,,,null,It is not a NID,The SSL_extension_supported_APIParam_1 SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 parameter corresponds to the extension_type field of RFC5246 et al. It is not a NID.
0,0,BN_mod_inverse_APIParam_1 may be the same BN_mod_inverse_APIParam_1 as BN_mod_inverse_APIParam_2 or BN_mod_inverse_APIParam_3,,,null,BN_mod_inverse_APIParam_1 may be the same BN_mod_inverse_APIParam_1 as BN_mod_inverse_APIParam_2 or BN_mod_inverse_APIParam_3,ctx is a previously allocated BN_CTX used for temporary variables. BN_mod_inverse_APIParam_1 may be the same BN_mod_inverse_APIParam_1 as BN_mod_inverse_APIParam_2 or BN_mod_inverse_APIParam_3.
0,0,This is compliant with the TLS specifications,,,null,This is compliant with the TLS specifications,"If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,The write and read socket operations in the communication are blocking,,,null,The write and read socket operations in the communication are blocking,"EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install). It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket. When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected. RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected. The write and read socket operations in the communication are blocking."
0,0,ctx is a previously allocated BN_CTX used for temporary variables,,,null,ctx is a previously allocated BN_CTX used for temporary variables,ctx is a previously allocated BN_CTX used for temporary variables. BN_mod_inverse_APIParam_1 may be the same BN_mod_inverse_APIParam_1 as BN_mod_inverse_APIParam_2 or BN_mod_inverse_APIParam_3.
0,0,BF_cfb64_encrypt is the CFB mode for Blowfish with 64 bit feedback,,,null,BF_cfb64_encrypt() is the CFB mode for Blowfish with 64 bit feedback,"BF_cfb64_encrypt() is the CFB mode for Blowfish with 64 bit feedback. It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule, putting the result in BF_cfb64_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector. num must point at an integer which must be initially zero."
0,0,"The mode functions BF_cbc_encrypt , BF_cfb64_encrypt and BF_ofb64_encrypt all operate on variable length data",,,null,"The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
0,0,"Some programs and protocols simplify this , like SSH , where ivec is simply initialized to zero",,,null,"Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
0,0,The SSL_extension_supported_APIParam_1 SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 parameter corresponds to the extension_type field of RFC5246 et al,,,null,The SSL_extension_supported_APIParam_1 SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 parameter corresponds to the extension_type field of RFC5246 et al,The SSL_extension_supported_APIParam_1 SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 parameter corresponds to the extension_type field of RFC5246 et al. It is not a NID.
0,0,RIPEMD160_Update can be called repeatedly with chunks of the message to be hashed,,,null,RIPEMD160_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at RIPEMD160_Update_APIParam_2),RIPEMD160_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at RIPEMD160_Update_APIParam_2).
0,0,X509_NAME _ ... handle certificate names,,,null,X509_NAME_... handle certificate names,X509_NAME_... handle certificate names.
0,0,X509_EXTENSION _ ... handle certificate extensions,,,null,X509_EXTENSION_... handle certificate extensions,X509_EXTENSION_... handle certificate extensions.
0,0,X509_ATTRIBUTE _ ... handle certificate attributes,,,null,X509_ATTRIBUTE_... handle certificate attributes,X509_ATTRIBUTE_... handle certificate attributes.
0,0,"It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule , putting the result in BF_cfb64_encrypt_APIParam_2",,,null,"It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule, putting the result in BF_cfb64_encrypt_APIParam_2","BF_cfb64_encrypt() is the CFB mode for Blowfish with 64 bit feedback. It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule, putting the result in BF_cfb64_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector. num must point at an integer which must be initially zero."
0,0,Encrypting user data directly with RSA is insecure,,,null,Encrypting user data directly with RSA is insecure,Raw RSA encryption. This mode should only be used to implement cryptographically sound padding modes in the application code. Encrypting user data directly with RSA is insecure.
0,0,"It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule , putting the result in BF_cbc_encrypt_APIParam_2",,,null,"It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule, putting the result in BF_cbc_encrypt_APIParam_2","BF_cbc_encrypt() is the Cipher Block Chaining function for Blowfish. It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule, putting the result in BF_cbc_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. ivec must point at an 8 byte long initialization vector."
0,0,X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 can still be set to V_ASN1_APP_CHOOSE to use a different algorithm to determine field types,,,null,X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 can still be set to V_ASN1_APP_CHOOSE to use a different algorithm to determine field types,"X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 can still be set to V_ASN1_APP_CHOOSE to use a different algorithm to determine field types. Since this form does not understand multicharacter types, performs no length checks and can result in invalid field types X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 use is strongly discouraged."
0,0,The new_session_cb is passed the ssl connection and the ssl session sess,,,null,The new_session_cb() is passed the ssl connection and the ssl session sess,"The new_session_cb() is called, whenever a new session has been negotiated and session caching is enabled (see SSL_CTX_set_session_cache_mode(3) ). The new_session_cb() is passed the ssl connection and the ssl session sess. If the callback returns 0, the session will be immediately removed again."
0,0,The remove_session_cb is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess,,,null,The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess,"The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache. This happens when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess. It does not provide any feedback."
0,0,"It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1 , where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket",,,null,"It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket","EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install). It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket. When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected. RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected. The write and read socket operations in the communication are blocking."
0,0,"It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2 , putting the result in BF_ecb_encrypt_APIParam_2",,,null,"It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2","BF_ecb_encrypt() is the basic Blowfish encryption and decryption function. It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2, putting the result in BF_ecb_encrypt_APIParam_2. enc decides if encryption (BF_ENCRYPT) or decryption (BF_DECRYPT) shall be performed. The vector pointed at by BF_ecb_encrypt_APIParam_1 and BF_ecb_encrypt_APIParam_2 must be 64 bits in length, no less. If they are larger, everything after the first 64 bits is ignored."
0,0,The new entry is added to a position determined by X509_NAME_add_entry_by_OBJ_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_by_OBJ_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_APIParam_4,,,null,The new entry is added to a position determined by X509_NAME_add_entry_by_OBJ_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_by_OBJ_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_APIParam_4,The type of field is determined by X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 which can either be a definition of the type of X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_txt_APIParam_4 (such as MBSTRING_ASC) or a standard ASN1 type (such as V_ASN1_IA5STRING). The new entry is added to a position determined by X509_NAME_add_entry_by_OBJ_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_by_OBJ_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_APIParam_4.
0,0,The add_arg and parse_arg parameters can be set to arbitrary values which will be passed to the corresponding callbacks,,,null,The add_arg and parse_arg parameters can be set to arbitrary values which will be passed to the corresponding callbacks,"The add_arg and parse_arg parameters can be set to arbitrary values which will be passed to the corresponding callbacks. They can, for example, be used to store the extension data received in a convenient structure or pass the extension data to be added or freed when adding extensions."
0,0,"SSL_CTX_add_server_custom_ext adds a custom extension for a TLS server with extension type SSL_CTX_add_server_custom_ext_APIParam_2 and callbacks add_cb , free_cb and parse_cb",,,null,"SSL_CTX_add_server_custom_ext() adds a custom extension for a TLS server with extension type SSL_CTX_add_server_custom_ext_APIParam_2 and callbacks add_cb, free_cb and parse_cb","SSL_CTX_add_server_custom_ext() adds a custom extension for a TLS server with extension type SSL_CTX_add_server_custom_ext_APIParam_2 and callbacks add_cb, free_cb and parse_cb."
8,0,"CRYPTO_set_ex_data is used to set application specific data , the data is supplied in the CRYPTO_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application",,,null,"CRYPTO_set_ex_data() is used to set application specific data, the data is supplied in the CRYPTO_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application","CRYPTO_set_ex_data() is used to set application specific data, the data is supplied in the CRYPTO_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application."
0,0,This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards,,,null,This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards,The use of string types such as MBSTRING_ASC or MBSTRING_UTF8 is strongly recommended for the X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 parameter. This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards. This is done using ASN1_STRING_set_by_NID().
0,0,"SSL_CTX_add_client_custom_ext adds a custom extension for a TLS client with extension type SSL_CTX_add_client_custom_ext_APIParam_2 and callbacks add_cb , free_cb and parse_cb",,,null,"SSL_CTX_add_client_custom_ext() adds a custom extension for a TLS client with extension type SSL_CTX_add_client_custom_ext_APIParam_2 and callbacks add_cb, free_cb and parse_cb","SSL_CTX_add_client_custom_ext() adds a custom extension for a TLS client with extension type SSL_CTX_add_client_custom_ext_APIParam_2 and callbacks add_cb, free_cb and parse_cb."
0,0,a new BN_mod_inverse_APIParam_1 is created,,,If BN_mod_inverse_APIParam_1 is NULL,"If BN_mod_inverse_APIParam_1 is NULL, a new BN_mod_inverse_APIParam_1 is created","BN_mod_inverse() computes the inverse of BN_mod_inverse_APIParam_2 modulo BN_mod_inverse_APIParam_3 places the result in BN_mod_inverse_APIParam_1 ((a*r)%n==1). If BN_mod_inverse_APIParam_1 is NULL, a new BN_mod_inverse_APIParam_1 is created."
0,0,0 may also be valid application data but,,,null,0 may also be valid application data but currently it can only fail if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter,CRYPTO_get_ex_data() returns the application data or 0 on failure. 0 may also be valid application data but currently it can only fail if given an invalid CRYPTO_get_ex_data_APIParam_2 parameter.
0,0,The get_session_cb is always called,,,also when session caching was disabled,"The get_session_cb() is always called, also when session caching was disabled","The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client. The get_session_cb() is always called, also when session caching was disabled. The get_session_cb() is passed the ssl connection, the session id of length length at the memory location data. With the parameter copy the callback can require the SSL engine to increment the reference count of the SSL_SESSION object, Normally the reference count is not incremented and therefore the session must not be explicitly freed with SSL_SESSION_free(3) ."
0,0,The remove_session_cb is called,,,whenever the SSL engine removes a session from the internal cache,"The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache","The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache. This happens when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess. It does not provide any feedback."
0,0,The new_session_cb is called,,,whenever a new session has been negotiated and session caching is enabled,"The new_session_cb() is called, whenever a new session has been negotiated and session caching is enabled (see SSL_CTX_set_session_cache_mode(3) )","The new_session_cb() is called, whenever a new session has been negotiated and session caching is enabled (see SSL_CTX_set_session_cache_mode(3) ). The new_session_cb() is passed the ssl connection and the ssl session sess. If the callback returns 0, the session will be immediately removed again."
0,0,It also happens for all sessions in the internal session cache,,,when SSL_CTX_free is called,It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called,"The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache. This happens when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess. It does not provide any feedback."
0,0,The ServerHello add_cb callback is only called,,,if the corresponding extension was received in ClientHello,The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello,"If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,Calling ERR_remove_state is equivalent to ERR_remove_thread_state,,,null,Calling ERR_remove_state is equivalent to ERR_remove_thread_state(NULL),ERR_remove_state is deprecated and has been replaced by ERR_remove_thread_state. Since threads in OpenSSL are no longer identified by unsigned long values any argument to this function is ignored. Calling ERR_remove_state is equivalent to ERR_remove_thread_state(NULL).
0,0,ERR_remove_thread_state frees the error queue associated with thread tid,,,null,ERR_remove_thread_state() frees the error queue associated with thread tid,"ERR_remove_thread_state() frees the error queue associated with thread tid. If tid == NULL, the current thread will have its error queue removed."
0,0,The length of the signature is places in siglen,,,null,The length of the signature is places in *siglen,DSA_sign() computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN.1 DER encoding at sigret. The length of the signature is places in *siglen. sigret must point to DSA_size(DSA_sign_setup_APIParam_1) bytes of memory.
0,0,"X509_CRL _ ... , d2i_X509_CRL _ ... and i2d_X509_CRL _ ... handle X. 509 CRLs",,,null,"X509_CRL_..., d2i_X509_CRL_... and i2d_X509_CRL_... handle X.509 CRLs","X509_CRL_..., d2i_X509_CRL_... and i2d_X509_CRL_... handle X.509 CRLs."
0,0,"X509_REQ _ ... , d2i_X509_REQ _ ... and i2d_X509_REQ _ ... handle PKCS # 10 certificate requests",,,null,"X509_REQ_..., d2i_X509_REQ_... and i2d_X509_REQ_... handle PKCS#10 certificate requests","X509_REQ_..., d2i_X509_REQ_... and i2d_X509_REQ_... handle PKCS#10 certificate requests."
0,0,The supplied data is read directly from the supplied buffer,,,null,"The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed","BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed."
0,0,The BIO and hence the SSL engine inherit the behaviour of SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2,,,null,The BIO and hence the SSL engine inherit the behaviour of SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2,"When performing the operation, a socket BIO is automatically created to interface between the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 and SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2. The BIO and hence the SSL engine inherit the behaviour of SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2. If SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2 is non-blocking, the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 will also have non-blocking behaviour."
0,0,DSA_sign_setup_APIParam_1 is the signer 's public key,,,null,DSA_sign_setup_APIParam_1 is the signer's public key,DSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest DSA_verify_APIParam_2 of size DSA_verify_APIParam_3. DSA_sign_setup_APIParam_1 is the signer's public key.
0,0,It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters,,,null,It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
0,0,DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL,,,null,DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
0,0,"The get_session_cb is passed the ssl connection , the session id of length length at the memory location data",,,null,"The get_session_cb() is passed the ssl connection, the session id of length length at the memory location data","The get_session_cb() is only called on SSL/TLS servers with the session id proposed by the client. The get_session_cb() is always called, also when session caching was disabled. The get_session_cb() is passed the ssl connection, the session id of length length at the memory location data. With the parameter copy the callback can require the SSL engine to increment the reference count of the SSL_SESSION object, Normally the reference count is not incremented and therefore the session must not be explicitly freed with SSL_SESSION_free(3) ."
0,0,"X509 _ ... , d2i_X509 _ ... and i2d_X509 _ ... handle X. 509 certificates , with some exceptions , shown below",,,null,"X509_..., d2i_X509_... and i2d_X509_... handle X.509 certificates, with some exceptions, shown below","X509_..., d2i_X509_... and i2d_X509_... handle X.509 certificates, with some exceptions, shown below."
0,0,These values may be passed to DSA_sign in dsa - > kinv and dsa - > r,,,null,These values may be passed to DSA_sign() in dsa->kinv and dsa->r,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
0,0,BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long,1,,null,"BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8)","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
0,0,BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes ,1,,null,"BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8)","The mode functions BF_cbc_encrypt(), BF_cfb64_encrypt() and BF_ofb64_encrypt() all operate on variable length data. They all take an initialization vector ivec which needs to be passed along into the next call of the same function for the same message. ivec may be initialized with anything, but the recipient needs to know what it was initialized with, or it won't be able to decrypt. Some programs and protocols simplify this, like SSH, where ivec is simply initialized to zero. BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long, while BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes (the amount does not have to be an exact multiple of 8). The purpose of the latter two is to simulate stream ciphers, and therefore, they need the parameter num, which is a pointer to an integer where the current offset in ivec is stored between calls. This integer must be initialized to zero when ivec is initialized."
0,0,RAND_egd retrieves entropy from the daemon using the daemon 's `` non-blocking read '' command which shall be answered immediately by the daemon without waiting for additional entropy to be collected,,,null,"RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected","EGD is available from http://www.lothar.com/tech/crypto/ (perl Makefile.PL; make; make install to install). It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1, where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket. When RAND_egd() is called with that path as an argument, it tries to read random bytes that EGD has collected. RAND_egd() retrieves entropy from the daemon using the daemon's ""non-blocking read"" command which shall be answered immediately by the daemon without waiting for additional entropy to be collected. The write and read socket operations in the communication are blocking."
0,0,DSA_sign computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN .1 DER encoding at sigret,,,null,DSA_sign() computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN.1 DER encoding at sigret,DSA_sign() computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN.1 DER encoding at sigret. The length of the signature is places in *siglen. sigret must point to DSA_size(DSA_sign_setup_APIParam_1) bytes of memory.
0,0,a fatal decode_error alert is sent,,,If the same custom extension type is received multiple times,"If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts","If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,and the handshake aborts,1,,If the same custom extension type is received multiple times,"If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts","If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,This happens,1,,when the session is removed or when a connection was not shutdown cleanly,This happens when the session is removed or when a connection was not shutdown cleanly,"The remove_session_cb() is called, whenever the SSL engine removes a session from the internal cache. This happens when the session is removed because it is expired or when a connection was not shutdown cleanly. It also happens for all sessions in the internal session cache when SSL_CTX_free(3) is called. The remove_session_cb() is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess. It does not provide any feedback."
0,0,the current thread will have its error queue removed,,,If tid == NULL,"If tid == NULL, the current thread will have its error queue removed","ERR_remove_thread_state() frees the error queue associated with thread tid. If tid == NULL, the current thread will have its error queue removed."
0,0,the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 will also have non-blocking behaviour,,,If SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2 is non-blocking,"If SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2 is non-blocking, the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 will also have non-blocking behaviour","When performing the operation, a socket BIO is automatically created to interface between the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 and SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2. The BIO and hence the SSL engine inherit the behaviour of SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2. If SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2 is non-blocking, the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 will also have non-blocking behaviour."
0,0,a fatal unsupported_extension alert is sent,,,If a custom extension is received in ServerHello which was not sent in ClientHello,"If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted","If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,and the handshake is aborted,1,,If a custom extension is received in ServerHello which was not sent in ClientHello,"If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted","If the same custom extension type is received multiple times ,a fatal decode_error alert is sent and the handshake aborts. If a custom extension is received in ServerHello which was not sent in ClientHello ,a fatal unsupported_extension alert is sent and the handshake is aborted. The ServerHello add_cb callback is only called if the corresponding extension was received in ClientHello. This is compliant with the TLS specifications. This behaviour ensures that each callback is called at most once and that an application can never send unsolicited extensions."
0,0,BN_mod_inverse computes the inverse of BN_mod_inverse_APIParam_2 modulo BN_mod_inverse_APIParam_3 places the result in BN_mod_inverse_APIParam_1 % n == 1,,,null,BN_mod_inverse() computes the inverse of BN_mod_inverse_APIParam_2 modulo BN_mod_inverse_APIParam_3 places the result in BN_mod_inverse_APIParam_1 ((a*r)%n==1),"BN_mod_inverse() computes the inverse of BN_mod_inverse_APIParam_2 modulo BN_mod_inverse_APIParam_3 places the result in BN_mod_inverse_APIParam_1 ((a*r)%n==1). If BN_mod_inverse_APIParam_1 is NULL, a new BN_mod_inverse_APIParam_1 is created."
0,0,"BIO_new_mem_buf creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1 , and its length is determined by strlen",,,null,"BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen","BIO_new_mem_buf() creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1, if BIO_new_mem_buf_APIParam_2 is -1 then the BIO_new_mem_buf_APIParam_1 is assumed to be nul terminated and its length is determined by strlen. The BIO is set to a read only state and as a result cannot be written to. This is useful when some data needs to be made available from a static area of memory in the form of a BIO. The supplied data is read directly from the supplied buffer: it is not copied first, so the supplied area of memory must be unchanged until the BIO is freed."
0,0,BN_BLINDING_set_flags sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags,,,null,BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags,BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags.
0,0,EVP_sha1 is associated with RSA so this will return NID_sha1WithRSAEncryption,,,null,For example EVP_sha1() is associated with RSA so this will return NID_sha1WithRSAEncryption,EVP_MD_pkey_type() returns the NID of the public key signing algorithm associated with this digest. For example EVP_sha1() is associated with RSA so this will return NID_sha1WithRSAEncryption. Since digests and signature algorithms are no longer linked this function is only retained for compatibility reasons.
0,0,BN_BLINDING_convert_ex multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1,,,null,BN_BLINDING_convert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1,"BN_BLINDING_convert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL ,a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 (this is useful if a RSA object is shared among several threads). BN_BLINDING_invert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 will be used as the inverse blinding."
0,0,BN_BLINDING_invert_ex multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2,,,null,BN_BLINDING_invert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2,"BN_BLINDING_convert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL ,a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 (this is useful if a RSA object is shared among several threads). BN_BLINDING_invert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 will be used as the inverse blinding."
0,0,a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2,1,,If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL,"If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL ,a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 (this is useful if a RSA object is shared among several threads)","BN_BLINDING_convert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL ,a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 (this is useful if a RSA object is shared among several threads). BN_BLINDING_invert_ex() multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2. If BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 is not NULL BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 will be used as the inverse blinding."
0,0,In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set,,,null,In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set,BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags.
0,0,DSA_sign_setup may be used to precompute part of the signing operation in case signature generation is time-critical,,,null,DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical,"DSA_sign_setup() may be used to precompute part of the signing operation in case signature generation is time-critical. It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters. It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones unless *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp are NULL. These values may be passed to DSA_sign() in dsa->kinv and dsa->r. DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL. The precomputed values from DSA_sign_setup() MUST NOT be used for more than one signature: using the same dsa->kinv and dsa->r pair twice under the same private key on different plaintexts will result in permanently exposing the DSA private key."
0,0,EVP_MD_pkey_type returns the NID of the public key signing algorithm associated with this digest,,,null,EVP_MD_pkey_type() returns the NID of the public key signing algorithm associated with this digest,EVP_MD_pkey_type() returns the NID of the public key signing algorithm associated with this digest. For example EVP_sha1() is associated with RSA so this will return NID_sha1WithRSAEncryption. Since digests and signature algorithms are no longer linked this function is only retained for compatibility reasons.
0,0,Using a specific ENGINE implementation,,,null,Using a specific ENGINE implementation,Using a specific ENGINE implementation
0,0,DSA_verify verifies that the signature sigbuf of size siglen matches a given message digest DSA_verify_APIParam_2 of size DSA_verify_APIParam_3,,,null,DSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest DSA_verify_APIParam_2 of size DSA_verify_APIParam_3,DSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest DSA_verify_APIParam_2 of size DSA_verify_APIParam_3. DSA_sign_setup_APIParam_1 is the signer's public key.
0,0,"then prefix checks are case sensitive and ""-"" is the default",1,,If the SSL_CONF_FLAG_CMDLINE flag is set,"If the SSL_CONF_FLAG_CMDLINE flag is set ,then prefix checks are case sensitive and ""-"" is the default","If the SSL_CONF_FLAG_CMDLINE flag is set ,then prefix checks are case sensitive and ""-"" is the default. In the unlikely even an application explicitly wants to set no prefix it must be explicitly set to """"."
0,0,All functional references are released by calling ENGINE_finish,,,null,All functional references are released by calling ENGINE_finish() (which removes the implicit structural reference as well),"To obtain a functional reference from an existing structural reference, call the ENGINE_init() function. This returns zero if the ENGINE was not already operational and couldn't be successfully initialised (eg lack of system drivers, no special hardware attached, etc), otherwise it will return non-zero to indicate that the ENGINE is now operational and will have allocated a new functional reference to the ENGINE. All functional references are released by calling ENGINE_finish() (which removes the implicit structural reference as well)."
0,0,Automatically using builtin ENGINE implementations,,,null,Automatically using builtin ENGINE implementations,Automatically using builtin ENGINE implementations
0,0,EVP_MD_type and EVP_MD_CTX_type return the NID of the OBJECT IDENTIFIER representing the given message digest,1,,when passed an EVP_MD_type_APIParam_1 structure,EVP_MD_type() and EVP_MD_CTX_type() return the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD_type_APIParam_1 structure,EVP_MD_type() and EVP_MD_CTX_type() return the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD_type_APIParam_1 structure. For example EVP_MD_type(EVP_sha1()) returns NID_sha1. This function is normally used when setting ASN1 OIDs.
0,0,Discovering supported control commands,,,null,Discovering supported control commands,Discovering supported control commands
0,0,EVP_DigestFinal_ex retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2,,,null,EVP_DigestFinal_ex() retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2,"EVP_DigestFinal_ex() retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2. If the EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 parameter is not NULL, then the number of bytes of data written (ie the length of the digest) will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2, at most EVP_MAX_MD_SIZE bytes will be written. After calling EVP_DigestFinal_ex() no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new digest operation."
0,0,Issuing control commands to an ENGINE,,,null,Issuing control commands to an ENGINE,Issuing control commands to an ENGINE
0,0,The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API,,,null,The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API,The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API. Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads.
0,0,that is it is not permissible to use the same context simultaneously in two threads,,,null,Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads,The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API. Contexts MUST NOT be shared between threads: that is it is not permissible to use the same context simultaneously in two threads.
0,0,ENGINE objects have two levels of reference-counting to match the way in which the objects are used,,,null,ENGINE objects have two levels of reference-counting to match the way in which the objects are used,"ENGINE objects have two levels of reference-counting to match the way in which the objects are used. At the most basic level, each ENGINE pointer is inherently a structural reference - a structural reference is required to use the pointer value at all, as this kind of reference is a guarantee that the structure can not be deallocated until the reference is released."
0,0,"To obtain a functional reference from an existing structural reference , call the ENGINE_init function",,,null,"To obtain a functional reference from an existing structural reference, call the ENGINE_init() function","To obtain a functional reference from an existing structural reference, call the ENGINE_init() function. This returns zero if the ENGINE was not already operational and couldn't be successfully initialised (eg lack of system drivers, no special hardware attached, etc), otherwise it will return non-zero to indicate that the ENGINE is now operational and will have allocated a new functional reference to the ENGINE. All functional references are released by calling ENGINE_finish() (which removes the implicit structural reference as well)."
0,0,The program can process the messages as usual,,,null,The program can then process the messages as usual,"RAND_event() collects the entropy from Windows events such as mouse movements and other user interaction. It should be called with the RAND_event_APIParam_1, RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure. It will estimate the entropy contained in the event message (if any), and add it to the PRNG. The program can then process the messages as usual."
0,0,OpenSSL makes sure that the PRNG state is unique for each thread,,,null,OpenSSL makes sure that the PRNG state is unique for each thread,"OpenSSL makes sure that the PRNG state is unique for each thread. On systems that provide /dev/urandom, the randomness device is used to seed the PRNG transparently. However, on all other systems, the application is responsible for seeding the PRNG by calling RAND_add(), RAND_egd(3) or RAND_load_file(3) ."
0,0,DH_generate_key expects DH_generate_key_APIParam_1 to contain the shared parameters dh - > p and dh - > g,,,null,DH_generate_key() expects DH_generate_key_APIParam_1 to contain the shared parameters dh->p and dh->g,"DH_generate_key() expects DH_generate_key_APIParam_1 to contain the shared parameters dh->p and dh->g. It generates a random private DH value unless dh->priv_key is already set, and computes the corresponding public value dh->pub_key, which can then be published."
0,0,CMS_uncompress extracts and uncompresses the content from a CMS CompressedData structure CMS_uncompress_APIParam_1,,,null,CMS_uncompress() extracts and uncompresses the content from a CMS CompressedData structure CMS_uncompress_APIParam_1,CMS_uncompress() extracts and uncompresses the content from a CMS CompressedData structure CMS_uncompress_APIParam_1. data is a BIO to write the content to and CMS_uncompress_APIParam_4 is an optional set of flags.
0,0,"It will estimate the entropy contained in the event message , and add it to the PRNG",,,null,"It will estimate the entropy contained in the event message (if any), and add it to the PRNG","RAND_event() collects the entropy from Windows events such as mouse movements and other user interaction. It should be called with the RAND_event_APIParam_1, RAND_event_APIParam_2 and RAND_event_APIParam_3 arguments of all messages sent to the window procedure. It will estimate the entropy contained in the event message (if any), and add it to the PRNG. The program can then process the messages as usual."
0,0,Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten,,,null,Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten,"EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
0,0,"However , a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations",,,null,"However, a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations","However, a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations. Indeed it's quite possible that most ENGINEs will not initialise at all in typical environments, as ENGINEs are typically used to support specialised hardware. To use an ENGINE's functionality, you need a functional reference. This kind of reference can be considered a specialised form of structural reference, because each functional reference implicitly contains a structural reference as well - however to avoid difficult-to-find programming bugs, it is recommended to treat the two kinds of reference independently. If you have a functional reference to an ENGINE, you have a guarantee that the ENGINE has been initialised and is ready to perform cryptographic operations, and will remain initialised until after you have released your reference."
0,0,EVP_BytesToKey derives a key and IV from various parameters,,,null,EVP_BytesToKey() derives a key and IV from various parameters,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,EVP_BytesToKey_APIParam_2 is the message digest to use,,,null,EVP_BytesToKey_APIParam_2 is the message digest to use,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,data is a BIO to write the content to and CMS_uncompress_APIParam_4 is an optional set of flags,,,null,data is a BIO to write the content to and CMS_uncompress_APIParam_4 is an optional set of flags,CMS_uncompress() extracts and uncompresses the content from a CMS CompressedData structure CMS_uncompress_APIParam_1. data is a BIO to write the content to and CMS_uncompress_APIParam_4 is an optional set of flags.
0,0,EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for,,,null,EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,count is the iteration count to use,,,null,count is the iteration count to use,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,This function is normally used,,,when setting ASN1 OIDs,This function is normally used when setting ASN1 OIDs,EVP_MD_type() and EVP_MD_CTX_type() return the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD_type_APIParam_1 structure. For example EVP_MD_type(EVP_sha1()) returns NID_sha1. This function is normally used when setting ASN1 OIDs.
0,0,The derived key and IV will be written to key and iv respectively,,,null,The derived key and IV will be written to key and iv respectively,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,EVP_DigestSignInit sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey,,,null,EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey,"EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
0,0,Broadly speaking there are two uses for control commands,,,null,Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use,"Before illustrating how control commands work, it is worth mentioning what they are typically used for. Broadly speaking there are two uses for control commands; the first is to provide the necessary details to the implementation (which may know nothing at all specific to the host system) so that it can be initialised for use. This could include the path to any driver or config files it needs to load, required network addresses, smart-card identifiers, passwords to initialise protected devices, logging information, etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it, ie before calling ENGINE_init(). The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place, and these commands may work either before or after ENGINE_init(), or in some cases both. ENGINE implementations should provide indications of this in the descriptions attached to builtin control commands and/or in external product documentation."
0,0,data is a buffer containing datal bytes which is used to derive the keying data,,,null,data is a buffer containing datal bytes which is used to derive the keying data,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,These functions allow an X509_NAME_entry_count_APIParam_1 X509_NAME_get_entry_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_index_by_NID_APIParam_1 X509_NAME_get_index_by_OBJ_APIParam_1 structure to be examined,,,null,These functions allow an X509_NAME_entry_count_APIParam_1 X509_NAME_get_entry_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_index_by_NID_APIParam_1 X509_NAME_get_index_by_OBJ_APIParam_1 structure to be examined,These functions allow an X509_NAME_entry_count_APIParam_1 X509_NAME_get_entry_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_index_by_NID_APIParam_1 X509_NAME_get_index_by_OBJ_APIParam_1 structure to be examined. The X509_NAME_entry_count_APIParam_1 X509_NAME_get_entry_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_index_by_NID_APIParam_1 X509_NAME_get_index_by_OBJ_APIParam_1 structure is the same as the Name type defined in RFC2459 (and elsewhere) and used for example in certificate subject and issuer names.
0,0,"d2i_DSAparams , i2d_DSAparams decode and encode the DSA parameters using a Dss-Parms structure as defined in RFC2459",,,null,"d2i_DSAparams(), i2d_DSAparams() decode and encode the DSA parameters using a Dss-Parms structure as defined in RFC2459","d2i_DSAparams(), i2d_DSAparams() decode and encode the DSA parameters using a Dss-Parms structure as defined in RFC2459."
0,0,BN_BLINDING_create_param creates new BN_BLINDING_create_param_APIParam_1 parameters using the exponent BN_BLINDING_set_flags_APIParam_2 BN_BLINDING_set_thread_id_APIParam_2 and the modulus m. bn_mod_exp and m_ctx can be used to pass special functions for exponentiation and BN_MONT_CTX,,,null,BN_BLINDING_create_param() creates new BN_BLINDING_create_param_APIParam_1 parameters using the exponent BN_BLINDING_set_flags_APIParam_2 BN_BLINDING_set_thread_id_APIParam_2 and the modulus m. bn_mod_exp and m_ctx can be used to pass special functions for exponentiation (normally BN_mod_exp_mont() and BN_MONT_CTX),BN_BLINDING_create_param() creates new BN_BLINDING_create_param_APIParam_1 parameters using the exponent BN_BLINDING_set_flags_APIParam_2 BN_BLINDING_set_thread_id_APIParam_2 and the modulus m. bn_mod_exp and m_ctx can be used to pass special functions for exponentiation (normally BN_mod_exp_mont() and BN_MONT_CTX).
0,0,The salt parameter is used as a salt in the derivation,,,null,The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used,EVP_BytesToKey() derives a key and IV from various parameters. EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for. EVP_BytesToKey_APIParam_2 is the message digest to use. The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used. data is a buffer containing datal bytes which is used to derive the keying data. count is the iteration count to use. The derived key and IV will be written to key and iv respectively.
0,0,"Indeed it 's quite possible that most ENGINEs will not initialise at all in typical environments , as ENGINEs are typically used to support specialised hardware",,,null,"Indeed it's quite possible that most ENGINEs will not initialise at all in typical environments, as ENGINEs are typically used to support specialised hardware","However, a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations. Indeed it's quite possible that most ENGINEs will not initialise at all in typical environments, as ENGINEs are typically used to support specialised hardware. To use an ENGINE's functionality, you need a functional reference. This kind of reference can be considered a specialised form of structural reference, because each functional reference implicitly contains a structural reference as well - however to avoid difficult-to-find programming bugs, it is recommended to treat the two kinds of reference independently. If you have a functional reference to an ENGINE, you have a guarantee that the ENGINE has been initialised and is ready to perform cryptographic operations, and will remain initialised until after you have released your reference."
0,0,RAND_seed is equivalent to RAND_add,,,when num == entropy,RAND_seed() is equivalent to RAND_add() when num == entropy,RAND_seed() is equivalent to RAND_add() when num == entropy.
0,0,"d2i_DSA_SIG , i2d_DSA_SIG decode and encode a DSA signature using a Dss-Sig-Value structure as defined in RFC2459",,,null,"d2i_DSA_SIG(), i2d_DSA_SIG() decode and encode a DSA signature using a Dss-Sig-Value structure as defined in RFC2459","d2i_DSA_SIG(), i2d_DSA_SIG() decode and encode a DSA signature using a Dss-Sig-Value structure as defined in RFC2459."
0,0,"OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set , the locking_function and threadid_func",,,null,"OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func","OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func. Note that OpenSSL is not completely thread-safe, and unfortunately not all global resources have the necessary locks. Further, the thread-safety does not extend to things like multiple threads using the same SSL object at the same time."
0,0,MIME headers for type text/plain are deleted from the content,,,If the CMS_TEXT flag is set,"If the CMS_TEXT flag is set ,MIME headers for type text/plain are deleted from the content","If the CMS_TEXT flag is set ,MIME headers for type text/plain are deleted from the content. If the content is not of type text/plain, then an error is returned."
0,0,The digest type may be NULL,1,,if the signing algorithm supports it,The digest type may be NULL if the signing algorithm supports it,"EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
0,0,the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2,,,If EVP_DigestSignInit_APIParam_2 is not NULL,"If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options","EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
0,0,this can be used to set alternative signing options,,,null,"If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options","EVP_DigestSignInit() sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey. EVP_DigestSignInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestSignInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2: this can be used to set alternative signing options. Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed). The digest type may be NULL if the signing algorithm supports it."
0,0,BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses,,,null,BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32),BN_BLINDING_get_flags() returns the BN_BLINDING flags. Currently there are two supported flags: BN_BLINDING_NO_UPDATE and BN_BLINDING_NO_RECREATE. BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses (currently 32). In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set. BN_BLINDING_set_flags() sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags.
0,0,See the SECURE RENEGOTIATION section for more details,,,null,See the SECURE RENEGOTIATION section for more details,Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See the SECURE RENEGOTIATION section for more details.
0,0,The behaviour of the SSL library can be changed by setting several options,,,null,The behaviour of the SSL library can be changed by setting several options,The behaviour of the SSL library can be changed by setting several options. The options are coded as bitmasks and can be combined by a logical or operation (|).
0,0,The options are coded as bitmasks and can be combined by a logical or operation,,,null,The options are coded as bitmasks and can be combined by a logical or operation (|),The behaviour of the SSL library can be changed by setting several options. The options are coded as bitmasks and can be combined by a logical or operation (|).
0,0,As of OpenSSL 1.0.2 g the SSL_OP_NO_SSLv2 option is set by default,,,null,As of OpenSSL 1.0.2g the SSL_OP_NO_SSLv2 option is set by default,Do not use the SSLv2 protocol. As of OpenSSL 1.0.2g the SSL_OP_NO_SSLv2 option is set by default.
0,0,A typical application of this function is to derive keying material for an encryption algorithm from a password in the data parameter,,,null,A typical application of this function is to derive keying material for an encryption algorithm from a password in the data parameter,A typical application of this function is to derive keying material for an encryption algorithm from a password in the data parameter.
0,0,DH_compute_key computes the shared secret from the private DH value in DH_compute_key_APIParam_3 and the other party 's public value in DH_compute_key_APIParam_2 and stores it in DH_compute_key_APIParam_1,,,null,DH_compute_key() computes the shared secret from the private DH value in DH_compute_key_APIParam_3 and the other party's public value in DH_compute_key_APIParam_2 and stores it in DH_compute_key_APIParam_1,DH_compute_key() computes the shared secret from the private DH value in DH_compute_key_APIParam_3 and the other party's public value in DH_compute_key_APIParam_2 and stores it in DH_compute_key_APIParam_1. DH_compute_key_APIParam_1 must point to DH_size(dh) bytes of memory.
0,0,The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter,,,null,The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter,"The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter. If write_params is zero ,then only the pub_key field is encoded as an INTEGER. If write_params is 1 ,then a SEQUENCE consisting of the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded."
0,0,only the pub_key field is encoded as an INTEGER,,,If write_params is zero,"If write_params is zero ,then only the pub_key field is encoded as an INTEGER","The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter. If write_params is zero ,then only the pub_key field is encoded as an INTEGER. If write_params is 1 ,then a SEQUENCE consisting of the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded."
0,0,"the number of bytes of data written will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 , at most EVP_MAX_MD_SIZE bytes will be written",,,If the EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 parameter is not NULL,"If the EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 parameter is not NULL, then the number of bytes of data written (ie the length of the digest) will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2, at most EVP_MAX_MD_SIZE bytes will be written","EVP_DigestFinal_ex() retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2. If the EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 parameter is not NULL, then the number of bytes of data written (ie the length of the digest) will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2, at most EVP_MAX_MD_SIZE bytes will be written. After calling EVP_DigestFinal_ex() no additional calls to EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called to initialize a new digest operation."
0,0,a default implementation is used,,,If the application does not register such a callback using CRYPTO_THREADID_set_callback,"If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno","threadid_func(CRYPTO_THREADID *id) is needed to record the currently-executing thread's identifier into CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1. The implementation of this callback should not fill in CRYPTO_THREADID_set_numeric_APIParam_1 CRYPTO_THREADID_set_pointer_APIParam_1 directly, but should use CRYPTO_THREADID_set_numeric() if thread IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based. If the application does not register such a callback using CRYPTO_THREADID_set_callback(), then a default implementation is used - on Windows and BeOS this uses the system's default thread identifying APIs, and on all other platforms it uses the address of errno. The latter is satisfactory for thread-safety if and only if the platform has a thread-local error number facility."
0,0,Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers,,,null,Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers,Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See the SECURE RENEGOTIATION section for more details.
0,0,keytype adds a flag to the store private key,,,null,keytype adds a flag to the store private key,"keytype adds a flag to the store private key. This is a non standard extension that is only currently interpreted by MSIE. If set to zero the flag is omitted, if set to KEY_SIG the key can be used for signing only, if set to KEY_EX it can be used for signing and encryption. This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption."
0,0,name is the friendlyName to use for the supplied certifictate and key,,,null,name is the friendlyName to use for the supplied certifictate and key,"pass is the passphrase to use. name is the friendlyName to use for the supplied certifictate and key. pkey is the private key to include in the structure and cert its corresponding certificates. ca, if not NULL is an optional set of certificates to also include in the structure."
0,0,Allow legacy insecure renegotiation between OpenSSL and unpatched servers only,,,null,Allow legacy insecure renegotiation between OpenSSL and unpatched servers only: this option is currently set by default,Allow legacy insecure renegotiation between OpenSSL and unpatched servers only: this option is currently set by default. See the SECURE RENEGOTIATION section for more details.
0,0,this option is currently set by default,,,null,Allow legacy insecure renegotiation between OpenSSL and unpatched servers only: this option is currently set by default,Allow legacy insecure renegotiation between OpenSSL and unpatched servers only: this option is currently set by default. See the SECURE RENEGOTIATION section for more details.
0,0,This is a non standard extension that is only currently interpreted by MSIE,,,null,This is a non standard extension that is only currently interpreted by MSIE,"keytype adds a flag to the store private key. This is a non standard extension that is only currently interpreted by MSIE. If set to zero the flag is omitted, if set to KEY_SIG the key can be used for signing only, if set to KEY_EX it can be used for signing and encryption. This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption."
0,0,SMIME_read_PKCS7_APIParam_2 can be passed to PKCS7_verify with the PKCS7_DETACHED flag set,,,null,SMIME_read_PKCS7_APIParam_2 can then be passed to PKCS7_verify() with the PKCS7_DETACHED flag set,"If SMIME_read_PKCS7_APIParam_2 is not NULL ,then the message is clear text signed. SMIME_read_PKCS7_APIParam_2 can then be passed to PKCS7_verify() with the PKCS7_DETACHED flag set."
0,0,Any existing policy set is cleared,,,null,Any existing policy set is cleared,X509_VERIFY_PARAM_set1_policies() enables policy checking (it is disabled by default) and sets the acceptable policy set to policies. Any existing policy set is cleared. The policies parameter can be NULL to clear an existing policy set.
0,0,The _ get_ex_data and _ set_ex_data functionality is described in CRYPTO_set_ex_data,,,null,The *_get_ex_data() and *_set_ex_data() functionality is described in CRYPTO_set_ex_data(3),A detailed description for the *_get_ex_new_index() functionality can be found in RSA_get_ex_new_index(3) . The *_get_ex_data() and *_set_ex_data() functionality is described in CRYPTO_set_ex_data(3) .
0,0,iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use,,,null,iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use,nid_key and nid_cert are the encryption algorithms that should be used for the key and certificate respectively. iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use. keytype is the type of key.
0,0,A detailed description for the _ get_ex_new_index functionality can be found in RSA_get_ex_new_index,,,null,A detailed description for the *_get_ex_new_index() functionality can be found in RSA_get_ex_new_index(3),A detailed description for the *_get_ex_new_index() functionality can be found in RSA_get_ex_new_index(3) . The *_get_ex_data() and *_set_ex_data() functionality is described in CRYPTO_set_ex_data(3) .
0,0,X509_VERIFY_PARAM_add0_policy enables policy checking and adds policy to the acceptable policy set,,,null,X509_VERIFY_PARAM_add0_policy() enables policy checking (it is disabled by default) and adds policy to the acceptable policy set,X509_VERIFY_PARAM_add0_policy() enables policy checking (it is disabled by default) and adds policy to the acceptable policy set.
0,0,X509_VERIFY_PARAM_set1_policies enables policy checking and sets the acceptable policy set to policies,,,null,X509_VERIFY_PARAM_set1_policies() enables policy checking (it is disabled by default) and sets the acceptable policy set to policies,X509_VERIFY_PARAM_set1_policies() enables policy checking (it is disabled by default) and sets the acceptable policy set to policies. Any existing policy set is cleared. The policies parameter can be NULL to clear an existing policy set.
0,0,The X509_VERIFY_PARAM_set_flags function sets the flags in X509_VERIFY_PARAM_set_flags_APIParam_1 by oring it with X509_VERIFY_PARAM_set_flags_APIParam_2,,,null,The X509_VERIFY_PARAM_set_flags() function sets the flags in X509_VERIFY_PARAM_set_flags_APIParam_1 by oring it with X509_VERIFY_PARAM_set_flags_APIParam_2,The X509_VERIFY_PARAM_set_flags() function sets the flags in X509_VERIFY_PARAM_set_flags_APIParam_1 by oring it with X509_VERIFY_PARAM_set_flags_APIParam_2. See the VERIFICATION FLAGS section for a complete description of values the X509_VERIFY_PARAM_set_flags_APIParam_2 parameter can take.
0,0,X509_VERIFY_PARAM_set1_email sets the expected RFC822 email address to email,,,null,X509_VERIFY_PARAM_set1_email() sets the expected RFC822 email address to email,"X509_VERIFY_PARAM_set1_email() sets the expected RFC822 email address to email. If email is NUL-terminated, emaillen may be zero, otherwise emaillen must be set to the length of email. When an email address is specified, certificate verification automatically invokes X509_check_email(3) ."
0,0,Delta CRL checking is currently primitive,,,null,Delta CRL checking is currently primitive,Delta CRL checking is currently primitive. Only a single delta can be used and (partly due to limitations of X509_STORE) constructed CRLs are not maintained.
0,0,X509_VERIFY_PARAM_set1_ip sets the expected IP address to ip,,,null,X509_VERIFY_PARAM_set1_ip() sets the expected IP address to ip,"X509_VERIFY_PARAM_set1_ip() sets the expected IP address to ip. The ip argument is in binary format, in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6. When an IP address is specified, certificate verification automatically invokes X509_check_ip(3) ."
0,0,"BIO_retry_type returns a mask of the cause of a retry condition consisting of the values BIO_FLAGS_READ , BIO_FLAGS_WRITE , BIO_FLAGS_IO_SPECIAL",,,null,"BIO_retry_type returns a mask of the cause of a retry condition consisting of the values BIO_FLAGS_READ , BIO_FLAGS_WRITE , BIO_FLAGS_IO_SPECIAL","BIO_retry_type() returns a mask of the cause of a retry condition consisting of the values BIO_FLAGS_READ, BIO_FLAGS_WRITE, BIO_FLAGS_IO_SPECIAL though current BIO types will only set one of these."
0,0,X509_VERIFY_PARAM_set1_host sets the expected DNS hostname to name clearing any previously specified host name or names,,,null,X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names,"X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names. If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate. If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name. When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero). Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL."
0,0,X509_VERIFY_PARAM_add1_host adds name as an additional reference identifer that can match the peer 's certificate,,,null,X509_VERIFY_PARAM_add1_host() adds name as an additional reference identifer that can match the peer's certificate,"X509_VERIFY_PARAM_add1_host() adds name as an additional reference identifer that can match the peer's certificate. Any previous names set via X509_VERIFY_PARAM_set1_host() or X509_VERIFY_PARAM_add1_host() are retained, no change is made if name is NULL or empty. When multiple names are configured, the peer is considered verified when any name matches."
0,0,"The parameters nid_key , nid_cert , iter , mac_iter and keytype can all be set to zero and sensible defaults will be used",,,null,"The parameters nid_key, nid_cert, iter, mac_iter and keytype can all be set to zero and sensible defaults will be used","The parameters nid_key, nid_cert, iter, mac_iter and keytype can all be set to zero and sensible defaults will be used."
0,0,See the VERIFICATION FLAGS section for a complete description of values the X509_VERIFY_PARAM_set_flags_APIParam_2 parameter can take,,,null,See the VERIFICATION FLAGS section for a complete description of values the X509_VERIFY_PARAM_set_flags_APIParam_2 parameter can take,The X509_VERIFY_PARAM_set_flags() function sets the flags in X509_VERIFY_PARAM_set_flags_APIParam_1 by oring it with X509_VERIFY_PARAM_set_flags_APIParam_2. See the VERIFICATION FLAGS section for a complete description of values the X509_VERIFY_PARAM_set_flags_APIParam_2 parameter can take.
0,0,The EVP_PKEY_verify function performs a public key verification operation using EVP_PKEY_verify_APIParam_1,,,null,The EVP_PKEY_verify() function performs a public key verification operation using EVP_PKEY_verify_APIParam_1,The EVP_PKEY_verify() function performs a public key verification operation using EVP_PKEY_verify_APIParam_1. The signature is specified using the sig and siglen parameters. The verified data (ie the data believed originally signed) is specified using the tbs and tbslen parameters.
0,0,i2d_PrivateKey encodes key,,,null,i2d_PrivateKey() encodes key,"i2d_PrivateKey() encodes key. It uses a key specific format or, if none is defined for that key type, PKCS#8 unencrypted PrivateKeyInfo format."
0,0,d2i_PrivateKey decodes a private key using algorithm d2i_PrivateKey_APIParam_1,,,null,d2i_PrivateKey() decodes a private key using algorithm d2i_PrivateKey_APIParam_1,d2i_PrivateKey() decodes a private key using algorithm d2i_PrivateKey_APIParam_1. It attempts to use any key specific format or PKCS#8 unencrypted PrivateKeyInfo format. The d2i_PrivateKey_APIParam_1 parameter should be a public key algorithm constant such as EVP_PKEY_RSA. An error occurs if the decoded key does not match d2i_PrivateKey_APIParam_1.
0,0,The verified data is specified using the tbs and tbslen parameters,,,null,The verified data (ie the data believed originally signed) is specified using the tbs and tbslen parameters,The EVP_PKEY_verify() function performs a public key verification operation using EVP_PKEY_verify_APIParam_1. The signature is specified using the sig and siglen parameters. The verified data (ie the data believed originally signed) is specified using the tbs and tbslen parameters.
0,0,The signature is specified using the sig and siglen parameters,,,null,The signature is specified using the sig and siglen parameters,The EVP_PKEY_verify() function performs a public key verification operation using EVP_PKEY_verify_APIParam_1. The signature is specified using the sig and siglen parameters. The verified data (ie the data believed originally signed) is specified using the tbs and tbslen parameters.
0,0,The error code can be obtained by calling ERR_get_error,,,null,The error code can be obtained by calling ERR_get_error(3),d2i_PrivateKey() and d2i_AutoPrivateKey() return a valid EVP_KEY structure or NULL if an error occurs. The error code can be obtained by calling ERR_get_error(3) .
0,0,As for EC_POINT_mul the value EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 may be NULL,,,null,As for EC_POINT_mul the value EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 may be NULL,EC_POINTs_mul calculates the value generator * EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 + q[0] * m[0] + ... + q[num-1] * m[num-1]. As for EC_POINT_mul the value EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 may be NULL.
0,0,SSL_connect initiates the TLS/SSL handshake with a server,,,null,SSL_connect() initiates the TLS/SSL handshake with a server,SSL_connect() initiates the TLS/SSL handshake with a server. The communication channel must already have been set and assigned to the SSL_connect_APIParam_1 by setting an underlying BIO.
0,0,Call SSL_get_error with the return value ret to find out the reason,,,null,Call SSL_get_error() with the return value ret to find out the reason,The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the return value ret to find out the reason.
0,0,The action depends on the underlying BIO,,,null,The action depends on the underlying BIO,"If the underlying BIO is non-blocking, SSL_connect() will also return when the underlying BIO could not satisfy the needs of SSL_connect() to continue the handshake, indicating the problem by the return value -1. In this case a call to SSL_get_error() with the return value of SSL_connect() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_connect(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,The EVP_PKEY_verify_init function initializes a public key algorithm context using key pkey for a signature verification operation,,,null,The EVP_PKEY_verify_init() function initializes a public key algorithm context using key pkey for a signature verification operation,The EVP_PKEY_verify_init() function initializes a public key algorithm context using key pkey for a signature verification operation.
0,0,It attempts to use any key specific format or PKCS # 8 unencrypted PrivateKeyInfo format,,,null,It attempts to use any key specific format or PKCS#8 unencrypted PrivateKeyInfo format,d2i_PrivateKey() decodes a private key using algorithm d2i_PrivateKey_APIParam_1. It attempts to use any key specific format or PKCS#8 unencrypted PrivateKeyInfo format. The d2i_PrivateKey_APIParam_1 parameter should be a public key algorithm constant such as EVP_PKEY_RSA. An error occurs if the decoded key does not match d2i_PrivateKey_APIParam_1.
0,0,the message is clear text signed,,,If SMIME_read_PKCS7_APIParam_2 is not NULL,"If SMIME_read_PKCS7_APIParam_2 is not NULL ,then the message is clear text signed","If SMIME_read_PKCS7_APIParam_2 is not NULL ,then the message is clear text signed. SMIME_read_PKCS7_APIParam_2 can then be passed to PKCS7_verify() with the PKCS7_DETACHED flag set."
0,0,"If the underlying BIO is blocking, SSL_connect will only return once the handshake has been finished or an error occurred",,,null,"If the underlying BIO is blocking, SSL_connect() will only return once the handshake has been finished or an error occurred","If the underlying BIO is blocking, SSL_connect() will only return once the handshake has been finished or an error occurred."
0,0,It is usually safe to use SSL_OP_ALL to enable the bug workaround options,,,if compatibility with somewhat broken implementations is desired,It is usually safe to use SSL_OP_ALL to enable the bug workaround options if compatibility with somewhat broken implementations is desired,It is usually safe to use SSL_OP_ALL to enable the bug workaround options if compatibility with somewhat broken implementations is desired.
0,0,See EVP_DigestSignInit for detail,,,null,See EVP_DigestSignInit(3) for detail,The signctx_init() and signctx() methods are used to sign a digest present by a EVP_MD_CTX object. They are called by the EVP_DigestSign functions. See EVP_DigestSignInit(3) for detail.
0,0,"Refer to EVP_PKEY_CTX_new , EVP_PKEY_CTX_new_id , EVP_PKEY_CTX_free and EVP_PKEY_CTX_dup",,,null,"Refer to EVP_PKEY_CTX_new(3) , EVP_PKEY_CTX_new_id(3) , EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3)","The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created. As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed. The copy() method is called when an EVP_PKEY_CTX is being duplicated. Refer to EVP_PKEY_CTX_new(3) , EVP_PKEY_CTX_new_id(3) , EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3) ."
0,0,They are called by the EVP_DigestSign functions,,,null,They are called by the EVP_DigestSign functions,The signctx_init() and signctx() methods are used to sign a digest present by a EVP_MD_CTX object. They are called by the EVP_DigestSign functions. See EVP_DigestSignInit(3) for detail.
0,0,the peer is considered verified when any name matches,,,When multiple names are configured,"When multiple names are configured, the peer is considered verified when any name matches","X509_VERIFY_PARAM_add1_host() adds name as an additional reference identifer that can match the peer's certificate. Any previous names set via X509_VERIFY_PARAM_set1_host() or X509_VERIFY_PARAM_add1_host() are retained, no change is made if name is NULL or empty. When multiple names are configured, the peer is considered verified when any name matches."
0,0,certificate verification automatically invokes X509_check_email,,,When an email address is specified,"When an email address is specified, certificate verification automatically invokes X509_check_email(3)","X509_VERIFY_PARAM_set1_email() sets the expected RFC822 email address to email. If email is NUL-terminated, emaillen may be zero, otherwise emaillen must be set to the length of email. When an email address is specified, certificate verification automatically invokes X509_check_email(3) ."
0,0,See EVP_DigestVerifyInit for detail,,,null,See EVP_DigestVerifyInit(3) for detail,The verifyctx_init() and verifyctx() methods are used to verify a signature against the data in a EVP_MD_CTX object. They are called by the various EVP_DigestVerify functions. See EVP_DigestVerifyInit(3) for detail.
0,0,EVP_PKEY_base_id returns the type of EVP_PKEY_base_id_APIParam_1,,,null,EVP_PKEY_base_id() returns the type of EVP_PKEY_base_id_APIParam_1,EVP_PKEY_base_id() returns the type of EVP_PKEY_base_id_APIParam_1. For example an RSA key will return EVP_PKEY_RSA.
0,0,The signctx_init and signctx methods are used to sign a digest present by a EVP_MD_CTX object,,,null,The signctx_init() and signctx() methods are used to sign a digest present by a EVP_MD_CTX object,The signctx_init() and signctx() methods are used to sign a digest present by a EVP_MD_CTX object. They are called by the EVP_DigestSign functions. See EVP_DigestSignInit(3) for detail.
0,0,certificate verification automatically invokes X509_check_ip,,,When an IP address is specified,"When an IP address is specified, certificate verification automatically invokes X509_check_ip(3)","X509_VERIFY_PARAM_set1_ip() sets the expected IP address to ip. The ip argument is in binary format, in network byte-order and iplen must be set to 4 for IPv4 and 16 for IPv6. When an IP address is specified, certificate verification automatically invokes X509_check_ip(3) ."
0,0,The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY_CTX object,,,null,The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY_CTX object,The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY_CTX object.
0,0,EVP_PKEY_id returns the actual OID associated with EVP_PKEY_id_APIParam_1,,,null,EVP_PKEY_id() returns the actual OID associated with EVP_PKEY_id_APIParam_1,EVP_PKEY_id() returns the actual OID associated with EVP_PKEY_id_APIParam_1. Historically keys using the same algorithm could use different OIDs. For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2). The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice.
0,0,They are called by the various EVP_DigestVerify functions,,,null,They are called by the various EVP_DigestVerify functions,The verifyctx_init() and verifyctx() methods are used to verify a signature against the data in a EVP_MD_CTX object. They are called by the various EVP_DigestVerify functions. See EVP_DigestVerifyInit(3) for detail.
0,0,"The DSAPrivateKey functions also use a non standard structure consiting consisting of a SEQUENCE containing the p , q , d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key and priv_key fields respectively",,,null,"The DSAPrivateKey functions also use a non standard structure consiting consisting of a SEQUENCE containing the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key and priv_key fields respectively","The DSAPrivateKey functions also use a non standard structure consiting consisting of a SEQUENCE containing the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key and priv_key fields respectively."
0,0,EVP_PKEY_type returns the underlying type of the NID EVP_PKEY_type_APIParam_1,,,null,EVP_PKEY_type() returns the underlying type of the NID EVP_PKEY_type_APIParam_1,EVP_PKEY_type() returns the underlying type of the NID EVP_PKEY_type_APIParam_1. For example EVP_PKEY_type(EVP_PKEY_RSA2) will return EVP_PKEY_RSA.
0,0,"For details on the output buffer size , refer to EVP_PKEY_sign",,,null,"For details on the output buffer size, refer to EVP_PKEY_sign(3)","If an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is set with the EVP_PKEY_FLAG_AUTOARGLEN flag, the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework. Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves. For details on the output buffer size, refer to EVP_PKEY_sign(3) ."
0,0,Historically keys using the same algorithm could use different OIDs,,,null,Historically keys using the same algorithm could use different OIDs,EVP_PKEY_id() returns the actual OID associated with EVP_PKEY_id_APIParam_1. Historically keys using the same algorithm could use different OIDs. For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2). The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice.
0,0,EVP_PKEY_set1_engine sets the ENGINE handling EVP_PKEY_set1_engine_APIParam_1 to EVP_PKEY_set1_engine_APIParam_2,,,null,EVP_PKEY_set1_engine() sets the ENGINE handling EVP_PKEY_set1_engine_APIParam_1 to EVP_PKEY_set1_engine_APIParam_2,EVP_PKEY_set1_engine() sets the ENGINE handling EVP_PKEY_set1_engine_APIParam_1 to EVP_PKEY_set1_engine_APIParam_2. It must be called after the key algorithm and components are set up. If EVP_PKEY_set1_engine_APIParam_2 does not include an EVP_PKEY_METHOD for EVP_PKEY_set1_engine_APIParam_1 an error occurs.
0,0,the RSA operations are much faster ,1,,when these values are available,"p, q, dmp1, dmq1 and iqmp may be NULL in private keys, but the RSA operations are much faster when these values are available","p, q, dmp1, dmq1 and iqmp may be NULL in private keys, but the RSA operations are much faster when these values are available."
0,0,"p , q , dmp1 , dmq1 and iqmp may be NULL in private keys , but",,,null,"p, q, dmp1, dmq1 and iqmp may be NULL in private keys, but the RSA operations are much faster when these values are available","p, q, dmp1, dmq1 and iqmp may be NULL in private keys, but the RSA operations are much faster when these values are available."
0,0,The verifyctx_init and verifyctx methods are used to verify a signature against the data in a EVP_MD_CTX object,,,null,The verifyctx_init() and verifyctx() methods are used to verify a signature against the data in a EVP_MD_CTX object,The verifyctx_init() and verifyctx() methods are used to verify a signature against the data in a EVP_MD_CTX object. They are called by the various EVP_DigestVerify functions. See EVP_DigestVerifyInit(3) for detail.
0,0,"Any previous names set via X509_VERIFY_PARAM_set1_host or X509_VERIFY_PARAM_add1_host are retained , no change is made",,,if name is NULL or empty,"Any previous names set via X509_VERIFY_PARAM_set1_host() or X509_VERIFY_PARAM_add1_host() are retained, no change is made if name is NULL or empty","X509_VERIFY_PARAM_add1_host() adds name as an additional reference identifer that can match the peer's certificate. Any previous names set via X509_VERIFY_PARAM_set1_host() or X509_VERIFY_PARAM_add1_host() are retained, no change is made if name is NULL or empty. When multiple names are configured, the peer is considered verified when any name matches."
0,0,CRLs are expected to be available in the corresponding X509_STORE structure,,,If CRLs checking is enable,"If CRLs checking is enable ,CRLs are expected to be available in the corresponding X509_STORE structure","If CRLs checking is enable ,CRLs are expected to be available in the corresponding X509_STORE structure. No attempt is made to download CRLs from the CRL distribution points extension."
0,0,"q , d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded",,,"If write_params is 1 , a SEQUENCE consisting of the p","If write_params is 1 ,then a SEQUENCE consisting of the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded","The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter. If write_params is zero ,then only the pub_key field is encoded as an INTEGER. If write_params is 1 ,then a SEQUENCE consisting of the p, q, d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded."
0,0," the list of hostnames is cleared , and name checks are not performed on the peer certificate",1,,If name is NULL or empty,"If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate","X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names. If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate. If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name. When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero). Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL."
0,0,certificate verification automatically invokes X509_check_host with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags,,,When a hostname is specified,"When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero)","X509_VERIFY_PARAM_set1_host() sets the expected DNS hostname to name clearing any previously specified host name or names. If name is NULL, or empty the list of hostnames is cleared, and name checks are not performed on the peer certificate. If name is NUL-terminated, namelen may be zero, otherwise namelen must be set to the length of name. When a hostname is specified, certificate verification automatically invokes X509_check_host(3) with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags() (default zero). Applications are strongly advised to use this interface in preference to explicitly calling X509_check_host(3) , hostname checks are out of scope with the DANE-EE(3) certificate usage, and the internal check will be suppressed as appropriate when DANE support is added to OpenSSL."
0,0,This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption,,,null,This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption,"keytype adds a flag to the store private key. This is a non standard extension that is only currently interpreted by MSIE. If set to zero the flag is omitted, if set to KEY_SIG the key can be used for signing only, if set to KEY_EX it can be used for signing and encryption. This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption."
0,0,"As opposed to init , the cleanup method is called",,,when an EVP_PKEY_CTX is freed,"As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed","The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created. As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed. The copy() method is called when an EVP_PKEY_CTX is being duplicated. Refer to EVP_PKEY_CTX_new(3) , EVP_PKEY_CTX_new_id(3) , EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3) ."
0,0,The copy method is called,,,when an EVP_PKEY_CTX is being duplicated,The copy() method is called when an EVP_PKEY_CTX is being duplicated,"The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created. As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed. The copy() method is called when an EVP_PKEY_CTX is being duplicated. Refer to EVP_PKEY_CTX_new(3) , EVP_PKEY_CTX_new_id(3) , EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3) ."
0,0,The init method is called to initialize algorithm-specific data,,,when a new EVP_PKEY_CTX is created,The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created,"The init() method is called to initialize algorithm-specific data when a new EVP_PKEY_CTX is created. As opposed to init(), the cleanup() method is called when an EVP_PKEY_CTX is freed. The copy() method is called when an EVP_PKEY_CTX is being duplicated. Refer to EVP_PKEY_CTX_new(3) , EVP_PKEY_CTX_new_id(3) , EVP_PKEY_CTX_free(3) and EVP_PKEY_CTX_dup(3) ."
0,0,It uses a key specific format or PKCS # 8 unencrypted PrivateKeyInfo format,1,,if none is defined for that key type,"It uses a key specific format or, if none is defined for that key type, PKCS#8 unencrypted PrivateKeyInfo format","i2d_PrivateKey() encodes key. It uses a key specific format or, if none is defined for that key type, PKCS#8 unencrypted PrivateKeyInfo format."
0,0,EC_POINTs_mul calculates the value generator EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 + q -LSB- 0 -RSB- m -LSB- 0 -RSB- + ... + q -LSB- num-1 -RSB- m -LSB- num-1 -RSB-,,,null,EC_POINTs_mul calculates the value generator * EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 + q[0] * m[0] + ... + q[num-1] * m[num-1],EC_POINTs_mul calculates the value generator * EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 + q[0] * m[0] + ... + q[num-1] * m[num-1]. As for EC_POINT_mul the value EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 may be NULL.
0,0,RSA_get_ex_data is used to retrieve application specific data,,,null,RSA_get_ex_data() is used to retrieve application specific data,"RSA_get_ex_data() is used to retrieve application specific data. The data is returned to the application, this will be the same value as supplied to a previous RSA_set_ex_data() call."
0,0,new_func and free_func take the same parameters,,,null,new_func() and free_func() take the same parameters,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption or NID_rsa,,,null,For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2),EVP_PKEY_id() returns the actual OID associated with EVP_PKEY_id_APIParam_1. Historically keys using the same algorithm could use different OIDs. For example an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption (equivalent to EVP_PKEY_RSA) or NID_rsa (equivalent to EVP_PKEY_RSA2). The use of alternative non-standard OIDs is now rare so EVP_PKEY_RSA2 et al are not often seen in practice.
0,0,CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data,,,null,CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(),new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,The RSA_get_ex_new_index function is initially called to `` register '' some new application specific data,,,null,"The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data","The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
0,0,CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure,,,null,CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,"The data is returned to the application, this will be the same value as supplied to a previous RSA_set_ex_data call",,,null,"The data is returned to the application, this will be the same value as supplied to a previous RSA_set_ex_data() call","RSA_get_ex_data() is used to retrieve application specific data. The data is returned to the application, this will be the same value as supplied to a previous RSA_set_ex_data() call."
0,0,The return value of new_func is ignored,,,null,The return value of new_func() is ignored,The return value of new_func() is ignored.
0,0,This function will typically be used to allocate any application specific structure,,,null,This function will typically be used to allocate any application specific structure,new_func() is called when a structure is initially allocated (for example with RSA_new(). The parent structure members will not have any meaningful values at this point. This function will typically be used to allocate any application specific structure.
0,0,The precise manner in which these function pointers are called is described in more detail below,,,null,The precise manner in which these function pointers are called is described in more detail below,"The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
0,0,BN_add_word adds BN_add_word_APIParam_2 to BN_add_word_APIParam_1,,,null,BN_add_word() adds BN_add_word_APIParam_2 to BN_add_word_APIParam_1 (a+=w),BN_add_word() adds BN_add_word_APIParam_2 to BN_add_word_APIParam_1 (a+=w).
0,0,DSA_generate_key expects DSA_generate_key_APIParam_1 to contain DSA parameters,,,null,DSA_generate_key() expects DSA_generate_key_APIParam_1 to contain DSA parameters,DSA_generate_key() expects DSA_generate_key_APIParam_1 to contain DSA parameters. It generates a new key pair and stores it in a->pub_key and a->priv_key.
0,0,BN_sub_word subtracts BN_sub_word_APIParam_2 from BN_sub_word_APIParam_1,,,null,BN_sub_word() subtracts BN_sub_word_APIParam_2 from BN_sub_word_APIParam_1 (a-=w),BN_sub_word() subtracts BN_sub_word_APIParam_2 from BN_sub_word_APIParam_1 (a-=w).
0,0,BN_div_word divides BN_div_word_APIParam_1 by BN_div_word_APIParam_2 and returns the remainder,,,null,BN_div_word() divides BN_div_word_APIParam_1 by BN_div_word_APIParam_2 (a/=w) and returns the remainder,BN_div_word() divides BN_div_word_APIParam_1 by BN_div_word_APIParam_2 (a/=w) and returns the remainder.
0,0,BN_mul_word multiplies BN_mul_word_APIParam_1 and BN_mul_word_APIParam_2,,,null,BN_mul_word() multiplies BN_mul_word_APIParam_1 and BN_mul_word_APIParam_2 (a*=w),BN_mul_word() multiplies BN_mul_word_APIParam_1 and BN_mul_word_APIParam_2 (a*=w).
0,0,BN_mod_word returns the remainder of BN_mod_word_APIParam_1 divided by BN_mod_word_APIParam_2,,,null,BN_mod_word() returns the remainder of BN_mod_word_APIParam_1 divided by BN_mod_word_APIParam_2 (a%w),BN_mod_word() returns the remainder of BN_mod_word_APIParam_1 divided by BN_mod_word_APIParam_2 (a%w).
0,0,The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index,,,null,The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,this will be the same value returned by RSA_get_ex_new_index when the functions were initially registered,,,null,The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,"The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2 , RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func and free_func",,,null,"The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()","dup_func() is called when a structure is being copied. Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively. The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination. The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()."
0,0,Points can also be described in terms of their compressed co-ordinates,,,null,Points can also be described in terms of their compressed co-ordinates,"Points can also be described in terms of their compressed co-ordinates. For a point (x, y), for any given value for x such that the point is on the curve there will only ever be two possible values for y. Therefore a point can be set using the EC_POINT_set_compressed_coordinates_GFp and EC_POINT_set_compressed_coordinates_GF2m functions where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used."
0,0,XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus,,,null,XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.
0,0,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators,,,null,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.
0,0,XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively,,,null,XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.
0,0,See the BUGS section,,,null,See the BUGS section,RSA_flags() returns the flags that are set for RSA_flags_APIParam_1's current RSA_METHOD. See the BUGS section.
0,0,Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively,,,null,Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively,"dup_func() is called when a structure is being copied. Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively. The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination. The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()."
0,0,The new_func function is n't very useful,,,null,The new_func function is n't very useful,The new_func() function isn't very useful because no meaningful values are present in the parent RSA structure when it is called.
0,0,It takes three optional function pointers which are called,1,,"hen the parent structure is initially created, when it is copied and when it is freed up","It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up","The RSA_get_ex_new_index() function is initially called to ""register"" some new application specific data. It takes three optional function pointers which are called when the parent structure (in this case an RSA structure) is initially created, when it is copied and when it is freed up. If any or all of these function pointer arguments are not used, they should be set to NULL. The precise manner in which these function pointers are called is described in more detail below. RSA_get_ex_new_index() also takes additional long and pointer parameters which will be passed to the supplied functions but which otherwise have no special meaning. It returns an index which should be stored (typically in a static variable) and passed used in the RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter in the remaining functions. Each successful call to RSA_get_ex_new_index() will return an index greater than any previously returned, this is important because the optional functions are called in order of increasing index value."
0,0,XN_FLAG_COMPAT uses a format identical to X509_NAME_print,,,null,XN_FLAG_COMPAT uses a format identical to X509_NAME_print(): in fact XN_FLAG_COMPAT calls X509_NAME_print() internally,XN_FLAG_COMPAT uses a format identical to X509_NAME_print(): in fact XN_FLAG_COMPAT calls X509_NAME_print() internally.
0,0,RSA_flags returns the flags that are set for RSA_flags_APIParam_1's current method,,,null,RSA_flags() returns the flags that are set for RSA_flags_APIParam_1's current method,RSA_flags() returns the flags that are set for RSA_flags_APIParam_1's current method.
0,0,An RSA_set_method_APIParam_2 RSA_new_method_APIParam_1 RSA_set_default_method_APIParam_1 specifies the functions that OpenSSL uses for RSA operations,,,null,An RSA_set_method_APIParam_2 RSA_new_method_APIParam_1 RSA_set_default_method_APIParam_1 specifies the functions that OpenSSL uses for RSA operations,"An RSA_set_method_APIParam_2 RSA_new_method_APIParam_1 RSA_set_default_method_APIParam_1 specifies the functions that OpenSSL uses for RSA operations. By modifying the method, alternative implementations such as hardware accelerators may be used. IMPORTANT: See the NOTES section for important information about how these RSA API functions are affected by the use of ENGINE API calls."
0,0,"The options XN_FLAG_SEP_COMMA_PLUS , XN_FLAG_SEP_CPLUS_SPC , XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use",,,null,"The options XN_FLAG_SEP_COMMA_PLUS, XN_FLAG_SEP_CPLUS_SPC, XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use","The options XN_FLAG_SEP_COMMA_PLUS, XN_FLAG_SEP_CPLUS_SPC, XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use. Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN. Multi-valued RDNs are currently very rare so the second separator will hardly ever be used."
0,0,RSA_set_default_method makes RSA_set_default_method_APIParam_1 the default method for all RSA structures created later,,,null,RSA_set_default_method() makes RSA_set_default_method_APIParam_1 the default method for all RSA structures created later,"RSA_set_default_method() makes RSA_set_default_method_APIParam_1 the default method for all RSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for RSA, so this function is no longer recommended."
0,0,XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces,,,null,XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.
0,0,The affine co-ordinates for a point describe a point in terms of its x and y position,,,null,The affine co-ordinates for a point describe a point in terms of its x and y position,The affine co-ordinates for a point describe a point in terms of its x and y position. The functions EC_POINT_set_affine_coordinates_GFp and EC_POINT_set_affine_coordinates_GF2m set the x and y co-ordinates for the point EC_POINT_oct2point_APIParam_2 EC_POINT_set_affine_coordinates_GFp_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_2 EC_POINT_set_compressed_coordinates_GF2m_APIParam_2 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_2 EC_POINT_set_affine_coordinates_GF2m_APIParam_2 EC_POINT_point2oct_APIParam_2 defined over the curve given in EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_point2oct_APIParam_1.
0,0,in fact XN_FLAG_COMPAT calls X509_NAME_print internally,,,null,XN_FLAG_COMPAT uses a format identical to X509_NAME_print(): in fact XN_FLAG_COMPAT calls X509_NAME_print() internally,XN_FLAG_COMPAT uses a format identical to X509_NAME_print(): in fact XN_FLAG_COMPAT calls X509_NAME_print() internally.
0,0,It generates a new key pair and stores it in a - > pub_key and a - > priv_key,,,null,It generates a new key pair and stores it in a->pub_key and a->priv_key,DSA_generate_key() expects DSA_generate_key_APIParam_1 to contain DSA parameters. It generates a new key pair and stores it in a->pub_key and a->priv_key.
8,0,"RSA_set_ex_data is used to set application specific data , the data is supplied in the RSA_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application",,,null,"RSA_set_ex_data() is used to set application specific data, the data is supplied in the RSA_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application","RSA_set_ex_data() is used to set application specific data, the data is supplied in the RSA_set_ex_data_APIParam_3 parameter and its precise meaning is up to the application."
0,0,this is more readable that plain comma and plus,,,null,XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus,XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators. XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces: this is more readable that plain comma and plus. XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus. XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively.
0,0,"The fields XN_FLAG_FN_SN , XN_FLAG_FN_LN , XN_FLAG_FN_OID , XN_FLAG_FN_NONE determine how a field name is displayed",,,null,"The fields XN_FLAG_FN_SN, XN_FLAG_FN_LN, XN_FLAG_FN_OID, XN_FLAG_FN_NONE determine how a field name is displayed","The fields XN_FLAG_FN_SN, XN_FLAG_FN_LN, XN_FLAG_FN_OID, XN_FLAG_FN_NONE determine how a field name is displayed. It will use the short name (eg CN) the long name (eg commonName) always use OID numerical form (normally OIDs are only used if the field name is not recognised) and no field name respectively."
0,0,CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure,,,null,CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,new_func is called,,,when a structure is initially allocated,new_func() is called when a structure is initially allocated (for example with RSA_new(),new_func() is called when a structure is initially allocated (for example with RSA_new(). The parent structure members will not have any meaningful values at this point. This function will typically be used to allocate any application specific structure.
0,0,free_func is called,,,when a structure is being freed up,free_func() is called when a structure is being freed up,free_func() is called when a structure is being freed up. The dynamic parent structure members should not be accessed because The dynamic parent structure members will be freed up when this function is called.
0,0,the functions CRYPTO_get_ex_data and CRYPTO_set_ex_data can be called to manipulate it,,,null,CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,XN_FLAG_MULTILINE is a multiline format which is the same as,,,null,XN_FLAG_MULTILINE is a multiline format which is the same as: ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN,XN_FLAG_MULTILINE is a multiline format which is the same as: ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN
0,0,dup_func is called,,,when a structure is being copied,dup_func() is called when a structure is being copied,"dup_func() is called when a structure is being copied. Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively. The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination. The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()."
0,0,"The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination",,,null,"The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination","dup_func() is called when a structure is being copied. Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively. The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination. The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()."
0,0,RSA_new_method allocates and initializes an RSA structure so that engine will be used for the RSA operations,,,null,RSA_new_method() allocates and initializes an RSA structure so that engine will be used for the RSA operations,"RSA_new_method() allocates and initializes an RSA structure so that engine will be used for the RSA operations. If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used."
0,0,Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN,,,null,Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN,"The options XN_FLAG_SEP_COMMA_PLUS, XN_FLAG_SEP_CPLUS_SPC, XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use. Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN. Multi-valued RDNs are currently very rare so the second separator will hardly ever be used."
0,0,XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to,,,null,XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to: ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS,XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to: ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS
0,0,XN_FLAG_ONELINE is a more readable one line format which is the same as,,,null,XN_FLAG_ONELINE is a more readable one line format which is the same as: ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN,XN_FLAG_ONELINE is a more readable one line format which is the same as: ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN
0,0,It will use the short name the long name always use OID numerical form and no field name respectively,,,null,It will use the short name (eg CN) the long name (eg commonName) always use OID numerical form (normally OIDs are only used if the field name is not recognised) and no field name respectively,"The fields XN_FLAG_FN_SN, XN_FLAG_FN_LN, XN_FLAG_FN_OID, XN_FLAG_FN_NONE determine how a field name is displayed. It will use the short name (eg CN) the long name (eg commonName) always use OID numerical form (normally OIDs are only used if the field name is not recognised) and no field name respectively."
0,0,"As of version 0.9.7 , RSA_METHOD implementations are grouped together with other algorithmic APIs into ENGINE modules",,,null,"As of version 0.9.7, RSA_METHOD implementations are grouped together with other algorithmic APIs (eg DSA_METHOD, EVP_CIPHER, etc) into ENGINE modules","As of version 0.9.7, RSA_METHOD implementations are grouped together with other algorithmic APIs (eg DSA_METHOD, EVP_CIPHER, etc) into ENGINE modules. If a default ENGINE is specified for RSA functionality using an ENGINE API function, that will override any RSA defaults set using the RSA API (ie RSA_set_default_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RSA and other cryptographic algorithms."
0,0,ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN,,,null,XN_FLAG_MULTILINE is a multiline format which is the same as: ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN,XN_FLAG_MULTILINE is a multiline format which is the same as: ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN
0,0,ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS,,,null,XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to: ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS,XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to: ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS
0,0,PKCS12_parse_APIParam_2 is the passphrase to use,,,null,PKCS12_parse_APIParam_2 is the passphrase to use,"PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse. PKCS12_parse_APIParam_2 is the passphrase to use. If successful ,the private key will be written to PKCS12_parse_APIParam_3, the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to *ca."
0,0,PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse,,,null,PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse,"PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse. PKCS12_parse_APIParam_2 is the passphrase to use. If successful ,the private key will be written to PKCS12_parse_APIParam_3, the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to *ca."
0,0,CMS_compress creates and returns a CMS CompressedData structure,,,null,CMS_compress() creates and returns a CMS CompressedData structure,CMS_compress() creates and returns a CMS CompressedData structure. CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression). CMS_compress_APIParam_1 is the content to be compressed. CMS_compress_APIParam_3 is an optional set of flags.
0,0,ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN,,,null,XN_FLAG_ONELINE is a more readable one line format which is the same as: ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN,XN_FLAG_ONELINE is a more readable one line format which is the same as: ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN
0,0,CMS_compress_APIParam_1 is the content to be compressed,,,null,CMS_compress_APIParam_1 is the content to be compressed,CMS_compress() creates and returns a CMS CompressedData structure. CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression). CMS_compress_APIParam_1 is the content to be compressed. CMS_compress_APIParam_3 is an optional set of flags.
0,0,CMS_compress_APIParam_3 is an optional set of flags,,,null,CMS_compress_APIParam_3 is an optional set of flags,CMS_compress() creates and returns a CMS CompressedData structure. CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression). CMS_compress_APIParam_1 is the content to be compressed. CMS_compress_APIParam_3 is an optional set of flags.
0,0,ca can be <NULL> in which case additional certificates will be discarded,,,null,ca can be <NULL> in which case additional certificates will be discarded,The parameters PKCS12_parse_APIParam_3 and PKCS12_parse_APIParam_4 cannot be NULL. ca can be <NULL> in which case additional certificates will be discarded. *ca can also be a valid STACK in which case additional certificates are appended to *ca. If *ca is NULL a new STACK will be allocated.
0,0,Only friendlyName and localKeyID attributes are currently stored in certificates,,,null,Only friendlyName and localKeyID attributes are currently stored in certificates,Only friendlyName and localKeyID attributes are currently stored in certificates. Other attributes are discarded.
0,0,the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination,,,null,"The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination","dup_func() is called when a structure is being copied. Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively. The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination: the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination. The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2, RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func() and free_func()."
0,0,CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm,,,null,CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression),CMS_compress() creates and returns a CMS CompressedData structure. CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm (zlib compression). CMS_compress_APIParam_1 is the content to be compressed. CMS_compress_APIParam_3 is an optional set of flags.
0,0,The behaviour of RSA_flags is a mis-feature that is left as-is for now to avoid creating compatibility problems,,,null,The behaviour of RSA_flags() is a mis-feature that is left as-is for now to avoid creating compatibility problems,"The behaviour of RSA_flags() is a mis-feature that is left as-is for now to avoid creating compatibility problems. RSA functionality, such as the encryption functions, are controlled by the flags value in the RSA key itself, not by the flags value in the RSA_METHOD attached to the RSA key (which is what this function returns). If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags() function - in effect RSA_flags() behaves more like an RSA_default_flags() function (which does not currently exist)."
0,0,ca can also be a valid STACK in which case additional certificates are appended to ca,,,null,*ca can also be a valid STACK in which case additional certificates are appended to *ca,The parameters PKCS12_parse_APIParam_3 and PKCS12_parse_APIParam_4 cannot be NULL. ca can be <NULL> in which case additional certificates will be discarded. *ca can also be a valid STACK in which case additional certificates are appended to *ca. If *ca is NULL a new STACK will be allocated.
0,0,"For a point , for any given value for x such that the point is on the curve there will only ever be two possible values for y",,,null,"For a point (x, y), for any given value for x such that the point is on the curve there will only ever be two possible values for y","Points can also be described in terms of their compressed co-ordinates. For a point (x, y), for any given value for x such that the point is on the curve there will only ever be two possible values for y. Therefore a point can be set using the EC_POINT_set_compressed_coordinates_GFp and EC_POINT_set_compressed_coordinates_GF2m functions where x is the x co-ordinate and y_bit is a value 0 or 1 to identify which of the two possible values for y should be used."
0,0,the whole DN is printed in reversed order,,,If XN_FLAG_DN_REV is set,"If XN_FLAG_DN_REV is set ,the whole DN is printed in reversed order","If XN_FLAG_DN_REV is set ,the whole DN is printed in reversed order."
0,0,originally passed to the same corresponding parameters,,,when RSA_get_ex_new_index was called,Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called,new_func() and free_func() take the same parameters. CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure. CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data (this wont be of much use in new_func(). CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure: the functions CRYPTO_get_ex_data() and CRYPTO_set_ex_data() can be called to manipulate it. The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index: this will be the same value returned by RSA_get_ex_new_index() when the functions were initially registered. Finally the RSA_get_ex_new_index_APIParam_1 RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 RSA_get_ex_new_index_APIParam_2 parameters are the values originally passed to the same corresponding parameters when RSA_get_ex_new_index() was called.
0,0,field names are padded to 20 characters,,,If XN_FLAG_FN_ALIGN is set,"If XN_FLAG_FN_ALIGN is set ,then field names are padded to 20 characters: this is only of use for multiline format","If XN_FLAG_FN_ALIGN is set ,then field names are padded to 20 characters: this is only of use for multiline format."
0,0,spaces will be placed around the ' = ' character separating field names and values,,,If XN_FLAG_SPC_EQ is set,"If XN_FLAG_SPC_EQ is set, then spaces will be placed around the '=' character separating field names and values","If XN_FLAG_SPC_EQ is set, then spaces will be placed around the '=' character separating field names and values."
0,0,that will override any RSA defaults set using the RSA API,,,If a default ENGINE is specified for RSA functionality using an ENGINE API function,"If a default ENGINE is specified for RSA functionality using an ENGINE API function, that will override any RSA defaults set using the RSA API (ie RSA_set_default_method())","As of version 0.9.7, RSA_METHOD implementations are grouped together with other algorithmic APIs (eg DSA_METHOD, EVP_CIPHER, etc) into ENGINE modules. If a default ENGINE is specified for RSA functionality using an ENGINE API function, that will override any RSA defaults set using the RSA API (ie RSA_set_default_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RSA and other cryptographic algorithms."
0,0,MIME headers for type text/plain are prepended to the data,,,If the CMS_TEXT flag is set,"If the CMS_TEXT flag is set ,MIME headers for type text/plain are prepended to the data","If the CMS_TEXT flag is set ,MIME headers for type text/plain are prepended to the data."
0,0,the default ENGINE for RSA operations is used,,,If engine is NULL,"If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used","RSA_new_method() allocates and initializes an RSA structure so that engine will be used for the RSA operations. If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used."
0,0,", the RSA_METHOD controlled by RSA_set_default_method is used",1,,if no default ENGINE is set,"If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used","RSA_new_method() allocates and initializes an RSA structure so that engine will be used for the RSA operations. If engine is NULL, the default ENGINE for RSA operations is used, and if no default ENGINE is set, the RSA_METHOD controlled by RSA_set_default_method() is used."
0,0,The EVP_PKEY_FLAG_SIGCTX_CUSTOM is used to indicate,,,null,The EVP_PKEY_FLAG_SIGCTX_CUSTOM is used to indicate the signctx() method of an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is always called by the EVP framework while doing a digest signing operation by calling EVP_DigestSignFinal(3),The EVP_PKEY_FLAG_SIGCTX_CUSTOM is used to indicate the signctx() method of an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is always called by the EVP framework while doing a digest signing operation by calling EVP_DigestSignFinal(3) .
0,0,the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework,,,If an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is set with the EVP_PKEY_FLAG_AUTOARGLEN flag,"If an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is set with the EVP_PKEY_FLAG_AUTOARGLEN flag, the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework","If an EVP_PKEY_meth_get_sign_APIParam_1 EVP_PKEY_meth_get_paramgen_APIParam_1 EVP_PKEY_meth_copy_APIParam_1 EVP_PKEY_meth_get_verifyctx_APIParam_1 EVP_PKEY_meth_set_copy_APIParam_1 EVP_PKEY_meth_set_init_APIParam_1 EVP_PKEY_meth_set_cleanup_APIParam_1 EVP_PKEY_meth_get_verify_APIParam_1 EVP_PKEY_meth_get_keygen_APIParam_1 EVP_PKEY_meth_free_APIParam_1 EVP_PKEY_meth_set_keygen_APIParam_1 EVP_PKEY_meth_get_signctx_APIParam_1 EVP_PKEY_meth_set_signctx_APIParam_1 EVP_PKEY_meth_set_verifyctx_APIParam_1 EVP_PKEY_meth_set_paramgen_APIParam_1 EVP_PKEY_meth_set_verify_APIParam_1 EVP_PKEY_meth_get_init_APIParam_1 EVP_PKEY_meth_get_decrypt_APIParam_1 EVP_PKEY_meth_set_ctrl_APIParam_1 EVP_PKEY_meth_get_cleanup_APIParam_1 EVP_PKEY_meth_get_ctrl_APIParam_1 EVP_PKEY_meth_get_encrypt_APIParam_1 EVP_PKEY_meth_set_derive_APIParam_1 EVP_PKEY_meth_set_encrypt_APIParam_1 EVP_PKEY_meth_get_copy_APIParam_1 EVP_PKEY_meth_get_verify_recover_APIParam_1 EVP_PKEY_meth_set_decrypt_APIParam_1 EVP_PKEY_meth_get_derive_APIParam_1 EVP_PKEY_meth_add0_APIParam_1 EVP_PKEY_meth_set_verify_recover_APIParam_1 EVP_PKEY_meth_set_sign_APIParam_1 is set with the EVP_PKEY_FLAG_AUTOARGLEN flag, the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework. Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves. For details on the output buffer size, refer to EVP_PKEY_sign(3) ."
0,0,not all the BIO_TYPE _ types above have corresponding BIO implementations,,,null,Note: not all the BIO_TYPE_* types above have corresponding BIO implementations,Note: not all the BIO_TYPE_* types above have corresponding BIO implementations.
0,0,DH_check validates Diffie-Hellman parameters,,,null,DH_check() validates Diffie-Hellman parameters,"DH_check() validates Diffie-Hellman parameters. It checks that p is a safe prime, and that g is a suitable generator. In the case of an error, the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in *codes. DH_UNABLE_TO_CHECK_GENERATOR is set if the generator cannot be checked, ie it does not equal 2 or 5."
0,0,The EVP_PKEY_derive_init function initializes a public key algorithm context using key pkey for shared secret derivation,,,null,The EVP_PKEY_derive_init() function initializes a public key algorithm context using key pkey for shared secret derivation,The EVP_PKEY_derive_init() function initializes a public key algorithm context using key pkey for shared secret derivation.
0,0,These functions decode and encode an d2i_X509_ALGOR_APIParam_1 i2d_X509_ALGOR_APIParam_1 structure which is equivalent to the AlgorithmIdentifier structure,,,null,These functions decode and encode an d2i_X509_ALGOR_APIParam_1 i2d_X509_ALGOR_APIParam_1 structure which is equivalent to the AlgorithmIdentifier structure,These functions decode and encode an d2i_X509_ALGOR_APIParam_1 i2d_X509_ALGOR_APIParam_1 structure which is equivalent to the AlgorithmIdentifier structure.
0,0,"However , they can also be called directly to implement padding for other asymmetric ciphers",,,null,"However, they can also be called directly to implement padding for other asymmetric ciphers","However, they can also be called directly to implement padding for other asymmetric ciphers. RSA_padding_add_PKCS1_OAEP() and RSA_padding_check_PKCS1_OAEP() may be used in an application combined with RSA_NO_PADDING in order to implement OAEP with an encoding parameter."
0,0,"For RSA_padding_xxx_OAEP , p points to the encoding parameter of length pl",,,null,"For RSA_padding_xxx_OAEP(), p points to the encoding parameter of length pl","For RSA_padding_xxx_OAEP(), p points to the encoding parameter of length pl. p may be NULL if pl is 0."
0,0,See BN_generate_prime for information on the BN_GENCB_call function,,,null,See BN_generate_prime(3) for information on the BN_GENCB_call() function,"A callback function may be used to provide feedback about the progress of the key generation. If DH_generate_parameters_ex_APIParam_4 is not NULL, DH_generate_parameters_ex_APIParam_4 will be called as described in BN_generate_prime(3) while a random prime number is generated, and when a prime has been found, BN_GENCB_call(cb, 3, 0) is called. See BN_generate_prime(3) for information on the BN_GENCB_call() function."
0,0,SSL_accept waits for a TLS/SSL client to initiate the TLS/SSL handshake,,,null,SSL_accept() waits for a TLS/SSL client to initiate the TLS/SSL handshake,SSL_accept() waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication channel must already have been set and assigned to the SSL_accept_APIParam_1 by setting an underlying BIO.
0,0,"If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O",,,null,"If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O: no data is read from the BIO CMS_compress_APIParam_1","If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O: no data is read from the BIO CMS_compress_APIParam_1."
0,0,The friendlyName and localKeyID attributes on each certificate will be stored in the alias and keyid attributes of the STACK_OF_APIParam_1 structure,,,null,The friendlyName and localKeyID attributes (if present) on each certificate will be stored in the alias and keyid attributes of the STACK_OF_APIParam_1 structure,The friendlyName and localKeyID attributes (if present) on each certificate will be stored in the alias and keyid attributes of the STACK_OF_APIParam_1 structure.
0,0,no data is read from the BIO CMS_compress_APIParam_1,,,null,"If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O: no data is read from the BIO CMS_compress_APIParam_1","If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O: no data is read from the BIO CMS_compress_APIParam_1."
0,0,RSA_padding_add_PKCS1_OAEP and RSA_padding_check_PKCS1_OAEP may be used in an application combined with RSA_NO_PADDING,,,null,RSA_padding_add_PKCS1_OAEP and RSA_padding_check_PKCS1_OAEP may be used in an application combined with RSA_NO_PADDING,"However, they can also be called directly to implement padding for other asymmetric ciphers. RSA_padding_add_PKCS1_OAEP() and RSA_padding_check_PKCS1_OAEP() may be used in an application combined with RSA_NO_PADDING in order to implement OAEP with an encoding parameter."
0,0,"The BIO_find_type searches for a BIO of a given type in a chain , starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1",,,null,"The BIO_find_type() searches for a BIO of a given type in a chain, starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1","The BIO_find_type() searches for a BIO of a given type in a chain, starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1. If type is a specific type (such as BIO_TYPE_MEM) ,then a search is made for a BIO of that type. If type is a general type (such as BIO_TYPE_SOURCE_SINK) then the next matching BIO of the given general type is searched for. BIO_find_type() returns the next matching BIO or NULL if none is found."
0,0,A standard set of objects is represented in an internal table,,,null,A standard set of objects is represented in an internal table,"Objects in OpenSSL can have a short name, a long name and a numerical identifier (NID) associated with them. A standard set of objects is represented in an internal table. The appropriate values are defined in the header file objects.h."
0,0,"It checks that p is a safe prime , and that g is a suitable generator",,,null,"It checks that p is a safe prime, and that g is a suitable generator","DH_check() validates Diffie-Hellman parameters. It checks that p is a safe prime, and that g is a suitable generator. In the case of an error, the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in *codes. DH_UNABLE_TO_CHECK_GENERATOR is set if the generator cannot be checked, ie it does not equal 2 or 5."
0,0,The appropriate values are defined in the header file objects.h,,,null,The appropriate values are defined in the header file objects.h,"Objects in OpenSSL can have a short name, a long name and a numerical identifier (NID) associated with them. A standard set of objects is represented in an internal table. The appropriate values are defined in the header file objects.h."
0,0,"error code is an 8 digit hexadecimal number , library name , function name and reason string are ASCII text",,,null,"error code is an 8 digit hexadecimal number, library name, function name and reason string are ASCII text","error code is an 8 digit hexadecimal number, library name, function name and reason string are ASCII text."
0,0,X509_STORE_set_verify_cb sets the verification callback of ctx to verify_cb overwriting any existing callback,,,null,X509_STORE_set_verify_cb() sets the verification callback of ctx to verify_cb overwriting any existing callback,X509_STORE_set_verify_cb() sets the verification callback of ctx to verify_cb overwriting any existing callback.
0,0,The RSA_padding_check_PKCS1_type_2 padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack,,,null,The RSA_padding_check_PKCS1_type_2() padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack,"The RSA_padding_check_PKCS1_type_2() padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack. This is an inherent weakness in the PKCS #1 v1.5 padding design. Prefer PKCS1_OAEP padding. Otherwise it can be recommended to pass zero-padded f, so that fl equals to rsa_len, and if fixed by protocol, RSA_padding_check_PKCS1_type_2_APIParam_2 being set to the expected length. In such case leakage would be minimal, it would take attacker's ability to observe memory access pattern with byte granilarity as it occurs, post-factum timing analysis won't do."
0,0,"For convenience , OIDs are usually represented in source code as numeric identifiers , or NIDs",,,null,"For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs","The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs. OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants. For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants."
0,0,pubk is an array of npubk public keys,,,null,pubk is an array of npubk public keys,"EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
0,0,EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc,,,null,EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(),"EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
0,0,Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length is not zero,,,null,Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length() is not zero,Some objects are used to represent algorithms which do not have a corresponding ASN.1 OBJECT IDENTIFIER encoding (for example no OID currently exists for a particular algorithm). As a result Some objects cannot be encoded or decoded as part of ASN.1 structures. Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length() is not zero.
0,0,"In the case of an error , the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in codes",,,null,"In the case of an error, the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in *codes","DH_check() validates Diffie-Hellman parameters. It checks that p is a safe prime, and that g is a suitable generator. In the case of an error, the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in *codes. DH_UNABLE_TO_CHECK_GENERATOR is set if the generator cannot be checked, ie it does not equal 2 or 5."
0,0,MDC2_Update can be called repeatedly with chunks of the message to be hashed,,,null,MDC2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at MDC2_Update_APIParam_2),MDC2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at MDC2_Update_APIParam_2).
0,0,The iv parameter is a buffer where the generated IV is written to,,,null,The iv parameter is a buffer where the generated IV is written to,"The iv parameter is a buffer where the generated IV is written to. The iv parameter must contain enough room for the corresponding cipher's IV, as determined by (for example) EVP_CIPHER_iv_length(type)."
0,0,"Objects in OpenSSL can have a short name , a long name and a numerical identifier associated with them",,,null,"Objects in OpenSSL can have a short name, a long name and a numerical identifier (NID) associated with them","Objects in OpenSSL can have a short name, a long name and a numerical identifier (NID) associated with them. A standard set of objects is represented in an internal table. The appropriate values are defined in the header file objects.h."
0,0,The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER type,,,null,The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type,"The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs. OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants. For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants."
0,0,The actual size of each encrypted secret key is written to the array ekl,,,null,The actual size of each encrypted secret key is written to the array ekl,"EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
0,0,p may be NULL,,,if pl is 0,p may be NULL if pl is 0,"For RSA_padding_xxx_OAEP(), p points to the encoding parameter of length pl. p may be NULL if pl is 0."
0,0,The default constructor creates a string `` Enter description for name,,,null,"The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:""","UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:"". With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:"". Other methods may create whatever string and may include encodings that will be processed by the other method functions."
0,0,It is possible to call EVP_SealInit twice in the same way as EVP_EncryptInit,,,null,It is possible to call EVP_SealInit() twice in the same way as EVP_EncryptInit(),It is possible to call EVP_SealInit() twice in the same way as EVP_EncryptInit(). The first call should have npubk set to 0 and (after setting any cipher parameters) it should be called again with EVP_SealInit_APIParam_2 set to NULL.
0,0,Normally the supplied content is translated into MIME canonical format,,,if CMS_BINARY is set no translation occurs,Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if CMS_BINARY is set no translation occurs,Normally the supplied content is translated into MIME canonical format (as required by the S/MIME specifications) if CMS_BINARY is set no translation occurs. This option should be used if the supplied data is in binary format otherwise the translation will corrupt it. If CMS_BINARY is set then CMS_TEXT is ignored.
0,0,"If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags function - in effect RSA_flags behaves more like an RSA_default_flags function",,,null,"If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags() function - in effect RSA_flags() behaves more like an RSA_default_flags() function (which does not currently exist)","The behaviour of RSA_flags() is a mis-feature that is left as-is for now to avoid creating compatibility problems. RSA functionality, such as the encryption functions, are controlled by the flags value in the RSA key itself, not by the flags value in the RSA_METHOD attached to the RSA key (which is what this function returns). If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags() function - in effect RSA_flags() behaves more like an RSA_default_flags() function (which does not currently exist)."
0,0,The compressed data is included in the CMS_ContentInfo structure,,,unless CMS_DETACHED is set in which case it is omitted,"The compressed data is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted","The compressed data is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is rarely used in practice and is not supported by SMIME_write_CMS()."
0,0,the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to ca,,,"If successful , the private key will be written to PKCS12_parse_APIParam_3","If successful ,the private key will be written to PKCS12_parse_APIParam_3, the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to *ca","PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse. PKCS12_parse_APIParam_2 is the passphrase to use. If successful ,the private key will be written to PKCS12_parse_APIParam_3, the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to *ca."
0,0,a search is made for a BIO of that type,,,If type is a specific type,"If type is a specific type (such as BIO_TYPE_MEM) ,then a search is made for a BIO of that type","The BIO_find_type() searches for a BIO of a given type in a chain, starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1. If type is a specific type (such as BIO_TYPE_MEM) ,then a search is made for a BIO of that type. If type is a general type (such as BIO_TYPE_SOURCE_SINK) then the next matching BIO of the given general type is searched for. BIO_find_type() returns the next matching BIO or NULL if none is found."
0,0,UI_construct_prompt is a helper function that can be used to create a prompt from two pieces of information,,,null,UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name,"UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:"". With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:"". Other methods may create whatever string and may include encodings that will be processed by the other method functions."
0,0,Raw RSA signature,,,null,Raw RSA signature,Raw RSA signature. This mode should only be used to implement cryptographically sound padding modes in the application code. Signing user data directly with RSA is insecure.
0,0,Signing user data directly with RSA is insecure,,,null,Signing user data directly with RSA is insecure,Raw RSA signature. This mode should only be used to implement cryptographically sound padding modes in the application code. Signing user data directly with RSA is insecure.
0,0,"With the description `` pass phrase '' and the file name `` foo.key '' , that becomes `` Enter pass phrase for foo.key",,,null,"With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:""","UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:"". With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:"". Other methods may create whatever string and may include encodings that will be processed by the other method functions."
0,0,the EE key can be used for signing,,,null,CERT_PKEY_SIGN: the EE key can be used for signing,CERT_PKEY_SIGN: the EE key can be used for signing.
0,0,the chain can be used with the current session,,,null,CERT_PKEY_VALID: the chain can be used with the current session,"CERT_PKEY_VALID: the chain can be used with the current session. If this flag is not set ,then the certificate will never be used even if the application tries to set it because it is inconsistent with the peer preferences."
0,0,padding is the padding mode that was used to sign the data,,,null,padding is the padding mode that was used to sign the data,RSA_public_decrypt() recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer's public key rsa. to must point to a memory section large enough to hold the message digest (which is smaller than RSA_size(rsa) - 11). padding is the padding mode that was used to sign the data.
0,0,data contains a string,,,if flags & ERR_TXT_STRING is true,*data contains a string if *flags&ERR_TXT_STRING is true,"ERR_get_error_line_data(), ERR_peek_error_line_data() and ERR_peek_last_error_line_data() store additional data and flags associated with the error code in *data and *flags, unless these are NULL. *data contains a string if *flags&ERR_TXT_STRING is true."
0,0,"The secret key is encrypted using one or more public keys , this allows the same encrypted data to be decrypted using any of the corresponding private keys",,,null,"The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys","EVP_SealInit() initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV. EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted using one or more public keys, this allows the same encrypted data to be decrypted using any of the corresponding private keys. ek is an array of buffers where the public key encrypted secret key will be written, each buffer must contain enough room for the corresponding encrypted key: that is ek[i] must have room for EVP_PKEY_size(pubk[i]) bytes. The actual size of each encrypted secret key is written to the array ekl. pubk is an array of npubk public keys."
0,0,Other methods may create whatever string and may include encodings that will be processed by the other method functions,,,null,Other methods may create whatever string and may include encodings that will be processed by the other method functions,"UI_construct_prompt() is a helper function that can be used to create a prompt from two pieces of information: an description and a name. The default constructor (if there is none provided by the method used) creates a string ""Enter description for name:"". With the description ""pass phrase"" and the file name ""foo.key"", that becomes ""Enter pass phrase for foo.key:"". Other methods may create whatever string and may include encodings that will be processed by the other method functions."
0,0,"RSA functionality , such as the encryption functions , are controlled by the flags value in the RSA key itself , not by the flags value in the RSA_METHOD attached to the RSA key",,,null,"RSA functionality, such as the encryption functions, are controlled by the flags value in the RSA key itself, not by the flags value in the RSA_METHOD attached to the RSA key (which is what this function returns)","The behaviour of RSA_flags() is a mis-feature that is left as-is for now to avoid creating compatibility problems. RSA functionality, such as the encryption functions, are controlled by the flags value in the RSA key itself, not by the flags value in the RSA_METHOD attached to the RSA key (which is what this function returns). If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags() function - in effect RSA_flags() behaves more like an RSA_default_flags() function (which does not currently exist)."
0,0,RSA_private_encrypt signs the RSA_private_encrypt_APIParam_1 bytes at RSA_private_encrypt_APIParam_2 using the private key rsa and stores the signature in to,,,null,RSA_private_encrypt() signs the RSA_private_encrypt_APIParam_1 bytes at RSA_private_encrypt_APIParam_2 (usually a message digest with an algorithm identifier) using the private key rsa and stores the signature in to,RSA_private_encrypt() signs the RSA_private_encrypt_APIParam_1 bytes at RSA_private_encrypt_APIParam_2 (usually a message digest with an algorithm identifier) using the private key rsa and stores the signature in to. to must point to RSA_size(rsa) bytes of memory.
0,0,DH_UNABLE_TO_CHECK_GENERATOR is set,,,"if the generator can not be checked , ie it does not equal 2 or 5","DH_UNABLE_TO_CHECK_GENERATOR is set if the generator cannot be checked, ie it does not equal 2 or 5","DH_check() validates Diffie-Hellman parameters. It checks that p is a safe prime, and that g is a suitable generator. In the case of an error, the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in *codes. DH_UNABLE_TO_CHECK_GENERATOR is set if the generator cannot be checked, ie it does not equal 2 or 5."
0,0,The verification callback from an X509_STORE_set_verify_cb_func_APIParam_1 X509_STORE_set_verify_cb_APIParam_1 is inherited by the corresponding X509_STORE_CTX structure,,,when it is initialized,The verification callback from an X509_STORE_set_verify_cb_func_APIParam_1 X509_STORE_set_verify_cb_APIParam_1 is inherited by the corresponding X509_STORE_CTX structure when it is initialized,The verification callback from an X509_STORE_set_verify_cb_func_APIParam_1 X509_STORE_set_verify_cb_APIParam_1 is inherited by the corresponding X509_STORE_CTX structure when it is initialized. This can be used to set the verification callback when the X509_STORE_CTX is otherwise inaccessible (for example during S/MIME verification).
0,0,the iv parameter is ignored and can be NULL,,,If the cipher does not require an IV,"If the cipher does not require an IV ,then the iv parameter is ignored and can be NULL","If the cipher does not require an IV ,then the iv parameter is ignored and can be NULL."
0,0,are generated,,,when the library is built,"OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants","The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs. OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants. For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants."
0,0,"OpenSSL has an internal table of OIDs that , and their corresponding NIDs are available as defined constants",,,null,"OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants","The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER (OID) type. For convenience, OIDs are usually represented in source code as numeric identifiers, or NIDs. OpenSSL has an internal table of OIDs that are generated when the library is built, and their corresponding NIDs are available as defined constants. For the functions below, application code should treat all returned values -- OIDs, NIDs, or names -- as constants."
0,0,"ERR_get_error_line_data , ERR_peek_error_line_data and ERR_peek_last_error_line_data store additional data and flags associated with the error code in data and flags",1,,unless these are NULL,"ERR_get_error_line_data(), ERR_peek_error_line_data() and ERR_peek_last_error_line_data() store additional data and flags associated with the error code in *data and *flags, unless these are NULL","ERR_get_error_line_data(), ERR_peek_error_line_data() and ERR_peek_last_error_line_data() store additional data and flags associated with the error code in *data and *flags, unless these are NULL. *data contains a string if *flags&ERR_TXT_STRING is true."
0,0,"DH_generate_parameters_ex_APIParam_4 will be called as described in BN_generate_prime while a random prime number is generated , and when a prime has been found , BN_GENCB_call is called",,,If DH_generate_parameters_ex_APIParam_4 is not NULL,"If DH_generate_parameters_ex_APIParam_4 is not NULL, DH_generate_parameters_ex_APIParam_4 will be called as described in BN_generate_prime(3) while a random prime number is generated, and when a prime has been found, BN_GENCB_call(cb, 3, 0) is called","A callback function may be used to provide feedback about the progress of the key generation. If DH_generate_parameters_ex_APIParam_4 is not NULL, DH_generate_parameters_ex_APIParam_4 will be called as described in BN_generate_prime(3) while a random prime number is generated, and when a prime has been found, BN_GENCB_call(cb, 3, 0) is called. See BN_generate_prime(3) for information on the BN_GENCB_call() function."
0,0,the certificate type is acceptable,,,null,CERT_PKEY_CERT_TYPE: the certificate type is acceptable,CERT_PKEY_CERT_TYPE: the certificate type is acceptable. Only meaningful for client authentication.
0,0,it returns the number of arguments processed,,,null,In other words it returns the number of arguments processed,SSL_CONF_cmd() returns 1 if the value of SSL_CONF_cmd_APIParam_2 is recognised and SSL_CONF_cmd_APIParam_3 is NOT used and 2 if both SSL_CONF_cmd_APIParam_2 and SSL_CONF_cmd_APIParam_3 are used. In other words it returns the number of arguments processed. This is useful when processing command lines.
0,0,an application could translate a relative pathname to an absolute pathname,1,,if the return value is SSL_CONF_TYPE_FILE,For example if the return value is SSL_CONF_TYPE_FILE an application could translate a relative pathname to an absolute pathname,The function SSL_CONF_cmd_value_type() can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value. For example if the return value is SSL_CONF_TYPE_FILE an application could translate a relative pathname to an absolute pathname.
0,0,The function SSL_CONF_cmd performs configuration operation SSL_CONF_cmd_APIParam_2 with optional parameter SSL_CONF_cmd_APIParam_3 on ctx,,,null,The function SSL_CONF_cmd() performs configuration operation SSL_CONF_cmd_APIParam_2 with optional parameter SSL_CONF_cmd_APIParam_3 on ctx,The function SSL_CONF_cmd() performs configuration operation SSL_CONF_cmd_APIParam_2 with optional parameter SSL_CONF_cmd_APIParam_3 on ctx. Its purpose is to simplify application configuration of SSL_CTX or SSL_CONF_cmd_APIParam_1 structures by providing a common framework for command line options or configuration files.
0,0,This is currently SSLv2 or TLSv1/SSLv3,,,null,This is currently SSLv2 or TLSv1/SSLv3,"SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher. This is currently SSLv2 or TLSv1/SSLv3. In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead. If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned."
0,0,SSL_CIPHER_get_version returns string which indicates the SSL/TLS protocol version that first defined the cipher,,,null,SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher,"SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that first defined the cipher. This is currently SSLv2 or TLSv1/SSLv3. In some cases it should possibly return ""TLSv1.2"" but does not; use SSL_CIPHER_description() instead. If SSL_CIPHER_get_version_APIParam_1 SSL_CIPHER_description_APIParam_1 is NULL, ""(NONE)"" is returned."
0,0,A BN_CTX_new_APIParam_0 is a structure that holds BIGNUM temporary variables used by library functions,,,null,A BN_CTX_new_APIParam_0 is a structure that holds BIGNUM temporary variables used by library functions,"A BN_CTX_new_APIParam_0 is a structure that holds BIGNUM temporary variables used by library functions. Since dynamic memory allocation to create BIGNUMs is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX_new_APIParam_0 structure is used."
0,0,SSLv3 is always disabled and attempt to override this by the user are ignored,,,null,then SSLv3 is always disabled and attempt to override this by the user are ignored,then SSLv3 is always disabled and attempt to override this by the user are ignored.
0,0,RSA_public_decrypt recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer 's public key rsa,,,null,RSA_public_decrypt() recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer's public key rsa,RSA_public_decrypt() recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer's public key rsa. to must point to a memory section large enough to hold the message digest (which is smaller than RSA_size(rsa) - 11). padding is the padding mode that was used to sign the data.
0,0,SSL_CIPHER_description returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided,,,null,SSL_CIPHER_description() returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided,"SSL_CIPHER_description() returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided. len must be at least 128 bytes, otherwise a pointer to the string ""Buffer too small"" is returned. If SSL_CIPHER_description_APIParam_2 is NULL, a buffer of 128 bytes is allocated using OPENSSL_malloc(). If the allocation fails, a pointer to the string ""OPENSSL_malloc Error"" is returned."
0,0,CONF_modules_finish calls each configuration modules finish handler to free up any configuration that module may have performed,,,null,CONF_modules_finish() calls each configuration modules finish handler to free up any configuration that module may have performed,CONF_modules_finish() calls each configuration modules finish handler to free up any configuration that module may have performed.
0,0,None is the representation of anonymous ciphers,,,null,None is the representation of anonymous ciphers,"Authentication method: RSA, DSS, DH, None. None is the representation of anonymous ciphers."
0,0,No new ciphers were added by TLSv1 .1,,,null,No new ciphers were added by TLSv1.1,"Protocol version: SSLv2, SSLv3, TLSv1.2. The TLSv1.0 ciphers are flagged with SSLv3. No new ciphers were added by TLSv1.1."
0,0,The TLSv1 .0 ciphers are flagged with SSLv3,,,null,The TLSv1.0 ciphers are flagged with SSLv3,"Protocol version: SSLv2, SSLv3, TLSv1.2. The TLSv1.0 ciphers are flagged with SSLv3. No new ciphers were added by TLSv1.1."
0,0,the BN_CTX_new_APIParam_0 structure is used,,,null,", the BN_CTX_new_APIParam_0 structure is used","A BN_CTX_new_APIParam_0 is a structure that holds BIGNUM temporary variables used by library functions. Since dynamic memory allocation to create BIGNUMs is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX_new_APIParam_0 structure is used."
0,0,"SSL_check_chain checks whether certificate x , private key pk and certificate chain chain is suitable for use with the current session s",,,null,"SSL_check_chain() checks whether certificate x, private key pk and certificate chain chain is suitable for use with the current session s","SSL_check_chain() checks whether certificate x, private key pk and certificate chain chain is suitable for use with the current session s."
0,0,See NOTES for more information,,,null,See NOTES for more information,"As such, this function can not be used with any arbitrary RSA key object, even if this function is otherwise fit for regular RSA operation. See NOTES for more information."
0,0,This function validates RSA keys,,,null,This function validates RSA keys,"This function validates RSA keys. This function checks that p and q are in fact prime, and that n = p*q."
0,0,For enveloped data they are added to OriginatorInfo,,,null,For enveloped data they are added to OriginatorInfo,For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure. For enveloped data they are added to OriginatorInfo.
0,0,SSL_CTX_set_cert_verify_callback sets the verification callback function for ctx,,,null,SSL_CTX_set_cert_verify_callback() sets the verification callback function for ctx,SSL_CTX_set_cert_verify_callback() sets the verification callback function for ctx. SSL objects that are created from ctx inherit the setting valid at the time when SSL_new(3) is called.
0,0,Its purpose is to simplify application configuration of SSL_CTX or SSL_CONF_cmd_APIParam_1 structures by providing a common framework for command line options or configuration files,,,null,Its purpose is to simplify application configuration of SSL_CTX or SSL_CONF_cmd_APIParam_1 structures by providing a common framework for command line options or configuration files,The function SSL_CONF_cmd() performs configuration operation SSL_CONF_cmd_APIParam_2 with optional parameter SSL_CONF_cmd_APIParam_3 on ctx. Its purpose is to simplify application configuration of SSL_CTX or SSL_CONF_cmd_APIParam_1 structures by providing a common framework for command line options or configuration files.
0,0,"This function checks that p and q are in fact prime , and that n = pq",,,null,"This function checks that p and q are in fact prime, and that n = p*q","This function validates RSA keys. This function checks that p and q are in fact prime, and that n = p*q."
0,0,For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure,,,null,For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure,For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure. For enveloped data they are added to OriginatorInfo.
0,0,"By setting callback to NULL , the default behaviour is restored",,,null,"By setting callback to NULL, the default behaviour is restored","Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called. If the application does not explicitly specify a verification callback function, the built-in verification function is used. If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead. By setting callback to NULL, the default behaviour is restored."
0,0,Where a field is optional and absent NULL will be written to the corresponding parameter,,,null,Where a field is optional and absent NULL will be written to the corresponding parameter,"CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,The latter is set using the SSL_CTX_set_verify family of functions,,,null,The latter is set using the SSL_CTX_set_verify(3) family of functions,Do not mix the verification callback described in this function with the verify_callback function called during the verification process. The latter is set using the SSL_CTX_set_verify(3) family of functions.
0,0,"It also checks that de = 1 mod , and that dmp1 , dmq1 and iqmp are set correctly or are NULL",,,null,"It also checks that d*e = 1 mod (p-1*q-1), and that dmp1, dmq1 and iqmp are set correctly or are NULL","It also checks that d*e = 1 mod (p-1*q-1), and that dmp1, dmq1 and iqmp are set correctly or are NULL."
0,0,Either the keyidentifier will be set in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_3 and CMS_RecipientInfo_ktri_get0_signer_id_APIParam_4,,,null,Either the keyidentifier will be set in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_3 and CMS_RecipientInfo_ktri_get0_signer_id_APIParam_4,"CMS_RecipientInfo_ktri_get0_signer_id() retrieves the certificate recipient identifier associated with a specific CMS_RecipientInfo structure CMS_RecipientInfo_ktri_get0_signer_id_APIParam_1, which must be of type CMS_RECIPINFO_TRANS. Either the keyidentifier will be set in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_3 and CMS_RecipientInfo_ktri_get0_signer_id_APIParam_4."
0,0,"Within x509_store_ctx , callback has access to the verify_callback function set using SSL_CTX_set_verify",,,null,"Within x509_store_ctx, callback has access to the verify_callback function set using SSL_CTX_set_verify(3)","Within x509_store_ctx, callback has access to the verify_callback function set using SSL_CTX_set_verify(3) ."
0,0,streaming is performed,,,If the PKCS7_STREAM flag is set,"If the PKCS7_STREAM flag is set, streaming is performed","If the PKCS7_STREAM flag is set, streaming is performed. This flag should only be set if PKCS7_STREAM was also set in the previous call to PKCS7_sign() or PKCS7_encrypt()."
0,0,The function SSL_CONF_cmd_value_type can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value,,,null,The function SSL_CONF_cmd_value_type() can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value,The function SSL_CONF_cmd_value_type() can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value. For example if the return value is SSL_CONF_TYPE_FILE an application could translate a relative pathname to an absolute pathname.
0,0,This function uses the header x509.h as opposed to most chain verification functiosn which use x509_vfy,,,null,This function uses the header x509.h as opposed to most chain verification functiosn which use x509_vfy.h,This function uses the header x509.h as opposed to most chain verification functiosn which use x509_vfy.h.
0,0,once to compute the signature in PKCS7_sign and once to output the S/MIME message,,,null,"If cleartext signing is being used and PKCS7_STREAM not set ,then the data must be read twice: once to compute the signature in PKCS7_sign() and once to output the S/MIME message","If cleartext signing is being used and PKCS7_STREAM not set ,then the data must be read twice: once to compute the signature in PKCS7_sign() and once to output the S/MIME message."
0,0,Providing a complete verification procedure including certificate purpose settings etc is a complex task,,,null,Providing a complete verification procedure including certificate purpose settings etc is a complex task,Providing a complete verification procedure including certificate purpose settings etc is a complex task. The built-in procedure is quite powerful and in most cases it should be sufficient to modify its behaviour using the verify_callback function.
0,0,The cipher context can be set using EVP_EncryptInit_ex,,,null,The cipher context can be set using EVP_EncryptInit_ex,The initialization vector iv should be a random value. The cipher context ctx should use the initialisation vector iv. The cipher context can be set using EVP_EncryptInit_ex . The hmac context can be set using HMAC_Init_ex .
0,0,the server implementation only applies to TLS and there is no SSLv3 implementation,,,null,the server implementation only applies to TLS and there is no SSLv3 implementation,"SSL_CTX_set_tlsext_ticket_key_cb() sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1. Session tickets, defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state. the server implementation only applies to TLS and there is no SSLv3 implementation."
0,0,SSL_CTX_set_tlsext_ticket_key_cb sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1,,,null,SSL_CTX_set_tlsext_ticket_key_cb() sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1,"SSL_CTX_set_tlsext_ticket_key_cb() sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1. Session tickets, defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state. the server implementation only applies to TLS and there is no SSLv3 implementation."
0,0,a buffer of 128 bytes is allocated using OPENSSL_malloc,,,If SSL_CIPHER_description_APIParam_2 is NULL,"If SSL_CIPHER_description_APIParam_2 is NULL, a buffer of 128 bytes is allocated using OPENSSL_malloc()","SSL_CIPHER_description() returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided. len must be at least 128 bytes, otherwise a pointer to the string ""Buffer too small"" is returned. If SSL_CIPHER_description_APIParam_2 is NULL, a buffer of 128 bytes is allocated using OPENSSL_malloc(). If the allocation fails, a pointer to the string ""OPENSSL_malloc Error"" is returned."
0,0,The name is 16 characters long and is used as a key identifier,,,null,The name is 16 characters long and is used as a key identifier,The name is 16 characters long and is used as a key identifier.
0,0,The hmac context can be set using HMAC_Init_ex,,,null,The hmac context can be set using HMAC_Init_ex,The initialization vector iv should be a random value. The cipher context ctx should use the initialisation vector iv. The cipher context can be set using EVP_EncryptInit_ex . The hmac context can be set using HMAC_Init_ex .
0,0,The iv length is the length of the IV of the corresponding cipher,,,null,The iv length is the length of the IV of the corresponding cipher,The iv length is the length of the IV of the corresponding cipher. The maximum IV length is EVP_MAX_IV_LENGTH bytes defined in evp.h.
0,0,the according description of the cipher property is unknown,,,If SSL_CIPHER_description can not handle a built-in cipher,"If SSL_CIPHER_description() cannot handle a built-in cipher, the according description of the cipher property is unknown","If SSL_CIPHER_description() cannot handle a built-in cipher, the according description of the cipher property is unknown. This case should not occur."
0,0,name and iv have already been parsed out of the session ticket,,,null,In this case name and iv have already been parsed out of the session ticket,"When the client presents a session ticket, the callback function with be called with enc set to 0 indicating that the cb function should retreive a set of parameters. In this case name and iv have already been parsed out of the session ticket. The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv. using a function like EVP_DecryptInit_ex . The hctx needs to be set using HMAC_Init_ex ."
0,0,the word `` export '' is printed,,,If the cipher is flagged exportable with respect to old US crypto regulations,"If the cipher is flagged exportable with respect to old US crypto regulations, the word ""export"" is printed","If the cipher is flagged exportable with respect to old US crypto regulations, the word ""export"" is printed."
0,0,callback will be called with the arguments callback,,,When the verification must be performed,"When the verification must be performed, callback will be called with the arguments callback(X509_STORE_CTX *x509_store_ctx, void *arg)","When the verification must be performed, callback will be called with the arguments callback(X509_STORE_CTX *x509_store_ctx, void *arg). The argument arg is specified by the application when setting callback."
0,0,"Session tickets , defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state",,,null,"Session tickets, defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state","SSL_CTX_set_tlsext_ticket_key_cb() sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1. Session tickets, defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state. the server implementation only applies to TLS and there is no SSLv3 implementation."
0,0,The argument arg is specified by the application,,,when setting callback,The argument arg is specified by the application when setting callback,"When the verification must be performed, callback will be called with the arguments callback(X509_STORE_CTX *x509_store_ctx, void *arg). The argument arg is specified by the application when setting callback."
0,0,a verification function is called,1,,Whenever a certificate is verified during a SSL/TLS handshake ,"Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called","Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called. If the application does not explicitly specify a verification callback function, the built-in verification function is used. If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead. By setting callback to NULL, the default behaviour is restored."
0,0,SSL objects that are created from ctx inherit the setting valid at the time,1,,when SSL_new is called,SSL objects that are created from ctx inherit the setting valid at the time when SSL_new(3) is called,SSL_CTX_set_cert_verify_callback() sets the verification callback function for ctx. SSL objects that are created from ctx inherit the setting valid at the time when SSL_new(3) is called.
0,0,Any of the remaining parameters can be NULL,,,if the application is not interested in the value of a field,Any of the remaining parameters can be NULL if the application is not interested in the value of a field,"CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,"An ENGINE implementation can override the way key data is stored and handled , and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all !",,,null,"An ENGINE implementation can override the way key data is stored and handled, and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all!","Unlike most other RSA functions, this function does not work transparently with any underlying ENGINE implementation because this function uses the key data in the RSA structure directly. An ENGINE implementation can override the way key data is stored and handled, and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all! If the ENGINE in question is only being used for acceleration or analysis purposes, then in all likelihood the RSA key data is complete and untouched, but this can't be assumed in the general case."
0,0,The callback is available,,,when the OpenSSL library was built without OPENSSL_NO_TLSEXT being defined,The callback is available when the OpenSSL library was built without OPENSSL_NO_TLSEXT being defined,The callback is available when the OpenSSL library was built without OPENSSL_NO_TLSEXT being defined.
0,0,the built-in verification function is used,,,If the application does not explicitly specify a verification callback function,"If the application does not explicitly specify a verification callback function, the built-in verification function is used","Whenever a certificate is verified during a SSL/TLS handshake, a verification function is called. If the application does not explicitly specify a verification callback function, the built-in verification function is used. If a verification callback callback is specified via SSL_CTX_set_cert_verify_callback(), the supplied callback function is called instead. By setting callback to NULL, the default behaviour is restored."
0,0,The callback function cb will be called for every client instigated TLS session,,,when session ticket extension is presented in the TLS hello message,The callback function cb will be called for every client instigated TLS session when session ticket extension is presented in the TLS hello message,The callback function cb will be called for every client instigated TLS session when session ticket extension is presented in the TLS hello message. It is the responsibility of this function to create or retrieve the cryptographic parameters and to maintain their state.
0,0,The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2,1,,null,"The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6","CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3,1,,null,"The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6","CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,the date field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4,1,,if present,"The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6","CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6,1,,if the other field is present,"The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6","CMS_RecipientInfo_kekri_get0_id() retrieves the key information from the CMS_RecipientInfo structure CMS_RecipientInfo_kekri_get0_id_APIParam_1 which must be of type CMS_RECIPINFO_KEK. Any of the remaining parameters can be NULL if the application is not interested in the value of a field. Where a field is optional and absent NULL will be written to the corresponding parameter. The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2, the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3, the date field if present is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4, if the other field is present the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6."
0,0,The return value of the cb function is used by OpenSSL to determine what further processing will occur,,,null,The return value of the cb function is used by OpenSSL to determine what further processing will occur,The return value of the cb function is used by OpenSSL to determine what further processing will occur. The following return values have meaning:
0,0,CMS_SignerInfo_get0_signer_id retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure CMS_SignerInfo_get0_signer_id_APIParam_1,,,null,CMS_SignerInfo_get0_signer_id() retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure CMS_SignerInfo_get0_signer_id_APIParam_1,CMS_SignerInfo_get0_signer_id() retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure CMS_SignerInfo_get0_signer_id_APIParam_1. Either the keyidentifier will be set in CMS_SignerInfo_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_SignerInfo_get0_signer_id_APIParam_3 and CMS_SignerInfo_get0_signer_id_APIParam_4.
0,0,This indicates that the ctx and hctx have been set and the session can continue on those parameters,,,null,This indicates that the ctx and hctx have been set and the session can continue on those parameters,This indicates that the ctx and hctx have been set and the session can continue on those parameters.
0,0,The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form,,,null,The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form,"The functions EVP_PKEY_print_public(), EVP_PKEY_print_private() and EVP_PKEY_print_params() print out the public, private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively. The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form. The parameter indent indicated how far the printout should be indented."
0,0,The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket,,,null,The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket (see RFC5077 3.3 paragraph 2),This indicates that the ctx and hctx have been set and the session can continue on those parameters. Additionally it indicates that the session ticket is in a renewal period and should be replaced. The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket (see RFC5077 3.3 paragraph 2).
0,0,The library will call the callback again with an arguement of enc equal to 1 to set the new ticket,,,null,The library will call the callback again with an arguement of enc equal to 1 to set the new ticket,"If the name is still valid but a renewal of the ticket is required ,the callback function should return 2. The library will call the callback again with an arguement of enc equal to 1 to set the new ticket."
0,0,Currently no public key algorithms include any options in the pctx parameter parameter,,,null,Currently no public key algorithms include any options in the pctx parameter parameter,Currently no public key algorithms include any options in the pctx parameter parameter.
0,0,The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback,,,null,The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback,"SSL_CTX_set_tlsext_servername_callback() sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection. When cb is NULL, SNI is not used. The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback."
0,0,Using a 0 pointer for cb disables the message callback,,,null,Using a 0 pointer for cb disables the message callback,SSL_CTX_set_msg_callback() and SSL_CTX_set_msg_callback_arg() specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new(3) . SSL_set_msg_callback() and SSL_set_msg_callback_arg() modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object. Using a 0 pointer for cb disables the message callback.
0,0,Either the keyidentifier will be set in CMS_SignerInfo_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_SignerInfo_get0_signer_id_APIParam_3 and CMS_SignerInfo_get0_signer_id_APIParam_4,,,null,Either the keyidentifier will be set in CMS_SignerInfo_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_SignerInfo_get0_signer_id_APIParam_3 and CMS_SignerInfo_get0_signer_id_APIParam_4,CMS_SignerInfo_get0_signer_id() retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure CMS_SignerInfo_get0_signer_id_APIParam_1. Either the keyidentifier will be set in CMS_SignerInfo_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_SignerInfo_get0_signer_id_APIParam_3 and CMS_SignerInfo_get0_signer_id_APIParam_4.
0,0,SSL_set_msg_callback and SSL_set_msg_callback_arg modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object,,,null,SSL_set_msg_callback() and SSL_set_msg_callback_arg() modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object,SSL_CTX_set_msg_callback() and SSL_CTX_set_msg_callback_arg() specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new(3) . SSL_set_msg_callback() and SSL_set_msg_callback_arg() modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object. Using a 0 pointer for cb disables the message callback.
0,0,The pctx parameter allows the print output to be finely tuned by using ASN1 printing options,,,null,The pctx parameter allows the print output to be finely tuned by using ASN1 printing options,The pctx parameter allows the print output to be finely tuned by using ASN1 printing options. If pctx is set to NULL then default values will be used.
0,0,The protocol version according to which the protocol message is interpreted by the library,,,null,The protocol version according to which the protocol message is interpreted by the library,"The protocol version according to which the protocol message is interpreted by the library. Currently, this is one of SSL2_VERSION, SSL3_VERSION and TLS1_VERSION (for SSL 2.0, SSL 3.0 and TLS 1.0, respectively)."
0,0,SSL_CTX_set_msg_callback and SSL_CTX_set_msg_callback_arg specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new,,,null,SSL_CTX_set_msg_callback() and SSL_CTX_set_msg_callback_arg() specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new(3),SSL_CTX_set_msg_callback() and SSL_CTX_set_msg_callback_arg() specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new(3) . SSL_set_msg_callback() and SSL_set_msg_callback_arg() modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object. Using a 0 pointer for cb disables the message callback.
0,0,BIO_set_cipher sets the cipher of BIO BIO_set_cipher_APIParam_1 to BIO_set_cipher_APIParam_2 using key key and IV iv,,,null,BIO_set_cipher() sets the cipher of BIO BIO_set_cipher_APIParam_1 to BIO_set_cipher_APIParam_2 using key key and IV iv,BIO_set_cipher() sets the cipher of BIO BIO_set_cipher_APIParam_1 to BIO_set_cipher_APIParam_2 using key key and IV iv. enc should be set to 1 for encryption and zero for decryption.
0,0,BN_set_bit sets bit BN_set_bit_APIParam_2 in BN_set_bit_APIParam_1 to 1,,,null,BN_set_bit() sets bit BN_set_bit_APIParam_2 in BN_set_bit_APIParam_1 to 1 (a|=(1<<n)),BN_set_bit() sets bit BN_set_bit_APIParam_2 in BN_set_bit_APIParam_1 to 1 (a|=(1<<n)). The number is expanded if necessary.
0,0,"buf points to a buffer containing the protocol message , which consists of len bytes",,,null,"buf points to a buffer containing the protocol message, which consists of len bytes","buf points to a buffer containing the protocol message, which consists of len bytes. The buffer is no longer valid after the callback function has returned."
0,0,BN_clear_bit sets bit BN_clear_bit_APIParam_2 in BN_clear_bit_APIParam_1 to 0,,,null,BN_clear_bit() sets bit BN_clear_bit_APIParam_2 in BN_clear_bit_APIParam_1 to 0 (a&=~(1<<n)),BN_clear_bit() sets bit BN_clear_bit_APIParam_2 in BN_clear_bit_APIParam_1 to 0 (a&=~(1<<n)). An error occurs if BN_clear_bit_APIParam_1 is shorter than BN_clear_bit_APIParam_2 bits.
0,0,"The functions EVP_PKEY_print_public , EVP_PKEY_print_private and EVP_PKEY_print_params print out the public , private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively",,,null,"The functions EVP_PKEY_print_public(), EVP_PKEY_print_private() and EVP_PKEY_print_params() print out the public, private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively","The functions EVP_PKEY_print_public(), EVP_PKEY_print_private() and EVP_PKEY_print_params() print out the public, private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively. The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form. The parameter indent indicated how far the printout should be indented."
0,0,The receiptsTo parameter is copied to prto,,,null,The receiptsTo parameter is copied to prto,"CMS_ReceiptRequest_get0_values() retrieves the values of a receipt request. The signedContentIdentifier is copied to pcid. If the allOrFirstTier option of receiptsFrom is used ,its value is copied to pallorfirst otherwise the receiptList field is copied to plist. The receiptsTo parameter is copied to prto."
0,0,It places the result in HMAC_Final_APIParam_2,,,null,"It places the result in HMAC_Final_APIParam_2 (which must have space for the output of the hash function, which is no more than EVP_MAX_MD_SIZE bytes)","It places the result in HMAC_Final_APIParam_2 (which must have space for the output of the hash function, which is no more than EVP_MAX_MD_SIZE bytes). If HMAC_Final_APIParam_2 is NULL, the digest is placed in a static array. The size of the output is placed in md_len, unless The size of the output is NULL. Note: passing a NULL value for HMAC_Final_APIParam_2 to use the static array is not thread safe."
0,0,CMS_ReceiptRequest_create0 creates a signed receipt request structure,,,null,CMS_ReceiptRequest_create0() creates a signed receipt request structure,"CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,rsa is the signer 's public key,,,null,rsa is the signer's public key,RSA_verify_ASN1_OCTET_STRING() verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len. RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored. rsa is the signer's public key.
0,0,"SSL_CTX_set_msg_callback_arg and SSL_set_msg_callback_arg can be used to set argument SSL_CTX_set_msg_callback_arg_APIParam_2 SSL_set_msg_callback_arg_APIParam_2 to the callback function , which is available for arbitrary application use",,,null,"SSL_CTX_set_msg_callback_arg() and SSL_set_msg_callback_arg() can be used to set argument SSL_CTX_set_msg_callback_arg_APIParam_2 SSL_set_msg_callback_arg_APIParam_2 to the callback function, which is available for arbitrary application use","SSL_CTX_set_msg_callback() or SSL_set_msg_callback() can be used to define a message callback function cb for observing all SSL/TLS protocol messages (such as handshake messages) that are received or sent. SSL_CTX_set_msg_callback_arg() and SSL_set_msg_callback_arg() can be used to set argument SSL_CTX_set_msg_callback_arg_APIParam_2 SSL_set_msg_callback_arg_APIParam_2 to the callback function, which is available for arbitrary application use."
0,0,RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored,,,null,RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored,RSA_verify_ASN1_OCTET_STRING() verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len. RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored. rsa is the signer's public key.
0,0,The signedContentIdentifier is copied to pcid,,,null,The signedContentIdentifier is copied to pcid,"CMS_ReceiptRequest_get0_values() retrieves the values of a receipt request. The signedContentIdentifier is copied to pcid. If the allOrFirstTier option of receiptsFrom is used ,its value is copied to pallorfirst otherwise the receiptList field is copied to plist. The receiptsTo parameter is copied to prto."
0,0,The receiptsTo parameter specifies the receiptsTo field value,,,null,The receiptsTo parameter specifies the receiptsTo field value,"CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,CMS_ReceiptRequest_get0_values retrieves the values of a receipt request,,,null,CMS_ReceiptRequest_get0_values() retrieves the values of a receipt request,"CMS_ReceiptRequest_get0_values() retrieves the values of a receipt request. The signedContentIdentifier is copied to pcid. If the allOrFirstTier option of receiptsFrom is used ,its value is copied to pallorfirst otherwise the receiptList field is copied to plist. The receiptsTo parameter is copied to prto."
0,0,BN_mask_bits truncates BN_mask_bits_APIParam_1 to an BN_mask_bits_APIParam_2 bit number >> n,,,null,BN_mask_bits() truncates BN_mask_bits_APIParam_1 to an BN_mask_bits_APIParam_2 bit number (a&=~((~0)>>n)),BN_mask_bits() truncates BN_mask_bits_APIParam_1 to an BN_mask_bits_APIParam_2 bit number (a&=~((~0)>>n)). An error occurs if BN_mask_bits_APIParam_1 already is shorter than BN_mask_bits_APIParam_2 bits.
0,0,SSL_CTX_set_msg_callback or SSL_set_msg_callback can be used to define a message callback function cb for observing all SSL/TLS protocol messages that are received or sent,,,null,SSL_CTX_set_msg_callback() or SSL_set_msg_callback() can be used to define a message callback function cb for observing all SSL/TLS protocol messages (such as handshake messages) that are received or sent,"SSL_CTX_set_msg_callback() or SSL_set_msg_callback() can be used to define a message callback function cb for observing all SSL/TLS protocol messages (such as handshake messages) that are received or sent. SSL_CTX_set_msg_callback_arg() and SSL_set_msg_callback_arg() can be used to set argument SSL_CTX_set_msg_callback_arg_APIParam_2 SSL_set_msg_callback_arg_APIParam_2 to the callback function, which is available for arbitrary application use."
0,0,It stores the signature in sigret and the signature size in siglen,,,null,It stores the signature in sigret and the signature size in siglen,RSA_sign_ASN1_OCTET_STRING() signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS #1 padding. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory.
0,0,SNI is not used,,,When cb is NULL,"When cb is NULL, SNI is not used","SSL_CTX_set_tlsext_servername_callback() sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection. When cb is NULL, SNI is not used. The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback."
0,0,BN_lshift1 shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1,,,null,BN_lshift1() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=2*a),BN_lshift() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=a*2^n). Note that BN_lshift_APIParam_3 must be non-negative. BN_lshift1() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=2*a).
0,0,BN_rshift1 shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1,,,null,BN_rshift1() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2),BN_rshift() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2^n). Note that BN_rshift_APIParam_3 must be non-negative. BN_rshift1() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2).
0,0,SSL_CTX_set_tlsext_servername_callback sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection,,,null,SSL_CTX_set_tlsext_servername_callback() sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection,"SSL_CTX_set_tlsext_servername_callback() sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection. When cb is NULL, SNI is not used. The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback."
0,0,BN_rshift shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1,,,null,BN_rshift() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2^n),BN_rshift() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2^n). Note that BN_rshift_APIParam_3 must be non-negative. BN_rshift1() shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1 (r=a/2).
0,0,BN_lshift shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1,,,null,BN_lshift() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=a*2^n),BN_lshift() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=a*2^n). Note that BN_lshift_APIParam_3 must be non-negative. BN_lshift1() shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1 (r=2*a).
0,0,the library will call the cb again to get a new set of parameters,,,If called with enc equal to 0,"If called with enc equal to 0 ,the library will call the cb again to get a new set of parameters","If called with enc equal to 0 ,the library will call the cb again to get a new set of parameters."
0,0,The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv,,,null,The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv,"When the client presents a session ticket, the callback function with be called with enc set to 0 indicating that the cb function should retreive a set of parameters. In this case name and iv have already been parsed out of the session ticket. The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv. using a function like EVP_DecryptInit_ex . The hctx needs to be set using HMAC_Init_ex ."
0,0,The number is expanded,,,if necessary,The number is expanded if necessary,BN_set_bit() sets bit BN_set_bit_APIParam_2 in BN_set_bit_APIParam_1 to 1 (a|=(1<<n)). The number is expanded if necessary.
0,0,In the above example crl would be freed but rev would not,,,null,In the above example crl would be freed but rev would not,The 0 version uses the supplied structure pointer directly in the parent and The 0 version will be freed up when the parent is freed. In the above example crl would be freed but rev would not.
0,0,HMAC_Init_ex initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2,,,null,HMAC_Init_ex() initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2,HMAC_Init_ex() initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2. If both are NULL (or HMAC_APIParam_1 is the same as the previous digest used by HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 and HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2 is NULL) the existing key is reused. HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 must have been created with HMAC_CTX_new() before the first use of an HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 in this function. N.B. HMAC_Init() had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex() in programs that expect it will cause them to stop working.
0,0,RSA_verify_ASN1_OCTET_STRING verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len,,,null,RSA_verify_ASN1_OCTET_STRING() verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len,RSA_verify_ASN1_OCTET_STRING() verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len. RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored. rsa is the signer's public key.
0,0,"Various options regarding certificates , algorithms etc can be set in this object",,,null,"Various options regarding certificates, algorithms etc can be set in this object","Then an SSL_CTX object is created as a framework to establish TLS/SSL enabled connections (see SSL_CTX_new(3) ). Various options regarding certificates, algorithms etc can be set in this object."
0,0,The OpenSSL ssl library implements the Secure Sockets Layer and Transport Layer Security protocols,,,null,The OpenSSL ssl library implements the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols,The OpenSSL ssl library implements the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols. It provides a rich API which is documented here.
0,0,ERR_R _ ... reason codes such as ERR_R_MALLOC_FAILURE are globally unique,,,null,ERR_R_... reason codes such as ERR_R_MALLOC_FAILURE are globally unique,"ERR_R_... reason codes such as ERR_R_MALLOC_FAILURE are globally unique. However, when checking for sub-library specific reason codes, be sure to also compare the library number."
0,0,Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten,,,null,Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten,"EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey. EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options. Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed)."
0,0,RSA_sign_ASN1_OCTET_STRING signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS # 1 padding,,,null,RSA_sign_ASN1_OCTET_STRING() signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS #1 padding,RSA_sign_ASN1_OCTET_STRING() signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS #1 padding. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory.
0,0,"Due to automatic protocol version negotiation , version is not necessarily the protocol version used by the sender of the message",,,null,"Due to automatic protocol version negotiation, version is not necessarily the protocol version used by the sender of the message: If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server, version will be SSL3_VERSION","Due to automatic protocol version negotiation, version is not necessarily the protocol version used by the sender of the message: If a TLS 1.0 ClientHello message is received by an SSL 3.0-only server, version will be SSL3_VERSION."
0,0,The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards,,,null,The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards,"The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards. The services provided by this library are used by the OpenSSL implementations of SSL, TLS and S/MIME, and they have also been used to implement SSH, OpenPGP, and other cryptographic standards."
0,0,an SSL_CTX object is created as a framework to establish TLS/SSL enabled connections,,,null,Then an SSL_CTX object is created as a framework to establish TLS/SSL enabled connections (see SSL_CTX_new(3) ),"Then an SSL_CTX object is created as a framework to establish TLS/SSL enabled connections (see SSL_CTX_new(3) ). Various options regarding certificates, algorithms etc can be set in this object."
0,0,the function arguments have the following meaning,,,When cb is called by the SSL/TLS library for a protocol message,"When cb is called by the SSL/TLS library for a protocol message, the function arguments have the following meaning:","When cb is called by the SSL/TLS library for a protocol message, the function arguments have the following meaning:"
0,0,EVP_DigestVerifyInit sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey,,,null,EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey,"EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey. EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options. Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed)."
0,0,X509_STORE_CTX_set_verify_cb sets the verification callback of X509_STORE_CTX_set_verify_cb_APIParam_1 to verify_cb overwriting any existing callback,,,null,X509_STORE_CTX_set_verify_cb() sets the verification callback of X509_STORE_CTX_set_verify_cb_APIParam_1 to verify_cb overwriting any existing callback,X509_STORE_CTX_set_verify_cb() sets the verification callback of X509_STORE_CTX_set_verify_cb_APIParam_1 to verify_cb overwriting any existing callback.
0,0,However a verification callback is not essential and the default operation is often sufficient,,,null,However a verification callback is not essential and the default operation is often sufficient,However a verification callback is not essential and the default operation is often sufficient.
0,0,"In the case of SSL 3.0 or TLS 1.0 , this is one of the ContentType values defined in the protocol specification , alert , handshake",,,null,"In the case of SSL 3.0 or TLS 1.0 , this is one of the ContentType values defined in the protocol specification , alert , handshake ; but never application_data -RRB-","In the case of SSL 2.0, this is always 0. In the case of SSL 3.0 or TLS 1.0, this is one of the ContentType values defined in the protocol specification (change_cipher_spec(20), alert(21), handshake(22); but never application_data(23) because the callback will only be called for protocol messages)."
0,0,the receiptList option in receiptsFrom is used,,,If receiptList is not NULL,"If receiptList is not NULL ,the receiptList option in receiptsFrom is used","CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,The size of the output is placed in md_len,,,unless The size of the output is NULL,"The size of the output is placed in md_len, unless The size of the output is NULL","It places the result in HMAC_Final_APIParam_2 (which must have space for the output of the hash function, which is no more than EVP_MAX_MD_SIZE bytes). If HMAC_Final_APIParam_2 is NULL, the digest is placed in a static array. The size of the output is placed in md_len, unless The size of the output is NULL. Note: passing a NULL value for HMAC_Final_APIParam_2 to use the static array is not thread safe."
0,0,the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter,,,If receiptList is NULL,"If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter","CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,it can be assigned to an SSL object,,,When a network connection has been created,"When a network connection has been created, it can be assigned to an SSL object","When a network connection has been created, it can be assigned to an SSL object. After the SSL object has been created using SSL_new(3) , SSL_set_fd(3) or SSL_set_bio(3) can be used to associate the network connection with the object."
0,0,"The signedContentIdentifier field is set using id and idlen , or",,,null,"The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL","CMS_ReceiptRequest_create0() creates a signed receipt request structure. The signedContentIdentifier field is set using id and idlen, or The signedContentIdentifier field is set to 32 bytes of pseudo random data if id is NULL. If receiptList is NULL, the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter. If receiptList is not NULL ,the receiptList option in receiptsFrom is used. The receiptsTo parameter specifies the receiptsTo field value."
0,0,no error occurred,,,If it is 1,"If it is 1 ,then no error occurred","The ok parameter to the callback indicates the value the callback should return to retain the default behaviour. If it is zero then and error condition is indicated. If it is 1 ,then no error occurred. If the flag X509_V_FLAG_NOTIFY_POLICY is set ,then ok is set to 2 to indicate the policy checking is complete."
0,0,"For new sessions tickets , , the callback function will be called with enc equal to 1",,,"when the client does n't present a session ticket , or an attempted retreival of the ticket failed , or a renew option was indicated","For new sessions tickets, when the client doesn't present a session ticket, or an attempted retreival of the ticket failed, or a renew option was indicated, the callback function will be called with enc equal to 1","For new sessions tickets, when the client doesn't present a session ticket, or an attempted retreival of the ticket failed, or a renew option was indicated, the callback function will be called with enc equal to 1. The OpenSSL library expects that the function will set an arbitary name, initialize iv, and set the cipher context ctx and the hash context hctx."
0,0,The returned PKCS7 structure will be valid and finalized,1,,when this flag is set,The returned PKCS7 structure will be valid and finalized when this flag is set,"If PKCS7_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the PKCS7 struture: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned PKCS7 structure will be valid and finalized when this flag is set."
0,0,This effectively removes all security from the application,,,null,This effectively removes all security from the application,In general a verification callback should NOT unconditionally return 1 in all circumstances because this will allow verification to succeed no matter what the error. This effectively removes all security from the application because any certificate (including untrusted generated ones) will be accepted.
0,0,Additional application data can be passed to the callback via the ex_data mechanism,,,null,Additional application data can be passed to the callback via the ex_data mechanism,"The X509_STORE_CTX_set_verify_cb_APIParam_1 parameter to the callback is the X509_STORE_CTX_set_verify_cb_APIParam_1 structure that is performing the verification operation. A callback can examine this structure and receive additional information about the error, for example by calling X509_STORE_CTX_get_current_cert(). Additional application data can be passed to the callback via the ex_data mechanism."
0,0,SMIME_read_CMS_APIParam_2 can be passed to CMS_verify with the CMS_DETACHED flag set,,,null,SMIME_read_CMS_APIParam_2 can then be passed to CMS_verify() with the CMS_DETACHED flag set,"If SMIME_read_CMS_APIParam_2 is not NULL ,then the message is clear text signed. SMIME_read_CMS_APIParam_2 can then be passed to CMS_verify() with the CMS_DETACHED flag set."
0,0,The EVP_PKEY_verify_recover function recovers signed data using EVP_PKEY_verify_recover_APIParam_1,,,null,The EVP_PKEY_verify_recover() function recovers signed data using EVP_PKEY_verify_recover_APIParam_1,"The EVP_PKEY_verify_recover() function recovers signed data using EVP_PKEY_verify_recover_APIParam_1. The signature is specified using the sig and siglen parameters. If rout is NULL ,then the maximum size of the output buffer is written to the routlen parameter. If rout is not NULL ,then before the call the routlen parameter should contain the length of the rout buffer, if the call is successful, recovered data is written to rout and the amount of data written to routlen."
0,0,The X509_STORE_CTX_set_verify_cb_APIParam_1 parameter to the callback is the X509_STORE_CTX_set_verify_cb_APIParam_1 structure that is performing the verification operation,,,null,The X509_STORE_CTX_set_verify_cb_APIParam_1 parameter to the callback is the X509_STORE_CTX_set_verify_cb_APIParam_1 structure that is performing the verification operation,"The X509_STORE_CTX_set_verify_cb_APIParam_1 parameter to the callback is the X509_STORE_CTX_set_verify_cb_APIParam_1 structure that is performing the verification operation. A callback can examine this structure and receive additional information about the error, for example by calling X509_STORE_CTX_get_current_cert(). Additional application data can be passed to the callback via the ex_data mechanism."
0,0,ERR_PACK is a macro,,,null,ERR_PACK() is a macro,"The error code is generated from the library number and a function and reason code: error = ERR_PACK(ERR_PACK_APIParam_1, ERR_PACK_APIParam_2, ERR_PACK_APIParam_3). ERR_PACK() is a macro."
0,0,"After the SSL object has been created using SSL_new , SSL_set_fd or SSL_set_bio can be used to associate the network connection with the object",,,null,"After the SSL object has been created using SSL_new(3) , SSL_set_fd(3) or SSL_set_bio(3) can be used to associate the network connection with the object","When a network connection has been created, it can be assigned to an SSL object. After the SSL object has been created using SSL_new(3) , SSL_set_fd(3) or SSL_set_bio(3) can be used to associate the network connection with the object."
0,0,The EVP_Digest ... functions provide message digests,,,null,The EVP_Digest... functions provide message digests,Symmetric encryption is available with the EVP_Encrypt... functions. The EVP_Digest... functions provide message digests.
0,0,The EVP_PKEY_verify_recover_init function initializes a public key algorithm context using key pkey for a verify recover operation,,,null,The EVP_PKEY_verify_recover_init() function initializes a public key algorithm context using key pkey for a verify recover operation,The EVP_PKEY_verify_recover_init() function initializes a public key algorithm context using key pkey for a verify recover operation.
0,0,Also see the older EVP_Sign ... and EVP_Verify ... functions,,,null,Also see the older EVP_Sign... and EVP_Verify... functions,The EVP_DigestSign... and EVP_DigestVerify... functions implement digital signatures and Message Authentication Codes (MACs). Also see the older EVP_Sign... and EVP_Verify... functions.
0,0,Symmetric encryption is available with the EVP_Encrypt ... functions,,,null,Symmetric encryption is available with the EVP_Encrypt... functions,Symmetric encryption is available with the EVP_Encrypt... functions. The EVP_Digest... functions provide message digests.
0,0,To create a new EVP_PKEY see EVP_PKEY_new,,,null,To create a new EVP_PKEY see EVP_PKEY_new(3),"The EVP_PKEY... functions provide a high level interface to asymmetric algorithms. To create a new EVP_PKEY see EVP_PKEY_new(3) . EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3) . EVP_PKEYs can be compared using EVP_PKEY_cmp(3) , or printed using EVP_PKEY_print_private(3) ."
0,0,The error code is generated from the library number and a function and reason code,,,null,"The error code is generated from the library number and a function and reason code: error = ERR_PACK(ERR_PACK_APIParam_1, ERR_PACK_APIParam_2, ERR_PACK_APIParam_3)","The error code is generated from the library number and a function and reason code: error = ERR_PACK(ERR_PACK_APIParam_1, ERR_PACK_APIParam_2, ERR_PACK_APIParam_3). ERR_PACK() is a macro."
0,0,"SSL_set0_verify_cert_store , SSL_set1_verify_cert_store , SSL_set0_chain_cert_store and SSL_set1_chain_cert_store are similar except they apply to SSL structure ssl",,,null,"SSL_set0_verify_cert_store(), SSL_set1_verify_cert_store(), SSL_set0_chain_cert_store() and SSL_set1_chain_cert_store() are similar except they apply to SSL structure ssl","SSL_set0_verify_cert_store(), SSL_set1_verify_cert_store(), SSL_set0_chain_cert_store() and SSL_set1_chain_cert_store() are similar except they apply to SSL structure ssl."
0,0,error = ERR_PACK,,,null,"The error code is generated from the library number and a function and reason code: error = ERR_PACK(ERR_PACK_APIParam_1, ERR_PACK_APIParam_2, ERR_PACK_APIParam_3)","The error code is generated from the library number and a function and reason code: error = ERR_PACK(ERR_PACK_APIParam_1, ERR_PACK_APIParam_2, ERR_PACK_APIParam_3). ERR_PACK() is a macro."
0,0,The EVP_DigestSign ... and EVP_DigestVerify ... functions implement digital signatures and Message Authentication Codes,,,null,The EVP_DigestSign... and EVP_DigestVerify... functions implement digital signatures and Message Authentication Codes (MACs),The EVP_DigestSign... and EVP_DigestVerify... functions implement digital signatures and Message Authentication Codes (MACs). Also see the older EVP_Sign... and EVP_Verify... functions.
0,0,EVP_Seal ... and EVP_Open ... provide public key encryption and decryption to implement digital `` envelopes '',,,null,"EVP_Seal... and EVP_Open... provide public key encryption and decryption to implement digital ""envelopes""","EVP_Seal... and EVP_Open... provide public key encryption and decryption to implement digital ""envelopes""."
0,0,"EVP_PKEYs can be compared using EVP_PKEY_cmp , or printed using EVP_PKEY_print_private",,,null,"EVP_PKEYs can be compared using EVP_PKEY_cmp(3) , or printed using EVP_PKEY_print_private(3)","The EVP_PKEY... functions provide a high level interface to asymmetric algorithms. To create a new EVP_PKEY see EVP_PKEY_new(3) . EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3) . EVP_PKEYs can be compared using EVP_PKEY_cmp(3) , or printed using EVP_PKEY_print_private(3) ."
0,0,a new ASN1_TIME structure is allocated and returned,1,,If ASN1_TIME_adj_APIParam_1 is NULL,"If ASN1_TIME_adj_APIParam_1 is NULL ,a new ASN1_TIME structure is allocated and returned","ASN1_TIME_adj() sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2. The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2. The offset_sec value can also exceed the number of seconds in a day. If ASN1_TIME_adj_APIParam_1 is NULL ,a new ASN1_TIME structure is allocated and returned."
0,0,The EVP_PKEY ... functions provide a high level interface to asymmetric algorithms,,,null,The EVP_PKEY... functions provide a high level interface to asymmetric algorithms,"The EVP_PKEY... functions provide a high level interface to asymmetric algorithms. To create a new EVP_PKEY see EVP_PKEY_new(3) . EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3) . EVP_PKEYs can be compared using EVP_PKEY_cmp(3) , or printed using EVP_PKEY_print_private(3) ."
0,0,The EVP_Encode ... and EVP_Decode ... functions implement base 64 encoding and decoding,,,null,The EVP_Encode... and EVP_Decode... functions implement base 64 encoding and decoding,The EVP_Encode... and EVP_Decode... functions implement base 64 encoding and decoding.
0,0,The offset_sec value can also exceed the number of seconds in a day,,,null,The offset_sec value can also exceed the number of seconds in a day,"ASN1_TIME_adj() sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2. The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2. The offset_sec value can also exceed the number of seconds in a day. If ASN1_TIME_adj_APIParam_1 is NULL ,a new ASN1_TIME structure is allocated and returned."
0,0,ASN1_TIME_diff sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to,,,null,ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to,"ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
0,0,The ASN1_TIME structure corresponds to the ASN .1 structure Time defined in RFC5280 et al,,,null,The ASN1_TIME structure corresponds to the ASN.1 structure Time defined in RFC5280 et al,"The ASN1_TIME structure corresponds to the ASN.1 structure Time defined in RFC5280 et al. The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime the date is used, else GeneralizedTime is used."
0,0,The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day,,,null,The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day,"ASN1_TIME_diff() sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to. If to represents a time later than from ,then one or both (depending on the time difference) of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be positive. If to represents a time earlier than from ,then one or both of ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will be negative. If to and from represent the same time, then ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 will both be zero. If both ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 are non-zero, they will always have the same sign. The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day. If from or to is NULL, the current time is used."
0,0,RAND_file_name_APIParam_1 points to a buffer of size RAND_file_name_APIParam_2 in which to store the filename,,,null,RAND_file_name_APIParam_1 points to a buffer of size RAND_file_name_APIParam_2 in which to store the filename,"RAND_file_name() generates a default path for the random seed file. RAND_file_name_APIParam_1 points to a buffer of size RAND_file_name_APIParam_2 in which to store the filename. The seed file is RANDFILE if that environment variable is set, HOME/.rnd otherwise. If HOME is not set either, or RAND_file_name_APIParam_2 is too small for the path name, an error occurs."
0,0,The function EVP_PKEY_CTX_ctrl sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1,,,null,The function EVP_PKEY_CTX_ctrl() sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1,The function EVP_PKEY_CTX_ctrl() sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1. The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2 if it is not -1. The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to. The control command is indicated in cmd and any additional arguments in p1 and p2.
0,0,the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2,,,If EVP_DigestVerifyInit_APIParam_2 is not NULL,"If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options","EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey. EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options. Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed)."
0,0,The SSL_CTX_add_extra_chain_cert_APIParam_2 certificate provided to SSL_CTX_add_extra_chain_cert will be freed by the library,,,when the SSL_CTX_add_extra_chain_cert_APIParam_1 is destroyed,The SSL_CTX_add_extra_chain_cert_APIParam_2 certificate provided to SSL_CTX_add_extra_chain_cert() will be freed by the library when the SSL_CTX_add_extra_chain_cert_APIParam_1 is destroyed,The SSL_CTX_add_extra_chain_cert_APIParam_2 certificate provided to SSL_CTX_add_extra_chain_cert() will be freed by the library when the SSL_CTX_add_extra_chain_cert_APIParam_1 is destroyed. An application should not free the SSL_CTX_add_extra_chain_cert_APIParam_2 object.
0,0,Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set,,,null,Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set() (or equivalent),Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set() (or equivalent). This can cause problems as the time_t value can overflow on some systems resulting in unexpected results. New applications should use ASN1_TIME_adj() instead and pass the offset value in the offset_sec and offset_day parameters instead of directly manipulating a time_t value.
0,0,"int i , j",,,null,"For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
0,0,The time setting functions obey the rules outlined in RFC5280,,,null,"The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime the date is used, else GeneralizedTime is used","The ASN1_TIME structure corresponds to the ASN.1 structure Time defined in RFC5280 et al. The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime the date is used, else GeneralizedTime is used."
0,0,this can be used to set alternative verification options,,,null,"If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options","EVP_DigestVerifyInit() sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey. EVP_DigestVerifyInit_APIParam_1 must be initialized with EVP_MD_CTX_init() before calling this function. If EVP_DigestVerifyInit_APIParam_2 is not NULL, the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2: this can be used to set alternative verification options. Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten. The EVP_PKEY_CTX value returned must not be freed directly by the application (it will be freed automatically when the EVP_MD_CTX is freed)."
0,0,"The services provided by this library are used by the OpenSSL implementations of SSL , TLS and S/MIME , and they have also been used to implement SSH , OpenPGP , and other cryptographic standards",,,null,"The services provided by this library are used by the OpenSSL implementations of SSL, TLS and S/MIME, and they have also been used to implement SSH, OpenPGP, and other cryptographic standards","The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards. The services provided by this library are used by the OpenSSL implementations of SSL, TLS and S/MIME, and they have also been used to implement SSH, OpenPGP, and other cryptographic standards."
0,0,ASN1_TIME_adj sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2,,,null,ASN1_TIME_adj() sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2,"ASN1_TIME_adj() sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2. The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2. The offset_sec value can also exceed the number of seconds in a day. If ASN1_TIME_adj_APIParam_1 is NULL ,a new ASN1_TIME structure is allocated and returned."
0,0,"char p , temp",,,null,"For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
0,0,"The signedData structure includes several PKCS # 7 autenticatedAttributes including the signing time , the PKCS # 7 content type and the supported list of ciphers in an SMIMECapabilities attribute",,,null,"The signedData structure includes several PKCS#7 autenticatedAttributes including the signing time, the PKCS#7 content type and the supported list of ciphers in an SMIMECapabilities attribute","The signedData structure includes several PKCS#7 autenticatedAttributes including the signing time, the PKCS#7 content type and the supported list of ciphers in an SMIMECapabilities attribute. If PKCS7_NOATTR is set then no authenticatedAttributes will be used. If PKCS7_NOSMIMECAP is set then just the SMIMECapabilities are omitted."
0,0,i = i2d_SSL_SESSION,,,null,"For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
0,0,The control command is indicated in cmd and any additional arguments in p1 and p2,,,null,The control command is indicated in cmd and any additional arguments in p1 and p2,The function EVP_PKEY_CTX_ctrl() sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1. The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2 if it is not -1. The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to. The control command is indicated in cmd and any additional arguments in p1 and p2.
0,0,The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to,,,null,The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to,The function EVP_PKEY_CTX_ctrl() sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1. The key type used must match EVP_PKEY_CTX_ctrl_APIParam_2 if it is not -1. The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to. The control command is indicated in cmd and any additional arguments in p1 and p2.
0,0,p = temp = malloc,,,null,"For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
0,0,-1 sets the salt length to the digest length,,,null,Two special values are supported: -1 sets the salt length to the digest length,The EVP_PKEY_CTX_set_rsa_pss_saltlen() macro sets the RSA PSS salt length to EVP_PKEY_CTX_set_rsa_pss_saltlen_APIParam_2 as its name implies it is only supported for PSS padding. Two special values are supported: -1 sets the salt length to the digest length. When signing -2 sets the salt length to the maximum permissible value. When verifying -2 causes the salt length to be automatically determined based on the PSS block structure. If this macro is not called a salt length value of -2 is used by default.
0,0,The returned CMS_ContentInfo structure will be valid and finalized ,1,,when this flag is set,The returned CMS_ContentInfo structure will be valid and finalized when this flag is set,"If CMS_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the CMS_ContentInfo structure: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned CMS_ContentInfo structure will be valid and finalized when this flag is set."
0,0,The EVP_PKEY_CTX_set_rsa_rsa_keygen_bits macro sets the RSA key length for RSA key genration to bits,,,null,The EVP_PKEY_CTX_set_rsa_rsa_keygen_bits() macro sets the RSA key length for RSA key genration to bits,The EVP_PKEY_CTX_set_rsa_rsa_keygen_bits() macro sets the RSA key length for RSA key genration to bits. If not specified 1024 bits is used.
0,0,j = i2d_SSL_SESSION,,,null,"For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);","When using i2d_SSL_SESSION(), the memory location pointed to by i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 must be large enough to hold the binary representation of the session. There is no known limit on the size of the created ASN1 representation, so the necessary amount of space should be obtained by first calling i2d_SSL_SESSION() with pp=NULL, and obtain the size needed, then allocate the memory and call i2d_SSL_SESSION() again. Note that this will advance the value contained in i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 i2d_SSL_SESSION_APIParam_2 so it is necessary to save a copy of the original allocation. For example: int i,j; char *p, *temp; i = i2d_SSL_SESSION(sess, NULL); p = temp = malloc(i); j = i2d_SSL_SESSION(sess, &temp); assert(i == j); assert(p+i == temp);"
0,0,This is intended to be used for options specified on the command line or in text files,,,null,This is intended to be used for options specified on the command line or in text files,"The function EVP_PKEY_CTX_ctrl_str() allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form. This is intended to be used for options specified on the command line or in text files. The commands supported are documented in the openssl utility command line pages for the option -pkeyopt which is supported by the pkeyutl, genpkey and req commands."
0,0,The macro EVP_PKEY_CTX_set_dsa_paramgen_bits sets the number of bits used for DSA parameter generation to bits,,,null,The macro EVP_PKEY_CTX_set_dsa_paramgen_bits() sets the number of bits used for DSA parameter generation to bits,The macro EVP_PKEY_CTX_set_dsa_paramgen_bits() sets the number of bits used for DSA parameter generation to bits. If not specified 1024 is used.
0,0,The EVP_PKEY_encrypt function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1,,,null,The EVP_PKEY_encrypt() function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1,"The EVP_PKEY_encrypt() function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1. The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL, then before the call the outlen parameter should contain the length of the out buffer, if the call is successful, the encrypted data is written to out and the amount of data written to outlen."
0,0,The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters,,,null,The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters,"The EVP_PKEY_encrypt() function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1. The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL, then before the call the outlen parameter should contain the length of the out buffer, if the call is successful, the encrypted data is written to out and the amount of data written to outlen."
0,0,The macro EVP_PKEY_CTX_set_dh_paramgen_prime_len sets the length of the DH prime parameter p for DH parameter generation,,,null,The macro EVP_PKEY_CTX_set_dh_paramgen_prime_len() sets the length of the DH prime parameter p for DH parameter generation,The macro EVP_PKEY_CTX_set_dh_paramgen_prime_len() sets the length of the DH prime parameter p for DH parameter generation. If this macro is not called then 1024 is used.
0,0,the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added,,,If PKCS7_PARTIAL is set in addition to PKCS7_REUSE_DIGEST,"If PKCS7_PARTIAL is set in addition to PKCS7_REUSE_DIGEST ,then the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added","If PKCS7_PARTIAL is set in addition to PKCS7_REUSE_DIGEST ,then the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added. In this case an explicit call to PKCS7_SIGNER_INFO_sign() is needed to finalize this case."
0,0,the maximum size of the output buffer is written to the routlen parameter,,,If rout is NULL,"If rout is NULL ,then the maximum size of the output buffer is written to the routlen parameter","The EVP_PKEY_verify_recover() function recovers signed data using EVP_PKEY_verify_recover_APIParam_1. The signature is specified using the sig and siglen parameters. If rout is NULL ,then the maximum size of the output buffer is written to the routlen parameter. If rout is not NULL ,then before the call the routlen parameter should contain the length of the rout buffer, if the call is successful, recovered data is written to rout and the amount of data written to routlen."
0,0,OpenSSL will by default identify signing certificates using issuer name and serial number,,,null,OpenSSL will by default identify signing certificates using issuer name and serial number,"OpenSSL will by default identify signing certificates using issuer name and serial number. If CMS_USE_KEYID is set, CMS_USE_KEYID will use the subject key identifier value instead. An error occurs if the signing certificate does not have a subject key identifier extension."
0,0,The function EVP_PKEY_CTX_ctrl_str allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form,,,null,The function EVP_PKEY_CTX_ctrl_str() allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form,"The function EVP_PKEY_CTX_ctrl_str() allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form. This is intended to be used for options specified on the command line or in text files. The commands supported are documented in the openssl utility command line pages for the option -pkeyopt which is supported by the pkeyutl, genpkey and req commands."
0,0,"EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA page , or new keys can be generated using EVP_PKEY_keygen",,,null,"EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3)","The EVP_PKEY... functions provide a high level interface to asymmetric algorithms. To create a new EVP_PKEY see EVP_PKEY_new(3) . EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA(3) page, or new keys can be generated using EVP_PKEY_keygen(3) . EVP_PKEYs can be compared using EVP_PKEY_cmp(3) , or printed using EVP_PKEY_print_private(3) ."
0,0,an attempt is made to copy the content digest value from the PKCS7 struture,,,If PKCS7_REUSE_DIGEST is set,"If PKCS7_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the PKCS7 struture: to add a signer to an existing structure","If PKCS7_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the PKCS7 struture: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned PKCS7 structure will be valid and finalized when this flag is set."
0,0,to add a signer to an existing structure,,,null,"If PKCS7_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the PKCS7 struture: to add a signer to an existing structure","If PKCS7_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the PKCS7 struture: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned PKCS7 structure will be valid and finalized when this flag is set."
0,0,else GeneralizedTime is used,,,if the date can be represented by UTCTime the date is used,"The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime the date is used, else GeneralizedTime is used","The ASN1_TIME structure corresponds to the ASN.1 structure Time defined in RFC5280 et al. The time setting functions obey the rules outlined in RFC5280: if the date can be represented by UTCTime the date is used, else GeneralizedTime is used."
0,0,no signedAttributes will be used,,,If CMS_NOATTR is set,"If CMS_NOATTR is set ,then no signedAttributes will be used","The SignedData structure includes several CMS signedAttributes including the signing time, the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute. If CMS_NOATTR is set ,then no signedAttributes will be used. If CMS_NOSMIMECAP is set then just the SMIMECapabilities are omitted."
0,0,its main use is,,,when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set,"The CMS_SignerInfo_sign() function will explicitly sign a CMS_SignerInfo structure, its main use is when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set","The CMS_SignerInfo_sign() function will explicitly sign a CMS_SignerInfo structure, its main use is when CMS_REUSE_DIGEST and CMS_PARTIAL flags are both set."
0,0,"if the call is successful , recovered data is written to rout and the amount of data written to routlen",,,"If rout is not NULL , before the call the routlen parameter should contain the length of the rout buffer","If rout is not NULL ,then before the call the routlen parameter should contain the length of the rout buffer, if the call is successful, recovered data is written to rout and the amount of data written to routlen","The EVP_PKEY_verify_recover() function recovers signed data using EVP_PKEY_verify_recover_APIParam_1. The signature is specified using the sig and siglen parameters. If rout is NULL ,then the maximum size of the output buffer is written to the routlen parameter. If rout is not NULL ,then before the call the routlen parameter should contain the length of the rout buffer, if the call is successful, recovered data is written to rout and the amount of data written to routlen."
0,0,It uses standard block padding,,,null,It uses standard block padding (aka PKCS padding),"If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding). The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made."
0,0,The EVP_PKEY_encrypt_init function initializes a public key algorithm context using key pkey for an encryption operation,,,null,The EVP_PKEY_encrypt_init() function initializes a public key algorithm context using key pkey for an encryption operation,The EVP_PKEY_encrypt_init() function initializes a public key algorithm context using key pkey for an encryption operation.
0,0,The actual number of bytes written is placed in outl,,,null,The actual number of bytes written is placed in outl,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room. The actual number of bytes written is placed in outl.
0,0,EVP_CIPHER_CTX_set_padding enables or disables padding,,,null,EVP_CIPHER_CTX_set_padding() enables or disables padding,"EVP_CIPHER_CTX_set_padding() enables or disables padding. By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur."
0,0,"EVP_DecryptInit_ex , EVP_DecryptUpdate and EVP_DecryptFinal_ex are the corresponding decryption operations",,,null,"EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations","EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex() are the corresponding decryption operations. EVP_DecryptFinal() will return an error code if padding is enabled and the final block is not correctly formatted. The parameters and restrictions are identical to the encryption operations except that if padding is enabled the decrypted data buffer EVP_DecryptUpdate_APIParam_2 EVP_DecryptUpdate_APIParam_2 passed to EVP_DecryptUpdate() should have sufficient room for (inl + cipher_block_size) bytes unless the cipher block size is 1 in which case inl bytes is sufficient."
0,0,EVP_EncryptInit_ex sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl,,,null,EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl,"EVP_EncryptInit_ex() sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl. EVP_EncryptInit_ex_APIParam_1 must be initialized before calling this function. EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc(). If impl is NULL then the default implementation is used. key is the symmetric key to use and iv is the IV to use (if necessary), the actual number of bytes used for the key and IV depends on the cipher. It is possible to set all parameters to NULL except EVP_EncryptInit_ex_APIParam_2 in an initial call and supply the remaining parameters in subsequent calls, all of which have EVP_EncryptInit_ex_APIParam_2 set to NULL. This is done when the default cipher parameters are not appropriate."
0,0,EVP_EncryptUpdate encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2,,,null,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2,EVP_EncryptUpdate() encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2. This function can be called multiple times to encrypt successive blocks of data. The amount of data written depends on the block alignment of the encrypted data: as a result the amount of data written may be anything from zero bytes to (inl + cipher_block_size - 1) so EVP_EncryptUpdate_APIParam_2 should contain sufficient room. The actual number of bytes written is placed in outl.
0,0,The operation performed depends on the value of the enc parameter,,,null,The operation performed depends on the value of the enc parameter,"EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are functions that can be used for decryption or encryption. The operation performed depends on the value of the enc parameter. It should be set to 1 for encryption, 0 for decryption and -1 to leave the value unchanged (the actual value of 'enc' being supplied in a previous call)."
0,0,EVP_CIPHER_type and EVP_CIPHER_CTX_type return the type of the passed cipher or context,,,null,EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the passed cipher or context,"EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the passed cipher or context. This ""type"" is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID. If the cipher does not have an object identifier or does not have ASN1 support ,this function will return NID_undef."
0,0,SSL_CTX_get_client_CA_list returns the list of client CAs explicitly set for ctx using SSL_CTX_set_client_CA_list,,,null,SSL_CTX_get_client_CA_list() returns the list of client CAs explicitly set for ctx using SSL_CTX_set_client_CA_list(3),SSL_CTX_get_client_CA_list() returns the list of client CAs explicitly set for ctx using SSL_CTX_set_client_CA_list(3) .
0,0,"In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any",,,null,"In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any","SSL_get_client_CA_list() returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list() or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list(3) , when in server mode. In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any."
0,0,Each operation has four functions associated with Each operation,,,null,Each operation has four functions associated with Each operation,"Each operation has four functions associated with Each operation. For clarity the term ""foobar functions"" will be used to collectively refer to the PEM_read_bio_foobar(), PEM_read_foobar(), PEM_write_bio_foobar() and PEM_write_foobar() functions."
0,0,SSL_pending takes into account only bytes from the TLS/SSL record that is currently being processed,,,null,SSL_pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any),"SSL_pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any). If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3) ), additional protocol bytes may have been read containing more TLS/SSL records; these are ignored by SSL_pending()."
0,0,List of CA names explicitly set or send by the server,,,null,List of CA names explicitly set (for ctx or in server mode) or send by the server (client mode),List of CA names explicitly set (for ctx or in server mode) or send by the server (client mode).
0,0,This mechanism is used internally by the ssl library to store the SSL structure associated with a verification operation in an X509_STORE_CTX_get_ex_data_APIParam_1 X509_STORE_CTX_set_ex_data_APIParam_1 structure,,,null,This mechanism is used internally by the ssl library to store the SSL structure associated with a verification operation in an X509_STORE_CTX_get_ex_data_APIParam_1 X509_STORE_CTX_set_ex_data_APIParam_1 structure,This mechanism is used internally by the ssl library to store the SSL structure associated with a verification operation in an X509_STORE_CTX_get_ex_data_APIParam_1 X509_STORE_CTX_set_ex_data_APIParam_1 structure.
0,0,"SSL_get_client_CA_list returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list , when in server mode",,,null,"SSL_get_client_CA_list() returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list() or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list(3) , when in server mode","SSL_get_client_CA_list() returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list() or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list(3) , when in server mode. In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any."
0,0,"The SignedData structure includes several CMS signedAttributes including the signing time , the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute",,,null,"The SignedData structure includes several CMS signedAttributes including the signing time, the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute","The SignedData structure includes several CMS signedAttributes including the signing time, the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute. If CMS_NOATTR is set ,then no signedAttributes will be used. If CMS_NOSMIMECAP is set then just the SMIMECapabilities are omitted."
0,0,For more details about the meaning of arguments see the PEM FUNCTION ARGUMENTS section,,,null,For more details about the meaning of arguments see the PEM FUNCTION ARGUMENTS section,For more details about the meaning of arguments see the PEM FUNCTION ARGUMENTS section.
0,0,The RSAPrivateKey functions process an RSA private key using an RSA structure,,,null,The RSAPrivateKey functions process an RSA private key using an RSA structure,The RSAPrivateKey functions process an RSA private key using an RSA structure. It handles the same formats as the PrivateKey functions but an error occurs if the private key is not RSA.
0,0,The read functions can additionally transparently handle PKCS # 8 format encrypted and unencrypted keys too,,,null,The read functions can additionally transparently handle PKCS#8 format encrypted and unencrypted keys too,"The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure. The write routines use ""traditional"" private key format and can handle both RSA and DSA private keys. The read functions can additionally transparently handle PKCS#8 format encrypted and unencrypted keys too."
0,0,The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure,,,null,The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure,"The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure. The write routines use ""traditional"" private key format and can handle both RSA and DSA private keys. The read functions can additionally transparently handle PKCS#8 format encrypted and unencrypted keys too."
0,0,No client CA list was explicitly set or the server did not send a list of CAs,,,null,No client CA list was explicitly set (for ctx or in server mode) or the server did not send a list of CAs (client mode),No client CA list was explicitly set (for ctx or in server mode) or the server did not send a list of CAs (client mode).
0,0,The write routines use `` traditional '' private key format and can handle both RSA and DSA private keys,,,null,"The write routines use ""traditional"" private key format and can handle both RSA and DSA private keys","The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure. The write routines use ""traditional"" private key format and can handle both RSA and DSA private keys. The read functions can additionally transparently handle PKCS#8 format encrypted and unencrypted keys too."
0,0,The DSAPrivateKey functions process a DSA private key using a DSA structure,,,null,The DSAPrivateKey functions process a DSA private key using a DSA structure,The DSAPrivateKey functions process a DSA private key using a DSA structure. It handles the same formats as the PrivateKey functions but an error occurs if the private key is not DSA.
0,0,The DSAparams functions process DSA parameters using a DSA structure,,,null,The DSAparams functions process DSA parameters using a DSA structure,The DSAparams functions process DSA parameters using a DSA structure. The parameters are encoded using a Dss-Parms structure as defined in RFC2459.
0,0,The DHparams functions process DH parameters using a DH structure,,,null,The DHparams functions process DH parameters using a DH structure,The DHparams functions process DH parameters using a DH structure. The parameters are encoded using a PKCS#3 DHparameter structure.
0,0,"For clarity the term `` foobar functions '' will be used to collectively refer to the PEM_read_bio_foobar , PEM_read_foobar , PEM_write_bio_foobar and PEM_write_foobar functions",,,null,"For clarity the term ""foobar functions"" will be used to collectively refer to the PEM_read_bio_foobar(), PEM_read_foobar(), PEM_write_bio_foobar() and PEM_write_foobar() functions","Each operation has four functions associated with Each operation. For clarity the term ""foobar functions"" will be used to collectively refer to the PEM_read_bio_foobar(), PEM_read_foobar(), PEM_write_bio_foobar() and PEM_write_foobar() functions."
0,0,an attempt is made to copy the content digest value from the CMS_ContentInfo structure,,,If CMS_REUSE_DIGEST is set,"If CMS_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the CMS_ContentInfo structure: to add a signer to an existing structure","If CMS_REUSE_DIGEST is set ,then an attempt is made to copy the content digest value from the CMS_ContentInfo structure: to add a signer to an existing structure. An error occurs if a matching digest value cannot be found to copy. The returned CMS_ContentInfo structure will be valid and finalized when this flag is set."
0,0,PEM_write_bio_PKCS8PrivateKey and PEM_write_PKCS8PrivateKey write a private key in an EVP_PKEY structure in PKCS # 8 EncryptedPrivateKeyInfo format using PKCS # 5 v2 .0 password based encryption algorithms,,,null,PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms,"PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers. If cipher is NULL, then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead."
0,0,PKCS7_encrypt creates and returns a PKCS#7 envelopedData structure,,,null,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,"EVP_EncryptFinal_ex encrypts the `` final '' data , that is any data that remains in a partial block",,,If padding is enabled,"If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block","If padding is enabled (the default) ,then EVP_EncryptFinal_ex() encrypts the ""final"" data, that is any data that remains in a partial block. It uses standard block padding (aka PKCS padding). The encrypted final data is written to EVP_EncryptFinal_ex_APIParam_2 EVP_EncryptUpdate_APIParam_2 which should have sufficient space for one cipher block. The number of bytes written is placed in outl. After this function is called the encryption operation is finished and no further calls to EVP_EncryptUpdate() should be made."
0,0,ERR_load_crypto_strings registers the error strings for all libcrypto functions,,,null,ERR_load_crypto_strings() registers the error strings for all libcrypto functions,"ERR_load_crypto_strings() registers the error strings for all libcrypto functions. SSL_load_error_strings() does the same, but also registers the libssl error strings."
0,0,certs is a list of recipient certificates,,,null,certs is a list of recipient certificates,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,The old PrivateKey write routines are retained for compatibility,,,null,The old PrivateKey write routines are retained for compatibility,The old PrivateKey write routines are retained for compatibility. New applications should write private keys using the PEM_write_bio_PKCS8PrivateKey() or PEM_write_PKCS8PrivateKey() routines because New applications are more secure (New applications use an iteration count of 2048 whereas the traditional routines use a count of 1) unless compatibility with older versions of OpenSSL is important.
0,0,DH_set_default_method makes DH_set_default_method_APIParam_1 the default method for all DH structures created later,,,null,DH_set_default_method() makes DH_set_default_method_APIParam_1 the default method for all DH structures created later,"DH_set_default_method() makes DH_set_default_method_APIParam_1 the default method for all DH structures created later. NB: This is true only whilst no ENGINE has been set as a default for DH, so this function is no longer recommended."
0,0,The X509_AUX functions process a trusted X509 certificate using an X509 structure,,,null,The X509_AUX functions process a trusted X509 certificate using an X509 structure,The X509_AUX functions process a trusted X509 certificate using an X509 structure.
0,0,EC_KEY_dup creates a new EC_KEY object and copies ec_key into it,,,null,EC_KEY_dup creates a new EC_KEY object and copies ec_key into it,EC_KEY_dup creates a new EC_KEY object and copies ec_key into it.
0,0,flags is an optional set of flags,,,null,flags is an optional set of flags,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,in is the content to be encrypted,,,null,in is the content to be encrypted,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,cipher is the symmetric cipher to use,,,null,cipher is the symmetric cipher to use,PKCS7_encrypt() creates and returns a PKCS#7 envelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,EC_KEY_copy copies the contents of the EC_KEY in EC_KEY_copy_APIParam_2 EC_KEY_dup_APIParam_1 into dest,,,null,EC_KEY_copy copies the contents of the EC_KEY in EC_KEY_copy_APIParam_2 EC_KEY_dup_APIParam_1 into dest,EC_KEY_copy copies the contents of the EC_KEY in EC_KEY_copy_APIParam_2 EC_KEY_dup_APIParam_1 into dest.
0,0,Repeated RC4 calls with the same RC4_APIParam_1 RC4_APIParam_1 yield a continuous key stream,,,null,Repeated RC4() calls with the same RC4_APIParam_1 RC4_APIParam_1 yield a continuous key stream,RC4() encrypts or decrypts the RC4_APIParam_2 RC4_APIParam_2 bytes of data at RC4_APIParam_3 RC4_APIParam_3 using RC4_APIParam_1 RC4_APIParam_1 and places the result at outdata. Repeated RC4() calls with the same RC4_APIParam_1 RC4_APIParam_1 yield a continuous key stream.
0,0,This `` type '' is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID,,,null,"This ""type"" is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID","EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the passed cipher or context. This ""type"" is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID. If the cipher does not have an object identifier or does not have ASN1 support ,this function will return NID_undef."
0,0,standard block padding and the padding is checked and removed,,,when decrypting,By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting,"EVP_CIPHER_CTX_set_padding() enables or disables padding. By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur."
0,0,By default encryption operations are padded using,,,null,By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting,"EVP_CIPHER_CTX_set_padding() enables or disables padding. By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur."
0,0,BIO_seek sets the file pointer to position ofs from start of file using fseek,,,null,"BIO_seek() sets the file pointer to position ofs from start of file using fseek(stream, ofs, 0)","BIO_seek() sets the file pointer to position ofs from start of file using fseek(stream, ofs, 0)."
0,0,unlike all other PEM routines the encryption is applied at the PKCS # 8 level and not in the PEM headers,,,null,The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers,"PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write a private key in an EVP_PKEY structure in PKCS#8 EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The cipher argument specifies the encryption algorithm to use: unlike all other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM headers. If cipher is NULL, then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead."
0,0,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS # 10 certificate request using an X509_REQ structure,,,null,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS#10 certificate request using an X509_REQ structure,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS#10 certificate request using an X509_REQ structure. The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST (as required by some CAs). The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions.
0,0,RC4 encrypts or decrypts the RC4_APIParam_2 RC4_APIParam_2 bytes of data at RC4_APIParam_3 RC4_APIParam_3 using RC4_APIParam_1 RC4_APIParam_1 and places the result at outdata,,,null,RC4() encrypts or decrypts the RC4_APIParam_2 RC4_APIParam_2 bytes of data at RC4_APIParam_3 RC4_APIParam_3 using RC4_APIParam_1 RC4_APIParam_1 and places the result at outdata,RC4() encrypts or decrypts the RC4_APIParam_2 RC4_APIParam_2 bytes of data at RC4_APIParam_3 RC4_APIParam_3 using RC4_APIParam_1 RC4_APIParam_1 and places the result at outdata. Repeated RC4() calls with the same RC4_APIParam_1 RC4_APIParam_1 yield a continuous key stream.
0,0,additional protocol bytes may have been read containing more TLS/SSL records,,,If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object 's read_ahead flag is set,"If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3) ), additional protocol bytes may have been read containing more TLS/SSL records; these are ignored by SSL_pending()","SSL_pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any). If the SSL_pending_APIParam_1 SSL_pending_APIParam_1 object's read_ahead flag is set (see SSL_CTX_set_read_ahead(3) ), additional protocol bytes may have been read containing more TLS/SSL records; these are ignored by SSL_pending()."
0,0,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST,,,null,The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST (as required by some CAs),The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS#10 certificate request using an X509_REQ structure. The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST (as required by some CAs). The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions.
0,0,However the public key is encoded using a SubjectPublicKeyInfo structure and,,,null,However the public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA,The RSA_PUBKEY functions also process an RSA public key using an RSA structure. However the public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA.
0,0,no padding is performed,,,If the pad parameter is zero,"If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur","EVP_CIPHER_CTX_set_padding() enables or disables padding. By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If the pad parameter is zero ,then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur."
0,0,the encrypted data is written to out and the amount of data written to outlen,,,"If out is not NULL , before the call the outlen parameter should contain the length of the out buffer , if the call is successful","If out is not NULL, then before the call the outlen parameter should contain the length of the out buffer, if the call is successful, the encrypted data is written to out and the amount of data written to outlen","The EVP_PKEY_encrypt() function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1. The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL, then before the call the outlen parameter should contain the length of the out buffer, if the call is successful, the encrypted data is written to out and the amount of data written to outlen."
0,0,SSL_clear is used to prepare an SSL object for a new connection,,,null,SSL_clear is used to prepare an SSL object for a new connection,"SSL_clear is used to prepare an SSL object for a new connection. While all settings are kept, a side effect is the handling of the current SSL session. If a session is still open, a session is considered bad and will be removed from the session cache, as required by RFC2246. A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state."
0,0,BN_GENCB_call is used with two different meanings,,,null,"BN_GENCB_call(cb, 2, x) is used with two different meanings","BN_GENCB_call(cb, 2, x) is used with two different meanings."
0,0,The process is repeated for prime q with BN_GENCB_call,,,null,"The process is then repeated for prime q with BN_GENCB_call(cb, 3, 1)","The process is then repeated for prime q with BN_GENCB_call(cb, 3, 1)."
0,0,store is a trusted certficate store,,,null,store is a trusted certficate store (used for chain verification),PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,BIO_seek is a macro that sets the position pointer to offset bytes from the start of file,,,null,BIO_seek() is a macro that sets the position pointer to offset bytes from the start of file,BIO_seek() is a macro that sets the position pointer to offset bytes from the start of file.
0,0,p7 is the PKCS7 structure to verify,,,null,p7 is the PKCS7 structure to verify,PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,RSA_generate_key_ex generates a key pair and stores it in the RSA structure provided in rsa,,,null,RSA_generate_key_ex() generates a key pair and stores it in the RSA structure provided in rsa,RSA_generate_key_ex() generates a key pair and stores it in the RSA structure provided in rsa. The pseudo-random number generator must be seeded prior to calling RSA_generate_key_ex().
0,0,PKCS7_verify verifies a PKCS # 7 signedData structure,,,null,PKCS7_verify() verifies a PKCS#7 signedData structure,PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1,,,null,The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1,SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used when a DH parameters are required to tmp_dh_callback. The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1.
0,0,OpenSSL will by default identify recipient certificates using issuer name and serial number,,,null,OpenSSL will by default identify recipient certificates using issuer name and serial number,"OpenSSL will by default identify recipient certificates using issuer name and serial number. If CMS_USE_KEYID is set ,CMS_USE_KEYID will use the subject key identifier value instead. An error occurs if all recipient certificates do not have a subject key identifier extension."
0,0,The acceptable certificates would be passed in the certs parameter,,,null,The acceptable certificates would be passed in the certs parameter,One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates. The acceptable certificates would be passed in the certs parameter. In this case if the signer is not one of the certificates supplied in certs then the verify will fail because the signer cannot be found.
0,0,The certs and flags parameters have the same meanings as in PKCS7_verify,,,null,The certs and flags parameters have the same meanings as in PKCS7_verify(),"PKCS7_get0_signers() retrieves the signer's certificates from p7, it does not check their validity or whether any signatures are valid. The certs and flags parameters have the same meanings as in PKCS7_verify()."
0,0,SHA1 computes the SHA-1 message digest of the SHA1_APIParam_2 bytes at SHA1_APIParam_1 and places it in SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1,,,null,SHA1() computes the SHA-1 message digest of the SHA1_APIParam_2 bytes at SHA1_APIParam_1 and places it in SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 (which must have space for SHA_DIGEST_LENGTH == 20 bytes of output),"SHA1() computes the SHA-1 message digest of the SHA1_APIParam_2 bytes at SHA1_APIParam_1 and places it in SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 (which must have space for SHA_DIGEST_LENGTH == 20 bytes of output). If SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 is NULL, the digest is placed in a static array. Note: setting SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1 to NULL is not thread safe."
0,0,certs is a set of certificates in which to search for the signer 's certificate,,,null,certs is a set of certificates in which to search for the signer's certificate,PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,DSA_set_method selects DSA_set_method_APIParam_2 to perform all operations using the key rsa,,,null,DSA_set_method() selects DSA_set_method_APIParam_2 to perform all operations using the key rsa,"DSA_set_method() selects DSA_set_method_APIParam_2 to perform all operations using the key rsa. This will replace the DSA_METHOD used by the DSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DSA keys that only work with certain DSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DSA_METHOD for the key can have unexpected results."
0,0,The callback is set using functions SSL_CTX_set_psk_client_callback or SSL_set_psk_client_callback,,,null,The callback is set using functions SSL_CTX_set_psk_client_callback() or SSL_set_psk_client_callback(),"The callback is set using functions SSL_CTX_set_psk_client_callback() or SSL_set_psk_client_callback(). The callback function is given the connection in parameter SSL_set_psk_client_callback_APIParam_1, a NULL-terminated PSK identity hint sent by the server in parameter hint, a buffer identity of length max_identity_len bytes where the the resulting NULL-terminated identity is to be stored, and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored."
0,0,"flags is an optional set of flags , which can be used to modify the verify operation",,,null,"flags is an optional set of flags, which can be used to modify the verify operation","flags is an optional set of flags, which can be used to modify the verify operation."
0,0,On success the length of psk in bytes is returned,,,null,On success (callback found a PSK identity and a pre-shared key to use) the length (> 0) of psk in bytes is returned,On success (callback found a PSK identity and a pre-shared key to use) the length (> 0) of psk in bytes is returned.
0,0,BIO_set_buffer_read_data clears the read buffer and fills it with num bytes of buf,,,null,BIO_set_buffer_read_data() clears the read buffer and fills it with num bytes of buf,BIO_set_buffer_read_data() clears the read buffer and fills it with num bytes of buf. If num is larger than the current buffer size the buffer is expanded.
0,0,One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates,,,null,One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates,One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates. The acceptable certificates would be passed in the certs parameter. In this case if the signer is not one of the certificates supplied in certs then the verify will fail because the signer cannot be found.
0,0,Note that parameter hint given to the callback may be NULL,,,null,Note that parameter hint given to the callback may be NULL,Note that parameter hint given to the callback may be NULL.
0,0,DSA_set_default_method makes DSA_set_default_method_APIParam_1 the default method for all DSA structures created later,,,null,DSA_set_default_method() makes DSA_set_default_method_APIParam_1 the default method for all DSA structures created later,"DSA_set_default_method() makes DSA_set_default_method_APIParam_1 the default method for all DSA structures created later. NB: This is true only whilst no ENGINE has been set as a default for DSA, so this function is no longer recommended."
0,0,Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites,,,null,Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites,"Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites. Modern servers that do not support export ciphersuites are advised to either use SSL_CTX_set_tmp_dh() or alternatively, use the callback but ignore keylength and is_export and simply supply at least 2048-bit parameters in the callback."
0,0,This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode call,,,null,This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode(3) call,"If the underlying BIO is blocking, SSL_read() will only return, once the read operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur. This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode(3) call."
0,0,"If the underlying BIO is blocking, SSL_read will only return, once the read operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur",,,null,"If the underlying BIO is blocking, SSL_read() will only return, once the read operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur","If the underlying BIO is blocking, SSL_read() will only return, once the read operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur. This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode(3) call."
0,0,a side effect is the handling of the current SSL session,,,While all settings are kept,"While all settings are kept, a side effect is the handling of the current SSL session","SSL_clear is used to prepare an SSL object for a new connection. While all settings are kept, a side effect is the handling of the current SSL session. If a session is still open, a session is considered bad and will be removed from the session cache, as required by RFC2246. A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state."
0,0,"BIO_set_read_buffer_size , BIO_set_write_buffer_size and BIO_set_buffer_size set the read , write or both read and write buffer sizes to size",,,null,"BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size","BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size. The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared when the buffer is resized."
0,0,The content is written to out,,,if it is not NULL,The content is written to out if it is not NULL,PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,indata is the signed data,,,if the content is not present in p7,indata is the signed data if the content is not present in p7 (that is it is detached),PKCS7_verify() verifies a PKCS#7 signedData structure. p7 is the PKCS7 structure to verify. certs is a set of certificates in which to search for the signer's certificate. store is a trusted certficate store (used for chain verification). indata is the signed data if the content is not present in p7 (that is it is detached). The content is written to out if it is not NULL.
0,0,The behaviour can be cutomized using flags,,,null,The behaviour can be cutomized using flags,"The function CONF_modules_load_file() configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2. If CONF_modules_load_file_APIParam_1 is NULL ,the standard OpenSSL configuration file is used. If CONF_modules_load_file_APIParam_2 is NULL, the standard OpenSSL application name openssl_conf is used. The behaviour can be cutomized using flags."
0,0,CONF_MFLAGS_IGNORE_ERRORS if set errors returned by individual configuration modules are ignored,,,null,CONF_MFLAGS_IGNORE_ERRORS if set errors returned by individual configuration modules are ignored,"CONF_MFLAGS_IGNORE_ERRORS if set errors returned by individual configuration modules are ignored. If not set, the first module error is considered fatal and no further modules are loaded."
0,0,A client application may request that a server send back an OCSP status response,,,null,A client application may request that a server send back an OCSP status response (also known as OCSP stapling),A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
0,0,The function CONF_modules_load_file configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2,,,null,The function CONF_modules_load_file() configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2,"The function CONF_modules_load_file() configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2. If CONF_modules_load_file_APIParam_1 is NULL ,the standard OpenSSL configuration file is used. If CONF_modules_load_file_APIParam_2 is NULL, the standard OpenSSL application name openssl_conf is used. The behaviour can be cutomized using flags."
0,0,Any buffered data is cleared,,,when the buffer is resized,Any buffered data is cleared when the buffer is resized,"BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() set the read, write or both read and write buffer sizes to size. The initial buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared when the buffer is resized."
0,0,X509_STORE_CTX_get_error_depth returns the depth of the error,,,null,X509_STORE_CTX_get_error_depth() returns the depth of the error,"X509_STORE_CTX_get_error_depth() returns the depth of the error. This is a non-negative integer representing where in the certificate chain the error occurred. If it is zero it occurred in the end entity certificate, one if it is the certificate which signed the end entity certificate and so on."
0,0,a partial PKCS7 structure is output suitable for streaming I/O,,,If the PKCS7_STREAM flag is set,"If the PKCS7_STREAM flag is set ,a partial PKCS7 structure is output suitable for streaming I/O: no data is read from the BIO in","If the PKCS7_STREAM flag is set ,a partial PKCS7 structure is output suitable for streaming I/O: no data is read from the BIO in."
0,0,The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg,,,null,The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(),A client application may request that a server send back an OCSP status response (also known as OCSP stapling). To do so the client should call the SSL_set_tlsext_status_type() function prior to the start of the handshake. Currently the only supported type is TLSEXT_STATUSTYPE_ocsp. This value should be passed in the SSL_set_tlsext_status_type_APIParam_2 argument. The client should additionally provide a callback function to decide what to do with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The callback function should determine whether the returned OCSP response is acceptable or not. The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback will not be called in the event of a handshake where session resumption occurs (because there are no Certificates exchanged in such a handshake).
0,0,X509_STORE_CTX_get1_chain returns a complete validate chain if a previous call to X509_verify_cert is successful,,,null,X509_STORE_CTX_get1_chain() returns a complete validate chain if a previous call to X509_verify_cert() is successful,"X509_STORE_CTX_get1_chain() returns a complete validate chain if a previous call to X509_verify_cert() is successful. If the call to X509_verify_cert() is not successful the returned chain may be incomplete or invalid. The returned chain persists after the X509_STORE_CTX_get_error_APIParam_1 X509_STORE_CTX_get_current_cert_APIParam_1 X509_STORE_CTX_get_error_depth_APIParam_1 X509_STORE_CTX_set_error_APIParam_1 structure is freed, when it is no longer needed it should be free up using:"
0,0,Normally any modules errors will add error information to the error queue,,,null,Normally any modules errors will add error information to the error queue,"Normally any modules errors will add error information to the error queue. If CONF_MFLAGS_SILENT is set, no error information is added."
0,0,no data is read from the BIO in,,,null,"If the PKCS7_STREAM flag is set ,a partial PKCS7 structure is output suitable for streaming I/O: no data is read from the BIO in","If the PKCS7_STREAM flag is set ,a partial PKCS7 structure is output suitable for streaming I/O: no data is read from the BIO in."
0,0,The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters,,,null,The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters,"The EVP_PKEY_decrypt() function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1. The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen."
0,0,The EVP_PKEY_decrypt function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1,,,null,The EVP_PKEY_decrypt() function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1,"The EVP_PKEY_decrypt() function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1. The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen."
0,0,The EVP_PKEY_decrypt_init function initializes a public key algorithm context using key pkey for a decryption operation,,,null,The EVP_PKEY_decrypt_init() function initializes a public key algorithm context using key pkey for a decryption operation,The EVP_PKEY_decrypt_init() function initializes a public key algorithm context using key pkey for a decryption operation.
0,0,This is a non-negative integer representing where in the certificate chain the error occurred,,,null,This is a non-negative integer representing where in the certificate chain the error occurred,"X509_STORE_CTX_get_error_depth() returns the depth of the error. This is a non-negative integer representing where in the certificate chain the error occurred. If it is zero it occurred in the end entity certificate, one if it is the certificate which signed the end entity certificate and so on."
0,0,"a session is considered bad and will be removed from the session cache , as required by RFC2246",,,If a session is still open,"If a session is still open, a session is considered bad and will be removed from the session cache, as required by RFC2246","SSL_clear is used to prepare an SSL object for a new connection. While all settings are kept, a side effect is the handling of the current SSL session. If a session is still open, a session is considered bad and will be removed from the session cache, as required by RFC2246. A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state."
0,0,A session is considered open,,,if SSL_shutdown was not called for the connection or at least SSL_set_shutdown was used to set the SSL_SENT_SHUTDOWN state,"A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state","SSL_clear is used to prepare an SSL object for a new connection. While all settings are kept, a side effect is the handling of the current SSL session. If a session is still open, a session is considered bad and will be removed from the session cache, as required by RFC2246. A session is considered open, if SSL_shutdown(3) was not called for the connection or at least SSL_set_shutdown(3) was used to set the SSL_SENT_SHUTDOWN state."
0,0,This combination is however useful,,,if one merely wishes to write the content to out and its validity is not considered important,This combination is however useful if one merely wishes to write the content to out and its validity is not considered important,"Care should be taken when modifying the default verify behaviour, for example setting PKCS7_NOVERIFY|PKCS7_NOSIGS will totally disable all verification and any signed message will be considered valid. This combination is however useful if one merely wishes to write the content to out and its validity is not considered important."
0,0,the standard OpenSSL configuration file is used,,,If CONF_modules_load_file_APIParam_1 is NULL,"If CONF_modules_load_file_APIParam_1 is NULL ,the standard OpenSSL configuration file is used","The function CONF_modules_load_file() configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2. If CONF_modules_load_file_APIParam_1 is NULL ,the standard OpenSSL configuration file is used. If CONF_modules_load_file_APIParam_2 is NULL, the standard OpenSSL application name openssl_conf is used. The behaviour can be cutomized using flags."
0,0,the standard OpenSSL application name openssl_conf is used,,,If CONF_modules_load_file_APIParam_2 is NULL,"If CONF_modules_load_file_APIParam_2 is NULL, the standard OpenSSL application name openssl_conf is used","The function CONF_modules_load_file() configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2. If CONF_modules_load_file_APIParam_1 is NULL ,the standard OpenSSL configuration file is used. If CONF_modules_load_file_APIParam_2 is NULL, the standard OpenSSL application name openssl_conf is used. The behaviour can be cutomized using flags."
0,0,no error information is added,,,If CONF_MFLAGS_SILENT is set,"If CONF_MFLAGS_SILENT is set, no error information is added","Normally any modules errors will add error information to the error queue. If CONF_MFLAGS_SILENT is set, no error information is added."
0,0,the first module error is considered fatal and no further modules are loaded,,,If not set,"If not set, the first module error is considered fatal and no further modules are loaded","CONF_MFLAGS_IGNORE_ERRORS if set errors returned by individual configuration modules are ignored. If not set, the first module error is considered fatal and no further modules are loaded."
0,0,configuration module loading from DSOs is disabled,,,If CONF_MFLAGS_NO_DSO is set,"If CONF_MFLAGS_NO_DSO is set ,configuration module loading from DSOs is disabled","If CONF_MFLAGS_NO_DSO is set ,configuration module loading from DSOs is disabled."
0,0,This will replace the DSA_METHOD used by the DSA key and,,,null,"This will replace the DSA_METHOD used by the DSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change","DSA_set_method() selects DSA_set_method_APIParam_2 to perform all operations using the key rsa. This will replace the DSA_METHOD used by the DSA key and if the previous method was supplied by an ENGINE, the handle to that ENGINE will be released during the change. It is possible to have DSA keys that only work with certain DSA_METHOD implementations (eg from an ENGINE module that supports embedded hardware-protected keys), and in such cases attempting to change the DSA_METHOD for the key can have unexpected results."
0,0,"It is believed to be compatible with RC4 -LSB- TM -RSB- , a proprietary cipher of RSA Security Inc",,,null,"It is believed to be compatible with RC4[TM], a proprietary cipher of RSA Security Inc","This library implements the Alleged RC4 cipher, which is described for example in Applied Cryptography. It is believed to be compatible with RC4[TM], a proprietary cipher of RSA Security Inc."
0,0,"The callback function is given the connection in parameter SSL_set_psk_client_callback_APIParam_1 , a NULL-terminated PSK identity hint sent by the server in parameter hint , a buffer identity of length max_identity_len bytes where the the resulting NULL-terminated identity is to be stored , and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored",,,null,"The callback function is given the connection in parameter SSL_set_psk_client_callback_APIParam_1, a NULL-terminated PSK identity hint sent by the server in parameter hint, a buffer identity of length max_identity_len bytes where the the resulting NULL-terminated identity is to be stored, and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored","The callback is set using functions SSL_CTX_set_psk_client_callback() or SSL_set_psk_client_callback(). The callback function is given the connection in parameter SSL_set_psk_client_callback_APIParam_1, a NULL-terminated PSK identity hint sent by the server in parameter hint, a buffer identity of length max_identity_len bytes where the the resulting NULL-terminated identity is to be stored, and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored."
0,0,The read operation was not successful,,,null,"The read operation was not successful ,","The read operation was not successful, because either the connection was closed, an error occurred or action must be taken by the calling process. Call SSL_get_error(3) with the return value ret to find out the reason."
0,0,The list specified overrides the previous setting,,,null,The list specified overrides the previous setting,"This list must explicitly be set using SSL_CTX_set_client_CA_list() for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list() for the specific SSL_add_client_CA_APIParam_1. The list specified overrides the previous setting. The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification."
0,0,The IV is supplied in the iv parameter,,,null,The IV is supplied in the iv parameter,EVP_OpenInit() initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2. It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv. The IV is supplied in the iv parameter.
0,0,It merely compares the public materials and/or key parameters of a key pair,,,null,It merely compares the public materials (eg exponent and modulus of an RSA key) and/or key parameters (eg EC params of an EC key) of a key pair,"The check_private_key functions don't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not. It merely compares the public materials (eg exponent and modulus of an RSA key) and/or key parameters (eg EC params of an EC key) of a key pair. So if you pass a public key to these functions in X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2, it will return success."
0,0,EVP_OpenInit initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2,,,null,EVP_OpenInit() initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2,EVP_OpenInit() initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2. It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv. The IV is supplied in the iv parameter.
0,0,use SSL_CTX_load_verify_locations to additionally load them for verification,,,null,"The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification","This list must explicitly be set using SSL_CTX_set_client_CA_list() for SSL_CTX_add_client_CA_APIParam_1 and SSL_set_client_CA_list() for the specific SSL_add_client_CA_APIParam_1. The list specified overrides the previous setting. The CAs listed do not become trusted (list only contains the names, not the complete certificates); use SSL_CTX_load_verify_locations(3) to additionally load them for verification."
0,0,X509_STORE_CTX_init sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation,,,null,X509_STORE_CTX_init() sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation,"X509_STORE_CTX_init() sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation. It must be called before each call to X509_verify_cert(), ie a X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert(). The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain. Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, STACK_OF_APIParam_0 and chain parameters can be NULL."
0,0,It is possible to call EVP_OpenInit twice in the same way as EVP_DecryptInit,,,null,It is possible to call EVP_OpenInit() twice in the same way as EVP_DecryptInit(),It is possible to call EVP_OpenInit() twice in the same way as EVP_DecryptInit(). The first call should have priv set to NULL and (after setting any cipher parameters) it should be called again with EVP_OpenInit_APIParam_2 set to NULL.
0,0,i2d_ECDSA_SIG returns the length of the DER encoded signature,,,null,i2d_ECDSA_SIG returns the length of the DER encoded signature (or 0 on error),i2d_ECDSA_SIG() creates the DER encoding of the ECDSA signature i2d_ECDSA_SIG_APIParam_1 and writes the encoded signature to i2d_ECDSA_SIG_APIParam_2 (note: if i2d_ECDSA_SIG_APIParam_2 is NULL i2d_ECDSA_SIG returns the expected length in bytes of the DER encoded signature). i2d_ECDSA_SIG returns the length of the DER encoded signature (or 0 on error).
0,0,X509_STORE_CTX_set0_crls sets a set of CRLs to use to aid certificate verification to sk,,,null,X509_STORE_CTX_set0_crls() sets a set of CRLs to use to aid certificate verification to sk,"X509_STORE_CTX_set0_crls() sets a set of CRLs to use to aid certificate verification to sk. These CRLs will only be used if CRL verification is enabled in the associated X509_STORE_CTX_set0_param_APIParam_2 structure. This might be used where additional ""useful"" CRLs are supplied as part of a protocol, for example in a PKCS#7 structure."
0,0,In some cases the use of a configuration file is optional and its absence is not an error,,,null,In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set,By using CONF_modules_load_file() with appropriate flags an application can customise application configuration to best suit its needs. In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set.
0,0,CONF_MFLAGS_IGNORE_MISSING_FILE would be set,,,null,In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set,By using CONF_modules_load_file() with appropriate flags an application can customise application configuration to best suit its needs. In some cases the use of a configuration file is optional and its absence is not an error: in this case CONF_MFLAGS_IGNORE_MISSING_FILE would be set.
0,0,The parameter ECDSA_sign_ex_APIParam_1 is ignored,,,null,The parameter ECDSA_sign_ex_APIParam_1 is ignored,ECDSA_sign_ex() computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len. Note: ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory. The parameter ECDSA_sign_ex_APIParam_1 is ignored.
0,0,The parameter ECDSA_verify_APIParam_1 is ignored,,,null,The parameter ECDSA_verify_APIParam_1 is ignored,ECDSA_verify() verifies that the signature in ECDSA_verify_APIParam_2 of size siglen is a valid ECDSA signature of the hash value ECDSA_verify_APIParam_2 of size ECDSA_do_sign_ex_APIParam_2 using the public key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1. The parameter ECDSA_verify_APIParam_1 is ignored.
0,0,d2i_ECDSA_SIG_APIParam_1 points to the buffer containing the DER encoded signature of size len,,,null,d2i_ECDSA_SIG_APIParam_1 points to the buffer containing the DER encoded signature of size len,d2i_ECDSA_SIG() decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated d2i_ECDSA_SIG_APIParam_1 structure. d2i_ECDSA_SIG_APIParam_1 points to the buffer containing the DER encoded signature of size len.
0,0,ECDSA_sign_setup may be used to precompute parts of the signing operation,,,null,ECDSA_sign_setup() may be used to precompute parts of the signing operation,ECDSA_sign_setup() may be used to precompute parts of the signing operation. ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure (or NULL). The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex.
0,0,The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len,,,null,The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len,ECDSA_sign_ex() computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp. The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len. Note: ECDSA_sign_ex_APIParam_2 must point to ECDSA_size bytes of memory. The parameter ECDSA_sign_ex_APIParam_1 is ignored.
0,0,d2i_ECDSA_SIG decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated d2i_ECDSA_SIG_APIParam_1 structure,,,null,d2i_ECDSA_SIG() decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated d2i_ECDSA_SIG_APIParam_1 structure,d2i_ECDSA_SIG() decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated d2i_ECDSA_SIG_APIParam_1 structure. d2i_ECDSA_SIG_APIParam_1 points to the buffer containing the DER encoded signature of size len.
0,0,It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv,,,null,It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv,EVP_OpenInit() initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2. It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv. The IV is supplied in the iv parameter.
0,0,X509_STORE_CTX_set_chain sets the additional certificate chain used by X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk,,,null,X509_STORE_CTX_set_chain() sets the additional certificate chain used by X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk,X509_STORE_CTX_set_chain() sets the additional certificate chain used by X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk.
0,0,BIO_set_ssl_renegotiate_timeout sets the renegotiate timeout to seconds,,,null,BIO_set_ssl_renegotiate_timeout() sets the renegotiate timeout to seconds,BIO_set_ssl_renegotiate_timeout() sets the renegotiate timeout to seconds. When the renegotiate timeout elapses the session is automatically renegotiated.
0,0,X509_STORE_CTX_trusted_stack sets the set of trusted certificates of X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk,,,null,X509_STORE_CTX_trusted_stack() sets the set of trusted certificates of X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk,X509_STORE_CTX_trusted_stack() sets the set of trusted certificates of X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk. This is an alternative way of specifying trusted certificates instead of using an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1.
0,0,ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure,,,null,ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure (or NULL),ECDSA_sign_setup() may be used to precompute parts of the signing operation. ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure (or NULL). The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex.
0,0,ECDSA_sign is wrapper function for ECDSA_sign_ex with kinv and rp set to NULL,,,null,ECDSA_sign() is wrapper function for ECDSA_sign_ex with kinv and rp set to NULL,ECDSA_sign() is wrapper function for ECDSA_sign_ex with kinv and rp set to NULL.
0,0,i2d_ECDSA_SIG creates the DER encoding of the ECDSA signature i2d_ECDSA_SIG_APIParam_1 and writes the encoded signature to i2d_ECDSA_SIG_APIParam_2,,,null,i2d_ECDSA_SIG() creates the DER encoding of the ECDSA signature i2d_ECDSA_SIG_APIParam_1 and writes the encoded signature to i2d_ECDSA_SIG_APIParam_2 (note: if i2d_ECDSA_SIG_APIParam_2 is NULL i2d_ECDSA_SIG returns the expected length in bytes of the DER encoded signature),i2d_ECDSA_SIG() creates the DER encoding of the ECDSA signature i2d_ECDSA_SIG_APIParam_1 and writes the encoded signature to i2d_ECDSA_SIG_APIParam_2 (note: if i2d_ECDSA_SIG_APIParam_2 is NULL i2d_ECDSA_SIG returns the expected length in bytes of the DER encoded signature). i2d_ECDSA_SIG returns the length of the DER encoded signature (or 0 on error).
0,0,BN_add adds BN_add_APIParam_2 and BN_add_APIParam_3 and places the result in BN_add_APIParam_1,,,null,BN_add() adds BN_add_APIParam_2 and BN_add_APIParam_3 and places the result in BN_add_APIParam_1 (r=a+b),BN_add() adds BN_add_APIParam_2 and BN_add_APIParam_3 and places the result in BN_add_APIParam_1 (r=a+b). BN_add_APIParam_1 may be the same BN_add_APIParam_1 as BN_add_APIParam_2 or BN_add_APIParam_3.
0,0,BN_sub subtracts BN_sub_APIParam_3 from BN_sub_APIParam_2 and places the result in BN_sub_APIParam_1,,,null,BN_sub() subtracts BN_sub_APIParam_3 from BN_sub_APIParam_2 and places the result in BN_sub_APIParam_1 (r=a-b),BN_sub() subtracts BN_sub_APIParam_3 from BN_sub_APIParam_2 and places the result in BN_sub_APIParam_1 (r=a-b).
0,0,This function is faster than BN_mul,,,null,"This function is faster than BN_mul(r,a,a)","BN_sqr() takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1 (r=a^2). BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1. This function is faster than BN_mul(r,a,a)."
0,0,"For multiplication by powers of 2 , use BN_lshift",,,null,"For multiplication by powers of 2, use BN_lshift(3)","BN_mul() multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1 (r=a*b). BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3. For multiplication by powers of 2, use BN_lshift(3) ."
0,0,This function will normally be called,,,when the CMS_PARTIAL flag is used,This function will normally be called when the CMS_PARTIAL flag is used,This function will normally be called when the CMS_PARTIAL flag is used. This function should only be used when streaming is not performed because the streaming I/O functions perform finalisation operations internally.
0,0,BIO_set_ssl sets the internal SSL pointer of BIO BIO_ctrl_APIParam_1 to ssl using the close flag c,,,null,BIO_set_ssl() sets the internal SSL pointer of BIO BIO_ctrl_APIParam_1 to ssl using the close flag c,BIO_set_ssl() sets the internal SSL pointer of BIO BIO_ctrl_APIParam_1 to ssl using the close flag c.
0,0,BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3,,,null,BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3,"BN_mod_mul() multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 (r=(a*b) mod m). BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3. For more efficient algorithms for repeated computations using the same modulus, see BN_mod_mul_montgomery(3) and BN_mod_mul_reciprocal(3) ."
0,0,"Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned",,,null,"Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned","BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d). Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3)."
0,0,"For division by powers of 2 , use BN_rshift",,,null,"For division by powers of 2, use BN_rshift(3)","BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d). Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3)."
0,0,BN_mul multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1,,,null,BN_mul() multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1 (r=a*b),"BN_mul() multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1 (r=a*b). BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3. For multiplication by powers of 2, use BN_lshift(3) ."
0,0,BN_sqr takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1,,,null,BN_sqr() takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1 (r=a^2),"BN_sqr() takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1 (r=a^2). BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1. This function is faster than BN_mul(r,a,a)."
0,0,This function is faster than repeated applications of BN_mul,,,null,This function is faster than repeated applications of BN_mul(),BN_exp() raises BN_exp_APIParam_2 BN_mul_APIParam_2 to the BN_exp_APIParam_3-th power and places the result in BN_exp_APIParam_1 BN_mul_APIParam_1 (r=a^p). This function is faster than repeated applications of BN_mul().
0,0,The error codes can be obtained by ERR_get_error,,,null,The error codes can be obtained by ERR_get_error(3),"For all functions, 1 is returned for success, 0 on error. The return value should always be checked (eg, if (!BN_add(r,a,b)) goto err;). The error codes can be obtained by ERR_get_error(3) ."
0,0,This function uses less time and space than BN_exp,,,null,This function uses less time and space than BN_exp(),BN_mod_exp() computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 (r=a^p % m). This function uses less time and space than BN_exp(). Do not call this function when BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 is even and any of the parameters have the BN_FLG_CONSTTIME flag set.
0,0,SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client,1,,when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1,SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1,SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.
0,0,SSL_CTX_set_client_CA_list sets,,,null,SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1,SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for SSL_CTX_add_client_CA_APIParam_1.
0,0,CMS_sign creates and returns a CMS SignedData structure,,,null,CMS_sign() creates and returns a CMS SignedData structure,"CMS_sign() creates and returns a CMS SignedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain). Any or all of these parameters can be NULL, see NOTES below."
0,0,BN_exp raises BN_exp_APIParam_2 BN_mul_APIParam_2 to the BN_exp_APIParam_3-th power and places the result in BN_exp_APIParam_1 BN_mul_APIParam_1,,,null,BN_exp() raises BN_exp_APIParam_2 BN_mul_APIParam_2 to the BN_exp_APIParam_3-th power and places the result in BN_exp_APIParam_1 BN_mul_APIParam_1 (r=a^p),BN_exp() raises BN_exp_APIParam_2 BN_mul_APIParam_2 to the BN_exp_APIParam_3-th power and places the result in BN_exp_APIParam_1 BN_mul_APIParam_1 (r=a^p). This function is faster than repeated applications of BN_mul().
0,0,"For more efficient algorithms for repeated computations using the same modulus , see BN_mod_mul_montgomery and BN_mod_mul_reciprocal",,,null,"For more efficient algorithms for repeated computations using the same modulus, see BN_mod_mul_montgomery(3) and BN_mod_mul_reciprocal(3)","BN_mod_mul() multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 (r=(a*b) mod m). BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3. For more efficient algorithms for repeated computations using the same modulus, see BN_mod_mul_montgomery(3) and BN_mod_mul_reciprocal(3) ."
0,0,BN_div divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2,,,null,"BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d)","BN_div() divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2 (dv=a/d, rem=a%d). Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned. The result is rounded towards zero; thus if BN_div_APIParam_3 is negative, the remainder will be zero or negative. For division by powers of 2, use BN_rshift(3)."
0,0,The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len,,,null,The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len. The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len. The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit.
0,0,The data to be signed is read from BIO data,,,null,The data to be signed is read from BIO data,The data to be signed is read from BIO data.
0,0,BN_mod_exp computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3,,,null,BN_mod_exp() computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 (r=a^p % m),BN_mod_exp() computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 (r=a^p % m). This function uses less time and space than BN_exp(). Do not call this function when BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3 is even and any of the parameters have the BN_FLG_CONSTTIME flag set.
0,0,BN_mod_mul multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 mod m,,,null,BN_mod_mul() multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 (r=(a*b) mod m),"BN_mod_mul() multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 (r=(a*b) mod m). BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3. For more efficient algorithms for repeated computations using the same modulus, see BN_mod_mul_montgomery(3) and BN_mod_mul_reciprocal(3) ."
0,0,"The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2 , the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates in chain",,,null,"The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain","X509_STORE_CTX_init() sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation. It must be called before each call to X509_verify_cert(), ie a X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 is only good for one call to X509_verify_cert(); if you want to verify a second certificate with the same X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 then you must call X509_STORE_CTX_cleanup() and then X509_STORE_CTX_init() again before the second call to X509_verify_cert(). The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates (which will be untrusted but may be used to build the chain) in chain. Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2, STACK_OF_APIParam_0 and chain parameters can be NULL."
0,0,Many S/MIME clients expect the signed content to include valid MIME headers,,,null,Many S/MIME clients expect the signed content to include valid MIME headers,Many S/MIME clients expect the signed content to include valid MIME headers. If the CMS_TEXT flag is set MIME headers for type text/plain are prepended to the data.
0,0,certs is an optional additional set of certificates to include in the CMS structure,,,null,certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain),"CMS_sign() creates and returns a CMS SignedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain). Any or all of these parameters can be NULL, see NOTES below."
0,0,"signcert is the certificate to sign with , pkey is the corresponding private key",,,null,"signcert is the certificate to sign with, pkey is the corresponding private key","CMS_sign() creates and returns a CMS SignedData structure. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain). Any or all of these parameters can be NULL, see NOTES below."
0,0,"it sends a list of CAs , to the client",1,,When a TLS/SSL server requests a client certificate -RRB-,"When a TLS/SSL server requests a client certificate -RRB- , it sends a list of CAs , , to the client","When a TLS/SSL server requests a client certificate (see SSL_CTX_set_verify(3)), it sends a list of CAs, for which it will accept certificates, to the client."
0,0,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len,,,null,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len. The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len. The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit.
0,0,SSL_set_client_CA_list() sets the list of CAs sent to the client ,1,,"when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object","SSL_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object","SSL_set_client_CA_list() sets the list of CAs sent to the client when requesting a client certificate for the chosen SSL_add_client_CA_APIParam_1, overriding the setting valid for SSL_add_client_CA_APIParam_1's SSL_CTX object."
0,0,if the call is successful the decrypted data is written to out and the amount of data written to outlen,,,null,"If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen","The EVP_PKEY_decrypt() function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1. The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters. If out is NULL, then the maximum size of the output buffer is written to the outlen parameter. If out is not NULL ,then before the call the outlen parameter should contain the length of the out buffer, if the call is successful the decrypted data is written to out and the amount of data written to outlen."
0,0,"If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation",,,null,"If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation","If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass."
0,0,In this way data can be signed in a single pass,,,null,In this way data can be signed in a single pass,"If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass."
0,0,The callback is only allowed to generate a shorter id and reduce id_len,,,null,The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit,The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len. The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len. The callback is only allowed to generate a shorter id and reduce id_len; the callback must never increase id_len or write to the location SSL_has_matching_session_id_APIParam_2 exceeding the given limit.
0,0,"Several functions including SMIME_write_CMS , i2d_CMS_bio_stream , PEM_write_bio_CMS_stream finalize the structure",,,null,"Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure","Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS()."
0,0,This is SHA1 for both RSA and DSA keys,,,null,This is SHA1 for both RSA and DSA keys,"If a signer is specified, a signer will use the default digest for the signing algorithm. This is SHA1 for both RSA and DSA keys."
0,0,The signing is however not performed and the data to be signed is not read from the data parameter,,,null,The signing is however not performed and the data to be signed is not read from the data parameter,"If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation. The signing is however not performed and the data to be signed is not read from the data parameter. Signing is deferred until after the data has been written. In this way data can be signed in a single pass."
0,0,"SSL_has_matching_session_id checks , whether a session with id SSL_has_matching_session_id_APIParam_2 is already contained in the internal session cache of the parent context of SSL_has_matching_session_id_APIParam_1",,,null,"SSL_has_matching_session_id() checks, whether a session with id SSL_has_matching_session_id_APIParam_2 (of length id_len) is already contained in the internal session cache of the parent context of SSL_has_matching_session_id_APIParam_1","SSL_has_matching_session_id() checks, whether a session with id SSL_has_matching_session_id_APIParam_2 (of length id_len) is already contained in the internal session cache of the parent context of SSL_has_matching_session_id_APIParam_1."
0,0,Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS,,,null,Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS(),"Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(), PEM_write_bio_CMS_stream() finalize the structure. Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS()."
0,0,X509_CRL_get0_lastUpdate and X509_CRL_get0_nextUpdate return the lastUpdate and nextUpdate fields of X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1,,,null,X509_CRL_get0_lastUpdate() and X509_CRL_get0_nextUpdate() return the lastUpdate and nextUpdate fields of X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1,X509_CRL_get0_lastUpdate() and X509_CRL_get0_nextUpdate() return the lastUpdate and nextUpdate fields of X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1. The value returned is an internal pointer which must not be freed up after the call. If the nextUpdate field is absent from X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1 then NULL is returned.
0,0,X509_get0_notBefore and X509_get0_notAfter return the notBefore and notAfter fields of certificate X509_get0_notBefore_APIParam_1 X509_get0_notAfter_APIParam_1 respectively,,,null,X509_get0_notBefore() and X509_get0_notAfter() return the notBefore and notAfter fields of certificate X509_get0_notBefore_APIParam_1 X509_get0_notAfter_APIParam_1 respectively,X509_get0_notBefore() and X509_get0_notAfter() return the notBefore and notAfter fields of certificate X509_get0_notBefore_APIParam_1 X509_get0_notAfter_APIParam_1 respectively. The value returned is an internal pointer which must not be freed up after the call.
0,0,The EVP_PKEY_sign function performs a public key signing operation using EVP_PKEY_sign_APIParam_1,,,null,The EVP_PKEY_sign() function performs a public key signing operation using EVP_PKEY_sign_APIParam_1,"The EVP_PKEY_sign() function performs a public key signing operation using EVP_PKEY_sign_APIParam_1. The data to be signed is specified using the tbs and tbslen parameters. If sig is NULL, then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL ,then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful ,the signature is written to sig and the amount of data written to siglen."
0,0,The function CMS_sign is a basic CMS signing function whose output will be suitable for many purposes,,,null,The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes,"The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes. For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set. Then one or more signers can be added using the function CMS_sign_add1_signer(), non default digests can be used and custom attributes added. CMS_final() must then be called to finalize the structure if streaming is not enabled."
0,0,"Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3 , SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4 , or fp are evaluated",,,null,"Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3, SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4, or fp are evaluated","The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects. Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3, SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4, or fp are evaluated. These functions should never be called directly. All functionalities needed are made available via other functions or macros."
0,0,X509_CRL_set1_lastUpdate and X509_CRL_set1_nextUpdate set the lastUpdate and nextUpdate fields of X509_CRL_get0_nextUpdate_APIParam_1 X509_CRL_get0_lastUpdate_APIParam_1 to X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2,,,null,X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() set the lastUpdate and nextUpdate fields of X509_CRL_get0_nextUpdate_APIParam_1 X509_CRL_get0_lastUpdate_APIParam_1 to X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2,X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() set the lastUpdate and nextUpdate fields of X509_CRL_get0_nextUpdate_APIParam_1 X509_CRL_get0_lastUpdate_APIParam_1 to X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2. Ownership of the passed parameter X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2 is not transferred by these functions so it must be freed up after the call.
0,0,The EVP_PKEY_sign_init function initializes a public key algorithm context using key pkey for a signing operation,,,null,The EVP_PKEY_sign_init() function initializes a public key algorithm context using key pkey for a signing operation,The EVP_PKEY_sign_init() function initializes a public key algorithm context using key pkey for a signing operation.
0,0,The SSL __ ctrl family of functions is used to manipulate settings of the SSL_CTX and SSL objects,,,null,The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects,"The SSL_*_ctrl() family of functions is used to manipulate settings of the SSL_CTX and SSL objects. Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3, SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4, or fp are evaluated. These functions should never be called directly. All functionalities needed are made available via other functions or macros."
0,0,The data to be signed is specified using the tbs and tbslen parameters,,,null,The data to be signed is specified using the tbs and tbslen parameters,"The EVP_PKEY_sign() function performs a public key signing operation using EVP_PKEY_sign_APIParam_1. The data to be signed is specified using the tbs and tbslen parameters. If sig is NULL, then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL ,then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful ,the signature is written to sig and the amount of data written to siglen."
0,0,"one or more signers can be added using the function CMS_sign_add1_signer , non default digests can be used and custom attributes added",,,null,"Then one or more signers can be added using the function CMS_sign_add1_signer(), non default digests can be used and custom attributes added","The function CMS_sign() is a basic CMS signing function whose output will be suitable for many purposes. For finer control of the output format the certs, signcert and pkey parameters can all be NULL and the CMS_PARTIAL flag set. Then one or more signers can be added using the function CMS_sign_add1_signer(), non default digests can be used and custom attributes added. CMS_final() must then be called to finalize the structure if streaming is not enabled."
0,0,it will be restored after the callback has finished and the session id will be padded with 0x00,1,,If a SSLv2 session id is generated and id_len is reduced,"If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00","If a SSLv2 session id is generated and id_len is reduced, it will be restored after the callback has finished and the session id will be padded with 0x00. It is not recommended to change the id_len for SSLv2 sessions. The callback can use the SSL_get_version(3) function to check, whether the session is of type SSLv2."
0,0,BIO_seek sets the file pointer to position ofs from start of file using lseek,,,null,"BIO_seek() sets the file pointer to position ofs from start of file using lseek(fd, ofs, 0)","BIO_seek() sets the file pointer to position ofs from start of file using lseek(fd, ofs, 0)."
0,0,"As at any time a re-negotiation is possible , a call to SSL_write can also cause read operations !",,,null,"As at any time a re-negotiation is possible, a call to SSL_write() can also cause read operations!","If the underlying BIO is non-blocking, SSL_write() will also return, when the underlying BIO could not satisfy the needs of SSL_write() to continue the operation. In this case a call to SSL_get_error(3) with the return value of SSL_write() will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. As at any time a re-negotiation is possible, a call to SSL_write() can also cause read operations! The calling process then must repeat the call after taking appropriate action to satisfy the needs of SSL_write(). The action depends on the underlying BIO. When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition. When using a buffering BIO, like a BIO pair, data must be written into or retrieved out of the BIO before being able to continue."
0,0,a signer will use the default digest for the signing algorithm,,,If a signer is specified,"If a signer is specified, a signer will use the default digest for the signing algorithm","If a signer is specified, a signer will use the default digest for the signing algorithm. This is SHA1 for both RSA and DSA keys."
0,0,"Any whitespace, newline or carriage return characters are ignored",,,null,"Any whitespace, newline or carriage return characters are ignored","EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,This gives the number of blocks of data that will be processed,,,null,This gives the number of blocks of data that will be processed,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,Only full blocks of data will be immediately processed and output by this function,,,null,Only full blocks of data (48 bytes) will be immediately processed and output by this function,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,BIO_set_fd sets the file descriptor of BIO b to BIO_new_fd_APIParam_1 and the close flag to c,,,null,BIO_set_fd() sets the file descriptor of BIO b to BIO_new_fd_APIParam_1 and the close flag to c,BIO_set_fd() sets the file descriptor of BIO b to BIO_new_fd_APIParam_1 and the close flag to c.
0,0,Additionally a NUL terminator character will be added,,,null,Additionally a NUL terminator character will be added,"EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1. For every 3 bytes of input provided 4 bytes of output data will be produced. If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (ie 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function."
0,0,The data being signed is included in the CMS_ContentInfo structure,,,unless CMS_DETACHED is set in which case it is omitted,"The data being signed is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted","The data being signed is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is used for CMS_ContentInfo detached signatures which are used in S/MIME plaintext signed messages for example."
0,0,The length of the data generated without the NUL terminator is returned from the function,,,null,The length of the data generated without the NUL terminator is returned from the function,"EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1. For every 3 bytes of input provided 4 bytes of output data will be produced. If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (ie 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function."
0,0,For every 3 bytes of input provided 4 bytes of output data will be produced,,,null,For every 3 bytes of input provided 4 bytes of output data will be produced,"EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1. For every 3 bytes of input provided 4 bytes of output data will be produced. If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (ie 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function."
0,0,EVP_EncodeUpdate encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3,,,null,EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,SSL_CTX_get_info_callback returns a pointer to the currently set information callback function for ctx,,,null,SSL_CTX_get_info_callback() returns a pointer to the currently set information callback function for ctx,SSL_CTX_get_info_callback() returns a pointer to the currently set information callback function for ctx.
0,0,In the event of an error EVP_EncodeUpdate will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0,,,null,In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,EVP_DecodeUpdate decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3,,,null,EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3,"EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,This function will attempt to decode as much data as possible in 4 byte chunks,,,null,This function will attempt to decode as much data as possible in 4 byte chunks,"EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,the callback may only fill part of the possible length and leave id_len untouched,,,while maintaining reproducibility,"The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called, so the callback may only fill part of the possible length and leave id_len untouched while maintaining reproducibility","The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called, so the callback may only fill part of the possible length and leave id_len untouched while maintaining reproducibility."
0,0,"The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called , so",,,null,"The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called, so the callback may only fill part of the possible length and leave id_len untouched while maintaining reproducibility","The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called, so the callback may only fill part of the possible length and leave id_len untouched while maintaining reproducibility."
0,0,EVP_EncodeBlock encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1,,,null,EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1,"EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1. For every 3 bytes of input provided 4 bytes of output data will be produced. If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (ie 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function."
0,0,Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate or EVP_EncodeFinal,,,null,Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(),"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3,,,null,The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3,"EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,a partial CMS_ContentInfo structure is output to which additional signers and capabilities can be added before finalization,,,If the CMS_PARTIAL flag is set,"If the CMS_PARTIAL flag is set ,a partial CMS_ContentInfo structure is output to which additional signers and capabilities can be added before finalization","If the CMS_PARTIAL flag is set ,a partial CMS_ContentInfo structure is output to which additional signers and capabilities can be added before finalization."
0,0,The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3,,,null,The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3,"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,the callback setting currently valid for ctx is used,,,When callback is NULL,"When callback is NULL, the callback setting currently valid for ctx is used","SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use. When callback is NULL, the callback setting currently valid for ctx is used."
0,0,SSL_get_info_callback returns a pointer to the currently set information callback function for ssl,,,null,SSL_get_info_callback() returns a pointer to the currently set information callback function for ssl,SSL_get_info_callback() returns a pointer to the currently set information callback function for ssl.
0,0,"If the underlying BIO is blocking, SSL_write will only return, once the write operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur",,,null,"If the underlying BIO is blocking, SSL_write() will only return, once the write operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur","If the underlying BIO is blocking, SSL_write() will only return, once the write operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur. This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode(3) call."
0,0,The where argument specifies information about where the callback function was called,,,null,The where argument specifies information about where (in which context) the callback function was called,"The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information."
0,0,The ret information can be evaluated using the SSL_alert_type_string family of functions,,,null,The ret information can be evaluated using the SSL_alert_type_string(3) family of functions,The ret information can be evaluated using the SSL_alert_type_string(3) family of functions.
0,0,OBJ_get0_data returns a pointer to the content octets of OBJ_length_APIParam_1,,,null,OBJ_get0_data() returns a pointer to the content octets of OBJ_length_APIParam_1,OBJ_get0_data() returns a pointer to the content octets of OBJ_length_APIParam_1. The returned pointer is an internal pointer which must not be freed.
0,0,The certificate returned is checked,,,null,The certificate returned (if any) is checked,"Server mode: the server sends a client certificate request to the client. The certificate returned (if any) is checked. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags."
0,0,RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate the signature,,,null,RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate the signature,RSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest RSA_verify_APIParam_2 of size RSA_verify_APIParam_3. RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate the signature. rsa is the signer's public key.
0,0,RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2,,,null,RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2,"RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2. It usually is one of NID_sha1, NID_ripemd160 and NID_md5; see objects(3) for details. If RSA_sign_APIParam_1 RSA_verify_APIParam_1 is NID_md5_sha1, an SSL signature (MD5 and SHA1 message digests with PKCS #1 padding and no algorithm identifier) is created."
0,0,Operations in a binary field are performed relative to an irreducible polynomial,,,null,Operations in a binary field are performed relative to an irreducible polynomial,Operations in a binary field are performed relative to an irreducible polynomial. All such curves with OpenSSL use a trinomial or a pentanomial for this parameter.
0,0,last verify_callback set specifically for this ssl remains,,,null,In this case last verify_callback set specifically for this ssl remains,"SSL_set_verify() sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback. In this case last verify_callback set specifically for this ssl remains. If no special callback was set before, the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used, that was valid at the time ssl was created with SSL_new(3) ."
0,0,The handshake will be continued regardless of the verification result,,,null,The handshake will be continued regardless of the verification result,"Client mode: if not using an anonymous cipher (by default disabled), the server will send a certificate which will be checked. The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result(3) function. The handshake will be continued regardless of the verification result."
0,0,the server sends a client certificate request to the client,,,null,Server mode: the server sends a client certificate request to the client,"Server mode: the server sends a client certificate request to the client. The certificate returned (if any) is checked. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags."
0,0,All such curves with OpenSSL use a trinomial or a pentanomial for this parameter,,,null,All such curves with OpenSSL use a trinomial or a pentanomial for this parameter,Operations in a binary field are performed relative to an irreducible polynomial. All such curves with OpenSSL use a trinomial or a pentanomial for this parameter.
0,0,"If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data the function returns -1 to indicate an error",,,null,"If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error","EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,"A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and no more non-padding character data is expected to be processed",,,null,"A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed","EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,RSA_verify verifies that the signature sigbuf of size siglen matches a given message digest RSA_verify_APIParam_2 of size RSA_verify_APIParam_3,,,null,RSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest RSA_verify_APIParam_2 of size RSA_verify_APIParam_3,RSA_verify() verifies that the signature sigbuf of size siglen matches a given message digest RSA_verify_APIParam_2 of size RSA_verify_APIParam_3. RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate the signature. rsa is the signer's public key.
0,-1,SSL_set_verify sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used,,,null,SSL_set_verify() sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used,"SSL_set_verify() sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback. In this case last verify_callback set specifically for this ssl remains. If no special callback was set before, the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used, that was valid at the time ssl was created with SSL_new(3) ."
0,0,SSL_CTX_set_verify sets the verification flags for SSL_CTX_set_verify_APIParam_1 to be SSL_CTX_set_verify_APIParam_2 and specifies the verify_callback function to be used,,,null,SSL_CTX_set_verify() sets the verification flags for SSL_CTX_set_verify_APIParam_1 to be SSL_CTX_set_verify_APIParam_2 and specifies the verify_callback function to be used,"SSL_CTX_set_verify() sets the verification flags for SSL_CTX_set_verify_APIParam_1 to be SSL_CTX_set_verify_APIParam_2 and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback."
0,0,"Note that PKCS # 1 adds meta-data , placing limits on the size of the key that can be used",,,null,"Note that PKCS #1 adds meta-data, placing limits on the size of the key that can be used","RSA_sign() signs the message digest RSA_sign_APIParam_2 of size RSA_sign_APIParam_3 using the private key rsa as specified in PKCS #1 v2.0. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory. Note that PKCS #1 adds meta-data, placing limits on the size of the key that can be used. See RSA_private_encrypt(3) for lower-level operations."
0,0,the server certificate is verified,,,null,Client mode: the server certificate is verified,"Client mode: the server certificate is verified. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. If no server certificate is sent, because an anonymous cipher is used, SSL_VERIFY_PEER is ignored."
0,0,RSA_sign signs the message digest RSA_sign_APIParam_2 of size RSA_sign_APIParam_3 using the private key rsa as specified in PKCS # 1 v2 .0,,,null,RSA_sign() signs the message digest RSA_sign_APIParam_2 of size RSA_sign_APIParam_3 using the private key rsa as specified in PKCS #1 v2.0,"RSA_sign() signs the message digest RSA_sign_APIParam_2 of size RSA_sign_APIParam_3 using the private key rsa as specified in PKCS #1 v2.0. It stores the signature in sigret and the signature size in siglen. sigret must point to RSA_size(rsa) bytes of memory. Note that PKCS #1 adds meta-data, placing limits on the size of the key that can be used. See RSA_private_encrypt(3) for lower-level operations."
0,0,the verification process is continued,1,,"If verify_callback returns 1,","If verify_callback returns 1, the verification process is continued","The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,Any partial chunk of unprocessed data that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate,,,null,"Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate()","EVP_DecodeUpdate() decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. This function will attempt to decode as much data as possible in 4 byte chunks. Any whitespace, newline or carriage return characters are ignored. Any partial chunk of unprocessed data (1, 2 or 3 bytes) that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate(). If any illegal base 64 characters are encountered or if the base 64 padding character ""="" is encountered in the middle of the data then the function returns -1 to indicate an error. A return value of 0 or 1 indicates successful processing of the data. A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character ""="" and therefore no more non-padding character data is expected to be processed. For every 4 valid base 64 bytes processed (ignoring whitespace, carriage returns and line feeds), 3 bytes of binary output data will be produced (or less at the end of the data where the padding character ""="" has been used)."
0,0,These functions decode and encode an X509_SIG structure which is equivalent to the DigestInfo structure defined in PKCS # 1 and PKCS # 7,,,null,These functions decode and encode an X509_SIG structure which is equivalent to the DigestInfo structure defined in PKCS#1 and PKCS#7,These functions decode and encode an X509_SIG structure which is equivalent to the DigestInfo structure defined in PKCS#1 and PKCS#7.
0,0,At each level signatures and issuer attributes are checked,,,null,At each level signatures and issuer attributes are checked,"The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level."
0,0,The return value of verify_callback controls the strategy of the further verification process,,,null,The return value of verify_callback controls the strategy of the further verification process,"The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,only request a client certificate on the initial TLS/SSL handshake,,,null,Server mode: only request a client certificate on the initial TLS/SSL handshake,Server mode: only request a client certificate on the initial TLS/SSL handshake. Do not ask for a client certificate again in case of a renegotiation. This flag must be used together with SSL_VERIFY_PEER.
0,0,SSL_CB_ALERT is set,,,If an alert is handled,"If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information","The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information."
0,0,"the verification process is immediately stopped with ""verification failed"" state",1,,"If verify_callback returns 0,","If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state","The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,and ret specifies the alert information,,,null,"If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information","The callback function is called as callback(SSL *ssl, int where, int ret). The where argument specifies information about where (in which context) the callback function was called. If ret is 0, an error condition occurred. If an alert is handled, SSL_CB_ALERT is set and ret specifies the alert information."
0,0,"the server will not send a client certificate request to the client , so the client will not send a certificate",,,null,"Server mode: the server will not send a client certificate request to the client, so the client will not send a certificate","Server mode: the server will not send a client certificate request to the client, so the client will not send a certificate."
0,0,"if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a ""handshake failure"" alert",,,null,"Server mode: if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a ""handshake failure"" alert","Server mode: if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a ""handshake failure"" alert. This flag must be used together with SSL_VERIFY_PEER."
0,0,The setting for ctx is overridden from the setting for a specific SSL object,,,if specified,"The setting for ctx is overridden from the setting for a specific SSL object, if specified","SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use. The setting for ctx is overridden from the setting for a specific SSL object, if specified. When callback is NULL, not callback function is used."
0,0,verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification,,,null,verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification,"The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set. The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification."
0,0,the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established,1,,"If verify_callback always returns 1,","If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established","The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,an SSL signature is created,,,If RSA_sign_APIParam_1 RSA_verify_APIParam_1 is NID_md5_sha1,"If RSA_sign_APIParam_1 RSA_verify_APIParam_1 is NID_md5_sha1, an SSL signature (MD5 and SHA1 message digests with PKCS #1 padding and no algorithm identifier) is created","RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2. It usually is one of NID_sha1, NID_ripemd160 and NID_md5; see objects(3) for details. If RSA_sign_APIParam_1 RSA_verify_APIParam_1 is NID_md5_sha1, an SSL signature (MD5 and SHA1 message digests with PKCS #1 padding and no algorithm identifier) is created."
0,0,The flags begin with BN_FLG _,,,null,The flags begin with BN_FLG_,"flags is a bit field of flags which are defined in openssl/bn.h. The flags begin with BN_FLG_. The macros BN_set_flags(b,n) and BN_get_flags(b,n) exist to enable or fetch flag(s) bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3."
0,0,By applying X509_CTX_store _ functions verify_callback can locate the certificate in question and perform additional steps,,,null,By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES),"The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level."
0,0,The certificate chain is checked starting with the deepest nesting level and worked upward to the peer 's certificate,,,null,The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate,"The certificate chain is checked starting with the deepest nesting level (the root CA certificate) and worked upward to the peer's certificate. At each level signatures and issuer attributes are checked. Whenever a verification error is found, the error number is stored in verify_callback_APIParam_2 and verify_callback is called with verify_callback_APIParam_1=0. By applying X509_CTX_store_* functions verify_callback can locate the certificate in question and perform additional steps (see EXAMPLES). If no error is found for a certificate, verify_callback is called with verify_callback_APIParam_1=1 before advancing to the next level."
0,0,"SSL_set_info_callback sets the callback function , that",,,null,"SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use","SSL_set_info_callback() sets the callback function, that can be used to obtain state information for ssl during connection setup and use. When callback is NULL, the callback setting currently valid for ctx is used."
0,0,the NULL pointer can be used for verify_callback,,,If no callback function shall be specified,"If no callback function shall be specified, the NULL pointer can be used for verify_callback","SSL_CTX_set_verify() sets the verification flags for SSL_CTX_set_verify_APIParam_1 to be SSL_CTX_set_verify_APIParam_2 and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback."
0,0,To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48,,,null,To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder),"EVP_EncodeUpdate() encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3. It is the caller's responsibility to ensure that the buffer at EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 is sufficiently large to accommodate the output data. Only full blocks of data (48 bytes) will be immediately processed and output by this function. Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate() or EVP_EncodeFinal(). To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48 (ignore any remainder). This gives the number of blocks of data that will be processed. Ensure the output buffer contains 65 bytes of storage for each block, plus an additional byte for a NUL terminator. EVP_EncodeUpdate() may be called repeatedly to process large amounts of input data. In the event of an error EVP_EncodeUpdate() will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0."
0,0,flags is a bit field of flags which are defined in openssl/bn,,,null,flags is a bit field of flags which are defined in openssl/bn.h,"flags is a bit field of flags which are defined in openssl/bn.h. The flags begin with BN_FLG_. The macros BN_set_flags(b,n) and BN_get_flags(b,n) exist to enable or fetch flag(s) bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3."
0,0,cert_cb is the application defined callback,,,null,cert_cb() is the application defined callback,"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
0,0,The implementations are defined in bn_lcl,,,null,The implementations are defined in bn_lcl.h,"The implementations use the following macros which, depending on the architecture, may use ""long long"" C operations or inline assembler. The implementations are defined in bn_lcl.h."
0,0,"SSL_CTX_set_info_callback sets the callback function , that",,,null,"SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use","SSL_CTX_set_info_callback() sets the callback function, that can be used to obtain state information for SSL objects created from ctx during connection setup and use. The setting for ctx is overridden from the setting for a specific SSL object, if specified. When callback is NULL, not callback function is used."
0,0,"The integer value is stored in bn_dump_APIParam_1 bn_div_words_APIParam_3 , a malloced array of words , least significant word first",,,null,"The integer value is stored in bn_dump_APIParam_1 bn_div_words_APIParam_3, a malloc()ed array of words (mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4), least significant word first","The integer value is stored in bn_dump_APIParam_1 bn_div_words_APIParam_3, a malloc()ed array of words (mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4), least significant word first. A mul_add_APIParam_1 sqr_APIParam_1 mul_APIParam_1 bn_div_words_APIParam_1 bn_mul_words_APIParam_4 can be either 16, 32 or 64 bits in size, depending on the 'number of bits' (BITS2) specified in openssl/bn.h."
0,0,"This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s , see BN_CTX_start",,,null,"This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s, see BN_CTX_start(3)","Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables during their execution. Since dynamic memory allocation to create bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX structure is used. This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s, see BN_CTX_start(3) ."
0,0,bn_check_top verifies that - > top > = 0 & & - > top < = - > dmax,,,null,bn_check_top() verifies that ((a)->top >= 0 && (a)->top <= (a)->dmax),bn_check_top() verifies that ((a)->top >= 0 && (a)->top <= (a)->dmax). A violation will cause the program to abort.
0,0,"verify_callback_APIParam_1 indicates , whether the verification of the certificate in question was passed or not",,,null,"The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0)","The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set. The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification."
0,0,the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications,,,null,the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications,This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications.
0,0,the server will send a certificate which will be checked,,,if not using an anonymous cipher,"Client mode: if not using an anonymous cipher (by default disabled), the server will send a certificate which will be checked","Client mode: if not using an anonymous cipher (by default disabled), the server will send a certificate which will be checked. The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result(3) function. The handshake will be continued regardless of the verification result."
0,0,the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library,,,null,the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library,This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library. the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications.
0,0,SSL_VERIFY_PEER is ignored,,,If no server certificate is sent,"If no server certificate is sent , , SSL_VERIFY_PEER is ignored","Client mode: the server certificate is verified. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. If no server certificate is sent, because an anonymous cipher is used, SSL_VERIFY_PEER is ignored."
0,0,The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result or by maintaining its own error storage managed by verify_callback,,,null,The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback,"The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,The verify_callback function is used to control the behaviour,,,when the SSL_VERIFY_PEER flag is set,The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set,"The verify_callback function is used to control the behaviour when the SSL_VERIFY_PEER flag is set. The verify_callback function must be supplied by the application and receives two arguments: verify_callback_APIParam_1 indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification."
0,0,the default callback will be used,,,If no verify_callback is specified,"If no verify_callback is specified, the default callback will be used","If no verify_callback is specified, the default callback will be used. Its return value is identical to verify_callback_APIParam_1, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set."
0,0,a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated,,,If SSL_VERIFY_PEER is set,"If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated","The return value of verify_callback controls the strategy of the further verification process. If verify_callback returns 0, the verification process is immediately stopped with ""verification failed"" state. If SSL_VERIFY_PEER is set, a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated. If verify_callback returns 1, the verification process is continued. If verify_callback always returns 1, the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established. The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result(3) or by maintaining its own error storage managed by verify_callback."
0,0,the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure,,,If the verification process fails,"If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure","Client mode: the server certificate is verified. If the verification process fails, the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure. If no server certificate is sent, because an anonymous cipher is used, SSL_VERIFY_PEER is ignored."
0,0,no callback function is used,,,When cert_cb is NULL,"When cert_cb() is NULL, no callback function is used","When cert_cb() is NULL, no callback function is used."
0,0,"the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used , that was valid at the time ssl was created with SSL_new",,,If no special callback was set before,"If no special callback was set before, the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used, that was valid at the time ssl was created with SSL_new(3)","SSL_set_verify() sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used. If no callback function shall be specified, the NULL pointer can be used for verify_callback. In this case last verify_callback set specifically for this ssl remains. If no special callback was set before, the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used, that was valid at the time ssl was created with SSL_new(3) ."
0,0,the block is encoded as a final block of data and the output is padded such that it is always divisible by 4,,,If dlen is not divisible by 3,"If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4","EVP_EncodeBlock() encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1. For every 3 bytes of input provided 4 bytes of output data will be produced. If dlen is not divisible by 3, then the block is encoded as a final block of data and the output is padded such that it is always divisible by 4. Additionally a NUL terminator character will be added. For example if 16 bytes of input data is provided then 24 bytes of encoded data is created plus 1 byte for a NUL terminator (ie 25 bytes in total). The length of the data generated without the NUL terminator is returned from the function."
0,0,the signature is written to sig and the amount of data written to siglen,,,"If sig is not NULL , before the call the siglen parameter should contain the length of the sig buffer , if the call is successful","If sig is not NULL ,then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful ,the signature is written to sig and the amount of data written to siglen","The EVP_PKEY_sign() function performs a public key signing operation using EVP_PKEY_sign_APIParam_1. The data to be signed is specified using the tbs and tbslen parameters. If sig is NULL, then the maximum size of the output buffer is written to the siglen parameter. If sig is not NULL ,then before the call the siglen parameter should contain the length of the sig buffer, if the call is successful ,the signature is written to sig and the amount of data written to siglen."
0,0,"Its return value is identical to verify_callback_APIParam_1, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set",,,null,"Its return value is identical to verify_callback_APIParam_1, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set","If no verify_callback is specified, the default callback will be used. Its return value is identical to verify_callback_APIParam_1, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set."
0,0,A negative return value will suspend the handshake and the handshake function will return immediately,,,null,A negative return value will suspend the handshake and the handshake function will return immediately,"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
0,0,CMS_sign_receipt creates and returns a CMS signed receipt structure,,,null,CMS_sign_receipt() creates and returns a CMS signed receipt structure,"CMS_sign_receipt() creates and returns a CMS signed receipt structure. si is the CMS_SignerInfo structure containing the signed receipt request. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain)."
0,0,Normal server sanity checks are performed on any certificates set by the callback,,,null,Normal server sanity checks are performed on any certificates set by the callback,Normal server sanity checks are performed on any certificates set by the callback. So if an EC chain is set for a curve the client does not support an EC chain will not be used.
0,0,SSL_load_client_CA_file reads certificates from file and returns a STACK_OF with the subject names found,,,null,SSL_load_client_CA_file() reads certificates from file and returns a STACK_OF(X509_NAME) with the subject names found,SSL_load_client_CA_file() reads certificates from file and returns a STACK_OF(X509_NAME) with the subject names found.
0,0,"SSL_CTX_set_cert_cb and SSL_set_cert_cb sets the cert_cb callback , arg value is pointer which is passed to the application callback",,,null,"SSL_CTX_set_cert_cb() and SSL_set_cert_cb() sets the cert_cb() callback, arg value is pointer which is passed to the application callback","SSL_CTX_set_cert_cb() and SSL_set_cert_cb() sets the cert_cb() callback, arg value is pointer which is passed to the application callback."
0,0,The callback can inspect the passed ssl structure and set or clear any appropriate certificates,,,null,The callback can then inspect the passed ssl structure and set or clear any appropriate certificates,"cert_cb() is the application defined callback. It is called before a certificate will be used by a client or server. The callback can then inspect the passed ssl structure and set or clear any appropriate certificates. If the callback is successful, it MUST return 1 even if no certificates have been set. A zero is returned on error which will abort the handshake with a fatal internal error alert. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of cert_cb(). It is the job of the cert_cb() to store information about the state of the last call, if required to continue."
0,0,si is the CMS_SignerInfo structure containing the signed receipt request,,,null,si is the CMS_SignerInfo structure containing the signed receipt request,"CMS_sign_receipt() creates and returns a CMS signed receipt structure. si is the CMS_SignerInfo structure containing the signed receipt request. signcert is the certificate to sign with, pkey is the corresponding private key. certs is an optional additional set of certificates to include in the CMS structure (for example any intermediate CAs in the chain)."
0,0,The certificate callback functionality supercedes the functionality provided by the old client certificate callback interface,,,null,The certificate callback functionality supercedes the (largely broken) functionality provided by the old client certificate callback interface,The certificate callback functionality supercedes the (largely broken) functionality provided by the old client certificate callback interface. The certificate callback functionality is always called even is a certificate is already set so the callback can modify or delete the existing certificate.
0,0,"The implementations use the following macros which , depending on the architecture , may use `` long long '' C operations or inline assembler",,,null,"The implementations use the following macros which, depending on the architecture, may use ""long long"" C operations or inline assembler","The implementations use the following macros which, depending on the architecture, may use ""long long"" C operations or inline assembler. The implementations are defined in bn_lcl.h."
0,0,the BN_CTX structure is used,,,null,", the BN_CTX structure is used","Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables during their execution. Since dynamic memory allocation to create bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX structure is used. This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s, see BN_CTX_start(3) ."
0,0,"BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 is a pre-allocated BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 , or NULL",,,null,"BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 is a pre-allocated BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 (to save the overhead of allocating and freeing the structure in a loop), or NULL","If BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_GENCB_call(cb, 1, j) is called after the j-th iteration (j = 0, 1, ...). BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 is a pre-allocated BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 (to save the overhead of allocating and freeing the structure in a loop), or NULL."
0,0,The EVP_PKEY_keygen_init function initializes a public key algorithm context using key pkey for a key genration operation,,,null,The EVP_PKEY_keygen_init() function initializes a public key algorithm context using key pkey for a key genration operation,The EVP_PKEY_keygen_init() function initializes a public key algorithm context using key pkey for a key genration operation.
0,0,Both BN_is_prime_ex and BN_is_prime_fasttest_ex perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations,,,null,Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations,"Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations. If nchecks == BN_prime_checks, a number of iterations is used that yields a false positive rate of at most 2^-64 for random input. The error rate depends on the size of the prime and goes down for bigger primes. The rate is 2^-80 starting at 308 bits, 2^-112 at 852 bits, 2^-128 at 1080 bits, 2^-192 at 3747 bits and 2^-256 at 6394 bits."
0,0,"It was empirically found that timings of references to primary memory are subject to irregular , apparently non-deterministic variations",,,null,"It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations","It was empirically found that timings of references to primary memory are subject to irregular, apparently non-deterministic variations. The subroutines in question instrument these references for purposes of gathering entropy for random number generator. In order to make it bus-bound a 'flush cache line' instruction is used between probes. In addition probes are added to OPENSSL_instrument_bus2_APIParam_1 OPENSSL_instrument_bus_APIParam_1 elements in atomic or interlocked manner, which should contribute additional noise on multi-processor systems. This also means that vector[num] should be zeroed upon invocation (if you want to retrieve actual probe values)."
0,0,This is used by bn_set_low and bn_set_high to make bn_set_low_APIParam_1 bn_set_high_APIParam_1 a read-only bn_set_max_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 that contains the bn_set_low_APIParam_3 bn_set_high_APIParam_3 low or high words of bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2,,,null,This is used by bn_set_low() and bn_set_high() to make bn_set_low_APIParam_1 bn_set_high_APIParam_1 a read-only bn_set_max_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 that contains the bn_set_low_APIParam_3 bn_set_high_APIParam_3 low or high words of bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2,bn_set_max() makes bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2 a static number with a dmax of its current size. This is used by bn_set_low() and bn_set_high() to make bn_set_low_APIParam_1 bn_set_high_APIParam_1 a read-only bn_set_max_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 that contains the bn_set_low_APIParam_3 bn_set_high_APIParam_3 low or high words of bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2.
0,-1,The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len,,,null,The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len,"SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() are used by the client to set the list of protocols available to be negotiated. The SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 must be in protocol-list format, described below. The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len."
0,0,cb is the application defined callback,,,null,cb is the application defined callback,"cb is the application defined callback. The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen parameters are a vector in protocol-list format. The value of the SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen vector. The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb()."
0,0,"bn_check_top , bn_print , bn_dump and bn_set_max are defined as empty macros",,,If BN_DEBUG is not defined,"If BN_DEBUG is not defined, bn_check_top(), bn_print(), bn_dump() and bn_set_max() are defined as empty macros","If BN_DEBUG is not defined, bn_check_top(), bn_print(), bn_dump() and bn_set_max() are defined as empty macros."
0,0,Similarly BN_is_prime and BN_is_prime_fasttest are deprecated and can be compared to BN_is_prime_ex and BN_is_prime_fasttest_ex respectively,,,null,Similarly BN_is_prime and BN_is_prime_fasttest are deprecated and can be compared to BN_is_prime_ex and BN_is_prime_fasttest_ex respectively,"BN_generate_prime (deprecated) works in the same way as BN_generate_prime_ex but expects an old style callback function directly in the callback parameter, and an argument to pass to it in the cb_arg. Similarly BN_is_prime and BN_is_prime_fasttest are deprecated and can be compared to BN_is_prime_ex and BN_is_prime_fasttest_ex respectively."
0,0,The arg value is a pointer which is passed to the application callback,,,null,The arg value is a pointer which is passed to the application callback,"SSL_CTX_set_alpn_select_cb() sets the application callback cb used by a server to select which protocol to use for the incoming connection. When cb is NULL, ALPN is not used. The arg value is a pointer which is passed to the application callback."
0,0,The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb,,,null,The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb(),"cb is the application defined callback. The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen parameters are a vector in protocol-list format. The value of the SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen vector. The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb()."
0,0,It implements the standard protocol selection,,,null,It implements the standard protocol selection,"SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
0,0,Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables,,,during their execution,Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables during their execution,"Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables during their execution. Since dynamic memory allocation to create bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s is rather expensive when used in conjunction with repeated subroutine calls, the BN_CTX structure is used. This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s, see BN_CTX_start(3) ."
0,0,The bn_fix_top macro reduces a - > top to point to the most significant non-zero word plus one,,,when bn_fix_top_APIParam_1 has shrunk,The bn_fix_top() macro reduces a->top to point to the most significant non-zero word plus one when bn_fix_top_APIParam_1 has shrunk,The bn_fix_top() macro reduces a->top to point to the most significant non-zero word plus one when bn_fix_top_APIParam_1 has shrunk.
0,0,No match was found,,,null,No match was found,"No match was found. The first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2."
0,0,SSL_get0_alpn_selected returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len,,,null,SSL_get0_alpn_selected() returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len,SSL_get0_alpn_selected() returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len. It is not NUL-terminated. SSL_get0_alpn_selected_APIParam_2 is set to NULL and len is set to 0 if no protocol has been selected. SSL_get0_alpn_selected_APIParam_2 must not be freed.
0,0,SSL_select_next_proto is a helper function used to select protocols,,,null,SSL_select_next_proto() is a helper function used to select protocols,"SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
0,0,"The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0 , inlen parameters are a vector in protocol-list format",,,null,"The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen parameters are a vector in protocol-list format","cb is the application defined callback. The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen parameters are a vector in protocol-list format. The value of the SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2 vector should be set to the value of a single protocol selected from the SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0, inlen vector. The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb()."
0,0,SSL_CTX_set_alpn_protos and SSL_set_alpn_protos are used by the client to set the list of protocols available to be negotiated,,,null,SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() are used by the client to set the list of protocols available to be negotiated,"SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() are used by the client to set the list of protocols available to be negotiated. The SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 must be in protocol-list format, described below. The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len."
0,0,"Otherwise , the seed is used to generate them",,,null,"Otherwise, the seed is used to generate them","If DSA_generate_parameters_APIParam_2 is NULL or seed_len < 20, the primes will be generated at random. Otherwise, the seed is used to generate them. If the given seed does not yield a prime q, a new random seed is chosen."
0,0,i is the loop counter,,,null,i is the loop counter (starting at 0),"When a candidate for p has passed the test by trial division, BN_GENCB_call(cb, 1, -1) is called. While it is tested by the Miller-Rabin primality test, BN_GENCB_call(cb, 1, i) is called in the outer loop (once for each witness that confirms that the candidate may be prime). i is the loop counter (starting at 0)."
0,0,SSL_CTX_set_alpn_select_cb sets the application callback cb used by a server to select which protocol to use for the incoming connection,,,null,SSL_CTX_set_alpn_select_cb() sets the application callback cb used by a server to select which protocol to use for the incoming connection,"SSL_CTX_set_alpn_select_cb() sets the application callback cb used by a server to select which protocol to use for the incoming connection. When cb is NULL, ALPN is not used. The arg value is a pointer which is passed to the application callback."
0,0,an optimized implementation,,,if the factors have the same size,"BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL","BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL."
0,0,"BN_is_prime_fasttest_ex , primes",,,"when called with do_trial_division == 1 , first attempts trial division by a number of small","BN_is_prime_fasttest_ex(), when called with do_trial_division == 1, first attempts trial division by a number of small primes; if no divisors are found by this test and BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_GENCB_call(cb, 1, -1) is called","BN_is_prime_fasttest_ex(), when called with do_trial_division == 1, first attempts trial division by a number of small primes; if no divisors are found by this test and BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is not NULL, BN_GENCB_call(cb, 1, -1) is called. If do_trial_division == 0, this test is skipped."
0,0,ALPN is not used,,,When cb is NULL,"When cb is NULL, ALPN is not used","SSL_CTX_set_alpn_select_cb() sets the application callback cb used by a server to select which protocol to use for the incoming connection. When cb is NULL, ALPN is not used. The arg value is a pointer which is passed to the application callback."
0,0,SSL_CTX_clear_chain_certs clears any existing chain associated with the current certificate of SSL_CTX_clear_chain_certs_APIParam_1,,,null,SSL_CTX_clear_chain_certs() clears any existing chain associated with the current certificate of SSL_CTX_clear_chain_certs_APIParam_1,SSL_CTX_clear_chain_certs() clears any existing chain associated with the current certificate of SSL_CTX_clear_chain_certs_APIParam_1. (This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL).
0,0,The macros BN_set_flags and BN_get_flags exist to enable or fetch flag bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3,,,null,"The macros BN_set_flags(b,n) and BN_get_flags(b,n) exist to enable or fetch flag(s) bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3","flags is a bit field of flags which are defined in openssl/bn.h. The flags begin with BN_FLG_. The macros BN_set_flags(b,n) and BN_get_flags(b,n) exist to enable or fetch flag(s) bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3."
0,0,it records duration of periods,,,when probe values appeared deterministic,"OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value, ie in a way it records duration of periods when probe values appeared deterministic","OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value, ie in a way it records duration of periods when probe values appeared deterministic. The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector[num], with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning ""as many as it takes."""
0,0,bn_mul_comba8 is used,,,"if they are 8 words long , bn_mul_recursive if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size , and bn_mul_part_recursive for others that are larger than BN_MULL_SIZE_NORMAL","BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL","BN_mul() calls bn_mul_normal(), or an optimized implementation if the factors have the same size: bn_mul_comba8() is used if they are 8 words long, bn_mul_recursive() if they are larger than BN_MULL_SIZE_NORMAL and the size is an exact multiple of the word size, and bn_mul_part_recursive() for others that are larger than BN_MULL_SIZE_NORMAL."
0,0,the prime will fulfill the condition p % BN_generate_prime_ex_APIParam_4 == rem,,,If BN_generate_prime_ex_APIParam_4 is not NULL,"If BN_generate_prime_ex_APIParam_4 is not NULL , the prime will fulfill the condition p % BN_generate_prime_ex_APIParam_4 == rem","If BN_generate_prime_ex_APIParam_4 is not NULL, the prime will fulfill the condition p % BN_generate_prime_ex_APIParam_4 == rem (p % BN_generate_prime_ex_APIParam_4 == 1 if rem == NULL) in order to suit a given generator."
0,0,"The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector -LSB- num -RSB- , with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning `` as many as it takes . ''",,,null,"The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector[num], with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning ""as many as it takes.""","OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value, ie in a way it records duration of periods when probe values appeared deterministic. The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector[num], with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning ""as many as it takes."""
0,0,"The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2",,,null,"The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2","SSL_select_next_proto() is a helper function used to select protocols. It implements the standard protocol selection. It is expected that this function is called from the application callback cb. The protocol data in server, server_len and client, client_len must be in the protocol-list format described below. The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. The SSL_select_next_proto_APIParam_1 value will point into either server or client, so it should be copied immediately. If no match is found, the first item in client, client_len is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2. This function can also be used in the NPN callback."
0,0,"If the negotiated ciphersuite is anonymous ,2 is returned and the current certificate is unchanged",,,null,"If the negotiated ciphersuite is anonymous (and thus no certificate will be sent) ,2 is returned and the current certificate is unchanged","SSL_set_current_cert() also supports the option SSL_CERT_SET_SERVER. If SSL_set_current_cert_APIParam_1 is a server and has sent a certificate to a connected client ,this option sets that certificate to the current certificate and returns 1. If the negotiated ciphersuite is anonymous (and thus no certificate will be sent) ,2 is returned and the current certificate is unchanged. If SSL_set_current_cert_APIParam_1 is not a server or a certificate has not been sent, 0 is returned and the current certificate is unchanged."
0,0,Applications can issue non fatal warnings when checking chains by setting the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS and checking the return value,,,null,Applications can issue non fatal warnings when checking chains by setting the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS and checking the return value,Applications can issue non fatal warnings when checking chains by setting the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS and checking the return value.
0,0,SSL_CTX_set_current_cert changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument,,,null,SSL_CTX_set_current_cert() changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument,SSL_CTX_set_current_cert() changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument. Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate. These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure.
0,0,The CMS_set1_eContentType_APIParam_2 values returned can be converted to an integer NID value using OBJ_obj2nid,,,null,The CMS_set1_eContentType_APIParam_2 values returned can be converted to an integer NID value using OBJ_obj2nid(),The CMS_set1_eContentType_APIParam_2 values returned can be converted to an integer NID value using OBJ_obj2nid(). For the currently supported content types the following values are returned:
0,0,It is an error to return a value greater than max_psk_len,,,null,It is an error to return a value greater than max_psk_len,PSK identity was found and the server callback has provided the PSK successfully in parameter psk. Return value is the length of psk in bytes. It is an error to return a value greater than max_psk_len.
0,0,"If the underlying BIO is blocking, SSL_shutdown will only return once the handshake step has been finished or an error occurred",,,null,"If the underlying BIO is blocking, SSL_shutdown() will only return once the handshake step has been finished or an error occurred","If the underlying BIO is blocking, SSL_shutdown() will only return once the handshake step has been finished or an error occurred."
0,0,CMS_encrypt creates and returns a CMS EnvelopedData structure,,,null,CMS_encrypt() creates and returns a CMS EnvelopedData structure,CMS_encrypt() creates and returns a CMS EnvelopedData structure. certs is a list of recipient certificates. in is the content to be encrypted. cipher is the symmetric cipher to use. flags is an optional set of flags.
0,0,"Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned",,,null,"Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned","For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
0,0,ASN1_STRING_data returns an internal pointer to the data of ASN1_STRING_data_APIParam_1,,,null,ASN1_STRING_data() returns an internal pointer to the data of ASN1_STRING_data_APIParam_1,"ASN1_STRING_data() returns an internal pointer to the data of ASN1_STRING_data_APIParam_1. Since this is an internal pointer, it should not be freed or modified in any way."
0,0,"ASN1_STRING_type returns the type of ASN1_STRING_type_APIParam_1, using standard constants such as V_ASN1_OCTET_STRING",,,null,"ASN1_STRING_type() returns the type of ASN1_STRING_type_APIParam_1, using standard constants such as V_ASN1_OCTET_STRING","ASN1_STRING_type() returns the type of ASN1_STRING_type_APIParam_1, using standard constants such as V_ASN1_OCTET_STRING."
0,0,a partial CMS_ContentInfo structure is returned to which additional recipients and attributes can be added before finalization,,,If the CMS_PARTIAL flag is set,"If the CMS_PARTIAL flag is set ,a partial CMS_ContentInfo structure is returned to which additional recipients and attributes can be added before finalization","If the CMS_PARTIAL flag is set ,a partial CMS_ContentInfo structure is returned to which additional recipients and attributes can be added before finalization."
0,0,DES_ecb_encrypt does not return a value,,,null,DES_ecb_encrypt() does not return a value,"DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,"If the CMS_STREAM flag is set ,a partial CMS_ContentInfo structure is returned suitable for streaming I/O",,,null,"If the CMS_STREAM flag is set ,a partial CMS_ContentInfo structure is returned suitable for streaming I/O: no data is read from the BIO in","If the CMS_STREAM flag is set ,a partial CMS_ContentInfo structure is returned suitable for streaming I/O: no data is read from the BIO in."
0,0,These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure,,,null,These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure,SSL_CTX_set_current_cert() changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument. Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate. These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure.
0,0,CMS_set1_eContentType sets the embedded content type of a CMS_ContentInfo structure,,,null,CMS_set1_eContentType() sets the embedded content type of a CMS_ContentInfo structure,"CMS_set1_eContentType() sets the embedded content type of a CMS_ContentInfo structure. It should be called with CMS functions with the CMS_PARTIAL flag and before the structure is finalised, otherwise the results are undefined."
0,0,The callback is set using functions SSL_CTX_set_psk_server_callback or SSL_set_psk_server_callback,,,null,The callback is set using functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(),"A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client. The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase. The callback is set using functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(). The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1, NULL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored."
0,0,Provision of a context is optional,,,null,Provision of a context is optional,"For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
0,0,Return value is the length of psk in bytes,,,null,Return value is the length of psk in bytes,PSK identity was found and the server callback has provided the PSK successfully in parameter psk. Return value is the length of psk in bytes. It is an error to return a value greater than max_psk_len.
0,0,This is the last certificate loaded or selected on the corresponding SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 structure,,,null,This is the last certificate loaded or selected on the corresponding SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 structure,Each of these functions operates on the current end entity (ie server or client) certificate. This is the last certificate loaded or selected on the corresponding SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 structure.
0,0,PSK identity was found and the server callback has provided the PSK successfully in parameter psk,,,null,PSK identity was found and the server callback has provided the PSK successfully in parameter psk,PSK identity was found and the server callback has provided the PSK successfully in parameter psk. Return value is the length of psk in bytes. It is an error to return a value greater than max_psk_len.
0,0,"For a given SSL connection SSL_export_keying_material_APIParam_1 , SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2",,,null,"For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2","For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
0,0,SSL_CTX_set0_chain and SSL_CTX_set1_chain set the certificate chain associated with the current certificate of SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 to sk,,,null,SSL_CTX_set0_chain() and SSL_CTX_set1_chain() set the certificate chain associated with the current certificate of SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 to sk,SSL_CTX_set0_chain() and SSL_CTX_set1_chain() set the certificate chain associated with the current certificate of SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 to sk.
0,0,an application can add any set of certificates using SSL_CTX_use_certificate_chain_file call SSL_CTX_build_cert_chain with the option SSL_BUILD_CHAIN_FLAG_CHECK to check and reorder them,,,null,For example an application can add any set of certificates using SSL_CTX_use_certificate_chain_file() then call SSL_CTX_build_cert_chain() with the option SSL_BUILD_CHAIN_FLAG_CHECK to check and reorder them,For example an application can add any set of certificates using SSL_CTX_use_certificate_chain_file() then call SSL_CTX_build_cert_chain() with the option SSL_BUILD_CHAIN_FLAG_CHECK to check and reorder them.
0,0,Alternatively labels beginning with `` EXPERIMENTAL '' are permitted by the standard to be used without registration,,,null,"Alternatively labels beginning with ""EXPERIMENTAL"" are permitted by the standard to be used without registration","An application specific label should be provided in the location pointed to by label and should be llen bytes long. Typically this will be a value from the IANA Exporter Label Registry ( https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels ). Alternatively labels beginning with ""EXPERIMENTAL"" are permitted by the standard to be used without registration."
0,0,pconf could be NULL,,,if there is no embedded content,*pconf could be NULL if there is no embedded content,"*pconf could be NULL if there is no embedded content. Applications can access, modify or create the embedded content in a CMS_get0_type_APIParam_1 CMS_set1_eContentType_APIParam_1 CMS_get0_content_APIParam_1 CMS_get0_eContentType_APIParam_1 structure using this function. Applications usually will not need to modify the embedded content as it is normally set by higher level functions."
0,0,the serverinfo extension will be loaded into the last certificate installed,,,If more than one certificate is installed using SSL_CTX_use_certificate,"If more than one certificate (RSA/DSA) is installed using SSL_CTX_use_certificate(), the serverinfo extension will be loaded into the last certificate installed","If more than one certificate (RSA/DSA) is installed using SSL_CTX_use_certificate(), the serverinfo extension will be loaded into the last certificate installed. If eg the last item was a RSA certificate, the loaded serverinfo extension data will be loaded for that certificate. To use the serverinfo extension for multiple certificates, SSL_CTX_use_serverinfo() needs to be called multiple times, once after each time a certificate is loaded."
0,0,the accept can be freed using BIO_free,,,If no further connections will be accepted,"If no further connections will be accepted, the accept can be freed using BIO_free()","After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections. If no further connections will be accepted, the accept can be freed using BIO_free()."
0,0,once to compute the signature in CMS_sign and once to output the S/MIME message,,,null,"If cleartext signing is being used and CMS_STREAM not set ,then the data must be read twice: once to compute the signature in CMS_sign() and once to output the S/MIME message","If cleartext signing is being used and CMS_STREAM not set ,then the data must be read twice: once to compute the signature in CMS_sign() and once to output the S/MIME message."
0,0,the loaded serverinfo extension data will be loaded for that certificate,,,If eg the last item was a RSA certificate,"If eg the last item was a RSA certificate, the loaded serverinfo extension data will be loaded for that certificate","If more than one certificate (RSA/DSA) is installed using SSL_CTX_use_certificate(), the serverinfo extension will be loaded into the last certificate installed. If eg the last item was a RSA certificate, the loaded serverinfo extension data will be loaded for that certificate. To use the serverinfo extension for multiple certificates, SSL_CTX_use_serverinfo() needs to be called multiple times, once after each time a certificate is loaded."
0,0,the values of context and contextlen are ignored,,,If use_context is 0,"If use_context is 0, then the values of context and contextlen are ignored","For a given SSL connection SSL_export_keying_material_APIParam_1, SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2. The application specific context should be supplied in the location pointed to by context and should be contextlen bytes long. Provision of a context is optional. If the context should be omitted entirely then use_context should be set to 0. Otherwise it should be any other value. If use_context is 0, then the values of context and contextlen are ignored. Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned."
0,0,"MIME headers for type text/plain are added to the content , this only makes sense if CMS_DETACHED is also set",,,If the CMS_TEXT flag is set,"If the CMS_TEXT flag is set ,MIME headers for type text/plain are added to the content, this only makes sense if CMS_DETACHED is also set","If the CMS_TEXT flag is set ,MIME headers for type text/plain are added to the content, this only makes sense if CMS_DETACHED is also set."
0,0,"The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1 , NULL-terminated PSK identity sent by the client in parameter identity , and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored",,,null,"The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1, NULL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored","A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client. The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase. The callback is set using functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(). The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1, NULL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored."
0,0,The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used,,,during the connection setup phase,The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase,"A server application must provide a callback function which is called when the server receives the ClientKeyExchange message from the client. The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used during the connection setup phase. The callback is set using functions SSL_CTX_set_psk_server_callback() or SSL_set_psk_server_callback(). The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1, NULL-terminated PSK identity sent by the client in parameter identity, and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored."
0,0,the chain store or the verify store,,,if the chain store is not set,SSL_CTX_build_cert_chain() builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses the chain store or the verify store if the chain store is not set,"SSL_CTX_build_cert_chain() builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses the chain store or the verify store if the chain store is not set. If the function is successful the built chain will replace any existing chain. The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs, SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain, SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain (effectively sanity checking and rearranging all existing chain certificates if necessary), the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors during verification: if flag SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is also set verification errors are cleared from the error queue."
0,0,SSL_CTX_build_cert_chain builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses,,,null,SSL_CTX_build_cert_chain() builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses the chain store or the verify store if the chain store is not set,"SSL_CTX_build_cert_chain() builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses the chain store or the verify store if the chain store is not set. If the function is successful the built chain will replace any existing chain. The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs, SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain, SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain (effectively sanity checking and rearranging all existing chain certificates if necessary), the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors during verification: if flag SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is also set verification errors are cleared from the error queue."
0,0,"cleartext signing will be used , this option only makes sense for SignedData where CMS_DETACHED is also set when CMS_sign is called",,,If CMS_DETACHED is set,"If CMS_DETACHED is set, then cleartext signing will be used, this option only makes sense for SignedData where CMS_DETACHED is also set when CMS_sign() is called","If CMS_DETACHED is set, then cleartext signing will be used, this option only makes sense for SignedData where CMS_DETACHED is also set when CMS_sign() is called."
0,0,There are two phases to the use of DES encryption,,,null,There are two phases to the use of DES encryption,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,0,Input and output may overlap,,,null,Input and output may overlap,"DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,The least significant bit in each byte is the parity bit,,,null,The least significant bit in each byte is the parity bit,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,0,DES_ncbc_encrypt encrypts/decrypts using the cipher-block-chaining mode of DES,,,null,DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES,"DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES. If the encrypt argument is non-zero, the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument, using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, and initialization vector provided by the ivec argument. If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled. The output is always an integral multiple of eight bytes."
0,0,Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure,,,null,Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure,Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure. Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents. ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time.
0,0,"The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs , SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain , SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain , the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors",,,during verification,"The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs, SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain, SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain (effectively sanity checking and rearranging all existing chain certificates if necessary), the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors during verification: if flag SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is also set verification errors are cleared from the error queue","SSL_CTX_build_cert_chain() builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses the chain store or the verify store if the chain store is not set. If the function is successful the built chain will replace any existing chain. The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs, SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain, SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain (effectively sanity checking and rearranging all existing chain certificates if necessary), the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors during verification: if flag SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is also set verification errors are cleared from the error queue."
0,0,The data being encrypted is included in the CMS_ContentInfo structure,,,unless CMS_DETACHED is set in which case it is omitted,"The data being encrypted is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted","The data being encrypted is included in the CMS_ContentInfo structure, unless CMS_DETACHED is set in which case it is omitted. This is rarely used in practice and is not supported by SMIME_write_CMS()."
0,0,the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2,,,If encrypt is zero,"If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext)","DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,This mode is used by SSL,,,null,This mode is used by SSL,"DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption with three keys. This means that each DES operation inside the CBC mode is an C=E(ks3,D(ks2,E(ks1,M))). This mode is used by SSL."
0,0,DES_xcbc_encrypt is RSA 's DESX mode of DES,,,null,DES_xcbc_encrypt() is RSA's DESX mode of DES,"DES_xcbc_encrypt() is RSA's DESX mode of DES. It uses inw and outw to 'whiten' the encryption. inw and outw are secret (unlike the iv) and are as such, part of the key. So the key is sort of 24 bytes. This is much better than CBC DES."
0,0,DES_ofb_encrypt encrypts using output feedback mode,,,null,DES_ofb_encrypt() encrypts using output feedback mode,"DES_ofb_encrypt() encrypts using output feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
0,0,DES_ecb3_encrypt encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode,,,null,DES_ecb3_encrypt() encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode,"DES_ecb3_encrypt() encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode. This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3. This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key."
0,0,it is used to speed the encryption process,,,null,The key schedule is an expanded form of the key; it is used to speed the encryption process,"There are two phases to the use of DES encryption. The first is the generation of a DES_key_schedule from a key, the second is the actual encryption. A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1. This type is consists of 8 bytes with odd parity. The least significant bit in each byte is the parity bit. The key schedule is an expanded form of the key; it is used to speed the encryption process."
0,0,It uses inw and outw to ` whiten ' the encryption,,,null,It uses inw and outw to 'whiten' the encryption,"DES_xcbc_encrypt() is RSA's DESX mode of DES. It uses inw and outw to 'whiten' the encryption. inw and outw are secret (unlike the iv) and are as such, part of the key. So the key is sort of 24 bytes. This is much better than CBC DES."
0,0,DES_ede3_cbc_encrypt implements outer triple CBC DES encryption with three keys,,,null,DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption with three keys,"DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption with three keys. This means that each DES operation inside the CBC mode is an C=E(ks3,D(ks2,E(ks1,M))). This mode is used by SSL."
0,0,It returns a 4 byte checksum from the input bytes,,,null,It returns a 4 byte checksum from the input bytes,"DES_quad_cksum() is a Kerberos v4 function. It returns a 4 byte checksum from the input bytes. The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times. If DES_quad_cksum_APIParam_2 is non-NULL, the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2."
0,0,These functions are available for compatibility,,,null,These functions are available for compatibility; it is recommended to use a function that does not depend on a global variable,"DES_set_key() works like DES_set_key_checked() if the DES_check_key flag is non-zero, otherwise like DES_set_key_unchecked(). These functions are available for compatibility; it is recommended to use a function that does not depend on a global variable."
0,0,This form of Triple-DES is used by the RSAREF library,,,null,This form of Triple-DES is used by the RSAREF library,"The DES_ede2_cbc_encrypt() macro implements two-key Triple-DES by reusing ks1 for the final encryption. C=E(ks1,D(ks2,E(ks1,M))). This form of Triple-DES is used by the RSAREF library."
0,0,The macro DES_ecb2_encrypt is provided to perform two-key Triple-DES encryption by using ks1 for the final encryption,,,null,The macro DES_ecb2_encrypt() is provided to perform two-key Triple-DES encryption by using ks1 for the final encryption,The macro DES_ecb2_encrypt() is provided to perform two-key Triple-DES encryption by using ks1 for the final encryption.
0,0,DES_enc_write writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2,,,null,DES_enc_write() writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2,"DES_enc_write() writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2. The data is encrypted via pcbc_encrypt (default) using DES_enc_read_APIParam_4 for the key and iv as a starting vector. The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes (in network byte order) containing the length of the following encrypted data. The encrypted data then follows, padded with random data out to a multiple of 8 bytes."
0,0,The DES_ede2_cbc_encrypt macro implements two-key Triple-DES by reusing ks1 for the final encryption,,,null,The DES_ede2_cbc_encrypt() macro implements two-key Triple-DES by reusing ks1 for the final encryption,"The DES_ede2_cbc_encrypt() macro implements two-key Triple-DES by reusing ks1 for the final encryption. C=E(ks1,D(ks2,E(ks1,M))). This form of Triple-DES is used by the RSAREF library."
0,0,"inw and outw are secret and are as such , part of the key",,,null,"inw and outw are secret (unlike the iv) and are as such, part of the key","DES_xcbc_encrypt() is RSA's DESX mode of DES. It uses inw and outw to 'whiten' the encryption. inw and outw are secret (unlike the iv) and are as such, part of the key. So the key is sort of 24 bytes. This is much better than CBC DES."
0,0,"This involves encrypting the input with ks1 , decrypting with the key schedule ks2 , and encrypting with ks3",,,null,"This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3","DES_ecb3_encrypt() encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode. This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3. This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key."
0,0,This means that each DES operation inside the CBC mode is an C = E,,,null,"This means that each DES operation inside the CBC mode is an C=E(ks3,D(ks2,E(ks1,M)))","DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption with three keys. This means that each DES operation inside the CBC mode is an C=E(ks3,D(ks2,E(ks1,M))). This mode is used by SSL."
0,0,This method takes an array of characters as input and outputs and array of characters,,,null,This method takes an array of characters as input and outputs and array of characters,"DES_cfb_encrypt() encrypt/decrypts using cipher feedback mode. This method takes an array of characters as input and outputs and array of characters. This method does not require any padding to 8 character groups. Note: the ivec variable is changed and the new changed value needs to be passed to the next call to this function. Since this function runs a complete DES ECB encryption per numbits, this function is only suggested for use when sending small numbers of characters."
0,0,DES_ecb_encrypt is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book mode,,,null,DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode,"DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,Other than the use of DER as opposed to PEM these functions are identical to the corresponding PEM function as described in the pem manual page,,,null,Other than the use of DER as opposed to PEM these functions are identical to the corresponding PEM function as described in the pem(3) manual page,Other than the use of DER as opposed to PEM these functions are identical to the corresponding PEM function as described in the pem(3) manual page.
0,0,ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time,,,null,ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time,Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure. Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents. ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time.
0,0,The data is encrypted via pcbc_encrypt using DES_enc_read_APIParam_4 for the key and iv as a starting vector,,,null,The data is encrypted via pcbc_encrypt (default) using DES_enc_read_APIParam_4 for the key and iv as a starting vector,"DES_enc_write() writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2. The data is encrypted via pcbc_encrypt (default) using DES_enc_read_APIParam_4 for the key and iv as a starting vector. The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes (in network byte order) containing the length of the following encrypted data. The encrypted data then follows, padded with random data out to a multiple of 8 bytes."
0,0,DES_enc_read is used to read DES_enc_read_APIParam_3 DES_enc_write_APIParam_3 bytes from file descriptor DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 into buffer DES_enc_read_APIParam_2 DES_enc_write_APIParam_2,,,null,DES_enc_read() is used to read DES_enc_read_APIParam_3 DES_enc_write_APIParam_3 bytes from file descriptor DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 into buffer DES_enc_read_APIParam_2 DES_enc_write_APIParam_2,DES_enc_read() is used to read DES_enc_read_APIParam_3 DES_enc_write_APIParam_3 bytes from file descriptor DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 into buffer DES_enc_read_APIParam_2 DES_enc_write_APIParam_2. The data being read from DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 is assumed to have come from DES_enc_write() and is decrypted using DES_enc_read_APIParam_4 for the key schedule and iv for the initial vector.
0,0,"It always transforms the input data , pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 , into the output data , pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument",,,null,"It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument","DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,RAND_set_default_method makes RAND_set_rand_method_APIParam_1 the method for PRNG use,,,null,RAND_set_default_method() makes RAND_set_rand_method_APIParam_1 the method for PRNG use,"RAND_set_default_method() makes RAND_set_rand_method_APIParam_1 the method for PRNG use. NB: This is true only whilst no ENGINE has been set as a default for RAND, so this function is no longer recommended."
0,0,cms is the CMS_ContentInfo structure to verify,,,null,cms is the CMS_ContentInfo structure to verify,CMS_verify() verifies a CMS SignedData structure. cms is the CMS_ContentInfo structure to verify. certs is a set of certificates in which to search for the signing certificate(s). store is a trusted certificate store used for chain verification. indata is the detached content if the content is not present in cms. The content is written to out if it is not NULL.
0,0,CMS_verify verifies a CMS SignedData structure,,,null,CMS_verify() verifies a CMS SignedData structure,CMS_verify() verifies a CMS SignedData structure. cms is the CMS_ContentInfo structure to verify. certs is a set of certificates in which to search for the signing certificate(s). store is a trusted certificate store used for chain verification. indata is the detached content if the content is not present in cms. The content is written to out if it is not NULL.
0,0,DES_rw_mode is used to specify the encryption mode to use with DES_enc_read and DES_end_write,,,null,DES_rw_mode is used to specify the encryption mode to use with DES_enc_read() and DES_end_write(),"DES_rw_mode is used to specify the encryption mode to use with DES_enc_read() and DES_end_write(). If set to DES_PCBC_MODE (the default), DES_pcbc_encrypt is used. If set to DES_CBC_MODE DES_cbc_encrypt is used."
0,0,Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents,,,null,Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents,Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure. Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents. ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time.
0,0,store is a trusted certificate store used for chain verification,,,null,store is a trusted certificate store used for chain verification,CMS_verify() verifies a CMS SignedData structure. cms is the CMS_ContentInfo structure to verify. certs is a set of certificates in which to search for the signing certificate(s). store is a trusted certificate store used for chain verification. indata is the detached content if the content is not present in cms. The content is written to out if it is not NULL.
0,0,"By modifying the method , alternative implementations such as hardware RNGs may be used",,,null,"By modifying the method, alternative implementations such as hardware RNGs may be used","A RAND_set_rand_method_APIParam_1 specifies the functions that OpenSSL uses for random number generation. By modifying the method, alternative implementations such as hardware RNGs may be used. IMPORTANT: See the NOTES section for important information about how these RAND API functions are affected by the use of ENGINE API calls."
0,0,"BIO_gets, if its size parameter is large enough finishes the digest calculation and returns the digest value",,,null,"BIO_gets(), if its size parameter is large enough finishes the digest calculation and returns the digest value","BIO_gets(), if its size parameter is large enough finishes the digest calculation and returns the digest value. BIO_puts() is not supported."
0,0,certs is a set of certificates in which to search for the signing certificate,,,null,certs is a set of certificates in which to search for the signing certificate(s),CMS_verify() verifies a CMS SignedData structure. cms is the CMS_ContentInfo structure to verify. certs is a set of certificates in which to search for the signing certificate(s). store is a trusted certificate store used for chain verification. indata is the detached content if the content is not present in cms. The content is written to out if it is not NULL.
0,0,"As of version 0.9.7 , RAND_METHOD implementations are grouped together with other algorithmic APIs in ENGINE modules",,,null,"As of version 0.9.7, RAND_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in ENGINE modules","As of version 0.9.7, RAND_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in ENGINE modules. If a default ENGINE is specified for RAND functionality using an ENGINE API function, that will override any RAND defaults set using the RAND API (ie RAND_set_rand_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RAND and other cryptographic algorithms."
0,0,One application of CMS_NOINTERN is to only accept messages signed by a small number of certificates,,,null,One application of CMS_NOINTERN is to only accept messages signed by a small number of certificates,One application of CMS_NOINTERN is to only accept messages signed by a small number of certificates. The acceptable certificates would be passed in the certs parameter. In this case if the signer is not one of the certificates supplied in certs then the verify will fail because the signer cannot be found.
0,0,An example of this is demonstrated here,,,null,An example of this is demonstrated here (printing all hash table entries to a BIO that is provided by the caller):,"lh_<type>_doall_arg() is the same as lh_<type>_doall() except that func will be called with arg as the second argument and func should be of type LHASH_DOALL_ARG_FN_TYPE (a callback prototype that is passed both the table entry and an extra argument). As with lh_doall(), you can instead choose to declare your callback with a prototype matching the types you are dealing with and use the declare/implement macros to create compatible wrappers that cast variables before calling your type-specific callbacks. An example of this is demonstrated here (printing all hash table entries to a BIO that is provided by the caller):"
0,0,CMS_verify_receipt verifies a CMS signed receipt,,,null,CMS_verify_receipt() verifies a CMS signed receipt,CMS_verify_receipt() verifies a CMS signed receipt. rcms is the signed receipt to verify. ocms is the original SignedData structure containing the receipt request. certs is a set of certificates in which to search for the signing certificate. store is a trusted certificate store (used for chain verification).
0,0,the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2,,,If DES_quad_cksum_APIParam_2 is non-NULL,"If DES_quad_cksum_APIParam_2 is non-NULL, the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2","DES_quad_cksum() is a Kerberos v4 function. It returns a 4 byte checksum from the input bytes. The algorithm can be iterated over the input, depending on out_count, 1, 2, 3 or 4 times. If DES_quad_cksum_APIParam_2 is non-NULL, the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2."
0,0,lh _ <type> _ free frees the LHASH_OF -LRB- <type> structure lh_retrieve_APIParam_1,,,null,lh_<type>_free() frees the LHASH_OF(<type> structure lh_retrieve_APIParam_1,lh_<type>_free() frees the LHASH_OF(<type> structure lh_retrieve_APIParam_1. Allocated hash table entries will not be freed; consider using lh_<type>_doall() to deallocate any remaining entries in the hash table (see below).
0,0,SSL_free also calls the freeing procedures for indirectly affected items,,,if applicable,"SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1, the SSL_SESSION","SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1, the SSL_SESSION. Do not explicitly free these indirectly freed up items before or after calling SSL_free(), as trying to free things twice may lead to program failure."
0,0,These provide per-variable casts before calling the type-specific callbacks written by the application author,,,null,These provide per-variable casts before calling the type-specific callbacks written by the application author,"lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
0,0,rcms is the signed receipt to verify,,,null,rcms is the signed receipt to verify,CMS_verify_receipt() verifies a CMS signed receipt. rcms is the signed receipt to verify. ocms is the original SignedData structure containing the receipt request. certs is a set of certificates in which to search for the signing certificate. store is a trusted certificate store (used for chain verification).
0,0,The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field,,,null,The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field,"lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
0,0,store is a trusted certificate store,,,null,store is a trusted certificate store (used for chain verification),CMS_verify_receipt() verifies a CMS signed receipt. rcms is the signed receipt to verify. ocms is the original SignedData structure containing the receipt request. certs is a set of certificates in which to search for the signing certificate. store is a trusted certificate store (used for chain verification).
0,0,ocms is the original SignedData structure containing the receipt request,,,null,ocms is the original SignedData structure containing the receipt request,CMS_verify_receipt() verifies a CMS signed receipt. rcms is the signed receipt to verify. ocms is the original SignedData structure containing the receipt request. certs is a set of certificates in which to search for the signing certificate. store is a trusted certificate store (used for chain verification).
0,0,DES_pcbc_encrypt is used,,,If set to DES_PCBC_MODE,"If set to DES_PCBC_MODE (the default), DES_pcbc_encrypt is used","DES_rw_mode is used to specify the encryption mode to use with DES_enc_read() and DES_end_write(). If set to DES_PCBC_MODE (the default), DES_pcbc_encrypt is used. If set to DES_CBC_MODE DES_cbc_encrypt is used."
0,0,Allocated hash table entries will not be freed,,,null,Allocated hash table entries will not be freed; consider using lh_<type>_doall() to deallocate any remaining entries in the hash table (see below),lh_<type>_free() frees the LHASH_OF(<type> structure lh_retrieve_APIParam_1. Allocated hash table entries will not be freed; consider using lh_<type>_doall() to deallocate any remaining entries in the hash table (see below).
0,0,The certificates available via SSL_CTX_load_verify_locations_APIParam_2 and CApath are trusted,,,null,The certificates available via SSL_CTX_load_verify_locations_APIParam_2 and CApath are trusted,"SSL_CTX_load_verify_locations() specifies the locations for SSL_CTX_load_verify_locations_APIParam_1, at which CA certificates for verification purposes are located. The certificates available via SSL_CTX_load_verify_locations_APIParam_2 and CApath are trusted."
0,0,"the buffering BIO , the read and write BIOs , cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1 , the SSL_SESSION",,,null,"SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1, the SSL_SESSION","SSL_free() also calls the free()ing procedures for indirectly affected items, if applicable: the buffering BIO, the read and write BIOs, cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1, the SSL_SESSION. Do not explicitly free these indirectly freed up items before or after calling SSL_free(), as trying to free things twice may lead to program failure."
0,0,The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with < SSL_new | SSL_new >,,,null,The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with <SSL_new(3)|SSL_new(3)>,SSL_CTX_set_tmp_rsa_callback() sets the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used when a temporary/ephemeral RSA key is required to tmp_rsa_callback. The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with <SSL_new(3)|SSL_new(3)>. Already created SSL objects are not affected.
0,0,indata is the detached content,,,if the content is not present in cms,indata is the detached content if the content is not present in cms,CMS_verify() verifies a CMS SignedData structure. cms is the CMS_ContentInfo structure to verify. certs is a set of certificates in which to search for the signing certificate(s). store is a trusted certificate store used for chain verification. indata is the detached content if the content is not present in cms. The content is written to out if it is not NULL.
0,0,"One technique sometimes used with blocking sockets is to use a system call , poll or equivalent to determine and call read to read the data",,,when data is available,"One technique sometimes used with blocking sockets is to use a system call (such as select(), poll() or equivalent) to determine when data is available and then call read() to read the data","One technique sometimes used with blocking sockets is to use a system call (such as select(), poll() or equivalent) to determine when data is available and then call read() to read the data. The equivalent with BIOs (that is call select() on the underlying I/O structure and then call BIO_read() to read the data) should not be used because a single call to BIO_read() can cause several reads (and writes in the case of SSL BIOs) on the underlying I/O structure and may block as a result. Instead select() (or equivalent) should be combined with non blocking I/O so successive reads will request a retry instead of blocking."
0,0,"the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument , previously set via DES_set_key",,,If the encrypt argument is non-zero,"If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key","DES_ecb_encrypt() is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book (ECB) mode. It always transforms the input data, pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1, into the output data, pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument. If the encrypt argument is non-zero (DES_ENCRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (cleartext) is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (ciphertext) using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, previously set via DES_set_key. If encrypt is zero (DES_DECRYPT), the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 (now ciphertext) is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 (now cleartext). Input and output may overlap. DES_ecb_encrypt() does not return a value."
0,0,the last block is copied to a temporary area and zero filled,,,If the length argument is not an integral multiple of eight bytes,"If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled","DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES. If the encrypt argument is non-zero, the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument, using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, and initialization vector provided by the ivec argument. If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled. The output is always an integral multiple of eight bytes."
0,0,The is_export flag is set,,,when the ephemeral RSA key exchange is performed with an export cipher,"The is_export flag is set, when the ephemeral RSA key exchange is performed with an export cipher","The tmp_rsa_callback is called with the keylength needed and the is_export information. The is_export flag is set, when the ephemeral RSA key exchange is performed with an export cipher."
0,0,that will override any RAND defaults set using the RAND API,,,If a default ENGINE is specified for RAND functionality using an ENGINE API function,"If a default ENGINE is specified for RAND functionality using an ENGINE API function, that will override any RAND defaults set using the RAND API (ie RAND_set_rand_method())","As of version 0.9.7, RAND_METHOD implementations are grouped together with other algorithmic APIs (eg RSA_METHOD, EVP_CIPHER, etc) in ENGINE modules. If a default ENGINE is specified for RAND functionality using an ENGINE API function, that will override any RAND defaults set using the RAND API (ie RAND_set_rand_method()). For this reason, the ENGINE API is the recommended way to control default implementations for use in RAND and other cryptographic algorithms."
0,0,the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used,,,when a temporary/ephemeral RSA key is required to tmp_rsa_callback,SSL_CTX_set_tmp_rsa_callback() sets the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used when a temporary/ephemeral RSA key is required to tmp_rsa_callback,SSL_CTX_set_tmp_rsa_callback() sets the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used when a temporary/ephemeral RSA key is required to tmp_rsa_callback. The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with <SSL_new(3)|SSL_new(3)>. Already created SSL objects are not affected.
0,0,SSL_CTX_set_tmp_rsa_callback sets,,,null,SSL_CTX_set_tmp_rsa_callback() sets the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used when a temporary/ephemeral RSA key is required to tmp_rsa_callback,SSL_CTX_set_tmp_rsa_callback() sets the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used when a temporary/ephemeral RSA key is required to tmp_rsa_callback. The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with <SSL_new(3)|SSL_new(3)>. Already created SSL objects are not affected.
0,0,it is equivalent to just encryption using ECB mode,,,"if ks1 , ks2 and ks3 are the same","This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key","DES_ecb3_encrypt() encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode. This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3. This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key."
0,0,This routine greatly reduces the chances of brute force breaking of DES and has the advantage of and ks1 as the key,,,null,"This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key","DES_ecb3_encrypt() encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode. This involves encrypting the input with ks1, decrypting with the key schedule ks2, and then encrypting with ks3. This routine greatly reduces the chances of brute force breaking of DES and has the advantage of if ks1, ks2 and ks3 are the same, it is equivalent to just encryption using ECB mode and ks1 as the key."
0,0,"the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument , using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument , and initialization vector provided by the ivec argument",,,If the encrypt argument is non-zero,"If the encrypt argument is non-zero, the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument, using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, and initialization vector provided by the ivec argument","DES_ncbc_encrypt() encrypts/decrypts using the cipher-block-chaining (CBC) mode of DES. If the encrypt argument is non-zero, the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument, using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument, and initialization vector provided by the ivec argument. If the length argument is not an integral multiple of eight bytes, the last block is copied to a temporary area and zero filled. The output is always an integral multiple of eight bytes."
0,0,The files each contain one CA certificate,,,null,The files each contain one CA certificate,"If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
0,0,client_cert_cb is the application defined callback,,,null,client_cert_cb() is the application defined callback,"client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
0,0,"SSL_CTX_load_verify_locations specifies the locations for SSL_CTX_load_verify_locations_APIParam_1 , at which CA certificates for verification purposes are located",,,null,"SSL_CTX_load_verify_locations() specifies the locations for SSL_CTX_load_verify_locations_APIParam_1, at which CA certificates for verification purposes are located","SSL_CTX_load_verify_locations() specifies the locations for SSL_CTX_load_verify_locations_APIParam_1, at which CA certificates for verification purposes are located. The certificates available via SSL_CTX_load_verify_locations_APIParam_2 and CApath are trusted."
0,0,Sessions are generated within a certain context,,,null,Sessions are generated within a certain context,"Sessions are generated within a certain context. When exporting/importing sessions with i2d_SSL_SESSION/d2i_SSL_SESSION it would be possible, to re-import a session generated from another context (eg another application), which might lead to malfunctions. Therefore each application must set its own session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 which is used to distinguish the contexts and is stored in exported sessions. The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length, it is therefore possible to use eg the name of the application and/or the hostname and/or service name ..."
0,0,MD2_Update can be called repeatedly with chunks of the message to be hashed,,,null,MD2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at MD2_Update_APIParam_2),MD2_Update() can be called repeatedly with chunks of the message to be hashed (len bytes at MD2_Update_APIParam_2).
0,0,"The certificate will be installed into ssl , see the NOTES and BUGS sections",,,null,"The certificate will be installed into ssl, see the NOTES and BUGS sections","client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
0,0,The next call to the handshake function will again lead to the call of client_cert_cb,,,null,The next call to the handshake function will again lead to the call of client_cert_cb(),"client_cert_cb() is the application defined callback. If it wants to set a certificate, a certificate/private key combination must be set using the x509 and pkey arguments and ""1"" must be returned. The certificate will be installed into ssl, see the NOTES and BUGS sections. If no certificate should be set, ""0"" has to be returned and no certificate will be sent. A negative return value will suspend the handshake and the handshake function will return immediately. SSL_get_error(3) will return SSL_ERROR_WANT_X509_LOOKUP to indicate, that the handshake was suspended. The next call to the handshake function will again lead to the call of client_cert_cb(). It is the job of the client_cert_cb() to store information about the state of the last call, if required to continue."
0,0,The error is logged to the error stack,,,null,The error is logged to the error stack,The length sid_ctx_len of the session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 exceeded the maximum allowed length of SSL_MAX_SSL_SESSION_ID_LENGTH. The error is logged to the error stack.
0,0,If successful a pointer to the d2i_X509_APIParam_1 structure is returned,,,null,If successful a pointer to the d2i_X509_APIParam_1 structure is returned,"d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
0,0,"The search is performed in the ordering of the extension number , regardless of other properties of the certificates",,,null,"The search is performed in the ordering of the extension number, regardless of other properties of the certificates","If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
0,0,"If d2i_X509_APIParam_1 is not NULL, the returned structure is written to d2i_X509_APIParam_1",,,null,"If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1","d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
0,0,d2i_X509 attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2,,,null,d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2,"d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
0,0,An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated,,,null,An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated:,"lh_<type>_doall() will, for every entry in the hash table, call func with the data item as its parameter. For lh_<type>_doall() and lh_<type>_doall_arg(), function pointer casting should be avoided in the callbacks (see NOTE) - instead use the declare/implement macros to create type-checked wrappers that cast variables prior to calling your type-specific callbacks. An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated:"
0,0,SSL_CTX_set_session_id_context sets the context SSL_CTX_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_CTX_set_session_id_context_APIParam_1 object,,,null,SSL_CTX_set_session_id_context() sets the context SSL_CTX_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_CTX_set_session_id_context_APIParam_1 object,SSL_CTX_set_session_id_context() sets the context SSL_CTX_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_CTX_set_session_id_context_APIParam_1 object.
0,0,SSL_set_session_id_context sets the context SSL_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_set_session_id_context_APIParam_1 object,,,null,SSL_set_session_id_context() sets the context SSL_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_set_session_id_context_APIParam_1 object,SSL_set_session_id_context() sets the context SSL_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_set_session_id_context_APIParam_1 object.
0,0,The length sid_ctx_len of the session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 exceeded the maximum allowed length of SSL_MAX_SSL_SESSION_ID_LENGTH,,,null,The length sid_ctx_len of the session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 exceeded the maximum allowed length of SSL_MAX_SSL_SESSION_ID_LENGTH,The length sid_ctx_len of the session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 exceeded the maximum allowed length of SSL_MAX_SSL_SESSION_ID_LENGTH. The error is logged to the error stack.
0,0,The functions can also understand BER forms,,,null,The functions can also understand BER forms,The functions can also understand BER forms.
0,0,So i2d_X509 converts from internal to `` DER '',,,null,"So i2d_X509 converts from internal to ""DER""","The letters i2d_re_X509_tbs_APIParam_2 d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 in for example i2d_X509 stand for ""internal"" (that is an internal C structure) and ""DER"". So i2d_X509 converts from internal to ""DER"". The ""re"" in i2d_re_X509_tbs stands for ""re-encode"", and ensures that a fresh encoding is generated in case the object has been modified after creation (see the BUGS section)."
0,0,See the WARNINGS section for some common errors,,,null,See the WARNINGS section for some common errors,The ways that d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 are incremented after the operation can trap the unwary. See the WARNINGS section for some common errors.
0,0,the next certificate will be tried,,,If these data do not match,"If these data do not match, the next certificate will be tried","When looking up CA certificates, the OpenSSL library will first search the certificates in SSL_CTX_load_verify_locations_APIParam_2, then those in CApath. Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified. If these data do not match, the next certificate will be tried. If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure."
0,0,The TLS/SSL I/O operation completed,,,null,The TLS/SSL I/O operation completed,The TLS/SSL I/O operation completed. This result code is returned if and only if ret > 0.
0,0,The encoded data is in binary form and may contain embedded zeroes,,,null,The encoded data is in binary form and may contain embedded zeroes,The encoded data is in binary form and may contain embedded zeroes. Therefore any FILE pointers or BIOs should be opened in binary mode. Functions such as strlen() will not return the correct length of the encoded structure.
0,0,The TLS/SSL connection has been closed,,,null,The TLS/SSL connection has been closed,"The TLS/SSL connection has been closed. If the protocol version is SSL 3.0 or higher, this result code is returned only if a closure alert has occurred in the protocol, ie if the connection has been closed cleanly. Note that in this case SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed."
0,0,it points to a directory containing CA certificates in PEM format,,,If CApath is not NULL,"If CApath is not NULL, it points to a directory containing CA certificates in PEM format","If CApath is not NULL, it points to a directory containing CA certificates in PEM format. The files each contain one CA certificate. The files are looked up by the CA subject name hash value, which must hence be available. If more than one CA certificate with the same name hash value exist, the extension must be different (eg 9d66eef0.0, 9d66eef0.1 etc). The search is performed in the ordering of the extension number, regardless of other properties of the certificates. Use the c_rehash utility to create the necessary links."
0,0,Another trap to avoid is misuse of the xp argument to d2i_X509,,,null,Another trap to avoid is misuse of the xp argument to d2i_X509():,Another trap to avoid is misuse of the xp argument to d2i_X509():
0,0,"lh _ <type> _ new creates a new LHASH_OF -LRB- <type> structure to store arbitrary data entries , and provides the ` hash ' and ` compare ' callbacks to be used in organising the table 's entries",,,null,"lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries","lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
0,0,The OpenSSL error queue may contain more information on the error,,,null,The OpenSSL error queue may contain more information on the error,"Some non-recoverable, fatal I/O error occurred. The OpenSSL error queue may contain more information on the error. For socket I/O on Unix systems, consult errno for details. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called."
0,0,"For socket I/O on Unix systems , consult errno for details",,,null,"For socket I/O on Unix systems, consult errno for details","Some non-recoverable, fatal I/O error occurred. The OpenSSL error queue may contain more information on the error. For socket I/O on Unix systems, consult errno for details. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called."
0,0,Errors are silently ignored,,,null,Errors are silently ignored,"OPENSSL_config() configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1. If OPENSSL_config_APIParam_1 is NULL ,then the default section, openssl_conf, will be used. Errors are silently ignored. Multiple calls have no effect."
0,0,Files of type SSL_FILETYPE_PEM can contain more than one item,,,null,Files of type SSL_FILETYPE_PEM can contain more than one item,"When reading certificates and private keys from file, files of type SSL_FILETYPE_ASN1 (also known as DER, binary encoding) can only contain one certificate or private key, consequently SSL_CTX_use_certificate_chain_file() is only applicable to PEM formatting. Files of type SSL_FILETYPE_PEM can contain more than one item."
0,0,Also buf will no longer contain the pointer allocated by OPENSSL_malloc and the subsequent call to OPENSSL_free may well crash,,,null,Also buf will no longer contain the pointer allocated by OPENSSL_malloc() and the subsequent call to OPENSSL_free() may well crash,This code will result in buf apparently containing garbage because This code was incremented after the call to point after the data just written. Also buf will no longer contain the pointer allocated by OPENSSL_malloc() and the subsequent call to OPENSSL_free() may well crash.
0,0,These values are defined in the obj_mac.h header file,,,null,These values are defined in the obj_mac.h header file,"EC_METHOD_get_field_type identifies what type of field the EC_METHOD structure supports, which will be either F2^m or Fp. If the field type is Fp then the value NID_X9_62_prime_field is returned. If the field type is F2^m, then the value NID_X9_62_characteristic_two_field is returned. These values are defined in the obj_mac.h header file."
0,0,Multiple calls have no effect,,,null,Multiple calls have no effect,"OPENSSL_config() configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1. If OPENSSL_config_APIParam_1 is NULL ,then the default section, openssl_conf, will be used. Errors are silently ignored. Multiple calls have no effect."
0,0,It is however much better than nothing,,,null,It is however much better than nothing,"The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads)."
0,0,SSL_read or SSL_peek may want to write data and SSL_write may want to read data,,,null,"In particular, SSL_read() or SSL_peek() may want to write data and SSL_write() may want to read data","Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE. In particular, SSL_read() or SSL_peek() may want to write data and SSL_write() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes."
0,0,the verification process will be performed,,,If a first certificate matching the parameters is found,"If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure","When looking up CA certificates, the OpenSSL library will first search the certificates in SSL_CTX_load_verify_locations_APIParam_2, then those in CApath. Certificate matching is done based on the subject name, the key identifier (if present), and the serial number as taken from the certificate to be verified. If these data do not match, the next certificate will be tried. If a first certificate matching the parameters is found, the verification process will be performed; no other certificates for the same parameters will be searched in case of failure."
0,0,"The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length , it is possible to use eg the name of the application and/or the hostname and/or service name",,,null,"The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length, it is therefore possible to use eg the name of the application and/or the hostname and/or service name","Sessions are generated within a certain context. When exporting/importing sessions with i2d_SSL_SESSION/d2i_SSL_SESSION it would be possible, to re-import a session generated from another context (eg another application), which might lead to malfunctions. Therefore each application must set its own session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 which is used to distinguish the contexts and is stored in exported sessions. The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length, it is therefore possible to use eg the name of the application and/or the hostname and/or service name ..."
0,0,"signcert is the certificate to sign with , pkey is the corresponsding private key",,,null,"signcert is the certificate to sign with, pkey is the corresponsding private key","PKCS7_sign() creates and returns a PKCS#7 signedData structure. signcert is the certificate to sign with, pkey is the corresponsding private key. certs is an optional additional set of certificates to include in the PKCS#7 structure (for example any intermediate CAs in the chain)."
0,0,The certificates in CApath are only looked up,,,"when required , eg when building the certificate chain or when actually performing the verification of a peer certificate","The certificates in CApath are only looked up when required, eg when building the certificate chain or when actually performing the verification of a peer certificate","The certificates in CApath are only looked up when required, eg when building the certificate chain or when actually performing the verification of a peer certificate."
0,0,"SSL_CTX_set_client_cert_cb sets the client_cert_cb callback , that",,,null,"SSL_CTX_set_client_cert_cb() sets the client_cert_cb() callback, that is called when a client certificate is requested by a server and no certificate was yet set for the SSL object","SSL_CTX_set_client_cert_cb() sets the client_cert_cb() callback, that is called when a client certificate is requested by a server and no certificate was yet set for the SSL object."
0,0,is made to reuse it,,,null,"If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it","d2i_X509() attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2. If successful a pointer to the d2i_X509_APIParam_1 structure is returned. If an error occurred ,then NULL is returned. If d2i_X509_APIParam_1 is not NULL, then the returned structure is written to d2i_X509_APIParam_1. If d2i_X509_APIParam_1 is not NULL ,then it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it. This ""reuse"" capability is present for historical compatibility but its use is strongly discouraged (see BUGS below, and the discussion in the RETURN VALUES section)."
0,0,"For socket BIOs was used , select or poll on the underlying socket can be used to find out",,,when the TLS/SSL I/O function should be retried,"For socket BIOs (eg when SSL_set_fd() was used), select() or poll() on the underlying socket can be used to find out when the TLS/SSL I/O function should be retried","For socket BIOs (eg when SSL_set_fd() was used), select() or poll() on the underlying socket can be used to find out when the TLS/SSL I/O function should be retried."
0,0,the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh _ <type> _ new,,,If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types,"If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new()","lh_<type>_new() creates a new LHASH_OF(<type> structure to store arbitrary data entries, and provides the 'hash' and 'compare' callbacks to be used in organising the table's entries. The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field. The hash value is normally truncated to a power of 2, so make sure that your hash function returns well mixed low order bits. The compare callback takes two arguments (pointers to two hash table entries), and returns 0 if their keys are equal, non-zero otherwise. If your hash table will contain items of some particular type and the hash and compare callbacks hash/compare these types, then the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh_<type>_new(). These provide per-variable casts before calling the type-specific callbacks written by the application author. These macros, as well as those used for the ""doall"" callbacks, are defined as;"
0,0,This is mainly,,,null,"This is mainly ; SSL_read , SSL_peek , and SSL_write will handle any pending handshakes","Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE. In particular, SSL_read() or SSL_peek() may want to write data and SSL_write() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes."
0,0,"SSL_read , SSL_peek , and SSL_write will handle any pending handshakes",,,null,"This is mainly ; SSL_read , SSL_peek , and SSL_write will handle any pending handshakes","Caveat: Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE. In particular, SSL_read() or SSL_peek() may want to write data and SSL_write() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes."
0,0,OPENSSL_config configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1,,,null,OPENSSL_config() configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1,"OPENSSL_config() configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1. If OPENSSL_config_APIParam_1 is NULL ,then the default section, openssl_conf, will be used. Errors are silently ignored. Multiple calls have no effect."
0,0,certs is an optional additional set of certificates to include in the PKCS # 7 structure,,,null,certs is an optional additional set of certificates to include in the PKCS#7 structure (for example any intermediate CAs in the chain),"PKCS7_sign() creates and returns a PKCS#7 signedData structure. signcert is the certificate to sign with, pkey is the corresponsding private key. certs is an optional additional set of certificates to include in the PKCS#7 structure (for example any intermediate CAs in the chain)."
0,0,The OPENSSL_config function is designed to be a very simple `` call it and forget it '' function,,,null,"The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function","The OPENSSL_config() function is designed to be a very simple ""call it and forget it"" function. It is however much better than nothing. Applications which need finer control over their configuration functionality should use the configuration functions such as CONF_modules_load() directly. This function is deprecated and its use should be avoided. Applications should instead call CONF_modules_load() during initialization (that is before starting any threads)."
0,0,OCSP_resp_find_status searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2,,,null,OCSP_resp_find_status() searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2,"OCSP_resp_find_status() searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2. If it is successful the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd. The OCSP_resp_find_status_APIParam_3 value will be one of V_OCSP_CERTSTATUS_GOOD, V_OCSP_CERTSTATUS_REVOKED or V_OCSP_CERTSTATUS_UNKNOWN. The OCSP_single_get0_status_APIParam_2 and *revtime fields are only set if the status is V_OCSP_CERTSTATUS_REVOKED. If set the OCSP_single_get0_status_APIParam_2 field will be set to the revocation reason which will be one of OCSP_REVOKED_STATUS_NOSTATUS, OCSP_REVOKED_STATUS_UNSPECIFIED, OCSP_REVOKED_STATUS_KEYCOMPROMISE, OCSP_REVOKED_STATUS_CACOMPROMISE, OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, OCSP_REVOKED_STATUS_SUPERSEDED, OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, OCSP_REVOKED_STATUS_CERTIFICATEHOLD or OCSP_REVOKED_STATUS_REMOVEFROMCRL."
0,0,The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server,,,null,The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server,"These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv2, SSLv3, TLSv1, TLSv1.1 and TLSv1.2. Most applications should use these method, and avoid the version specific methods described below."
0,0,OCSP_resp_get0_signer attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1,,,null,OCSP_resp_get0_signer() attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1,"OCSP_resp_get0_signer() attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1. The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism."
0,0,OCSP_resp_get0_id gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1,,,null,OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1,"OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1. If the responder ID is a name then <*pname> is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary."
0,0,Otherwise the function continues by validating the signer certificate,,,null,Otherwise the function continues by validating the signer certificate,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,"OCSP_single_get0_status extracts the fields of OCSP_single_get0_status_APIParam_1 in OCSP_single_get0_status_APIParam_2 , revtime , OCSP_check_validity_APIParam_1 and nextupd",,,null,"OCSP_single_get0_status() extracts the fields of OCSP_single_get0_status_APIParam_1 in OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd","OCSP_single_get0_status() extracts the fields of OCSP_single_get0_status_APIParam_1 in OCSP_single_get0_status_APIParam_2, *revtime, OCSP_check_validity_APIParam_1 and *nextupd."
0,0,all possible recipients are tried,,,If CMS_decrypt_APIParam_3 is set to NULL,"If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried","If CMS_decrypt_APIParam_3 is set to NULL ,all possible recipients are tried. This case however is problematic. To thwart the MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether they succeed or not. If no recipient succeeds then a random symmetric key is used to decrypt the content: this will typically output garbage and may (but is not guaranteed to) ultimately return a padding error only. If CMS_decrypt() just returned an error when all recipient encrypted keys failed to decrypt an attacker could use this in a timing attack. If the special flag CMS_DEBUG_DECRYPT is set, then the above behaviour is modified and an error is returned if no recipient encrypted key can be decrypted without generating a random content encryption key. Applications should use this flag with extreme caution especially in automated gateways as it can leave them open to attack."
0,0,An OCSP response for a certificate contains thisUpdate and nextUpdate fields,,,null,An OCSP response for a certificate contains thisUpdate and nextUpdate fields,"An OCSP response for a certificate contains thisUpdate and nextUpdate fields. Normally the current time should be between these two values. To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity(). Some responders do not set the nextUpdate field, this would otherwise mean an ancient response would be considered valid: the maxsec parameter to OCSP_check_validity() can be used to limit the permitted age of responses."
0,0,OCSP_resp_get0_produced_at extracts the producedAt field from the single response OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1,,,null,OCSP_resp_get0_produced_at() extracts the producedAt field from the single response OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1,OCSP_resp_get0_produced_at() extracts the producedAt field from the single response OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1.
0,0,EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier `` parameter '' based on the passed cipher,,,null,"EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher","EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier ""parameter"" based on the passed cipher. This will typically include any parameters and an IV. The cipher IV (if any) must be set when this call is made. This call should be made before the cipher is actually ""used"" (before any EVP_EncryptUpdate_APIName, EVP_DecryptUpdate_APIName calls for example). This function may fail if the cipher does not have any ASN1 support."
0,0,The function first tries to find the signer certificate of the response in <certs>,,,null,The function first tries to find the signer certificate of the response in <certs>,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,The BIO_CLOSE flag is set on the returned BIO,,,null,The BIO_CLOSE flag is set on the returned BIO,BIO_new_file_APIName creates a new file BIO with mode BIO_new_file_APIParam_2 the meaning of BIO_new_file_APIParam_2 is the same as the stdio function fopen_APIName. The BIO_CLOSE flag is set on the returned BIO.
0,0,To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity,,,null,To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity(),"An OCSP response for a certificate contains thisUpdate and nextUpdate fields. Normally the current time should be between these two values. To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity(). Some responders do not set the nextUpdate field, this would otherwise mean an ancient response would be considered valid: the maxsec parameter to OCSP_check_validity() can be used to limit the permitted age of responses."
0,0,"The list of protocols available can be further limited using the SSL_OP_NO_SSLv2 , SSL_OP_NO_SSLv3 , SSL_OP_NO_TLSv1 , SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options or SSL_set_options functions",,,null,"The list of protocols available can be further limited using the SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions","The list of protocols available can be further limited using the SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions. Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions. In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions."
0,0,Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation,,,null,Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,"OCSP_resp_get1_id leaves ownership of pid and pname with the caller , who is responsible for freeing them",,,null,"OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them","OCSP_resp_get0_id() gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1. If the responder ID is a name then <*pname> is set to the name and *pid is set to NULL. If the responder ID is by key ID then *pid is set to the key ID and *pname is set to NULL. OCSP_resp_get1_id() leaves ownership of *pid and *pname with the caller, who is responsible for freeing them. Both functions return 1 in case of success and 0 in case of failure. If OCSP_resp_get1_id() returns 0, no freeing of the results is necessary."
0,0,The same holds for output,,,null,The same holds for output,"DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
0,0,The data being signed is included in the PKCS7 structure,,,unless PKCS7_DETACHED is set in which case it is omitted,"The data being signed is included in the PKCS7 structure, unless PKCS7_DETACHED is set in which case it is omitted","The data being signed is included in the PKCS7 structure, unless PKCS7_DETACHED is set in which case it is omitted. This is used for PKCS7 detached signatures which are used in S/MIME plaintext signed messages for example."
0,0,a partial PKCS7 structure is output to which additional signers and capabilities can be added before finalization,,,If the PKCS7_PARTIAL flag is set,"If the PKCS7_PARTIAL flag is set, a partial PKCS7 structure is output to which additional signers and capabilities can be added before finalization","If the PKCS7_PARTIAL flag is set, a partial PKCS7 structure is output to which additional signers and capabilities can be added before finalization."
0,0,"In clients , , the effect is to also disable all subsequent protocol versions",,,when a protocol version is disabled without disabling all previous protocol versions,"In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions","The list of protocols available can be further limited using the SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options(3) or SSL_set_options(3) functions. Clients should avoid creating ""holes"" in the set of protocols Clients support, when disabling a protocol, make sure that you also disable either all previous or all subsequent protocol versions. In clients, when a protocol version is disabled without disabling all previous protocol versions, the effect is to also disable all subsequent protocol versions."
0,0,DES_crypt_APIName is a faster replacement for the normal system crypt_APIName,,,null,DES_crypt_APIName is a faster replacement for the normal system crypt_APIName,DES_crypt_APIName is a faster replacement for the normal system crypt_APIName. This function calls DES_fcrypt_APIName with a static array passed as the third parameter. This emulates the normal non-thread safe semantics of crypt_APIName.
0,0,OCSP_check_validity checks the validity of OCSP_check_validity_APIParam_1 and nextupd values which will be typically obtained from OCSP_resp_find_status or OCSP_single_get0_status,,,null,OCSP_check_validity() checks the validity of OCSP_check_validity_APIParam_1 and nextupd values which will be typically obtained from OCSP_resp_find_status() or OCSP_single_get0_status(),OCSP_check_validity() checks the validity of OCSP_check_validity_APIParam_1 and nextupd values which will be typically obtained from OCSP_resp_find_status() or OCSP_single_get0_status(). If sec is non-zero it indicates how many seconds leeway should be allowed in the check. If maxsec is positive it indicates the maximum age of OCSP_check_validity_APIParam_1 in seconds.
0,0,DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits,,,null,DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits,"DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
0,0,This emulates the normal non-thread safe semantics of crypt_APIName,,,null,This emulates the normal non-thread safe semantics of crypt_APIName,DES_crypt_APIName is a faster replacement for the normal system crypt_APIName. This function calls DES_fcrypt_APIName with a static array passed as the third parameter. This emulates the normal non-thread safe semantics of crypt_APIName.
0,0,This is used by the PEM routines to read `` TRUSTED CERTIFICATE '' objects,,,null,"This is used by the PEM routines to read ""TRUSTED CERTIFICATE"" objects","d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information. This is used by the PEM routines to read ""TRUSTED CERTIFICATE"" objects. This function should not be called on untrusted input."
0,0,It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates,,,null,It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information,,,null,d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information,"d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information. This is used by the PEM routines to read ""TRUSTED CERTIFICATE"" objects. This function should not be called on untrusted input."
0,0,BIO_new_file_APIName creates a new file BIO with mode BIO_new_file_APIParam_2 the meaning of BIO_new_file_APIParam_2 is the same as the stdio function fopen_APIName,,,null,BIO_new_file_APIName creates a new file BIO with mode BIO_new_file_APIParam_2 the meaning of BIO_new_file_APIParam_2 is the same as the stdio function fopen_APIName,BIO_new_file_APIName creates a new file BIO with mode BIO_new_file_APIParam_2 the meaning of BIO_new_file_APIParam_2 is the same as the stdio function fopen_APIName. The BIO_CLOSE flag is set on the returned BIO.
0,0,OCSP_basic_verify checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated,,,null,OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1,,,unless the flags contain OCSP_NOINTERN,It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,It also searches the certificates,,,null,It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN,"OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,ie at least part of an TLS/SSL record will be read or written,,,"If , by , the underlying BIO has data available for reading or allows writing data , some TLS/SSL protocol progress will take place","If, by then, the underlying BIO has data available for reading (if the result code is SSL_ERROR_WANT_READ) or allows writing data (SSL_ERROR_WANT_WRITE), then some TLS/SSL protocol progress will take place, ie at least part of an TLS/SSL record will be read or written","The operation did not complete; the same TLS/SSL I/O function should be called again later. If, by then, the underlying BIO has data available for reading (if the result code is SSL_ERROR_WANT_READ) or allows writing data (SSL_ERROR_WANT_WRITE), then some TLS/SSL protocol progress will take place, ie at least part of an TLS/SSL record will be read or written. Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition. There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level."
0,0,"Next , the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error",,,unless the flags contain OCSP_NOSIGS,"Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS","OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size,,,null,This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size,"BIO_get_read_request_APIName and BIO_ctrl_get_read_request_APIName return the amount of data requested, or the buffer size if it is less, if the last read attempt at the other half of the BIO pair failed due to an empty buffer. This can be used to determine how much data should be written to the BIO so the next read will succeed: this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size. After a successful read this call will return zero. It also will return zero once new data has been written satisfying the read request or part of it. Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName."
0,0,the first 12 bits will come from the 1st input byte and the low half of the second input byte,,,"if you set numbits to 12 , and length to 2","What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte","DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
0,0,What this means is that,,,null,"What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte","DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits. What this means is that if you set numbits to 12, and length to 2, the first 12 bits will come from the 1st input byte and the low half of the second input byte. The second 12 bits will have the low 8 bits taken from the 3rd input byte and the top 4 bits taken from the 4th input byte. The same holds for output. This function has been implemented this way because most people will be using a multiple of 8 and because once you get into pulling bytes input bytes apart things get ugly!"
0,0,"To this end , all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1",,,null,"To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set","OCSP_basic_verify() checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated. It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates. The function first tries to find the signer certificate of the response in <certs>. It also searches the certificates the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 unless the flags contain OCSP_NOINTERN. It fails if the signer certificate cannot be found. Next, the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error unless the flags contain OCSP_NOSIGS. Then the function already returns success if the flags contain OCSP_NOVERIFY or if the signer certificate was found in certs and the flags contain OCSP_TRUSTOTHER. Otherwise the function continues by validating the signer certificate. To this end, all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 are considered as untrusted certificates for the construction of the validation path for the signer certificate unless the OCSP_NOCHAIN flag is set. After successful path validation the function returns success if the OCSP_NOCHECKS flag is set. Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation. If this does not succeed and the flags do not contain OCSP_NOEXPLICIT the function checks for explicit trust for OCSP signing in the root CA certificate."
0,0,additional certificates can be supplied in extra_certs,,,if the certificates that may have signed the response are known via some out-of-band mechanism,"The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism","OCSP_resp_get0_signer() attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1. The OCSP protocol does not require that this certificate is included in the certs field of the response, so additional certificates can be supplied in extra_certs if the certificates that may have signed the response are known via some out-of-band mechanism."
0,0,"this function uses a separate `` private '' PRNG instance so that a compromise of the `` public '' PRNG instance will not affect the secrecy of these private values , as described in RAND_APIName and RAND_DRBG_APIName",,,If using the default RAND_METHOD,"If using the default RAND_METHOD, this function uses a separate ""private"" PRNG instance so that a compromise of the ""public"" PRNG instance will not affect the secrecy of these private values, as described in RAND_APIName and RAND_DRBG_APIName","RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName. RAND_priv_bytes_APIName is intended to be used for generating values that should remain private. If using the default RAND_METHOD, this function uses a separate ""private"" PRNG instance so that a compromise of the ""public"" PRNG instance will not affect the secrecy of these private values, as described in RAND_APIName and RAND_DRBG_APIName ."
,,1316,assp,,,,
399,,5295,labelled,,,,
305,456,1,rest,,,,