It fails
At this point it is important to mention an important API function
The return values of BIO_pending_APIName and BIO_wpending_APIName may not reliably determine the amount of pending data in all cases
Allow SSL_write to return r with 0 < r < n
EC_POINT_method_of returns the EC_METHOD associated with the supplied EC_POINT
dyn_lock_function is needed to perform locking off dynamic lock numbered n.
Before a candidate for p is generated and tested , BN_GENCB_call is called
An application supporting multiple chains with different CA signature algorithms may also wish to check CERT_PKEY_CA_SIGNATURE too
then they may well wish to make modifications to table item passed back in the lh_doall_APIName or lh_doall_arg_APIName callbacks
port has the same syntax as the port specified in BIO_set_conn_port_APIName for connect BIOs , that is it can be a numerical port string or a string to lookup using getservbyname_APIName and a string table
EC_GROUP_set_generator sets curve paramaters that must be agreed by all participants using the curve
Supported representations are octet strings , BIGNUMs and hexadecimal
The OCSP_single_get0_status_APIParam_2 and revtime fields are only set
This section will explain the basic things an application programmer should support to make the most useful elements of the ENGINE functionality available to the user
BN_GENCB_call is called as described below
Within the library there are two forms of elliptic curve that are of interest
A set of characters that can be used to cancel the prompt is given as well
BN_GENCB_call is called
is optional text message
can be used to obtain state information for ssl
It is not NUL-terminated
This will check the type of the callback and will invoke callback for new style callbacks or callback for old style
This is much better than CBC DES
this will not happen
Any or all of these parameters can be set to NULL
Also makes code harder to adapt to new algorithms and some options are not cleanly supported at the low level and some operations are more efficient using the high level interface
In the case of SSL 2.0 , this is always 0
, SSL_accept will only return once the handshake has been finished or an error occurred
The string will have the following format
The depth count is "level 0:peer certificate", "level 1: CA certificate", "level 2: higher level CA certificate", and so on.
The following encoding methods are implemented
The BIO linked to SSL_get_wbio_APIParam_1 SSL_get_rbio_APIParam_1
This return method of UI_OpenSSL_APIName is the most machine/OS dependent part of OpenSSL and normally generates the most problems
it is considered bad and removed according to RFC2246
the alternative RAND_set_rand_method_APIParam_1 implementationis entirely responsible for the generation and management of a cryptographically secure PRNG stream
It is a macro
i2d_re_X509_tbs_APIName is similar to i2d_X509_APIName except it encodes only the TBSCertificate portion of the certificate
The number was 0x0090581f
The result returned by SSL_want_APIName should always be consistent with the result of SSL_get_error_APIName
PKCS7_sign creates and returns a PKCS#7 signedData structure
 the fields of the response are returned in OCSP_resp_find_status_APIParam_3, OCSP_single_get0_status_APIParam_2, revtime, OCSP_check_validity_APIParam_1 and nextupd
OCSP_resp_get0_respdata returns the tbsResponseData from OCSP_resp_get0_respdata_APIParam_1
OCSP_resp_get0_tbs_sigalg returns the signatureAlgorithm from OCSP_resp_get0_tbs_sigalg_APIParam_1
These functions can not return OBJ_obj2txt_APIParam_3 OBJ_sn2nid_APIParam_1 OBJ_create_APIParam_1 OBJ_ln2nid_APIParam_1 OBJ_cmp_APIParam_1
All these functions return either the amount of data successfully read or written  or that no data was successfully read or written if the result is 0 or -1
BN_hex2bn_APIName and BN_dec2bn_APIName return the number of characters used in parsing, or 0 on error, in which case no new BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 will be created
SSL_get_default_timeout_APIName returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for SSL_get_default_timeout_APIParam_1
BIO_f_base64_APIName returns the base64 BIO method
The SSL_get1_curves_APIParam_2 parameter can be NULL to simply return the number of curves for memory allocation purposes
RAND_egd_APIName and RAND_egd_bytes_APIName return the number of bytes read from the daemon on success, and -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG
CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added
CRYPTO_get_ex_data is used to retrieve application specific data
The policies parameter can be NULL to clear an existing policy set
The default MAC iteration count is 1
In public keys , priv_key is NULL
"(NONE)" is returned by SSL_CIPHER_get_version
BIO_get_fd places the file descriptor in c if it is not NULL, it also returns the file descriptor
A return value of 0 or 1 indicates successful processing of the data
Functions such as strlen will not return the correct length of the encoded structure
no other certificates for the same parameters will be searched in case of failure
If the flags PKCS7_STREAM is set, the returned PKCS7 structure is just initialized ready to perform the signing operation
To thwart the MMA attack all recipients are tried whether they succeed or not
This function calls DES_fcrypt_APIName with a static array passed as the third parameter
In typical usage and application will retrieve all CMS_RecipientInfo structures using CMS_get0_RecipientInfos_APIName and check the type of each using CMS_RecpientInfo_type_APIName
Use the c_rehash utility to create the necessary links
This is being done by calling SSL_set_connect_state_APIName or SSL_set_accept_state_APIName before the first call to an SSL_read_APIName or SSL_write_APIName function
EVP_MD_CTX_destroy_APIName cleans up digest context EVP_MD_CTX_destroy_APIParam_1 and frees up the space allocated to EVP_MD_CTX_destroy_APIName
This is an alternative way of specifying trusted certificates instead of using an X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1
Calling EC_KEY_free decrements the reference count for the EC_KEY object, and then frees the memory associated with it.
the key genration operation is aborted and an error occurs
Note that the callback will not be called in the event of a handshake where session resumption occurs
SSL_CTX_set_tmp_dh_callback() sets the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used
This function can also be used in the NPN callback
Socket BIOs also support any relevant functionality of file descriptor BIOs
Any or all of the X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2 , STACK_OF_APIParam_0 and chain parameters can be NULL
The arguments of these functions support similar options to the similarly named ones of the corresponding X509_NAME_ENTRY_set_data_APIParam_1 X509_NAME_ENTRY_set_object_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_get_data_APIParam_1 X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_get_object_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 functions such as X509_NAME_add_entry_by_txt
Typically BIO_CLOSE is used in a source/sink BIO to indicate that the underlying I/O stream should be closed when the BIO is freed.
For the functions below, application code should treat all returned values OIDs, NIDs, or names as constants
SSL_set_cipher_list_APIName sets the list of ciphers only for SSL_set_cipher_list_APIParam_1
SSL_set_connect_state_APIName sets SSL_set_connect_state_APIParam_1 to work in client mode
SMIME_write_PKCS7_APIParam_2 is the appropriate SMIME_write_PKCS7_APIParam_2 structure
Kerberos v4 parameters are the same as DES_ncbc_encrypt_APIName
then the default implementation of digest EVP_DigestInit_ex_APIParam_2 is used
The array consist of all NIDs of curves in preference order
OBJ_create_APIParam_1 is the numerical form of the object 
OBJ_create_APIParam_2 is the short name
OBJ_create_APIParam_3 is the long name
For negative numbers , the string is prefaced with a leading ' - '
An application may either directly specify the DH parameters or can supply the DH parameters via a callback function
The length of the session id is 16 bytes for SSLv2 sessions and between 1 and 32 bytes for SSLv3/TLSv1
The default value for the maximum certificate chain size is 100kB
For Fp fields this will be the number of bits in p. For F2 ^ m fields this will be the value m
it is assumed that d2i_ECPKParameters_APIParam_1 contains a valid d2i_ECPKParameters_APIParam_1 structure and an attempt is made to reuse it
The X509_check_email_APIParam_3 argument must be the number of characters in the address string or zero in which case the length is calculated with strlen
A return value of -3 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised and the command requires a value but SSL_CONF_cmd_APIParam_3 is NULL
The type of field is determined by X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 which can either be a definition of the type of X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_txt_APIParam_4 or a standard ASN1 type
The data being read from DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 is assumed to have come from DES_enc_write and is decrypted using DES_enc_read_APIParam_4 for the key schedule and iv for the initial vector
it is assumed that d2i_X509_APIParam_1 contains a valid d2i_X509_APIParam_1 structure and an attempt is made to reuse it
By default , wildcards are supported and wildcards match only in the left-most label
Others need some additional initialization , and frequently a utility function exists to create and initialize such BIOs
version will be SSL3_VERSION
The 0 version uses the supplied structure pointer directly in the parent and The 0 version will be freed up
ok is set to 2 to indicate the policy checking is complete
The CMS_SignerInfo_sign function will explicitly sign a CMS_SignerInfo structure
EVP_EncryptInit_ex_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc
The PrivateKey read routines can be used in all applications
The parameters are encoded using a Dss-Parms structure as defined in RFC2459
The exponent is an odd number , typically 3 , 17 or 65537
The initial buffer size is DEFAULT_BUFFER_SIZE , currently 4096
CONF_MFLAGS_IGNORE_MISSING_FILE will make CONF_load_modules_file() ignore missing configuration files
error code is an 8 digit hexadecimal number
The result is rounded towards zero
The callback can use the SSL_get_version function to check , whether the session is of type SSLv2
library name , function name and reason string are ASCII text , as
the remainder will be zero or negative
Signing is deferred until after the data has been written
neg is 1
top is the number of words being used , so for a value of 4 , bn.d -LSB- 0 -RSB- = 4 and bn.top = 1
This type is consists of 8 bytes with odd parity
DES_cfb_encrypt encrypt/decrypts using cipher feedback mode
DES_quad_cksum is a Kerberos v4 function
The main purpose of CMS_add1_signer_APIName is to provide finer control over a CMS signed data structure where the simpler CMS_sign_APIName function defaults are not appropriate
*pid is set to the key ID and *pname is set to NULL
The parameters are encoded using a PKCS # 3 DHparameter structure
BN_generate_prime works in the same way as BN_generate_prime_ex but expects an old style callback function directly in the callback parameter , and an argument to pass to it in the cb_arg
more complex compound formats may not work.
the value of EVP_CIPHER_CTX_key_length may be different for variable key length ciphers
The PUBKEY functions process a public key using an EVP_PKEY structure
The public key is encoded as a SubjectPublicKeyInfo structure
The RSAPublicKey functions process an RSA public key using an RSA structure
The public key is encoded using a PKCS # 1 RSAPublicKey structure
The RSA_PUBKEY functions also process an RSA public key using an RSA structure
The DSA_PUBKEY functions process a DSA public key using a DSA structure
The amount of data written depends on the block alignment of the encrypted data
key is the symmetric key to use and iv is the IV to use , the actual number of bytes used for the key and IV depends on the cipher
BN_add_APIParam_1 may be the same BN_add_APIParam_1 as BN_add_APIParam_2 or BN_add_APIParam_3
BN_mul_APIParam_1 may be the same BN_mul_APIParam_1 as BN_mul_APIParam_2 or BN_mul_APIParam_3
BN_sqr_APIParam_1 and BN_sqr_APIParam_2 may be the same BN_sqr_APIParam_1
the maximum size of the output buffer is written to the siglen parameter
SSL_set_verify_depth sets the maximum SSL_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for ssl
The behaviour can be controlled by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and SSL_VERIFY_CLIENT_ONCE flags
dmax is the size of the bn_dump_APIParam_1 bn_div_words_APIParam_3 array that has been allocated
bn_set_max makes bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2 a static number with a dmax of its current size
Each line is indented by X509_NAME_print_ex_APIParam_3 spaces
Check the error queue to find out the reason of failure
Pointer to the subject names of the successfully read certificates
Callback has been called
A certificate was of an unsupported type
The read state is unknown
Raw RSA encryption
pass is the passphrase to use
keytype is the type of key
pkey is the private key to include in the structure and cert its corresponding certificates
The TLS/SSL handshake was not successful
an description and a name
the signature algorithms of all CA certificates are acceptable
the issuer name is acceptable
the signature algorithm of the EE certificate is acceptable
the parameters of the end entity certificate are acceptable
the parameters of all CA certificates are acceptable
chain is suitable for Suite B use
the end entity certificate algorithm can be used explicitly for signing
Protocol version
Authentication method
Message digest
Key exchange method
Encryption method with number of secret bits
EVP_CipherInit_ex , EVP_CipherUpdate and EVP_CipherFinal_ex are functions that can be used for decryption or encryption
where is a bitmask made up of the following bits
For every 4 valid base 64 bytes processed , 3 bytes of binary output data will be produced
Each of these functions operates on the current end entity certificate
The first is the generation of a DES_key_schedule from a key , the second is the actual encryption
The algorithm can be iterated over the input , depending on out_count , 1 , 2 , 3 or 4 times
these are ignored by SSL_pending
These CRLs will only be used
can be used to obtain state information for SSL objects created from ctx
Note that the retry may again lead to a SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition
DH_get_default_method_APIName returns a pointer to the current default DH_METHOD
Always create a new key
it will be called as follows using the BN_GENCB_call function described on the BN_generate_prime page
The callback function is called as callback
A callback is invoked through a call to BN_GENCB_call
BN_GENCB_call is called in the outer loop
This function can be called multiple times to encrypt successive blocks of data
As at any time a re-negotiation is possible , a call to SSL_read can also cause write operations !
the callback function for SSL_CTX_set_tmp_dh_callback_APIParam_1 to be used
EVP_EncodeUpdate may be called repeatedly to process large amounts of input data
It might also call SSL_certs_clear to delete any certificates associated with the SSL object
The next call to the handshake function will again lead to the call of cert_cb
The certificate callback functionality is always called even is a certificate is already set so the callback can modify or delete the existing certificate
This is implemented by calling SSL_CTX_set0_chain() with sk set to NULL
BN_mul calls bn_mul_normal , or
BN_GENCB_call and BN_GENCB_call are called
The OCSP protocol does not require that this certificate is included in the certs field of the response
The number of bytes written is placed in outl
The cipher argument specifies the encryption algorithm to use
the maximum size of the output buffer is written to the outlen parameter
the CMS_SignerInfo structure will not be finalized so additional attributes can be added
It handles the same formats as the PrivateKey functions but
Any attempt to reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored
`` Old '' style callbacks are the same except they are initialised with a call to BN_GENCB_set_old and callback is of type void
OPENSSL_instrument_bus2 on the other hand accumulates consecutive probes with the same value , ie in a way
The key schedule is an expanded form of the key
This will typically include any parameters and an IV
RAND_priv_bytes_APIName has the same semantics as RAND_bytes_APIName
EVP_CIPHER_asn1_to_param_APIName sets the cipher parameters based on an ASN1 AlgorithmIdentifier `` parameter ''
The operation failed
This option is not needed for clients
BN_to_montgomery_APIName computes Mont , ie BN_to_montgomery_APIParam_2R
BIO_set_md_APIName sets the message digest of BIO BIO_set_md_APIParam_1 to BIO_set_md_APIParam_2
X509_NAME_ENTRY_get_data_APIName retrieves the field value of X509_NAME_ENTRY_get_data_APIParam_1 in and X509_NAME_ENTRY_get_data_APIParam_0 structure
the SSLv3/TLSv1 server will choose following its own preferences
Disable version rollback attack detection
see the notes below
The shutdown was successfully completed
The shutdown is not yet finished
The operation succeeded
A message could not be decoded
Probably SSL_alert_desc_string_long_APIParam_1 SSL_alert_type_string_long_APIParam_1 SSL_alert_desc_string_APIParam_1 SSL_alert_type_string_APIParam_1 does not contain a correct alert message
The verification succeeded or no peer certificate was presented
A structure defined with the data that each lock needs to handle
A certificate was corrupt , contained signatures that did not verify correctly , etc
The TLS/SSL handshake was not successful but was shut down controlled and by the specifications of the TLS/SSL protocol
The write operation was not successful
The shutdown was not successful
then the cause is an error condition
stored sessions will not be reused 
the certificates above the limit are ignored
Error messages are generated
This message is generally a warning
These functions are an implementation of MDC2 with DES
This is typically done with file BIOs
The following functions are implemented in C
All other implementations are based on this one
The second way to get a functional reference is by asking OpenSSL for a default implementation for a given task , eg by ENGINE_get_default_RSA_APIName , ENGINE_get_default_cipher_engine_APIName , etc
This is often not desirable
SSL BIOs are the only current exception to this rule
no configuration takes place
OPENSSL_VERSION_NUMBER is a numeric release version identifier
Netscape-Commerce/1 .12 , , accepts a 32 byte challenge but appears to only use 16 bytes when generating the encryption keys
a call to select_APIName may be made to wait until data is available and retry the BIO operation
A negative value indicates an error other that signature verification failure
Again , the EC library will not use this seed value
this can be highly confusing
The function EVP_PKEY_encrypt_APIName can be called more than once on the same context
An application can retry the failed call immediately or avoid this situation by setting SSL_MODE_AUTO_RETRY on the underlying SSL structure
EVP_DigestFinal_APIName is similar to EVP_DigestFinal_ex_APIName except the digest context EVP_DigestFinal_APIParam_1 EVP_DigestFinal_ex_APIParam_1 is automatically cleaned up
X509_NAME_print_ex_fp_APIName is identical to X509_NAME_print_ex_APIName except the output is written to FILE pointer X509_NAME_print_ex_fp_APIParam_1
Check the error stack to find out why
SSL_read_APIName can be called without blocking or actually receiving new data from the underlying socket
The main purpose of these functions is to enable an application to lookup signers certificates using any appropriate technique
The private key is a random integer
The format of the string is described in ciphers_APIName
RC4 is a stream cipher with variable key length
Failure is only flagged
The error code can be obtained by ERR_get_error_APIName
BN_swap_APIName exchanges the values of BN_swap_APIParam_1 and BN_swap_APIParam_2
BIO_set_fp_APIName set the fp of a file BIO to BIO_set_fp_APIParam_2
The X509_check_ip_asc_APIParam_3 argument can be the bitwise OR of the flags
the OID for commonName has the following definitions
Blowfish can be used in the same modes as DES
SSL_CTX_set0_chain_cert_store_APIName and SSL_CTX_set1_chain_cert_store_APIName set the certificate store used for certificate chain building to SSL_CTX_set0_chain_cert_store_APIParam_2 SSL_CTX_set1_chain_cert_store_APIParam_2
In OpenSSL , the type X509_REQ is used to express such a certificate request
Blowfish is currently one of the faster block ciphers
The call to EVP_VerifyFinal_APIName internally finalizes a copy of the digest context
BIO_new_ssl_connect_APIName creates a new BIO chain consisting of an SSL BIO followed by a connect BIO
The connection uses the SSLv2 protocol
The functions EC_POINT_make_affine and EC_POINTs_make_affine force the internal representation of the EC_POINT into the affine co-ordinate system
EVP_SignInit_APIName initializes a signing context EVP_SignInit_APIParam_1 to use the default implementation of digest EVP_SignInit_APIParam_2
EC_GROUP_free frees the memory associated with the EC_GROUP
The record has been completely processed
These values reflect the underlying lseek_APIName behaviour
EVP_CIPHER_CTX_set_key_length_APIName sets the key length of the cipher ctx
A point is set to be at infinity by calling EC_POINT_set_to_infinity
A valid point on a curve is the special point at infinity
The expiration time of a single session can be modified using the SSL_SESSION_get_time_APIName family of functions
There is no way to restrict the list of compression methods supported on a per connection basis
SSL_CTX_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL context object SSL_CTX_use_psk_identity_hint_APIParam_1
MDC2_Init_APIName initializes a MDC2_Init_APIParam_1 structure
SSL_use_psk_identity_hint_APIName sets the given NULL-terminated PSK identity hint SSL_CTX_use_psk_identity_hint_APIParam_2 SSL_use_psk_identity_hint_APIParam_2 to SSL connection object SSL_use_psk_identity_hint_APIParam_1
EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName , EVP_PKEY_assign_EC_KEY_APIName , EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName are implemented as macros
instead of calling the hash functions directly
Blowfish is quite a bit faster than DES , and much faster than IDEA or RC2
The reference count for session SSL_CTX_add_session_APIParam_2 is incremented by 1
Client sessions are added to the session cache
function and reason codes are unique within each sub-library
For now , it understands two commands
This option is not activated by default
SSL_CTX_add_session_APIName adds the session SSL_CTX_add_session_APIParam_2 to the context SSL_CTX_add_session_APIParam_1
the current hint from SSL_CTX_use_psk_identity_hint_APIParam_1 or SSL_use_psk_identity_hint_APIParam_1 is deleted
Each sub-library of OpenSSL has a unique library number
In the case of EC_POINTs_make_affine the value EC_POINTs_mul_APIParam_4 EC_POINTs_make_affine_APIParam_2 provides the number of points in the array EC_POINTs_make_affine_APIParam_3 to be forced
Blowfish uses a variable size key , but typically , 128 bit keys are considered good for strong encryption
an ephemeral RSA key exchange can take place
it will not be included
OBJ_cmp_APIName compares OBJ_cmp_APIParam_1 to OBJ_cmp_APIParam_2
The PRNG state is not considered
triple DES , 128 bit RC2 , 64 bit RC2 , DES and 40 bit RC2
Reset SSL_clear_APIParam_1 to allow another connection
To handle some complex parts of a certificate , there are the types X509_NAME , X509_ATTRIBUTE , X509_EXTENSION and a few more
An OpenSSL server will match the identifiers listed by a client against its own compression methods and will unconditionally activate compression
A related structure is a certificate request , defined in PKCS # 10 from RSA Security , Inc , also reflected in RFC2896
the old session is removed by calling SSL_SESSION_free_APIName
The error can be obtained from ERR_get_error_APIName
The names of these functions are perhaps a little misleading
All settings are kept
Alternatively , the EGD-interface compatible daemon PRNGD can be used
SSL_CTX_set_default_passwd_cb_APIName and SSL_CTX_set_default_passwd_cb_userdata_APIName do not provide diagnostic information
OBJ_txt2obj_APIName converts the text string OBJ_txt2obj_APIParam_1 into an ASN1_OBJECT structure
EVP_SignFinal_APIParam_3 is an OUT paramter , and not used as an IN parameter
EVP_VerifyUpdate_APIName hashes EVP_VerifyUpdate_APIParam_3 bytes of data at EVP_VerifyUpdate_APIParam_2 into the verification context EVP_VerifyUpdate_APIParam_1
SSL_get0_session_APIName is the same as SSL_get_session_APIName
d2i_RSAPrivateKey_APIName , i2d_RSAPrivateKey_APIName decode and encode a PKCS # 1 RSAPrivateKey structure
DH_generate_parameters_ex_APIParam_2 is the length in bits of the safe prime to be generated
This function can be called several times on the same EVP_VerifyUpdate_APIParam_1 to include additional data
BUF_MEM_free_APIName frees up an already existing buffer
CONF_modules_free_APIName closes down and frees up all memory allocated by all configuration modules
The call to EVP_SignFinal_APIName internally finalizes a copy of the digest context
The EVP signature routines are a high level interface to digital signatures
bn_print_APIName prints bn_print_APIParam_1 to stderr
EVP_SignFinal_APIName signs the data in EVP_SignFinal_APIParam_1 using the private key EVP_SignFinal_APIParam_4 and places the signature in EVP_SignFinal_APIParam_2
i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 i2d_re_X509_tbs_APIParam_2 is not incremented and it points to the start of the data just written
bn_dump_APIName prints bn_dump_APIParam_2 words at bn_dump_APIParam_1 to stderr
This library contains a fast implementation of the DES encryption algorithm
The standard calls BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName can be used to determine the amount of pending data in the read or write buffer
but wildcards may match part of that label with an explicit prefix or suffix
The reason for the auto increment behaviour is to reflect a typical usage of ASN1 functions
X509_STORE_CTX_free_APIName completely frees up X509_STORE_CTX_free_APIParam_1
SMIME_read_CMS_APIName parses a message in S/MIME format
long names and short names will be interpreted as well as numerical forms
This can either be done automatically
this callback will be called for each session being freed from SSL_CTX_free_APIParam_1 's session cache
The shutdown procedure consists of 2 steps
This message is always fatal
EVP_CIPHER_CTX_init_APIName initializes cipher contex EVP_EncryptFinal_APIParam_1 EVP_DecryptFinal_APIParam_1 EVP_DecryptInit_ex_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_ex_APIParam_1 EVP_CipherFinal_ex_APIParam_1 EVP_CipherUpdate_APIParam_1 EVP_CipherFinal_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CIPHER_CTX_ctrl_APIParam_1 EVP_DecryptFinal_ex_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_APIParam_1 EVP_EncryptFinal_ex_APIParam_1 EVP_EncryptUpdate_APIParam_1 EVP_CIPHER_type_APIParam_1 EVP_DecryptUpdate_APIParam_1
memory will be allocated for a buffer and the encoded data written to it
On systems without / dev/random devices providing entropy from the kernel , the EGD entropy gathering daemon can be used to collect entropy
by default , the host X509_check_host_APIParam_2 `` www.example.com '' would match a certificate with a SAN or CN value of ''
ASN1_OBJECT_free_APIName frees up the ASN1_OBJECT_free_APIParam_1 structure ASN1_OBJECT_free_APIParam_1
Several chunks can be queried
The validity of a chain is determined by checking
SSL_SESSION_free_APIName does not provide diagnostic information
OpenSSL keeps an internal table of digest algorithms and ciphers
Any error can be obtained from ERR_get_error_APIName
SSL_set_ssl_method_APIName sets a new TLS/SSL SSL_set_ssl_method_APIParam_2 for a particular SSL_get_ssl_method_APIParam_1 object
Data can be encrypted using this key
The SSL engine inherits the behaviour of SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 , respectively
SSL_get_ex_data_APIName is used to retrieve the information for SSL_get_ex_data_APIParam_2 from SSL_get_ex_data_APIParam_1
 if it matches a supported signature algorithm, supported curves and in the case of client authentication certificate types and issuer names
The OpenSSL library can store/retrieve SSL/TLS sessions for later reuse
The EVP envelope routines are a high level interface to envelope encryption
SSL_get_ssl_method_APIParam_1 object may be reset
Calling OpenSSL_add_all_algorithms_APIName links in all algorithms
SSL_CTX_get0_param_APIName and SSL_get0_param_APIName retrieve an internal pointer to the verification parameters for SSL_CTX_get0_param_APIParam_1 or SSL_get0_param_APIParam_1 respectively
SSL_set_shutdown_APIName sets the shutdown state of SSL_set_shutdown_APIParam_1 to SSL_set_shutdown_APIParam_2
They generate a random key and IV `` envelope '' it by using public key encryption
SSL_CTX_sess_get_new_cb_APIName , SSL_CTX_sess_get_remove_cb_APIName , and SSL_CTX_sess_get_get_cb_APIName allow to retrieve the function pointers of the provided callback functions
SSL_CTX_set_tmp_dh_APIName sets DH parameters to be used to be SSL_CTX_set_tmp_dh_APIParam_2
To support future functionality 
OpenSSL uses this table to lookup ciphers via functions such as EVP_get_cipher_byname_APIName
An EC_POINT represents a point on a curve
The key is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_APIParam_1
lh_node_usage_stats_APIName prints the ` load ' and the ` actual load '
BN_nnmod_APIName reduces BN_nnmod_APIParam_2 modulo BN_nnmod_APIParam_3 and places the non-negative remainder in BN_nnmod_APIParam_1
RSA_private_decrypt_APIName decrypts the RSA_private_decrypt_APIParam_1 bytes at RSA_private_decrypt_APIParam_2 using the private key RSA_private_decrypt_APIParam_4 and stores the plaintext in RSA_private_decrypt_APIParam_3
the SSL_set_bio_APIParam_1 will also have non-blocking behaviour
i2t_ASN1_OBJECT_APIName is the same as OBJ_obj2txt_APIName with the OBJ_obj2txt_APIParam_4 set to zero
SSL_CTX_use_serverinfo_file_APIName loads one or more serverinfo extensions from SSL_CTX_use_serverinfo_file_APIParam_2 into SSL_CTX_use_serverinfo_file_APIParam_1
d2i_DSAPublicKey_APIName and i2d_DSAPublicKey_APIName decode and encode the DSA public key components structure
A valid certificate chain or partial chain was received , but the certificate was not accepted , trusted CA
lh_node_usage_stats_APIName prints out a short summary of the state of the hash table
BIO_destroy_pair_APIName destroys the association between two connected BIOs
CMS_add0_cert_APIName and CMS_add1_cert_APIName add certificate CMS_add0_cert_APIParam_2 CMS_add1_cert_APIParam_2 to CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1
See EC_GROUP_copy_APIName for information about the generator
EVP_DigestSignUpdate_APIName hashes EVP_DigestSignUpdate_APIParam_3 bytes of data at EVP_DigestSignUpdate_APIParam_2 into the signature context EVP_DigestSignUpdate_APIParam_1
The lh_node_usage_stats_APIParam_1 lh_node_stats_APIParam_1 lh_stats_bio_APIParam_1 lh_stats_APIParam_1 lh_node_usage_stats_bio_APIParam_1 lh_node_stats_bio_APIParam_1 structure records statistics about most aspects of accessing the hash table
The load is the average number of data items per ` bucket ' in the hash table
EVP_DigestSignUpdate_APIName is currently implemented usig a macro
It can be used to traverse all BIOs in a chain or used in conjunction with BIO_find_type_APIName to find all BIOs of a certain type
the recipients certificate is needed to locate the appropriate recipients in the PKCS # 7 structure
it is possible to just add the required ciphers and digests
this can be done by prepending a buffering BIO
the sessions are unique for each SSL_CTX object
The sessions can be held in memory for each SSL_CTX_set_session_cache_mode_APIParam_1 SSL_CTX_get_session_cache_mode_APIParam_1
SSL_CTX_free_APIName decrements the reference count of SSL_CTX_free_APIParam_1 , and and removes the SSL_CTX object
then only those contained in the key will be printed
frees up the allocated memory
ERR_free_strings_APIName frees all previously loaded error strings
So the 'actual load' is the average number of searches that will need to find an item in the hash table
This function is effectively a version of the d2i_PKCS7_bio_APIName supporting streaming
This function is currently implemented using a macro
X509_VERIFY_PARAM_set_trust_APIName sets the trust setting in X509_VERIFY_PARAM_set_trust_APIParam_1 to X509_VERIFY_PARAM_set_trust_APIParam_2
Filter BIOs usually pass the operation to the next BIO in the chain
It can contain public as well as private RSA keys
EVP_DigestVerifyUpdate_APIName hashes EVP_DigestVerifyUpdate_APIParam_3 bytes of data at EVP_DigestVerifyUpdate_APIParam_2 into the verification context EVP_DigestVerifyUpdate_APIParam_1
The creation of a new SSL structure failed
The `` close notify '' alert is sent as a warning alert
Other examples for non-fatal errors are certificate errors
This function can be called several times on the same EVP_DigestVerifyUpdate_APIParam_1 to include additional data
Options already set before are not cleared !
BN_dup_APIName creates a new BN_copy_APIParam_1 BN_dup_APIParam_1 containing the value BN_copy_APIParam_2 BN_dup_APIParam_1
These functions load the certificates and private keys into the SSL_CTX or SSL object , respectively
Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_APIParam_2
Any previous SSL_CONF_CTX_set_ssl_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_APIParam_1 is cleared
BIOs can be joined together to form a chain
indicate errors relating to unrecognised options or missing arguments in the error queue
The receiving side may cancel the connection on reception of a warning alert on it discretion
A warning alert is sent
SSL_set_options_APIName adds the options set via bitmask in SSL_set_options_APIParam_2 to SSL_set_options_APIParam_1
Data read from or written to the first BIO traverses the chain to the end
the reason code can be obtained using ERR_get_error_APIName
EVP_SignInit_ex_APIName sets up signing context EVP_SignInit_ex_APIParam_1 to use digest EVP_SignInit_ex_APIParam_2 from ENGINE EVP_SignInit_ex_APIParam_3
SSL_CONF_CTX_set_ssl_APIName sets the context associated with SSL_CONF_CTX_set_ssl_APIParam_1 to the SSL_CONF_CTX_set_ssl_APIParam_1 structure SSL_CONF_CTX_set_ssl_APIParam_2
typically a memory allocation failure or an ASN .1 decoding error
SSL_clear_APIName resets the SSL object to allow for another connection
The last entry in the array is -LCB- 0,0 -RCB-
Others might not even call the callback
The PEM_read_bio_X509_CRL_APIParam_2 PEM_write_bio_X509_CRL_APIParam_2 PEM_read_X509_CRL_APIParam_2 PEM_write_X509_CRL_APIParam_2 functions process an X509 CRL using an X509_CRL structure
A certificate was revoked by A certificate signer
The reset operation however keeps several settings of the last sessions
These functions serve no recognizable purpose
This is currently 17K , sufficient for a maximum size TLS record
The EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIName sets the EC curve for EC parameter generation to EVP_PKEY_CTX_set_ec_paramgen_curve_nid_APIParam_2
BIO_set_write_buf_size_APIName sets the write buffer size of BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1 to BIO_new_bio_pair_APIParam_2
a default value is used
this is used to flush the final block through the BIO
It adds the current contents of the screen to the PRNG
an attempt is made to establish one on the first I/O call
SHA1_Update_APIName can be called repeatedly with chunks of the message to be hashed
SSLv2 is effectively disabled and neither clients nor servers will attempt to use SSLv2
clearing bit # 26 at run-time disables high-performance SSE2 code present in the crypto library
A `` close notify '' shutdown alert was sent to the peer , the connection is being considered closed and the session is closed and correct
Host name checks are out of scope with the DANE-EE_APIName certificate usage
The RAND_screen_APIName function is available for the convenience of Windows programmers
it can supply a ctrl_APIName handler , it can specify ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE 's flags , and it can expose an array of control command descriptions
the internal checks will be suppressed as appropriate
X509_STORE_CTX_set0_param_APIName sets the intenal verification parameter pointer to X509_STORE_CTX_set0_param_APIParam_2
PKCS7_decrypt_APIName extracts and decrypts the content from a PKCS # 7 envelopedData structure
A session was reused
Use the sequence SSL_get_session_APIName
EVP_EncodeInit_APIName initialises EVP_EncodeInit_APIParam_1 for the start of a new encoding operation
The prefix `` i2d '' is arguably wrong
Some might not give any useful information at all
ASN1_add_oid_module_APIName adds just the ASN1 OBJECT module
BN_ucmp_APIName compares their absolute values
The EVP_BytesToKey_APIName function provides some limited support for password based encryption
A server will only understand TLSv1 .1 client hello messages
BN_cmp_APIName compares the numbers BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2
X509_NAME_delete_entry_APIName deletes an entry from X509_NAME_delete_entry_APIParam_1 at position X509_NAME_delete_entry_APIParam_2
all these functions are implemented using macros
SSL_SESSION_set_time_APIName replaces the creation time of the session SSL_SESSION_set_time_APIParam_1 with the chosen value SSL_SESSION_set_time_APIParam_2
BF_set_key_APIName sets up the BF_set_key_APIParam_1 BF_set_key_APIParam_1 using the BF_set_key_APIParam_2 bytes long key at BF_set_key_APIParam_3
A TLS/SSL connection established with these methods will only understand the TLSv1 .1 protocol
The error code can be obtained by calling ERR_get_error_APIName
Also , dynamic locks are currently not used internally by OpenSSL , but may do so in the future
These defaults are: 40 bit RC2 encryption for certificates, triple DES encryption for private keys, a key iteration count of PKCS12_DEFAULT_ITER (currently 2048) and a MAC iteration count of 1.
Careful selection of the parameters will provide a PKCS # 5 PBKDF1 compatible implementation
The OpenSSL library handles incoming data by a dynamically allocated buffer
This mechanism is entirely based on the use of name-value pairs and assumes ASCII input -LRB- no unicode or UTF for now !
This library performs arithmetic operations on integers of arbitrary size
The TLS/SSL standard does not give any maximum size of the certificate chain
the callback function may not be called
This lifetime is specified by storing the creation time of the session and the timeout value valid at this time
d2i_X509_bio_APIName is similar to d2i_X509_APIName except d2i_X509_bio_APIName attempts to parse data from BIO d2i_X509_bio_APIParam_1
X509_check_private_key_APIName function checks the consistency of private key X509_check_private_key_APIParam_2 with the public key in X509_check_private_key_APIParam_1
The available SSL_set_ssl_method_APIParam_2 SSL_CTX_set_ssl_version_APIParam_2 choices are described in SSL_CTX_new_APIName
The builtin UI method doesn't care about this info
In OpenSSL 0.9.7 and later
the new session is assigned a maximum lifetime
BN_RECP_CTX_free_APIName frees the components of the BN_RECP_CTX_free_APIParam_1 
the default size is used
The old session is removed and replaced by the new session
the session is not reused
contains the peer 's certificate
the stack also contains the peer's certificate
d2i_PrivateKey_APIParam_2 d2i_AutoPrivateKey_APIParam_1 will be freed and replaced on a successful call
Some applications will want to allow the user to specify exactly which ENGINE they want used
The default mode is SSL_SESS_CACHE_SERVER
any other value indicates failure
On Windows BIO_new_files reserves for the filename argument to be UTF-8 encoded
Blowfish consists of a key setup phase and the actual encryption or decryption phase
UI_add_user_data_APIName adds a piece of memory for the method to use at any time
octet string , BIGNUM and hexadecimal respectively
The behaviour of SSL_shutdown_APIName additionally depends on the underlying BIO
This function is either a trinomial of the form
It was written for use in public key cryptography , such as RSA and Diffie-Hellman
SSL_read_APIName tries to read SSL_read_APIParam_3 bytes from the specified SSL_read_APIParam_1 into the buffer SSL_read_APIParam_2
Don't prefer ECDHE-ECDSA ciphers
recognise options intended for command line or configuration file use
SSL_SESSION_get_ex_new_index_APIName is used to register a new index for application specific data
PKCS7_decrypt_APIParam_2 is the private key of the recipient , PKCS7_decrypt_APIParam_3 is the recipients certificate , PKCS7_decrypt_APIParam_4 is a BIO to write the content to and PKCS7_decrypt_APIParam_5 is an optional set of flags
CMS_RecipientInfo_encrypt_APIName attempts to encrypt CMS_RecipientInfo structure CMS_RecipientInfo_encrypt_APIParam_2 CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_encrypt_APIParam_1 CMS_RecipientInfo_decrypt_APIParam_1
RC4 consists of a key setup phase and the actual encryption or decryption phase
RSA_public_encrypt_APIName encrypts the RSA_public_encrypt_APIParam_1 bytes at RSA_public_encrypt_APIParam_2 using the public key RSA_public_encrypt_APIParam_4 and stores the ciphertext in RSA_public_encrypt_APIParam_3
The functions EC_POINT_point2oct , EC_POINT_oct2point , EC_POINT_point2bn , EC_POINT_bn2point , EC_POINT_point2hex and EC_POINT_hex2point convert from and to EC_POINTs for the formats
It is also possible for the application to dynamically interrogate the loaded ENGINE implementations for the names , descriptions , and input flags of their available `` control commands '' , providing a more flexible configuration scheme
Error codes can be obtained by calling ERR_get_error_APIName
SSL_CTX_flush_sessions_APIName will only check sessions stored in the internal cache
It can add intermediate and optionally the root CA certificates using SSL_add1_chain_cert_APIName
The SSL_get_time_APIName , SSL_set_time_APIName , SSL_get_timeout_APIName , and SSL_set_timeout_APIName functions are synonyms for the SSL_SESSION __ APIName counterparts
EVP_VerifyFinal_APIName verifies the data in EVP_VerifyFinal_APIParam_1 using the public key EVP_VerifyFinal_APIParam_4 and against the EVP_VerifyFinal_APIParam_3 bytes at EVP_VerifyFinal_APIParam_2
Addition and multiplication operations within an F2 ^ m field are performed using an irreducible polynomial function f
encode file names in UTF-8
BN_mod_sqr_APIName takes the square of BN_mod_sqr_APIParam_2 modulo BN_mod_sqr_APIParam_3 and places the result in BN_mod_sqr_APIParam_1
An application will typically call SSL_use_certificate_APIName and SSL_use_PrivateKey_APIName to set the end entity certificate and private key
This flag has no effect on SSL v2 connections , or on DTLS connections
However , this is not required
ALPN protocol not selected
The output lines are indented by RSA_print_fp_APIParam_3 DSA_print_fp_APIParam_3 RSA_print_APIParam_3 DSA_print_APIParam_3 spaces
This function is effectively a version of the PEM_write_bio_PKCS7_APIName supporting streaming
it possible to work around this by adding a buffering BIO BIO_f_buffer_APIName to the chain
the BIO will behave in the manner described in the BIO_read_APIName and BIO_should_retry_APIName manual pages
BIO_new_bio_pair_APIName combines the calls to BIO_new_APIName , BIO_make_bio_pair_APIName and BIO_set_write_buf_size_APIName to create a connected pair of BIOs BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 , BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 with write buffer sizes BIO_new_bio_pair_APIParam_2 BIO_new_bio_pair_APIParam_2 and BIO_new_bio_pair_APIParam_4 BIO_new_bio_pair_APIParam_4
BIO_write_APIName will succeed and place data in the write buffer
SSL_SESS_CACHE_BOTH means that enable both SSL_SESS_CACHE_CLIENT and SSL_SESS_CACHE_SERVER at the same time
EC_POINT_clear_free destroys any sensitive data held within the EC_POINT and frees the EC_POINT memory
All other functions described here use des_read_pw_APIName to do the work
EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName are implemented as macros
BIO_do_handshake_APIName attempts to complete an SSL handshake on the supplied BIO and establish the SSL connection
EC_POINT_mul calculates the value generator EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 + EC_POINT_mul_APIParam_4 EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6 and stores the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2
they will automatically support ECDH using the most appropriate shared curve
BF_ofb64_encrypt_APIName is the OFB mode for Blowfish with 64 bit feedback
The following descriptions apply in the case of the built-in procedure
SMIME_write_PKCS7_APIParam_4 is an optional set of flags
Algorithms are loaded with OpenSSL_add_all_algorithms_APIName
SSL_CTX_set_cipher_list_APIName sets the list of available ciphers for SSL_CTX_set_cipher_list_APIParam_1 using the control string SSL_CTX_set_cipher_list_APIParam_2
the remove_session_cb is however called to synchronize with the external cache
SMIME_write_PKCS7_APIParam_1 is the BIO to write the data to
The list of ciphers is inherited by all SSL_set_cipher_list_APIParam_1 objects created from SSL_CTX_set_cipher_list_APIParam_1
The order of operations is significant
DSA_SIG_new_APIName allocates and initializes a DSA_SIG_new_APIParam_0 structure
These functions are implemented as macros
Details depend on the application
For the shift functions , BN_lshift1_APIParam_1 BN_rshift1_APIParam_1 BN_lshift_APIParam_1 BN_rshift_APIParam_1 and BN_is_bit_set_APIParam_1 BN_clear_bit_APIParam_1 BN_lshift1_APIParam_2 BN_rshift1_APIParam_2 BN_lshift_APIParam_2 BN_mask_bits_APIParam_1 BN_set_bit_APIParam_1 BN_rshift_APIParam_2 may be the same variable
The operation did not complete
RC4_set_key_APIName sets up the RC4_set_key_APIParam_1 RC4_set_key_APIParam_1 using the RC4_set_key_APIParam_2 bytes long key at RC4_set_key_APIParam_3
RSA_set_method_APIName selects RSA_set_method_APIParam_2 to perform all operations using the key RSA_set_method_APIParam_1
SSL_SESSION_set_timeout_APIName sets the timeout value for session SSL_SESSION_set_timeout_APIParam_1 in seconds to SSL_SESSION_set_timeout_APIParam_2
it will await an incoming connection before processing I/O calls
CRYPTO_THREADID_current_APIName records the currently-executing thread ID into the given CRYPTO_THREADID_current_APIParam_1 object
The EVP encode routines provide a high level interface to base 64 encoding and decoding
SSL_CTX_use_certificate_chain_file_APIName adds the first certificate found in the file to the certificate store
The other certificates are added to the store of chain certificates using SSL_CTX_add1_chain_cert_APIName
DES_pcbc_encrypt_APIName encrypt/decrypts using the propagating cipher block chaining mode used by Kerberos v4
The state is internally maintained
the state information however can be of significant interest
the CA name extracted from SSL_CTX_add_client_CA_APIParam_2 to the list of CAs sent to the client
SSL_CTX_add_client_CA_APIName adds the CA name
The SSL_CTX _ class of functions loads the certificates and keys into the SSL_CTX object SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_check_private_key_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_certificate_ASN1_APIParam_1 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1 SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1 SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1 SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_certificate_APIParam_1
SSL_get_ex_new_index_APIName is used to register a new index for application specific data
Querying the state information is not very informative 
BIO_reset_APIName clears any data in the write buffer
CA certificates are additionally looked up in the locations of trusted CA certificates , see SSL_CTX_load_verify_locations_APIName
There is no corresponding function working on a single SSL object
The result is placed back in EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3
EC_POINT_invert calculates the inverse of the supplied point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3
an SSL objects passes several states
SSL_CTX_set1_curves_list_APIName sets the supported curves for SSL_CTX_set1_curves_list_APIParam_1 to string SSL_CTX_set1_curves_list_APIParam_2
Any content written through the filter is used verbatim
SSL_set_info_callback_APIName does not provide diagnostic information
no canonical translation is performed
Anonymous ciphers also use ephemeral DH keys
SSL_CTX_use_certificate_chain_file_APIName loads a certificate chain from SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_chain_file_APIParam_1
Setting the maximum depth to 2 allows the levels 0 , 1 , and 2
SSL_CTX_set_ex_data_APIName is used to store application data at SSL_CTX_set_ex_data_APIParam_3 for SSL_CTX_set_ex_data_APIParam_2 into the SSL_CTX_set_ex_data_APIParam_1 object
Applications do not have to call BIO_do_handshake_APIName but may wish to do so to separate the handshake process from other I/O processing
Comparison is described in BN_cmp_APIName
higher level CA certificate '' , and so on
SSL_CTX_set_cert_verify_callback_APIName does not provide diagnostic information
BN_init_APIName initializes an existing uninitialized BN_init_APIParam_1
BN_new_APIName allocates and initializes a BN_init_APIParam_1 structure
BN_add_APIName describes most of the arithmetic operations
The conversion of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1s to external formats is described in BN_bn2bin_APIName
The output lines are indented by ECPKParameters_print_fp_APIParam_3 ECPKParameters_print_APIParam_3 spaces
The creation of BN_add_APIParam_1 BN_cmp_APIParam_1 BN_zero_APIParam_1 BN_rand_APIParam_1 BN_generate_prime_APIParam_1 BN_set_bit_APIParam_1 BN_bn2bin_APIParam_1 objects is described in BN_new_APIName
The ALPN and SNI callbacks are both executed Hello processing
SSL_CTX_clear_extra_chain_certs_APIName clears all extra chain certificates associated with SSL_CTX_clear_extra_chain_certs_APIParam_1
SSL_CTX_set_verify_depth_APIName and SSL_set_verify_depth_APIName set the limit up to which
BN_zero_APIName describes certain assignments , BN_rand_APIName the generation of random numbers , BN_generate_prime_APIName deals with prime numbers and BN_set_bit_APIName with bit operations
BN_CTX_get_APIName may be called repeatedly to obtain temporary BN_CTX_get_APIParam_0 BN_CTX_get_APIParam_0s
You can find out
EVP_DigestInit_ex_APIParam_2 will typically be supplied by a functionsuch as EVP_sha1_APIName
depth certificates in a chain are used
an ephemeral DH key exchange can take place
HMAC_CTX_cleanup_APIName erases the key and other data from the HMAC_CTX_cleanup_APIParam_1 and releases any associated resources
This will replace the RSA_METHOD used by the RSA key and
EVP_DigestInit_ex_APIName sets up digest context EVP_DigestInit_ex_APIParam_1 to use a digest EVP_DigestInit_ex_APIParam_2 from ENGINE EVP_DigestInit_ex_APIParam_3
a X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be issued
d2i_ECPKParameters_fp_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_fp_APIName attempts to parse data from FILE pointer ECPKParameters_print_fp_APIParam_1
starting with the subject 's certificate , followed by intermediate CA certificates , and ending at the highest level CA
Why is this useful you ask ?
This handshake is being canceled for some reason unrelated to a protocol failure
SSL_CTX_set0_verify_cert_store_APIName and SSL_CTX_set1_verify_cert_store_APIName set the certificate store used for certificate verification to SSL_CTX_set0_verify_cert_store_APIParam_2 SSL_CTX_set1_verify_cert_store_APIParam_2
OpenSSL_add_all_ciphers_APIName adds all encryption algorithms to the table including password based encryption algorithms
RSA_blinding_off_APIName turns blinding off and frees the memory used for the blinding factor
DES_cfb64_encrypt_APIName implements CFB mode of DES with 64bit feedback
d2i_RSA_PUBKEY_APIName and i2d_RSA_PUBKEY_APIName decode and encode an RSA public key using a SubjectPublicKeyInfo structure
BIO_read_APIName and BIO_write_APIName read or write the underlying socket
versions of OpenSSL before 1.0.2 only had a single certificate chain store for all certificate types , OpenSSL 1.0.2 and later have a separate chain store for each type
The ECPKParameters_print and ECPKParameters_print_fp functions print a human-readable output of the public parameters of the EC_GROUP to ECPKParameters_print_APIParam_1 or ECPKParameters_print_fp_APIParam_1
SHA-1 is a cryptographic hash function with a 160 bit output
The type of a key can be obtained with EVP_PKEY_type
MDC2 is a method to construct hash functions with 128 bit output from block ciphers
Data written to a buffering BIO is buffered and periodically written to the next BIO in the chain
ERR_set_mark_APIName sets a mark on the current topmost error record
OBJ_obj2txt_APIName converts the OBJ_obj2txt_APIParam_3 OBJ_obj2txt_APIParam_3 into a textual representation
BIO_next_APIName was added to OpenSSL 0.9.6 to provide a ` clean ' way to traverse a BIO chain or find multiple matches using BIO_find_type_APIName
The function EVP_PKEY_cmp_APIName compares the public key components and paramters of keys EVP_PKEY_cmp_APIParam_1 and EVP_PKEY_cmp_APIParam_2
Each call to this routine will encrypt the input bytes to output and update ivec and num
The size in bytes
OpenSSL_add_ssl_algorithms_APIName and SSLeay_add_ssl_algorithms_APIName are synonyms for SSL_library_init_APIName
BIO_set_ssl_renegotiate_bytes_APIName sets the renegotiate byte count to BIO_ctrl_APIParam_3
The paramgen_init_APIName and paramgen_APIName methods deal with key parameter generation
des_read_pw_string_APIName is available in the MIT Kerberos library as well , and is also available under the name EVP_read_pw_string_APIName
it is possible for them to fail
new ENGINE functionality was added to OpenSSL 0.9.7
BN_CTX_init_APIName initializes an existing uninitialized BN_CTX_new_APIParam_0
The output format can be extensively customised by use of the X509_NAME_print_ex_APIParam_4 parameter
It is possible to directly access this database eg for searching
SSL_SESSION_free_APIName will be called for that session
The standard terminology for ephemeral Diffie-Hellman schemes is DHE or ECDHE
BN_clear_APIName erases the memory used by BN_clear_APIParam_1 and sets BN_clear_APIParam_1 to the value 0
X509_free_APIName frees up the X509_free_APIParam_1 structure X509_free_APIParam_1
EVP_DigestUpdate_APIName hashes EVP_DigestUpdate_APIParam_3 bytes of data at EVP_DigestUpdate_APIParam_2 into the digest context EVP_DigestUpdate_APIParam_1
BIO_free_all_APIName can be called to free up the whole chain
the numerical form will always be used
The paramgen_init_APIName and paramgen_APIName methods are called by EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName to handle the parameter generation process
X509_NAME_print_ex_APIName prints a human readable version of X509_NAME_print_ex_APIParam_2 to BIO X509_NAME_print_ex_APIParam_1
the SSL session is automatically renegotiated
the store associated with the parent SSL_CTX is used instead to retain compatibility with previous versions of OpenSSL
SSL_library_init_APIName adds ciphers and digests used directly and indirectly by SSL/TLS
The function EVP_PKEY_derive_APIName can be called more than once on the same context
RSA_free_APIName frees the RSA_free_APIParam_1 structure and its components
BN_clear_APIName is used to destroy sensitive data such as keys
EVP_DigestUpdate_APIName can be called several times on the same EVP_DigestUpdate_APIParam_1 to hash additional data
The representation is written as
The sessions in the internal session cache are kept in an lhash_APIName type database
All the functions work through a context of the type UI
SSL_check_private_key_APIName performs the same check for SSL_check_private_key_APIParam_1
OBJ_cleanup_APIName cleans up OpenSSLs internal object table
The following functions are included in the DES library for compatibility with the MIT Kerberos library
ECDSA_SIG_new_APIName allocates a new ECDSA_SIG_new_APIParam_0 structure and initialize it
The PEM functions read or write structures in PEM format
BN_MONT_CTX_set_APIName sets up the BN_MONT_CTX_set_APIParam_1 structure from the modulus BN_MONT_CTX_set_APIParam_2 by precomputing its inverse and a value R
BIO_new_fp_APIName creates a file BIO wrapping BIO_new_fp_APIParam_1
These functions implement the Digital Signature Algorithm
SSL_CTX_set_options_APIName and SSL_set_options_APIName affect the protocol behaviour of the SSL library
Signature generation and verification are described in DSA_sign_APIName
As of version 0.9.7 , DH_METHOD implementations are grouped together with other algorithmic APIs in DH_new_method_APIParam_1 modules
In this sense PEM format is simply base64 encoded data surrounded by header lines
BN_is_zero_APIName , BN_is_one_APIName , BN_is_word_APIName and BN_is_odd_APIName are macros
SSL_CTX_check_private_key_APIName checks the consistency of a private key with the corresponding certificate loaded into SSL_CTX_check_private_key_APIParam_1
DES_ede3_ofb64_encrypt_APIName and DES_ede2_ofb64_encrypt_APIName is the same as DES_ofb64_encrypt_APIName , using Triple-DES
This is a limitation of the current RC5 code rather than the EVP interface
This constant is useful for use in comparisons and assignment
The generation of shared DSA parameters is described in DSA_generate_parameters_APIName
The behaviour of the API can be changed by using the similar SSL_CTX_set_mode_APIName and SSL_set_mode_APIName functions
BN_bin2bn_APIName converts the positive integer in big-endian form of length BN_bin2bn_APIParam_2 at BN_bin2bn_APIParam_1 into a BN_bin2bn_APIParam_3 and places it in BN_bin2bn_APIParam_3
a new BN_bin2bn_APIParam_3 is created
The functions EC_GROUP_get_asn1_flag and EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for the curve
Working in this co-ordinate system provides more efficient point multiplication operations
To set or get the projective co-ordinates use EC_POINT_set_Jprojective_coordinates_GFp and EC_POINT_get_Jprojective_coordinates_GFp respectively
There are two type of BIO , a source/sink BIO and a filter BIO
All these functions are implemented as macros
DES_set_odd_parity_APIName sets the parity of the passed DES_set_odd_parity_APIParam_1 to odd
it does n't need to know or care about ENGINE control operations a configuration file
A server will only understand TLSv1 .2 client hello messages
EVP_DecodeInit_APIName initialises EVP_DecodeInit_APIParam_1 for the start of a new decoding operation
SSL_CTX_set_quiet_shutdown_APIName sets the `` quiet shutdown '' flag for SSL_CTX_set_quiet_shutdown_APIParam_1 to be SSL_CTX_set_quiet_shutdown_APIParam_2
An EC_KEY represents a public key and an associated private key
A new EC_KEY can be constructed by calling EC_KEY_new
the last item installed will be checked
BIO_set_fd_APIName sets the socket of BIO BIO_set_fd_APIParam_1 to BIO_set_fd_APIParam_2 and the close flag to BIO_set_fd_APIParam_3
it is possible for BIO_should_io_special_APIName with the reason BIO_RR_ACCEPT
A null bio can be placed on the end of a chain to discard any data passed through it
this is a named curve with an associated ASN1 OID
The function EVP_PKEY_verify_APIName can be called more than once on the same context
BN_BLINDING_update_APIName updates the BN_BLINDING_update_APIParam_1 parameters by squaring the BN_BLINDING_new_APIParam_1 and
BN_BLINDING_new_APIParam_2 or , after specific number of uses and , by re-creating the blinding parameters
the last item added into SSL_CTX_check_private_key_APIParam_1 will be checked
the RSA key/certificate pair will be checked
These messages can only appear with a BIO_s_connect_APIName or BIO_s_accept_APIName BIO , respectively
the method of the SSL object is reset to the method currently set in the corresponding SSL_CTX object
A TLS/SSL connection established with these methods will only understand the TLSv1 .2 protocol
BIO_get_fd_APIName and BIO_set_fd_APIName can be called to retrieve or set the accept socket
A curve can be associated with the EC_KEY by calling EC_KEY_set_group
The reference count for the newly created EC_KEY is initially set to 1
The verification of certificates can be controlled by a set of logically or'ed SSL_CTX_set_verify_APIParam_2 SSL_set_verify_APIParam_2 flags
A new session was negotiated
256 bit AES , Gost R3411-94 , Gost 28147-89 , 192 bit AES , 128 bit AES , triple DES , 128 bit RC2 , 64 bit RC2 , DES and 40 bit RC2
CMS_add1_signer_APIName adds a signer with certificate CMS_add1_signer_APIParam_2 and private key CMS_add1_signer_APIParam_3 using message digest CMS_add1_signer_APIParam_4 to CMS_ContentInfo SignedData structure CMS_add1_signer_APIParam_1
EVP_PKEY_meth_copy_APIName copies an EVP_PKEY_meth_copy_APIParam_1 object from EVP_PKEY_meth_copy_APIParam_2 to EVP_PKEY_meth_copy_APIParam_1
BIO_reset_APIName attempts to change the file pointer to the start of file using fseek
SSL_CTX_add_client_CA_APIName and SSL_add_client_CA_APIName can be used to add additional items the list of client CAs
The underlying BIO was not connected yet to the peer and the call would block in connect_APIName / accept_APIName
it is passed and retrieved as a CRYPTO_EX_new_APIParam_1 CRYPTO_EX_dup_APIParam_3 RSA_get_ex_new_index_APIParam_2 CRYPTO_EX_free_APIParam_1 RSA_set_ex_data_APIParam_3 type
The call to EVP_DigestSignFinal_APIName internally finalizes a copy of the digest context
EVP_cleanup_APIName removes all ciphers and digests from the table
In previous versions of OpenSSL there was a link between message digest types and public key algorithms
select_APIName or poll_APIName for writing on the socket file descriptor can be used
SMIME_write_PKCS7_APIName adds the appropriate MIME headers to a PKCS # 7 structure to produce an S/MIME message
The certificate verification depth set with SSL_verify_depth_APIName stops the verification at a certain depth
This function is thread safe , unlike the normal crypt
i2d_PKCS7_bio_stream_APIName outputs a PKCS7 structure in BER format
DES_fcrypt_APIName is a fast version of the Unix crypt_APIName function
BIO_set_accept_port_APIName uses the string BIO_set_accept_port_APIParam_2 to set the accept port
The prime number generation has a negligible error probability
SSL_clear_APIName does not affect the settings
EC_GROUP_get_degree gets the degree of the field
RSA_verify_ASN1_OCTET_STRING_APIParam_1 RSA_sign_ASN1_OCTET_STRING_APIParam_1 is ignored
SSL_clear_options_APIName clears the options set via bitmask in SSL_clear_options_APIParam_2 to SSL_clear_options_APIParam_1
The RSA_padding_xxx_xxx_APIName functions are called from the RSA encrypt , decrypt , sign and verify functions
In other cases an application might consider a configuration file error as fatal and exit immediately
This version takes only a small amount of space relative to other fast crypt_APIName implementations
EVP_PKEY_CTX_dup_APIName duplicates the context EVP_PKEY_CTX_dup_APIParam_1
These paramaters include the EC_GROUP_set_generator_APIParam_2 , the EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 and the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2
Changes to SSL_CTX_set_options_APIParam_1 SSL_CTX_clear_options_APIParam_1 SSL_CTX_get_options_APIParam_1 do not affect already created SSL objects
Errors may also be handled differently by different applications
The EC_GROUP_set_generator_APIParam_2 is a well defined point on the curve chosen for cryptographic operations
BIO_should_io_special_APIName is true
After the call to EVP_PKEY_sign_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
BN_generate_prime_ex_APIParam_3 will be a safe prime
the correct handshake routines are automatically set
a new client CA list for SSL_CTX_add_client_CA_APIParam_1 or SSL_add_client_CA_APIParam_1 is opened
So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that can be resumed
The main purpose of these functions is to enable an application to lookup recipient keys using any appropriate technique
the current option setting is copied
an application has been configured by its user or admin to want to use the ACME ENGINE
the option settings of the SSL object are used
BN_CTX_new_APIName allocates and initializes a BN_CTX_new_APIParam_0 structure
The EC_GROUP_set_generator_APIParam_3 EC_GROUP_get_order_APIParam_2 multipied by the EC_GROUP_set_generator_APIParam_4 EC_GROUP_get_cofactor_APIParam_2 gives the number of points on the curve
A certificate has expired or is not currently valid
It will typically be called in the certificate callback
the password dialog may ask for the same password twice for comparison
The new structure inherits the settings of the underlying context SSL_new_APIParam_1
Changes of the timeout value do not affect already established sessions
The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags_APIName to encode the data all on one line or expect the data to be all on one line
These can be used by passing EVP_rc2_40_cbc_APIName and EVP_rc2_64_cbc_APIName respectively
The digestsign_APIName and digestverify_APIName methods could be called by EVP_DigetSign_APIName and EVP_DigestVerify_APIName
SSL_CTX_get_ex_data_APIName is used to retrieve the information for SSL_CTX_get_ex_data_APIParam_2 from SSL_CTX_get_ex_data_APIParam_1
SSL_CTX_set_tlsext_servername_arg_APIName sets a context-specific argument to be passed into the callback for this SSL_CTX_set_tlsext_servername_arg_APIParam_1
DSA_new_APIName allocates and initializes a DSA_new_APIParam_0 structure
CMS_decrypt_APIName extracts and decrypts the content from a CMS EnvelopedData structure
Due to this realization , all sessions behave according to the timeout value valid at the time of the session negotiation
The operation performed by key or parameter generation depends on the algorithm used
It is equivalent to calling DSA_new_method
SSL BIOs are exceptional in that
The stores pointers associated with an SSL_CTX structure are copied to any SSL structures
SMIME_write_CMS_APIParam_4 is an optional set of flags
SSL_set_session_APIName sets SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 to be used
As a result SSL structures will not be affected
EVP_PKEY_free_APIName frees up the private key EVP_PKEY_free_APIParam_1
The digestsign_APIName and digestverify_APIName methods are used to generate or verify a signature in a one-shot mode
The EVP_PKEY_CTX_set_signature_md_APIName macro can be used with any public key algorithm supporting signature operations
RIPEMD-160 is a cryptographic hash function with a 160 bit output
The EVP_PKEY_CTX_set_signature_md_APIName macro sets the message digest type used in a signature
SMIME_write_CMS_APIParam_1 is the BIO to write the data to
In some cases the generation option merely sets the appropriate fields in an EVP_PKEY structure
The PEM_write_NETSCAPE_CERT_SEQUENCE_APIParam_2 PEM_write_bio_NETSCAPE_CERT_SEQUENCE_APIParam_2 functions process a Netscape Certificate Sequence using a NETSCAPE_CERT_SEQUENCE structure
the reference count is decremented again during SSL_connect_APIName
SMIME_write_CMS_APIParam_2 is the appropriate SMIME_write_CMS_APIParam_2 structure
The file descriptor linked to SSL_get_fd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_rfd_APIParam_1
d2i_RSAPublicKey_APIName and i2d_RSAPublicKey_APIName decode and encode a PKCS # 1 RSAPublicKey structure
the reference count of SSL_set_session_APIParam_2 SSL_set_session_APIParam_2 is incremented by 1
RAND_load_file_APIName reads a number of bytes from file RAND_load_file_APIParam_1 and adds them to the PRNG
The previous two bugs are fixed in the newer EVP_VerifyDigest_APIName function
Cache space may also be reclaimed by calling SSL_CTX_flush_sessions_APIName to remove expired sessions
EC_GROUP_dup creates a new EC_GROUP object and copies the content from EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 to the newly created EC_GROUP object
SSL structures will not be affected by any chains subsequently changed in the parent SSL_CTX
SSL_CTX_flush_sessions_APIName causes a run through the session cache of SSL_CTX_flush_sessions_APIParam_1 to remove sessions expired at time SSL_CTX_flush_sessions_APIParam_2
It is a BIO_ctrl_APIName macro
The function EC_POINT_point2hex_APIName will allocate sufficient memory to store the hexadecimal string
The text variant of the version number and the release date
The chain store is used to build the certificate chain
The functions EC_GFp_nistp224_method , EC_GFp_nistp256_method and EC_GFp_nistp521_method offer 64 bit optimised implementations for the NIST P224 , P256 and P521 curves respectively
The ENGINE API and internal architecture is currently being reviewed
Several OpenSSL structures can have application specific data attached to them
These functions decode and encode an X509 CRL
CMS_SignerInfo_cert_cmp_APIName compares the certificate CMS_SignerInfo_cert_cmp_APIParam_2 against the signer identifier CMS_SignerInfo_cert_cmp_APIParam_1
ASN1_TIME_check_APIName checks the syntax of ASN1_TIME structure ASN1_TIME_check_APIParam_1
EC_POINT_copy copies the point EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 into EC_POINT_copy_APIParam_1
CONF_modules_unload_APIName finishes and unloads configuration modules
CRYPTO_get_new_dynlockid_APIName is used to create locks
BIO_should_read_APIName is true
CRYPTO_get_new_dynlockid_APIName will call dyn_create_function for the actual creation
X509_STORE_CTX_set_default_APIName looks up and sets the default verification method to X509_STORE_CTX_set_default_APIParam_2
UI_new_APIName creates a new UI using the default UI method
The session id context becomes part of the session
the no shared cipher error is generated
i2d_X509_APIName the DER encoded data to the buffer at i2d_X509_APIParam_2
The session id context is set by the SSL/TLS server
The chains associate with an SSL_CTX structure are copied to any SSL structures
an SSL_CTX structure are copied to any SSL structures
The EVP_PKEY_CTX_set_dh_paramgen_generator_APIName macro sets DH generator to EVP_PKEY_CTX_set_dh_paramgen_generator_APIParam_2 for DH parameter generation
CMS_decrypt_APIParam_2 is the private key of the recipient , CMS_decrypt_APIParam_3 is the recipient 's certificate , CMS_decrypt_APIParam_5 is a BIO to write the content to and CMS_decrypt_APIParam_6 is an optional set of flags
starting with OpenSSL 0.9.5, the complete file is read
unused sessions are dropped from the end of the cache
BN_ucmp_APIName is the same using the absolute values of BN_cmp_APIParam_1 BN_ucmp_APIParam_1 and BN_cmp_APIParam_2 BN_ucmp_APIParam_2
This uses the function X509_VERIFY_PARAM_lookup_APIName to find an appropriate set of parameters from X509_STORE_CTX_set_default_APIParam_2
data can be buffered inside SSL_pending_APIParam_1 and are ready for immediate retrieval with SSL_read_APIName
Automatic chain building is performed on each new session
For reference , on x86 flush cache line was introduced with the SSE2 extensions
UI_add_input_string_APIName and UI_add_verify_string_APIName add a prompt to the UI , as well as flags and a result buffer and the desired minimum and maximum sizes of the result , not counting the final NUL character
X509_NAME_ENTRY_set_data_APIName sets the field value of X509_NAME_ENTRY_set_data_APIParam_1 to string type X509_NAME_ENTRY_set_data_APIParam_2 and value determined by X509_NAME_ENTRY_set_data_APIParam_3 and X509_NAME_ENTRY_set_data_APIParam_4
SSL_do_handshake_APIName will wait for a SSL/TLS handshake to take place
2 is used
BF_encrypt_APIName and BF_decrypt_APIName are the lowest level functions for Blowfish encryption
EVP_CIPHER_CTX_ctrl_APIName allows various cipher specific parameters to be determined and set
 all modules , including builtin modules will be unloaded
All the remaining `` functions '' are implemented as macros
The size can be determined by calling BN_bn2mpi
The alternative is to use BF_ecb_encrypt_APIName
The seed values can not be recovered from the PRNG output
RAND_add_APIName may be called with sensitive data such as user entered passwords
Envelope encryption is the usual method of using public key encryption on large amounts of data.
These functions decode and encode an CMS ContentInfo structure
It uses dynamic memory allocation for storing its data structures
The first form is those defined over the prime field Fp
One chain can be set for each key type supported by a server
SSL_CTX_get0_chain_certs_APIName retrieves the chain associated with the current certificate of SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1
These implementations are registered in the tables and indexed by an ` nid ' value , , and ENGINEs can support arbitrarily many of them
The macro EVP_PKEY_CTX_set_rsa_padding_APIName sets the RSA padding mode for EVP_PKEY_CTX_set_rsa_padding_APIParam_1
SSL_set_bio_APIName can not fail
EVP_MD_CTX_copy_ex_APIName can be used to copy the message digest state from EVP_MD_CTX_copy_ex_APIParam_2 to EVP_MD_CTX_copy_ex_APIParam_1
BN_BLINDING_convert_APIName and BN_BLINDING_invert_APIName are wrapper functions for BN_BLINDING_convert_ex_APIName and BN_BLINDING_invert_ex_APIName with BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2 set to NULL
This allows applications to initialize the context externally
The function EVP_PKEY_verify_recover_APIName can be called more than once on the same context
PKCS12_parse_APIName parses a PKCS12 structure
RAND_query_egd_bytes_APIName performs the actual query of the EGD daemon on socket RAND_query_egd_bytes_APIParam_1
BIO_make_bio_pair_APIName joins two separate BIOs into a connected pair
SSL_new_APIName , SSL_free_APIName , SSL_shutdown_APIName , SSL_set_shutdown_APIName , SSL_CTX_set_options_APIName , ssl_APIName , SSL_CTX_set_client_cert_cb_APIName
Callback has been called to indicate error exit of a handshake function
the handshake will be started
using SSL_CTX BIO_new_ssl_APIParam_1 and using client mode
BIO_new_ssl_APIName allocates an SSL BIO
only modules loaded from DSOs will be unloads
This is useful
RAND_query_egd_bytes_APIParam_3 bytes are queried and written into RAND_query_egd_bytes_APIParam_2
the PSK identity and the pre-shared key to use
RAND_egd is a wrapper for RAND_egd_bytes
Applications can use longer keys to maintain a consistent level of security
BF_encrypt_APIName and BF_decrypt_APIName encrypt/decrypt the first 64 bits of the vector pointed by BF_encrypt_APIParam_1 BF_decrypt_APIParam_1 , using the key BF_encrypt_APIParam_2 BF_decrypt_APIParam_2
Applications can also use SSL_CTX_cmd_APIName to process command lines
RAND_egd_APIName queries the entropy gathering daemon EGD on socket RAND_egd_APIParam_1
Enable both SSL_SESS_CACHE_NO_INTERNAL_LOOKUP and SSL_SESS_CACHE_NO_INTERNAL_STORE at the same time
The purpose of the callback function is to select
DH_generate_key_APIName performs the first step of a Diffie-Hellman key exchange by generating private and public DH values
RAND_egd_APIName queries 255 bytes and uses RAND_add_APIName to seed the OpenSSL built-in PRNG
BN_num_bytes_APIName is a macro
In X509_NAME_add_entry_by_txt_APIName the X509_NAME_add_entry_by_txt_APIParam_2 string represents the field name using OBJ_txt2obj
A TLSCiphertext decrypted in an invalid way
SHA1_Init_APIName initializes a SHA1_Init_APIParam_1 structure
SSL_CTX_clear_options_APIName clears the options set via bitmask in SSL_CTX_clear_options_APIParam_2 to SSL_CTX_clear_options_APIParam_1
The status nibble has one of the values 0 for development , 1 to e for betas 1 to 14 , and f for release
By calling DH_compute_key_APIName , these are combined with the other party 's public value to compute the shared key
The PEM_read_PKCS7_APIParam_2 PEM_write_bio_PKCS7_APIParam_2 PEM_write_PKCS7_APIParam_2 PEM_read_bio_PKCS7_APIParam_2 functions process a PKCS # 7 ContentInfo using a PKCS7 structure
BN_MONT_CTX_new_APIName allocates and initializes a BN_MONT_CTX_init_APIParam_1 structure
After the call to EVP_PKEY_encrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
SHA384 and SHA512 use SHA384_Update_APIParam_1 SHA512_Final_APIParam_2 SHA384_Final_APIParam_2 SHA512_Init_APIParam_1 SHA512_Update_APIParam_1 SHA384_Init_APIParam_1
ASN1_generate_v3_APIParam_2 or ASN1_generate_nconf_APIParam_2 can be set to NULL
SSL_set_verify_result_APIName overrides the verification result
BN_MONT_CTX_init_APIName initializes an existing uninitialized BN_MONT_CTX_init_APIParam_1
RAND_query_egd_bytes_APIParam_3 bytes are queried and used to seed the OpenSSL built-in PRNG using RAND_add_APIName
SSL_want_APIName examines the internal state information of the SSL object
The length of the memory block can be obtained using EC_GROUP_get_seed_len
Additionally , OpenSSL supports dynamic locks , and sometimes , some parts of OpenSSL need it for better performance
It only changes the verification result of the SSL_set_verify_result_APIParam_1 object
SSL_CTX_new_APIName initializes the list of ciphers , the session cache setting , the callbacks , the keys and certificates and the options to SSL_CTX_new_APIName default values
The DSA_verify_APIParam_1 DSA_sign_APIParam_1 parameter is ignored
An invalid value for SSLeay_version_APIParam_1 was given
ANSI X9 .62 defines a method of generating the curve parameter b from a random number
d2i_AutoPrivateKey_APIName is similar to d2i_PrivateKey_APIName except d2i_AutoPrivateKey_APIName attempts to automatically detect the private key format
the BIO can transparently handle SSL connections , unencrypted network connections and file I/O
either TLSCiphertext was not an even multiple of the block length or TLSCiphertext 's padding values were not correct
The SHA224 , SHA256 , SHA384 and SHA512 families of functions operate in the same way as for the SHA1 functions
The OpenSSL EC library does not use this seed value but does enable you to inspect it using EC_GROUP_get0_seed
this may include identifiers for the application session , application algorithms or parameters , or the lifetime of the context
HMAC_CTX_init_APIName initialises a HMAC_CTX_init_APIParam_1 before first use
The reference count of the X509 object is incremented by one
the overall security is only 128 bits
Check the error stack for more information
EC_POINT_method_of obtains the EC_METHOD associated with EC_POINT_free_APIParam_1 EC_POINT_clear_free_APIParam_1 EC_POINT_set_to_infinity_APIParam_2 EC_POINT_method_of_APIParam_1
it will not be destroyed
These functions are used to obtain temporary BN_CTX_get_APIParam_0 variables from a BN_CTX_start_APIParam_1 BN_CTX_end_APIParam_1 BN_CTX_get_APIParam_1
EC_POINT_copy , EC_POINT_set_to_infinity , EC_POINT_set_Jprojective_coordinates_GFp , EC_POINT_get_Jprojective_coordinates_GFp , EC_POINT_set_affine_coordinates_GFp , EC_POINT_get_affine_coordinates_GFp , EC_POINT_set_compressed_coordinates_GFp , EC_POINT_set_affine_coordinates_GF2m , EC_POINT_get_affine_coordinates_GF2m , EC_POINT_set_compressed_coordinates_GF2m and EC_POINT_oct2point
The field value to be added is in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 of length X509_NAME_add_entry_by_txt_APIParam_5 X509_NAME_add_entry_by_OBJ_APIParam_5 X509_NAME_add_entry_by_NID_APIParam_5
SSL_CTX_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1
The EVP_PKEY_CTX_set_rsa_padding_APIParam_2 parameter can take the value RSA_PKCS1_PADDING for PKCS # 1 padding , RSA_SSLV23_PADDING for SSLv23 padding , RSA_NO_PADDING for no padding , RSA_PKCS1_OAEP_PADDING for OAEP padding , RSA_X931_PADDING for X9 .31 padding and RSA_PKCS1_PSS_PADDING
SSL_CTX_use_RSAPrivateKey_APIName adds the private key SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 of type RSA to SSL_CTX_use_PrivateKey_APIParam_1 SSL_CTX_use_RSAPrivateKey_APIParam_1 SSL_CTX_use_certificate_APIParam_1 SSL_CTX_use_PrivateKey_APIParam_1
It is implemented as a macro
SSL_SENT_SHUTDOWN and SSL_RECEIVED_SHUTDOWN can be set at the same time
The use of a read only memory BIO avoids this problem
CRYPTO_destroy_dynlockid_APIName is used to destroy locks
CRYPTO_destroy_dynlockid_APIName will call dyn_destroy_function for the actual destruction
SSL_CTX_set1_curves_APIName sets the supported curves for SSL_CTX_set1_curves_APIParam_1 to SSL_CTX_set1_curves_APIParam_3 curves in the array SSL_CTX_set1_curves_APIParam_2
OpenSSL versions after 1.0.2 will report the standard terms via SSL_CIPHER_get_name and SSL_CIPHER_description
SSL_use_PrivateKey_APIName adds SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 SSL_CTX_use_PrivateKey_APIParam_2 SSL_use_PrivateKey_APIParam_2 as private key to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1
In this way any platform specific operations are hidden by the BIO abstraction
For a TLS client the curves are used directly in the supported curves extension
Having called any of these functions , ENGINE objects would have been dynamically allocated and populated with these implementations and linked into OpenSSL 's internal linked list
The function OPENSSL_load_builtin_modules_APIName adds all the standard OpenSSL configuration modules to the internal list
The behaviour of SSL_read_APIName depends on the underlying BIO
The reference count of the STACK_OF object is not incremented
SSL_use_RSAPrivateKey_APIName adds SSL_CTX_use_RSAPrivateKey_APIParam_2 SSL_use_RSAPrivateKey_APIParam_2 as private key of type RSA to SSL_use_PrivateKey_APIParam_1 SSL_use_RSAPrivateKey_APIParam_1 SSL_use_certificate_APIParam_1 SSL_use_PrivateKey_APIParam_1
Using accept BIOs , TCP/IP connections can be accepted and data transferred using only BIO routines
They can be used by the OpenSSL configuration code
For a TLS server the curves are used to determine the set of shared curves
In public keys , the private exponent and the related secret values are NULL
the original value will reappear
BN_MONT_CTX_free_APIName frees the components of the BN_MONT_CTX_free_APIParam_1 , and
The TLS standard allows the integration of compression methods into the communication
It is also possible to set a custom seed using EC_GROUP_set_seed and passing a pointer to a memory block , along with the length of the seed
the field length is calculated internally using strlen
The function SSL_CONF_CTX_new_APIName allocates and initialises an SSL_CONF_CTX_new_APIParam_0 structure for use with the SSL_CONF functions
it will be performed transparently during the SSL_read_APIName operation
Not all members of the X509_STORE are used
the current time is used
then adding a buffering BIO to the chain will speed up the process
These functions handle application specific data in X509_STORE_CTX structures
It does not become part of the established session
The SSL BIO is reset to the initial accept or connect state
Applications can use the CONF_modules_load_APIName function
d2i_Netscape_RSA_APIName , i2d_Netscape_RSA_APIName decode and encode an RSA private key in NET format
BIO_ssl_copy_session_id_APIName copies an SSL session id between BIO chains BIO_ssl_copy_session_id_APIParam_2 and BIO_ssl_copy_session_id_APIParam_1
this will typically disconnect the underlying transport
The current state information can be obtained using the SSL_state_string_APIName family of functions
Some other issue arose in processing the certificate , rendering it unacceptable
BIO_reset_APIName is sent to the next BIO in the chain
Calling BIO_reset_APIName on an SSL BIO closes down any current SSL connection by calling SSL_shutdown_APIName
The ssl session contains all information required to re-establish the connection without a new handshake
The EVP_PKEY_CTX_new_APIName function allocates public key algorithm context using the algorithm specified in EVP_PKEY_CTX_new_APIParam_1 and ENGINE EVP_PKEY_CTX_new_APIParam_2
Applications for non-public use may agree on certain compression methods
CRYPTO_THREADID_cmp_APIName compares two thread IDs
SSL_CTX_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_CTX_set_generate_session_id_APIParam_1 to be SSL_CTX_set_generate_session_id_APIParam_2
These functions handle RSA signatures at a low level
EC_POINT_add , EC_POINT_dbl , EC_POINT_invert , EC_POINT_make_affine , EC_POINTs_make_affine , EC_POINTs_make_affine , EC_POINT_mul , EC_POINTs_mul and EC_GROUP_precompute_mult
A server will only understand SSLv2 client hello messages
A functional reference can be obtained in one of two ways
It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id_APIName on the internal SSL pointer
SSL_CTX_get_ex_new_index_APIName is used to register a new index for application specific data
The function SSL_CONF_finish_APIName is used to finalise any operations or to process defaults
this will normally be a public key
A TLS/SSL connection established with these methods will only understand the SSLv2 protocol
BIO_set_APIName sets the method of an already existing BIO
The MIME parser used by SMIME_read_PKCS7_APIName is somewhat primitive
The EVP signature verification routines are a high level interface to digital signatures
The EVP_PKEY_derive_set_peer_APIName function sets the peer key
Calls to BIO_read_APIName and BIO_write_APIName read and write data to the underlying stream
BN_BLINDING_thread_id_APIName provides access to the BN_BLINDING_thread_id_APIParam_0 object within the BN_BLINDING_thread_id_APIParam_1 structure
d2i_DSA_PUBKEY_APIName and i2d_DSA_PUBKEY_APIName decode and encode an DSA public key using a SubjectPublicKeyInfo structure
BN_BLINDING_free_APIName frees the BN_BLINDING_free_APIParam_1 structure
OpenSSL_add_all_algorithms_APIName adds all algorithms to the table
BIO_set_close_APIName sets the BIO BIO_set_close_APIParam_1 close flag to BIO_set_close_APIParam_2
from an existing structural reference to the required ENGINE , or by asking OpenSSL for the default operational ENGINE for a given cryptographic purpose
SSL_set_quiet_shutdown_APIName sets the `` quiet shutdown '' flag for SSL_set_quiet_shutdown_APIParam_1 SSL_set_quiet_shutdown_APIParam_1 to be SSL_set_quiet_shutdown_APIParam_2 SSL_set_quiet_shutdown_APIParam_2
The random number generator does not need to be seeded for RSA signatures
SSL_CTX_use_certificate_APIName loads the certificate SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_CTX_use_certificate_APIParam_1 , SSL_use_certificate_APIName loads SSL_CTX_use_certificate_APIParam_2 SSL_use_certificate_APIParam_2 into SSL_use_certificate_APIParam_1
This is to help users provide proper locking
The mark is removed
the SSL_SESSION object is automatically allocated
These functions are not normally called directly , various macros are used instead
The function EVP_PKEY_decrypt_APIName can be called more than once on the same context
BIO_ctrl_APIName , BIO_callback_ctrl_APIName , BIO_ptr_ctrl_APIName and BIO_int_ctrl_APIName are BIO `` control '' operations taking arguments of various types
This is to help users provide proper
the BIO waits for an incoming connection
In some cases , these BIGNUM values will not be used by the implementation or may be used for alternative data storage
There is no data to be written or to be read
the data just read with an internal copy operation
The best solution is probably to avoid deleting items from the hash table inside a `` doall '' callback !
It is not changed
RSA_blinding_on_APIName turns blinding on for key RSA_blinding_on_APIParam_1 RSA_blinding_on_APIParam_1 and generates a random blinding factor
The server will always generate a new DH key
Every read from a read write memory BIO will remove and the BIO is read in small chunks , the operation can be very slow
HMAC_Update_APIName can be called repeatedly with chunks of the message to be authenticated
The functions EC_KEY_get0_group , EC_KEY_set_group , EC_KEY_get0_private_key , EC_KEY_set_private_key , EC_KEY_get0_public_key , and EC_KEY_set_public_key get and set the EC_GROUP object , the private key and the EC_POINT public key for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1 respectively
The supplied data is copied
Content is processed and streamed on the fly and not all held in memory at once
The output of the filter is written to BIO_new_CMS_APIParam_1
`` INTERNAL '' commands are not intended to be exposed to text-based configuration by applications , administrations , users , etc
for files command names such as "SSLProtocol", "SSLOptions" etc are recognised instead of "Protocol" and "Options"
BIO_do_accept_APIName serves two functions
Command prefixes alter the commands recognised by subsequent SSL_CTX_cmd_APIName calls
An appropriate default implementation method will be used
X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName can only find the first matching entry and will copy the contents of the field verbatim
BIO_set_ssl_mode_APIName sets the SSL BIO mode to BIO_new_ssl_APIParam_2
ECDSA_SIG_free_APIName frees the ECDSA_SIG_free_APIParam_1 structure ECDSA_SIG_free_APIParam_1
On the server side , additional restrictions apply
All ciphers have additional requirements
For a description of point_conversion_forms please refer to EC_POINT_new_APIName
SSL_get_shared_curve_APIName returns the total number of shared curves
Some BIOs can be used immediately after calling BIO_new_APIName
ASN1_STRING_set_APIName sets the data of string ASN1_STRING_set_APIParam_1 to the buffer ASN1_STRING_set_APIParam_2 or length ASN1_STRING_set_APIParam_3
This basic type of reference is used for instantiating new ENGINEs , iterating across OpenSSL 's internal linked-list of loaded ENGINEs , reading information about an ENGINE , etc
PEM_write_bio_PKCS7_stream_APIName outputs a PKCS7 structure in PEM format
PKCS # 1 v1 .5 padding
The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are shortcuts for calling EC_GROUP_new and the appropriate EC_group_set_curve function
This currently is the most widely used mode
the SSL server will always follow the clients preferences.
On the client side , the inclusion into the list is also sufficient
The CMS_RecipientInfo_encrypt_APIName can be used to add a new recipient to an existing enveloped data structure
 client mode is set
Any data written to the chain is automatically translated to a BER format CMS structure of the appropriate type
These objects act as containers for implementations of cryptographic algorithms , and support a reference-counted mechanism to allow them to be dynamically loaded in and out of the running application
These functions implement the Diffie-Hellman key agreement protocol
the SSL server will always follow the clients preferences
server mode is set
Three additional callback function , dyn_create_function , dyn_lock_function and dyn_destroy_function
the length is determined by strlen
A list of algorithms and associated public key algorithms appears in EVP_DigestInit_APIName
SMIME_write_CMS_APIName adds the appropriate MIME headers to a CMS structure to produce an S/MIME message
EVP_EncodeFinal_APIName will process any partial block of data remaining in the EVP_EncodeFinal_APIParam_1 object
The MIME parser used by SMIME_read_CMS_APIName is somewhat primitive
This library implements type-checked dynamic hash tables
SMIME_read_PKCS7_APIParam_1 is a BIO to read the message from
SSL_set_fd_APIParam_2 will typically be the socket file descriptor of a network connection
The hash table entries can be arbitrary structures
ALPN protocol selected
Second and subsequent calls to BIO_do_accept_APIName will await an incoming connection , or request a retry in non blocking mode
The reference count is 1
any other flags are purely informational to the caller
this flag will prevent the command being usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string_APIName.
be careful : the table may decrease in size, moving the item that you are currently on down lower in the hash table
it will attempt to create the accept socket and bind an address to it
des_read_password_APIName calls des_read_pw_APIName and converts the password to a DES key by calling DES_string_to_key_APIName
The generation of shared DH parameters is described in DH_generate_parameters_APIName
SSL_set_fd_APIName sets the file descriptor SSL_set_fd_APIParam_2 as the input/output facility for the TLS/SSL side of SSL_set_fd_APIParam_1
this can be achieved by adding a null sink BIO to the end of the chain
ERR_GET_LIB_APIName , ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName can be used to extract these
d2i_ECPKParameters_APIName attempts to decode d2i_ECPKParameters_APIParam_3 bytes at d2i_ECPKParameters_APIParam_2
The SSL_CTX_load_verify_locations_APIParam_2 is processed on execution of the SSL_CTX_load_verify_locations_APIName function
compound formats may not work
CMS_final_APIName finalises the structure CMS_final_APIParam_1
These functions are implemented in C and for several platforms in assembly language
CRYPTO_THREADID_cpy_APIName duplicates a thread ID value
Otherwise the total number of curves will be provided
The function EVP_PKEY_sign_APIName can be called more than once on the same context
This index is globally the same for all X509_STORE_CTX objects and can be retrieved using SSL_get_ex_data_X509_STORE_CTX_idx_APIName
call the function EC_get_builtin_curves
The function will populate the EC_get_builtin_curves_APIParam_1 array with information about the builtin curves
The parameter CMS_final_APIParam_2 contains the content to be processed
The function EVP_PKEY_set_cb_APIName sets the key or parameter generation callback to EVP_PKEY_CTX_get_cb_APIParam_0
X509_NAME_ENTRY_get_object_APIName retrieves the field name of X509_NAME_ENTRY_get_object_APIParam_1 in and X509_NAME_ENTRY_get_object_APIParam_0 structure
On failure an error code can be obtained from ERR_get_error_APIName
Textual representation of the cipher name
The functions EC_KEY_get_conv_form and EC_KEY_set_conv_form get and set the point_conversion_form for the EC_KEY_up_ref_APIParam_1 EC_KEY_set_public_key_APIParam_1 EC_KEY_clear_flags_APIParam_1 EC_KEY_get0_private_key_APIParam_1 EC_KEY_get0_public_key_APIParam_1 EC_KEY_precompute_mult_APIParam_1 EC_KEY_get_conv_form_APIParam_1 EC_KEY_get_key_method_data_APIParam_1 EC_KEY_set_public_key_affine_coordinates_APIParam_1 EC_KEY_check_key_APIParam_1 EC_KEY_set_private_key_APIParam_1 EC_KEY_set_flags_APIParam_1 EC_KEY_free_APIParam_1 EC_KEY_insert_key_method_data_APIParam_1 EC_KEY_generate_key_APIParam_1 EC_KEY_set_group_APIParam_1 EC_KEY_get_flags_APIParam_1 EC_KEY_get0_group_APIParam_1
the underlying BUF_MEM structure is also freed
The i2d_ECDSA_SIG_APIParam_1 ECDSA_SIG_free_APIParam_1 d2i_ECDSA_SIG_APIParam_1 structure consists of two BIGNUMs for the r and s value of a ECDSA signature
the key length will be set to the value of the recovered key length
BN_GENCB_call calls the callback function held in the BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 structure and passes the ints BN_is_prime_fasttest_APIParam_1 BN_GENCB_call_APIParam_2 and BN_GENCB_call_APIParam_3 as arguments
The index value is set
the internal SSL structure is also freed using SSL_free_APIName
d2i_ECPKParameters_APIParam_2 is incremented to the byte following the parsed data
the library will try to complete the chain from the available CA certificates in the trusted CA storage
BIO_set_fd_APIName and BIO_get_fd_APIName are macros
The CMS_final_APIParam_3 parameter contains a BIO to write content to after processing
EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 will be freed
X509_STORE_CTX_cleanup_APIName internally cleans up an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 structure
Similarly for command lines "--ssl-no_tls1_2" is recognised instead of "-no_tls1_2" instead of "-no_tls1_2".
EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName and EVP_PKEY_assign_EC_KEY_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2
Note , this is a non-standard OpenSSL-specific data format
CMS_SignerInfo_set1_signer_cert_APIName sets the signers certificate of CMS_SignerInfo_set1_signer_cert_APIParam_1 to CMS_SignerInfo_set1_signer_cert_APIParam_2
After the call to EVP_PKEY_decrypt_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
EC_KEY_up_ref increments the reference count associated with the EC_KEY object
almost all current BIO types will not request a retry
only passing the relevant data to ASN1 functions
This is usually worked around by
New objects can be added by calling OBJ_create_APIName
New attributes can also be added using CMS_encrypt_APIParam_0 and the CMS attribute utility functions
a server may request a certificate from the client
The context can be reused with an new call to X509_STORE_CTX_init_APIName
EC_KEY_precompute_mult stores multiples of the underlying EC_GROUP generator for faster point multiplication
This is used by the PEM routines to write `` TRUSTED CERTIFICATE '' objects
Make it possible to retry SSL_write_APIName with changed buffer location
This list is globally maintained for all SSL operations within this application
SSL_get_cipher_APIName and SSL_get_cipher_name_APIName are identical macros to obtain the name of the currently used cipher
The call to EVP_DigestVerifyFinal_APIName internally finalizes a copy of the digest context
The functions EC_GROUP_set_point_conversion_form and EC_GROUP_get_point_conversion_form set and get the point_conversion_form for the curve respectively
i2d_X509_AUX_APIName is similar to i2d_X509_APIName , but the encoded output contains both the certificate and any auxiliary trust information
The function ASN1_TIME_set_APIName sets the ASN1_TIME structure ASN1_TIME_set_APIParam_1 to the time represented by the time_t value ASN1_TIME_set_APIParam_2
The function SSL_CONF_CTX_set_flags_APIName sets SSL_CONF_CTX_set_flags_APIParam_2 in the context SSL_CONF_CTX_set_flags_APIParam_1
SSL_CTX_sess_set_cache_size_APIName sets the size of the internal session cache of context SSL_CTX_sess_set_cache_size_APIParam_1 to SSL_CTX_sess_set_cache_size_APIParam_2
SSL_COMP_add_compression_method_APIName adds the compression method SSL_COMP_add_compression_method_APIParam_2 with the identifier SSL_COMP_add_compression_method_APIParam_1 to the list of available compression methods
A human-readable hexadecimal output of the components of the RSA key , DSA parameters or key or DH parameters is printed to RSA_print_APIParam_1 DSA_print_APIParam_1 DHparams_print_APIParam_1 DSAparams_print_APIParam_1 or RSA_print_fp_APIParam_1 DSA_print_fp_APIParam_1 DHparams_print_fp_APIParam_1 DSAparams_print_fp_APIParam_1
then the default digest for the public key algorithm will be used
the error string will contain the numeric code
this can be used
Expired sessions are removed from the internal session cache , either directly by the application or automatically
SSL_CTX_set_timeout_APIName sets the timeout for newly created sessions for SSL_CTX_set_timeout_APIParam_1 to SSL_CTX_set_timeout_APIParam_2
These functions decode and encode an ASN1 OBJECT IDENTIFIER
The header of the record is being evaluated
the 3bn_sqr_recursive_APIParam_3 bn_mul_recursive_APIParam_4 word array bn_sqr_normal_APIParam_4 bn_sqr_recursive_APIParam_4
lh_node_stats_APIName prints the number of entries for each ` bucket ' in the hash table
EVP_VerifyInit_ex_APIName sets up verification context EVP_VerifyInit_ex_APIParam_1 to use digest EVP_VerifyInit_ex_APIParam_2 from ENGINE EVP_VerifyInit_ex_APIParam_3
The client can only send exactly one session ticket
One typical use of BIO pairs is to place TLS/SSL I/O under application control , or the normal socket routines are inappropriate
SSL_CTX_add0_chain_cert_APIName and SSL_CTX_add1_chain_cert_APIName append the single certificate SSL_CTX_add0_chain_cert_APIParam_2 SSL_CTX_add1_chain_cert_APIParam_2 to the chain associated with the current certificate of SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1
The ssl session has reference counts from two users : the SSL object
BN_zero_APIName and BN_one_APIName are macros
This is a common query in the OpenSSL mailing lists
This includes the PEM , PKCS # 12 , SSL and S/MIME libraries
i2d_SSL_SESSION_APIName transforms the SSL_SESSION object i2d_SSL_SESSION_APIParam_1 into the ASN1 representation and stores i2d_SSL_SESSION_APIParam_1 into the memory location pointed to by i2d_SSL_SESSION_APIParam_2
This flag will prevent sessions being stored in the internal cache
BN_to_montgomery_APIName is a macro
The ssl session has reference counts from two users
For all functions , BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_set_APIParam_3 is a previously allocated BN_MONT_CTX_set_APIParam_3 used for temporary variables
SSL_CTX_set_options_APIName adds the options set via bitmask in SSL_CTX_set_options_APIParam_2 to SSL_CTX_set_options_APIParam_1
BN_div_recp_APIName divides BN_div_recp_APIParam_3 by BN_RECP_CTX_set_APIParam_2 using BN_div_recp_APIParam_4
It places the quotient in BN_div_recp_APIParam_1 and the remainder in BN_div_recp_APIParam_2
This behaviour violates the TLS standard
CRYPTO_lock_APIName is used to lock and unlock the locks
BN_pseudo_rand_APIName does the same , but pseudo-random numbers generated by this function are not necessarily unpredictable
BN_zero_APIName , BN_one_APIName and BN_set_word_APIName set BN_zero_APIParam_1 BN_one_APIParam_1 BN_set_word_APIParam_1 BN_zero_APIParam_1 BN_one_APIParam_1 to the values 0 , 1 and BN_set_word_APIParam_2 respectively
The details of the ciphers obtained by SSL_get_ciphers_APIName can be obtained using the SSL_CIPHER_get_name_APIName family of functions
Depending on the presence of SSL_SESS_CACHE_CLIENT and/or SSL_SESS_CACHE_SERVER , sessions negotiated in an SSL/TLS handshake may be cached for possible reuse
Also , user-defined random data can be passed down to the underlying method through calls to UI_add_user_data
The default UI method does n't care about these data , but other methods might
ERR_error_string_APIName generates a human-readable string representing the error code ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 ERR_error_string_APIParam_1 ERR_error_string_n_APIParam_1 , and places it at ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2 ERR_error_string_APIParam_2 ERR_error_string_n_APIParam_2
ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that writes at most ERR_error_string_n_APIParam_3 ERR_error_string_n_APIParam_3 characters 
ERR_error_string_n_APIName is a variant of ERR_error_string_APIName that truncates the string 
SSL_free_APIName decrements the reference count of SSL_free_APIParam_1
SSL_free_APIName and removes the SSL structure pointed to by SSL_free_APIParam_1 and frees up the allocated memory 
Depending on the settings, the SSL_SESSION objects are internally referenced by the SSL_CTX and linked into its session cache
SSL_set_tmp_rsa_APIName sets the key only for SSL_set_tmp_rsa_APIParam_1
The difference between the two is only conceptual
The following routines mostly operate on an input and output stream of DES_set_key_unchecked_APIParam_1 DES_is_weak_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1 DES_cbc_cksum_APIParam_2 DES_string_to_key_APIParam_2 DES_ecb2_encrypt_APIParam_1 DES_random_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_quad_cksum_APIParam_2 DES_set_key_APIParam_1 DES_set_key_checked_APIParam_1s
the automatic flushing may be disabled and SSL_CTX_flush_sessions_APIName can be called explicitly by the application
A server will only understand TLSv1 client hello messages
A TLS/SSL connection established with these methods will only understand the TLSv1 protocol
The alert is sent as a special message and does not influence the normal data stream
The session is thus considered to be shutdown , but no `` close notify '' alert is sent to the peer
SSL_CONF_CTX_set_ssl_ctx_APIName sets the context associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 to the SSL_CONF_CTX_set_ssl_ctx_APIParam_2 structure SSL_CONF_CTX_set_ssl_ctx_APIParam_2
bn_mul_add_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2
The server , through the callback function , either agrees to reuse the session ticket information or it starts a full TLS handshake to create a new session ticket
pseudo-random numbers generated by this function can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols , but usually not for key generation etc
bn_sub_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 , bn_sub_words_APIParam_3 bn_add_words_APIParam_3 and bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1
SSL_shutdown_APIName will set the internal flags to SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN
SSL_CTX_set_default_read_ahead is a synonym for SSL_CTX_set_read_ahead , and SSL_CTX_get_default_read_ahead is a synonym for SSL_CTX_get_read_ahead
These failures may also appear delayed
Suitable input comes from user interaction and certain hardware events
Versions between 0.9.3 and 0.9.5 had a version identifier with this interpretation
RAND_add_APIName mixes the RAND_add_APIParam_2 bytes at RAND_add_APIParam_1 into the PRNG state
BIO_read_APIName and BIO_write_APIName read or write the underlying descriptor
This indicates an unknown protocol version
BN_is_zero_APIName , BN_is_one_APIName and BN_is_word_APIName test if BN_is_zero_APIParam_1 BN_is_one_APIParam_1 BN_is_word_APIParam_1 BN_is_odd_APIParam_1 equals 0 , 1 , or BN_is_word_APIParam_2 respectively
The SSL _ class of functions only loads certificates and keys into a specific SSL object
BN_gcd_APIName computes the greatest common divisor of BN_gcd_APIParam_2 and BN_gcd_APIParam_3 and places the result in BN_gcd_APIParam_1
SSL_CTX_set_mode_APIName adds the mode set via bitmask in SSL_CTX_set_mode_APIParam_2 to SSL_CTX_set_mode_APIParam_1
EVP_PKEY_sign_APIName does not hash the data to be signed , and is normally used to sign digests
a random prime number is called as described in BN_generate_prime_APIName
bn_mul_words operates on the bn_mul_add_words_APIParam_3 bn_mul_words_APIParam_3 bn_sqr_words_APIParam_3 word arrays bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1 and bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2
Data is only written to the next BIO in the chain
This can be done by calling BIO_pending_APIName on the other half of the pair and reading it and sending it to the underlying transport.
BN_CTX_free_APIName frees the components of the BN_CTX_new_APIParam_0
BN_CTX_free_APIName frees the structure itself.
the signature is written to EVP_DigestSignFinal_APIParam_2 and the amount of data written to EVP_DigestSignFinal_APIParam_3
Thus , , this increases the uncertainty about the state and makes the PRNG output less predictable
The derive_init_APIName and derive_APIName methods are called by EVP_PKEY_derive_init_APIName and EVP_PKEY_derive_APIName
In addition EC_POINTs can be converted to and from various external representations
The decrypt_init_APIName and decrypt_APIName methods are called by EVP_PKEY_decrypt_init_APIName and EVP_PKEY_decrypt_APIName
The decrypt_init_APIName and decrypt_APIName methods are used to decrypt a piece of data
CMS_add0_crl_APIName and CMS_add1_crl_APIName add CRL CMS_add0_crl_APIParam_2 CMS_add1_crl_APIParam_2 to CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1
Octet strings are stored in a buffer along with an associated buffer length
A callback function may be used to provide feedback about the progress of the key generation
SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName set automatic curve selection for server SSL_CTX_set_ecdh_auto_APIParam_1 or SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1 to SSL_CTX_set_ecdh_auto_APIParam_2 SSL_set_ecdh_auto_APIParam_2
The derive_init_APIName and derive_APIName methods are used to derive the shared secret from a public key algorithm
For information on the BN_GENCB structure and the BN_GENCB_call function discussed below , refer to BN_generate_prime_APIName
BN_MONT_CTX_copy_APIName copies the BN_MONT_CTX_copy_APIParam_1 BN_MONT_CTX_copy_APIParam_2 to BN_MONT_CTX_copy_APIParam_1
SSL_set_mode_APIName adds the mode set via bitmask in SSL_set_mode_APIParam_2 to SSL_set_mode_APIParam_1
SSL_write_APIName will only report success once the complete chunk was written.
This will replace the DH_METHOD used by the DH key
the handle to that ENGINE will be released during the change.
X509_NAME_get_index_by_NID_APIName and X509_NAME_get_index_by_OBJ_APIName retrieve the next index matching X509_NAME_get_index_by_NID_APIParam_2 or X509_NAME_get_index_by_OBJ_APIParam_2 after X509_NAME_get_index_by_NID_APIParam_3 X509_NAME_get_index_by_OBJ_APIParam_3
it can be practical to have pem_passwd_cb_APIName handle the password dialog interactively
In addition to SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 SSL_get_error_APIParam_1 and SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 SSL_get_error_APIParam_2 , SSL_get_error_APIName inspects the current thread 's OpenSSL error queue
EVP_DecodeBlock_APIName will decode the block of EVP_DecodeBlock_APIParam_3 characters of base 64 data contained in EVP_DecodeBlock_APIParam_2 and store the result in EVP_DecodeBlock_APIParam_1
A point held in a BIGNUM is calculated by converting the point to an octet string and converting that octet string into a BIGNUM integer
the actual key is newly generated
Multiple lines are used
DH parameters can be reused, as the actual key is newly generated during the negotiation.
the TLS/SSL handshake is performed using SSL_accept_APIName or SSL_connect_APIName respectively
The encrypt_init_APIName and encrypt_APIName methods are called by EVP_PKEY_encrypt_init_APIName and EVP_PKEY_encrypt_APIName
SSL_set_tmp_rsa_callback_APIName sets the callback only for SSL_set_tmp_rsa_APIParam_1 SSL_need_tmp_rsa_APIParam_1
EC_GROUP_copy copies the curve EC_GROUP_dup_APIParam_1 EC_GROUP_copy_APIParam_2 into EC_GROUP_copy_APIParam_1
The encrypt_init_APIName and encrypt_APIName methods are used to encrypt a piece of data
SSL_read_APIName and SSL_write_APIName are used to read and write data on the TLS/SSL connection
CMS_RecipientInfo_decrypt_APIName attempts to decrypt CMS_RecipientInfo structure CMS_RecipientInfo_decrypt_APIParam_2 in structure CMS_RecipientInfo_decrypt_APIParam_1
it can be processed
the equivalent is EVP_PKEY_base_id
ERR_GET_LIB_APIName , ERR_GET_FUNC_APIName and ERR_GET_REASON_APIName are macros
SSL_shutdown_APIName can be used to shut down the TLS/SSL connection
the functions
OPENSSL_VERSION_TEXT is the text variant of the version number and the release date
synchronization with the internal session cache is realized via callback functions
Inside these callback functions , session can be saved to disk or put into a database using the d2i_SSL_SESSION_APIName interface
The certificate used depends on the cipher selected
An inappropriate message was received
MD2_Init_APIName initializes a MD2_Init_APIParam_1 structure
i2d_ECPKParameters_APIParam_2 is not incremented and it points to the start of the data just written
it is possible to obtain state information from the SSL/TLS engine
The internal certificate store of OpenSSL can hold several private key/certificate pairs at a time
BIO_puts_APIName attempts to write a null terminated string BIO_puts_APIParam_2 to BIO BIO_puts_APIParam_1
BIO_new_accept_APIName combines BIO_new_APIName and BIO_set_accept_port_APIName into a single call
BN_rand_range_APIName generates a cryptographically strong pseudo-random number BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 in the range 0 < = BN_rand_range_APIParam_1 BN_pseudo_rand_range_APIParam_1 BN_pseudo_rand_APIParam_1 < BN_rand_range_APIParam_2 BN_pseudo_rand_range_APIParam_2
BN_pseudo_rand_range_APIName does the same , but is based on BN_pseudo_rand_APIName , and hence numbers generated by BN_pseudo_rand_range_APIName are not necessarily unpredictable
BN_is_prime_ex_APIName and BN_is_prime_fasttest_ex_APIName test if the number BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is prime
MDC2_APIName computes the MDC2 message digest of the MDC2_APIParam_2 bytes at MDC2_APIParam_1 and places it in MDC2_Final_APIParam_1
Some of the newer functions follow a naming convention using the numbers 0 and 1
SSL_read_APIName will trigger the processing of the next record
RIPEMD160_APIName computes the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes at RIPEMD160_APIParam_1 and places the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes in RIPEMD160_Final_APIParam_1
The ctrl_APIName and ctrl_str_APIName methods are used to adjust algorithm-specific settings
BN_mpi2bn_APIName converts the BN_mpi2bn_APIParam_2 bytes long representation at BN_mpi2bn_APIParam_1 to a BN_mpi2bn_APIParam_3 and stores it at BN_mpi2bn_APIParam_3 , or in a newly allocated BN_mpi2bn_APIParam_3
The valid codes for SSL_set_verify_result_APIParam_2 are documented in verify_APIName
This function first searches through the user-defined method objects and the built-in objects
The actual condition for a correctly closed session is SSL_SENT_SHUTDOWN
EVP_EncryptInit_APIName , EVP_DecryptInit_APIName and EVP_CipherInit_APIName behave in a similar way to EVP_EncryptInit_ex_APIName , EVP_DecryptInit_ex and EVP_CipherInit_ex_APIName except the EVP_EncryptInit_APIParam_1 EVP_DecryptInit_APIParam_1 EVP_CipherInit_APIParam_1 EVP_EncryptInit_ex_APIParam_1 EVP_CipherInit_ex_APIParam_1 parameter does not need to be initialized and they always use the default cipher implementation
SSL_CTX_set1_param_APIName and SSL_set1_param_APIName set the verification parameters to SSL_CTX_set1_param_APIParam_2 SSL_set1_param_APIParam_2 for SSL_CTX_set1_param_APIParam_1 or SSL_set1_param_APIParam_1
EVP_PKEY_assign_RSA_APIName , EVP_PKEY_assign_DSA_APIName , EVP_PKEY_assign_DH_APIName , EVP_PKEY_assign_EC_KEY_APIName , EVP_PKEY_assign_POLY1305_APIName and EVP_PKEY_assign_SIPHASH_APIName also set the referenced key to EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 however these use the supplied EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2 EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 internally and so EVP_PKEY_assign_RSA_APIParam_2 EVP_PKEY_assign_DSA_APIParam_2 EVP_PKEY_assign_DH_APIParam_2
DH_free_APIName frees the DH_free_APIParam_1 structure and its components
The shutdown state of the connection is used to determine the state of the ssl session
SSL_set_shutdown_APIName can be used to set this state without sending a close alert to the peer
These functions decode and encode PKCS # 3 DH parameters using the DHparameter structure described in PKCS # 3
the SSL_load_client_CA_file_APIName function can be used to help importing the necessary data
SSL_CTX_sess_set_new_cb_APIName sets the callback function, which is automatically called
BIO_set_accept_bios_APIName can be used to set a chain of BIOs which will be duplicated and prepended to the chain
the session cache , the list of ciphers , the list of Client CAs , the certificates and keys
the root CA certificate may be omitted according to the TLS standard and thus a standard conforming answer can be sent to the server.
Calling EC_KEY_free decrements the reference count for the EC_KEY object
Calling EC_KEY_free frees the memory associated with it
The library number , function code and reason code respectively
The verify_init_APIName and verify_APIName methods are called by EVP_PKEY_verify_init_APIName and EVP_PKEY_verify_APIName
SSL_set_tmp_dh_APIName sets the parameters only for SSL_set_tmp_dh_APIParam_1
ASN1_TIME_print_APIName currently does not print out the time zone
ASN1_TIME_print_APIName either prints out `` GMT '' or nothing
The retrieved context can be used in conjunction with the standard cipher routines to set it up
The application data is only maintained for sessions held in memory
The data encoded by the private key functions is unencrypted and offers no private key security
Only the last verification error that occurred during the processing is available from SSL_get_verify_result_APIName.
A filter BIO takes data from one BIO and passes it through to another , or the application
A client will only send a certificate
A session will be automatically removed from the session cache and marked as non-resumable
UI stands for User Interface , and is general purpose set of routines to prompt the user for text-based information
DES_random_key_APIName generates a random key
it is possible to make this one half of a BIO pair and have all the data processed by the chain under application control
RAND_cleanup_APIName erases the memory used by the PRNG
These functions handle application specific data in DSA structures
This can be done by waiting for a connection and calling
BIO_ssl_shutdown_APIName closes down an SSL connection on BIO chain BIO_ssl_shutdown_APIParam_1
This can be resolved by using BIO_pop_APIName and freeing up the accept BIO after the initial connection
Each EC_builtin_curve item has a unique integer id , and a human readable comment string describing the curve
BIO_get_ssl_APIName retrieves the SSL pointer of BIO BIO_ctrl_APIParam_1 , BIO_get_ssl_APIName can be manipulated using the standard SSL library functions
It does this by locating the SSL BIO in the chain and calling SSL_shutdown_APIName on its internal SSL pointer
SSL_use_PrivateKey_ASN1_APIName and SSL_use_RSAPrivateKey_ASN1_APIName add the private key to SSL_use_PrivateKey_ASN1_APIParam_2 SSL_use_RSAPrivateKey_ASN1_APIParam_1
The verification callback can be set and inherited from the parent structure performing the operation
The X509_verify_cert_APIName function attempts to discover and validate a certificate chain based on parameters in X509_verify_cert_APIParam_1
Call SSL_shutdown_APIName for a second time
EC_KEY_insert_key_method_data and EC_KEY_get_key_method_data enable the caller to associate arbitrary additional data specific to the elliptic curve scheme being used with the EC_KEY object
SSL_CTX_sess_set_remove_cb_APIName sets the callback function , which is automatically called
recognise certificate and private key options
This is described in RAND_add_APIName
CRYPTO_lock_APIParam_3 and CRYPTO_lock_APIParam_4 are the file number of the function setting the lock
SSL_shutdown_APIName shuts down an active TLS/SSL connection
BN_mod_sub_APIName subtracts BN_mod_sub_APIParam_3 from BN_mod_sub_APIParam_2 modulo BN_mod_sub_APIParam_4 and places the non-negative result in BN_mod_sub_APIParam_1
BN_BLINDING_new_APIName allocates a new BN_BLINDING_new_APIParam_0 structure and copies the BN_BLINDING_new_APIParam_1 and BN_BLINDING_new_APIParam_2 values into the newly created BN_BLINDING_new_APIParam_0 object
The mechanisms described below relate solely to the software PRNG implementation built in to OpenSSL and used by default
The EVP envelope routines decrypt a public key encrypted symmetric key and decrypt data using a public key encrypted symmetric key
This default behaviour can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of SSL_CTX_set_mode_APIName
SSL_add_session_APIName and SSL_remove_session_APIName are synonyms for their SSL_CTX __ APIName counterparts
Some clients step down to SSLv3 with respect to the server 's answer and violate the version rollback protection
the client sends a SSLv2 hello and accepts up to SSLv3 .1 = TLSv1 , the server only understands up to SSLv3
The methods exist in a generic type , a server only type , and a client only type
Previous versions of OpenSSL could effectively only use a single ECDH curve set using a function such as SSL_CTX_set_ecdh_tmp_APIName
it will be reused and a flag is being set that can be queried by the application.
the next time OpenSSL tries to set up an RSA key, any bundled ENGINEs that implement RSA_METHOD will be passed to ENGINE_init_APIName
the new entry is appended
5 padding bytes of value 5 will be added
All other flags are left in their existing state
The ASN1_TIME structure is represented as an ASN1_STRING internally and can be freed up using ASN1_STRING_free_APIName
DSA_dup_DH_APIName duplicates DSA parameters/keys as DH parameters/keys
It will not be reset by calling SSL_clear_APIName
EC_KEY_clear_flags clears the flags indicated by the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter
EC_KEY_set_flags sets the flags in the EC_KEY_clear_flags_APIParam_2 EC_KEY_set_flags_APIParam_2 parameter on the EC_KEY object
X509_NAME_ENTRY_set_object_APIName sets the field name of X509_NAME_ENTRY_set_object_APIParam_1 to X509_NAME_ENTRY_set_object_APIParam_2
BN_rand_APIName generates a cryptographically strong pseudo-random number of BN_rand_APIParam_2 in length and stores it in BN_rand_APIParam_1
BIO_new_buffer_ssl_connect_APIName creates a new BIO chain consisting of a buffering BIO , an SSL BIO and a connect BIO
SSL_CTX_set_ssl_version_APIName sets a new default TLS/SSL SSL_CTX_set_ssl_version_APIParam_2 for SSL objects newly created from this SSL_CTX_set_ssl_version_APIParam_1
All the symmetric algorithms , digests and asymmetric algorithms can be replaced by ENGINE modules providing alternative implementations
the number will be odd
locking_function is needed to perform locking on shared data structures
BIO_read_APIName attempts to read BIO_read_APIParam_3 bytes from BIO BIO_read_APIParam_1 and places the data in BIO_read_APIParam_2
The version of the OpenSSL library including the release date
A server will only understand SSLv3 client hello messages
the most significant bit of the random number can be zero
q is lost
SSL_SESSION objects keep internal link information about the session cache list
int CMS_get1_ReceiptRequest_APIName looks for a signed receipt request in CMS_get1_ReceiptRequest_APIParam_1
it is set to 1
the two most significant bits of the number will be set to 1, so that the product of two such random numbers will always have 2*BN_rand_APIParam_2 length.
the callback function will be called
at start-up , this list is empty and in fact
SSL objects already created with SSL_new_APIName are not affected
For this form the elliptic curve equation is modified to
the various EVP functions will automatically use those implementations automatically in preference to built in software implementations
The SSL_clear_APIName operation was successful
There is currently no corresponding inverse BIO
A TLS/SSL connection established with these methods will only understand the SSLv3 protocol
SSL_SESSION_get_ex_data_APIName is used to retrieve the information for SSL_SESSION_get_ex_data_APIParam_2 from SSL_SESSION_get_ex_data_APIParam_1
The function SSL_CONF_CTX_free_APIName frees up the context SSL_CONF_CTX_free_APIParam_1
No shutdown setting yet
EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal ciphers with default key lengths
The reference count of the BIO is not incremented
The LHASH code regards table entries as constant data
EVP_CIPHER_CTX_cleanup_APIName clears all information from a cipher context and free up any allocated memory associate with EVP_CIPHER_CTX_cleanup_APIName
These functions perform arithmetic operations on BIGNUMs with unsigned integers
RAND_bytes_APIName puts RAND_bytes_APIParam_2 cryptographically strong pseudo-random bytes into RAND_bytes_APIParam_1
The read operation was successful
It is a BIO wrapper for the cipher routines EVP_CipherInit_APIName , EVP_CipherUpdate_APIName and EVP_CipherFinal_APIName
des_read_pw_string_APIName is a variant of des_read_pw_APIName
that provides a buffer for you
The verification result is part of the established session and is restored
The function SSL_export_keying_material_APIName enables an application to use some of this keying material for The function SSL_export_keying_material_APIName own purposes in accordance with RFC5705
SSL_CTX_free_APIName does not provide diagnostic information
BIO_get_mem_ptr_APIName places the underlying BUF_MEM structure in BIO_get_mem_ptr_APIParam_2
the results are unpredictable
These are discussed in the next section
EC_POINT_add adds the two points EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2
The sign_init_APIName and sign_APIName methods are called by EVP_PKEY_sign_init_APIName and EVP_PKEY_sign_APIName
In a resumed session the applications will have all this state information available exactly as if a full negiotation had occured.
it is valid for EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2 to be one of EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 or EC_POINT_cmp_APIParam_3 EC_POINT_add_APIParam_4
DSA_generate_parameters_ex_APIName places the iteration count in DSA_generate_parameters_APIParam_0 and a counter used for finding a generator in DSA_generate_parameters_APIParam_0
BIO_get_mem_ptr_APIName is a macro
The connection uses the SSLv3 protocol
This is a warning alert
DH_generate_parameters_ex_APIName and DH_generate_parameters_APIName may run for several hours before finding a suitable prime
X509_new_APIName allocates and initializes a X509 structure
ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName are the same as the above, but ERR_get_error_line_APIName, ERR_peek_error_line_APIName and ERR_peek_last_error_line_APIName additionally store the file name and line number where the error occurred in *ERR_get_error_line_APIParam_1 ERR_peek_error_line_APIParam_1 ERR_peek_last_error_line_APIParam_1 and *ERR_get_error_line_APIParam_2 ERR_peek_error_line_APIParam_2 ERR_peek_last_error_line_APIParam_2
EC_POINT_free frees the memory associated with the EC_POINT
SSL_set_tmp_dh_callback_APIName sets the callback only for SSL_set_tmp_dh_APIParam_1
The function SSL_CONF_cmd_argv_APIName processes at most two command line arguments from SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2
It is used to hold a single large integer
This can be achieved by setting and verifying the signers certificates manually using the signed data utility functions
BN_bn2bin_APIName converts the absolute value of BN_bn2bin_APIParam_1 into big-endian form and stores BN_bn2bin_APIParam_1 at BN_bn2bin_APIParam_2
Certain signatures with an improper algorithm identifier are accepted for compatibility with SSLeay 0.4.5
The basic object in this library is a BN_init_APIParam_1
These functions decode and encode a PKCS # 10 certificate request
The values of SSL_CONF_cmd_argv_APIParam_3 and SSL_CONF_cmd_argv_APIParam_2 are updated to reflect the number of command options processed
The sign_init_APIName and sign_APIName methods are used to generate the signature of a piece of data using a private key
It will obtain the signer certificate by some unspecified means and set it using CMS_SignerInfo_set1_signer_cert_APIName
EVP_MD_CTX_init_APIName initializes digest context EVP_MD_CTX_init_APIParam_1
OBJ_create_APIParam_1 is the numerical form of the object , OBJ_create_APIParam_2 the short name and OBJ_create_APIParam_3 the long name
Two RSA padding modes behave differently
The session id is an arbitrary sequence of bytes
In typical usage and application will retrieve all CMS_SignerInfo structures using CMS_get0_SignerInfo_APIName and retrieve the identifier information using CMS
BN_RECP_CTX_new_APIName allocates and initializes a BN_RECP_CTX_init_APIParam_1 structure
65537 is used
The function SSL_CONF_CTX_set1_prefix_APIName sets the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 to SSL_CONF_CTX_set1_prefix_APIParam_2
no checks are performed and the supplied data in X509_NAME_add_entry_by_txt_APIParam_4 X509_NAME_add_entry_by_NID_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_4 is used directly.
The new entry is added to a position determined by X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_APIParam_4
data is used directly and not encapsulated
BN_RECP_CTX_init_APIName initializes an existing uninitialized BN_RECP_CTX_init_APIParam_1
The exact definition of those can be found in the X. 509 document from ITU-T , or in RFC3280 from PKIX
Additionally , the session id is transmitted in the clear information
only the first one will be examined
X509_NAME_add_entry_APIName adds a copy of X509_NAME_add_entry_APIParam_2 structure X509_NAME_add_entry_APIParam_2 to X509_NAME_add_entry_APIParam_1
In OpenSSL , the type X509 is used to express such a certificate , and the type X509_CRL is used to express a CRL
Without a callback being set , an OpenSSL server will generate a unique session id from pseudo random numbers of the maximum possible length
X509_STORE_CTX_set_cert_APIName sets the certificate to be vertified in X509_STORE_CTX_set_cert_APIParam_1 to X509_STORE_CTX_set_cert_APIParam_2
no other certificate will be searched
A server will look up the session in its internal session storage
In the case of X9 .31 padding for RSA the algorithm identifier byte is added or checked and removed
These are the version-specific methods for DTLSv1
This constraint is violated by the default behavior of the OpenSSL library
the server generates a session id
The EVP_PKEY functions support the full range of asymmetric algorithm operations
It is possible to determine the correct recipient key by other means and setting them in the CMS structure in advance using the CMS utility functions such as CMS_set1_pkey_APIName
As always , , it can be achieved by preceding the cipher BIO with a buffering BIO
UI_set_method_APIName changes the UI method associated with a given UI
The behaviour of SSL_do_handshake_APIName depends on the underlying BIO
The same applies for DES_string_to_2key_APIName
SSL_set_generate_session_id_APIName sets the callback function for generating new session ids for SSL/TLS sessions for SSL_set_generate_session_id_APIParam_1 to be SSL_set_generate_session_id_APIParam_3
EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a curve over F2 ^ m
EC_group_get_curve_GF2m obtains the previously set curve parameters
This depends on the behaviour of the platforms I/O functions
DES_string_to_key_APIName is available for backward compatibility with the MIT library
Detailed description of possible states to be included later
OPENSSL_no_config_APIName disables configuration
EC_GROUP_clear_free destroys any sensitive data held within the EC_GROUP and frees its memory
There is a naming convention for such functions
one solution is to use non blocking I/O and use a timeout on the select_APIName call
The EVP_PKEY_get_default_digest_nid_APIName function sets EVP_PKEY_get_default_digest_nid_APIParam_2 to the default message digest NID for the public key signature operations associated with key EVP_PKEY_get_default_digest_nid_APIParam_1
the command prefix of SSL_CONF_CTX_set1_prefix_APIParam_1 is restored to the default value
BN_is_bit_set_APIName tests if bit BN_is_bit_set_APIParam_2 in BN_is_bit_set_APIParam_1 is set
the old value is replaced
BIO_reset_APIName reinitialises a digest BIO
The keygen_init_APIName and keygen_APIName methods are called by EVP_PKEY_keygen_init_APIName and EVP_PKEY_keygen_APIName
a source/sink BIO is normally called BIO_s __ APIName and a filter BIO BIO_f __ APIName
A `` negative zero '' is converted to zero
OpenSSL_add_all_digests_APIName adds all digest algorithms to the table
nothing is done
BN_dec2bn_APIName is the same using the decimal system
SSL BIOs can request a retry
These sessions are not included in the SSL_CTX_sess_hits_APIName count
UI_new_method_APIName creates a new UI using the given UI method
this is used to flush and possibly pad the final block through the BIO
BN_free_APIName frees also the structure itself.
BN_free_APIName frees the components of the BN_free_APIParam_1 BN_clear_free_APIParam_1
only a certificate is sent
it will be sent to the server
SSL_SESSION_free_APIName decrements the reference count of SSL_SESSION_free_APIParam_1 and removes the SSL_SESSION_free_APIParam_1 structure pointed to by SSL_SESSION_free_APIParam_1 and frees up the allocated memory
The SSL_set_verify_APIName functions do not provide diagnostic information
a new RDN is created
The function EVP_PKEY_cmp_parameters_APIName compares the parameters of keys EVP_PKEY_cmp_parameters_APIParam_1 and EVP_PKEY_cmp_parameters_APIParam_2
that is an SSL/TLS client will use the verification store to verify the server 's certificate chain and a SSL/TLS server will use it to verify any client certificate chain
The string types and content are compared
SSL_set_verify_result_APIName sets SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer
The user-defined argument optionally defined by SSL_CTX_set_msg_callback_arg_APIName or SSL_set_msg_callback_arg_APIName
EC_GROUP_get_curve_GF2m_APIParam_2 EC_GROUP_new_curve_GFp_APIParam_1 EC_GROUP_get_curve_GFp_APIParam_2 EC_GROUP_new_curve_GF2m_APIParam_1 EC_GROUP_set_curve_GF2m_APIParam_2 EC_GROUP_set_curve_GFp_APIParam_2 represents the irreducible polybnomial - each bit represents a term in the polynomial
The keygen_init_APIName and keygen_APIName methods are used to generate the actual key for the specified algorithm
SSL_set_verify_result_APIParam_2 of the object SSL_set_verify_result_APIParam_1 to be the result of the verification of the X509 certificate presented by the peer
ASN1_OCTET_STRING_new_APIName calls ASN1_STRING_type
SSL_CTX_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1
These functions implement a cryptographically secure pseudo-random number generator
DSA_free_APIName frees the DSA_free_APIParam_1 structure and its components
Otherwise the type of CMS_get0_type_APIParam_0 can be determined using CMS_get0_type_APIName
X509_NAME_oneline_APIName prints an ASCII version of X509_NAME_oneline_APIParam_1 to X509_NAME_oneline_APIParam_2
The verify_recover_init_APIName and verify_recover_APIName methods are called by EVP_PKEY_verify_recover_init_APIName and EVP_PKEY_verify_recover_APIName
Normally , lh_retrieve_APIParam_2 is a structure with the key field set
d2i_DSAPrivateKey_APIName , i2d_DSAPrivateKey_APIName decode and encode the DSA private key components
The DES library contained a few routines to prompt for passwords
The following are DES-based transformations
the handshake is not immediately added to the cache
use the function EC_GROUP_new_by_curve_name and provide the EC_GROUP_new_by_curve_name_APIParam_1 of the curve to be constructed
SSL_set_bio_APIName connects the BIOs SSL_set_bio_APIParam_2 and SSL_set_bio_APIParam_3 for the read and write operations of the TLS/SSL side of SSL_set_bio_APIParam_1
These functions handle application specific data in DH structures
BN_hex2bn_APIName converts the string BN_hex2bn_APIParam_2 BN_dec2bn_APIParam_2 containing a hexadecimal number to a BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 and stores it in BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1
DH_new_APIName allocates and initializes a DH_new_APIParam_0 structure
For backward compatibility , SSLEAY_VERSION_NUMBER is also defined
DSA_generate_parameters_ex_APIName generates primes p and q and a generator g for use in the DSA and stores the result in DSA_generate_parameters_ex_APIParam_1
a new BN_hex2bn_APIParam_1 BN_dec2bn_APIParam_1 is created
EVP_DigestVerifyFinal_APIName verifies the data in EVP_DigestVerifyFinal_APIParam_1 against the signature in EVP_DigestVerifyFinal_APIParam_2 of length EVP_DigestVerifyFinal_APIParam_3
BN_generate_prime_ex_APIName generates a pseudo-random prime number of bit length BN_generate_prime_ex_APIParam_2
The verify_recover_init_APIName and verify_recover_APIName methods are used to verify a signature and recover the digest from the signature
SSL_has_matching_session_id_APIName will only query the internal session cache , not the external one
These are n't necessarely dependent on DES , and have become part of the UI compatibility library
SSL_CTX_use_RSAPrivateKey_file_APIName adds the first private RSA key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_CTX_use_PrivateKey_file_APIParam_1 SSL_CTX_use_RSAPrivateKey_file_APIParam_1
Several certificates can be added one after another
SSL_use_RSAPrivateKey_file_APIName adds the first private RSA key found to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1
d2i_ECPKParameters_bio_APIName is similar to d2i_ECPKParameters_APIName except d2i_ECPKParameters_bio_APIName attempts to parse data from BIO ECPKParameters_print_APIParam_1
The connection uses the TLSv1 .1 protocol
SSL_use_PrivateKey_file_APIName adds the first private key found in SSL_CTX_use_PrivateKey_file_APIParam_2 SSL_CTX_use_RSAPrivateKey_file_APIParam_2 SSL_use_PrivateKey_file_APIParam_2 SSL_use_RSAPrivateKey_file_APIParam_2 to SSL_use_PrivateKey_file_APIParam_1 SSL_use_RSAPrivateKey_file_APIParam_1
This size can be modified using the SSL_CTX_sess_set_cache_size_APIName call
it is not limited to CA certificates
SSL_CTX_add_extra_chain_cert_APIName adds the certificate SSL_CTX_add_extra_chain_cert_APIParam_2 to the extra chain certificates associated with SSL_CTX_add_extra_chain_cert_APIParam_1
it only computes the number 's length in hexadecimal digits
Likewise , it will cache a NULL response so that future queries wo n't repeat the same iteration unless the state table changes
RSA_new_APIName allocates and initializes an RSA_new_APIParam_0 structure
BN_mod_add_APIName adds BN_mod_add_APIParam_2 to BN_mod_add_APIParam_3 modulo BN_mod_add_APIParam_4 and places the non-negative result in BN_mod_add_APIParam_1
This is the default
OpenSSL automatically queries
The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name , set and get the NID for the curve respectively
The ASN1 object utility functions such as OBJ_nid2obj_APIName are used instead
y ^ 2 mod p = x ^ 3 + ax + b mod p
Unlike the mechanisms to set a cipher list , there is no method available to restrict the list of compression method on a per connection basis
It is equivalent to calling RSA_new_method
Server sessions are added to the session cache
The body of the record is being evaluated
The functions EVP_PKEY_CTX_set_app_data_APIName and EVP_PKEY_CTX_get_app_data_APIName set and retrieve an opaque pointer
EC_KEY_generate_key generates a new public and private key for the supplied EC_KEY_set_asn1_flag_APIParam_1 EC_KEY_set_conv_form_APIParam_1 object
The EVP_PKEY_CTX_new_id_APIName function allocates public key algorithm context using the algorithm specified by EVP_PKEY_CTX_new_id_APIParam_1 and ENGINE EVP_PKEY_CTX_new_id_APIParam_2
Any data written to a memory BIO can be recalled by reading from the memory BIO
SSL_CTX_set_tmp_rsa_APIName sets the temporary/ephemeral RSA key to be used to be SSL_CTX_set_tmp_rsa_APIParam_2
X509_VERIFY_PARAM_set_purpose_APIName sets the verification purpose in X509_VERIFY_PARAM_set_purpose_APIParam_1 to X509_VERIFY_PARAM_set_purpose_APIParam_2
This function simply wraps calls to EC_KEY_new and EC_GROUP_new_by_curve_name
For almost all applications X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 can be set to -1 and X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 to 0
Refer to EC_GROUP_new_APIName for a description of curve names
Already created SSL objects are not affected
BN_generate_prime_ex_APIParam_1 will be used to store the number
Calls to BIO_read_APIName will read data from the buffer or request a retry
SSL_CIPHER_get_bits_APIParam_2 contains the number of bits processed by the chosen algorithm
As of version 0.9.7 , DSA_METHOD implementations are grouped together with other algorithmic APIs in DSA_new_method_APIParam_1 modules
DSA_generate_parameters_APIParam_1 DSA_generate_parameters_ex_APIParam_2 is the length of the prime to be generated
The public key is an EC_POINT on the curve calculated by multiplying the generator for the curve by the private key
This adds a new entry to the end of X509_NAME_add_entry_by_txt_APIParam_1 X509_NAME_add_entry_by_NID_APIParam_1 X509_NAME_delete_entry_APIParam_1 X509_NAME_add_entry_APIParam_1 X509_NAME_add_entry_by_OBJ_APIParam_1 as a single valued RelativeDistinguishedName
X509_NAME_get_entry_APIName retrieves the X509_NAME_get_entry_APIParam_0 from X509_NAME_get_entry_APIParam_1 corresponding to index X509_NAME_get_entry_APIParam_2
BIO_write_APIName attempts to write BIO_write_APIParam_3 bytes from BIO_write_APIParam_2 to BIO BIO_write_APIParam_1
This behaviour can also be changed
The key is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_APIParam_1 with < SSL_new_APIName | SSL_new_APIName >
The private keys loaded from file can be encrypted
The previous two bugs are fixed in the newer EVP_SignDigest_APIName function
Calling BIO_reset_APIName on a buffering BIO clears any buffered data
The function EVP_PKEY_copy_parameters_APIName copies the parameters from key EVP_PKEY_copy_parameters_APIParam_2 to key EVP_PKEY_copy_parameters_APIParam_1
PEM_write_bio_CMS_stream_APIName outputs a CMS_ContentInfo structure in PEM format
No BIO was connected to the SSL object
No certificate was presented by the peer or no connection was established
only any data read from the memory BIO is deleted from the BIO
the server will try to reuse the session
These functions apply to SSL/TLS servers only
They can take appropriate action based on the status of the certificate
a new socket BIO is created for the connection and appended to the chain
the server looks for the corresponding session in the internal session cache , in the external cache if available
The decompression function received improper input
For all functions , BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 is a previously allocated BN_exp_APIParam_4 BN_gcd_APIParam_4 BN_nnmod_APIParam_4 BN_mul_APIParam_4 BN_mod_sqr_APIParam_4 BN_sqr_APIParam_3 BN_mod_APIParam_4 used for temporary variables
Applications will typically call OCSP_resp_find_status_APIName using the certificate ID of interest and check its validity using OCSP_check_validity_APIName
The EVP_PKEY_derive_APIName derives a shared secret using EVP_PKEY_derive_APIParam_1
SSL_shutdown_APIName supports both uni - and bidirectional shutdown by SSL_shutdown_APIName 2 step behaviour
BUF_MEM_new_APIName allocates a new buffer of zero size
there is no need to use these pseudo-digests in OpenSSL 1.0.0 and later , they are however retained for compatibility
BN_from_montgomery_APIName performs the Montgomery reduction BN_from_montgomery_APIParam_1 = BN_from_montgomery_APIParam_2R ^ -1
EC_POINT_dup creates a new EC_POINT object and copies the content from EC_POINT_dup_APIParam_1 EC_POINT_copy_APIParam_2 to the newly created EC_POINT object
SSL_write_APIName writes SSL_write_APIParam_3 bytes from the buffer SSL_write_APIParam_2 into the specified SSL_write_APIParam_1 connection
SSL_free_APIName does not provide diagnostic information
SSL_set_ex_data_APIName is used to store application data at SSL_set_ex_data_APIParam_3 for SSL_set_ex_data_APIParam_2 into the SSL_set_ex_data_APIParam_1 object
After the call to EVP_PKEY_keygen_init_APIName or EVP_PKEY_paramgen_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
EVP_SignUpdate_APIName hashes EVP_SignUpdate_APIParam_3 bytes of data at EVP_SignUpdate_APIParam_2 into the signature context EVP_SignUpdate_APIParam_1
This function can be called several times on the same EVP_SignUpdate_APIParam_1 to include additional data
The usage of all of these functions is similar to the d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page
SSL_flush_sessions_APIName is a synonym for SSL_CTX_flush_sessions_APIName
DSA_SIG_free_APIName frees the DSA_SIG_free_APIParam_1 structure and its components
The buffer library handles simple character arrays
After the call to EVP_PKEY_derive_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
ENGINE_by_id_APIName , ENGINE_get_first_APIName , ENGINE_get_last_APIName , ENGINE_get_next_APIName , ENGINE_get_prev_APIName
There are two encoding flags currently defined - EC_PKEY_NO_PARAMETERS and EC_PKEY_NO_PUBKEY
the session object will be kept and all settings corresponding.
BIO_shutdown_wr_APIName is used to close down a BIO BIO_ctrl_get_write_guarantee_APIParam_1 BIO_ctrl_get_read_request_APIParam_1 BIO_ctrl_reset_read_request_APIParam_1
Typically the server callback would set that response data by calling SSL_set_tlsext_status_ocsp_resp_APIName
see draft-ietf-tls-downgrade-scsv-00 for details
Send TLS_FALLBACK_SCSV in the ClientHello
A failure or the X509_NAME could not be extracted from SSL_add_client_CA_APIParam_2 SSL_CTX_add_client_CA_APIParam_2
Typically the server callback would obtain the OCSP response to be sent back
Buffers are used for various purposes in the library , most notably memory BIOs
The server either agrees to reuse the session or it starts a full handshake
eg the special method used will be kept for the next handshake
Similarly , SSL_get_psk_identity_APIName is used to retrieve the PSK identity used
the public key is not encoded along with the private key
This explicitly means , that
SSL_get_psk_identity_hint_APIName is used to retrieve the PSK identity hint used
this functionality is disabled and tickets will not be used by clients or servers.
the shared secret is written to EVP_PKEY_derive_APIParam_2 and the amount of data written to EVP_PKEY_derive_APIParam_3
the maximum size of the output buffer is written to the EVP_PKEY_derive_APIParam_3 parameter
a SSL client object will use a TLSv1 client method for the next handshake and a SSL server object will use a TLSv1 server method , * _ methods were chosen on startup .
A random block has better than 1 in 256 chance of being of the correct format and problems with the input data earlier on will not produce a final decrypt error
simply copy the data
This is a wrapper round the platform 's socket routines
EVP_EncryptFinal_APIName , EVP_DecryptFinal_APIName and EVP_CipherFinal_APIName are identical to EVP_EncryptFinal_ex_APIName , EVP_DecryptFinal_ex_APIName and EVP_CipherFinal_ex_APIName
BIO_set_bind_mode_APIName and BIO_get_bind_mode_APIName set and retrieve the current bind mode
y ^ 2 + xy = x ^ 3 + ax ^ 2 + b
EC_GROUP_copy , EC_GROUP_set_generator , EC_GROUP_check , EC_GROUP_check_discriminant , EC_GROUP_get_trinomial_basis and EC_GROUP_get_pentanomial_basis
The functions EC_KEY_get_enc_flags and EC_KEY_set_enc_flags get and set the value of the encoding flags for the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1
it is the applications responsibility to set the inner content type of any outer CMS_ContentInfo structures
RIPEMD160_Init_APIName initializes a RIPEMD160_Init_APIParam_1 structure
other sockets can bind to the same port
The number of bits processed can be different from the secret bits
The predecessor of SHA-1 , SHA , is also implemented , but
the public parameters for the curve are not encoded along with the private key
After the call to EVP_PKEY_verify_recover_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
BIO_get_fp_APIName retrieves the fp of a file BIO , BIO_get_fp_APIName is a macro
BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 has the same meaning as in BIO_new_fp_APIName , BIO_set_fp_APIParam_3 BIO_new_fp_APIParam_2 is a macro
Blowfish is a block cipher that operates on 64 bit blocks of data
This means that calls to EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data
Any data written or read through a digest BIO using BIO_read_APIName and BIO_write_APIName is digested
For most applications the EVP_DigestInit_ex_APIParam_3 parameter to EVP_DigestInit_ex_APIName will be set to NULL to use the default digest implementation
Note that different libraries may use the same value to signal different functions and reasons
the session data are negotiated using the ephemeral/temporary RSA key and the RSA key supplied and certified by the certificate chain is only used for signing
Objects do not need to be in the internal tables to be processed , the functions OBJ_txt2obj_APIName and OBJ_obj2txt_APIName can process the numerical form of an OID
The reason for having separate file descriptor and socket BIOs is that on some platforms sockets are not file descriptors and use distinct I/O routines , Windows is one such platform
This implies , that all corresponding sessions from an external session cache are removed as well
the EGD-interface compatible daemon PRNGD is available from http
The SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object that received or sent the message
This means that calls to EVP_SignUpdate_APIName and EVP_SignFinal_APIName can be called later to digest and sign additional data
The data is zeroed before freeing up in case the buffer contains sensitive data
RSA_new_method_APIName allocates and initializes an RSA_new_method_APIParam_1 structure so that RSA_new_method_APIParam_1 will be used for the RSA operations
PKCS # 1 v1 .5 padding with an SSL-specific modification that denotes that the server is SSL3 capable
Old documentation indicated a difference between 0 and -1 , and that -1 was retryable
after one structure is encoded or decoded another will processed after it
Typically a callback would obtain an OCSP_RESPONSE object from this data via a call to the d2i_OCSP_RESPONSE_APIName function
the sending of the `` close notify '' shutdown alert and the reception of the peer 's `` close notify '' shutdown alert
BIO_push_APIName joins two BIO chains whereas BIO_pop_APIName deletes a single BIO from a chain , the deleted BIO does not need to be at the end of a chain
The parser assumes that the CMS_ContentInfo structure is always base64 encoded and will not handle the case where the CMS_ContentInfo structure is in binary format or uses quoted printable format
the EGD entropy gathering daemon provides a socket interface through which entropy can be gathered in chunks up to 255 bytes
the internal session cache will collect all sessions established up to the specified maximum number
passing a public key to EVP_PKEY_print_private_APIName will only print the public components
According to the TLS standard , it is acceptable for an application to only send its shutdown alert and close the underlying connection without waiting for the peer 's response
The BN_RECP_CTX_set_APIParam_1 BN_div_recp_APIParam_4 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 structure is defined as follows
The actual NID value is an internal value which may not have a corresponding OBJECT IDENTIFIER
as a result a statically linked executable can be quite large
RSA_private_decrypt_APIParam_5 is the padding mode that was used to encrypt the data
instead of calling the RC4 functions directly
lh_stats_bio_APIName , lh_node_stats_bio_APIName and lh_node_usage_stats_bio_APIName are the same as the above , except that the output goes to a lh_stats_bio_APIParam_2 lh_node_stats_bio_APIParam_2 lh_node_usage_stats_bio_APIParam_2
The prompt itself is divided in two , one part being the descriptive text and one describing the possible answers
The ` actual load ' is the average number of items per ` bucket ' , but only for buckets which contain entries
Freeing up any half of the pair will automatically destroy the association
The error codes can be obtained by ERR_get_error_APIName
Check the error stack to find out the reason
UI_add_input_boolean_APIName adds a prompt to the UI that 's supposed to be answered in a boolean way , with a single character for yes and a different character for no
A memory BIO is a source/sink BIO which uses memory for its I/O
A new point is constructed by calling the function EC_POINT_new and providing the EC_POINT_get_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GF2m_APIParam_1 EC_POINT_oct2point_APIParam_1 EC_POINT_point2oct_APIParam_1 EC_POINT_dup_APIParam_2 EC_POINT_set_compressed_coordinates_GFp_APIParam_1 EC_POINT_get_affine_coordinates_GFp_APIParam_1 EC_POINT_set_Jprojective_coordinates_GFp_APIParam_1 EC_POINT_set_to_infinity_APIParam_1 EC_POINT_set_affine_coordinates_GF2m_APIParam_1 EC_POINT_new_APIParam_1 EC_POINT_set_affine_coordinates_GFp_APIParam_1 EC_POINT_set_compressed_coordinates_GF2m_APIParam_1 object that the point relates to
This is mostly a legacy of Eric Young writing this library for the reasons of implementing what looked like a nice algorithm rather than for a particular software product
This is a wrapper round the platform 's TCP/IP socket accept routines
In case of an error , an error code is set , which can be obtained by ERR_get_error_APIName
This often means there is no need to locate the required BIO for a particular operation , it can be called on a chain and it will be automatically passed to the relevant BIO
Alternatively you can reconfigure the toolkit with no-sse2 option and recompile
The default is normal shutdown behaviour as described by the TLS standard
I/O performed on an SSL BIO communicates using the SSL protocol with the SSLs read and write BIOs
The RSA_print_APIParam_2 RSA_blinding_off_APIParam_1 RSA_free_APIParam_1 RSA_get_ex_data_APIParam_1 RSA_set_method_APIParam_1 RSA_print_fp_APIParam_2 RSA_set_ex_data_APIParam_1 RSA_get_method_APIParam_1 RSA_set_default_method_APIParam_1 RSA_size_APIParam_1 RSA_blinding_on_APIParam_1 RSA_flags_APIParam_1 RSA_check_key_APIParam_1 structure consists of several BIGNUM components
Data written to a memory BIO is stored in a BUF_MEM structure which is extended as appropriate to accommodate the stored data
An ENGINE has 3 properties it exposes that can affect how this behaves
The function EC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication , whilst EC_GROUP_have_precompute_mult tests whether precomputation has already been done
BIO_flush_APIName on a base64 BIO that is being written through is used to signal that no more data is to be encoded
Whilst these commands are automatically processed by the OpenSSL framework code , they use various properties exposed by each ENGINE to process these queries
The X509 encode and decode routines encode and parse an i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure , which represents an X509 certificate
Normally applications will only call CONF_modules_free_APIName at application to tidy up any configuration performed
An application can decide how to process the CMS_ContentInfo structure based on this value
it is assumed that both sessions are identical
the callback function will never see messages that are considered too large to be processed
The meaning of the parameters passed to the callback will depend on the algorithm and the specifiic implementation of the algorithm
SSL_pending_APIName can be used to find out whether there are buffered bytes available for immediate retrieval
A client will send out TLSv1 .1 client hello messages and will also indicate that client only understand TLSv1 .1
it is examined whether a session with the same session id already exists
This mechanism is entirely based on the use of name-value pairs and assumes ASCII input 
so This mechanism is ideal
the peer may send a certificate chain
BIO_ctrl_get_write_guarantee_APIName is a function whereas BIO_get_write_guarantee_APIName is a macro
decryption uses the same function calls as encryption
DES_ofb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName using Output Feed Back mode
A more advanced callback might examine the handshake parameters and set whatever chain is appropriate
The function EC_GROUP_check_discriminant calculates the discriminant for the curve and verifies that it is valid
ERR_print_errors_APIName can be used to print all error codes currently in the queue
This is a wrapper round the platforms file descriptor routines such as read_APIName and write_APIName
In the latter case , OpenSSL will from on behave the way it used to before the ENGINE API existed
The fact that ENGINEs are made visible to OpenSSL does not mean they are `` registered '' or called into use by OpenSSL automatically - that behaviour is something for the application to control
However , applications may not need to concern themselves with discovering the supported control commands and simply prefer to pass settings into ENGINEs exactly as they are provided by the user
Once the identities of the compression methods for the TLS protocol have been standardized , the compression API will most likely be changed
There is a mechanism supported by the ENGINE framework that allows each ENGINE implementation to define an arbitrary set of configuration `` commands '' and expose them to OpenSSL and any applications based on OpenSSL
This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO `` flavour '' to SSL I/O
The behaviour of BIO_read_APIName and BIO_write_APIName depends on the behavior of the platforms read_APIName and write_APIName calls on the descriptor
the content is output in BER format using indefinite length constructed encoding except in the case of signed data with detached content where the content is absent and DER format is used
SSL_CTX_use_certificate_ASN1_APIName loads the ASN1 encoded certificate from the memory location SSL_CTX_use_certificate_ASN1_APIParam_3 SSL_use_certificate_ASN1_APIParam_2 into SSL_CTX_use_certificate_ASN1_APIParam_1 , SSL_use_certificate_ASN1_APIName loads the ASN1 encoded certificate into SSL_use_certificate_ASN1_APIParam_1
BIO_new_bio_pair_APIName does not check whether BIO_new_bio_pair_APIParam_1 BIO_new_bio_pair_APIParam_1 or BIO_new_bio_pair_APIParam_3 BIO_new_bio_pair_APIParam_3 do point to some other BIO , the values are overwritten , BIO_free_APIName is not called
The context need not be set or The context can be set to NULL in which case only syntax checking of commands is performed , where possible
Note that several calls to this function does n't add data , several calls to this function replaces the previous blob with the one given as argument
Others may prefer to load all support and have OpenSSL automatically use at run-time any ENGINE that is able to successfully initialise - ie to assume that this corresponds to acceleration hardware attached to the machine or some such thing
There are probably numerous other ways in which applications may prefer to handle things , so we will simply illustrate the consequences as they apply to a couple of simple cases and leave developers to consider these and the source code to openssl 's builtin utilities as guides
ERR_print_errors_fp_APIName is the same , except that the output goes to a ERR_print_errors_fp_APIParam_1
This flag is 0
This flag is 1
The functions EVP_PKEY_keygen_APIName and EVP_PKEY_paramgen_APIName can be called more than once on the same context
The value EC_POINT_mul_APIParam_3 EC_POINTs_mul_APIParam_3 may be NULL in which case the result is just EC_POINT_mul_APIParam_4 EC_POINT_mul_APIParam_5 EC_POINTs_mul_APIParam_6
Using this flag can save around 34k per idle SSL connection
For a curve defined over Fp the discriminant is given by the formula 4a ^ 3 + 27b ^ 2 whilst for F2 ^ m curves the discriminant is simply b
Many browsers implement a `` sign and encrypt '' option which is simply an S/MIME envelopedData containing an S/MIME signed message
The main purpose of the functions EVP_PKEY_missing_parameters_APIName and EVP_PKEY_copy_parameters_APIName is to handle public keys in certificates where the parameters are sometimes omitted from a public key
This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to PKCS7_encrypt_APIName
Older versions of this documentation wrongly stated that calls to EVP_SignUpdate_APIName could not be made after calling EVP_SignFinal_APIName
lh_stats_APIName prints out statistics on the size of the hash table , how many entries are in the hash table , and the number and result of calls to the routines in this library
des_read_pw_APIName writes the string specified by des_read_pw_APIParam_4 des_read_pw_APIParam_4 to standard output turns echo off and reads an input string from the terminal
The CMS_decrypt_APIParam_4 parameter is used in the rare case where the encrypted content is detached
Prepending a BIO_f_buffer_APIName buffering BIO will prevent this
This can be used to set either defaults or values which can not be overridden
it passes I/O calls to the next BIO in the chain
The meaning of the reason code and the action that should be taken depends on the type of BIO that resulted in this condition
Released memory is either appended to a list of unused RAM chunks on the SSL_CTX , or simply freed
An application provided procedure also has access to the verify depth information and the verify_callback_APIName function , but the way this information is used may be different
UI_free_APIName removes a UI from memory , along with all other pieces of memory that 's connected to it , like duplicated input strings , results and others
In OpenSSL 0.9.6 and later the SSL flag SSL_AUTO_RETRY can be set to disable this behaviour
EVP_PKEY_meth_add0_APIName adds EVP_PKEY_meth_add0_APIParam_1 to the user defined stack of methods
For every 3 bytes of binary data provided 4 bytes of base 64 encoded data will be produced plus some occasional newlines
The BN_from_montgomery_APIParam_3 BN_MONT_CTX_copy_APIParam_1 BN_to_montgomery_APIParam_3 BN_MONT_CTX_init_APIParam_1 BN_MONT_CTX_free_APIParam_1 BN_MONT_CTX_set_APIParam_1 structure is defined as follows
PKCS7_sign_add_signer_APIName adds a signer with certificate PKCS7_sign_add_signer_APIParam_2 and private key PKCS7_sign_add_signer_APIParam_3 using message digest PKCS7_sign_add_signer_APIParam_4 to a PKCS7 signed data structure PKCS7_sign_add_signer_APIParam_1
The default depth limit is 100 , allowing for the peer certificate and additional 100 CA certificates
For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two possible solutions for y has been used , followed by the octets for x , followed by the octets for y
The process of calling BIO_push_APIName and BIO_pop_APIName on a BIO may have additional consequences any effects will be noted in the descriptions of individual BIOs
In these cases , the session data are negotiated using the ephemeral/temporary DH key and the key supplied and certified by the certificate chain is only used for signing
the handle to that ENGINE will be released during the change
SSL_CTX_set_verify_depth_APIName sets the maximum SSL_CTX_set_verify_depth_APIParam_2 for the certificate chain verification that shall be allowed for SSL_CTX_set_verify_depth_APIParam_1
It will also performs certain sanity checks on the key to confirm that it is valid
CMS_add0_recipient_key_APIName adds symmetric key CMS_add0_recipient_key_APIParam_3 of length CMS_add0_recipient_key_APIParam_4 using wrapping algorithm CMS_add0_recipient_key_APIParam_2 , identifier CMS_add0_recipient_key_APIParam_5 of length CMS_add0_recipient_key_APIParam_6 and optional values CMS_add0_recipient_key_APIParam_7 , CMS_add0_recipient_key_APIParam_8 and CMS_add0_recipient_key_APIParam_9 to CMS_ContentInfo enveloped data structure CMS_add0_recipient_key_APIParam_1 as a KEKRecipientInfo structure
OBJ_nid2obj_APIName , OBJ_nid2ln_APIName and OBJ_nid2sn_APIName convert the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 to an ASN1_OBJECT structure , the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 long name and the NID OBJ_nid2obj_APIParam_1 OBJ_nid2ln_APIParam_1 OBJ_nid2sn_APIParam_1 short name respectively , or NULL
A shutdown alert was received form the peer , either a normal `` close notify '' or a fatal error
Data read from a buffering BIO comes from an internal buffer which is filled from the next BIO in the chain
Under previous export restrictions , ciphers with RSA keys shorter than the usual key length of 1024 bits were created
Sent by the server to indicate that the server does not recognize a PSK identity or an SRP identity
As an example , a hash table may be maintained by code that , for reasons of encapsulation , has only `` const '' access to the data being indexed in the hash table - the LHASH prototypes are appropriate as-is
Objects which are not in the table have the NID value NID_undef
no 8 byte padding
Base 64 encoding converts binary data into a printable form that uses the characters A-Z , a-z , 0-9 , '' + '' and '' / '' to represent the data
There are several reasons why calling the OpenSSL configuration routines is advisable
any error relating to the private key will not be indicated until after potentially large amounts of data have been passed through EVP_SignUpdate_APIName
However very few applications currently support the control interface and so very few can load and use dynamic ENGINEs
In the case where PSK identity hint is NULL , the server does not send the ServerKeyExchange message to the client
In OpenSSL 0.9.7 control functions can be supported by ENGINEs , this can be used to load dynamic ENGINEs from shared libraries
X509_STORE_set_verify_cb_func_APIName also sets the verification callback but X509_STORE_set_verify_cb_func_APIName is implemented as a macro
The error message produced will be that of an incomplete certificate chain and not X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected
This will only happen as a result of a memory allocation failure so this is not too much of a problem in practice
DSA_generate_key_APIName describes how to generate a signature key
This is a filter BIO that digests any data passed through it , it is a BIO wrapper for the digest routines EVP_DigestInit_APIName , EVP_DigestUpdate_APIName and EVP_DigestFinal_APIName
Conversion to Jacobian projective to affine co-ordinates is simple
A mapping exists between Jacobian projective co-ordinates and affine co-ordinates
The asn1_flag value on a curve is used to determine whether there is a specific ASN1 OID to describe the curve or not
Jacobian projective co-ordinates are expressed as three values x , y and z
The EVP_PKEY_keygen_APIName function performs a key generation operation , the generated key is written to EVP_PKEY_keygen_APIParam_2
The following code illustrates how to approach this
A Jacobian projective co-ordinate (x, y, z) can be written as an affine co-ordinate as (x/(z^2), y/(z^3)).
As its name implies a source/sink BIO is a source and/or sink of data , examples include a socket BIO and a file BIO
Normally clients and servers will , where possible , transparently make use of RFC4507bis tickets for stateless session resumption
In OpenSSL versions before 1.0.0 the BIO_pop_APIName call was handled incorrectly , the I/O BIO reference count was incorrectly incremented and dissociated with the SSL BIO
that will override any DH defaults set using the DH API
pem_passwd_cb_APIParam_3 indicates whether the callback is used for reading/decryption or writing/encryption
This context contains all the information needed to prompt correctly as well as a reference to a UI_METHOD , which is an ordered vector of functions that carry out the actual prompting
Othewise these behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page
This indicates that no description is available for this alert type
On invocation a pointer to pem_passwd_cb_APIParam_4 is provided
A client will send out TLSv1 .2 client hello messages and will also indicate that client only understand TLSv1 .2
SSL objects created from SSL_CTX_set_quiet_shutdown_APIParam_1 inherit the SSL_CTX_set_quiet_shutdown_APIParam_2 valid at the time SSL_new_APIName is called
This means that calls to EVP_DigestSignUpdate_APIName and EVP_DigestSignFinal_APIName can be called later to digest and sign additional data
Any command value lower than this symbol is considered a `` generic '' command is handled directly by the OpenSSL core routines
A DH_set_default_method_APIParam_1 DH_set_method_APIParam_2 specifies the functions that OpenSSL uses for Diffie-Hellman operations
By modifying the method , alternative implementations such as hardware accelerators may be used
then close_APIName is called on the underlying file descriptor
These CA certificates are made available via lookup methods , handled inside the X509_STORE
in some cases an error may simply print out a warning message and the application continue
These functions are very similar to the X509 functions described in d2i_X509_APIName , where further notes and examples are available
It is possible to discover at run-time the names , numerical-ids , descriptions and input parameters of the control commands supported by an ENGINE using a structural reference
From the X509_STORE the X509_STORE_CTX used is created
the results for earlier versions of TLS and DTLS may not be very useful
X509_check_ip_asc_APIName is similar , except that the NUL-terminated string X509_check_ip_asc_APIParam_2 is first converted to the internal representation
So the application can use SSL_CTX_add_session_APIName directly to have full control over the sessions that
pem_passwd_cb_APIName can use pem_passwd_cb_APIParam_3 to check , whether an item shall be encrypted
The function EC_GROUP_check performs a number of checks on a curve to verify that it is valid
Note that some control commands are defined by OpenSSL itself and it will intercept and handle these control commands on behalf of the ENGINE , ie the ENGINE 's ctrl_APIName handler is not used for the control command
Sometimes however it is useful to obtain the data originally signed using a signing operation
i2d_X509_APIName encodes the structure pointed to by i2d_X509_APIParam_1 into DER format
HMAC_Init_APIName initializes a HMAC_Init_APIParam_1 structure to use the hash function HMAC_APIParam_1 and the key HMAC_Init_APIParam_2 which is HMAC_Init_APIParam_3 bytes long
Checks performed include verifying that the discriminant is non zero, a generator has been defined and the generator is on the curve and has the correct order.
The functions SSL_CTX_build_cert_chain_APIName and SSL_build_cert_chain_APIName can be used to check application configuration and to ensure any necessary subordinate CAs are sent in the correct order
The functions are as follows
EVP_VerifyInit_APIName initializes verification context EVP_VerifyInit_APIParam_1 to use the default implementation of digest EVP_VerifyInit_APIParam_2
Whether the session was reused can be queried with the SSL_session_reused_APIName call
Protocol messages are passed to the callback function after decryption and fragment collection where applicable
The EVP_PKEY_new_APIName function allocates an empty EVP_PKEY_new_APIParam_0 structure which is used by OpenSSL to store private keys
Specifically , one case where this happens is when step up occurs
DH_generate_parameters_ex_APIName generates Diffie-Hellman parameters that can be shared among a group of users , and stores them in the provided DH_generate_parameters_ex_APIParam_1 structure
These functions allow an ASN1_STRING_set_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_data_APIParam_1 ASN1_STRING_type_APIParam_1 structure to be manipulated
The error code that can be obtained by ERR_get_error_APIName
In some versions of OpenSSL and some parts of the reused structure may persist if some parts of the reused structure are not present in the new one
EC_KEY_check_key performs various sanity checks on the EC_KEY object to confirm that EC_KEY object is valid
The encoding of the TBSCertificate portion of a certificate is cached in the i2d_X509_AUX_APIParam_1 d2i_X509_APIParam_1 i2d_X509_bio_APIParam_2 i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 d2i_X509_AUX_APIParam_1 i2d_re_X509_tbs_APIParam_1 d2i_X509_fp_APIParam_2 d2i_X509_bio_APIParam_2 structure internally to improve encoding performance and to ensure certificate signatures are verified correctly in some certificates with broken encodings
The error codes that can be obtained by ERR_get_error_APIName
A UI can contain more than one prompt , which are performed in the given sequence
EVP_PKEY_meth_free_APIName frees an existing EVP_PKEY_meth_free_APIParam_1 pointed by EVP_PKEY_meth_free_APIParam_1
HMAC is a MAC , ie a keyed hash function used for message authentication , which is based on a hash function
Slated for possible release in 0.9.8 is support for transparent loading of `` dynamic '' ENGINEs
is writes the DER encoded data to the buffer at i2d_X509_APIParam_2, and increments it to point after the data just written.
This has several potential uses , it can be used to cache data associated with a structure or some additional data
RAND_write_file_APIName writes a number of random bytes to file RAND_write_file_APIParam_1 RAND_load_file_APIParam_1 which can be used to initialize the PRNG by calling RAND_load_file_APIName in a later session
BIO_read_filename_APIName , BIO_write_filename_APIName , BIO_append_filename_APIName and BIO_rw_filename_APIName set the file BIO BIO_read_filename_APIParam_1 BIO_write_filename_APIParam_1 BIO_append_filename_APIParam_1 BIO_rw_filename_APIParam_1 to use file BIO_read_filename_APIParam_2 BIO_write_filename_APIParam_2 BIO_append_filename_APIParam_2 BIO_rw_filename_APIParam_2 for reading , writing , append or read write respectively
A TLSCiphertext record was received which had a length more than 2 ^ 14 +2048 bytes , or a record decrypted to a TLSCompressed record with more than 2 ^ 14 +1024 bytes
EC_GROUP_cmp compares EC_GROUP_cmp_APIParam_1 and EC_GROUP_cmp_APIParam_2 to determine whether they represent the same curve or not
Data are received in blocks from the peer
SSL_set1_curves_APIName and SSL_set1_curves_list_APIName are similar except SSL_set1_curves_APIName and SSL_set1_curves_list_APIName set supported curves for the SSL structure SSL_set1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1
So symmetric encryption is used for bulk encryption and the small random symmetric key used is transferred using public key encryption
Check out the error stack to find out the reason for failure
Calling SSL_CTX_build_cert_chain_APIName or SSL_build_cert_chain_APIName is more efficient than the automatic chain building as it is only performed once
DES_set_key_checked_APIName will check that the key passed is of odd parity and is not a weak or semi-weak key
For each supported abstraction , the ENGINE code maintains an internal table of state to control which implementations are available for a given abstraction and which should be used by default
In the case of other abstractions like RSA , DSA , etc , there is only one `` algorithm '' so all implementations implicitly register using the same ` nid ' index
BN_set_word_APIParam_2 is a macro that will be an unsigned integral type optimied for the most efficient implementation on the local platform
This would allow ENGINE implementations to be provided independently of OpenSSL libraries and/or OpenSSL-based applications , and would also remove any requirement for applications to explicitly use the `` dynamic '' ENGINE to bind to shared-library implementations
A BIO is an I/O abstraction , BIO hides many of the underlying I/O details from an application
The various LHASH macros and callback types exist to make it possible to write type-checked code without resorting to function-prototype casting - an evil that makes application code much harder to audit/verify and also opens the window of opportunity for stack corruption and other hard-to-find bugs
ASN1_generate_nconf_APIParam_1 ASN1_generate_v3_APIParam_1 contains the string to encode ASN1_generate_nconf_APIParam_2 or ASN1_generate_v3_APIParam_2 contains the optional configuration information where additional strings will be read from
The CMS_uncompress_APIParam_2 parameter is used in the rare case where the compressed content is detached
DSA_new_method_APIName allocates and initializes a DSA structure so that DSA_new_method_APIParam_1 will be used for the DSA operations
One way to do this is to set the prefix to an appropriate value using SSL_CONF_CTX_set1_prefix_APIName , pass the current argument to SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 and the following argument to SSL_CONF_cmd_APIParam_3
EC_POINT_is_on_curve tests whether the supplied point is on the curve or not
Note that SHA224 and SHA256 use a SHA224_Update_APIParam_1 SHA256_Update_APIParam_1 SHA224_Init_APIParam_1 SHA256_Final_APIParam_2 SHA256_Init_APIParam_1 SHA224_Final_APIParam_2 object instead of SHA1_Init_APIParam_1 SHA1_Final_APIParam_2 SHA1_Update_APIParam_1
ASN1_generate_nconf_APIParam_2 will typically come from a config file wherease ASN1_generate_v3_APIParam_2 is obtained from an ASN1_generate_v3_APIParam_2 structure which will typically be used by X509 v3 certificate extension functions
A number of the builtin curves within the library provide seed values that can be obtained
Unlike SSL_get_error_APIName , which also evaluates the error queue , the results are obtained by examining an internal state flag only
the b parameter was generated in a verifiable fashion using that seed
Here we 'll assume we want to load and register all ENGINE implementations bundled with OpenSSL , such that
EVP_DigestInit_APIName behaves in the same way as EVP_DigestInit_ex_APIName except the passed context EVP_DigestInit_APIParam_1 EVP_DigestInit_ex_APIParam_1 does not have to be initialized , and it always uses the default digest implementation
The flags set affect how subsequent calls to SSL_CONF_cmd_APIName or SSL_CONF_argv_APIName behave
Additionally `` old style '' callbacks are used instead of the newer BN_GENCB based approach
RAND_bytes_APIName describes how to obtain random data from the PRNG
X509_NAME_add_entry_by_txt_APIName , X509_NAME_add_entry_by_OBJ_APIName and X509_NAME_add_entry_by_NID_APIName add a field whose name is defined by a string X509_NAME_add_entry_by_txt_APIParam_2 , an object X509_NAME_add_entry_by_OBJ_APIParam_2 or a NID X509_NAME_add_entry_by_NID_APIParam_2 respectively
This provides advantages in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks , or have any trapdoors in it
Currently no detailed documentation on how to use the X509_STORE object is available
starting with the one it considers the most secure
As mentioned , functional references exist
SSL_read_APIName will negotiate a TLS/SSL session , if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName
So will eg the verify_callback_APIName be overridden with the verify_callback_APIName set via the SSL_CTX_set_verify_APIName family of functions
the default engine for DSA operations is used
the DSA_METHOD controlled by DSA_set_default_method_APIName is used
The other digest algorithms are still in common use
any additional BIOs are placed between the socket and the accept BIO , that is the chain will be accept - > otherbios - > socket
it was either assigned a dedicated client method , a dedicated server method , or a generic method , that can be used for both client and server connections
These functions usage is identical to that of RSA_get_ex_new_index_APIName , RSA_set_ex_data_APIName and RSA_get_ex_data_APIName as described in RSA_get_ex_new_index_APIName
The certificate matching functions are used to check whether a certificate matches a given host name , email address , or IP address
Read and write operations on an accept BIO will perform I/O on the underlying connection
A client will send out SSLv2 client hello messages and will also indicate that client only understand SSLv2
ERR_pop_to_mark_APIName will pop the top of the error stack until a mark is found
The rest of the certificates needed to form the complete certificate chain can be specified using the SSL_CTX_add_extra_chain_cert_APIName function
Note that DH keys may use non-standard DH_set_method_APIParam_2 DH_set_default_method_APIParam_1 implementations , either directly or by the use of DH_new_method_APIParam_1 modules
The `` thread id '' object of a newly allocated BN_BLINDING_thread_id_APIParam_1 structure is initialised to the thread id in which BN_BLINDING_new_APIName was called
the whole stack is removed
The TLS RFC does however not specify compression methods or their corresponding identifiers , so there is currently no compatible way to integrate compression with unknown peers
X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName are legacy functions which have various limitations which make X509_NAME_get_text_by_NID_APIName and X509_NAME_get_text_by_OBJ_APIName of minimal use in practice
so it is possible to encode very large structures
SSL_CTX_new_APIName creates a new SSL_CTX_new_APIParam_0 object as framework to establish TLS/SSL enabled connections
At most X509_NAME_get_text_by_NID_APIParam_4 X509_NAME_get_text_by_OBJ_APIParam_4 bytes will be written and the text written to X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3 will be null terminated
Essentially a structural reference is sufficient
bn_expand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for a bn_expand_APIParam_2 bit number
bn_wexpand_APIName ensures that bn_mul_normal_APIParam_4 bn_mul_comba4_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_comba8_APIParam_3 bn_mul_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3 has enough space for an bn_wexpand_APIParam_2 bn_expand2_APIParam_2 word number
Note that DSA keys may use non-standard DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 implementations , either directly or by the use of DSA_new_method_APIParam_1 modules
The output data will be stored in EVP_EncodeFinal_APIParam_2 and the length of the data written will be stored in EVP_EncodeFinal_APIParam_3
both macros call bn_expand2_APIName , which allocates a new bn_div_words_APIParam_3 bn_dump_APIParam_1 array and copies the data
www.microsoft.com - , if session-id reuse is performed , the session-id passed back in the server-finished message is different from the one decided upon
Usually The hash table entries consist of key and value fields
DH_generate_key_APIName describes how to perform a key agreement
des_read_2password_APIName operates in the same way as des_read_password_APIName except that it generates two keys by using the DES_string_to_2key_APIName function
To retrieve this pointer the X509_STORE_CTX_get_ex_data_APIName function can be used with the correct index
EVP_OpenUpdate_APIName and EVP_OpenFinal_APIName have exactly the same properties as the EVP_DecryptUpdate_APIName and EVP_DecryptFinal_APIName routines , as documented on the EVP_EncryptInit_APIName manual page
i2d_ECPKParameters_APIName encodes the structure pointed to by i2d_ECPKParameters_APIParam_1 into DER format
Because of the different protocol , for SSLv2 , the server will send its list of preferences to the client and the client chooses
ASN1_STRING_to_UTF8_APIName converts the string ASN1_STRING_to_UTF8_APIParam_2 to UTF8 format , the converted data is allocated in a buffer in ASN1_STRING_to_UTF8_APIParam_1
The ECPrivateKey encode and decode routines encode and parse an d2i_ECPrivateKey_APIParam_1 EC_KEY_set_enc_flags_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 structure into a binary format and back again
they can obtain the master secret for any ticket using that key and decrypt any traffic using that session
BIO_flush_APIName normally writes out any internally buffered data , in some cases BIO_flush_APIName is used to signal EOF and that no more data will be written
It 's purpose is to perform any operations necessary on CMS_final_APIParam_1 and set the appropriate fields
Whilst the library can be used to create any curve using the functions described above , there are also a number of predefined curves that are available
it will disable SSLv3 support by default but the user can override it
X509_NAME_ENTRY_create_by_txt_APIName , X509_NAME_ENTRY_create_by_OBJ_APIName , X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_set_data_APIName are seldom used in practice are typically used to create and add new entries in a single operation
This means that EVP_VerifyUpdate_APIName and EVP_VerifyFinal_APIName can be called later to digest and verify additional data
The main purpose of this function is to provide finer control over a CMS enveloped data structure where the simpler CMS_encrypt_APIName function defaults are not appropriate
This setting stays valid until a new value is set
This is not the default to avoid the misconception that non-blocking SSL_write_APIName behaves like non-blocking write_APIName
This is a filter BIO that base64 encodes any data written through it and decodes any data read through it
SSL_set_max_cert_list_APIName sets the maximum size allowed for the peer 's certificate chain for SSL_set_max_cert_list_APIParam_1 to be <size> bytes
BN_print_APIName and BN_print_fp_APIName write the hexadecimal encoding of BN_print_APIParam_2 BN_print_fp_APIParam_2 , with a leading ' - ' for negative numbers , to the BN_print_APIParam_1 or BN_print_fp_APIParam_1 BN_print_APIParam_1 BN_print_fp_APIParam_1
These functions implement RSA public key encryption and signatures as defined in PKCS # 1 v2 .0 -LSB- RFC 2437 -RSB-
it writes the DER encoded data to the buffer at i2d_ECPKParameters_APIParam_2, and increments the DER encoded data to point after the data just written.
a pointer to the SSL object is stored into the X509_STORE_CTX object to identify the connection affected
How this is done depends on the underlying I/O structure
SSL_get1_session_APIName will increment the reference count , so that the session will not be implicitly removed by other operations but stays in memory
the decryption operation will always succeed
d2i_ECPKParameters_APIParam_0 is written to d2i_ECPKParameters_APIParam_1
The cipher and digest lookup functions are used in many parts of the library
Additionally all the options supported by ASN1_STRING_print_ex_APIName can be used to control how each field value is displayed
EC_GFp_nist_method offers an implementation optimised for use with NIST recommended curves
This is currently used to support SM2 keys , which use an identical encoding to ECDSA
The ASN1 code is incomplete The ASN1 code has only been tested for certain common S/MIME ciphers in CBC mode
a BIO is automatically used as the SSL BIOs read and write BIOs
they do n't handle multi character fields and have various quirks and inconsistencies
the session will also be removed from the session cache as required by RFC2246
DES_ede3_cfb64_encrypt_APIName and DES_ede2_cfb64_encrypt_APIName is the same as DES_cfb64_encrypt_APIName except that Triple-DES is used
Normally a new session is added to the internal cache as well as any external session caching that is configured for the SSL_CTX
mode is a bitfield describing what should be done with the lock
as a session may be reused , several SSL objects may be using one SSL_SESSION object at the same time
X509_VERIFY_PARAM_set_depth_APIParam_2 is the maximum number of untrusted CA certificates that can appear in a chain
CMS_add1_recipient_cert_APIName adds recipient CMS_add1_recipient_cert_APIParam_2 to CMS_ContentInfo enveloped data structure CMS_add1_recipient_cert_APIParam_1 as a KeyTransRecipientInfo structure
EVP_MD_CTX_copy_APIName is similar to EVP_MD_CTX_copy_ex_APIName except the destination EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 does not have to be initialized
The parser assumes that the PKCS7 structure is always base64 encoded and will not handle the case where the PKCS7 structure is in binary format or uses quoted printable format
A client will send out TLSv1 client hello messages and will indicate that client only understands TLSv1
we assume the user is only supplying commands specific to the given ENGINE so we set this to FALSE
Note that RSA keys may use non-standard RSA_set_method_APIParam_2 RSA_set_default_method_APIParam_1 implementations , either directly or by the use of RSA_new_method_APIParam_1 modules
EVP_DigestSignFinal_APIName signs the data in EVP_DigestSignFinal_APIParam_1 places the signature in EVP_DigestSignFinal_APIParam_2
in the case of a file BIO some data may be available in the FILE structures internal buffers but it is not possible to determine this in a portably way
X509_check_ip_APIName checks if the certificate matches a specified IPv4 or IPv6 address
SSL_write_APIName will negotiate a TLS/SSL session , if not already explicitly performed by SSL_connect_APIName or SSL_accept_APIName
It computes BN_mod_mul_reciprocal_APIParam_1 = % BN_RECP_CTX_set_APIParam_2 using BN_RECP_CTX_set_APIParam_1 BN_RECP_CTX_free_APIParam_1 BN_RECP_CTX_init_APIParam_1 BN_div_recp_APIParam_4 = 1/BN _ RECP_CTX_set_APIParam_2 , which is set as described below
UI_add_info_string_APIName and UI_add_error_string_APIName add strings that are shown at the same time as the prompt for extra information or to show an error string
There are two places where the EVP_PKEY_meth_add0_APIParam_1 objects are stored
IP addresses stored in DNS names and Common Names are ignored
The error codes can be obtained from ERR_get_error_APIName
This might occur where a user clicks on a `` cancel '' button
The parameter SSL_flush_sessions_APIParam_2 SSL_CTX_flush_sessions_APIParam_2 specifies the time which should be used for the expiration test , in most cases the actual time given by time_APIName will be used
DH_new_method_APIName allocates and initializes a DH structure so that DH_new_method_APIParam_1 will be used for the DH operations
SSL_CTX_sess_set_get_cb_APIName sets the callback function which is called
As the shutdown is not specially handled in the SSLv2 protocol , SSL_shutdown_APIName will succeed on the first call
EC_POINT_cmp compares the two supplied points and tests whether or not they are equal
An `` unknown_psk_identity '' alert message will be sent and the connection setup fails
in any SSL/TLS servers where external caching is configured , any successful session lookups in the external cache would normally be copied into the local cache before processing continues - this flag prevents these additions to the internal cache as well
The function EC_POINT_is_at_infinity tests whether the supplied point is at infinity or not
The RAND_add_APIParam_3 argument is an estimate of how much randomness is contained in RAND_add_APIParam_1 , measured in bytes
HMAC_APIName computes the message authentication code of the HMAC_APIParam_1 bytes at HMAC_APIParam_2 using the hash function HMAC_APIParam_1 and the key HMAC_APIParam_2 which is HMAC_Init_ex_APIParam_3 HMAC_Init_APIParam_3 bytes long
X509_REQ_check_private_key_APIName is equivalent to X509_check_private_key_APIName except that X509_REQ_check_private_key_APIParam_1 X509_check_private_key_APIParam_1 represents a certificate request of structure X509_REQ_check_private_key_APIParam_1
The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure
Note that this function is only defined for TLSv1 .0 and above , and DTLSv1 .0 and above
BN_is_prime_ex_APIParam_4 BN_GENCB_call_APIParam_1 is used as follows
the default ENGINE for DH operations is used , and if no default ENGINE is set , the DH_METHOD controlled by DH_set_default_method_APIName is used
Details about sources of randomness and how to estimate their entropy can be found in the literature , eg RFC 1750
As the generation of a RSA key is however costly , it will lead to a significant delay in the handshake procedure
this flag guarantees that all lookups are directed to the external cache
As BIO_s_file_APIName name implies BIO_s_file_APIName is a wrapper round the stdio FILE structure and BIO_s_file_APIName is a source/sink BIO
Currently all the functions use BIOs or FILE pointers , there are no functions which work directly on memory
The callback approach has the advantage , that the callback may generate the key only in case it is actually needed
UI_dup_input_string_APIName , UI_dup_verify_string_APIName , UI_dup_input_boolean_APIName , UI_dup_info_string_APIName and UI_dup_error_string_APIName are basically the same as their UI_add counterparts , except that they make their own copies of all strings
old session will be removed at the next time a session shall be added
SSL_set0_chain_APIName , SSL_set1_chain_APIName , SSL_add0_chain_cert_APIName , SSL_add1_chain_cert_APIName , SSL_get0_chain_certs_APIName , SSL_clear_chain_certs_APIName , SSL_build_cert_chain_APIName , SSL_select_current_cert_APIName and SSL_set_current_cert_APIName are similar except they apply to SSL structure SSL_add0_chain_cert_APIParam_1 SSL_add1_chain_cert_APIParam_1 SSL_clear_chain_certs_APIParam_1 SSL_build_cert_chain_APIParam_1 SSL_select_current_cert_APIParam_1 SSL_set_current_cert_APIParam_1
The way this password can be supplied may depend on the application
one is a built-in static array representing the standard methods for different algorithms , and the other one is a stack of user-defined application-specific methods , which can be manipulated by using EVP_PKEY_meth_add0_APIName
By setting this flag , session-resume operations in an SSL/TLS server will not automatically look up sessions in the internal cache
Calling BIO_reset_APIName on a accept BIO will close any active connection and reset the BIO into a state where it awaits another incoming connection
The best fix will probably be to introduce a `` check_key_APIName '' handler to the RSA_METHOD function table so that alternative implementations can also provide alternative implementations own verifiers
It is possible to have DH keys that only work with certain DH_METHOD implementations , and attempting to change the DH_METHOD for the key can have unexpected results
This function can be used to determine how much memory must be allocated for an RSA encrypted value
Points in hexadecimal format are stored in a NULL terminated character string where each character is one of the printable values 0-9 or A-F
By prepending a buffering BIO to a chain it is possible to provide BIO_gets_APIName functionality
EVP_SealUpdate_APIName and EVP_SealFinal_APIName have exactly the same properties as the EVP_EncryptUpdate_APIName and EVP_EncryptFinal_APIName routines , as documented on the EVP_EncryptInit_APIName manual page
Another advantage of the callback function is that it can supply keys of different size
Version 0.9.5 a had an interim interpretation that is like the current one , except the patch level got the highest bit set , to keep continuity
DSA_sign_setup_APIName may be used to precompute part of the signing operation for each signature in case signature generation is time-critical
This library implements the Blowfish cipher , which was invented and described by Counterpane
an information callback function is called whenever the state changes, an alert appears, or an error occurs.
A client , that was asked to send a certificate , does not send a certificate
The output will be padded with 0 bits to ensure that the output is always 3 bytes for every 4 input bytes
that is it creates a new accept BIO with port BIO_new_accept_APIParam_1
but These functions may be useful when several operations are to be performed using the same modulus
The `` close notify '' alert was sent and the peer 's `` close notify '' alert was received
The following tests are performed until one of them shows that BN_is_prime_ex_APIParam_1 BN_is_prime_fasttest_ex_APIParam_1 is composite
the digest is placed in a static array
as that servername callback may update the SSL_CTX , and subsequently , the ALPN callback
Typically the trusted certificate store is handled indirectly via using SSL_CTX_load_verify_locations_APIName
data that was not retrieved at the last call of SSL_read_APIName can still be buffered inside the SSL layer and will be retrieved on the next call to SSL_read_APIName
The referred module is available as <openssl> / ms/applink.c
For both blocking or non-blocking sockets , the details state information can be used within the info_callback function set with the SSL_set_info_callback_APIName call
The downside is that creating a RSA key is computationally expensive
The value depends on other index values defined for X509_STORE_CTX objects before the SSL index is created
Using the SSL_CTX_set_cert_store_APIName and SSL_CTX_get_cert_store_APIName functions it is possible to manipulate the X509_STORE object beyond the SSL_CTX_load_verify_locations_APIName call
Since OpenSSL private keys contain public key components too the function EVP_PKEY_cmp_APIName can also be used to determine if a private key matches a public key
OPENSSL_Applink is application-side interface which provides a glue between OpenSSL BIO layer and Win32 compiler run-time environment
The EVP digest routines are a high level interface to message digests
The DH_check_APIParam_1 DH_generate_key_APIParam_1 DH_set_ex_data_APIParam_1 DH_size_APIParam_1 DH_set_method_APIParam_1 DH_set_default_method_APIParam_1 DHparams_print_APIParam_2 DHparams_print_fp_APIParam_2 i2d_DHparams_APIParam_1 DH_free_APIParam_1 d2i_DHparams_APIParam_1 DH_compute_key_APIParam_3 DH_get_ex_data_APIParam_1 structure consists of several BIGNUM components
UI_set_default_method_APIName changes the default UI method to the one given
Otherwise a deadlock may occur as the peer might be waiting for the data before being able to continue
The ECPKParameters encode and decode routines encode and parse the public parameters for an d2i_ECPKParameters_APIParam_1 i2d_ECPKParameters_APIParam_1 ECPKParameters_print_fp_APIParam_2 ECPKParameters_print_APIParam_2 structure , which represents a curve
This function can be used to determine how much memory must be allocated for a DSA signature
lh _ <type> _ delete_APIName deletes an entry from lh_retrieve_APIParam_1
On a read only BIO it restores the BIO to its original state and the read only data can be read again
Using ephemeral RSA key exchange yields forward secrecy , as the connection can only be decrypted
OBJ_obj2txt_APIName does n't follow the convention of other OpenSSL functions where the buffer can be set to NULL to determine the amount of data that should be written
BIO_get_cipher_ctx_APIName is a BIO_ctrl_APIName macro which retrieves the internal BIO cipher context
These functions determine why a BIO is not able to read or write data
The main purpose of this function is to provide finer control over a PKCS # 7 signed data structure where the simpler PKCS7_sign_APIName function defaults are not appropriate
The verify_init_APIName and verify_APIName methods are used to verify whether a signature is valid
Similarly a newline character will also be output
In client mode , it is not checked whether the SSL_VERIFY_PEER flag is set , but whether SSL_VERIFY_NONE is not set
A fatal alert always leads to a connection abort
The X509 ASN1 allocation routines , allocate and free an X509 structure , which represents an X509 certificate
Finally , there 's the supertype X509_INFO , which can contain a CRL , a certificate and a corresponding private key
For each 48 byte input block encoded 64 bytes of base 64 data is output plus an additional newline character
MD4_Init_APIName , MD4_Update_APIName , MD4_Final_APIName , MD5_Init_APIName , MD5_Update_APIName , and MD5_Final_APIName are analogous using an MD4_Init_APIParam_1 MD4_Update_APIParam_1 MD4_Final_APIParam_2 and MD5_Init_APIParam_1 MD5_Update_APIParam_1 MD5_Final_APIParam_2 structure
SSL_get_shared_ciphers_APIName creates a colon separated and NUL terminated list of SSL_CIPHER names that are available in both the client and the server
SSL_get_shared_ciphers_APIParam_2 is the buffer that should be populated with the list of names and SSL_get_shared_ciphers_APIParam_3 is the size of that buffer
By generating a temporary RSA key inside the server application that , it becomes impossible for an attacker to decrypt past sessions
ERR_print_errors_APIName is a convenience function that prints the error strings for all errors that OpenSSL has recorded to ERR_print_errors_APIParam_1 , thus emptying the error queue
Through user-written methods , prompting can be done in any way imaginable , be it plain text prompting , through dialog boxes or from a cell phone
By combining the retry conditions of several non blocking BIOs in a single select_APIName call it is possible to service several BIOs in a single thread , delays can occur
Othewise the functions behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page
An OpenSSL private key is equivalent to what some libraries call a `` key pair ''
In OpenSSL an EVP_PKEY structure containing a private key also contains the public key components and parameters
A private key can be used in functions which require the use of a public key or parameters
A similar condition on a file BIO will mean that it has reached EOF
Once all signer certificates have been set CMS_verify_APIName can be used
Calling BIO_free_APIName may also have some effect on the underlying I/O structure
SSL_CTX_use_RSAPrivateKey_ASN1_APIName adds the private key of type RSA stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1
This can be readily produced by storing the S/MIME signed message in a memory BIO and passing it to CMS_encrypt_APIName
SSL_CTX_use_PrivateKey_ASN1_APIName adds the private key of type SSL_CTX_use_PrivateKey_ASN1_APIParam_1 SSL_use_PrivateKey_ASN1_APIParam_1 stored at memory location SSL_CTX_use_PrivateKey_ASN1_APIParam_3 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_2 SSL_use_PrivateKey_ASN1_APIParam_3 SSL_use_RSAPrivateKey_ASN1_APIParam_2 to SSL_CTX_use_PrivateKey_ASN1_APIParam_2 SSL_CTX_use_RSAPrivateKey_ASN1_APIParam_1
In some cases the X509_STORE_CTX_set_verify_cb_APIParam_1 structure is created and destroyed internally and the only way to set a custom verification callback is by inheriting it from the associated X509_STORE_CTX_set_verify_cb_APIParam_1
CONF_modules_load_APIName is idential to CONF_modules_load_file_APIName except CONF_modules_load_APIName reads configuration information from CONF_modules_load_APIParam_1
SSL_CTX_set_default_passwd_cb_userdata_APIName sets a pointer to pem_passwd_cb_APIParam_4 which will be provided to the password callback on invocation
SSL_shutdown_APIName sends the `` close notify '' shutdown alert to the peer
Decryption failures in the RSA_PKCS1_PADDING mode leak information which can potentially be used to mount a Bleichenbacher padding oracle attack
The removed BIO becomes a single BIO with no association with the original chain , single BIO with no association with the original chain can thus be freed or attached to a different chain
EME-OAEP as defined in PKCS # 1 v2 .0 with SHA-1 , MGF1 and an empty encoding parameter
X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_APIParam_3 X509_NAME_add_entry_by_OBJ_APIParam_6 actually determines the index where the new entry is inserted
the socket is shut down and closed when the BIO is freed
Similarly all of the functions to set a new private key will replace any private key that has already been set
any bundled that ENGINE will be set as the default for RSA use from then on.
All of the functions to set a new certificate will replace any existing certificate of the same type that has already been set
The functions SSL_CTX_set_ecdh_auto_APIName and SSL_set_ecdh_auto_APIName can be used to make a server always choose the most appropriate curve for a client
BUF_strndup makes the explicit guarantee that BUF_strndup will never read past the first BUF_memdup_APIParam_2 BUF_strndup_APIParam_2 bytes of BUF_MEM_grow_APIParam_1 BUF_strndup_APIParam_1 BUF_strdup_APIParam_1 BUF_strnlen_APIParam_1
For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by the octets for x , followed by the octets for y
Any flags that are already set are left set
MD2_APIName , MD4_APIName , and MD5_APIName compute the MD2 , MD4 , and MD5 message digest of the MD2_APIParam_2 MD4_APIParam_2 MD5_APIParam_2 bytes at MD2_APIParam_1 MD4_APIParam_1 MD5_APIParam_1 and place it in MD4_Final_APIParam_1 MD2_Final_APIParam_1 MD5_Final_APIParam_1
Thus it will permanently install the certificate and key for this SSL object
Up to OpenSSL 0.9.6 , SSL_pending_APIName does not check if the record type of pending data is application data
In client mode a session set with SSL_set_session_APIName successfully reused is counted as a hit
In addition there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH and is defined in ecdh.h
In server mode a session successfully retrieved from internal or external cache is counted as a hit
This function can be used to determine how much memory must be allocated for the shared secret computed by DH_compute_key_APIName
The point_coversion_form for a curve controls how EC_POINT data is encoded as ASN1 as defined in X9 .62
Check out the error stack to find out the reason
BIO_get_md_APIName places the a pointer to the digest BIOs digest method in BIO_get_md_APIParam_2 , it is a BIO_ctrl_APIName macro
The library number and function code describe where the error occurred , the reason code is the information about what went wrong
but the resulting DH parameters contain the resulting DH parameters length
BIO_set_accept_port_APIName , BIO_get_accept_port_APIName , BIO_set_nbio_accept_APIName , BIO_set_accept_bios_APIName , BIO_set_bind_mode_APIName , BIO_get_bind_mode_APIName and BIO_do_accept_APIName are macros
So the first consideration is whether any/all available ENGINE implementations should be made visible to OpenSSL - this is controlled by calling the various `` load '' functions , eg
OpenSSL maintains an internal linked list of `` visible '' ENGINEs from which it has to operate -
A DSA_set_default_method_APIParam_1 DSA_set_method_APIParam_2 specifies the functions that OpenSSL uses for DSA operations
ie one which can decode a CMS structure on the fly
A client will send out SSLv3 client hello messages and will indicate that client only understands SSLv3
Session resumption shortcuts the TLS so that the client certificate negiotation do n't occur
Alternatively the NID validity can be determined first by checking OBJ_nid2obj is not NULL
It makes up for this by storing client certificate an all other negotiated state information encrypted within the ticket
Similarly EC_POINT_dbl doubles the point EC_POINT_cmp_APIParam_2 EC_POINT_invert_APIParam_2 EC_POINT_dbl_APIParam_3 EC_POINT_add_APIParam_3 and places the result in EC_POINT_mul_APIParam_2 EC_POINTs_mul_APIParam_2 EC_POINT_dbl_APIParam_2 EC_POINT_add_APIParam_2
BUF_strdup_APIName , BUF_strndup_APIName , BUF_memdup_APIName , BUF_strlcpy_APIName , BUF_strlcat_APIName and BUF_strnlen are equivalents of the standard C library functions
As such , it internally represents lh_insert_APIName 'd items with a `` const void '' pointer type
See the NOTES section for important information about how these DSA API functions are affected by the use of DSA_new_method_APIParam_1 API calls
shared keying material is established between the two endpoints
This is a filter BIO that encrypts any data written through it , and decrypts any data read from it
which will be identical in almost all cases
Changes made to this context will affect the digest BIO itself
However , as callers are themselves providing these pointers , they can choose whether they too should be treating all such parameters as constant
SSL_shutdown_APIName can be modified to only set the connection to `` shutdown '' state but not actually send the `` close notify '' alert messages
The TLS/SSL handshake was successfully completed , a TLS/SSL connection has been established
Once the SSL object has been used in conjunction with the callback function , the certificate will be set for the SSL object and will not be cleared even
This is why callbacks such as those used by lh_doall_APIName and lh_doall_arg_APIName declare their prototypes with `` const '' , even for the parameters that pass back the table items ' data pointers - for consistency , user-provided data is `` const '' at all times as far as the LHASH code is concerned
A X. 509 CRL is a tool to help determine if a certificate is still valid
The EVP_PKEY_free_APIParam_1 structure is used by various OpenSSL functions which require a general private key without reference to any particular algorithm
They will also process a trusted X509 certificate but any trust settings are discarded
OPENSSL_instrument_bus performs OPENSSL_instrument_bus_APIParam_2 OPENSSL_instrument_bus2_APIParam_2 probes and records the number of oscillator cycles every probe took
The reference count of the SSL_get_session_APIParam_0 is not incremented , so that the pointer can become invalid by other operations
A X. 509 certificate is a structured grouping of information about an individual , a device , or anything one can imagine
SSL_CTX_get_read_ahead_APIName and SSL_get_read_ahead_APIName indicate whether reading ahead has been set or not
UI_get0_user_data_APIName retrieves the data that has last been given to the UI with UI_add_user_data_APIName
the plaintext buffer is an actual digest value and is encapsulated in a DigestInfo structure according to PKCS # 1 when signing and this structure is expected when verifying
lh _ <type> _ insert_APIName inserts the structure pointed to by lh_retrieve_APIParam_2 into lh_retrieve_APIParam_1
Depending on the type the CMS_RecipientInfo structure can be ignored or its key identifier data retrieved using an appropriate function
Thus no syntax checking takes place
CMS_decrypt_APIName can be called with a NULL key to decrypt the enveloped content
X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_APIParam_4 X509_NAME_add_entry_by_OBJ_APIParam_7 determines how the new type is added
Items that are not recognized , or , are simply ignored
The verification store is used to verify the certificate chain sent by the peer
there will either be three or five bits set dependant on whether the polynomial is a trinomial or a pentanomial
BIO_flush_APIName on an encryption BIO that is being written through is used to signal that no more data is to be encrypted
it can associated with the structure and CMS_RecpientInfo_decrypt_APIName called
Using the callback function it is possible to implement a proper selection routine or to allow a user interaction to choose the certificate to be sent
lh _ <type> _ retrieve_APIName looks up an entry in lh_retrieve_APIParam_1
The functions EVP_PKEY_paramgen_init_APIName and EVP_PKEY_paramgen_APIName are similar except parameters are generated
Otherwise check out the error stack to find out the reason
SSL_load_client_CA_file_APIName reads a file of PEM formatted certificates and extracts the X509_NAMES of the certificates found
Older versions of this documentation wrongly stated that calls to EVP_VerifyUpdate_APIName could not be made after calling EVP_VerifyFinal_APIName
For any given x co-ordinate for a point on a curve it is possible to derive two possible y values
Each state table has a flag to note whether it has processed this `` get_default '' query
The PKCS # 8 functions encode and decode private keys in PKCS # 8 format using both PKCS # 5 v1 .5 and PKCS # 5 v2 .0 password based encryption algorithms
A special case is the size 0 , which is used for unlimited size
EGD is checked via RAND_status_APIName for the first time
This indicates that it was not possible to set/retrieve a session ticket and the SSL/TLS session will continue by by negiotationing a set of cryptographic parameters or using the alternate SSL/TLS resumption mechanism , session ids
For POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of the two possible solutions for y has been used , followed by the octets for x
An OpenSSL client speaking a protocol that allows compression will unconditionally send the list of all compression methods enabled with SSL_COMP_add_compression_method_APIName to the server
lh _ <type> _ error_APIName is a macro
That is the chain is now accept - > socket
MD2 , MD4 , and MD5 are cryptographic hash functions with a 128 bit output
lh _ <type> _ error_APIName can be used to determine if an error occurred in the last operation
The result and the number of bits it was shifted left will later be stored in BN_RECP_CTX_set_APIParam_1
The internal session cache size is SSL_SESSION_CACHE_MAX_SIZE_DEFAULT , currently 102420 , so that up to 20000 sessions can be held
Before , between , and after the certificates text is allowed which can be used eg for descriptions of the certificates
Alternatively a new EC_KEY can be constructed by calling EC_KEY_new_by_curve_name and supplying the nid of the associated curve
This effectively means that attempting I/O on an initial accept socket will await an incoming connection perform I/O on an incoming connection
BIO_gets_APIName performs the BIOs `` gets '' operation and places the data in BIO_gets_APIParam_2 BIO_gets_APIParam_2 BIO_gets_APIParam_2
BN_RECP_CTX_set_APIName stores BN_RECP_CTX_set_APIParam_2 in BN_RECP_CTX_set_APIParam_1 and sets it up for computing 1/BN _ RECP_CTX_set_APIParam_2 and shifting it left by BN_num_bits +1 to make it an integer
In the case of abstractions like EVP_CIPHER , where implementations are indexed by ` nid ' , these flags and cached-responses are distinct for each ` nid ' value
X509_check_email_APIName checks if the certificate matches the specified email X509_check_email_APIParam_2
SSL_get_secure_renegotiation_support_APIName indicates whether the peer supports secure renegotiation
PEM_write_bio_PKCS8PrivateKey_nid_APIName and PEM_write_PKCS8PrivateKey_nid_APIName also write out a private key as a PKCS # 8 EncryptedPrivateKeyInfo however it uses PKCS # 5 v1 .5 or PKCS # 12 encryption algorithms instead
Otherwise they behave in a similar way to d2i_X509_APIName and i2d_X509_APIName described in the d2i_X509_APIName manual page
Usually this operation will attempt to read a line of data from the BIO of maximum length BIO_write_APIParam_3 BIO_read_APIParam_3
It is using these `` core '' control commands that one can discover the the control commands implemented by a given ENGINE , specifically the commands
BIO_get_cipher_status_APIName is a BIO_ctrl_APIName macro which can be called to determine whether the decryption operation was successful
it is not a strong test that the input data or key is correct
The ASN1_OBJECT allocation routines , allocate and free an ASN1_OBJECT structure , which represents an ASN1 OBJECT IDENTIFIER
SSL_COMP_free_compression_methods_APIName frees the internal table of compression methods that were built internally , and possibly augmented by adding SSL_COMP_add_compression_method_APIName
Typically the server callback would obtain the server certificate that is being sent back to the client via a call to SSL_get_certificate_APIName
The ENGINE object itself will only actually be cleaned up and deallocated
the final block is automatically decrypted and checked
The SSL objects inherit the setting valid for SSL_CTX_set_max_cert_list_APIParam_1 at the time SSL_new_APIName is being called
SSL_shutdown_APIName tries to send the `` close notify '' shutdown alert to the peer
 the final block is checked to see if the final block has the correct form.
By generating a temporary DH key inside the server application that , it becomes impossible for an attacker to decrypt past sessions
An export cipher like eg EXP-RC4-MD5 has only 40 secret bits
The algorithm does use the full 128 bits , of which however 88bits are fixed
These flags define the behaviour of how the d2i_ECPrivateKey_APIParam_1 i2d_ECPrivateKey_APIParam_1 EC_KEY_get_enc_flags_APIParam_1 is converted into ASN1 in a call to i2d_ECPrivateKey
that is there is only a single constant structure for each table object
They are also static constant structures which are shared
SSL_CTX_set_max_cert_list_APIName sets the maximum size allowed for the peer 's certificate chain for all SSL objects created from SSL_CTX_set_max_cert_list_APIParam_1 to be <size> bytes
Calls to BIO_write_APIName will place data in the buffer or request a retry
Other items in PEM formatting can also be encrypted , it is however not usual , as certificate information is considered public
any active connection on that chain is shutdown
the socket closed
A BIO pair is a pair of source/sink BIOs where data written to either half of the pair is buffered and can be read from the other half
This mechanism uses an internal callback registration table so that any ENGINE API functionality that knows it requires cleanup can register its cleanup details to be called during ENGINE_cleanup_APIName.
there are no inherent memory leaks to worry about from the ENGINE functionality
ECDSA_do_verify_APIName verifies that the signature ECDSA_do_verify_APIParam_1 is a valid ECDSA signature of the hash value ECDSA_do_verify_APIParam_1 of size ECDSA_do_verify_APIParam_2 using the public key ECDSA_size_APIParam_1 ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1
attempt is first made to use BIO_BIN_NORMAL 
a second attempt is made using BIO_BIND_REUSEADDR
Whether the operation succeeds or not , the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse
This approach allows ENGINE_cleanup_APIName to clean up after any ENGINE functionality at all that your program uses , yet does n't automatically create linker dependencies to all possible ENGINE functionality - only the cleanup callbacks required by the functionality you do use will be required by the linker
The return value can be compared to the macro to make sure that the correct version of the library has been loaded, especially when using DLLs on Windows systems
The total amount of space required is returned
The key is erased before the memory is returned to the system
 ,then SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised and application specific arguments can be checked instead
DSA_generate_parameters_APIName  works in much the same way as for DSA_generate_parameters_ex, except that no DSA_generate_parameters_ex_APIParam_1 parameter is passed and instead a newly allocated DSA_generate_parameters_APIParam_0 structure is returned
 the amount of space needed in X509_NAME_get_text_by_NID_APIParam_3 X509_NAME_get_text_by_OBJ_APIParam_3  is returned
The values are erased before the memory is returned to the system
BN_clear_free_APIName additionally overwrites the data before the memory is returned to the system
It is possible for a BIO to block indefinitely
if the ENGINE_TABLE_FLAG_NOINIT flag is set , no attempted initialisations will take place, instead the only way for the state table to return a non-NULL ENGINE to the "get_default" query will be if one is expressly set in the table
DSA_do_sign_APIParam_3 is the signer 's public key
DSA_do_sign computes a digital signature on the len byte message digest DSA_do_sign_APIParam_1 using the private key DSA_do_sign_APIParam_3 and returns the private key DSA_do_sign_APIParam_3 in a newly allocated DSA_do_sign_APIParam_0 structure
This is done using ASN1_STRING_set_by_NID
It does not provide any feedback
DSA_do_verify verifies that the signature DSA_do_verify_APIParam_1 matches a given message digest DSA_do_verify_APIParam_1 of size len
everything after the first 64 bits is ignored
it tries to read random bytes that EGD has collected
Some have tried using BN_num_bits on individual numbers in RSA keys , DH keys and DSA keys , and found that they do n't always come up with the number of bits they expected
Before illustrating how control commands work , it is worth mentioning what they are typically used for
After calling EVP_DigestFinal_ex no additional calls to EVP_DigestUpdate can be made , but EVP_DigestInit_ex can be called to initialize a new digest operation
On systems that provide / dev/urandom , the randomness device is used to seed the PRNG transparently
RAND_event collects the entropy from Windows events such as mouse movements and other user interaction
, EVP_BytesToKey returns the number of bytes needed to store the derived key
Further , the thread-safety does not extend to things like multiple threads using the same SSL object at the same time
the first is to provide the necessary details to the implementation so that it can be initialised for use
It places the precomputed values in newly allocated DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3s at *DSA_sign_setup_APIParam_3 DSA_sign_setup_APIParam_3 and *rp, after freeing the old ones
Increasing the count parameter slows down the algorithm which makes it harder for an attacker to peform a brute force attack using a large number of candidate passwords
The other class of commands consist of settings or operations that tweak certain behaviour or cause certain operations to take place , and these commands may work either before or after ENGINE_init , or in some cases both
It generates a random private DH value , and computes the corresponding public value dh->pub_key, which can then be published
- on Windows and BeOS this uses the system 's default thread identifying APIs , and on all other platforms it uses the address of errno
This could include the path to any driver or config files it needs to load , required network addresses , smart-card identifiers , passwords to initialise protected devices , logging information , etc etc This class of commands typically needs to be passed to an ENGINE before attempting to initialise it , ie before calling ENGINE_init
No attempt is made to download CRLs from the CRL distribution points extension
The shutdown was not clean
Thus the implementations of these methods don't need to care about handling the case of returning output buffer size by themselves
the encoding of unknown fields is printed instead of the values
Some objects are used to represent algorithms which do not have a corresponding ASN .1 OBJECT IDENTIFIER encoding
EVP_SealInit initializes a cipher context EVP_SealInit_APIParam_1 for encryption with cipher EVP_SealInit_APIParam_2 using a random secret key and IV
This function does not handle the algorithmIdentifier specified in PKCS # 1
Unlike most other RSA functions , this function does not work transparently with any underlying ENGINE implementation
Before the callback function is started ctx and hctx have been initialised with EVP_CIPHER_CTX_init and HMAC_CTX_init respectively
the supplied callback function is called instead
The parameter indent indicated how far the printout should be indented
It provides a rich API which is documented here
HMAC_Init had this undocumented behaviour in previous versions of OpenSSL - failure to switch to HMAC_Init_ex in programs that expect it will cause them to stop working
The signedContentIdentifier field is set to 32 bytes of pseudo random data
SSL_CTX_set_read_ahead and SSL_set_read_ahead set whether we should read as many input bytes as possible or not
The values of offset_day or offset_sec can be negative to set a time before ASN1_TIME_adj_APIParam_2
RAND_file_name generates a default path for the random seed file
The commands supported are documented in the openssl utility command line pages for the option - pkeyopt which is supported by the pkeyutl , genpkey and req commands
CMS_USE_KEYID will use the subject key identifier value instead
This is done
SSL_load_error_strings does the same , but also registers the libssl error strings
no encryption is used and a PKCS # 8 PrivateKeyInfo structure is used instead
The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 read functions will handle either form so there are no X509_REQ_NEW read functions
SSL_read will also return when the underlying BIO could not satisfy the needs of SSL_read to continue the operation
PKCS7_get0_signers retrieves the signer 's certificates from p7 , it does not check their validity or whether any signatures are valid
By using CONF_modules_load_file with appropriate flags, an application can customise application configuration to best suit its needs
Files dh2048.pem , and dh4096.pem in the ` apps ' directory of the current version of the OpenSSL distribution contain the ` SKIP ' DH parameters , which use safe primes and were generated verifiably pseudo-randomly
The CAs listed do not become trusted
The check_private_key functions do n't check if X509_REQ_check_private_key_APIParam_2 X509_check_private_key_APIParam_2 itself is indeed a private key or not
The signature is returned in a newly allocated ECDSA_do_sign_ex_APIParam_0 structure
The precomputed values or returned in kinv and rp and can be used in a later call to ECDSA_sign_ex or ECDSA_do_sign_ex
ECDSA_do_sign is wrapper function for ECDSA_do_sign_ex with kinv and rp set to NULL
ECDSA_sign_ex computes a digital signature of the ECDSA_do_sign_ex_APIParam_2 bytes hash value ECDSA_sign_ex_APIParam_2 using the private EC key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp
ECDSA_do_sign_ex computes a digital signature of the ECDSA_do_verify_APIParam_2 ECDSA_do_sign_APIParam_2 bytes hash value ECDSA_do_sign_ex_APIParam_1 using the private key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1 and the optional pre-computed values kinv and rp
ECDSA_verify verifies that the signature in ECDSA_verify_APIParam_2 of size siglen is a valid ECDSA signature of the hash value ECDSA_verify_APIParam_2 of size ECDSA_do_sign_ex_APIParam_2 using the public key ECDSA_set_method_APIParam_1 ECDSA_sign_setup_APIParam_1 ECDSA_size_APIParam_1
Without the callback a random number is used , so that the probability of generating the same session id is extremely small
All functionalities needed are made available via other functions or macros
If the underlying BIO is blocking, SSL_do_handshake will only return once the handshake has been finished or an error occurred
X509_set1_notBefore and X509_set1_notAfter set the notBefore and notAfter fields of X509_set1_notBefore_APIParam_1 X509_set1_notAfter_APIParam_1 to X509_set1_notBefore_APIParam_2 X509_set1_notAfter_APIParam_2
SSL_do_handshake will also return when the underlying BIO could not satisfy the needs of SSL_do_handshake to continue the handshake
the returned CMS_ContentInfo structure is not complete and outputting its contents via a function that does not properly finalize the CMS_ContentInfo structure will give unpredictable results
SSL_write will also return, when the underlying BIO could not satisfy the needs of SSL_write to continue the operation
it will be restored after the callback has finished and the session id will be padded with 0x00
uniqueness could easily be achieved without randomness added
The result of the certificate verification process can be checked after the TLS/SSL handshake using the SSL_get_verify_result function
This page documents the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation
verify_callback is called with verify_callback_APIParam_1 = 1 before advancing to the next level
It is called before a certificate will be used by a client or server
BN_GENCB_call is called after generating the i-th potential prime number
The subroutines in question instrument these references for purposes of gathering entropy for random number generator
The error rate depends on the size of the prime and goes down for bigger primes
BN_GENCB_call is called after the j-th iteration
a number of iterations is used that yields a false positive rate of at most 2 ^ -64 for random input
a new random seed is chosen
the primes will be generated at random
SSL_shutdown will also return when the underlying BIO could not satisfy the needs of SSL_shutdown to continue the handshake
Currently SSL_CTX_set_current_cert_APIParam_2 can be SSL_CERT_SET_FIRST to use the first valid certificate or SSL_CERT_SET_NEXT to set the next valid certificate after the current certificate
After this call connection will contain a BIO for the recently established connection and accept will now be a single BIO again which can be used to await further incoming connections
The shutdown can also occur
A DES key is of type DES_random_key_APIParam_1 DES_ecb_encrypt_APIParam_1 DES_string_to_2keys_APIParam_2 DES_set_key_checked_APIParam_1 DES_quad_cksum_APIParam_2 DES_is_weak_key_APIParam_1 DES_ecb3_encrypt_APIParam_1 DES_set_key_unchecked_APIParam_1 DES_set_key_APIParam_1 DES_ecb2_encrypt_APIParam_1 DES_string_to_key_APIParam_2 DES_cbc_cksum_APIParam_2 DES_set_odd_parity_APIParam_1 DES_key_sched_APIParam_1
This method does not require any padding to 8 character groups
The actual data send down DES_enc_write_APIParam_1 consists of 4 bytes containing the length of the following encrypted data
The encrypted data follows , padded with random data out to a multiple of 8 bytes
DES_cbc_encrypt does not modify ivec
A RAND_set_rand_method_APIParam_1 specifies the functions that OpenSSL uses for random number generation
The tmp_rsa_callback is called with the keylength needed and the is_export information
These macros , as well as those used for the `` doall '' callbacks , are defined as
lh _ <type> _ doall will , for every entry in the hash table , call func with the data item as its parameter
Certificate matching is done based on the subject name , the key identifier , and the serial number as taken from the certificate to be verified
The ways that d2i_X509_AUX_APIParam_2 d2i_X509_APIParam_2 and i2d_re_X509_tbs_APIParam_2 i2d_X509_AUX_APIParam_2 i2d_X509_APIParam_2 are incremented after the operation can trap the unwary
Any TLS/SSL I/O function can lead to either of SSL_ERROR_WANT_READ and SSL_ERROR_WANT_WRITE
Note that SSL_ERROR_ZERO_RETURN does not necessarily indicate that the underlying transport has been closed
The `` re '' in i2d_re_X509_tbs stands for `` re-encode '' , and ensures that a fresh encoding is generated in case the object has been modified after creation
There is no fixed upper limit for the number of iterations that may be necessary until progress becomes visible at application protocol level
Note that BIO_get_read_request_APIName never returns an amount larger than that returned by BIO_get_write_guarantee_APIName
RAND_priv_bytes_APIName is intended to be used for generating values that should remain private
This can be used to determine how much data should be written to the BIO so the next read will succeed
UI_ctrl_APIName adds extra control for the application author
this will happen
The standard macros are described below , macros specific to a particular type of BIO are described in the specific BIOs manual page as well as any special features of the standard calls
this could cause some entries to be skipped during the iteration.
Return values from the client callback are interpreted as follows
This gives us a revised elliptic curve equation as follows
The following code illustrates how this can work
These functions are typically called after X509_verify_cert_APIName has indicated an error or in a verification callback to determine the nature of an error
The EC_builtin_curve structure is defined as follows
Return values from the server callback are interpreted as follows
This application guarantees that `` strong '' primes are used
This is , it does however not indicate success
For Fp curves the lowest common denominator implementation is the EC_GFp_simple_method implementation
EVP_PKEY_set_alias_type_APIName allows modifying a EVP_PKEY to use a different set of algorithms than the default
any quirks in stdio behaviour will be mirrored by the corresponding BIO
X509_VERIFY_PARAM_set1_ip_asc_APIName sets the expected IP address to X509_VERIFY_PARAM_set1_ip_asc_APIParam_2
EC_GFp_mont_method builds on EC_GFp_simple_method but adds the use of montgomery multiplication
d2i_ECPrivateKey generates the missing public key automatically
A valid certificate was received , but
the sender decided not to proceed with negotiation
X509_cmp_time_APIName compares the ASN1_TIME in X509_cmp_time_APIParam_1 with the time in <cmp_time>
The behaviour of SSL_accept_APIName depends on the underlying BIO
OBJ_cleanup_APIName releases any resources allocated by creating new objects
BIO_seek_APIName resets a file related BIO 's file position pointer to BIO_seek_APIParam_2 bytes from start of file
Setting the BIO_CLOSE flag calls fclose_APIName on the stream
the error string is placed in a static buffer
EC_GROUP_method_of obtains the EC_METHOD of EC_GROUP_set_generator_APIParam_1 EC_GROUP_set_curve_name_APIParam_1 EC_GROUP_get_degree_APIParam_1 EC_GROUP_get_cofactor_APIParam_1 EC_GROUP_method_of_APIParam_1 EC_GROUP_get_order_APIParam_1 EC_GROUP_check_APIParam_1 EC_GROUP_set_point_conversion_form_APIParam_1 EC_GROUP_get_curve_name_APIParam_1 EC_GROUP_set_asn1_flag_APIParam_1 EC_GROUP_get_asn1_flag_APIParam_1 EC_GROUP_get0_generator_APIParam_1 EC_GROUP_check_discriminant_APIParam_1
SSL_CTX_set_default_passwd_cb_APIName sets the default password callback called
SSL_SESSION objects are allocated
Any previous SSL_CONF_CTX_set_ssl_ctx_APIParam_1 or SSL_CONF_CTX_set_ssl_ctx_APIParam_2 associated with SSL_CONF_CTX_set_ssl_ctx_APIParam_1 is cleared
The condensed "::" notation is supported for IPv6 addresses.
Normally the session cache is checked for expired sessions every 255 connections using the SSL_CTX_flush_sessions_APIName function
i2d_CMS_bio_stream_APIName outputs a CMS_ContentInfo structure in BER format
the ALPN callback is not invoked
SSL objects may be using the SSL_SESSION object
Subsequent calls to SSL_CONF_cmd_APIName will be sent to SSL_CONF_CTX_set_ssl_ctx_APIParam_2
Other methods may make a difference between them , however
The OpenSSL error queue contains more information on the error
X509_VERIFY_PARAM_set_depth_APIName sets the maximum verification depth to X509_VERIFY_PARAM_set_depth_APIParam_2
CMS_SignerInfo_get0_signature_APIName retrieves the signature associated with CMS_SignerInfo_get0_signature_APIParam_1 in a pointer to an ASN1_OCTET_STRING structure
The behaviour of SSL_write_APIName depends on the underlying BIO
With the builtin method , there 's no technical difference between them
BN_RECP_CTX_set_APIParam_3 is a previously allocated BN_RECP_CTX_set_APIParam_3 used for temporary variables
This removal is not synchronized with the expiration of sessions
it will be performed transparently during the SSL_write_APIName operation
The X509_check_ip_APIParam_2 array is in binary format , in network byte order
BN_mod_mul_reciprocal_APIName can be used to perform an efficient BN_mod_mul_APIName operation
BN_is_odd_APIName tests if a is odd
eg when an SSL_SESSION object was completely freed as the reference count incorrectly became 0, but an SSL_SESSION object is still referenced in the internal session cache and the cache list is processed during a SSL_CTX_flush_sessions_APIName operation.
BIO_free_APIName will be called
it sends an alert
BN_gcd_APIParam_1 may be the same BN_gcd_APIParam_1 as BN_gcd_APIParam_2 or BN_gcd_APIParam_3
the maximum size of the output buffer is written to the EVP_DigestSignFinal_APIParam_3 parameter
ERR_get_next_error_library_APIName can be used to assign library numbers to user libraries at runtime
PSK identity was not found
Only explicitly marked addresses in the certificates are considered
The function SSL_CONF_CTX_clear_flags_APIName clears SSL_CONF_CTX_clear_flags_APIParam_2 in the context SSL_CONF_CTX_clear_flags_APIParam_1
The index value to access the pointer
Options already set before are not cleared
Versions prior to 0.9.3 have identifiers < 0x0930
ASN1_OBJECT_new_APIName allocates and initializes a ASN1_OBJECT structure
Several options can be ored together
DH_set_method_APIName selects DH_set_method_APIParam_2 to perform all operations using the key DH_set_method_APIParam_1
BIO_flush_APIName on a file BIO calls the fflush_APIName function on the wrapped stream
the following
Otherwise the type of PKCS7_type_APIParam_0 can be determined using PKCS7_type_APIName
The NET format functions are present to provide compatibility with certain very old software
After the call to EVP_PKEY_verify_init_APIName algorithm specific control operations can be performed to set any appropriate parameters for the operation
SMIME_read_CMS_APIParam_1 is a BIO to read the message from
Right now RSA_check_key_APIName simply uses the RSA structure elements directly , bypassing the RSA_METHOD table altogether
The specific information is kept
BIO_set_nbio_accept_APIName sets the accept socket to blocking mode 
BIO_set_nbio_accept_APIName sets the accept socket to non blocking mode
SSL_CTX_select_current_cert_APIName selects SSL_CTX_select_current_cert_APIParam_2 as the current end entity certificate , but only
OPENSSL_load_builtin_modules_APIName is called automatically
The behaviour of SSL_connect_APIName depends on the underlying BIO
SSL_library_init_APIName registers the available SSL/TLS ciphers and digests
this can be readily worked around by converting the buffers to memory BIOs
These functions implement Montgomery multiplication
Buffering BIOs implement BIO_gets_APIName by using BIO_read_APIName operations on the next BIO in the chain
recognise options intended for use in SSL/TLS clients or servers
This function is effectively a version of the PEM_write_bio_CMS_APIName supporting streaming
SMIME_read_PKCS7_APIName parses a message in S/MIME format
For every 4 input bytes exactly 3 output bytes will be produced
Normally the current time is used
SSL_SESSION_free_APIName is called once for SSL_CTX_remove_session_APIParam_2
X509_NAME_print_APIName prints out X509_NAME_print_APIParam_2 to X509_NAME_print_APIParam_1 indenting each line by X509_NAME_print_APIParam_3 characters
DSA_generate_parameters_APIParam_0 will be called as shown below
X509_VERIFY_PARAM_set_time_APIName sets the verification time in X509_VERIFY_PARAM_set_time_APIParam_1 to X509_VERIFY_PARAM_set_time_APIParam_2
a password might be supplied to protect the private key
BUF_MEM_grow_APIName changes the size of an already existing buffer to BUF_MEM_grow_APIParam_2
SSL_CTX_remove_session_APIName removes the session SSL_CTX_remove_session_APIParam_2 from the context SSL_CTX_remove_session_APIParam_1
SSL_add_client_CA_APIName adds
These functions load `` serverinfo '' TLS ServerHello Extensions into the SSL_CTX
the CA name extracted from SSL_add_client_CA_APIParam_2 to the list of CAs sent to the client
These functions initialise an X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_set0_param_APIParam_1 structure for subsequent use by X509_verify_cert_APIName
the highest preference curve is automatically used for ECDH temporary keys used during key exchange
Any data already in the buffer is preserved
The data are received in records
No certificate was presented by the peer or no connection was established or the certificate chain is no longer available 
SSL_read_APIName works based on the SSL/TLS records
ERR_clear_error_APIName empties the current thread 's error queue
This function is used by Kerberos v4
DES_cbc_cksum_APIName produces an 8 byte checksum based on the input stream
These are the version-flexible DTLS methods
d2i_X509_fp_APIName is similar to d2i_X509_APIName except d2i_X509_fp_APIName attempts to parse data from FILE pointer d2i_X509_fp_APIParam_1
These functions are used automatically
Check the error queue to find out the reason
the RIPEMD-160 message digest of the RIPEMD160_APIParam_2 bytes is placed in a static array.
EVP_PKEY_assign_EC_KEY_APIParam_2 EVP_PKEY_assign_POLY1305_APIParam_2 EVP_PKEY_assign_SIPHASH_APIParam_2 will be freed
All currently supported protocols have the same default timeout value of 300 seconds
EC_group_get_curve_GFp obtains the previously set curve parameters
The ALPN callback is executed after the servername callback
ENGINE_add_conf_module_APIName adds just the ENGINE configuration module
EVP_PKEY_meth_find_APIName finds an EVP_PKEY_meth_find_APIParam_0 object with the EVP_PKEY_meth_new_APIParam_1
No session caching for client or server takes place
The default value for session timeout is decided on a per protocol basis
SSL_CTX_use_serverinfo_APIName loads one or more serverinfo extensions from a byte array into SSL_CTX_use_serverinfo_APIParam_1
SSL_set_accept_state_APIName sets SSL_set_accept_state_APIParam_1 to work in server mode
BN_mod_mul_montgomery_APIName computes Mont
BIO_reset_APIName attempts to change the file pointer to the start of file using lseek
SSL_SESSION_set_ex_data_APIName is used to store application data at SSL_SESSION_set_ex_data_APIParam_3 for SSL_SESSION_set_ex_data_APIParam_2 into the SSL_SESSION_set_ex_data_APIParam_1 object
SSL_get1_session_APIName is the same as SSL_get_session_APIName , but the reference count of the SSL_get1_session_APIParam_0 SSL_get_session_APIParam_0 is incremented by one
In addition a number options can be set for commonly used formats
BIO_reset_APIName and BIO_seek_APIName are implemented using fseek_APIName on the underlying stream
SSL_CTX_free_APIName also calls the free_APINameing procedures for indirectly affected items
Calling BIO_reset_APIName on a read write memory BIO clears any data in it
SSL_CTX_use_certificate_file_APIName loads the first certificate stored in SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_CTX_use_certificate_file_APIParam_1 SSL_CTX_use_certificate_chain_file_APIParam_1
SSL_use_certificate_file_APIName loads the certificate from SSL_CTX_use_certificate_file_APIParam_2 SSL_use_certificate_file_APIParam_2 SSL_CTX_use_certificate_chain_file_APIParam_2 into SSL_use_certificate_file_APIParam_1
In a similar way, some functions will automatically release the structural reference passed to it
X509_VERIFY_PARAM X509_STORE_CTX_get0_param_APIName retrieves an intenal pointer to the verification parameters associated with X509_STORE_CTX_get0_param_APIParam_1
the encoding is automatically renewed
ERR_load_strings_APIParam_2 is an array of error string data
The evp_APIName library provides higher-level encryption functions
ASN1_STRING_free_APIName frees up ASN1_STRING_free_APIParam_1
But all certificates complying with RFC5280 et al use GMT anyway
BIO_eof_APIName calls feof_APIName
HMAC_APIParam_1 can be EVP_sha1_APIName , EVP_ripemd160_APIName etc
The CMS_add1_ReceiptRequest_APIName function adds a signed receipt request CMS_add1_ReceiptRequest_APIParam_2 to SignerInfo structure CMS_add1_ReceiptRequest_APIParam_1
ERR_load_strings_APIName registers error strings for library number ERR_load_strings_APIParam_1
The file can contain several CA certificates identified by
The data may be left unmodified or translated
A null sink BIO behaves in a similar manner to the Unix / dev/null device
Encoding of binary data is performed in blocks of 48 input bytes
Otherwise , the encoding of the TBSCertificate portion of the i2d_re_X509_tbs_APIParam_1 can be manually renewed by calling i2d_re_X509_tbs_APIName
X509_VERIFY_PARAM_clear_flags_APIName clears the flags X509_VERIFY_PARAM_set_flags_APIParam_2 in X509_VERIFY_PARAM_clear_flags_APIParam_1
A new curve can be constructed by calling EC_GROUP_new , using the implementation provided by EC_GROUP_new_APIParam_1
Both are NULL-terminated
The final block will output 4 bytes for every 3 bytes of input
it points to a file of CA certificates in PEM format
no certificates are sent
The Elliptic Curve library provides a number of different implementations through a single common interface
By generating a temporary RSA key inside the server application that is lost , it becomes impossible for an attacker to decrypt past sessions ,  .
the hardcoded default timeout for the protocol will be used
Due to the protocol definition , a TLS/SSL server will always send a certificate
The format of the external representation of the public key written by i2d_ECPrivateKey is described by the point_conversion_form
a full 4 bytes is still output for the final 1 or 2 bytes of input
The application data is not included
This is often undesirable however
Refer to EC_GROUP_copy_APIName for further information on the asn1_flag
SSL_CTX_set_session_cache_mode_APIName enables/disables session caching by setting the operational mode for SSL_CTX_set_session_cache_mode_APIParam_1 to <mode>
The EVP library provides a high-level interface to cryptographic functions
EC_KEY_set_asn1_flag sets the asn1_flag on the underlying EC_GROUP object
The EVP cipher routines are a high level interface to certain symmetric ciphers
ASN1_TIME_print_APIName prints out the time ASN1_TIME_print_APIParam_2 to BIO ASN1_TIME_print_APIParam_1 in human readable format
The creation of a new SSL_CTX object failed
The length-prefix byte is not included in the length
An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue
Some BIO types may place additional information on the error queue
Callback has been called to indicate state change inside a loop
X509_STORE_CTX_set_error_APIName sets the error code of X509_STORE_CTX_set_error_APIParam_1 to X509_STORE_CTX_set_error_APIParam_2
The connection uses the TLSv1 .2 protocol
The length of the vector is not in the vector itself , but in a separate variable
This data is treated as a `` black box '' by the ec library
it might be used in a verification callback to set an error based on additional checks
it is possible to perform I/O using the accept BIO itself
A complete description of the process is contained in the verify_APIName manual page
extra chain certificates are sent in order following the end entity certificate
They can be useful for debugging
Those methods are usually used to perform different jobs , such as generating a key , signing or verifying , encrypting or decrypting , etc
This is an inherent weakness in the PKCS # 1 v1 .5 padding design
The EVP envelope routines are a high level interface to envelope decryption
The connection uses the TLSv1 .0 protocol
The server looks up the session in its cache
OBJ_create_APIName adds a new object to the internal table
PKCS12_create_APIName creates a PKCS # 12 structure
Some clients violate this rule by adapting to the server 's answer
The SSL_CTX object uses SSL_CTX_new_APIParam_1 as connection method
EVP_des_ede3_cbc_APIName is the algorithm of choice for S/MIME use
a client can propose to reuse a session
the SSL_write_APIName operation is considered completed
the OpenSSL library will have the COMP_zlib_APIName compression method available
EVP_PKEY_CTX_free_APIName frees up the context EVP_PKEY_CTX_free_APIParam_1
it will override any temporary ECDH parameters set by a server
that is
Its state can be saved in a seed file to avoid having to go through the seeding process
The lack of single pass processing means that
Padding is always added
d2i_X509_APIParam_2 d2i_X509_AUX_APIParam_2 is incremented to the byte following the parsed data
d2i_SSL_SESSION_APIName transforms the external ASN1 representation of an SSL/TLS session , stored as binary data at location d2i_SSL_SESSION_APIParam_2 with length d2i_SSL_SESSION_APIParam_3 , into an SSL_SESSION object
SSL_CTX_get_options_APIName returns the options set for SSL_CTX_get_options_APIParam_1
SSL_get_version_APIName returns the name of the protocol used for the connection SSL_get_version_APIParam_1
OCSP_resp_get0_APIName returns a pointer to an OCSP_resp_get0_APIParam_0 structure
PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added 
SSL_CTX_get_verify_mode_APIName returns the verification mode currently set in SSL_CTX_get_verify_mode_APIParam_1
RSA_PKCS1_SSLeay_APIName, RSA_PKCS1_null_method_APIName, RSA_get_default_method_APIName and RSA_get_method_APIName return pointers to the respective RSA_METHODs
BN_bn2hex_APIName and BN_bn2dec_APIName return a null-terminated string
CMS_get0_signers_APIName returns all signers
SSL_alert_type_string_long_APIName returns a string indicating the type of the alert specified by SSL_alert_type_string_long_APIParam_1
bn_div_words divides the two word number  by bn_div_words_APIParam_3 bn_dump_APIParam_1 and returns the result
SSL_CTX_set_timeout_APIName returns the previously set timeout value
Otherwise DH_new_method_APIName returns a pointer to the newly allocated structure
X509_getm_notBefore_APIName and X509_getm_notAfter_APIName are similar to X509_get0_notBefore_APIName and X509_get0_notAfter_APIName except X509_getm_notBefore_APIName and X509_getm_notAfter_APIName return non-constant mutable references to the associated date field of the certificate
UI_CTRL_PRINT_ERRORS, which makes UI_process_APIName print the OpenSSL error stack as part of processing the UI, and UI_CTRL_IS_REDOABLE, which returns a flag saying if the used UI can be used again or not
ASN1_STRING_new_APIName returns an allocated ASN1_STRING_new_APIParam_0 structure
BIO_get_write_buf_size_APIName returns the size of the write buffer
i2d_SSL_SESSION_APIName returns the size of the ASN1 representation in bytes
BIO_set_cipher_APIName does not return a value
ERR_lib_error_string_APIName, ERR_func_error_string_APIName and ERR_reason_error_string_APIName return the library name, function name and reason string respectively
RSA_free_APIName returns no value
For an unknown SSLeay_version_APIParam_1, the text "not available" is returned
The other functions return no values
BIO_tell_APIName returns the current file position of a file related BIO
Initially, the default DH_METHOD is the OpenSSL internal implementation, as returned by DH_OpenSSL_APIName
The response returned by the server can be obtained via a call to SSL_get_tlsext_status_ocsp_resp_APIName
The value SSL_get_tlsext_status_ocsp_resp_APIParam_2 SSL_get_tlsext_status_ocsp_resp_APIParam_2 will be updated to point to the OCSP response data and the return value will be the length of that data
BIO_f_md_APIName returns the digest BIO method
Otherwise DSA_SIG_new_APIName returns a pointer to the newly allocated structure
SSLeay_APIName returns this number
SSL_CTX_sess_misses_APIName returns the number of sessions proposed by clients that were not found in the internal session cache in server mode
X509_free_APIName returns no value
SSL_get_max_cert_list_APIName returns the currently set maximum size for SSL_set_max_cert_list_APIParam_1
DSA_OpenSSL_APIName and DSA_get_default_method_APIName return pointers to the respective DSA_OpenSSL_APIParam_0 DSA_get_default_method_APIParam_0s
BIO_seek_APIName returns the same value as the underlying fseek_APIName function
OBJ_nid2obj_APIName returns a pointer to an internal table and does not allocate memory
SSL_rstate_string_long_APIName returns a string indicating the current read state of the SSL object SSL_rstate_string_long_APIParam_1
BIO_next_APIName returns the next BIO in a chain
SSL_CTX_sess_connect_renegotiate_APIName returns the number of start renegotiations in client mode
EVP_CIPHER_nid_APIName and EVP_CIPHER_CTX_nid_APIName return a NID
CMS_SignerInfo_set1_signer_cert_APIName does not return a value
SSL_CTX_get_timeout_APIName returns the currently set timeout value for SSL_CTX_get_timeout_APIParam_1
SSL_CTX_get_quiet_shutdown_APIName returns the "quiet shutdown" setting of SSL_CTX_get_quiet_shutdown_APIParam_1
BIO_s_accept_APIName returns the accept BIO method
This alert is returned if a record is received with an incorrect MAC
The number of bytes pending is returned
EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis  for a trinomial or pentanomial respectively
ERR_remove_thread_state and ERR_remove_state_APIName return no value
The structure returned by EVP_PKEY_new_APIName is empty
It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 + bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word
such errors are only reflected in the return values of SSL_CONF_set_cmd_APIName or SSL_CONF_set_argv_APIName
CMS_get0_type_APIName returns the content type of a CMS_ContentInfo structure as and ASN1_OBJECT pointer
A match was found and is returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2
CRYPTO_get_new_dynlockid_APIName returns the index to the newly created lock
The function CMS_get0_RecipientInfos_APIName returns all the CMS_RecipientInfo structures associated with a CMS EnvelopedData structure
a return value of -2 indicates the operation is not supported by the public key algorithm
SSL_alert_desc_string_APIName returns a two letter string as a short form describing the reason of the alert specified by SSL_alert_desc_string_APIParam_1
SSL_alert_type_string_APIName returns a one letter string indicating the type of the alert specified by SSL_alert_type_string_APIParam_1
CMS_get1_certs_APIName returns all certificates in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1 CMS_add0_cert_APIParam_1 CMS_add1_cert_APIParam_1
SSL_get_peer_cert_chain_APIName returns a pointer to STACK_OF certificates forming the certificate chain of the peer
DH_free_APIName returns no value
RSA_set_default_method_APIName returns no value
MDC2_APIName returns a pointer to the hash value
i2d_PrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs
X509_STORE_CTX_set_verify_cb_APIName does not return a value
If the return value is -2 the operation is not implemented in the specific BIO type
BIO_f_ssl_APIName returns the SSL BIO method
SSL_SESSION_get_time_APIName returns the time at which the session SSL_SESSION_get_time_APIParam_1 was established
ASN1_TIME_set_APIName and ASN1_TIME_adj_APIName return a pointer to an ASN1_TIME structure or NULL if an error occurred
UI_get0_result_APIName returns a pointer to the result buffer associated with the information indexed by UI_get0_result_APIParam_2
ERR_get_next_error_library_APIName returns a new library number
BIO_s_fd_APIName returns the file descriptor BIO method
ERR_load_strings_APIName returns no value
BN_get_word_APIName returns the value BN_get_word_APIParam_1, or all-bits-set if BN_get_word_APIParam_1 cannot be represented as a BN_get_word_APIParam_0
BIO_get_write_guarantee_APIName and BIO_ctrl_get_write_guarantee_APIName return the maximum length of data that can be currently written to the BIO
an application might call SSL_CTX_cmd_APIName and if SSL_CTX_cmd_APIName returns -2  continue with processing of application specific commands
A return value of zero indicates that the signature did not verify successfully , while other values indicate a more serious error
the servers name and port can be set using BIO_set_host_APIName on the BIO returned by BIO_new_ssl_connect_APIName without having to locate the connect BIO first
Writes larger than this value will return a value from BIO_write_APIName less than the amount requested or if the buffer is full request a retry
SSL_SESSION_get_time_APIName and SSL_SESSION_get_timeout_APIName return the currently valid values
OBJ_txt2nid_APIName returns NID corresponding to text string <s>
RC4_set_key_APIName and RC4_APIName do not return values
SSL_CTX_get_mode_APIName and SSL_get_mode_APIName return the current bitmask
SSL_get1_curves_APIName returns the total number of supported curves
SSL_get1_curves_APIName returns the set of supported curves sent by a client in the supported curves extension
If des_read_pw_APIParam_5 des_read_pw_APIParam_5 is set, the user is asked for the password twice and unless the two copies match, an error is returned
BIO_get_retry_BIO_APIName determines the precise reason for the special condition, BIO_get_retry_BIO_APIName returns the BIO that caused this condition and if BIO_get_retry_BIO_APIParam_2 is not NULL BIO_get_retry_BIO_APIParam_2 contains the reason code
SSL_CTX_set_tmp_dh_callback_APIName and SSL_set_tmp_dh_callback_APIName do not return diagnostic output
CMS_get0_type_APIName and CMS_get0_eContentType_APIName return and ASN1_OBJECT structure
SSL_get_verify_mode_APIName returns the verification mode currently set in SSL_get_verify_mode_APIParam_1
DH_set_method_APIName returns non-zero if the provided DH_set_method_APIParam_2 was successfully set as the method for DH_set_method_APIParam_1
SSL_set_connect_state_APIName and SSL_set_accept_state_APIName do not return diagnostic information
SSL_CTX_set_tmp_rsa_callback_APIName and SSL_set_tmp_rsa_callback_APIName do not return diagnostic output
SSL_CTX_get_client_cert_cb_APIName returns a pointer to the currently set callback function
CMS_RecipientInfo_type_APIName returns the type of CMS_RecipientInfo structure CMS_RecipientInfo_type_APIParam_1
RSA_get_default_method_APIName returns a pointer to the current default RSA_METHOD
SSLeay_version_APIName returns a pointer to a constant string describing the version of the OpenSSL library or giving information about the library build
BN_BLINDING_get_flags_APIName returns the currently set BN_BLINDING_get_flags_APIParam_1 flags
BIO_s_file_APIName returns the file BIO method
EC_KEY_get_flags returns the flags associated with the EC_KEY object as an integer
SSL_CTX_set_mode_APIName and SSL_set_mode_APIName return the new mode bitmask after adding SSL_CTX_set_mode_APIParam_2 SSL_set_mode_APIParam_2
The function EVP_PKEY_CTX_get_keygen_info_APIName returns parameters associated with the generation operation
BIO_new_socket_APIName returns a socket BIO using BIO_new_socket_APIParam_1 and BIO_new_socket_APIParam_2
EVP_PKEY_type_APIName returns the type of key corresponding to the value EVP_PKEY_type_APIParam_1
If EVP_PKEY_CTX_get_keygen_info_APIParam_2 is -1 the total number of parameters available is returned
Any non negative value returns the value of that parameter
SSL_set_verify_result_APIName does not provide a return value
By checking the return code of SSL_CTX_cmd_APIName it is possible to query if a given SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is recognised, this is useful is SSL_CTX_cmd_APIName values are mixed with additional application specific operations
BIO_f_md_APIName returns the message digest BIO method
BIO_get_close_APIName returns the BIOs close flag
The vector is further extended with EBX value returned by CPUID with EAX=7 and ECX=0 as input
ASN1_STRING_dup_APIName returns a copy of the structure ASN1_STRING_dup_APIParam_1
DSA_free_APIName returns no value
OBJ_obj2nid_APIName, OBJ_ln2nid_APIName, OBJ_sn2nid_APIName return the corresponding NID for the object OBJ_obj2nid_APIParam_1, the long name <ln> or the short name <sn> respectively or NID_undef if an error occurred
X509_VERIFY_PARAM_get_flags_APIName returns the flags in X509_VERIFY_PARAM_get_flags_APIParam_1
X509_NAME_entry_count_APIName returns the total number of entries in X509_NAME_entry_count_APIParam_1
ERR_peek_last_error_APIName returns the latest error code from the thread's error queue without modifying it
SSL_CTX_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_CTX_get_verify_mode_APIParam_1 SSL_CTX_get_verify_depth_APIParam_1
CRYPTO_THREADID_hash_APIName returns a numeric value usable as a hash-table key
SSL_get_SSL_CTX_APIName returns a pointer to the SSL_CTX object, from which SSL_get_SSL_CTX_APIParam_1 was created with SSL_new_APIName
OCSP_resp_get0_certs_APIName returns any certificates included in OCSP_resp_find_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_count_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1
SSL_CTX_sess_get_cache_size_APIName returns the currently valid size
UI_get_method_APIName returns the UI method associated with a given UI
UI_get_default_method_APIName returns a pointer to the current default UI method
This is different to the normal crypt in that the third parameter is the buffer that the return value is written into
SSL_CTX_get_max_cert_list_APIName returns the currently set maximum size for SSL_CTX_get_max_cert_list_APIParam_1
ERR_clear_error_APIName has no return value
RAND_cleanup_APIName returns no value
BIO_tell_APIName returns the value of the position pointer
RSA_private_encrypt_APIName returns the size of the signature
SSL_CTX_sess_set_cache_size_APIName returns the previously valid size
RSA_public_decrypt_APIName returns the size of the recovered message digest
DSA_set_default_method_APIName returns no value
Initially, the default DSA_METHOD is the OpenSSL internal implementation, as returned by DSA_OpenSSL_APIName
i2d_X509_APIName returns the number of bytes successfully encoded or a negative value if an error occurs
BIO_method_type_APIName returns the type of the BIO BIO_next_APIParam_1 BIO_find_type_APIParam_1
CMS_add1_signer_APIName returns an internal pointer to the CMS_SignerInfo structure just added, this can be used to set additional attributes before it is finalized
SSL_CTX_get_options_APIName and SSL_get_options_APIName return the current bitmask
SSL_SESSION_get_timeout_APIName returns the timeout value set for session SSL_SESSION_get_timeout_APIParam_1 in seconds
EVP_PKEY_CTX_free_APIName does not return a value
SSL_CTX_sess_number_APIName returns the current number of sessions in the internal session cache
If a BN_get_word_APIParam_1 is equal to the value of all-bits-set, BN_get_word_APIParam_1 will collide with the error condition returned by BN_get_word_APIName which uses that as an error value
SSL_get_current_cipher_APIName returns a pointer to an SSL_CIPHER object containing the description of the actually used cipher of a connection established with the SSL_get_current_cipher_APIParam_1 object
EVP_CIPHER_key_length_APIName and EVP_CIPHER_CTX_key_length_APIName return the key length
EVP_PKEY_set1_engine_APIName is typically used by an ENGINE returning an HSM key as part of its routine to load a private key
SSL_get_verify_callback_APIName returns a function pointer to the verification callback currently set in SSL_get_verify_mode_APIParam_1 SSL_get_verify_depth_APIParam_1
ERR_print_errors_APIName and ERR_print_errors_fp_APIName return no values
EVP_PKEY_meth_new_APIName creates and returns a new EVP_PKEY_meth_new_APIParam_0 object, and associates the given EVP_PKEY_meth_new_APIParam_1 and EVP_PKEY_meth_new_APIParam_2
BN_num_bits_APIName returns the number of significant bits in a BN_num_bits_APIParam_1, following the same principle as BN_num_bits_word_APIName
BIO_get_fd_APIName places the socket in BIO_get_fd_APIParam_2, it also returns the socket
BIO_s_mem_APIName return the memory BIO method function
In OpenSSL 1.0.0 and later the context is always returned and the BIO is state is set to initialized
SSL_get_ssl_method_APIName returns a function pointer to the TLS/SSL method set in SSL_get_ssl_method_APIParam_1
All except ENGINE_CTRL_GET_FLAGS return the string length of a command name or description, or populate a supplied character buffer with a copy of the command name or description
Initially, the default RSA_METHOD is the OpenSSL internal implementation, as returned by RSA_PKCS1_SSLeay_APIName
X509_VERIFY_PARAM_get_depth_APIName returns the current verification depth
the key schedule is not generated
Otherwise X509_new_APIName returns a pointer to the newly allocated structure
OpenSSL clients will check the session id context returned by the server when reusing a session
RSA_set_method_APIName returns a pointer to the old RSA_METHOD implementation that was replaced
SSL_CTX_sessions_APIName returns a pointer to the lhash databases containing the internal session cache for SSL_CTX_sessions_APIParam_1
If module errors are not ignored ,the return code will reflect the return value of the failing module
SSL_pending_APIName returns the number of bytes which are available inside SSL_pending_APIParam_1 for immediate read
the return type may be replaced with a RSA_PKCS1_SSLeay_APIParam_1 RSA_get_default_method_APIParam_1 RSA_null_method_APIParam_1 declaration in a future release
SSL_CTX_get0_param_APIName and SSL_get0_param_APIName return a pointer to an SSL_CTX_get0_param_APIParam_0 SSL_get0_param_APIParam_0 structure
The other SSL_want__APIName calls are shortcuts for the possible states returned by SSL_want_APIName
EC_KEY_get_enc_flags returns the value of the current encoding flags for the EC_KEY
EVP_MD_CTX_create_APIName allocates, initializes and returns a digest context
SSL_CTX_get_cert_store_APIName returns the current setting
RAND_load_file_APIName returns the number of bytes read
The function CMS_get0_SignerInfos_APIName returns all the CMS_SignerInfo structures associated with a CMS signedData structure
BIO_ctrl_pending_APIName and BIO_ctrl_wpending_APIName return a size_t type and are functions, BIO_pending_APIName and BIO_wpending_APIName are macros which call BIO_ctrl_APIName
BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the number of pending characters in the BIOs read and write buffers
This returns a pointer to a memory block containing the seed that was used
Its return values are similar to that of SSL_get_error_APIName
X509_get0_notBefore_APIName, X509_get0_notAfter_APIName and X509_CRL_get0_lastUpdate_APIName return a pointer to an X509_get0_notBefore_APIParam_0 X509_get0_notAfter_APIParam_0 X509_CRL_get0_lastUpdate_APIParam_0 structure
X509_VERIFY_PARAM_set_time_APIName and X509_VERIFY_PARAM_set_depth_APIName do not return values
BIO_get_md_ctx_APIName returns the digest BIOs context into BIO_get_md_ctx_APIParam_2
SSL_CTX_sess_connect_APIName returns the number of started SSL/TLS handshakes in client mode
SSL_CTX_set_quiet_shutdown_APIName and SSL_set_quiet_shutdown_APIName do not return diagnostic information
EVP_MD_size_APIName and EVP_MD_CTX_size_APIName return the size of the message digest when passed an EVP_MD_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure, ie the size of the hash
EVP_PKEY_meth_free_APIName and EVP_PKEY_meth_copy_APIName do not return values
BIO_tell_APIName returns the current file position
ASN1_STRING_length_APIName returns the length of the content of ASN1_STRING_length_APIParam_1
Only a single private key and corresponding certificate is returned by this function
a required argument is missing and an error is indicated
More complex PKCS#12 files with multiple private keys will only return the first match
BIO_set_mem_eof_return_APIName sets the behaviour of memory BIO BIO_set_mem_eof_return_APIParam_1 when it is empty
some other error occurred and this can be reported back to the user
If the BIO_set_mem_eof_return_APIParam_2 is zero an empty memory BIO will return EOF
BIO_get_mem_data_APIName sets BIO_get_mem_data_APIParam_2 to a pointer to the start of the memory BIOs data and returns the total amount of data available
PKCS7_sign_add_signers_APIName returns an internal pointer to the PKCS7_SIGNER_INFO structure just added, this can be used to set additional attributes before it is finalized
If BIO_set_mem_eof_return_APIParam_2 is non zero BIO_set_mem_eof_return_APIName will return BIO_set_mem_eof_return_APIParam_2 when BIO_set_mem_eof_return_APIParam_1 is empty and BIO_set_mem_eof_return_APIName will set the read retry flag  is true
if the return value is positive it is used to skip that number of arguments as they have been processed by SSL_CTX_cmd_APIName
SSL_alert_desc_string_long_APIName returns a string describing the reason of the alert specified by SSL_alert_desc_string_long_APIParam_1
UI_process_APIName goes through the information given so far, does all the printing and prompting and returns
All EVP_PKEY_meth_set and EVP_PKEY_meth_get functions have no return values
It could use the chain of the first set which returns suitable flags
HMAC_CTX_init_APIName and HMAC_CTX_cleanup_APIName do not return values
For the 'get' functions, function pointers are returned by arguments
The return value provides the number of octets stored
Calling the function with a NULL buffer will not perform the conversion but will still return the required buffer length
SSLeay_version_APIName returns different strings depending on SSLeay_version_APIParam_1
ERR_load_crypto_strings_APIName, SSL_load_error_strings_APIName and ERR_free_strings_APIName return no values
RIPEMD160_APIName returns a pointer to the hash value
BUF_MEM_free_APIName has no return value
The chain returned by this function behaves like a standard filter BIO
BIO_free_all_APIName and BIO_vfree_APIName do not return values
X509_NAME_entry_count_APIName returns the total number of entries
EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name, EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and EC_GROUP_get_degree return the order, cofactor, curve name , ASN1 flag, point_conversion_form and degree for the specified curve respectively
SSL_get_shared_curve_APIName returns the NID of shared curve SSL_get_shared_curve_APIParam_2 or NID_undef if there is no shared curve SSL_get_shared_curve_APIParam_2
X509_NAME_get_text_by_NID_APIName, X509_NAME_get_text_by_OBJ_APIName retrieve the "text" from the first entry in X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 which matches X509_NAME_get_text_by_NID_APIParam_2 or X509_NAME_get_text_by_OBJ_APIParam_2, if no such entry exists, -1 is returned
BIO_new_CMS_APIName returns a streaming filter BIO chain based on BIO_new_CMS_APIParam_2
BN_init_APIName, BN_clear_APIName, BN_free_APIName and BN_clear_free_APIName have no return values
The length of the output string written is returned excluding the terminating null
BN_get_word_APIName returns BN_get_word_APIParam_1, if BN_get_word_APIParam_1 can be represented as a BN_get_word_APIParam_0
The return value points to an allocated SSL structure
SSL_check_chain_APIName returns a bitmap of flags indicating the validity of the chain
The return values of the SSL_ctrl_APIName functions depend on the command supplied via the SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 parameter
Always check the error return value of RAND_bytes_APIName and RAND_priv_bytes_APIName and do not take randomness for granted
BIO_push_APIName returns the end of the chain, BIO_push_APIParam_1
SSL_CTX_set_options_APIName and SSL_set_options_APIName return the new options bitmask after adding SSL_CTX_set_options_APIParam_2 SSL_set_options_APIParam_2
lh_<type>_delete_APIName returns the entry being deleted
CMS_get0_content_APIName returns a pointer to the CMS_get0_content_APIParam_0 pointer containing the embedded content
None of the functions return a value
SSL_CONF_cmd_argv_APIName returns the number of command arguments processed
The error code returned by ERR_get_error_APIName consists of a library number, function code and reason code
X509_STORE_CTX_get_error_depth_APIName returns a non-negative error depth
If successful a pointer to the d2i_ECPKParameters_APIParam_1 structure is returned
EVP_PKEY_get1_RSA_APIName, EVP_PKEY_get1_DSA_APIName, EVP_PKEY_get1_DH_APIName and EVP_PKEY_get1_EC_KEY_APIName return the referenced key in EVP_PKEY_get1_RSA_APIParam_1 EVP_PKEY_get1_DSA_APIParam_1 EVP_PKEY_get1_DH_APIParam_1 EVP_PKEY_get1_EC_KEY_APIParam_1 or NULL if the key is not of the correct type
The return value is the total number of curves available
The function EVP_PKEY_CTX_get_cb_APIName returns the key or parameter generation callback
If EC_get_builtin_curves_APIParam_2 is less than the total number of curves available, the first EC_get_builtin_curves_APIParam_2 curves will be returned
DSA_set_method_APIName returns non-zero if the provided DSA_set_method_APIParam_2 was successfully set as the method for DSA_set_method_APIParam_1
ASN1_OBJECT_free_APIName returns no value
BIO_tell_APIName returns the current file position by calling lseek
BN_RECP_CTX_init_APIName and BN_RECP_CTX_free_APIName have no return values
DH_OpenSSL_APIName and DH_get_default_method_APIName return pointers to the respective DH_OpenSSL_APIParam_0 DH_get_default_method_APIParam_0s
SSL_get_options_APIName returns the options set for SSL_get_options_APIParam_1
a new ASN1_TIME structure is allocated and returned
SSL_get_cipher_bits_APIName is a macro to obtain the number of secret/algorithm bits used and SSL_get_cipher_version_APIName returns the protocol name
only the length is calculated and returned
If an unrecognised error code is passed to X509_verify_cert_error_string_APIName, the numerical value of the unknown code is returned in a static buffer
The length of the resulting ASN1 representation is returned
SSL_CTX_get_session_cache_mode_APIName returns the currently set cache mode
EC_get_builtin_curves returns the number of builtin curves that are available
The return value points to the certificate presented by the peer
SSL_CTX_sess_cache_full_APIName returns the number of sessions that were removed
SSL_state_string_long_APIName returns a string indicating the current state of the SSL object SSL_state_string_long_APIParam_1
OBJ_dup_APIName returns a copy of OBJ_dup_APIParam_1
X509_VERIFY_PARAM_get0_peername_APIName returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers
SSL_get_default_timeout_APIName return this hardcoded value, which is 300 seconds for all currently supported protocols
BIO_s_socket_APIName returns the socket BIO method
The return string is allocated by the library and is no longer valid once the associated X509_VERIFY_PARAM_get0_peername_APIParam_1 argument is freed
SSL_CTX_get_timeout_APIName returns the currently set timeout value
n is the number of the lock as returned from CRYPTO_get_new_dynlockid_APIName
This pointer returned corresponds to the internal signature value if CMS_SignerInfo_get0_signature_APIParam_1 so it may be read or modified
SSL_CTX_sess_accept_APIName returns the number of started SSL/TLS handshakes in server mode
BIO_get_buffer_num_lines_APIName returns the number of lines currently buffered
SSL_CTX_sess_cb_hits_APIName returns the number of successfully retrieved sessions from the external session cache in server mode
It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2 - bn_sub_words_APIParam_3 bn_add_words_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the carry
For all current standard OpenSSL public key algorithms SHA1 is returned
The pointer to the SSL_CTX object is returned
SSL_set_shutdown_APIName does not return diagnostic information
MD2_APIName, MD4_APIName, and MD5_APIName return pointers to the hash value
SSL_CTX_get_session_cache_mode_APIName returns the currently used cache mode
The BIO_push_APIName function appends the BIO BIO_push_APIParam_2 to BIO_push_APIParam_1, BIO_push_APIName returns BIO_push_APIParam_1
SSL_get_fd_APIName returns the file descriptor which is linked to SSL_get_fd_APIParam_1 SSL_get_rfd_APIParam_1 SSL_get_wfd_APIParam_1 SSL_get_fd_APIParam_1
SSL_get_rfd_APIName and SSL_get_wfd_APIName return the file descriptors for the read or the write channel, which can be different
If the read and the write channel are different, SSL_get_fd_APIName will return the file descriptor of the read channel
EVP_CIPHER_type_APIName and EVP_CIPHER_CTX_type_APIName return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if NID has no defined OBJECT IDENTIFIER
BIO_pending_APIName, BIO_ctrl_pending_APIName, BIO_wpending_APIName and BIO_ctrl_wpending_APIName return the amount of pending data
SSL_get_shutdown_APIName returns the shutdown mode of SSL_get_shutdown_APIParam_1
SSL_want_APIName returns state information for the SSL object SSL_want_APIParam_1
SSL_CTX_sess_accept_good_APIName returns the number of successfully established SSL/TLS sessions in server mode
BIO_s_file_APIName returns the BIO file method
In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack
d2i_SSL_SESSION_APIName returns a pointer to the newly allocated SSL_SESSION object
It computes bn_mul_add_words_APIParam_2 bn_mul_words_APIParam_2 bn_sqr_words_APIParam_2 bn_sub_words_APIParam_2 bn_add_words_APIParam_2  mul_add_APIParam_3 bn_mul_words_APIParam_4 mul_APIParam_3, places the result in bn_mul_add_words_APIParam_1 bn_mul_words_APIParam_1 bn_sqr_words_APIParam_1 bn_sub_words_APIParam_1 bn_add_words_APIParam_1, and returns the high word
SSL_get_peer_certificate_APIName returns a pointer to the X509 certificate the peer presented
Otherwise RSA_new_APIName returns a pointer to the newly allocated structure
The BIO_new_APIName function returns a new BIO using method BIO_new_APIParam_1
CMS_get1_crls_APIName returns any CRLs in CMS_add0_crl_APIParam_1 CMS_add1_crl_APIParam_1
This function returns the RSA modulus size in bytes
SSL_CTX_sess_accept_renegotiate_APIName returns the number of start renegotiations in server mode
SSL_get_verify_depth_APIName returns the verification depth limit currently set in SSL_get_verify_depth_APIParam_1
EC_METHOD_get_field_type returns an integer that identifies the type of field the EC_METHOD structure supports
Any leading whitespace will be trimmed as will any trailing whitespace, newlines, carriage returns or EOF characters
Otherwise DH_new_APIName returns a pointer to the newly allocated structure
BIO_ctrl_pending_APIName returns the number of bytes currently stored
In the last case, the password could be stored into the pem_passwd_cb_APIParam_4 pem_passwd_cb_APIParam_4 storage and the pem_passwd_cb_APIName only returns the password already stored
A "serverinfo" extension is returned in response to an empty ClientHello Extension
EVP_MD_block_size_APIName and EVP_MD_CTX_block_size_APIName return the block size of the message digest when passed an EVP_MD_block_size_APIParam_1 or an EVP_MD_CTX_init_APIParam_1 EVP_DigestInit_APIParam_1 EVP_MD_CTX_md_APIParam_1 EVP_MD_CTX_destroy_APIParam_1 EVP_MD_CTX_copy_APIParam_1 EVP_MD_CTX_cleanup_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestInit_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_MD_CTX_copy_ex_APIParam_1 EVP_DigestFinal_APIParam_1 structure
At most the contents of the record will be returned
Otherwise number of recorded values is returned
Only when the record has been received and processed completely, SSL_read_APIName will return reporting success
i2d_ECPrivateKey_APIName returns the number of bytes successfully encoded or a negative value if an error occurs
The return value points to the certificate chain presented by the peer
The last 4 bytes of the checksum are returned and the complete 8 bytes are placed in DES_cbc_cksum_APIParam_2
BN_new_APIName returns a pointer to the BN_new_APIParam_0 initialised to the value 0
no more non-padding base 64 characters are expected
SSL_CTX_get_cert_store_APIName returns a pointer to the current certificate verification storage
Otherwise RSA_new_method_APIName returns a pointer to the newly allocated structure
If SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 SSL_read_APIParam_3 is higher than the number of bytes buffered, SSL_read_APIName will return with the bytes buffered
SSL_CTX_set_session_cache_mode_APIName returns the previously set cache mode
BN_BLINDING_thread_id_APIName returns a pointer to the thread id object within a BN_BLINDING_thread_id_APIParam_1 object
EVP_get_digestbyname_APIName, EVP_get_digestbynid_APIName and EVP_get_digestbyobj_APIName return an EVP_get_digestbyname_APIParam_0 structure when passed a digest name, a digest NID or an ASN1_OBJECT structure respectively
EVP_MD_type_APIName, EVP_MD_pkey_type_APIName and EVP_MD_type_APIName return the NID of the corresponding OBJECT IDENTIFIER or NID_undef if none exists
Calling BIO_free_all_APIName a single BIO has the same effect as calling BIO_free_APIName on it other than the discarded return value
SSL_CTX_sess_connect_good_APIName returns the number of successfully established SSL/TLS sessions in client mode
The write operation was successful, the return value is the number of bytes actually written to the TLS/SSL connection
the function to add a new ENGINE to OpenSSL's internal list is ENGINE_add_APIName - if ENGINE_add_APIName returns success, OpenSSL will have stored a new structural reference internally so the caller is still responsible for freeing their own reference with ENGINE_free_APIName when they are finished with ENGINE_free_APIName
 ,then an argument for a command is missing
SSL_get_cipher_list_APIName returns a pointer to the name of the SSL_CIPHER listed for SSL_get_cipher_list_APIParam_1 with SSL_get_cipher_list_APIParam_2
SSL_get_mode_APIName returns the mode set for SSL_get_mode_APIParam_1
EVP_PKEY_meth_find_APIName returns a pointer to the found EVP_PKEY_meth_find_APIParam_0 object or returns NULL if not found
The string returned by SSL_CIPHER_description_APIName in case of success consists of cleartext information separated by one or more blanks in the following sequence
The client_cert_cb_APIName cannot return a complete certificate chain, it can only return one client certificate
EVP_PKEY_meth_new_APIName returns a pointer to a new EVP_PKEY_meth_new_APIParam_0 object or returns NULL on error
As the data is buffered, SSL_operation_APIName may return with a ERROR_SSL_WANT_READ condition, but there is still data in the write buffer
This function returns the size of an ASN.1 encoded DSA signature in bytes
That a certificate is returned does not indicate information about the verification state, use SSL_get_verify_result_APIName to check the verification state
Any function which encodes an X509 structure such as i2d_X509_APIName, i2d_X509_fp_APIName or i2d_X509_bio_APIName may return a stale encoding if the i2d_X509_APIParam_1 i2d_X509_fp_APIParam_2 i2d_X509_bio_APIParam_2 structure has been modified after deserialization or previous serialization
BN_CTX_init_APIName and BN_CTX_free_APIName have no return values
X509_STORE_set_verify_cb_APIName and X509_STORE_set_verify_cb_func_APIName do not return a value
ERR_peek_error_APIName returns the earliest error code from the thread's error queue without modifying it
these functions reverse the return value convention
BN_num_bytes_APIName returns the size of a BN_num_bytes_APIParam_1 in bytes
X509_STORE_CTX_cleanup_APIName, X509_STORE_CTX_free_APIName, X509_STORE_CTX_trusted_stack_APIName, X509_STORE_CTX_set_cert_APIName, X509_STORE_CTX_set_chain_APIName, X509_STORE_CTX_set0_crls_APIName and X509_STORE_CTX_set0_param_APIName do not return values
This function will return available shared ciphersuites whether or not they are enabled
If non-NULL, SSL_get_psk_identity_hint_APIName returns the PSK identity hint and SSL_get_psk_identity_APIName returns the PSK identity
The functions described here all return a const pointer to an EC_METHOD_get_field_type_APIParam_1 structure that can be passed to EC_GROUP_NEW
If the supplied buffer is not large enough to contain the complete list of names a truncated list of names will be returned
SSL_CTX_get_max_cert_list_APIName and SSL_get_max_cert_list_APIName return the currently set value
EC_KEY_get_conv_form return the point_conversion_form for the EC_KEY
BIO_f_buffer_APIName returns the buffering BIO method
X509_verify_cert_error_string_APIName returns a human readable error string for verification error X509_verify_cert_error_string_APIParam_1
EC_GROUP_set_seed returns the length of the seed that has been set
A return value of -2 means SSL_CONF_cmd_APIParam_2 SSL_CONF_cmd_value_type_APIParam_2 is not recognised
OCSP_resp_get0_signature_APIName returns the signature from OCSP_resp_get0_signature_APIParam_1
If the time structure has invalid format, ASN1_TIME_print_APIName prints out "Bad time value" and returns an error
EVP_PKEY_free_APIName does not return a value
BIO_ctrl_reset_read_request_APIName can also be used to reset the value returned by BIO_get_read_request_APIName to zero
BIO_pop_APIName removes the BIO BIO_pop_APIParam_1 from a chain and returns the next BIO in the chain, or NULL if there is no next BIO
then the precise "error condition" depends on the BIO type that caused it and the return code of the BIO operation
the cause will be that the connection closed
ASN1_OBJECT CMS_get0_eContentType_APIName returns a pointer to the embedded content type
BIO_free_APIName frees up a single BIO, BIO_vfree_APIName also frees up a single BIO but BIO_vfree_APIName does not return a value
SSL_CTX_get_quiet_shutdown_APIName and SSL_get_quiet_shutdown return the current setting
SSL_CTX_set_client_CA_list_APIName and SSL_set_client_CA_list_APIName do not return diagnostic information
DSA_get_default_method_APIName returns a pointer to the current default DSA_METHOD
SSL_get_ciphers_APIName returns the stack of available SSL_CIPHERs for SSL_get_cipher_list_APIParam_1, sorted by preference
BN_CTX_start_APIName and BN_CTX_end_APIName return no values
i2d_ECPKParameters_APIName returns the number of bytes successfully encoded or a negative value if an error occurs
EVP_md_null_APIName, EVP_md2_APIName, EVP_md5_APIName, EVP_sha_APIName, EVP_sha1_APIName, EVP_dss_APIName, EVP_dss1_APIName, EVP_mdc2_APIName and EVP_ripemd160_APIName return pointers to the corresponding EVP_MD structures
SSL_CTX_get_verify_depth_APIName returns the verification depth limit currently set in SSL_CTX_get_verify_depth_APIParam_1
ECDSA_size_APIName returns the maximum length of a DER encoded ECDSA signature created with the private EC key ECDSA_size_APIParam_1
SSL_get_ex_data_X509_STORE_CTX_idx_APIName returns the index number under which the pointer to the SSL object is stored into the X509_STORE_CTX object
SSL_get_verify_result_APIName returns the result of the verification of the X509 certificate presented by the peer, if any
SSL_CTX_get_mode_APIName returns the mode set for SSL_CTX_get_mode_APIParam_1
BN_MONT_CTX_init_APIName and BN_MONT_CTX_free_APIName have no return values
When a hash table entry is replaced, lh_<type>_insert_APIName returns the value being replaced
OBJ_length_APIName returns the size of the content octets of OBJ_length_APIParam_1
If a server returns a different session id context to an OpenSSL client when reusing a session, an error will be flagged and the handshake will fail
OpenSSL servers will always return the correct session id context, as an OpenSSL server checks the session id context itself before reusing a session as described above
If padding is disabled, EVP_EncryptFinal_ex_APIName will not encrypt any more data and EVP_EncryptFinal_ex_APIName will return an error if any data remains in a partial block
SSL_CTX_set_cert_store_APIName does not return diagnostic output
EC_KEY_get_flags returns the current flags that are set for this EC_KEY
BN_bn2bin_APIName returns the length of the big-endian number placed at BN_bn2bin_APIParam_2
RAND_get_default_method_APIName returns a pointer to the current RAND_METHOD
BN_bn2hex_APIName and BN_bn2dec_APIName return printable strings containing the hexadecimal and decimal encoding of BN_bn2hex_APIParam_1 BN_bn2dec_APIParam_1 respectively
This function returns the Diffie-Hellman size in bytes
If the callback returns no certificate, the OpenSSL library will not send a certificate
SSL_CTX_sess_hits_APIName returns the number of successfully reused sessions
DH_set_default_method_APIName returns no value
SSL_CTX_set_max_cert_list_APIName and SSL_set_max_cert_list_APIName return the previously set value
SSL_CONF_CTX_set_flags_APIName and SSL_CONF_CTX_clear_flags_APIName returns the new flags value after setting or clearing flags
If the callback function returns a certificate, the OpenSSL library will try to load the private key and certificate data into the SSL object using the SSL_use_certificate_APIName and SSL_use_private_key_APIName functions
This method may or may not be supplied by an ENGINE implementation, but if it is, the return value can only be guaranteed to be valid as long as the RSA key itself is valid and does not have its implementation changed by RSA_set_method_APIName
RSA_get_method_APIName returns a pointer to the RSA_METHOD being used by RSA_get_method_APIParam_1 RSA_set_method_APIParam_1
EVP_PKEY_get0_engine_APIName returns a reference to the ENGINE handling EVP_PKEY_get0_engine_APIParam_1
Otherwise DSA_new_method_APIName returns a pointer to the newly allocated structure
EVP_PKEY_size_APIName returns the maximum size of a signature in bytes
The actual signature returned by EVP_SignFinal_APIName may be smaller
The context returned by BIO_get_md_ctx_APIName is an internal context structure
Initially, the default RAND_METHOD is the OpenSSL internal implementation, as returned by RAND_SSLeay_APIName
The functions return the values indicated in the DESCRIPTION section
RAND_set_rand_method_APIName returns no value
It is mandatory to destroy the SSL object using SSL_free_APIName and create a new one to return to the previous state
The return value of CMS_get0_content_APIName is a pointer to the CMS_get0_content_APIParam_0 content pointer
SSL_get_quiet_shutdown_APIName returns the "quiet shutdown" setting of SSL_get_quiet_shutdown_APIParam_1
SSL_get_rbio_APIName and SSL_get_wbio_APIName return pointers to the BIOs for the read or the write channel, which can be different
RAND_get_rand_method_APIName and RAND_SSLeay_APIName return pointers to the respective methods
BIO_f_cipher_APIName returns the cipher BIO method
OCSP_resp_find_APIName searches OCSP_resp_find_APIParam_1 for OCSP_resp_find_APIParam_2 and returns the index of the first matching entry after OCSP_resp_find_APIParam_3 or starting from the beginning if OCSP_resp_find_APIParam_3 is -1
The return value is the number of bytes actually read from the TLS/SSL connection
SSL_get0_session_APIName returns a pointer to the actual session
SSL_CONF_CTX_free_APIName does not return a value
EC_KEY_get0_private_key returns the private key associated with the EC_KEY
SSL_get_session_APIName returns a pointer to the SSL_get_session_APIParam_0 actually used in SSL_get_session_APIParam_1
OCSP_resp_get0_APIName returns the OCSP_resp_get0_APIParam_0 structure in OCSP_resp_get0_APIParam_1 corresponding to index OCSP_resp_get0_APIParam_2
EVP_MD_size_APIName, EVP_MD_block_size_APIName, EVP_MD_CTX_size_APIName and EVP_MD_CTX_block_size_APIName return the digest or block size in bytes
None of the functions presented here return any value
The flag SSL_MODE_AUTO_RETRY will cause read/write operations to only return after the handshake and successful completion
In a blocking environment, applications are not always prepared to deal with read/write operations returning without success report
A new NID is returned for the created object
EVP_get_cipherbyname_APIName, EVP_get_cipherbynid_APIName and EVP_get_cipherbyobj_APIName return an EVP_CIPHER structure when passed a cipher name, a NID or an ASN1_OBJECT structure
EVP_MD_CTX_md_APIName returns the EVP_MD_CTX_md_APIParam_1 structure corresponding to the passed EVP_MD_CTX_md_APIParam_1
BIO_get_buffer_num_lines_APIName returns the number of lines buffered
SSL_get1_curves_APIName returns the number of curves, which may be zero
SSL_CTX_sess_get_cache_size_APIName returns the currently valid session cache size
Otherwise DSA_new_APIName returns a pointer to the newly allocated structure
BIO_new_fd_APIName returns a file descriptor BIO using BIO_new_fd_APIParam_1 and BIO_new_fd_APIParam_2
BN_CTX_new_APIName returns a pointer to the BN_CTX_new_APIParam_0
X509_VERIFY_PARAM_get_flags_APIName returns the current verification flags
All EC_GFp functions and EC_GF2m_simple_method always return a const pointer to an EC_METHOD structure
Normally the BIO_set_APIParam_2 BIO_new_APIParam_1 argument is supplied by a function which returns a pointer to a BIO_METHOD
When using non-blocking sockets, the function call performing the handshake may return with SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE condition, so that SSL_state_string[_long]_APIName may be called
X509_STORE_CTX_new_APIName returns a newly initialised X509_STORE_CTX_new_APIParam_0 structure
CRYPTO_num_locks_APIName returns the required number of locks
SSL_get_shutdown_APIName returns the current setting
OCSP_resp_count_APIName returns the number of OCSP_single_get0_status_APIParam_1 structures in OCSP_resp_count_APIParam_1
This function can be called repeatedly until there are no more error codes to return
ERR_get_error_APIName returns the earliest error code from the thread's error queue and removes the entry
DSA_SIG_free_APIName returns no value
EVP_CIPHER_block_size_APIName and EVP_CIPHER_CTX_block_size_APIName return the block size
Note that the return value is valid only during the lifetime of the SSL object SSL_get_psk_identity_APIParam_1 SSL_get_psk_identity_hint_APIParam_1
SSL_CONF_CTX_set_ssl_ctx_APIName and SSL_CTX_set_ssl_APIName do not return a value
X509_NAME_ENTRY_create_by_txt_APIName, X509_NAME_ENTRY_create_by_NID_APIName and X509_NAME_ENTRY_create_by_OBJ_APIName create and return an X509_NAME_ENTRY_create_by_txt_APIParam_1 X509_NAME_ENTRY_create_by_NID_APIParam_1 X509_NAME_ENTRY_create_by_OBJ_APIParam_1 structure
If X509_NAME_oneline_APIParam_2 is NULL, a buffer is dynamically allocated and returned, and X509_NAME_oneline_APIParam_3 is ignored
Otherwise, at most X509_NAME_oneline_APIParam_3 bytes will be written, including the ending '\\0', and X509_NAME_oneline_APIParam_2 is returned
RSA_public_encrypt_APIName returns the size of the encrypted data
RSA_private_decrypt_APIName returns the size of the recovered plaintext
the function will return a pointer to a fully populated structure
If it returns a functional reference to an ENGINE, it will also cache another reference to speed up processing future queries
EC_KEY_get0_group returns the EC_GROUP associated with the EC_KEY
SSL_CIPHER_get_bits_APIName returns the number of secret bits used for SSL_CIPHER_get_bits_APIParam_1
lh_<type>_free_APIName, lh_<type>_doall_APIName and lh_<type>_doall_arg_APIName return no values
Data written to the null sink is discarded, reads return EOF
EVP_EncodeBlock_APIName returns the number of bytes encoded excluding the NUL terminator
SSL_CONF_cmd_value_type_APIName returns the type of value that SSL_CONF_cmd_value_type_APIParam_2 refers to
The return value points to an allocated SSL_CTX object
BIO_method_type_APIName returns the type of a BIO
Neither OPENSSL_config_APIName nor OPENSSL_no_config_APIName return a value
BN_bn2mpi_APIName returns the length of the representation
ASN1_STRING_type_new_APIName returns an allocated ASN1_STRING_type_new_APIParam_0 structure of type ASN1_STRING_type_new_APIParam_1
ASN1_STRING_free_APIName does not return a value
EVP_dss_APIName and EVP_dss1_APIName return EVP_dss_APIParam_0 EVP_dss1_APIParam_0 structures for SHA and SHA1 digest algorithms but using DSS  for the signature algorithm
SHA1_APIName, SHA224_APIName, SHA256_APIName, SHA384_APIName and SHA512_APIName return a pointer to the hash value
The ENGINE_new_APIName function returns a structural reference to a new  ENGINE object
There are other ENGINE API functions that return structural references such as
OCSP_resp_count_APIName returns the total number of OCSP_single_get0_status_APIParam_1 fields in OCSP_resp_count_APIParam_1
SSL_CTX_clear_options_APIName and SSL_clear_options_APIName return the new options bitmask after clearing SSL_CTX_clear_options_APIParam_2 SSL_clear_options_APIParam_2
Otherwise ASN1_OBJECT_new_APIName returns a pointer to the newly allocated structure
RSA_blinding_off_APIName returns no value
SSL_get_info_callback_APIName returns the current setting
SSL_get_shared_curve_APIName returns shared curve SSL_get_shared_curve_APIParam_2 for a server-side SSL SSL_get1_curves_APIParam_1 SSL_set1_curves_list_APIParam_1 SSL_set1_curves_APIParam_1
SSL_CIPHER_get_name_APIName returns a pointer to the name of SSL_CIPHER_get_name_APIParam_1
If SSL_get_shared_curve_APIParam_2 is -1 ,then the total number of shared curves is returned, which may be zero
The return value points to the data of an SSL session
Reads on the other half of the pair will return any pending data or EOF when all pending data has been read
BIO_s_bio_APIName returns the method for a BIO pair
A negative return value from X509_verify_cert_APIName can occur if X509_verify_cert_APIName is invoked incorrectly, such as with no certificate set in X509_verify_cert_APIParam_1, or when X509_verify_cert_APIName is called twice in succession without reinitialising X509_verify_cert_APIParam_1 for the second call
enc decides if encryption or decryption shall be performed
The data is returned to the application, this will be the same value as supplied to a previous CRYPTO_set_ex_data call
BN_num_bits_word returns the number of significant bits in a word
Basically, except for a zero, it returns floor+1
the session will be immediately removed again
If we take 0x00000432 as an example, it returns 11, not 16, not 32
BF_ecb_encrypt is the basic Blowfish encryption and decryption function
BF_cbc_encrypt is the Cipher Block Chaining function for Blowfish
EGD is available from http
It is not a NID
BN_mod_inverse_APIParam_1 may be the same BN_mod_inverse_APIParam_1 as BN_mod_inverse_APIParam_2 or BN_mod_inverse_APIParam_3
This is compliant with the TLS specifications
The write and read socket operations in the communication are blocking
ctx is a previously allocated BN_CTX used for temporary variables
BF_cfb64_encrypt is the CFB mode for Blowfish with 64 bit feedback
The mode functions BF_cbc_encrypt , BF_cfb64_encrypt and BF_ofb64_encrypt all operate on variable length data
Some programs and protocols simplify this , like SSH , where ivec is simply initialized to zero
The SSL_extension_supported_APIParam_1 SSL_CTX_add_client_custom_ext_APIParam_2 SSL_CTX_add_server_custom_ext_APIParam_2 parameter corresponds to the extension_type field of RFC5246 et al
RIPEMD160_Update can be called repeatedly with chunks of the message to be hashed
X509_NAME _ ... handle certificate names
X509_EXTENSION _ ... handle certificate extensions
X509_ATTRIBUTE _ ... handle certificate attributes
It encrypts or decrypts the bytes in BF_cfb64_encrypt_APIParam_1 using the key schedule , putting the result in BF_cfb64_encrypt_APIParam_2
Encrypting user data directly with RSA is insecure
It encrypts or decrypts the 64 bits chunks of BF_cbc_encrypt_APIParam_1 using the key schedule , putting the result in BF_cbc_encrypt_APIParam_2
X509_NAME_add_entry_by_OBJ_APIParam_3 X509_NAME_add_entry_by_NID_APIParam_3 X509_NAME_add_entry_by_txt_APIParam_3 can still be set to V_ASN1_APP_CHOOSE to use a different algorithm to determine field types
The new_session_cb is passed the ssl connection and the ssl session sess
The remove_session_cb is passed the SSL_CTX_sess_set_new_cb_APIParam_1 SSL_CTX_sess_set_remove_cb_APIParam_1 SSL_CTX_sess_set_get_cb_APIParam_1 and the ssl session sess
It is run as egd RAND_egd_APIParam_1 RAND_egd_APIParam_1 , where RAND_egd_APIParam_1 RAND_egd_APIParam_1 is an absolute path designating a socket
It encrypts or decrypts the first 64 bits of BF_ecb_encrypt_APIParam_1 using the key BF_set_key_APIParam_1 BF_decrypt_APIParam_2 BF_encrypt_APIParam_2 , putting the result in BF_ecb_encrypt_APIParam_2
The new entry is added to a position determined by X509_NAME_add_entry_by_OBJ_APIParam_6 X509_NAME_add_entry_by_NID_APIParam_6 X509_NAME_delete_entry_APIParam_2 X509_NAME_add_entry_by_txt_APIParam_6 X509_NAME_add_entry_APIParam_3 and X509_NAME_add_entry_by_OBJ_APIParam_7 X509_NAME_add_entry_by_NID_APIParam_7 X509_NAME_add_entry_by_txt_APIParam_7 X509_NAME_add_entry_APIParam_4
The add_arg and parse_arg parameters can be set to arbitrary values which will be passed to the corresponding callbacks
SSL_CTX_add_server_custom_ext adds a custom extension for a TLS server with extension type SSL_CTX_add_server_custom_ext_APIParam_2 and callbacks add_cb , free_cb and parse_cb
This allows the internal code to correctly determine the type of the field and to apply length checks according to the relevant standards
SSL_CTX_add_client_custom_ext adds a custom extension for a TLS client with extension type SSL_CTX_add_client_custom_ext_APIParam_2 and callbacks add_cb , free_cb and parse_cb
a new BN_mod_inverse_APIParam_1 is created
0 may also be valid application data but
The get_session_cb is always called
The remove_session_cb is called
The new_session_cb is called
It also happens for all sessions in the internal session cache
The ServerHello add_cb callback is only called
Calling ERR_remove_state is equivalent to ERR_remove_thread_state
ERR_remove_thread_state frees the error queue associated with thread tid
The length of the signature is places in siglen
X509_CRL _ ... , d2i_X509_CRL _ ... and i2d_X509_CRL _ ... handle X. 509 CRLs
X509_REQ _ ... , d2i_X509_REQ _ ... and i2d_X509_REQ _ ... handle PKCS # 10 certificate requests
The supplied data is read directly from the supplied buffer
The BIO and hence the SSL engine inherit the behaviour of SSL_set_rfd_APIParam_2 SSL_set_wfd_APIParam_2 SSL_set_fd_APIParam_2
DSA_sign_setup_APIParam_1 is the signer 's public key
It expects DSA_sign_setup_APIParam_1 DSA_sign_setup_APIParam_1 to contain DSA parameters
DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 is a pre-allocated DSA_sign_setup_APIParam_2 DSA_sign_setup_APIParam_2 or NULL
The get_session_cb is passed the ssl connection , the session id of length length at the memory location data
X509 _ ... , d2i_X509 _ ... and i2d_X509 _ ... handle X. 509 certificates , with some exceptions , shown below
These values may be passed to DSA_sign in dsa - > kinv and dsa - > r
BF_cbc_encrypt() operates on data that is a multiple of 8 bytes long
BF_cfb64_encrypt() and BF_ofb64_encrypt() are used to encrypt an variable number of bytes 
RAND_egd retrieves entropy from the daemon using the daemon 's `` non-blocking read '' command which shall be answered immediately by the daemon without waiting for additional entropy to be collected
DSA_sign computes a digital signature on the DSA_sign_APIParam_3 byte message digest DSA_sign_APIParam_2 using the private key DSA_sign_setup_APIParam_1 and places its ASN .1 DER encoding at sigret
a fatal decode_error alert is sent
and the handshake aborts
This happens
the current thread will have its error queue removed
the SSL_set_rfd_APIParam_1 SSL_set_wfd_APIParam_1 SSL_set_fd_APIParam_1 will also have non-blocking behaviour
a fatal unsupported_extension alert is sent
and the handshake is aborted
BN_mod_inverse computes the inverse of BN_mod_inverse_APIParam_2 modulo BN_mod_inverse_APIParam_3 places the result in BN_mod_inverse_APIParam_1 % n == 1
BIO_new_mem_buf creates a memory BIO using BIO_new_mem_buf_APIParam_2 bytes of data at BIO_new_mem_buf_APIParam_1 , and its length is determined by strlen
BN_BLINDING_set_flags sets the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters flags
EVP_sha1 is associated with RSA so this will return NID_sha1WithRSAEncryption
BN_BLINDING_convert_ex multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the blinding factor BN_BLINDING_new_APIParam_1
BN_BLINDING_invert_ex multiplies BN_BLINDING_convert_ex_APIParam_1 BN_BLINDING_invert_ex_APIParam_1 with the inverse blinding factor BN_BLINDING_new_APIParam_2
a copy the inverse blinding factor BN_BLINDING_new_APIParam_2 will be returned in BN_BLINDING_convert_ex_APIParam_2 BN_BLINDING_invert_ex_APIParam_2
In newly allocated BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 objects no flags are set
DSA_sign_setup may be used to precompute part of the signing operation in case signature generation is time-critical
EVP_MD_pkey_type returns the NID of the public key signing algorithm associated with this digest
Using a specific ENGINE implementation
DSA_verify verifies that the signature sigbuf of size siglen matches a given message digest DSA_verify_APIParam_2 of size DSA_verify_APIParam_3
then prefix checks are case sensitive and "-" is the default
All functional references are released by calling ENGINE_finish
Automatically using builtin ENGINE implementations
EVP_MD_type and EVP_MD_CTX_type return the NID of the OBJECT IDENTIFIER representing the given message digest
Discovering supported control commands
EVP_DigestFinal_ex retrieves the digest value from EVP_DigestFinal_ex_APIParam_1 EVP_DigestFinal_ex_APIParam_1 EVP_DigestUpdate_APIParam_1 EVP_DigestInit_ex_APIParam_1 and places it in EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2
Issuing control commands to an ENGINE
The EVP_PKEY_CTX_free_APIParam_1 EVP_PKEY_CTX_dup_APIParam_1 structure is an opaque public key algorithm context used by the OpenSSL high level public key API
that is it is not permissible to use the same context simultaneously in two threads
ENGINE objects have two levels of reference-counting to match the way in which the objects are used
To obtain a functional reference from an existing structural reference , call the ENGINE_init function
The program can process the messages as usual
OpenSSL makes sure that the PRNG state is unique for each thread
DH_generate_key expects DH_generate_key_APIParam_1 to contain the shared parameters dh - > p and dh - > g
CMS_uncompress extracts and uncompresses the content from a CMS CompressedData structure CMS_uncompress_APIParam_1
It will estimate the entropy contained in the event message , and add it to the PRNG
Note that any existing value in EVP_DigestSignInit_APIParam_2 is overwritten
However , a structural reference provides no guarantee that the ENGINE is initialised and able to use any of its cryptographic implementations
EVP_BytesToKey derives a key and IV from various parameters
EVP_BytesToKey_APIParam_2 is the message digest to use
data is a BIO to write the content to and CMS_uncompress_APIParam_4 is an optional set of flags
EVP_BytesToKey_APIParam_1 is the cipher to derive the key and IV for
count is the iteration count to use
This function is normally used
The derived key and IV will be written to key and iv respectively
EVP_DigestSignInit sets up signing context EVP_DigestSignInit_APIParam_1 to use digest type from ENGINE impl and private key pkey
Broadly speaking there are two uses for control commands
data is a buffer containing datal bytes which is used to derive the keying data
These functions allow an X509_NAME_entry_count_APIParam_1 X509_NAME_get_entry_APIParam_1 X509_NAME_get_text_by_OBJ_APIParam_1 X509_NAME_get_text_by_NID_APIParam_1 X509_NAME_get_index_by_NID_APIParam_1 X509_NAME_get_index_by_OBJ_APIParam_1 structure to be examined
d2i_DSAparams , i2d_DSAparams decode and encode the DSA parameters using a Dss-Parms structure as defined in RFC2459
BN_BLINDING_create_param creates new BN_BLINDING_create_param_APIParam_1 parameters using the exponent BN_BLINDING_set_flags_APIParam_2 BN_BLINDING_set_thread_id_APIParam_2 and the modulus m. bn_mod_exp and m_ctx can be used to pass special functions for exponentiation and BN_MONT_CTX
The salt parameter is used as a salt in the derivation
Indeed it 's quite possible that most ENGINEs will not initialise at all in typical environments , as ENGINEs are typically used to support specialised hardware
RAND_seed is equivalent to RAND_add
d2i_DSA_SIG , i2d_DSA_SIG decode and encode a DSA signature using a Dss-Sig-Value structure as defined in RFC2459
OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set , the locking_function and threadid_func
MIME headers for type text/plain are deleted from the content
The digest type may be NULL
the EVP_PKEY_CTX of the signing operation will be written to EVP_DigestSignInit_APIParam_2
this can be used to set alternative signing options
BN_BLINDING_NO_UPDATE inhibits the automatic update of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after each use and BN_BLINDING_NO_RECREATE inhibits the automatic re-creation of the BN_BLINDING_get_flags_APIParam_1 BN_BLINDING_set_flags_APIParam_1 parameters after a fixed number of uses
See the SECURE RENEGOTIATION section for more details
The behaviour of the SSL library can be changed by setting several options
The options are coded as bitmasks and can be combined by a logical or operation
As of OpenSSL 1.0.2 g the SSL_OP_NO_SSLv2 option is set by default
A typical application of this function is to derive keying material for an encryption algorithm from a password in the data parameter
DH_compute_key computes the shared secret from the private DH value in DH_compute_key_APIParam_3 and the other party 's public value in DH_compute_key_APIParam_2 and stores it in DH_compute_key_APIParam_1
The DSAPublicKey functions use an non standard format the actual data encoded depends on the value of the write_params field of the d2i_DSAPublicKey_APIParam_1 i2d_DSAPublicKey_APIParam_1 d2i_DSAPrivateKey_APIParam_1 i2d_DSA_SIG_APIParam_1 d2i_DSAparams_APIParam_1 i2d_DSAPrivateKey_APIParam_1 d2i_DSA_PUBKEY_APIParam_1 d2i_DSA_SIG_APIParam_1 i2d_DSAparams_APIParam_1 i2d_DSA_PUBKEY_APIParam_1 key parameter
only the pub_key field is encoded as an INTEGER
the number of bytes of data written will be written to the integer at EVP_DigestFinal_ex_APIParam_2 EVP_DigestFinal_ex_APIParam_2 EVP_DigestUpdate_APIParam_2 EVP_DigestInit_ex_APIParam_2 , at most EVP_MAX_MD_SIZE bytes will be written
a default implementation is used
Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers
keytype adds a flag to the store private key
name is the friendlyName to use for the supplied certifictate and key
Allow legacy insecure renegotiation between OpenSSL and unpatched servers only
this option is currently set by default
This is a non standard extension that is only currently interpreted by MSIE
SMIME_read_PKCS7_APIParam_2 can be passed to PKCS7_verify with the PKCS7_DETACHED flag set
Any existing policy set is cleared
The _ get_ex_data and _ set_ex_data functionality is described in CRYPTO_set_ex_data
iter is the encryption algorithm iteration count to use and mac_iter is the MAC iteration count to use
A detailed description for the _ get_ex_new_index functionality can be found in RSA_get_ex_new_index
X509_VERIFY_PARAM_add0_policy enables policy checking and adds policy to the acceptable policy set
X509_VERIFY_PARAM_set1_policies enables policy checking and sets the acceptable policy set to policies
The X509_VERIFY_PARAM_set_flags function sets the flags in X509_VERIFY_PARAM_set_flags_APIParam_1 by oring it with X509_VERIFY_PARAM_set_flags_APIParam_2
X509_VERIFY_PARAM_set1_email sets the expected RFC822 email address to email
Delta CRL checking is currently primitive
X509_VERIFY_PARAM_set1_ip sets the expected IP address to ip
BIO_retry_type returns a mask of the cause of a retry condition consisting of the values BIO_FLAGS_READ , BIO_FLAGS_WRITE , BIO_FLAGS_IO_SPECIAL
X509_VERIFY_PARAM_set1_host sets the expected DNS hostname to name clearing any previously specified host name or names
X509_VERIFY_PARAM_add1_host adds name as an additional reference identifer that can match the peer 's certificate
The parameters nid_key , nid_cert , iter , mac_iter and keytype can all be set to zero and sensible defaults will be used
See the VERIFICATION FLAGS section for a complete description of values the X509_VERIFY_PARAM_set_flags_APIParam_2 parameter can take
The EVP_PKEY_verify function performs a public key verification operation using EVP_PKEY_verify_APIParam_1
i2d_PrivateKey encodes key
d2i_PrivateKey decodes a private key using algorithm d2i_PrivateKey_APIParam_1
The verified data is specified using the tbs and tbslen parameters
The signature is specified using the sig and siglen parameters
The error code can be obtained by calling ERR_get_error
As for EC_POINT_mul the value EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 may be NULL
SSL_connect initiates the TLS/SSL handshake with a server
Call SSL_get_error with the return value ret to find out the reason
The action depends on the underlying BIO
The EVP_PKEY_verify_init function initializes a public key algorithm context using key pkey for a signature verification operation
It attempts to use any key specific format or PKCS # 8 unencrypted PrivateKeyInfo format
the message is clear text signed
If the underlying BIO is blocking, SSL_connect will only return once the handshake has been finished or an error occurred
It is usually safe to use SSL_OP_ALL to enable the bug workaround options
See EVP_DigestSignInit for detail
Refer to EVP_PKEY_CTX_new , EVP_PKEY_CTX_new_id , EVP_PKEY_CTX_free and EVP_PKEY_CTX_dup
They are called by the EVP_DigestSign functions
the peer is considered verified when any name matches
certificate verification automatically invokes X509_check_email
See EVP_DigestVerifyInit for detail
EVP_PKEY_base_id returns the type of EVP_PKEY_base_id_APIParam_1
The signctx_init and signctx methods are used to sign a digest present by a EVP_MD_CTX object
certificate verification automatically invokes X509_check_ip
The methods are the underlying implementations of a particular public key algorithm present by the EVP_PKEY_CTX object
EVP_PKEY_id returns the actual OID associated with EVP_PKEY_id_APIParam_1
They are called by the various EVP_DigestVerify functions
The DSAPrivateKey functions also use a non standard structure consiting consisting of a SEQUENCE containing the p , q , d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key and priv_key fields respectively
EVP_PKEY_type returns the underlying type of the NID EVP_PKEY_type_APIParam_1
For details on the output buffer size , refer to EVP_PKEY_sign
Historically keys using the same algorithm could use different OIDs
EVP_PKEY_set1_engine sets the ENGINE handling EVP_PKEY_set1_engine_APIParam_1 to EVP_PKEY_set1_engine_APIParam_2
the RSA operations are much faster 
p , q , dmp1 , dmq1 and iqmp may be NULL in private keys , but
The verifyctx_init and verifyctx methods are used to verify a signature against the data in a EVP_MD_CTX object
Any previous names set via X509_VERIFY_PARAM_set1_host or X509_VERIFY_PARAM_add1_host are retained , no change is made
CRLs are expected to be available in the corresponding X509_STORE structure
q , d2i_DSAPublicKey_APIParam_2 i2d_DSAPublicKey_APIParam_2 d2i_DSAPrivateKey_APIParam_2 i2d_DSA_SIG_APIParam_2 d2i_DSAparams_APIParam_2 i2d_DSAPrivateKey_APIParam_2 d2i_DSA_PUBKEY_APIParam_2 d2i_DSA_SIG_APIParam_2 i2d_DSAparams_APIParam_2 i2d_DSA_PUBKEY_APIParam_2 and pub_key respectively fields are encoded
 the list of hostnames is cleared , and name checks are not performed on the peer certificate
certificate verification automatically invokes X509_check_host with flags equal to the X509_VERIFY_PARAM_set_flags_APIParam_2 argument given to X509_VERIFY_PARAM_set_hostflags
This option was useful for old export grade software which could use signing only keys of arbitrary size but had restrictions on the permissible sizes of keys which could be used for encryption
As opposed to init , the cleanup method is called
The copy method is called
The init method is called to initialize algorithm-specific data
It uses a key specific format or PKCS # 8 unencrypted PrivateKeyInfo format
EC_POINTs_mul calculates the value generator EC_POINTs_mul_APIParam_3 EC_POINT_mul_APIParam_3 + q -LSB- 0 -RSB- m -LSB- 0 -RSB- + ... + q -LSB- num-1 -RSB- m -LSB- num-1 -RSB-
RSA_get_ex_data is used to retrieve application specific data
new_func and free_func take the same parameters
an RSA key could use the OIDs corresponding to the NIDs NID_rsaEncryption or NID_rsa
CRYPTO_EX_free_APIParam_2 CRYPTO_EX_new_APIParam_2 is a the application specific data
The RSA_get_ex_new_index function is initially called to `` register '' some new application specific data
CRYPTO_EX_free_APIParam_1 CRYPTO_EX_new_APIParam_1 is a pointer to the parent RSA structure
The data is returned to the application, this will be the same value as supplied to a previous RSA_set_ex_data call
The return value of new_func is ignored
This function will typically be used to allocate any application specific structure
The precise manner in which these function pointers are called is described in more detail below
BN_add_word adds BN_add_word_APIParam_2 to BN_add_word_APIParam_1
DSA_generate_key expects DSA_generate_key_APIParam_1 to contain DSA parameters
BN_sub_word subtracts BN_sub_word_APIParam_2 from BN_sub_word_APIParam_1
BN_div_word divides BN_div_word_APIParam_1 by BN_div_word_APIParam_2 and returns the remainder
BN_mul_word multiplies BN_mul_word_APIParam_1 and BN_mul_word_APIParam_2
BN_mod_word returns the remainder of BN_mod_word_APIParam_1 divided by BN_mod_word_APIParam_2
The RSA_set_ex_data_APIParam_2 RSA_get_ex_data_APIParam_2 parameter is the index
this will be the same value returned by RSA_get_ex_new_index when the functions were initially registered
The RSA_get_ex_data_APIParam_2 RSA_set_ex_data_APIParam_2 , RSA_get_ex_new_index_APIParam_1 and RSA_get_ex_new_index_APIParam_2 parameters are the same as those in new_func and free_func
Points can also be described in terms of their compressed co-ordinates
XN_FLAG_SEP_SPLUS_SPC uses spaced semicolon and plus
XN_FLAG_SEP_COMMA_PLUS uses comma and plus as separators
XN_FLAG_SEP_MULTILINE uses spaced newline and plus respectively
See the BUGS section
Pointers to the destination and source CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structures are passed in the CRYPTO_EX_dup_APIParam_1 and CRYPTO_EX_dup_APIParam_2 parameters respectively
The new_func function is n't very useful
It takes three optional function pointers which are called
XN_FLAG_COMPAT uses a format identical to X509_NAME_print
RSA_flags returns the flags that are set for RSA_flags_APIParam_1's current method
An RSA_set_method_APIParam_2 RSA_new_method_APIParam_1 RSA_set_default_method_APIParam_1 specifies the functions that OpenSSL uses for RSA operations
The options XN_FLAG_SEP_COMMA_PLUS , XN_FLAG_SEP_CPLUS_SPC , XN_FLAG_SEP_SPLUS_SPC and XN_FLAG_SEP_MULTILINE determine the field separators to use
RSA_set_default_method makes RSA_set_default_method_APIParam_1 the default method for all RSA structures created later
XN_FLAG_SEP_CPLUS_SPC uses comma and plus with spaces
The affine co-ordinates for a point describe a point in terms of its x and y position
in fact XN_FLAG_COMPAT calls X509_NAME_print internally
It generates a new key pair and stores it in a - > pub_key and a - > priv_key
this is more readable that plain comma and plus
The fields XN_FLAG_FN_SN , XN_FLAG_FN_LN , XN_FLAG_FN_OID , XN_FLAG_FN_NONE determine how a field name is displayed
CRYPTO_EX_free_APIParam_3 CRYPTO_EX_new_APIParam_3 is a pointer to the CRYPTO_EX_free_APIParam_3 CRYPTO_EX_dup_APIParam_1 CRYPTO_EX_new_APIParam_3 structure from the parent RSA structure
new_func is called
free_func is called
the functions CRYPTO_get_ex_data and CRYPTO_set_ex_data can be called to manipulate it
XN_FLAG_MULTILINE is a multiline format which is the same as
dup_func is called
The CRYPTO_EX_dup_APIParam_3 parameter is passed a pointer to the source application data when the function is called, when the function returns the value is copied to the destination
RSA_new_method allocates and initializes an RSA structure so that engine will be used for the RSA operations
Two distinct separators are used between distinct RelativeDistinguishedName components and separate values in the same RDN for a multi-valued RDN
XN_FLAG_RFC2253 sets options which produce an output compatible with RFC2253 it is equivalent to
XN_FLAG_ONELINE is a more readable one line format which is the same as
It will use the short name the long name always use OID numerical form and no field name respectively
As of version 0.9.7 , RSA_METHOD implementations are grouped together with other algorithmic APIs into ENGINE modules
ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN | XN_FLAG_FN_ALIGN
ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS | XN_FLAG_DN_REV | XN_FLAG_FN_SN | XN_FLAG_DUMP_UNKNOWN_FIELDS
PKCS12_parse_APIParam_2 is the passphrase to use
PKCS12_parse_APIParam_1 is the PKCS12_parse_APIParam_1 structure to parse
CMS_compress creates and returns a CMS CompressedData structure
ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE | XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN
CMS_compress_APIParam_1 is the content to be compressed
CMS_compress_APIParam_3 is an optional set of flags
ca can be <NULL> in which case additional certificates will be discarded
Only friendlyName and localKeyID attributes are currently stored in certificates
the application can thus modify the data pointed to by CRYPTO_EX_dup_APIParam_3 and have different values in the source and destination
CMS_compress_APIParam_2 is the compression algorithm to use or NID_undef to use the default algorithm
The behaviour of RSA_flags is a mis-feature that is left as-is for now to avoid creating compatibility problems
ca can also be a valid STACK in which case additional certificates are appended to ca
For a point , for any given value for x such that the point is on the curve there will only ever be two possible values for y
the whole DN is printed in reversed order
originally passed to the same corresponding parameters
field names are padded to 20 characters
spaces will be placed around the ' = ' character separating field names and values
that will override any RSA defaults set using the RSA API
MIME headers for type text/plain are prepended to the data
the default ENGINE for RSA operations is used
, the RSA_METHOD controlled by RSA_set_default_method is used
The EVP_PKEY_FLAG_SIGCTX_CUSTOM is used to indicate
the maximum size of the output buffer will be automatically calculated or checked in corresponding EVP methods by the EVP framework
not all the BIO_TYPE _ types above have corresponding BIO implementations
DH_check validates Diffie-Hellman parameters
The EVP_PKEY_derive_init function initializes a public key algorithm context using key pkey for shared secret derivation
These functions decode and encode an d2i_X509_ALGOR_APIParam_1 i2d_X509_ALGOR_APIParam_1 structure which is equivalent to the AlgorithmIdentifier structure
However , they can also be called directly to implement padding for other asymmetric ciphers
For RSA_padding_xxx_OAEP , p points to the encoding parameter of length pl
See BN_generate_prime for information on the BN_GENCB_call function
SSL_accept waits for a TLS/SSL client to initiate the TLS/SSL handshake
If the CMS_STREAM flag is set ,a partial CMS_compress_APIParam_0 structure is returned suitable for streaming I/O
The friendlyName and localKeyID attributes on each certificate will be stored in the alias and keyid attributes of the STACK_OF_APIParam_1 structure
no data is read from the BIO CMS_compress_APIParam_1
RSA_padding_add_PKCS1_OAEP and RSA_padding_check_PKCS1_OAEP may be used in an application combined with RSA_NO_PADDING
The BIO_find_type searches for a BIO of a given type in a chain , starting at BIO BIO_find_type_APIParam_1 BIO_find_type_APIParam_1
A standard set of objects is represented in an internal table
It checks that p is a safe prime , and that g is a suitable generator
The appropriate values are defined in the header file objects.h
error code is an 8 digit hexadecimal number , library name , function name and reason string are ASCII text
X509_STORE_set_verify_cb sets the verification callback of ctx to verify_cb overwriting any existing callback
The RSA_padding_check_PKCS1_type_2 padding check leaks timing information which can potentially be used to mount a Bleichenbacher padding oracle attack
For convenience , OIDs are usually represented in source code as numeric identifiers , or NIDs
pubk is an array of npubk public keys
EVP_SealInit_APIParam_2 is normally supplied by a function such as EVP_aes_256_cbc
Applications can determine if there is a corresponding OBJECT IDENTIFIER by checking OBJ_length is not zero
In the case of an error , the bit flags DH_CHECK_P_NOT_SAFE_PRIME or DH_NOT_SUITABLE_GENERATOR are set in codes
MDC2_Update can be called repeatedly with chunks of the message to be hashed
The iv parameter is a buffer where the generated IV is written to
Objects in OpenSSL can have a short name , a long name and a numerical identifier associated with them
The ASN1 object utility functions process ASN1_OBJECT structures which are a representation of the ASN1 OBJECT IDENTIFIER type
The actual size of each encrypted secret key is written to the array ekl
p may be NULL
The default constructor creates a string `` Enter description for name
It is possible to call EVP_SealInit twice in the same way as EVP_EncryptInit
Normally the supplied content is translated into MIME canonical format
If the flags element of an RSA key is changed, the changes will be honoured by RSA functionality but will not be reflected in the return value of the RSA_flags function - in effect RSA_flags behaves more like an RSA_default_flags function
The compressed data is included in the CMS_ContentInfo structure
the corresponding certificate to PKCS12_parse_APIParam_4 and any additional certificates to ca
a search is made for a BIO of that type
UI_construct_prompt is a helper function that can be used to create a prompt from two pieces of information
Raw RSA signature
Signing user data directly with RSA is insecure
With the description `` pass phrase '' and the file name `` foo.key '' , that becomes `` Enter pass phrase for foo.key
the EE key can be used for signing
the chain can be used with the current session
padding is the padding mode that was used to sign the data
data contains a string
The secret key is encrypted using one or more public keys , this allows the same encrypted data to be decrypted using any of the corresponding private keys
Other methods may create whatever string and may include encodings that will be processed by the other method functions
RSA functionality , such as the encryption functions , are controlled by the flags value in the RSA key itself , not by the flags value in the RSA_METHOD attached to the RSA key
RSA_private_encrypt signs the RSA_private_encrypt_APIParam_1 bytes at RSA_private_encrypt_APIParam_2 using the private key rsa and stores the signature in to
DH_UNABLE_TO_CHECK_GENERATOR is set
The verification callback from an X509_STORE_set_verify_cb_func_APIParam_1 X509_STORE_set_verify_cb_APIParam_1 is inherited by the corresponding X509_STORE_CTX structure
the iv parameter is ignored and can be NULL
are generated
OpenSSL has an internal table of OIDs that , and their corresponding NIDs are available as defined constants
ERR_get_error_line_data , ERR_peek_error_line_data and ERR_peek_last_error_line_data store additional data and flags associated with the error code in data and flags
DH_generate_parameters_ex_APIParam_4 will be called as described in BN_generate_prime while a random prime number is generated , and when a prime has been found , BN_GENCB_call is called
the certificate type is acceptable
it returns the number of arguments processed
an application could translate a relative pathname to an absolute pathname
The function SSL_CONF_cmd performs configuration operation SSL_CONF_cmd_APIParam_2 with optional parameter SSL_CONF_cmd_APIParam_3 on ctx
This is currently SSLv2 or TLSv1/SSLv3
SSL_CIPHER_get_version returns string which indicates the SSL/TLS protocol version that first defined the cipher
A BN_CTX_new_APIParam_0 is a structure that holds BIGNUM temporary variables used by library functions
SSLv3 is always disabled and attempt to override this by the user are ignored
RSA_public_decrypt recovers the message digest from the RSA_public_decrypt_APIParam_1 bytes long signature at RSA_public_decrypt_APIParam_2 using the signer 's public key rsa
SSL_CIPHER_description returns a textual description of the cipher used into the buffer SSL_CIPHER_description_APIParam_2 of length len provided
CONF_modules_finish calls each configuration modules finish handler to free up any configuration that module may have performed
None is the representation of anonymous ciphers
No new ciphers were added by TLSv1 .1
The TLSv1 .0 ciphers are flagged with SSLv3
the BN_CTX_new_APIParam_0 structure is used
SSL_check_chain checks whether certificate x , private key pk and certificate chain chain is suitable for use with the current session s
See NOTES for more information
This function validates RSA keys
For enveloped data they are added to OriginatorInfo
SSL_CTX_set_cert_verify_callback sets the verification callback function for ctx
Its purpose is to simplify application configuration of SSL_CTX or SSL_CONF_cmd_APIParam_1 structures by providing a common framework for command line options or configuration files
This function checks that p and q are in fact prime , and that n = pq
For signed data certificates and CRLs are added to the certificates and crls fields of SignedData structure
By setting callback to NULL , the default behaviour is restored
Where a field is optional and absent NULL will be written to the corresponding parameter
The latter is set using the SSL_CTX_set_verify family of functions
It also checks that de = 1 mod , and that dmp1 , dmq1 and iqmp are set correctly or are NULL
Either the keyidentifier will be set in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_RecipientInfo_ktri_get0_signer_id_APIParam_3 and CMS_RecipientInfo_ktri_get0_signer_id_APIParam_4
Within x509_store_ctx , callback has access to the verify_callback function set using SSL_CTX_set_verify
streaming is performed
The function SSL_CONF_cmd_value_type can be used by applications to check for the existence of a command or to perform additional syntax checking or translation of the command value
This function uses the header x509.h as opposed to most chain verification functiosn which use x509_vfy
once to compute the signature in PKCS7_sign and once to output the S/MIME message
Providing a complete verification procedure including certificate purpose settings etc is a complex task
The cipher context can be set using EVP_EncryptInit_ex
the server implementation only applies to TLS and there is no SSLv3 implementation
SSL_CTX_set_tlsext_ticket_key_cb sets a callback fuction cb for handling session tickets for the ssl context SSL_CTX_set_tlsext_ticket_key_cb_APIParam_1
a buffer of 128 bytes is allocated using OPENSSL_malloc
The name is 16 characters long and is used as a key identifier
The hmac context can be set using HMAC_Init_ex
The iv length is the length of the IV of the corresponding cipher
the according description of the cipher property is unknown
name and iv have already been parsed out of the session ticket
the word `` export '' is printed
callback will be called with the arguments callback
Session tickets , defined in RFC5077 provide an enhanced session resumption capability where the server implementation is not required to maintain per session state
The argument arg is specified by the application
a verification function is called
SSL objects that are created from ctx inherit the setting valid at the time
Any of the remaining parameters can be NULL
An ENGINE implementation can override the way key data is stored and handled , and can even provide support for HSM keys - in which case the RSA structure may contain no key data at all !
The callback is available
the built-in verification function is used
The callback function cb will be called for every client instigated TLS session
The keyEncryptionAlgorithm field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_2
the keyIdentifier field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_3
the date field is written to CMS_RecipientInfo_kekri_get0_id_APIParam_4
the components keyAttrId and keyAttr are written to parameters CMS_RecipientInfo_kekri_get0_id_APIParam_5 and CMS_RecipientInfo_kekri_get0_id_APIParam_6
The return value of the cb function is used by OpenSSL to determine what further processing will occur
CMS_SignerInfo_get0_signer_id retrieves the certificate signer identifier associated with a specific CMS_SignerInfo structure CMS_SignerInfo_get0_signer_id_APIParam_1
This indicates that the ctx and hctx have been set and the session can continue on those parameters
The key is sent to BIO EVP_PKEY_print_public_APIParam_1 EVP_PKEY_print_private_APIParam_1 EVP_PKEY_print_params_APIParam_1 in human readable form
The OpenSSL library will call cb again with an enc argument of 1 to set the new ticket
The library will call the callback again with an arguement of enc equal to 1 to set the new ticket
Currently no public key algorithms include any options in the pctx parameter parameter
The SSL_CTX_set_tlsext_servername_arg_APIParam_2 value is a pointer which is passed to the application callback
Using a 0 pointer for cb disables the message callback
Either the keyidentifier will be set in CMS_SignerInfo_get0_signer_id_APIParam_2 or both issuer name and serial number in CMS_SignerInfo_get0_signer_id_APIParam_3 and CMS_SignerInfo_get0_signer_id_APIParam_4
SSL_set_msg_callback and SSL_set_msg_callback_arg modify the actual settings of an SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 object
The pctx parameter allows the print output to be finely tuned by using ASN1 printing options
The protocol version according to which the protocol message is interpreted by the library
SSL_CTX_set_msg_callback and SSL_CTX_set_msg_callback_arg specify default settings that will be copied to new SSL_CTX_set_msg_callback_arg_APIParam_1 SSL_set_msg_callback_arg_APIParam_1 objects by SSL_new
BIO_set_cipher sets the cipher of BIO BIO_set_cipher_APIParam_1 to BIO_set_cipher_APIParam_2 using key key and IV iv
BN_set_bit sets bit BN_set_bit_APIParam_2 in BN_set_bit_APIParam_1 to 1
buf points to a buffer containing the protocol message , which consists of len bytes
BN_clear_bit sets bit BN_clear_bit_APIParam_2 in BN_clear_bit_APIParam_1 to 0
The functions EVP_PKEY_print_public , EVP_PKEY_print_private and EVP_PKEY_print_params print out the public , private or parameter components of key EVP_PKEY_print_public_APIParam_2 EVP_PKEY_print_private_APIParam_2 EVP_PKEY_print_params_APIParam_2 respectively
The receiptsTo parameter is copied to prto
It places the result in HMAC_Final_APIParam_2
CMS_ReceiptRequest_create0 creates a signed receipt request structure
rsa is the signer 's public key
SSL_CTX_set_msg_callback_arg and SSL_set_msg_callback_arg can be used to set argument SSL_CTX_set_msg_callback_arg_APIParam_2 SSL_set_msg_callback_arg_APIParam_2 to the callback function , which is available for arbitrary application use
RSA_verify_ASN1_OCTET_STRING_APIParam_1 is ignored
The signedContentIdentifier is copied to pcid
The receiptsTo parameter specifies the receiptsTo field value
CMS_ReceiptRequest_get0_values retrieves the values of a receipt request
BN_mask_bits truncates BN_mask_bits_APIParam_1 to an BN_mask_bits_APIParam_2 bit number >> n
SSL_CTX_set_msg_callback or SSL_set_msg_callback can be used to define a message callback function cb for observing all SSL/TLS protocol messages that are received or sent
It stores the signature in sigret and the signature size in siglen
SNI is not used
BN_lshift1 shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by one and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1
BN_rshift1 shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by one and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1
SSL_CTX_set_tlsext_servername_callback sets the application callback cb used by a server to perform any actions or configuration required based on the servername extension received in the incoming connection
BN_rshift shifts BN_rshift_APIParam_2 BN_rshift1_APIParam_2 right by BN_rshift_APIParam_3 bits and places the result in BN_rshift_APIParam_1 BN_rshift1_APIParam_1
BN_lshift shifts BN_lshift_APIParam_2 BN_lshift1_APIParam_2 left by BN_lshift_APIParam_3 bits and places the result in BN_lshift_APIParam_1 BN_lshift1_APIParam_1
the library will call the cb again to get a new set of parameters
The OpenSSL library expects that the name will be used to retrieve a cryptographic parameters and that the cryptographic context ctx will be set with the retreived parameters and the initialization vector iv
The number is expanded
In the above example crl would be freed but rev would not
HMAC_Init_ex initializes or reuses a HMAC_Init_ex_APIParam_1 HMAC_Init_APIParam_1 HMAC_Init_ex_APIParam_1 structure to use the hash function HMAC_APIParam_1 and key HMAC_Init_ex_APIParam_2 HMAC_Init_APIParam_2 HMAC_Init_ex_APIParam_2
RSA_verify_ASN1_OCTET_STRING verifies that the signature sigbuf of size siglen is the DER representation of a given octet string RSA_verify_ASN1_OCTET_STRING_APIParam_2 of size m_len
Various options regarding certificates , algorithms etc can be set in this object
The OpenSSL ssl library implements the Secure Sockets Layer and Transport Layer Security protocols
ERR_R _ ... reason codes such as ERR_R_MALLOC_FAILURE are globally unique
Note that any existing value in EVP_DigestVerifyInit_APIParam_2 is overwritten
RSA_sign_ASN1_OCTET_STRING signs the octet string RSA_sign_ASN1_OCTET_STRING_APIParam_2 of size m_len using the private key rsa represented in DER using PKCS # 1 padding
Due to automatic protocol version negotiation , version is not necessarily the protocol version used by the sender of the message
The OpenSSL crypto library implements a wide range of cryptographic algorithms used in various Internet standards
an SSL_CTX object is created as a framework to establish TLS/SSL enabled connections
the function arguments have the following meaning
EVP_DigestVerifyInit sets up verification context EVP_DigestVerifyInit_APIParam_1 to use digest type from ENGINE impl and public key pkey
X509_STORE_CTX_set_verify_cb sets the verification callback of X509_STORE_CTX_set_verify_cb_APIParam_1 to verify_cb overwriting any existing callback
However a verification callback is not essential and the default operation is often sufficient
In the case of SSL 3.0 or TLS 1.0 , this is one of the ContentType values defined in the protocol specification , alert , handshake
the receiptList option in receiptsFrom is used
The size of the output is placed in md_len
the allOrFirstTier option in receiptsFrom is used and set to the value of the allorfirst parameter
it can be assigned to an SSL object
The signedContentIdentifier field is set using id and idlen , or
no error occurred
For new sessions tickets , , the callback function will be called with enc equal to 1
The returned PKCS7 structure will be valid and finalized
This effectively removes all security from the application
Additional application data can be passed to the callback via the ex_data mechanism
SMIME_read_CMS_APIParam_2 can be passed to CMS_verify with the CMS_DETACHED flag set
The EVP_PKEY_verify_recover function recovers signed data using EVP_PKEY_verify_recover_APIParam_1
The X509_STORE_CTX_set_verify_cb_APIParam_1 parameter to the callback is the X509_STORE_CTX_set_verify_cb_APIParam_1 structure that is performing the verification operation
ERR_PACK is a macro
After the SSL object has been created using SSL_new , SSL_set_fd or SSL_set_bio can be used to associate the network connection with the object
The EVP_Digest ... functions provide message digests
The EVP_PKEY_verify_recover_init function initializes a public key algorithm context using key pkey for a verify recover operation
Also see the older EVP_Sign ... and EVP_Verify ... functions
Symmetric encryption is available with the EVP_Encrypt ... functions
To create a new EVP_PKEY see EVP_PKEY_new
The error code is generated from the library number and a function and reason code
SSL_set0_verify_cert_store , SSL_set1_verify_cert_store , SSL_set0_chain_cert_store and SSL_set1_chain_cert_store are similar except they apply to SSL structure ssl
error = ERR_PACK
The EVP_DigestSign ... and EVP_DigestVerify ... functions implement digital signatures and Message Authentication Codes
EVP_Seal ... and EVP_Open ... provide public key encryption and decryption to implement digital `` envelopes ''
EVP_PKEYs can be compared using EVP_PKEY_cmp , or printed using EVP_PKEY_print_private
a new ASN1_TIME structure is allocated and returned
The EVP_PKEY ... functions provide a high level interface to asymmetric algorithms
The EVP_Encode ... and EVP_Decode ... functions implement base 64 encoding and decoding
The offset_sec value can also exceed the number of seconds in a day
ASN1_TIME_diff sets ASN1_TIME_diff_APIParam_1 and ASN1_TIME_diff_APIParam_2 to the time difference between from and to
The ASN1_TIME structure corresponds to the ASN .1 structure Time defined in RFC5280 et al
The value of ASN1_TIME_diff_APIParam_2 will always be less than the number of seconds in a day
RAND_file_name_APIParam_1 points to a buffer of size RAND_file_name_APIParam_2 in which to store the filename
The function EVP_PKEY_CTX_ctrl sends a control operation to the context EVP_PKEY_CTX_ctrl_APIParam_1
the EVP_PKEY_CTX of the verification operation will be written to EVP_DigestVerifyInit_APIParam_2
The SSL_CTX_add_extra_chain_cert_APIParam_2 certificate provided to SSL_CTX_add_extra_chain_cert will be freed by the library
Some applications add offset times directly to a time_t value and pass the results to ASN1_TIME_set
int i , j
The time setting functions obey the rules outlined in RFC5280
this can be used to set alternative verification options
The services provided by this library are used by the OpenSSL implementations of SSL , TLS and S/MIME , and they have also been used to implement SSH , OpenPGP , and other cryptographic standards
ASN1_TIME_adj sets the ASN1_TIME structure ASN1_TIME_adj_APIParam_1 to the time represented by the time offset_day and offset_sec after the time_t value ASN1_TIME_adj_APIParam_2
char p , temp
The signedData structure includes several PKCS # 7 autenticatedAttributes including the signing time , the PKCS # 7 content type and the supported list of ciphers in an SMIMECapabilities attribute
i = i2d_SSL_SESSION
The control command is indicated in cmd and any additional arguments in p1 and p2
The parameter EVP_PKEY_CTX_ctrl_APIParam_3 is a mask indicating which operations the control can be applied to
p = temp = malloc
-1 sets the salt length to the digest length
The returned CMS_ContentInfo structure will be valid and finalized 
The EVP_PKEY_CTX_set_rsa_rsa_keygen_bits macro sets the RSA key length for RSA key genration to bits
j = i2d_SSL_SESSION
This is intended to be used for options specified on the command line or in text files
The macro EVP_PKEY_CTX_set_dsa_paramgen_bits sets the number of bits used for DSA parameter generation to bits
The EVP_PKEY_encrypt function performs a public key encryption operation using EVP_PKEY_encrypt_APIParam_1
The data to be encrypted is specified using the EVP_PKEY_encrypt_APIParam_0 and inlen parameters
The macro EVP_PKEY_CTX_set_dh_paramgen_prime_len sets the length of the DH prime parameter p for DH parameter generation
the PKCS7_SIGNER_INO structure will not be finalized so additional attributes can be added
the maximum size of the output buffer is written to the routlen parameter
OpenSSL will by default identify signing certificates using issuer name and serial number
The function EVP_PKEY_CTX_ctrl_str allows an application to send an algorithm specific control operation to a context EVP_PKEY_CTX_ctrl_str_APIParam_1 in string form
EVP_PKEYs can be associated with a private key of a particular algorithm by using the functions described on the EVP_PKEY_set1_RSA page , or new keys can be generated using EVP_PKEY_keygen
an attempt is made to copy the content digest value from the PKCS7 struture
to add a signer to an existing structure
else GeneralizedTime is used
no signedAttributes will be used
its main use is
if the call is successful , recovered data is written to rout and the amount of data written to routlen
It uses standard block padding
The EVP_PKEY_encrypt_init function initializes a public key algorithm context using key pkey for an encryption operation
The actual number of bytes written is placed in outl
EVP_CIPHER_CTX_set_padding enables or disables padding
EVP_DecryptInit_ex , EVP_DecryptUpdate and EVP_DecryptFinal_ex are the corresponding decryption operations
EVP_EncryptInit_ex sets up cipher context EVP_EncryptInit_ex_APIParam_1 for encryption with cipher EVP_EncryptInit_ex_APIParam_2 from ENGINE impl
EVP_EncryptUpdate encrypts inl bytes from the buffer EVP_EncryptUpdate_APIParam_0 and writes the encrypted version to EVP_EncryptUpdate_APIParam_2
The operation performed depends on the value of the enc parameter
EVP_CIPHER_type and EVP_CIPHER_CTX_type return the type of the passed cipher or context
SSL_CTX_get_client_CA_list returns the list of client CAs explicitly set for ctx using SSL_CTX_set_client_CA_list
In client mode, SSL_get_client_CA_list returns the list of client CAs sent from the server, if any
Each operation has four functions associated with Each operation
SSL_pending takes into account only bytes from the TLS/SSL record that is currently being processed
List of CA names explicitly set or send by the server
This mechanism is used internally by the ssl library to store the SSL structure associated with a verification operation in an X509_STORE_CTX_get_ex_data_APIParam_1 X509_STORE_CTX_set_ex_data_APIParam_1 structure
SSL_get_client_CA_list returns the list of client CAs explicitly set for ssl using SSL_set_client_CA_list or ssl's SSL_CTX object with SSL_CTX_set_client_CA_list , when in server mode
The SignedData structure includes several CMS signedAttributes including the signing time , the CMS content type and the supported list of ciphers in an SMIMECapabilities attribute
For more details about the meaning of arguments see the PEM FUNCTION ARGUMENTS section
The RSAPrivateKey functions process an RSA private key using an RSA structure
The read functions can additionally transparently handle PKCS # 8 format encrypted and unencrypted keys too
The PrivateKey functions read or write a private key in PEM format using an EVP_PKEY structure
No client CA list was explicitly set or the server did not send a list of CAs
The write routines use `` traditional '' private key format and can handle both RSA and DSA private keys
The DSAPrivateKey functions process a DSA private key using a DSA structure
The DSAparams functions process DSA parameters using a DSA structure
The DHparams functions process DH parameters using a DH structure
For clarity the term `` foobar functions '' will be used to collectively refer to the PEM_read_bio_foobar , PEM_read_foobar , PEM_write_bio_foobar and PEM_write_foobar functions
an attempt is made to copy the content digest value from the CMS_ContentInfo structure
PEM_write_bio_PKCS8PrivateKey and PEM_write_PKCS8PrivateKey write a private key in an EVP_PKEY structure in PKCS # 8 EncryptedPrivateKeyInfo format using PKCS # 5 v2 .0 password based encryption algorithms
PKCS7_encrypt creates and returns a PKCS#7 envelopedData structure
EVP_EncryptFinal_ex encrypts the `` final '' data , that is any data that remains in a partial block
ERR_load_crypto_strings registers the error strings for all libcrypto functions
certs is a list of recipient certificates
The old PrivateKey write routines are retained for compatibility
DH_set_default_method makes DH_set_default_method_APIParam_1 the default method for all DH structures created later
The X509_AUX functions process a trusted X509 certificate using an X509 structure
EC_KEY_dup creates a new EC_KEY object and copies ec_key into it
flags is an optional set of flags
in is the content to be encrypted
cipher is the symmetric cipher to use
EC_KEY_copy copies the contents of the EC_KEY in EC_KEY_copy_APIParam_2 EC_KEY_dup_APIParam_1 into dest
Repeated RC4 calls with the same RC4_APIParam_1 RC4_APIParam_1 yield a continuous key stream
This `` type '' is the actual NID of the cipher OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit RC2 and 128 bit RC2 have the same NID
standard block padding and the padding is checked and removed
By default encryption operations are padded using
BIO_seek sets the file pointer to position ofs from start of file using fseek
unlike all other PEM routines the encryption is applied at the PKCS # 8 level and not in the PEM headers
The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 and X509_REQ_NEW functions process a PKCS # 10 certificate request using an X509_REQ structure
RC4 encrypts or decrypts the RC4_APIParam_2 RC4_APIParam_2 bytes of data at RC4_APIParam_3 RC4_APIParam_3 using RC4_APIParam_1 RC4_APIParam_1 and places the result at outdata
additional protocol bytes may have been read containing more TLS/SSL records
The PEM_write_X509_REQ_APIParam_2 PEM_write_X509_REQ_NEW_APIParam_2 PEM_write_bio_X509_REQ_NEW_APIParam_2 PEM_read_bio_X509_REQ_APIParam_2 PEM_write_bio_X509_REQ_APIParam_2 PEM_read_X509_REQ_APIParam_2 write functions use CERTIFICATE REQUEST in the header whereas the X509_REQ_NEW functions use NEW CERTIFICATE REQUEST
However the public key is encoded using a SubjectPublicKeyInfo structure and
no padding is performed
the encrypted data is written to out and the amount of data written to outlen
SSL_clear is used to prepare an SSL object for a new connection
BN_GENCB_call is used with two different meanings
The process is repeated for prime q with BN_GENCB_call
store is a trusted certficate store
BIO_seek is a macro that sets the position pointer to offset bytes from the start of file
p7 is the PKCS7 structure to verify
RSA_generate_key_ex generates a key pair and stores it in the RSA structure provided in rsa
PKCS7_verify verifies a PKCS # 7 signedData structure
The callback is inherited by all SSL_set_tmp_dh_APIParam_1 objects created from SSL_CTX_set_tmp_dh_callback_APIParam_1
OpenSSL will by default identify recipient certificates using issuer name and serial number
The acceptable certificates would be passed in the certs parameter
The certs and flags parameters have the same meanings as in PKCS7_verify
SHA1 computes the SHA-1 message digest of the SHA1_APIParam_2 bytes at SHA1_APIParam_1 and places it in SHA256_Final_APIParam_1 SHA512_Final_APIParam_1 SHA384_Final_APIParam_1 SHA224_Final_APIParam_1 SHA1_Final_APIParam_1
certs is a set of certificates in which to search for the signer 's certificate
DSA_set_method selects DSA_set_method_APIParam_2 to perform all operations using the key rsa
The callback is set using functions SSL_CTX_set_psk_client_callback or SSL_set_psk_client_callback
flags is an optional set of flags , which can be used to modify the verify operation
On success the length of psk in bytes is returned
BIO_set_buffer_read_data clears the read buffer and fills it with num bytes of buf
One application of PKCS7_NOINTERN is to only accept messages signed by a small number of certificates
Note that parameter hint given to the callback may be NULL
DSA_set_default_method makes DSA_set_default_method_APIParam_1 the default method for all DSA structures created later
Previous versions of the callback used is_export and keylength parameters to control parameter generation for export and non-export cipher suites
This behaviour can be controlled with the SSL_MODE_AUTO_RETRY flag of the SSL_CTX_set_mode call
If the underlying BIO is blocking, SSL_read will only return, once the read operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur
a side effect is the handling of the current SSL session
BIO_set_read_buffer_size , BIO_set_write_buffer_size and BIO_set_buffer_size set the read , write or both read and write buffer sizes to size
The content is written to out
indata is the signed data
The behaviour can be cutomized using flags
CONF_MFLAGS_IGNORE_ERRORS if set errors returned by individual configuration modules are ignored
A client application may request that a server send back an OCSP status response
The function CONF_modules_load_file configures OpenSSL using file CONF_modules_load_file_APIParam_1 and application name CONF_modules_load_file_APIParam_2
Any buffered data is cleared
X509_STORE_CTX_get_error_depth returns the depth of the error
a partial PKCS7 structure is output suitable for streaming I/O
The callback will be passed as an argument the value previously set via a call to SSL_CTX_set_tlsext_status_arg
X509_STORE_CTX_get1_chain returns a complete validate chain if a previous call to X509_verify_cert is successful
Normally any modules errors will add error information to the error queue
no data is read from the BIO in
The data to be decrypted is specified using the EVP_PKEY_decrypt_APIParam_0 and inlen parameters
The EVP_PKEY_decrypt function performs a public key decryption operation using EVP_PKEY_decrypt_APIParam_1
The EVP_PKEY_decrypt_init function initializes a public key algorithm context using key pkey for a decryption operation
This is a non-negative integer representing where in the certificate chain the error occurred
a session is considered bad and will be removed from the session cache , as required by RFC2246
A session is considered open
This combination is however useful
the standard OpenSSL configuration file is used
the standard OpenSSL application name openssl_conf is used
no error information is added
the first module error is considered fatal and no further modules are loaded
configuration module loading from DSOs is disabled
This will replace the DSA_METHOD used by the DSA key and
It is believed to be compatible with RC4 -LSB- TM -RSB- , a proprietary cipher of RSA Security Inc
The callback function is given the connection in parameter SSL_set_psk_client_callback_APIParam_1 , a NULL-terminated PSK identity hint sent by the server in parameter hint , a buffer identity of length max_identity_len bytes where the the resulting NULL-terminated identity is to be stored , and a buffer psk of length max_psk_len bytes where the resulting pre-shared key is to be stored
The read operation was not successful
The list specified overrides the previous setting
The IV is supplied in the iv parameter
It merely compares the public materials and/or key parameters of a key pair
EVP_OpenInit initializes a cipher context EVP_OpenInit_APIParam_1 for decryption with cipher EVP_OpenInit_APIParam_2
use SSL_CTX_load_verify_locations to additionally load them for verification
X509_STORE_CTX_init sets up X509_STORE_CTX_init_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_init_APIParam_1 for a subsequent verification operation
It is possible to call EVP_OpenInit twice in the same way as EVP_DecryptInit
i2d_ECDSA_SIG returns the length of the DER encoded signature
X509_STORE_CTX_set0_crls sets a set of CRLs to use to aid certificate verification to sk
In some cases the use of a configuration file is optional and its absence is not an error
CONF_MFLAGS_IGNORE_MISSING_FILE would be set
The parameter ECDSA_sign_ex_APIParam_1 is ignored
The parameter ECDSA_verify_APIParam_1 is ignored
d2i_ECDSA_SIG_APIParam_1 points to the buffer containing the DER encoded signature of size len
ECDSA_sign_setup may be used to precompute parts of the signing operation
The DER encoded signatures is stored in ECDSA_sign_ex_APIParam_2 and it's length is returned in sig_len
d2i_ECDSA_SIG decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated d2i_ECDSA_SIG_APIParam_1 structure
It decrypts the encrypted symmetric key of length ekl bytes passed in the EVP_OpenInit_APIParam_3 parameter using the private key priv
X509_STORE_CTX_set_chain sets the additional certificate chain used by X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk
BIO_set_ssl_renegotiate_timeout sets the renegotiate timeout to seconds
X509_STORE_CTX_trusted_stack sets the set of trusted certificates of X509_STORE_CTX_set0_param_APIParam_1 X509_STORE_CTX_get0_param_APIParam_1 X509_STORE_CTX_free_APIParam_1 X509_STORE_CTX_set_default_APIParam_1 X509_STORE_CTX_cleanup_APIParam_1 X509_STORE_CTX_set_cert_APIParam_1 X509_STORE_CTX_init_APIParam_1 to sk
ECDSA_sign_setup_APIParam_1 is the private EC key and ECDSA_sign_setup_APIParam_2 is a pointer to ECDSA_sign_setup_APIParam_2 structure
ECDSA_sign is wrapper function for ECDSA_sign_ex with kinv and rp set to NULL
i2d_ECDSA_SIG creates the DER encoding of the ECDSA signature i2d_ECDSA_SIG_APIParam_1 and writes the encoded signature to i2d_ECDSA_SIG_APIParam_2
BN_add adds BN_add_APIParam_2 and BN_add_APIParam_3 and places the result in BN_add_APIParam_1
BN_sub subtracts BN_sub_APIParam_3 from BN_sub_APIParam_2 and places the result in BN_sub_APIParam_1
This function is faster than BN_mul
For multiplication by powers of 2 , use BN_lshift
This function will normally be called
BIO_set_ssl sets the internal SSL pointer of BIO BIO_ctrl_APIParam_1 to ssl using the close flag c
BN_mod_mul_APIParam_1 may be the same BN_mod_mul_APIParam_1 as BN_mod_mul_APIParam_2 or BN_mod_mul_APIParam_3
Either of BN_div_APIParam_1 and BN_div_APIParam_2 may be NULL, in which case the respective value is not returned
For division by powers of 2 , use BN_rshift
BN_mul multiplies BN_mul_APIParam_2 and BN_mul_APIParam_3 and places the result in BN_mul_APIParam_1
BN_sqr takes the square of BN_sqr_APIParam_2 and places the result in BN_sqr_APIParam_1
This function is faster than repeated applications of BN_mul
The error codes can be obtained by ERR_get_error
This function uses less time and space than BN_exp
SSL_CTX_set_client_CA_list() sets the list of CAs sent to the client
SSL_CTX_set_client_CA_list sets
CMS_sign creates and returns a CMS SignedData structure
BN_exp raises BN_exp_APIParam_2 BN_mul_APIParam_2 to the BN_exp_APIParam_3-th power and places the result in BN_exp_APIParam_1 BN_mul_APIParam_1
For more efficient algorithms for repeated computations using the same modulus , see BN_mod_mul_montgomery and BN_mod_mul_reciprocal
BN_div divides BN_div_APIParam_3 by BN_div_APIParam_4 and places the result in BN_div_APIParam_1 and the remainder in BN_div_APIParam_2
The buffer at location SSL_has_matching_session_id_APIParam_2 is only guaranteed to have the size id_len
The data to be signed is read from BIO data
BN_mod_exp computes BN_mod_exp_APIParam_2 BN_exp_APIParam_2 to the BN_mod_exp_APIParam_3 BN_exp_APIParam_3-th power modulo BN_mod_sub_APIParam_4 BN_nnmod_APIParam_3 BN_mod_add_APIParam_4 BN_mod_mul_APIParam_4 BN_mod_APIParam_3 BN_mod_sqr_APIParam_3
BN_mod_mul multiplies BN_mod_mul_APIParam_2 by BN_mod_mul_APIParam_3 and finds the non-negative remainder respective to modulus BN_mod_mul_APIParam_4 mod m
The trusted certificate store is set to X509_STORE_CTX_init_APIParam_2 X509_STORE_CTX_init_APIParam_2 , the end entity certificate to be verified is set to STACK_OF_APIParam_0 and a set of additional certificates in chain
Many S/MIME clients expect the signed content to include valid MIME headers
certs is an optional additional set of certificates to include in the CMS structure
signcert is the certificate to sign with , pkey is the corresponding private key
it sends a list of CAs , to the client
The callback function receives a pointer to the memory location to put SSL_has_matching_session_id_APIParam_2 into and a pointer to the maximum allowed length id_len
SSL_set_client_CA_list() sets the list of CAs sent to the client 
if the call is successful the decrypted data is written to out and the amount of data written to outlen
If the flags CMS_STREAM is set ,then the returned CMS_ContentInfo structure is just initialized ready to perform the signing operation
In this way data can be signed in a single pass
The callback is only allowed to generate a shorter id and reduce id_len
Several functions including SMIME_write_CMS , i2d_CMS_bio_stream , PEM_write_bio_CMS_stream finalize the structure
This is SHA1 for both RSA and DSA keys
The signing is however not performed and the data to be signed is not read from the data parameter
SSL_has_matching_session_id checks , whether a session with id SSL_has_matching_session_id_APIParam_2 is already contained in the internal session cache of the parent context of SSL_has_matching_session_id_APIParam_1
Alternatively finalization can be performed by obtaining the streaming ASN1 BIO directly using BIO_new_CMS
X509_CRL_get0_lastUpdate and X509_CRL_get0_nextUpdate return the lastUpdate and nextUpdate fields of X509_CRL_get0_lastUpdate_APIParam_1 X509_CRL_get0_nextUpdate_APIParam_1
X509_get0_notBefore and X509_get0_notAfter return the notBefore and notAfter fields of certificate X509_get0_notBefore_APIParam_1 X509_get0_notAfter_APIParam_1 respectively
The EVP_PKEY_sign function performs a public key signing operation using EVP_PKEY_sign_APIParam_1
The function CMS_sign is a basic CMS signing function whose output will be suitable for many purposes
Depending on the command SSL_ctrl_APIParam_2 SSL_CTX_ctrl_APIParam_2 the arguments SSL_ctrl_APIParam_3 SSL_CTX_ctrl_APIParam_3 , SSL_ctrl_APIParam_4 SSL_CTX_ctrl_APIParam_4 , or fp are evaluated
X509_CRL_set1_lastUpdate and X509_CRL_set1_nextUpdate set the lastUpdate and nextUpdate fields of X509_CRL_get0_nextUpdate_APIParam_1 X509_CRL_get0_lastUpdate_APIParam_1 to X509_CRL_set1_lastUpdate_APIParam_2 X509_CRL_set1_nextUpdate_APIParam_2
The EVP_PKEY_sign_init function initializes a public key algorithm context using key pkey for a signing operation
The SSL __ ctrl family of functions is used to manipulate settings of the SSL_CTX and SSL objects
The data to be signed is specified using the tbs and tbslen parameters
one or more signers can be added using the function CMS_sign_add1_signer , non default digests can be used and custom attributes added
it will be restored after the callback has finished and the session id will be padded with 0x00
BIO_seek sets the file pointer to position ofs from start of file using lseek
As at any time a re-negotiation is possible , a call to SSL_write can also cause read operations !
a signer will use the default digest for the signing algorithm
Any whitespace, newline or carriage return characters are ignored
This gives the number of blocks of data that will be processed
Only full blocks of data will be immediately processed and output by this function
BIO_set_fd sets the file descriptor of BIO b to BIO_new_fd_APIParam_1 and the close flag to c
Additionally a NUL terminator character will be added
The data being signed is included in the CMS_ContentInfo structure
The length of the data generated without the NUL terminator is returned from the function
For every 3 bytes of input provided 4 bytes of output data will be produced
EVP_EncodeUpdate encode inl bytes of data found in the buffer pointed to by EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3
SSL_CTX_get_info_callback returns a pointer to the currently set information callback function for ctx
In the event of an error EVP_EncodeUpdate will set EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 to 0
EVP_DecodeUpdate decodes inl characters of data found in the buffer pointed to by EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3
This function will attempt to decode as much data as possible in 4 byte chunks
the callback may only fill part of the possible length and leave id_len untouched
The location SSL_has_matching_session_id_APIParam_2 is filled with 0x00 before the callback is called , so
EVP_EncodeBlock encodes a full block of input data in EVP_EncodeBlock_APIParam_2 and of length dlen and stores it in EVP_EncodeBlock_APIParam_1
Any remainder is held in the EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 object and will be processed by a subsequent call to EVP_EncodeUpdate or EVP_EncodeFinal
The output is stored in the buffer EVP_DecodeUpdate_APIParam_2 EVP_DecodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_DecodeUpdate_APIParam_3 EVP_DecodeUpdate_APIParam_3
a partial CMS_ContentInfo structure is output to which additional signers and capabilities can be added before finalization
The output is stored in the buffer EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeFinal_APIParam_2 EVP_EncodeUpdate_APIParam_2 EVP_EncodeUpdate_APIParam_2 and the number of bytes output is stored in EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeFinal_APIParam_3 EVP_EncodeUpdate_APIParam_3 EVP_EncodeUpdate_APIParam_3
the callback setting currently valid for ctx is used
SSL_get_info_callback returns a pointer to the currently set information callback function for ssl
If the underlying BIO is blocking, SSL_write will only return, once the write operation has been finished or an error occurred, except when a renegotiation take place, in which case a SSL_ERROR_WANT_READ may occur
The where argument specifies information about where the callback function was called
The ret information can be evaluated using the SSL_alert_type_string family of functions
OBJ_get0_data returns a pointer to the content octets of OBJ_length_APIParam_1
The certificate returned is checked
RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate the signature
RSA_sign_APIParam_1 RSA_verify_APIParam_1 denotes the message digest algorithm that was used to generate RSA_sign_APIParam_2 RSA_verify_APIParam_2
Operations in a binary field are performed relative to an irreducible polynomial
last verify_callback set specifically for this ssl remains
The handshake will be continued regardless of the verification result
the server sends a client certificate request to the client
All such curves with OpenSSL use a trinomial or a pentanomial for this parameter
If any illegal base 64 characters are encountered or if the base 64 padding character "=" is encountered in the middle of the data the function returns -1 to indicate an error
A return value of 0 additionally indicates that the last input data characters processed included the base 64 padding character "=" and no more non-padding character data is expected to be processed
RSA_verify verifies that the signature sigbuf of size siglen matches a given message digest RSA_verify_APIParam_2 of size RSA_verify_APIParam_3
SSL_set_verify sets the verification flags for ssl to be SSL_set_verify_APIParam_2 and specifies the verify_callback function to be used
SSL_CTX_set_verify sets the verification flags for SSL_CTX_set_verify_APIParam_1 to be SSL_CTX_set_verify_APIParam_2 and specifies the verify_callback function to be used
Note that PKCS # 1 adds meta-data , placing limits on the size of the key that can be used
the server certificate is verified
RSA_sign signs the message digest RSA_sign_APIParam_2 of size RSA_sign_APIParam_3 using the private key rsa as specified in PKCS # 1 v2 .0
the verification process is continued
Any partial chunk of unprocessed data that remains at the end will be held in the EVP_DecodeUpdate_APIParam_1 EVP_DecodeUpdate_APIParam_1 object and processed by a subsequent call to EVP_DecodeUpdate
These functions decode and encode an X509_SIG structure which is equivalent to the DigestInfo structure defined in PKCS # 1 and PKCS # 7
At each level signatures and issuer attributes are checked
The return value of verify_callback controls the strategy of the further verification process
only request a client certificate on the initial TLS/SSL handshake
SSL_CB_ALERT is set
the verification process is immediately stopped with "verification failed" state
and ret specifies the alert information
the server will not send a client certificate request to the client , so the client will not send a certificate
if the client did not return a certificate, the TLS/SSL handshake is immediately terminated with a "handshake failure" alert
The setting for ctx is overridden from the setting for a specific SSL object
verify_callback_APIParam_2 is a pointer to the complete context used for the certificate chain verification
the TLS/SSL handshake will not be terminated with respect to verification failures and the connection will be established
an SSL signature is created
The flags begin with BN_FLG _
By applying X509_CTX_store _ functions verify_callback can locate the certificate in question and perform additional steps
The certificate chain is checked starting with the deepest nesting level and worked upward to the peer 's certificate
SSL_set_info_callback sets the callback function , that
the NULL pointer can be used for verify_callback
To calculate the required size of the output buffer add together the value of inl with the amount of unprocessed data held in EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeFinal_APIParam_1 EVP_EncodeUpdate_APIParam_1 EVP_EncodeUpdate_APIParam_1 and divide the result by 48
flags is a bit field of flags which are defined in openssl/bn
cert_cb is the application defined callback
The implementations are defined in bn_lcl
SSL_CTX_set_info_callback sets the callback function , that
The integer value is stored in bn_dump_APIParam_1 bn_div_words_APIParam_3 , a malloced array of words , least significant word first
This structure contains BN_CTX_NUM bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1s , see BN_CTX_start
bn_check_top verifies that - > top > = 0 & & - > top < = - > dmax
verify_callback_APIParam_1 indicates , whether the verification of the certificate in question was passed or not
the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are not to be used by applications
the server will send a certificate which will be checked
the internal functions used by the OpenSSL bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 implementation are described here to facilitate debugging and extending the library
SSL_VERIFY_PEER is ignored
The calling process can however retrieve the error code of the last verification error using SSL_get_verify_result or by maintaining its own error storage managed by verify_callback
The verify_callback function is used to control the behaviour
the default callback will be used
a verification failure alert is sent to the peer and the TLS/SSL handshake is terminated
the TLS/SSL handshake is immediately terminated with an alert message containing the reason for the verification failure
no callback function is used
the default callback for the underlying SSL_CTX_set_verify_depth_APIParam_1 SSL_CTX_set_verify_APIParam_1 is used , that was valid at the time ssl was created with SSL_new
the block is encoded as a final block of data and the output is padded such that it is always divisible by 4
the signature is written to sig and the amount of data written to siglen
Its return value is identical to verify_callback_APIParam_1, so that any verification failure will lead to a termination of the TLS/SSL handshake with an alert message, if SSL_VERIFY_PEER is set
A negative return value will suspend the handshake and the handshake function will return immediately
CMS_sign_receipt creates and returns a CMS signed receipt structure
Normal server sanity checks are performed on any certificates set by the callback
SSL_load_client_CA_file reads certificates from file and returns a STACK_OF with the subject names found
SSL_CTX_set_cert_cb and SSL_set_cert_cb sets the cert_cb callback , arg value is pointer which is passed to the application callback
The callback can inspect the passed ssl structure and set or clear any appropriate certificates
si is the CMS_SignerInfo structure containing the signed receipt request
The certificate callback functionality supercedes the functionality provided by the old client certificate callback interface
The implementations use the following macros which , depending on the architecture , may use `` long long '' C operations or inline assembler
the BN_CTX structure is used
BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 is a pre-allocated BN_is_prime_fasttest_ex_APIParam_3 BN_is_prime_ex_APIParam_3 , or NULL
The EVP_PKEY_keygen_init function initializes a public key algorithm context using key pkey for a key genration operation
Both BN_is_prime_ex and BN_is_prime_fasttest_ex perform a Miller-Rabin probabilistic primality test with BN_is_prime_ex_APIParam_2 BN_is_prime_fasttest_ex_APIParam_2 iterations
It was empirically found that timings of references to primary memory are subject to irregular , apparently non-deterministic variations
This is used by bn_set_low and bn_set_high to make bn_set_low_APIParam_1 bn_set_high_APIParam_1 a read-only bn_set_max_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 that contains the bn_set_low_APIParam_3 bn_set_high_APIParam_3 low or high words of bn_set_max_APIParam_1 bn_set_low_APIParam_2 bn_set_high_APIParam_2
The length of SSL_CTX_set_alpn_protos_APIParam_2 SSL_set_alpn_protos_APIParam_2 is specified in protos_len
cb is the application defined callback
bn_check_top , bn_print , bn_dump and bn_set_max are defined as empty macros
Similarly BN_is_prime and BN_is_prime_fasttest are deprecated and can be compared to BN_is_prime_ex and BN_is_prime_fasttest_ex respectively
The arg value is a pointer which is passed to the application callback
The arg parameter is the pointer set via SSL_CTX_set_alpn_select_cb
It implements the standard protocol selection
Various routines in this library require the use of temporary bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 variables
The bn_fix_top macro reduces a - > top to point to the most significant non-zero word plus one
No match was found
SSL_get0_alpn_selected returns a pointer to the selected protocol in SSL_get0_alpn_selected_APIParam_2 with length len
SSL_select_next_proto is a helper function used to select protocols
The SSL_select_next_proto_APIParam_0 SSL_CTX_set_alpn_protos_APIParam_0 SSL_set_alpn_protos_APIParam_0 , inlen parameters are a vector in protocol-list format
SSL_CTX_set_alpn_protos and SSL_set_alpn_protos are used by the client to set the list of protocols available to be negotiated
Otherwise , the seed is used to generate them
i is the loop counter
SSL_CTX_set_alpn_select_cb sets the application callback cb used by a server to select which protocol to use for the incoming connection
an optimized implementation
BN_is_prime_fasttest_ex , primes
ALPN is not used
SSL_CTX_clear_chain_certs clears any existing chain associated with the current certificate of SSL_CTX_clear_chain_certs_APIParam_1
The macros BN_set_flags and BN_get_flags exist to enable or fetch flag bn_mul_low_normal_APIParam_4 bn_dump_APIParam_2 bn_wexpand_APIParam_2 bn_cmp_words_APIParam_3 bn_expand2_APIParam_2 bn_sqr_normal_APIParam_3 bn_set_low_APIParam_3 bn_set_high_APIParam_3 from bn_wexpand_APIParam_1 bn_fix_top_APIParam_1 bn_print_APIParam_1 bn_check_top_APIParam_1 bn_set_max_APIParam_1 bn_expand_APIParam_1 bn_expand2_APIParam_1 bn_set_low_APIParam_1 bn_set_high_APIParam_1 structure bn_mul_normal_APIParam_4 bn_mul_low_normal_APIParam_3 bn_cmp_words_APIParam_2 bn_mul_recursive_APIParam_3 bn_mul_comba4_APIParam_3 bn_mul_comba8_APIParam_3 bn_mul_high_APIParam_3 bn_mul_low_recursive_APIParam_3 bn_mul_part_recursive_APIParam_3
it records duration of periods
bn_mul_comba8 is used
the prime will fulfill the condition p % BN_generate_prime_ex_APIParam_4 == rem
The subroutine performs at most OPENSSL_instrument_bus2_APIParam_3 probes in attempt to fill the vector -LSB- num -RSB- , with OPENSSL_instrument_bus2_APIParam_3 value of 0 meaning `` as many as it takes . ''
The first item in the server, server_len list that matches an item in the client, client_len list is selected, and returned in SSL_select_next_proto_APIParam_1, SSL_select_next_proto_APIParam_2
If the negotiated ciphersuite is anonymous ,2 is returned and the current certificate is unchanged
Applications can issue non fatal warnings when checking chains by setting the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS and checking the return value
SSL_CTX_set_current_cert changes the current certificate to a value based on the SSL_CTX_set_current_cert_APIParam_2 argument
The CMS_set1_eContentType_APIParam_2 values returned can be converted to an integer NID value using OBJ_obj2nid
It is an error to return a value greater than max_psk_len
If the underlying BIO is blocking, SSL_shutdown will only return once the handshake step has been finished or an error occurred
CMS_encrypt creates and returns a CMS EnvelopedData structure
Note that a zero length context is treated differently to no context at all, and will result in different keying material being returned
ASN1_STRING_data returns an internal pointer to the data of ASN1_STRING_data_APIParam_1
ASN1_STRING_type returns the type of ASN1_STRING_type_APIParam_1, using standard constants such as V_ASN1_OCTET_STRING
a partial CMS_ContentInfo structure is returned to which additional recipients and attributes can be added before finalization
DES_ecb_encrypt does not return a value
If the CMS_STREAM flag is set ,a partial CMS_ContentInfo structure is returned suitable for streaming I/O
These two operations can be used to iterate over all certificates in an SSL_CTX_set_current_cert_APIParam_1 structure
CMS_set1_eContentType sets the embedded content type of a CMS_ContentInfo structure
The callback is set using functions SSL_CTX_set_psk_server_callback or SSL_set_psk_server_callback
Provision of a context is optional
Return value is the length of psk in bytes
This is the last certificate loaded or selected on the corresponding SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 structure
PSK identity was found and the server callback has provided the PSK successfully in parameter psk
For a given SSL connection SSL_export_keying_material_APIParam_1 , SSL_export_keying_material_APIParam_3 bytes of data will be written to SSL_export_keying_material_APIParam_2
SSL_CTX_set0_chain and SSL_CTX_set1_chain set the certificate chain associated with the current certificate of SSL_CTX_select_current_cert_APIParam_1 SSL_CTX_build_cert_chain_APIParam_1 SSL_CTX_add0_chain_cert_APIParam_1 SSL_CTX_set_current_cert_APIParam_1 SSL_CTX_add1_chain_cert_APIParam_1 SSL_CTX_clear_chain_certs_APIParam_1 to sk
an application can add any set of certificates using SSL_CTX_use_certificate_chain_file call SSL_CTX_build_cert_chain with the option SSL_BUILD_CHAIN_FLAG_CHECK to check and reorder them
Alternatively labels beginning with `` EXPERIMENTAL '' are permitted by the standard to be used without registration
pconf could be NULL
the serverinfo extension will be loaded into the last certificate installed
the accept can be freed using BIO_free
once to compute the signature in CMS_sign and once to output the S/MIME message
the loaded serverinfo extension data will be loaded for that certificate
the values of context and contextlen are ignored
MIME headers for type text/plain are added to the content , this only makes sense if CMS_DETACHED is also set
The callback function is given the connection in parameter SSL_set_psk_server_callback_APIParam_1 , NULL-terminated PSK identity sent by the client in parameter identity , and a buffer psk of length max_psk_len bytes where the pre-shared key is to be stored
The purpose of the callback function is to validate the received PSK identity and to fetch the pre-shared key used
the chain store or the verify store
SSL_CTX_build_cert_chain builds the certificate chain for SSL_CTX_build_cert_chain_APIParam_1 normally this uses
cleartext signing will be used , this option only makes sense for SignedData where CMS_DETACHED is also set when CMS_sign is called
There are two phases to the use of DES encryption
Input and output may overlap
The least significant bit in each byte is the parity bit
DES_ncbc_encrypt encrypts/decrypts using the cipher-block-chaining mode of DES
Almost all ASN1 types in OpenSSL are represented as an ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 structure
The SSL_CTX_build_cert_chain_APIParam_2 parameter can be set to SSL_BUILD_CHAIN_FLAG_UNTRUSTED to use existing chain certificates as untrusted CAs , SSL_BUILD_CHAIN_FLAG_NO_ROOT to omit the root CA from the built chain , SSL_BUILD_CHAIN_FLAG_CHECK to use all existing chain certificates only to build the chain , the flag SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR ignores any errors
The data being encrypted is included in the CMS_ContentInfo structure
the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 is decrypted into the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2
This mode is used by SSL
DES_xcbc_encrypt is RSA 's DESX mode of DES
DES_ofb_encrypt encrypts using output feedback mode
DES_ecb3_encrypt encrypts/decrypts the DES_ecb3_encrypt_APIParam_1 block by using three-key Triple-DES encryption in ECB mode
it is used to speed the encryption process
It uses inw and outw to ` whiten ' the encryption
DES_ede3_cbc_encrypt implements outer triple CBC DES encryption with three keys
It returns a 4 byte checksum from the input bytes
These functions are available for compatibility
This form of Triple-DES is used by the RSAREF library
The macro DES_ecb2_encrypt is provided to perform two-key Triple-DES encryption by using ks1 for the final encryption
DES_enc_write writes DES_enc_write_APIParam_3 bytes to file descriptor DES_enc_write_APIParam_1 from buffer DES_enc_write_APIParam_2
The DES_ede2_cbc_encrypt macro implements two-key Triple-DES by reusing ks1 for the final encryption
inw and outw are secret and are as such , part of the key
This involves encrypting the input with ks1 , decrypting with the key schedule ks2 , and encrypting with ks3
This means that each DES operation inside the CBC mode is an C = E
This method takes an array of characters as input and outputs and array of characters
DES_ecb_encrypt is the basic DES encryption routine that encrypts or decrypts a single 8-byte DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 in electronic code book mode
Other than the use of DER as opposed to PEM these functions are identical to the corresponding PEM function as described in the pem manual page
ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 is also used for some CHOICE types which consist entirely of primitive string types such as DirectoryString and Time
The data is encrypted via pcbc_encrypt using DES_enc_read_APIParam_4 for the key and iv as a starting vector
DES_enc_read is used to read DES_enc_read_APIParam_3 DES_enc_write_APIParam_3 bytes from file descriptor DES_enc_read_APIParam_1 DES_enc_write_APIParam_1 into buffer DES_enc_read_APIParam_2 DES_enc_write_APIParam_2
It always transforms the input data , pointed to by DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 , into the output data , pointed to by the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 argument
RAND_set_default_method makes RAND_set_rand_method_APIParam_1 the method for PRNG use
cms is the CMS_ContentInfo structure to verify
CMS_verify verifies a CMS SignedData structure
DES_rw_mode is used to specify the encryption mode to use with DES_enc_read and DES_end_write
Other types such as ASN1_OCTET_STRING are simply typedefed to ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 and the functions call the ASN1_STRING_data_APIParam_1 ASN1_STRING_set_APIParam_1 ASN1_STRING_type_APIParam_1 ASN1_STRING_dup_APIParam_1 ASN1_STRING_length_APIParam_1 ASN1_STRING_cmp_APIParam_1 ASN1_STRING_to_UTF8_APIParam_2 equivalents
store is a trusted certificate store used for chain verification
By modifying the method , alternative implementations such as hardware RNGs may be used
BIO_gets, if its size parameter is large enough finishes the digest calculation and returns the digest value
certs is a set of certificates in which to search for the signing certificate
As of version 0.9.7 , RAND_METHOD implementations are grouped together with other algorithmic APIs in ENGINE modules
One application of CMS_NOINTERN is to only accept messages signed by a small number of certificates
An example of this is demonstrated here
CMS_verify_receipt verifies a CMS signed receipt
the 8 bytes generated by each pass are written into DES_quad_cksum_APIParam_2
lh _ <type> _ free frees the LHASH_OF -LRB- <type> structure lh_retrieve_APIParam_1
SSL_free also calls the freeing procedures for indirectly affected items
These provide per-variable casts before calling the type-specific callbacks written by the application author
rcms is the signed receipt to verify
The hash callback takes a pointer to a table entry as its argument and returns an unsigned long hash value for its key field
store is a trusted certificate store
ocms is the original SignedData structure containing the receipt request
DES_pcbc_encrypt is used
Allocated hash table entries will not be freed
The certificates available via SSL_CTX_load_verify_locations_APIParam_2 and CApath are trusted
the buffering BIO , the read and write BIOs , cipher lists specially created for this SSL_free_APIParam_1 SSL_free_APIParam_1 , the SSL_SESSION
The callback is inherited by all SSL objects newly created from SSL_CTX_set_tmp_rsa_callback_APIParam_1 with < SSL_new | SSL_new >
indata is the detached content
One technique sometimes used with blocking sockets is to use a system call , poll or equivalent to determine and call read to read the data
the DES_ecb_encrypt_APIParam_1 DES_ecb_encrypt_APIParam_1 is encrypted in to the DES_ecb_encrypt_APIParam_2 DES_ecb_encrypt_APIParam_2 using the key_schedule specified by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument , previously set via DES_set_key
the last block is copied to a temporary area and zero filled
The is_export flag is set
that will override any RAND defaults set using the RAND API
the callback function for SSL_CTX_set_tmp_rsa_callback_APIParam_1 to be used
SSL_CTX_set_tmp_rsa_callback sets
it is equivalent to just encryption using ECB mode
This routine greatly reduces the chances of brute force breaking of DES and has the advantage of and ks1 as the key
the routine cipher-block-chain encrypts the cleartext data pointed to by the DES_ncbc_encrypt_APIParam_1 argument into the ciphertext pointed to by the DES_ncbc_encrypt_APIParam_2 argument , using the key schedule provided by the DES_set_key_APIParam_2 DES_key_sched_APIParam_2 argument , and initialization vector provided by the ivec argument
The files each contain one CA certificate
client_cert_cb is the application defined callback
SSL_CTX_load_verify_locations specifies the locations for SSL_CTX_load_verify_locations_APIParam_1 , at which CA certificates for verification purposes are located
Sessions are generated within a certain context
MD2_Update can be called repeatedly with chunks of the message to be hashed
The certificate will be installed into ssl , see the NOTES and BUGS sections
The next call to the handshake function will again lead to the call of client_cert_cb
The error is logged to the error stack
If successful a pointer to the d2i_X509_APIParam_1 structure is returned
The search is performed in the ordering of the extension number , regardless of other properties of the certificates
If d2i_X509_APIParam_1 is not NULL, the returned structure is written to d2i_X509_APIParam_1
d2i_X509 attempts to decode d2i_X509_APIParam_3 bytes at d2i_X509_APIParam_2
An example of this is illustrated here where the callback is used to cleanup resources for items in the hash table prior to the hashtable itself being deallocated
SSL_CTX_set_session_id_context sets the context SSL_CTX_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_CTX_set_session_id_context_APIParam_1 object
SSL_set_session_id_context sets the context SSL_set_session_id_context_APIParam_2 of length sid_ctx_len within which a session can be reused for the SSL_set_session_id_context_APIParam_1 object
The length sid_ctx_len of the session id context SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 exceeded the maximum allowed length of SSL_MAX_SSL_SESSION_ID_LENGTH
The functions can also understand BER forms
So i2d_X509 converts from internal to `` DER ''
See the WARNINGS section for some common errors
the next certificate will be tried
The TLS/SSL I/O operation completed
The encoded data is in binary form and may contain embedded zeroes
The TLS/SSL connection has been closed
it points to a directory containing CA certificates in PEM format
Another trap to avoid is misuse of the xp argument to d2i_X509
lh _ <type> _ new creates a new LHASH_OF -LRB- <type> structure to store arbitrary data entries , and provides the ` hash ' and ` compare ' callbacks to be used in organising the table 's entries
The OpenSSL error queue may contain more information on the error
For socket I/O on Unix systems , consult errno for details
Errors are silently ignored
Files of type SSL_FILETYPE_PEM can contain more than one item
Also buf will no longer contain the pointer allocated by OPENSSL_malloc and the subsequent call to OPENSSL_free may well crash
These values are defined in the obj_mac.h header file
Multiple calls have no effect
It is however much better than nothing
SSL_read or SSL_peek may want to write data and SSL_write may want to read data
the verification process will be performed
The SSL_CTX_set_session_id_context_APIParam_2 SSL_set_session_id_context_APIParam_2 can be any kind of binary data with a given length , it is possible to use eg the name of the application and/or the hostname and/or service name
signcert is the certificate to sign with , pkey is the corresponsding private key
The certificates in CApath are only looked up
SSL_CTX_set_client_cert_cb sets the client_cert_cb callback , that
is made to reuse it
For socket BIOs was used , select or poll on the underlying socket can be used to find out
the DECLARE_LHASH_HASH_FN and IMPLEMENT_LHASH_COMP_FN macros can be used to create callback wrappers of the prototypes required by lh _ <type> _ new
This is mainly
SSL_read , SSL_peek , and SSL_write will handle any pending handshakes
OPENSSL_config configures OpenSSL using the standard openssl.cnf and reads from the application section OPENSSL_config_APIParam_1
certs is an optional additional set of certificates to include in the PKCS # 7 structure
The OPENSSL_config function is designed to be a very simple `` call it and forget it '' function
OCSP_resp_find_status searches OCSP_resp_find_status_APIParam_1 for an OCSP response for OCSP_resp_find_status_APIParam_2
The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server
OCSP_resp_get0_signer attempts to retrieve the certificate that directly signed OCSP_resp_get0_signer_APIParam_1
OCSP_resp_get0_id gets the responder id of OCSP_resp_get0_id_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get1_id_APIParam_1
Otherwise the function continues by validating the signer certificate
OCSP_single_get0_status extracts the fields of OCSP_single_get0_status_APIParam_1 in OCSP_single_get0_status_APIParam_2 , revtime , OCSP_check_validity_APIParam_1 and nextupd
all possible recipients are tried
An OCSP response for a certificate contains thisUpdate and nextUpdate fields
OCSP_resp_get0_produced_at extracts the producedAt field from the single response OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1
EVP_CIPHER_param_to_asn1_APIName sets the AlgorithmIdentifier `` parameter '' based on the passed cipher
The function first tries to find the signer certificate of the response in <certs>
The BIO_CLOSE flag is set on the returned BIO
To account for clock skew the maxsec field can be set to non-zero in OCSP_check_validity
The list of protocols available can be further limited using the SSL_OP_NO_SSLv2 , SSL_OP_NO_SSLv3 , SSL_OP_NO_TLSv1 , SSL_OP_NO_TLSv1_1 and SSL_OP_NO_TLSv1_2 options of the SSL_CTX_set_options or SSL_set_options functions
Otherwise it verifies that the signer certificate meets the OCSP issuer criteria including potential delegation
OCSP_resp_get1_id leaves ownership of pid and pname with the caller , who is responsible for freeing them
The same holds for output
The data being signed is included in the PKCS7 structure
a partial PKCS7 structure is output to which additional signers and capabilities can be added before finalization
In clients , , the effect is to also disable all subsequent protocol versions
DES_crypt_APIName is a faster replacement for the normal system crypt_APIName
OCSP_check_validity checks the validity of OCSP_check_validity_APIParam_1 and nextupd values which will be typically obtained from OCSP_resp_find_status or OCSP_single_get0_status
DES_cfb_encrypt_APIName and DES_ofb_encrypt_APIName operates on input of 8 bits
This emulates the normal non-thread safe semantics of crypt_APIName
This is used by the PEM routines to read `` TRUSTED CERTIFICATE '' objects
It takes OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 as the trusted store and certs as a set of untrusted intermediate certificates
d2i_X509_AUX_APIName is similar to d2i_X509_APIName but the input is expected to consist of an X509 certificate followed by auxiliary trust information
BIO_new_file_APIName creates a new file BIO with mode BIO_new_file_APIParam_2 the meaning of BIO_new_file_APIParam_2 is the same as the stdio function fopen_APIName
OCSP_basic_verify checks that the basic response message OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 is correctly signed and that the signer certificate can be validated
the responder may have included in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1
It also searches the certificates
ie at least part of an TLS/SSL record will be read or written
Next , the function checks the signature of OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1 OCSP_resp_get0_id_APIParam_1 OCSP_resp_count_APIParam_1 and fails on error
this is most useful in TLS/SSL applications where the amount of data read is usually meaningful rather than just a buffer size
the first 12 bits will come from the 1st input byte and the low half of the second input byte
What this means is that
To this end , all certificates in cert and in OCSP_resp_get0_signature_APIParam_1 OCSP_resp_get0_respdata_APIParam_1 OCSP_resp_get0_signer_APIParam_1 OCSP_resp_find_APIParam_1 OCSP_resp_get0_APIParam_1 OCSP_resp_find_status_APIParam_1 OCSP_resp_get0_tbs_sigalg_APIParam_1 OCSP_resp_get1_id_APIParam_1
additional certificates can be supplied in extra_certs
this function uses a separate `` private '' PRNG instance so that a compromise of the `` public '' PRNG instance will not affect the secrecy of these private values , as described in RAND_APIName and RAND_DRBG_APIName
