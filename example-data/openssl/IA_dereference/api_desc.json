{"function be available convenience window programmer": "RAND_screen", "be bignum , bn_is_one bn_is_word test if equal 0 , 1 , or w respectively": "BN_is_zero", "query entropy gather daemon egd socket path": "RAND_egd", "accept ssl wait client initiate handshake": "SSL_accept", "set read ssl ssl_ctx_set_read_ahead set whether -PRON- should read as many input byte as possible or": "SSL_set_read_ahead", "set bignum make static number dmax current size": "bn_set_max", "set unk macro set number bit use dsa paramet generation bit": "EVP_PKEY_CTX_set_dsa_paramgen_bits", "bn_ctx bignum bignum bignum raise p th power place result r r p": "BN_exp", "bio file create file bio wrapping stream": "BIO_new_fp", "ui ui_dup_input_string , ui_dup_verify_string , ui_dup_input_boolean , ui_dup_error_string be basically as ui_add counterpart , except make copy string": "UI_dup_info_string", "unk buf_strdup , , buf_memdup , buf_strlcpy , buf_strlcat buf_strnlen be equivalent standard c library function": "BUF_strndup", "rsa long rsa , i2d_rsaprivatekey decode encode pkc # rsaprivatekey structure": "d2i_RSAPrivateKey", "write const evp_cipher evp_pkey bio pem_write_pkcs8privatekey write private key evp_pkey structure pkc # encryptedprivatekeyinfo format use pkc # v2 password base encryption algorithm": "PEM_write_bio_PKCS8PrivateKey", "set long dh ssl_ctx set dh parameter be use be dh": "SSL_CTX_set_tmp_dh", "bio bio cms_contentinfo finalise structure cms": "CMS_final", "const bignum file bn_print write hexadecimal encoding , lead negative number , bio or file fp": "BN_print_fp", "set evp_pkey allow modify evp_pkey different set algorithm than default": "EVP_PKEY_set_alias_type", "const evp_pkey return type pkey": "EVP_PKEY_base_id", "engine const evp_pkey return reference engine handling pkey": "EVP_PKEY_get0_engine", "unsigned long rc4_key encrypt or decrypt len byte datum indata use key place result outdata": "RC4", "x509_verify_param ssl ssl_ctx_get0_param retrieve internal pointer verification parameter ctx or ssl respectively": "SSL_get0_param", "const unk evp_md_ctx hash cnt byte datum d into verification context ctx": "EVP_VerifyUpdate", "unsigned long x509_name file be identical x509_name_print_ex except output be write file pointer fp": "X509_NAME_print_ex_fp", "const bignum convert absolute value into big_endian form store": "BN_bn2bin", "unk check validity thisupd nextupd value which be typically obtain ocsp_resp_find_status or ocsp_single_get0_status": "OCSP_check_validity", "dh evp_pkey evp_pkey_get1_rsa , evp_pkey_get1_dsa , evp_pkey_get1_ec_key return reference key pkey or null if key be correct type": "EVP_PKEY_get1_DH", "add x509 ssl_ctx add ca name extract cacert list ca send client when request client certificate ctx": "SSL_CTX_add_client_CA", "unk initialise ctx start encode operation": "EVP_EncodeInit", "evp_cipher_ctx evp_encryptfinal , evp_decryptfinal be identical evp_encryptfinal_ex , evp_decryptfinal_ex evp_cipherfinal_ex": "EVP_CipherFinal", "get unk long err_get_lib , err_get_reason be macro": "ERR_GET_FUNC", "ssl return string indicate current read state ssl object ssl": "SSL_rstate_string_long", "get x509 const ssl function retrieve certificate key data ssl object": "SSL_get_certificate", "evp_pkey cms_recipientinfo associate private key pkey cms_recipientinfo structure ri , which must be type cms_recipinfo_tran": "CMS_RecipientInfo_set0_pkey", "unk asn1_time check syntax asn1_time structure s": "ASN1_TIME_check", "set verify ssl set maximum depth certificate chain verification shall be allow ssl": "SSL_set_verify_depth", "bio_method return cipher bio method": "BIO_f_cipher", "set ssl_ctx set callback function ctx be use when rsa key be require tmp_rsa_callback": "SSL_CTX_set_tmp_rsa_callback", "const evp_md const evp_md_ctx return evp_md structure correspond pass evp_md_ctx": "EVP_MD_CTX_md", "unk have deprecate": "RAND_pseudo_bytes", "obj_nid2obj , obj_nid2sn convert nid n asn1_object structure , long name short name respectively , or null if error occur": "OBJ_nid2ln", "unk connect renegotiate long ssl_ctx return number start renegotiation client mode": "SSL_CTX_sess_connect_renegotiate", "set unk before des key can be use , must be convert into architecture dependent des_key_schedule via des_set_key_checked or function": "DES_set_key_unchecked", "ssl_session const ssl be as ssl_get_session": "SSL_get0_session", "const unk const unk return signature bs": "OCSP_resp_get0_signature", "engine note accept boolean argument can relax semantic function if set non_zero only return failure if engine support give command name but fail while execute , if engine do support command name simply return success without do anything": "ENGINE_ctrl_cmd_string", "rc4_key set up rc4_key key use len byte long key datum": "RC4_set_key", "set x509_name_entry set field value ne string type type value determine by byte len": "X509_NAME_ENTRY_set_data", "const bignum bignum bignum bignum multiplie by b find non_negative remainder respective modulus m mod m": "BN_mod_mul", "const asn1_time x509 x509_set1_notbefore set notbefore notafter field x tm": "X509_set1_notAfter", "get unk long err_get_lib , err_get_func be macro": "ERR_GET_REASON", "bio typically reset bio initial state , case file related bios example rewind file pointer start file": "BIO_reset", "bn_ulong bignum subtract w a w": "BN_sub_word", "unk cms_signerinfo function add sign receipt request rr signerinfo structure si": "CMS_add1_ReceiptRequest", "get long function be initially call register application specific datum": "RSA_get_ex_new_index", "set evp_md bio set message digest bio b md : must be call initialize digest bio before datum be pass through": "BIO_set_md", "add x509 ssl add ca name extract cacert list ca send client when request client certificate choose ssl , override set valid ssl ssl_ctx object": "SSL_add_client_CA", "md4_ctx , md4_update , md4_final , md5_init , md5_update , md5_final be analogous use md4_ctx md5_ctx structure": "MD4_Init", "bf_key set up bf_key key use len byte long key datum": "BF_set_key", "asn1_string return allocate asn1_string structure type type": "ASN1_STRING_type_new", "get unk ssl return servername type or # if no servername be present": "SSL_get_servername_type", "get retry bio bio determine precise reason special condition , return bio cause condition if reason be null contain reason code": "BIO_get_retry_BIO", "generate dh perform first step diffie_hellman key exchange by generate private public dh value": "DH_generate_key", "get const ssl_ctx return quiet shutdown setting ctx": "SSL_CTX_get_quiet_shutdown", "bignum , bn_one bn_set_word set value 0 , # w respectively": "BN_zero", "const asn1_object const asn1_object compare b": "OBJ_cmp", "hmac_ctx initialize or reuse hmac_ctx structure hash function evp_md key key": "HMAC_Init_ex", "encrypt des_ede3_ofb64_encrypt be as des_ofb64_encrypt , use triple_de": "DES_ede2_ofb64_encrypt", "engine evp_pkey set engine handling pkey engine": "EVP_PKEY_set1_engine", "obj_obj2nid , , obj_sn2nid return correspond nid object o , long name ln or short name sn respectively or nid_undef if error occur": "OBJ_ln2nid", "set unk macro set rsa key length rsa key genration bit": "EVP_PKEY_CTX_set_rsa_rsa_keygen_bits", "size_t compute sha_1 message digest n byte d place md which must have space sha_digest_length # byte output": "SHA1", "assign rsa evp_pkey , evp_pkey_assign_dsa , evp_pkey_assign_dh evp_pkey_assign_ec_key set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_RSA", "set ssl_ctx be use store application datum arg idx into ctx object": "SSL_CTX_set_ex_data", "encrypt implement outer triple cbc des encryption three key": "DES_ede3_cbc_encrypt", "const unk get responder identifi bs": "OCSP_resp_get0_id", "set ssl set list cipher only ssl": "SSL_set_cipher_list", "assign dsa evp_pkey evp_pkey_assign_rsa , , evp_pkey_assign_dh , evp_pkey_assign_ec_key , evp_pkey_assign_poly1305 evp_pkey_assign_siphash set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_DSA", "evp_cipher_ctx encrypt inl byte buffer write encrypt version out": "EVP_EncryptUpdate", "x509 cms_signerinfo compare certificate cert against signer identifi si": "CMS_SignerInfo_cert_cmp", "long ssl_ctx cause run through session cache ctx remove session expire time tm": "SSL_CTX_flush_sessions", "asn1_object unk asn1_object return copy o": "OBJ_dup", "miss long ssl_ctx return number session propose by client be find internal session cache server mode": "SSL_CTX_sess_misses", "get const ssl return result code precede call ssl_connect , ssl_accept , ssl_do_handshake , ssl_read , ssl_peek , or ssl_write ssl": "SSL_get_error", "set check unk before des key can be use , must be convert into architecture dependent des_key_schedule via or des_set_key_unchecked function": "DES_set_key_checked", "add x509_name , x509_name_add_entry_by_obj x509_name_add_entry_by_nid add field whose name be define by string field , object obj or nid nid respectively": "X509_NAME_add_entry_by_txt", "get buf_mem bio place underlie buf_mem structure pp": "BIO_get_mem_ptr", "set x509_verify_param set maximum verification depth depth": "X509_VERIFY_PARAM_set_depth", "bn_ctx function must call first": "BN_CTX_start", "unk long ssl_ctx return number successfully reuse session": "SSL_CTX_sess_hits", "get asn1_object x509_name_entry retrieve field name ne asn1_object structure": "X509_NAME_ENTRY_get_object", "get const ssl be use retrieve information idx ssl": "SSL_get_ex_data", "unk initialise ctx start decode operation": "EVP_DecodeInit", "bio normally write out internally buffer datum , case be use signal eof no more datum be write": "BIO_flush", "set ssl_ctx ssl_set_alpn_protos be use by client set list protocol available be negotiate": "SSL_CTX_set_alpn_protos", "set x509_store ssl_ctx certificate verification storage ctx store": "SSL_CTX_set_cert_store", "unsigned long return late error code thread error queue without modify": "ERR_peek_last_error", "x509_store ssl_ctx ssl_ctx_set1_chain_cert_store set certificate store use certificate chain building st": "SSL_CTX_set0_chain_cert_store", "unk evp_cipher_ctx set cipher parameter base asn1 algorithmidentifier parameter": "EVP_CIPHER_asn1_to_param", "add ssl_session ssl_ctx ssl_remove_session be synonyms ssl_ctx counterpart": "SSL_add_session", "set ssl_ctx ssl_ctx_set_msg_callback specify default setting be copy ssl object by ssl_new 3": "SSL_CTX_set_msg_callback_arg", "get asn1_object x509_name x509_name_get_text_by_nid , retrieve text first entry name which match nid or obj , if no such entry exist # be return": "X509_NAME_get_text_by_OBJ", "x509 unk attempt retrieve certificate directly sign bs": "OCSP_resp_get0_signer", "be bignum bn_is_zero , bn_is_one , bn_is_word be macro": "BN_is_odd", "derive unk function initialize public key algorithm context use key pkey share secret derivation": "EVP_PKEY_derive_init", "quad unk des_cblock be kerbero v4 function": "DES_quad_cksum", "add add digest algorithm table": "OpenSSL_add_all_digests", "set ssl_ctx set context sid_ctx length sid_ctx_len within which session can be reuse ctx object": "SSL_CTX_set_session_id_context", "ssl return # letter string indicate current read state ssl object ssl": "SSL_rstate_string", "return type key correspond value type": "EVP_PKEY_type", "asn1_string return allocate asn1_string structure": "ASN1_STRING_new", "connect bio ssl_ctx create bio chain consist buffer bio , ssl bio connect bio": "BIO_new_buffer_ssl_connect", "ssl_ctx load first certificate store file into ctx": "SSL_CTX_use_certificate_file", "set ssl_session be use store application datum arg idx into session object": "SSL_SESSION_set_ex_data", "recover message digest flen byte long signature use signer public key rsa": "RSA_public_decrypt", "get unsigned long return early error code thread error queue remove entry": "ERR_get_error", "get share unk ssl create colon separate nul terminate list ssl_cipher name be available both client server": "SSL_get_shared_ciphers", "evp_cipher_ctx evp_decryptinit_ex , evp_decryptupdate be correspond decryption operation": "EVP_DecryptFinal_ex", "unk long ssl_ctx return number successfully retrieve session external session cache server mode": "SSL_CTX_sess_cb_hits", "const asn1_object convert asn1_object into textual representation": "OBJ_obj2txt", "bignum bignum bignum can be use perform efficient bn_mod_mul operation when operation be perform repeatedly modulus": "BN_mod_mul_reciprocal", "const bignum bn_mpi2bn convert bignum s format consist number length byte represent as 4_byte big_endian number , number big_endian format , where most significant bit signal negative number representation number msb set be prefix null byte": "BN_bn2mpi", "ripemd160_ctx place message digest md , which must have space ripemd160_digest_length # byte output , erase ripemd160_ctx": "RIPEMD160_Final", "be unk return # if pass key be weak key , # if be ok": "DES_is_weak_key", "x509 ssl_ctx load certificate x into ctx , ssl_use_certificate load x into ssl": "SSL_CTX_use_certificate", "mdc2_ctx initialize mdc2_ctx structure": "MDC2_Init", "size_t t buf_strdup , buf_strndup , buf_memdup , , buf_strlcat buf_strnlen be equivalent standard c library function": "BUF_strlcpy", "size_t cms_recipientinfo compare identifier identifi idlen parameter against keyidentifi cms_recipientinfo structure ri , which must be type cms_recipinfo_kek": "CMS_RecipientInfo_kekri_id_cmp", "bn_ulong if bn_debug be define , bn_check_top , bn_print , bn_set_max be define as empty macro": "bn_dump", "evp_pkey unk function evp_pkey_paramgen_init be similar except parameter be generate": "EVP_PKEY_paramgen", "dh evp_pkey evp_pkey_set1_rsa , evp_pkey_set1_dsa , evp_pkey_set1_ec_key set key reference by pkey key": "EVP_PKEY_set1_DH", "hmac_ctx be alias hmac_ctx_cleanup include back compatibility 0 , be deprecate": "HMAC_cleanup", "remove cipher digest table": "EVP_cleanup", "bio bio remove bio b chain return next bio chain , or null if be no next bio": "BIO_pop", "return underlie type nid type": "EVP_PKEY_type", "ssl ssl_ctx create ssl structure which be need hold datum connection": "SSL_new", "set const unk ssl set method particular ssl object": "SSL_set_ssl_method", "set set mark current topmost error record if be one": "ERR_set_mark", "set unk unk work like des_set_key_checked if des_check_key flag be non_zero , otherwise like des_set_key_uncheck": "DES_set_key", "const evp_pkey bio function , evp_pkey_print_private evp_pkey_print_params print out public , private or paramet component key pkey respectively": "EVP_PKEY_print_public", "unk size_t bio bio_pending , bio_ctrl_pending , bio_wpending return number pende character bio read write buffer": "BIO_ctrl_wpending", "bn_ulong bignum multiplie w w": "BN_mul_word", "bignum bignum bn_bn2mpi convert bignum s format consist number length byte represent as 4_byte big_endian number , number big_endian format , where most significant bit signal negative number representation number msb set be prefix null byte": "BN_mpi2bn", "bio_method return null sink bio method": "BIO_s_null", "get asn1_string x509_name_entry retrieve field value ne asn1_string structure": "X509_NAME_ENTRY_get_data", "register available cipher digest": "SSL_library_init", "const evp_md evp_md2 , evp_md5 , evp_sha , , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha1", "erase memory use by prng": "RAND_cleanup", "have semantic as rand_byte": "RAND_priv_bytes", "file lhash print out short summary state hash table": "lh_node_usage_stats", "unk long generate human_readable string represent error code e , place buf": "ERR_error_string", "get long ssl return option set ssl": "SSL_get_options", "const ssl_cipher return textual description cipher use into buffer buf length len provide": "SSL_CIPHER_description", "buf_mem free up already exist buffer": "BUF_MEM_free", "encrypt unk function initialize public key algorithm context use key pkey encryption operation": "EVP_PKEY_encrypt_init", "blind rsa turn blind off free memory use blind factor": "RSA_blinding_off", "get x509_name_entry x509_name retrieve x509_name_entry name correspond index loc": "X509_NAME_get_entry", "x509 cms_contentinfo cms_add1_cert add certificate cert cms": "CMS_add0_cert", "set accept ssl set ssl work server mode": "SSL_set_accept_state", "dsa long dsa i2d_dsapublickey decode encode dsa public key component structure": "d2i_DSAPublicKey", "bn_mont_ctx allocate initialize bn_mont_ctx structure": "BN_MONT_CTX_new", "get close bio return bios close flag": "BIO_get_close", "const evp_md const evp_cipher derive key iv various parameter": "EVP_BytesToKey", "bignum unk bignum bignum bignum compute inverse modulo n place result r n 1": "BN_mod_inverse", "get file bio retrieve fp file bio , be macro": "BIO_get_fp", "buf_mem allocate buffer zero size": "BUF_MEM_new", "set long ssl_ctx change current certificate value base op argument": "SSL_CTX_set_current_cert", "set verify ssl set verification flag ssl be mode specifie verify_callback function be use": "SSL_set_verify", "find unk unk search bs identifier return index first match entry after last or start beginning if last be #": "OCSP_resp_find", "ssl_conf_ctx function set command prefix cctx prefix": "SSL_CONF_CTX_set1_prefix", "get long ssl_ctx return mode set ctx": "SSL_CTX_get_mode", "generate ssl set callback function generate session id session ssl be cb": "SSL_set_generate_session_id", "s bio_method return file descriptor bio method": "BIO_s_fd", "load function configure openssl use file filename application name appname": "CONF_modules_load_file", "unk bio reset file related bio file position pointer ofs byte start file": "BIO_seek", "get long ssl_ctx return currently set maximum size ctx": "SSL_CTX_get_max_cert_list", "const bignum const bignum bignum subtract b place result r r a_b": "BN_sub", "bn_mont_ctx bignum bignum compute mont , i": "BN_to_montgomery", "decrypt bio bio x509 evp_pkey cms_contentinfo extract decrypt content cms envelopeddata structure": "CMS_decrypt", "verify recover unk function recover sign datum use ctx": "EVP_PKEY_verify_recover", "unk accept long ssl_ctx return number start handshake server mode": "SSL_CTX_sess_accept", "encode full block input datum f length dlen store t": "EVP_EncodeBlock", "const ec_key return maximum length der encode ecdsa signature create private ec key eckey": "ECDSA_size", "set const dsa_method dsa select meth perform operation use key rsa": "DSA_set_method", "const dh_method initially , default dh_method be openssl internal implementation , as return by": "DH_OpenSSL", "verify recover unk function initialize public key algorithm context use key pkey verify recover operation": "EVP_PKEY_verify_recover_init", "get x509_store_ctx return error code ctx , see error code section full description error code": "X509_STORE_CTX_get_error", "set bn_ctx const bignum unk store m recp set up compute m shift leave by bn_num_bit 1 make integer": "BN_RECP_CTX_set", "time_t const asn1_time compare asn1_time asn1_time time cmp_time": "X509_cmp_time", "get bind long long bio bio_set_bind_mode set retrieve current bind mode": "BIO_get_bind_mode", "if no engine api function be call application , then be no inherent memory leak worry about engine functionality , however if engine be load , even if be never register or use , be necessary function correspondingly cleanup before program exit , if caller wish avoid memory leak": "ENGINE_cleanup", "sign dsa_sig dsa compute digital signature len byte message digest dgst use private key dsa return newly allocate dsa_sig structure": "DSA_do_sign", "set const evp_cipher bio set cipher bio b cipher use key key iv iv": "BIO_set_cipher", "bignum macro reduce a top point most significant non_zero word plus one when have shrink": "bn_fix_top", "x509_verify_param set expect ip address ip": "X509_VERIFY_PARAM_set1_ip", "size_t check if certificate match specify ipv4 or ipv6 address": "X509_check_ip", "miss const evp_pkey function return # if public key parameter pkey be miss # if be present or algorithm do parameter": "EVP_PKEY_missing_parameters", "set asn1_object x509_name_entry set field name ne obj": "X509_NAME_ENTRY_set_object", "const dsa_sig d2i_dsa_sig , decode encode dsa signature use dss_sig_value structure as define rfc2459": "i2d_DSA_SIG", "struct unk ssl_ctx return pointer lhash database contain internal session cache ctx": "SSL_CTX_sessions", "evp_pkey evp_pkey be similar d2i_privatekey except attempt automatically detect private key format": "d2i_AutoPrivateKey", "select const ssl return pointer select protocol datum length len": "SSL_get0_alpn_selected", "connect bio ssl_ctx create bio chain consist ssl bio follow by connect bio": "BIO_new_ssl_connect", "x509 ssl ssl_set0_chain , ssl_set1_chain , ssl_add0_chain_cert , , ssl_get0_chain_certs , ssl_clear_chain_cert , ssl_build_cert_chain , ssl_select_current_cert ssl_set_current_cert be similar except apply ssl structure ssl": "SSL_add1_chain_cert", "bio_callback_ctrl , bio_ptr_ctrl bio_int_ctrl be bio control operation take argument various type": "BIO_ctrl", "write bio bio_read_filename , , bio_append_filename bio_rw_filename set file bio b file name reading , writing , append or read write respectively": "BIO_write_filename", "bio pkcs7 bio output pkcs7 structure ber format": "i2d_PKCS7_bio_stream", "remove ssl_session ssl_ctx remove session c context ctx": "SSL_CTX_remove_session", "ui go through information give so far , do print prompting return": "UI_process", "unk accept renegotiate long ssl_ctx return number start renegotiation server mode": "SSL_CTX_sess_accept_renegotiate", "const evp_pkey const evp_pkey function compare parameter key b": "EVP_PKEY_cmp_parameters", "set ssl ssl_ctx_set_alpn_protos be use by client set list protocol available be negotiate": "SSL_set_alpn_protos", "set ssl set file descriptor fd as facility side ssl": "SSL_set_fd", "return string indicate type alert specify by value": "SSL_alert_type_string_long", "convert bn_blinding bignum bignum multiplie n blind factor": "BN_BLINDING_convert_ex", "const evp_md , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_md2", "unk get long ssl_ctx return currently valid session cache size": "SSL_CTX_sess_get_cache_size", "rsa const evp_pkey evp_pkey_get0_hmac , evp_pkey_get0_poly1305 , evp_pkey_get0_siphash , , evp_pkey_get0_dsa , evp_pkey_get0_dh evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_RSA", "const dsa d2i_dsapublickey decode encode dsa public key component structure": "i2d_DSAPublicKey", "x509_store ssl ssl_set0_verify_cert_store , ssl_set1_verify_cert_store , ssl_set0_chain_cert_store be similar except apply ssl structure ssl": "SSL_set1_chain_cert_store", "evp_pkey evp_md_ctx sign datum ctx use private key pkey place signature sig": "EVP_SignFinal", "set long long ssl_session replace creation time session s choose value tm": "SSL_SESSION_set_time", "dsa_sig allocate initialize dsa_sig structure": "DSA_SIG_new", "set long long ssl_session ssl_get_time , ssl_set_time , ssl_get_timeout , function be synonyms ssl_session counterpart": "SSL_set_timeout", "md5_ctx md4_init , md4_update , md4_final , md5_init , , md5_final be analogous use md4_ctx md5_ctx structure": "MD5_Update", "get long ssl_ctx return currently set timeout value ctx": "SSL_CTX_get_timeout", "bn_ctx const bignum bignum bignum take square modulo m place result r": "BN_mod_sqr", "get asn1_object x509_name x509_name_get_index_by_nid retrieve next index match nid or obj after lastpos": "X509_NAME_get_index_by_OBJ", "x509_verify_param x509_store_ctx set intenal verification paramet pointer param": "X509_STORE_CTX_set0_param", "const rsa return flag be set rsa current rsa_method": "RSA_flags", "size_t t buf_strdup , buf_strndup , buf_memdup , buf_strlcpy , buf_strnlen be equivalent standard c library function": "BUF_strlcat", "ec_key const evp_pkey evp_pkey_get0_hmac , evp_pkey_get0_poly1305 , evp_pkey_get0_siphash , evp_pkey_get0_rsa , evp_pkey_get0_dsa , evp_pkey_get0_dh return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_EC_KEY", "cms_signerinfo const evp_md evp_pkey x509 cms_contentinfo add signer certificate signcert private key pkey use message digest md cms_contentinfo signeddata structure cms": "CMS_add1_signer", "bn_ulong bn_ulong bignum divide by w return remainder": "BN_div_word", "buf_strndup , buf_memdup , buf_strlcpy , buf_strlcat buf_strnlen be equivalent standard c library function": "BUF_strdup", "write bio pkcs7 bio output pkcs7 structure pem format": "PEM_write_bio_PKCS7_stream", "get const ssl be use retrieve psk identity hint use during connection setup related ssl object ssl": "SSL_get_psk_identity_hint", "asn1_object convert text string s into asn1_object structure": "OBJ_txt2obj", "long ssl_ctx return number session be remove because maximum session cache size be exceed": "SSL_CTX_sess_cache_full", "add ssl_session ssl_ctx add session c context ctx": "SSL_CTX_add_session", "x509_name return total number entry name": "X509_NAME_entry_count", "bio lhash lh_stats_bio , lh_node_usage_stats_bio be as above , except output go bio": "lh_node_stats_bio", "decrypt unk function perform public key decryption operation use ctx": "EVP_PKEY_decrypt", "put num cryptographically strong pseudo_random byte into buf": "RAND_bytes", "encrypt const bf_key unk bf_decrypt be low level function blowfish encryption": "BF_encrypt", "x509_store_ctx return newly initialise x509_store_ctx structure": "X509_STORE_CTX_new", "configure openssl use standard read application section appname": "OPENSSL_config", "size_t evp_md_ctx sign datum ctx place signature sig": "EVP_DigestSignFinal", "get const evp_cipher , evp_get_cipherbynid evp_get_cipherbyobj return evp_cipher structure when pass cipher name , nid or asn1_object structure": "EVP_get_cipherbyname", "set des_cblock set parity pass key odd": "DES_set_odd_parity", "add unk add compression method cm identifier identifier list available compression method": "SSL_COMP_add_compression_method", "md5_ctx md4_init , md4_update , md4_final , md5_init , md5_update , be analogous use md4_ctx md5_ctx structure": "MD5_Final", "unk decode inl character datum find buffer point by": "EVP_DecodeUpdate", "dsa long dsa , i2d_dsaprivatekey decode encode dsa private key component": "d2i_DSAPrivateKey", "verify x509_store ssl ssl_set0_verify_cert_store , , ssl_set0_chain_cert_store ssl_set1_chain_cert_store be similar except apply ssl structure ssl": "SSL_set1_verify_cert_store", "be const bignum test if bit n be set": "BN_is_bit_set", "asn1_time unk asn1_time function set asn1_time structure s time represent by time_t value t": "ASN1_TIME_set", "const asn1_time const x509_crl x509_crl_get0_lastupdate return lastupdate nextupdate field crl": "X509_CRL_get0_nextUpdate", "const evp_md be null message digest do nothing : i": "EVP_md_null", "dh allocate initialize dh structure": "DH_new", "ui retrieve datum have last give ui ui_add_user_data": "UI_get0_user_data", "ui remove ui memory , along other piece memory connect , like duplicated input string , result other": "UI_free", "be equivalent rand_add when num entropy": "RAND_seed", "sign ecdsa_sig be wrapper function ecdsa_do_sign_ex kinv rp set null": "ECDSA_do_sign", "ssl_session transform ssl_session object into asn1 representation store into memory location point by pp": "i2d_SSL_SESSION", "dsa long dsa , i2d_dsaparams decode encode dsa parameter use dss_parm structure as define rfc2459": "d2i_DSAparams", "rand_method initially , default rand_method be openssl internal implementation , as return by": "RAND_SSLeay", "add ui unk add string be show time as prompt extra information or show error string": "UI_add_error_string", "set unsigned long x509_verify_param function set flag param by ore flag": "X509_VERIFY_PARAM_set_flags", "size_t check if certificate match specify email address": "X509_check_email", "set ssl_ctx set application callback cb use by server select which protocol incoming connection": "SSL_CTX_set_alpn_select_cb", "bn_blinding free bn_blinding structure": "BN_BLINDING_free", "x509 be similar i2d_x509 except encode only tbscertificate portion certificate": "i2d_re_X509_tbs", "ui first thing be create ui or ui_new_method , then add information ui_add or ui_dup function": "UI_new", "verify x509_store ssl , ssl_set1_verify_cert_store , ssl_set0_chain_cert_store ssl_set1_chain_cert_store be similar except apply ssl structure ssl": "SSL_set0_verify_cert_store", "create x509_name_entry asn1_object x509_name_entry x509_name_entry_create_by_txt , x509_name_entry_create_by_nid create return x509_name_entry structure": "X509_NAME_ENTRY_create_by_OBJ", "unk log , md4 , md5 compute md2 , md4 , md5 message digest n byte d place md which must have space md2_digest_length md4_digest_length md5_digest_length # byte output": "MD2", "evp_cipher evp_cipher_ctx initialize cipher context ctx decryption cipher type": "EVP_OpenInit", "set verify ssl_ctx set maximum depth certificate chain verification shall be allow ctx": "SSL_CTX_set_verify_depth", "set ssl_conf_ctx function set flag context cctx": "SSL_CONF_CTX_set_flags", "evp_pkey_method create return evp_pkey_method object , associate give identifi flag": "EVP_PKEY_meth_new", "support return # if extension ext_type be handle internally by openssl # otherwise": "SSL_extension_supported", "size_t const evp_pkey evp_pkey_get0_hmac , evp_pkey_get0_poly1305 , , evp_pkey_get0_rsa , evp_pkey_get0_dsa , evp_pkey_get0_dh evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_siphash", "verify verifie signature sigbuf size siglen match give message dig m size m_len": "RSA_verify", "set unk macro set length dh prime paramet p dh paramet generation": "EVP_PKEY_CTX_set_dh_paramgen_prime_len", "bio lhash , lh_node_stats_bio lh_node_usage_stats_bio be as above , except output go bio": "lh_stats_bio", "destroy unk be use destroy lock": "CRYPTO_destroy_dynlockid", "bio be convenience function print error string error openssl have record bp , thus empty error queue": "ERR_print_errors", "x509 ssl ssl_set0_chain , ssl_set1_chain , , ssl_add1_chain_cert , ssl_get0_chain_certs , ssl_clear_chain_cert , ssl_build_cert_chain , ssl_select_current_cert ssl_set_current_cert be similar except apply ssl structure ssl": "SSL_add0_chain_cert", "bio free up entire bio chain , do halt if error occur free up individual bio chain": "BIO_free_all", "sha_ctx place message digest md , which must have space sha_digest_length # byte output , erase sha_ctx": "SHA1_Final", "generate unk ssl_ctx set callback function generate session id session ctx be cb": "SSL_CTX_set_generate_session_id", "unk function allow application send algorithm specific control operation context ctx string form": "EVP_PKEY_CTX_ctrl_str", "const evp_md evp_md_ctx_size return size message digest when pass evp_md or evp_md_ctx structure , i": "EVP_MD_size", "set bignum unk macro set public exponent value rsa key generation pubexp currently should be odd integer": "EVP_PKEY_CTX_set_rsa_keygen_pubexp", "bio return # if bio have read eof , precise mean eof vary accord bio type": "BIO_eof", "rsa evp_pkey , evp_pkey_get1_dsa , evp_pkey_get1_dh evp_pkey_get1_ec_key return reference key pkey or null if key be correct type": "EVP_PKEY_get1_RSA", "x509_verify_param ssl_ctx ssl_set1_param set verification parameter vpm ctx or ssl": "SSL_CTX_set1_param", "want const ssl return state information ssl object ssl": "SSL_want", "generate dsa work much way as dsa_generate_parameters_ex , except no dsa parameter be pass instead newly allocate dsa structure be return": "DSA_generate_parameters", "finish call each configuration module finish handler free up configuration module have perform": "CONF_modules_finish", "get long unk ssl_session , ssl_set_time , ssl_get_timeout , ssl_set_timeout function be synonyms ssl_session counterpart": "SSL_get_time", "unk const unk const unk return signaturealgorithm bs": "OCSP_resp_get0_tbs_sigalg", "get verify const ssl return verification depth limit currently set ssl": "SSL_get_verify_depth", "compute digital signature dgstlen byte hash value dgst use private ec key eckey optional pre_computed value kinv rp": "ECDSA_sign_ex", "convert bn_ctx bn_blinding bignum bn_blinding_invert be wrapper function bn_blinding_convert_ex bn_blinding_invert_ex r set null": "BN_BLINDING_convert", "evp_pkey x509_req be equivalent x509_check_private_key except x represent certificate request structure x509_req": "X509_REQ_check_private_key", "verify x509_store ssl_ctx ssl_ctx_set0_verify_cert_store set certificate store use certificate verification st": "SSL_CTX_set1_verify_cert_store", "const dsa d2i_dsa_pubkey decode encode dsa public key use subjectpublickeyinfo structure": "i2d_DSA_PUBKEY", "x509 free up x509 structure": "X509_free", "rsa allocate initialize rsa structure": "RSA_new", "const evp_md evp_md_ctx_type return nid object identifi represent give message digest when pass evp_md structure": "EVP_MD_type", "unk return number ocsp_singleresp structure bs": "OCSP_resp_count", "bignum convert string str contain hexadecimal number bignum store": "BN_hex2bn", "set ssl set context sid_ctx length sid_ctx_len within which session can be reuse ssl object": "SSL_set_session_id_context", "const asn1_time x509 x509_set1_notafter set notbefore notafter field x tm": "X509_set1_notBefore", "size_t check if certificate subject alternative name or subject commonname match specify host name , which must be encode preferred name syntax describe section # rfc #": "X509_check_host", "ssl_session long ssl_session transform external asn1 representation session , store as binary datum location pp length length , into ssl_session object": "d2i_SSL_SESSION", "ui ui_dup_input_string , ui_dup_verify_string , , unk ui_dup_error_string be basically as ui_add counterpart , except make copy string": "UI_dup_input_boolean", "bn_ulong bn_ulong bn_ulong bn_mul call bn_mul_normal , or optimize implementation if factor have size : bn_mul_comba8 be use if be # word long , bn_mul_recursive if be large than bn_mull_size_normal size be exact multiple word size , other be large than bn_mull_size_normal": "bn_mul_part_recursive", "evp_md_ctx initialize digest context ctx": "EVP_MD_CTX_init", "evp_cipher_ctx evp_encryptfinal , evp_cipherfinal be identical evp_encryptfinal_ex , evp_decryptfinal_ex evp_cipherfinal_ex": "EVP_DecryptFinal", "evp_md_ctx evp_md_ctx be similar evp_md_ctx_copy_ex except destination out do have be initialize": "EVP_MD_CTX_copy", "assign unk evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , evp_pkey_assign_dh , evp_pkey_assign_ec_key , evp_pkey_assign_poly1305 set referenced key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_SIPHASH", "md2_ctx initialize md2_ctx structure": "MD2_Init", "set ssl ssl_set_rfd perform respective action , but only read channel or write channel , which can be set independently": "SSL_set_wfd", "encrypt mode function , bf_cfb64_encrypt bf_ofb64_encrypt operate variable length datum": "BF_cbc_encrypt", "evp_md_ctx be similar evp_digestfinal_ex except digest context ctx be automatically clean up": "EVP_DigestFinal", "return two letter string as short form describe reason alert specify by value": "SSL_alert_desc_string", "bn_ctx finally , must be call before return function": "BN_CTX_end", "return different string depend t": "SSLeay_version", "long return number": "SSLeay", "set x509_store_ctx set error code ctx s": "X509_STORE_CTX_set_error", "get verify long const ssl return result verification x509 certificate present by peer , if": "SSL_get_verify_result", "x509 allocate initialize x509 structure": "X509_new", "perform actual query egd daemon socket path": "RAND_query_egd_bytes", "set ssl_session ssl set session be use when connection be be establish": "SSL_set_session", "connect ssl evp_pkey_ctx_new_apiname function allocate public key algorithm context use pkey key type engine e": "SSL_connect", "asn1_string free up": "ASN1_STRING_free", "unk function evp_pkey_paramgen be similar except parameter be generate": "EVP_PKEY_paramgen_init", "unk set remove ssl_ctx set callback function , which be automatically call whenever session be remove by ssl engine , because be consider faulty or session have become obsolete because exceed timeout value": "SSL_CTX_sess_set_remove_cb", "bignum set bit n # 1 n": "BN_clear_bit", "x509_store ssl_ctx ssl_ctx_set0_chain_cert_store set certificate store use certificate chain building st": "SSL_CTX_set1_chain_cert_store", "asn1_string set datum string str buffer datum or length len": "ASN1_STRING_set", "add ui add piece memory method time": "UI_add_user_data", "unk allocate initialize bn_recp structure": "BN_RECP_CTX_new", "x509 cms_contentinfo cms_add0_cert add certificate cert cms": "CMS_add1_cert", "unk log md2 , , md5 compute md2 , md4 , md5 message digest n byte d place md which must have space md2_digest_length md4_digest_length md5_digest_length # byte output": "MD4", "ui_method return built_in ui method note : default one , since default can be change": "UI_OpenSSL", "ui , ui_dup_verify_string , ui_dup_input_boolean , unk ui_dup_error_string be basically as ui_add counterpart , except make copy string": "UI_dup_input_string", "unk asn1_string return copy structure": "ASN1_STRING_dup", "dh engine allocate initialize dh structure so engine be use dh operation": "DH_new_method", "const evp_cipher evp_cipher_ctx evp_encryptinit , evp_cipherinit behave similar way evp_encryptinit_ex , evp_decryptinit_ex evp_cipherinit_ex except ctx paramet do need be initialize always default cipher implementation": "EVP_DecryptInit", "get read size_t bio bio_get_read_reque return amount datum request , or buffer size if be less , if last read attempt other half bio pair fail due empty buffer": "BIO_ctrl_get_read_request", "bignum verifie top # top dmax": "bn_check_top", "const evp_cipher evp_cipher_ctx initialize cipher context ctx encryption cipher type use random secret key iv": "EVP_SealInit", "crypto_threadid duplicate thread identifi value": "CRYPTO_THREADID_cpy", "bio bio copy ssl session identifi between bio chain": "BIO_ssl_copy_session_id", "long ssl_ctx clear extra chain certificate associate ctx": "SSL_CTX_clear_extra_chain_certs", "set pday psec time difference between": "ASN1_TIME_diff", "bio create memory bio use len byte datum buf , if len be # then buf be assume be nul terminate length be determine by strlen": "BIO_new_mem_buf", "produce const unk extract producedat field single response bs": "OCSP_resp_get0_produced_at", "get const ssl return shutdown mode ssl": "SSL_get_shutdown", "set long long ssl_ctx set maximum size allow peer certificate chain ssl object create ctx be size byte": "SSL_CTX_set_max_cert_list", "get rsa be use retrieve application specific datum": "RSA_get_ex_data", "thread crypto_threadid provide access crypto_threadid object within bn_blinding structure": "BN_BLINDING_thread_id", "decrypt bio x509 evp_pkey pkcs7 extract decrypt content pkc # envelopeddata structure": "PKCS7_decrypt", "set ssl ssl_set_wfd perform respective action , but only read channel or write channel , which can be set independently": "SSL_set_rfd", "bignum allocate initialize bignum structure": "BN_new", "unk cms_signerinfo int look sign receipt request si , if be find be decode write prr": "CMS_get1_ReceiptRequest", "reset read bio can be use reset value return by bio_get_read_reque zero": "BIO_ctrl_reset_read_request", "bn_ctx const bignum const bignum bignum correspond bn_div dv set null": "BN_mod", "long read number byte file filename add -PRON- prng": "RAND_load_file", "unk function send control operation context ctx": "EVP_PKEY_CTX_ctrl", "bn_ctx bignum bignum bignum multiplie b place result r r b": "BN_mul", "file lhash print out statistic size hash table , how many entry be , number result call routine library": "lh_stats", "get peer x509 const ssl return pointer x509 certificate peer present": "SSL_get_peer_certificate", "hmac_ctx initialise hmac_ctx before first": "HMAC_CTX_init", "get write size_t bio bio_get_write_guarantee return maximum length datum can be currently write bio": "BIO_ctrl_get_write_guarantee", "set x509_verify_param set trust set param trust": "X509_VERIFY_PARAM_set_trust", "unk evp_md_ctx set up signing context ctx dig type engine impl private key pkey": "EVP_DigestSignInit", "encrypt des_ede2_ofb64_encrypt be as des_ofb64_encrypt , use triple_de": "DES_ede3_ofb64_encrypt", "const asn1_object cms_contentinfo return content type cms_contentinfo structure as asn1_object pointer": "CMS_get0_type", "evp_cipher_ctx evp_cipherinit_ex , evp_cipherupdate be function can be use decryption or encryption": "EVP_CipherFinal_ex", "ecdsa_sig allocate ecdsa_sig structure initialize": "ECDSA_SIG_new", "rsa long rsa i2d_rsa_pubkey decode encode rsa public key use subjectpublickeyinfo structure": "d2i_RSA_PUBKEY", "bn_ulong bn_ulong bn_ulong bn_mul call bn_mul_normal , or optimize implementation if factor have size : bn_mul_comba8 be use if be # word long , if be large than bn_mull_size_normal size be exact multiple word size , bn_mul_part_recursive other be large than bn_mull_size_normal": "bn_mul_recursive", "find unk unk search bs ocsp response identifier": "OCSP_resp_find_status", "get share ssl return share curve n server_side ssl ssl": "SSL_get_shared_curve", "const evp_pkey evp_pkey function copy parameter key key": "EVP_PKEY_copy_parameters", "set evp_cipher_ctx set key length cipher ctx": "EVP_CIPHER_CTX_set_key_length", "cms_recipientinfo return type cms_recipientinfo structure ri": "CMS_RecipientInfo_type", "const bignum return size bignum byte": "BN_num_bytes", "const asn1_time x509_crl x509_crl_set1_lastupdate set lastupdate nextupdate field crl tm": "X509_CRL_set1_nextUpdate", "get verify const ssl_ctx return verification mode currently set ctx": "SSL_CTX_get_verify_mode", "dsa free dsa structure component": "DSA_free", "dsa_sig free dsa_sig structure component": "DSA_SIG_free", "x509 be similar i2d_x509 , but encode output contain both certificate auxiliary trust information": "i2d_X509_AUX", "bignum bignum generate cryptographically strong pseudo_random number rnd range # rnd range": "BN_rand_range", "size_t const asn1_object return size content octet obj": "OBJ_length", "verify verifie signature sigbuf size siglen be der representation give octet string m size m_len": "RSA_verify_ASN1_OCTET_STRING", "pende bio , bio_ctrl_pending , unk bio_ctrl_wpending return number pende character bio read write buffer": "BIO_pending", "unk bn_blinding const bignum bignum bn_blinding_convert bn_blinding_invert be wrapper function bn_blinding_convert_ex r set null": "BN_BLINDING_invert_ex", "set ssl_ctx ssl_conf_ctx set context associate cctx ssl_ctx structure ctx": "SSL_CONF_CTX_set_ssl_ctx", "const dsa d2i_dsaparams , decode encode dsa parameter use dss_parm structure as define rfc2459": "i2d_DSAparams", "const asn1_object be as obj_obj2txt no_name set zero": "i2t_ASN1_OBJECT", "dsa evp_pkey evp_pkey_set1_rsa , , evp_pkey_set1_dh evp_pkey_set1_ec_key set key reference by pkey key": "EVP_PKEY_set1_DSA", "md2_ctx can be call repeatedly chunk message be hash len byte datum": "MD2_Update", "set ssl ssl_ctx_set_ecdh_auto set automatic curve selection server ctx or ssl onoff": "SSL_set_ecdh_auto", "x509 long x509 attempt decode len byte": "d2i_X509", "get long unk ssl_session ssl_get_time , ssl_set_time , , ssl_set_timeout function be synonyms ssl_session counterpart": "SSL_get_timeout", "engine const evp_md evp_md_ctx set up digest context ctx dig type engine impl": "EVP_DigestInit_ex", "write evp_pkey bio pem_write_pkcs8privatekey_nid write out private key as pkc # encryptedprivatekeyinfo however use pkc # v1 or pkc # encryption algorithm instead": "PEM_write_bio_PKCS8PrivateKey_nid", "asn1_time const x509 x509_getm_notafter be similar x509_get0_notbefore x509_get0_notafter except return non_constant mutable reference associate date field certificate": "X509_getm_notBefore", "bn_ctx bignum bignum bignum compute great common divisor b place result r": "BN_gcd", "get long ssl_ctx return option set ctx": "SSL_CTX_get_options", "add bn_ulong bignum add w w": "BN_add_word", "add verify ui ui_add_input_str add prompt ui , as well as flag result buffer desire minimum maximum size result , count final nul character": "UI_add_verify_string", "const bignum return number significant bit bignum , follow principle as bn_num_bits_word": "BN_num_bits", "write bio pkcs7 bio add appropriate mime header pkc # structure produce message": "SMIME_write_PKCS7", "get const dh_method return pointer current default dh_method": "DH_get_default_method", "x509_verify_param set expect rfc822 email address email": "X509_VERIFY_PARAM_set1_email", "x509_store_ctx completely free up ctx": "X509_STORE_CTX_free", "des_cblock generate random key": "DES_random_key", "bio close down ssl connection bio chain bio": "BIO_ssl_shutdown", "const unk be idential conf_modules_load_file except read configuration information cnf": "CONF_modules_load", "x509 x509 bio be similar d2i_x509 except attempt parse datum bio bp": "d2i_X509_bio", "unk convert stre utf8 format , converted datum be allocate buffer out": "ASN1_STRING_to_UTF8", "ssl_ctx decrement reference count ctx , remove ssl_ctx object point by ctx free up allocated memory if reference count have reach #": "SSL_CTX_free", "ui ui_dup_input_string , ui_dup_verify_string , ui_dup_input_boolean , unk be basically as ui_add counterpart , except make copy string": "UI_dup_error_string", "dsa long dsa i2d_dsa_pubkey decode encode dsa public key use subjectpublickeyinfo structure": "d2i_DSA_PUBKEY", "evp_pkey x509 function check consistency private key k public key x": "X509_check_private_key", "ssl ssl_set1_curves_list be similar except set support curve ssl structure ssl": "SSL_set1_curves", "get unk long , err_get_func err_get_reason be macro": "ERR_GET_LIB", "unk long ssl_ctx return number session propose by client either find internal or external session cache server mode , but be invalid due timeout": "SSL_CTX_sess_timeouts", "cms_signerinfo function explicitly sign cms_signerinfo structure , main be when unk cms_partial flag be both set": "CMS_SignerInfo_sign", "engine const evp_md evp_md_ctx set up verification context ctx dig type engine impl": "EVP_VerifyInit_ex", "unsigned long err_get_error_line , err_peek_error_line be as above , but additionally store file name line number where error occur file line , unless be null": "ERR_peek_last_error_line", "bignum bignum bignum compute mont : b r 1 place result r": "BN_mod_mul_montgomery", "bio cms_contentinfo bio output cms_contentinfo structure ber format": "i2d_CMS_bio_stream", "bio return file descriptor bio use fd close_flag": "BIO_new_fd", "bn_ulong bn_ulong bn_ulong bn_mul call , or optimize implementation if factor have size : bn_mul_comba8 be use if be # word long , bn_mul_recursive if be large than bn_mull_size_normal size be exact multiple word size , bn_mul_part_recursive other be large than bn_mull_size_normal": "bn_mul_normal", "be bn_ctx const bignum bn_is_prime_ex test if number p be prime": "BN_is_prime_fasttest_ex", "long long ssl_ctx clear option set via bitmask option ctx": "SSL_CTX_clear_options", "unk evp_md_ctx set up verification context ctx dig type engine impl public key pkey": "EVP_DigestVerifyInit", "encrypt des_cblock unk be basic des encryption routine encrypt or decrypt single 8_byte des_cblock electronic code book mode": "DES_ecb_encrypt", "encrypt cms_recipientinfo cms_contentinfo attempt encrypt cms_recipientinfo structure ri structure cms": "CMS_RecipientInfo_encrypt", "ssl_ctx add private key type pk store memory location d ctx": "SSL_CTX_use_PrivateKey_ASN1", "destroy evp_md_ctx clean up digest context ctx free up space allocate , should be call only context create use evp_md_ctx_create": "EVP_MD_CTX_destroy", "ssl_ctx set support curve ctx clistlen curve array clist": "SSL_CTX_set1_curves", "be helper function use select protocol": "SSL_select_next_proto", "dsa long dsa_sig , i2d_dsa_sig decode encode dsa signature use dss_sig_value structure as define rfc2459": "d2i_DSA_SIG", "set ssl_ctx ssl_set_ecdh_auto set automatic curve selection server ctx or ssl onoff": "SSL_CTX_set_ecdh_auto", "add const bignum const bignum bignum add b place result r r b": "BN_add", "set long ssl ssl_set0_chain , ssl_set1_chain , ssl_add0_chain_cert , ssl_add1_chain_cert , ssl_get0_chain_certs , ssl_clear_chain_cert , ssl_build_cert_chain , ssl_select_current_cert be similar except apply ssl structure ssl": "SSL_set_current_cert", "get x509_get0_notbefore_apiname x509_get0_notafter_apiname return notbefore notafter field certificate x respectively": "X509_get_notBefore", "return nid corresponding text string s": "OBJ_txt2nid", "get const dsa_method return pointer current default dsa_method": "DSA_get_default_method", "x509 ssl_ctx ssl_ctx_add1_chain_cert append single certificate x509 chain associate current certificate ctx": "SSL_CTX_add0_chain_cert", "cmd ssl_conf_ctx function perform configuration operation cmd optional paramet value ctx": "SSL_CONF_cmd", "encrypt use cipher feedback mode": "DES_cfb_encrypt", "unk long , unk unk return library name , function name reason string respectively": "ERR_lib_error_string", "ssl_conf_ctx function must be call after configuration operation have complete": "SSL_CONF_finish", "be bn_ulong bignum bn_is_zero , bn_is_one test if equal 0 , 1 , or w respectively": "BN_is_word", "verify verifie signature sig be valid ecdsa signature hash value dgst size dgst_len use public key eckey": "ECDSA_do_verify", "md4_ctx md4_init , , md4_final , md5_init , md5_update , md5_final be analogous use md4_ctx md5_ctx structure": "MD4_Update", "sign message dig m size m_len use private key rsa as specify pkc # v2": "RSA_sign", "encrypt unk function perform public key encryption operation use ctx": "EVP_PKEY_encrypt", "hmac_ctx erase key other datum hmac_ctx release associate resource": "HMAC_CTX_cleanup", "cmd ssl_conf_ctx function process most two command line argument pargv pargc": "SSL_CONF_cmd_argv", "md2_ctx place message digest md , which must have space md2_digest_length # byte output , erase md2_ctx": "MD2_Final", "evp_pkey ssl_ctx add pkey as private key ctx": "SSL_CTX_use_PrivateKey", "return string describe reason alert specify by value": "SSL_alert_desc_string_long", "write const evp_cipher evp_pkey file pem_write_bio_pkcs8privatekey write private key evp_pkey structure pkc # encryptedprivatekeyinfo format use pkc # v2 password base encryption algorithm": "PEM_write_PKCS8PrivateKey", "decrypt cms_recipientinfo cms_contentinfo attempt decrypt cms_recipientinfo structure ri structure cms": "CMS_RecipientInfo_decrypt", "const evp_pkey_method evp_pkey_method copy evp_pkey_method object src dst": "EVP_PKEY_meth_copy", "ssl_ctx add first private key find file ctx": "SSL_CTX_use_PrivateKey_file", "long long bio bio_ctrl , bio_callback_ctrl , bio_ptr_ctrl be bio control operation take argument various type": "BIO_int_ctrl", "unk bignum bignum bignum divide by m use recp": "BN_div_recp", "accept long ssl_ctx return number successfully establish session server mode": "SSL_CTX_sess_accept_good", "set ssl ssl_conf_ctx set context associate cctx ssl structure ssl": "SSL_CONF_CTX_set_ssl", "set verify ssl_ctx set verification flag ctx be mode specifie verify_callback function be use": "SSL_CTX_set_verify", "create bn_blinding bn_blinding create bn_blinding parameter use exponent e modulus m": "BN_BLINDING_create_param", "const asn1_object cms_contentinfo set embed content type cms_contentinfo structure": "CMS_set1_eContentType", "get const ssl_ctx be use retrieve information idx ctx": "SSL_CTX_get_ex_data", "set ssl callback be set use function ssl_ctx_set_psk_client_callback or": "SSL_set_psk_client_callback", "set verify long ssl set verify_result object ssl be result verification x509 certificate present by peer , if": "SSL_set_verify_result", "get const ssl_session be use retrieve information idx session": "SSL_SESSION_get_ex_data", "asn1_object free up asn1_object structure": "ASN1_OBJECT_free", "bignum bignum compare number b": "BN_cmp", "verify x509_store_ctx function attempt discover validate certificate chain base parameter ctx": "X509_verify_cert", "const asn1_time const x509_crl x509_crl_get0_nextupdate return lastupdate nextupdate field crl": "X509_CRL_get0_lastUpdate", "generate dsa expect contain dsa parameter": "DSA_generate_key", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha512", "set bind long long bio bio_get_bind_mode set retrieve current bind mode": "BIO_set_bind_mode", "have const ssl check , whether session identifier identifi be already contain internal session cache parent context ssl": "SSL_has_matching_session_id", "bio ssl_ctx allocate ssl bio use ssl_ctx ctx use client mode if client be non zero": "BIO_new_ssl", "connect ssl initiate handshake server": "SSL_connect", "add add algorithm table digest cipher": "OpenSSL_add_all_algorithms", "asn1_time const x509 x509_getm_notbefore be similar x509_get0_notbefore x509_get0_notafter except return non_constant mutable reference associate date field certificate": "X509_getm_notAfter", "ssl ssl_set0_chain , ssl_set1_chain , ssl_add0_chain_cert , ssl_add1_chain_cert , ssl_get0_chain_certs , , ssl_build_cert_chain , ssl_select_current_cert ssl_set_current_cert be similar except apply ssl structure ssl": "SSL_clear_chain_certs", "const asn1_object cms_contentinfo asn1_object return pointer embed content type": "CMS_get0_eContentType", "be bignum bn_is_zero , bn_is_word test if equal 0 , 1 , or w respectively": "BN_is_one", "encrypt mode function bf_cbc_encrypt , bf_cfb64_encrypt operate variable length datum": "BF_ofb64_encrypt", "unsigned long err_get_error_line_data , err_peek_error_line_data store additional datum flag associate error code datum flag , unless be null": "ERR_peek_last_error_line_data", "encrypt use unk mode des": "DES_ncbc_encrypt", "const evp_md evp_md_ctx initialize verification context ctx default implementation digest type": "EVP_VerifyInit", "unk asn1_time bio print out time s bio b human readable format": "ASN1_TIME_print", "bignum do , but pseudo_random number generate by function be necessarily unpredictable": "BN_pseudo_rand", "hmac_ctx can be call repeatedly chunk message be authenticate len byte datum": "HMAC_Update", "ssl shut down active connection": "SSL_shutdown", "pop top error stack until mark be find": "ERR_pop_to_mark", "be fast replacement normal system crypt": "DES_crypt", "add ssl_ctx add custom extension tls client extension type ext_type callback add_cb , free_cb parse_cb": "SSL_CTX_add_client_custom_ext", "unsigned unk must be call end decode operation": "EVP_DecodeFinal", "get bn_ulong bignum return , if can be represent as bn_ulong": "BN_get_word", "unk unk collect entropy window event such as mouse movement other user interaction": "RAND_event", "free internal table compression method be build internally , possibly augment by add ssl_comp_add_compression_method": "SSL_COMP_free_compression_methods", "evp_cipher_ctx evp_decryptinit_ex , evp_decryptfinal_ex be correspond decryption operation": "EVP_DecryptUpdate", "set long long ssl add option set via bitmask option ssl": "SSL_set_options", "return pointer constant string describe version openssl library or give information about library build": "SSLeay_version", "get evp_cipher_ctx bio be bio_ctrl macro which retrieve internal bio cipher context": "BIO_get_cipher_ctx", "const evp_pkey_method add pmeth user define stack method": "EVP_PKEY_meth_add0", "sign octet stre m size m_len use private key rsa represent der use pkc # padding": "RSA_sign_ASN1_OCTET_STRING", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha224", "set long long ssl_ctx add option set via bitmask option ctx": "SSL_CTX_set_options", "get evp_md bio place pointer digest bios digest method mdp , be bio_ctrl macro": "BIO_get_md", "uncompress bio bio cms_contentinfo extract uncompress content cms compresseddata structure cms": "CMS_uncompress", "get x509_store const ssl_ctx return pointer current certificate verification storage": "SSL_CTX_get_cert_store", "evp_pkey return maximum size signature byte": "EVP_PKEY_size", "unk asn1_string compare b return # if two be identical": "ASN1_STRING_cmp", "ui const ui_method first thing be create ui ui_new or , then add information ui_add or ui_dup function": "UI_new_method", "const unk const unk return tbsresponsedata bs": "OCSP_resp_get0_respdata", "encrypt des_ede2_cfb64_encrypt be as des_cfb64_encrypt except triple_des be use": "DES_ede3_cfb64_encrypt", "get evp_md_ctx bio return digest bios context into mdcp": "BIO_get_md_ctx", "unk free up context ctx": "EVP_PKEY_CTX_free", "add pkcs7_signer_info const evp_md evp_pkey x509 pkcs7 add signer certificate signcert private key pkey use message digest md pkcs7 sign datum structure p7": "PKCS7_sign_add_signer", "ec_key evp_pkey evp_pkey_set1_rsa , evp_pkey_set1_dsa , evp_pkey_set1_dh set key reference by pkey key": "EVP_PKEY_set1_EC_KEY", "evp_md_ctx clean up digest context ctx , should be call after digest context be no longer need": "EVP_MD_CTX_cleanup", "x509 cms_recipientinfo compare certificate cert against cms_recipientinfo structure ri , which must be type cms_recipinfo_tran": "CMS_RecipientInfo_ktri_cert_cmp", "encrypt be basic blowfish encryption decryption function": "BF_ecb_encrypt", "ssl_ctx load asn1 encode certificate memory location d into ctx , ssl_use_certificate_asn1 load asn1 encode certificate into ssl": "SSL_CTX_use_certificate_ASN1", "rsa d2i_rsa_pubkey decode encode rsa public key use subjectpublickeyinfo structure": "i2d_RSA_PUBKEY", "get unsigned long , err_peek_error_line err_peek_last_error_line be as above , but additionally store file name line number where error occur file line , unless be null": "ERR_get_error_line", "set bio bio ssl connect bios rbio wbio read write operation side ssl": "SSL_set_bio", "accept bio combine bio_new bio_set_accept_port into single call : be create accept bio port host_port": "BIO_new_accept", "get x509 x509_store_ctx return certificate ctx which cause error or null if no certificate be relevant": "X509_STORE_CTX_get_current_cert", "which must be provide by application , hand back password be use during decryption": "pem_passwd_cb", "unk connect long ssl_ctx return number successfully establish session client mode": "SSL_CTX_sess_connect_good", "size_t const unk evp_md_ctx hash cnt byte datum d into digest context ctx": "EVP_DigestUpdate", "bio bio_method return method bio pair": "BIO_s_bio", "engine engine function return structural reference engine object": "ENGINE_new", "set x509_verify_param set verification purpose param purpose": "X509_VERIFY_PARAM_set_purpose", "set long ssl_ctx set application callback cb use by server perform action or configuration require base servername extension receive incoming connection": "SSL_CTX_set_tlsext_servername_callback", "bio bio_free free up single bio , free up single bio but do return value": "BIO_vfree", "add ui add prompt ui suppose be answer boolean way , single character yes different character no": "UI_add_input_boolean", "read unk be use read len byte file descriptor fd into buffer buf": "DES_enc_read", "bio bio_pending , bio_ctrl_pending , bio_ctrl_wpende return number pende character bio read write buffer": "BIO_wpending", "const bignum const bignum bignum bignum divide by d place result dv remainder rem dv , rem d": "BN_div", "x509 ssl_ctx select x509 as current end entity certificate , but only if x509 have already load into ctx use function such as ssl_ctx_use_certificate": "SSL_CTX_select_current_cert", "bio lhash lh_stats_bio , lh_node_stats_bio be as above , except output go bio": "lh_node_usage_stats_bio", "const evp_md evp_dss1 return evp_md structure sha sha1 digest algorithm but use dss signature algorithm": "EVP_dss", "sign flen byte use private key rsa store signature": "RSA_private_encrypt", "set ssl_ctx set pointer userdata which be provide password callback invocation": "SSL_CTX_set_default_passwd_cb_userdata", "size_t cms_recipientinfo associate symmetric key key length keylen cms_recipientinfo structure ri , which must be type cms_recipinfo_kek": "CMS_RecipientInfo_set0_key", "get x509_name , x509_name_get_text_by_obj retrieve text first entry name which match nid or obj , if no such entry exist # be return": "X509_NAME_get_text_by_NID", "x509_verify_param return dns hostname or subject commonname peer certificate match one reference identifier": "X509_VERIFY_PARAM_get0_peername", "const asn1_time x509_crl x509_crl_set1_nextupdate set lastupdate nextupdate field crl tm": "X509_CRL_set1_lastUpdate", "rsa be use set application specific datum , datum be supply arg paramet precise meaning be up application": "RSA_set_ex_data", "rsa long rsa i2d_rsapublickey decode encode pkc # rsapublickey structure": "d2i_RSAPublicKey", "set long dh ssl set parameter only ssl": "SSL_set_tmp_dh", "ssl return set support curve send by client support curve extension": "SSL_get1_curves", "unk bio_method return memory bio method function": "BIO_s_mem", "get ssl_session const ssl return pointer ssl_session actually use ssl": "SSL_get_session", "get const ui_method return pointer current default ui method": "UI_get_default_method", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_ripemd160", "bio bio_read_filename , bio_write_filename , bio_append_filename set file bio b file name reading , writing , append or read write respectively": "BIO_rw_filename", "unk cms_contentinfo return pointer unk pointer contain embed content": "CMS_get0_content", "rsa d2i_rsapublickey decode encode pkc # rsapublickey structure": "i2d_RSAPublicKey", "unsigned long err_get_error_line , err_peek_last_error_line be as above , but additionally store file name line number where error occur file line , unless be null": "ERR_peek_error_line", "write bio cms_contentinfo bio output cms_contentinfo structure pem format": "PEM_write_bio_CMS_stream", "bio bio return next bio chain": "BIO_next", "const const function allocate sufficient memory store hexadecimal string": "EC_POINT_point2hex", "x509_verify_param clear flag flag param": "X509_VERIFY_PARAM_clear_flags", "size_t const evp_pkey , evp_pkey_get0_poly1305 , evp_pkey_get0_siphash , evp_pkey_get0_rsa , evp_pkey_get0_dsa , evp_pkey_get0_dh evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_hmac", "evp_cipher_ctx allow various cipher specific parameter be determine set": "EVP_CIPHER_CTX_ctrl", "read write string specify by prompt standard output turn echo off read input string terminal": "des_read_pw", "size_t bio size_t bio combine call bio_new , bio_make_bio_pair bio_set_write_buf_size create connect pair bios bio1 , bio2 write buffer size writebuf1 writebuf2": "BIO_new_bio_pair", "bio_method return socket bio method": "BIO_s_socket", "unk cms_signerinfo retrieve signature associate si pointer unk structure": "CMS_SignerInfo_get0_signature", "assign dsa evp_pkey evp_pkey_assign_rsa , , evp_pkey_assign_dh evp_pkey_assign_ec_key set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_DSA", "create evp_md_ctx allocate , initialize return digest context": "EVP_MD_CTX_create", "set long long ssl_ctx add mode set via bitmask mode ctx": "SSL_CTX_set_mode", "evp_cipher_ctx clear information cipher context free up allocated memory associate": "EVP_CIPHER_CTX_cleanup", "write write len byte file descriptor fd buffer buf": "DES_enc_write", "const asn1_time const x509 x509_get0_notafter return notbefore notafter field certificate x respectively": "X509_get0_notBefore", "ssl_session ssl be as ssl_get_session , but reference count ssl_session be incremente by one": "SSL_get1_session", "set unk function evp_pkey_ctx_get_app_data set retrieve opaque pointer": "EVP_PKEY_CTX_set_app_data", "be similar , except nul_terminated string address be first convert internal representation": "X509_check_ip_asc", "bignum bn_ctx dsa be use precompute part signing operation case signature generation be time_critical": "DSA_sign_setup", "unk bio return current file position file relate bio": "BIO_tell", "const bignum bn_bn2hex return printable string contain hexadecimal decimal encoding respectively": "BN_bn2dec", "encrypt mode function bf_cbc_encrypt , bf_ofb64_encrypt operate variable length datum": "BF_cfb64_encrypt", "x509 x509 file be similar d2i_x509 except attempt parse datum file pointer fp": "d2i_X509_fp", "encrypt des_cblock unk input block by use three_key triple_de encryption ecb mode": "DES_ecb3_encrypt", "evp_pkey unk function perform key generation operation , generate key be write ppkey": "EVP_PKEY_keygen", "set unk x509_verify_param set verification time param t": "X509_VERIFY_PARAM_set_time", "engine const evp_md evp_md_ctx set up signing context ctx dig type engine impl": "EVP_SignInit_ex", "get long ssl return currently set maximum size ssl": "SSL_get_max_cert_list", "set long rsa ssl set key only ssl": "SSL_set_tmp_rsa", "be use lock unlock lock": "CRYPTO_lock", "get bio ssl ssl_get_wbio return pointer bios read or write channel , which can be different": "SSL_get_rbio", "add add just engine configuration module": "ENGINE_add_conf_module", "update bn_ctx bn_blinding update bn_blinding parameter by squaring ai or , after specific number use if necessary parameter be set , by unk blind parameter": "BN_BLINDING_update", "bignum generate cryptographically strong pseudo_random number bit length store rnd": "BN_rand", "close down free up memory allocate by configuration module": "CONF_modules_free", "get long bio set pp pointer start memory bios datum return total amount datum available": "BIO_get_mem_data", "read bio , bio_write_filename , bio_append_filename bio_rw_filename set file bio b file name reading , writing , append or read write respectively": "BIO_read_filename", "unk asn1_object unk unk unk cms_recipientinfo retrieve key information cms_recipientinfo structure ri which must be type cms_recipinfo_kek": "CMS_RecipientInfo_kekri_get0_id", "bio bio bio function append bio append b , return b": "BIO_push", "const dh_method dh select meth perform operation use key dh": "DH_set_method", "ssl_ctx const unk create ssl_ctx object as framework establish enable connection": "SSL_CTX_new", "encrypt encrypt use output feedback mode": "DES_ofb_encrypt", "empty current thread error queue": "ERR_clear_error", "const asn1_time const x509 x509_get0_notbefore return notbefore notafter field certificate x respectively": "X509_get0_notAfter", "const evp_cipher evp_cipher_ctx set up cipher context ctx encryption cipher type engine impl": "EVP_EncryptInit_ex", "obj_obj2nid , obj_ln2nid , return correspond nid object o , long name ln or short name sn respectively or nid_undef if error occur": "OBJ_sn2nid", "create x509_name_entry x509_name_entry x509_name_entry_create_by_txt , x509_name_entry_create_by_obj create return x509_name_entry structure": "X509_NAME_ENTRY_create_by_NID", "add add encryption algorithm table include password base encryption algorithm": "OpenSSL_add_all_ciphers", "set const dh_method make meth default method dh structure create later": "DH_set_default_method", "rsa rsa_private_decrypt_apiname decrypt flen byte use private key rsa store plaintext": "RSA_public_encrypt", "pende size_t bio bio_pending , , unk bio_ctrl_wpending return number pende character bio read write buffer": "BIO_ctrl_pending", "set accept long bio set accept socket block mode if n be # or non block mode if n be #": "BIO_set_nbio_accept", "unk register error string library number lib": "ERR_load_strings", "get unsigned long , err_peek_error_line_data err_peek_last_error_line_data store additional datum flag associate error code datum flag , unless be null": "ERR_get_error_line_data", "x509_name print ascii version buf": "X509_NAME_oneline", "unk function perform public key signing operation use ctx": "EVP_PKEY_sign", "rsa free rsa structure component": "RSA_free", "get long const ssl return default timeout value assign ssl_session object negotiate protocol valid ssl": "SSL_get_default_timeout", "get long ssl return mode set ssl": "SSL_get_mode", "dh const dsa duplicate dsa as dh": "DSA_dup_DH", "bio create file bio mode mode meaning mode be as stdio function fopen": "BIO_new_file", "evp_cipher_ctx if padding be enable then encrypt final datum , be data remain partial block": "EVP_EncryptFinal_ex", "bn_ctx ec_key be use precompute part signing operation": "ECDSA_sign_setup", "rsa encrypt flen byte use public key rsa store ciphertext": "RSA_public_encrypt", "unk connect long ssl_ctx return number start handshake client mode": "SSL_CTX_sess_connect", "get return index number under which pointer ssl object be store into x509_store_ctx object": "SSL_get_ex_data_X509_STORE_CTX_idx", "set ssl set quiet shutdown flag ssl be mode": "SSL_set_quiet_shutdown", "add x509_name_entry x509_name add copy x509_name_entry structure ne name": "X509_NAME_add_entry", "grow buf_mem change size already exist buffer len": "BUF_MEM_grow", "evp_cipher_ctx evp_cipherinit_ex , evp_cipherfinal_ex be function can be use decryption or encryption": "EVP_CipherUpdate", "set long ssl_ctx set context_specific argument be pass into callback ssl_ctx": "SSL_CTX_set_tlsext_servername_arg", "s bio_method return bio file method": "BIO_s_file", "write write number random byte file filename which can be use initialize prng by call rand_load_file later session": "RAND_write_file", "asn1_time unk asn1_time set asn1_time structure s time represent by time offset_day offset_sec after time_t value t": "ASN1_TIME_adj", "get long response return by server can be obtain via call": "SSL_get_tlsext_status_ocsp_resp", "engine obtain functional reference exist structural reference , call function": "ENGINE_init", "build ssl ssl_set0_chain , ssl_set1_chain , ssl_add0_chain_cert , ssl_add1_chain_cert , ssl_get0_chain_certs , ssl_clear_chain_cert , , ssl_select_current_cert ssl_set_current_cert be similar except apply ssl structure ssl": "SSL_build_cert_chain", "x509_name unk cms_signerinfo retrieve certificate signer identifier associate specific cms_signerinfo structure si": "CMS_SignerInfo_get0_signer_id", "get long bio place socket c if be null , return socket": "BIO_get_fd", "x509_verify_param set expect dns hostname name clearing previously specify host name or name": "X509_VERIFY_PARAM_set1_host", "get const rsa_method const rsa return pointer rsa_method use by rsa": "RSA_get_method", "set const ui_method change default ui method one give": "UI_set_default_method", "ssl_ctx set give null terminate psk identity hint hint ssl context object ctx": "SSL_CTX_use_psk_identity_hint", "get long ssl indicate whether peer support secure renegotiation": "SSL_get_secure_renegotiation_support", "ssl_ctx clear exist chain associate current certificate ctx": "SSL_CTX_clear_chain_certs", "evp_cipher_ctx evp_sealupdate have exactly property as evp_encryptupdate evp_encryptfinal routine , as document evp_encryptinit manual page": "EVP_SealFinal", "set long long ssl set maximum size allow peer certificate chain ssl be size byte": "SSL_set_max_cert_list", "bio bio_method function return bio use method type": "BIO_new", "set ssl be use store application datum arg idx into ssl object": "SSL_set_ex_data", "read ssl try read num byte specify ssl into buffer buf": "SSL_read", "verify unk function perform public key verification operation use ctx": "EVP_PKEY_verify", "x509_verify_param x509_store_ctx x509_verify_param retrieve intenal pointer verification parameter associate ctx": "X509_STORE_CTX_get0_param", "write ssl write num byte buffer buf into specify ssl connection": "SSL_write", "ssl_session decrement reference count session remove ssl_session structure point by session free up allocate memory , if reference count have reach #": "SSL_SESSION_free", "accept bio serve two function": "BIO_do_accept", "accept bio_method return accept bio method": "BIO_s_accept", "verify log return human readable error string verification error n": "X509_verify_cert_error_string", "get unk function evp_pkey_ctx_set_app_data set retrieve opaque pointer": "EVP_PKEY_CTX_get_app_data", "bio_method return message digest bio method": "BIO_f_md", "rsa d2i_rsaprivatekey , decode encode pkc # rsaprivatekey structure": "i2d_RSAPrivateKey", "decrypt const bf_key unk bf_encrypt be low level function blowfish encryption": "BF_decrypt", "get unsigned long const return bn_blinding flag": "BN_BLINDING_get_flags", "const bignum bignum bignum compute p th power modulo m r p m": "BN_mod_exp", "const evp_pkey bio function evp_pkey_print_public , evp_pkey_print_params print out public , private or paramet component key pkey respectively": "EVP_PKEY_print_private", "unk log compute ripemd_160 message digest n byte d place md which must have space ripemd160_digest_length # byte output": "RIPEMD160", "set ssl_ctx set quiet shutdown flag ctx be mode": "SSL_CTX_set_quiet_shutdown", "ssl_ctx load certificate chain file into ctx": "SSL_CTX_use_certificate_chain_file", "bignum print stderr": "bn_print", "set ssl user_defined argument optionally define by ssl_ctx_set_msg_callback_arg or": "SSL_set_msg_callback_arg", "get const ssl return file descriptor which be link ssl": "SSL_get_fd", "set verify x509_store set verification callback but be implement as macro": "X509_STORE_set_verify_cb_func", "verify ui ui_dup_input_string , , ui_dup_input_boolean , unk ui_dup_error_string be basically as ui_add counterpart , except make copy string": "UI_dup_verify_string", "unk des_cblock produce # byte checksum base input stream via cbc encryption": "DES_cbc_cksum", "set long long ssl_session ssl_get_time , , ssl_get_timeout , ssl_set_timeout function be synonyms ssl_session counterpart": "SSL_set_time", "set unk ssl_ctx set default password callback call when pem certificate encryption": "SSL_CTX_set_default_passwd_cb", "asn1_string return length content x": "ASN1_STRING_length", "evp_pkey free up private key key": "EVP_PKEY_free", "long bio bio_ctrl , bio_callback_ctrl , bio_int_ctrl be bio control operation take argument various type": "BIO_ptr_ctrl", "md5_ctx md4_init , md4_update , md4_final , , md5_update , md5_final be analogous use md4_ctx md5_ctx structure": "MD5_Init", "assign rsa evp_pkey , evp_pkey_assign_dsa , evp_pkey_assign_dh , evp_pkey_assign_ec_key , evp_pkey_assign_poly1305 evp_pkey_assign_siphash set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_RSA", "cms_recipientinfo x509 cms_contentinfo add recipient recip cms_contentinfo enveloped datum structure cms as keytransrecipientinfo structure": "CMS_add1_recipient_cert", "get long unk ssl_session return time which session s be establish": "SSL_SESSION_get_time", "unk function initialize public key algorithm context use key pkey signing operation": "EVP_PKEY_sign_init", "x509_name unk cms_recipientinfo retrieve certificate recipient identifi associate specific cms_recipientinfo structure ri , which must be type cms_recipinfo_tran": "CMS_RecipientInfo_ktri_get0_signer_id", "hmac_ctx place message authentication code md , which must have space hash function output": "HMAC_Final", "be wrapper function ecdsa_sign_ex kinv rp set null": "ECDSA_sign", "delete x509_name_entry x509_name delete entry name position loc": "X509_NAME_delete_entry", "derive set peer evp_pkey unk function set peer key : normally be public key": "EVP_PKEY_derive_set_peer", "bignum const bignum bignum copy": "BN_copy", "const bignum bio bn_print_fp write hexadecimal encoding , lead negative number , bio or file fp": "BN_print", "const evp_cipher evp_cipher_ctx_type return type pass cipher or context": "EVP_CIPHER_type", "bignum bignum convert positive integer big_endian form length len s into bignum place ret": "BN_bin2bn", "obj_nid2obj , obj_nid2ln convert nid n asn1_object structure , long name short name respectively , or null if error occur": "OBJ_nid2sn", "set const evp_md unk macro set message digest type use signature": "EVP_PKEY_CTX_set_signature_md", "unk evp_cipher_ctx set unk parameter base pass cipher": "EVP_CIPHER_param_to_asn1", "const bignum bn_bn2dec return printable string contain hexadecimal decimal encoding respectively": "BN_bn2hex", "set connect ssl set ssl work client mode": "SSL_set_connect_state", "const ssl return # letter string indicate current state ssl object ssl": "SSL_state_string", "create x509_name_entry x509_name_entry , x509_name_entry_create_by_nid x509_name_entry_create_by_obj create return x509_name_entry structure": "X509_NAME_ENTRY_create_by_txt", "rsa evp_pkey , evp_pkey_set1_dsa , evp_pkey_set1_dh evp_pkey_set1_ec_key set key reference by pkey key": "EVP_PKEY_set1_RSA", "rsa_method initially , default rsa_method be openssl internal implementation , as return by": "RSA_PKCS1_SSLeay", "ssl_conf_ctx function allocate initialise ssl_conf_ctx structure ssl_conf function": "SSL_CONF_CTX_new", "get x509_name x509_name_get_index_by_obj retrieve next index match nid or obj after lastpos": "X509_NAME_get_index_by_NID", "x509 cms_signerinfo set signer certificate si signer": "CMS_SignerInfo_set1_signer_cert", "verify unk function initialize public key algorithm context use key pkey signature verification operation": "EVP_PKEY_verify_init", "get ssl_cipher const ssl return pointer ssl_cipher object contain description actually use cipher connection establish ssl object": "SSL_get_current_cipher", "get unsigned long x509_verify_param return flag param": "X509_VERIFY_PARAM_get_flags", "x509 evp_pkey pkcs12 parse pkcs12 structure": "PKCS12_parse", "ecdsa_sig free ecdsa_sig structure sig": "ECDSA_SIG_free", "encrypt use propagating cipher block chain mode use by kerbero v4": "DES_pcbc_encrypt", "get ssl_ctx const ssl return pointer ssl_ctx object , which ssl be create ssl_new 3": "SSL_get_SSL_CTX", "bio_method return buffer bio method": "BIO_f_buffer", "compute digital signature len byte message digest dgst use private key dsa place asn der encode sigret": "DSA_sign", "ssl decrement reference count ssl , remove ssl structure point by ssl free up allocated memory if reference count have reach #": "SSL_free", "set ssl_ctx set callback only ssl": "SSL_set_tmp_rsa_callback", "generate dsa generate prime p q generator g dsa store result dsa": "DSA_generate_parameters_ex", "bn_ulong bn_ulong bn_ulong bn_mul call bn_mul_normal , or optimize implementation if factor have size : be use if be # word long , bn_mul_recursive if be large than bn_mull_size_normal size be exact multiple word size , bn_mul_part_recursive other be large than bn_mull_size_normal": "bn_mul_comba8", "be bn_gencb bn_ctx const bignum bn_is_prime_fasttest_ex test if number p be prime": "BN_is_prime_ex", "get long be use register index application specific datum": "SSL_CTX_get_ex_new_index", "bn_mont_ctx bignum bignum perform montgomery reduction r r 1": "BN_from_montgomery", "unk log md2 , md4 , compute md2 , md4 , md5 message digest n byte d place md which must have space md2_digest_length md4_digest_length md5_digest_length # byte output": "MD5", "x509_store_ctx internally clean up x509_store_ctx structure": "X509_STORE_CTX_cleanup", "set x509 x509_store_ctx set certificate be vertifie ctx x": "X509_STORE_CTX_set_cert", "get bio ssl ssl_get_rbio return pointer bios read or write channel , which can be different": "SSL_get_wbio", "get dig evp_pkey function set pnid default message digest nid public key signature operation associate key pkey": "EVP_PKEY_get_default_digest_nid", "x509 ssl ssl_set0_chain , ssl_set1_chain , ssl_add0_chain_cert , ssl_add1_chain_cert , ssl_get0_chain_certs , ssl_clear_chain_cert , ssl_build_cert_chain , ssl_set_current_cert be similar except apply ssl structure ssl": "SSL_select_current_cert", "add asn1_object x509_name x509_name_add_entry_by_txt , x509_name_add_entry_by_nid add field whose name be define by string field , object obj or nid nid respectively": "X509_NAME_add_entry_by_OBJ", "unsigned long return early error code thread error queue without modify": "ERR_peek_error", "unk log compute mdc2 message digest n byte d place md which must have space mdc2_digest_length # byte output": "MDC2", "verify verifie signature sigbuf size siglen match give message digest dgst size len": "DSA_verify", "set unk macro set rsa pad mode ctx": "EVP_PKEY_CTX_set_rsa_padding", "get const ssl return name protocol use connection ssl": "SSL_get_version", "sha const evp_md evp_md2 , evp_md5 , , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha", "unk free component bn_recp , , if be create by bn_recp_ctx_new , structure": "BN_RECP_CTX_free", "set long rsa ssl_ctx set rsa key be use be rsa": "SSL_CTX_set_tmp_rsa", "need long ssl_ctx return 1 , if rsa key be need rsa_bas strength_limited exportable ciphersuite because rsa key keysize large than # bit be instal": "SSL_CTX_need_tmp_rsa", "get const evp_md , evp_get_digestbynid evp_get_digestbyobj return evp_md structure when pass digest name , digest nid or asn1_object structure respectively": "EVP_get_digestbyname", "x509 ssl ssl_ctx_use_certificate load certificate x into ctx , load x into ssl": "SSL_use_certificate", "evp_cipher_ctx initialize cipher contex ctx": "EVP_CIPHER_CTX_init", "asn1_object allocate initialize asn1_object structure": "ASN1_OBJECT_new", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha256", "generate bn_gencb dh generate diffie_hellman parameter can be share among group user , store -PRON- provide dh structure": "DH_generate_parameters_ex", "bignum truncate n bit number n": "BN_mask_bits", "ssl_ctx load one or more serverinfo extension byte array into ctx": "SSL_CTX_use_serverinfo", "verify ssl_ctx specifie location ctx , which ca certificate verification purpose be locate": "SSL_CTX_load_verify_locations", "const ssl_ctx check consistency private key correspond certificate load into ctx": "SSL_CTX_check_private_key", "write bio cms_contentinfo bio add appropriate mime header cms structure produce message": "SMIME_write_CMS", "const evp_pkey bio function evp_pkey_print_public , evp_pkey_print_private print out public , private or paramet component key pkey respectively": "EVP_PKEY_print_params", "set accept long bio can be use set chain bios which be duplicate prepende chain when incoming connection be receive": "BIO_set_accept_bios", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_sha384", "register error string libcrypto function": "ERR_load_crypto_strings", "dsa evp_pkey evp_pkey_get1_rsa , , evp_pkey_get1_dh evp_pkey_get1_ec_key return reference key pkey or null if key be correct type": "EVP_PKEY_get1_DSA", "x509 encode structure point by x into der format": "i2d_X509", "verify verifie signature sig size siglen be valid ecdsa signature hash value dgst size dgstlen use public key eckey": "ECDSA_verify", "set unk macro set rsa pss salt length len as name imply be only support pss padding": "EVP_PKEY_CTX_set_rsa_pss_saltlen", "set ssl_ctx set list available cipher ctx use control string str": "SSL_CTX_set_cipher_list", "get unk function return parameter associate generation operation": "EVP_PKEY_CTX_get_keygen_info", "set bio_method bio set method already exist bio": "BIO_set", "bio bio_read_filename , bio_write_filename , bio_rw_filename set file bio b file name reading , writing , append or read write respectively": "BIO_append_filename", "set bn_ctx const bignum bn_mont_ctx set up mont structure modulus m by precompute inverse value r": "BN_MONT_CTX_set", "set long long ssl add mode set via bitmask mode ssl": "SSL_set_mode", "const evp_cipher evp_cipher_ctx , evp_cipherupdate evp_cipherfinal_ex be function can be use decryption or encryption": "EVP_CipherInit_ex", "encrypt be rsa desx mode des": "DES_xcbc_encrypt", "decode block n character base # datum contain f store result t": "EVP_DecodeBlock", "const evp_cipher evp_cipher_ctx , evp_decryptupdate evp_decryptfinal_ex be correspond decryption operation": "EVP_DecryptInit_ex", "long ssl_ctx be synonym ssl_ctx_flush_session": "SSL_flush_sessions", "ssl_conf_ctx function clear flag context cctx": "SSL_CONF_CTX_clear_flags", "unload finish unload configuration module": "CONF_modules_unload", "set long long ssl_session set timeout value session s second tm": "SSL_SESSION_set_timeout", "set const dsa_method make meth default method dsa structure create later": "DSA_set_default_method", "const evp_pkey const evp_pkey function compare public key component paramter key b": "EVP_PKEY_cmp", "get const ssl_cipher return number secret bit use cipher": "SSL_CIPHER_get_bits", "set long ssl_ctx set callback fuction cb handling session ticket ssl context sslctx": "SSL_CTX_set_tlsext_ticket_key_cb", "const evp_md evp_md2 , evp_md5 , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_mdc2", "get const ssl_cipher return pointer name cipher": "SSL_CIPHER_get_name", "const ssl return string indicate current state ssl object ssl": "SSL_state_string_long", "set const rsa_method make meth default method rsa structure create later": "RSA_set_default_method", "unk engine evp_pkey function allocate public key algorithm context use algorithm specify pkey engine e": "EVP_PKEY_CTX_new", "add long x509 ssl_ctx add certificate x509 extra chain certificate associate ctx": "SSL_CTX_add_extra_chain_cert", "bignum bignum shift right by n bit place result r r n": "BN_rshift", "pende const ssl return number byte which be available inside ssl immediate read": "SSL_pending", "get read unk ssl ssl_ctx_get_read_ahead indicate whether read ahead have set or": "SSL_get_read_ahead", "unk set ssl_ctx set callback function , which be automatically call whenever session be negotiate": "SSL_CTX_sess_set_new_cb", "evp_cipher_ctx evp_sealfinal have exactly property as evp_encryptupdate evp_encryptfinal routine , as document evp_encryptinit manual page": "EVP_SealUpdate", "connect ssl ssl_connect_apiname initiate handshake server": "SSL_connect", "write bio attempt write len byte buf bio b": "BIO_write", "bn_ctx const bignum const bignum bignum reduce modulo m place non_negative remainder r": "BN_nnmod", "const crypto_threadid compare two thread id return zero equality , ie": "CRYPTO_THREADID_cmp", "read be variant des_read_pw provide buffer -PRON- if verify be set": "des_read_pw_string", "set const unk ssl_ctx set default method ssl object newly create ctx": "SSL_CTX_set_ssl_version", "get const ssl_cipher return stre which indicate protocol version first define cipher": "SSL_CIPHER_get_version", "x509_verify_param enable policy checking set acceptable policy set policy": "X509_VERIFY_PARAM_set1_policies", "set ssl_ctx set callback function ctx be use when dh parameter be require tmp_dh_callback": "SSL_CTX_set_tmp_dh_callback", "evp_cipher_ctx evp_openfinal have exactly property as evp_decryptupdate evp_decryptfinal routine , as document evp_encryptinit manual page": "EVP_OpenUpdate", "bio_method return base64 bio method": "BIO_f_base64", "x509_crl cms_contentinfo cms_add0_crl add crl crl cms": "CMS_add1_crl", "rsa engine allocate initialize rsa structure so engine be use rsa operation": "RSA_new_method", "add ui unk add prompt ui , as well as flag result buffer desire minimum maximum size result , count final nul character": "UI_add_input_string", "bn_ulong bn_ulong const bignum return remainder divide by w w": "BN_mod_word", "const evp_md evp_md_ctx behave way as evp_digestinit_ex except pass context ctx do have be initialize , always use default digest implementation": "EVP_DigestInit", "verify x509_store ssl_ctx ssl_ctx_set1_verify_cert_store set certificate store use certificate verification st": "SSL_CTX_set0_verify_cert_store", "get const unk ssl return function pointer method set ssl": "SSL_get_ssl_method", "const bignum bignum bignum bignum subtract b modulo m place non_negative result r": "BN_mod_sub", "ssl unk be similar except set support curve ssl structure ssl": "SSL_set1_curves_list", "assign ec_key evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , evp_pkey_assign_dh set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_EC_KEY", "evp_pkey_method free exist evp_pkey_method point by pmeth": "EVP_PKEY_meth_free", "evp_pkey encode key": "i2d_PrivateKey", "get be use create lock": "CRYPTO_get_new_dynlockid", "unk long err_lib_error_string , unk return library name , function name reason string respectively": "ERR_reason_error_string", "const bignum bignum shift leave by n bit place result r r 2 n": "BN_lshift", "encrypt macro implement two_key triple_de by reuse ks1 final encryption": "DES_ede2_cbc_encrypt", "read des_cblock call des_read_pw convert password des key by call des_string_to_key ; des_read_2password operate way as except generate two key by use des_string_to_2key function": "des_read_password", "find const evp_pkey_method find evp_pkey_method object identifier": "EVP_PKEY_meth_find", "ripemd160_ctx initialize ripemd160_ctx structure": "RIPEMD160_Init", "x509_store ssl ssl_set0_verify_cert_store , ssl_set1_verify_cert_store , ssl_set1_chain_cert_store be similar except apply ssl structure ssl": "SSL_set0_chain_cert_store", "bn_ctx bignum bignum take square place result r r 2": "BN_sqr", "cms_recipientinfo unk asn1_object unk size_t size_t cms_contentinfo add symmetric key key length keylen use wrap algorithm nid , identifier identifi length idlen optional value date , othertypeid othertype cms_contentinfo envelop datum structure cms as kekrecipientinfo structure": "CMS_add0_recipient_key", "const evp_cipher evp_cipher_ctx evp_encryptinit , evp_decryptinit behave similar way evp_encryptinit_ex , evp_decryptinit_ex evp_cipherinit_ex except ctx paramet do need be initialize always default cipher implementation": "EVP_CipherInit", "x509_verify_param set expect ip address ipasc": "X509_VERIFY_PARAM_set1_ip_asc", "asn1_string return type x , use standard constant such as unk": "ASN1_STRING_type", "verify verifie signature sig match give message digest dgst size len": "DSA_do_verify", "x509_verify_param ssl ssl_ctx_set1_param set verification parameter vpm ctx or ssl": "SSL_set1_param", "unsigned long value return by be address variable contain ia_32 processor capability bit vector as appear edx : ecx register pair after execute cpuid instruction eax 1 input value see intel application note #": "OPENSSL_ia32cap_loc", "set ssl set shutdown state ssl mode": "SSL_set_shutdown", "ecdsa_sig ecdsa_sig decode der encode ecdsa signature return decode signature newly allocate ecdsa_sig structure": "d2i_ECDSA_SIG", "create add object internal table": "OBJ_create", "unk set long long ssl_ctx set size internal session cache context ctx t": "SSL_CTX_sess_set_cache_size", "blind bn_ctx rsa turn blind key rsa generate random blinding factor": "RSA_blinding_on", "bio return socket bio use sock close_flag": "BIO_new_socket", "find bio bio search bio give type chain , start bio b": "BIO_find_type", "set long long bio set socket bio b fd close flag close_flag": "BIO_set_fd", "x509_name bio print out name bp indent each line by obase character": "X509_NAME_print", "bignum bignum exchange value b": "BN_swap", "evp_md_ctx retrieve digest value ctx place md": "EVP_DigestFinal_ex", "set ssl_ctx callback be set use function or ssl_set_psk_client_callback": "SSL_CTX_set_psk_client_callback", "bn_ulong return number significant bit word": "BN_num_bits_word", "long long ssl clear option set via bitmask option ssl": "SSL_clear_options", "unk engine function allocate public key algorithm context use algorithm specify by identifi engine e": "EVP_PKEY_CTX_new_id", "set nid unk set ec curve ec paramet generation nid": "EVP_PKEY_CTX_set_ec_paramgen_curve_nid", "unk function initialize public key algorithm context use key pkey key genration operation": "EVP_PKEY_keygen_init", "assign dh evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , , evp_pkey_assign_ec_key , evp_pkey_assign_poly1305 evp_pkey_assign_siphash set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_DH", "sign ecdsa_sig compute digital signature dgst_len byte hash value dgst use private key eckey optional pre_computed value kinv rp": "ECDSA_do_sign_ex", "size_t const evp_pkey evp_pkey_get0_hmac , , evp_pkey_get0_siphash , evp_pkey_get0_rsa , evp_pkey_get0_dsa , evp_pkey_get0_dh evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_poly1305", "add const bignum bignum bignum bignum add b modulo m place non_negative result r": "BN_mod_add", "set close long bio set bio b close flag flag": "BIO_set_close", "const evp_md evp_md2 , , evp_sha , evp_sha1 , evp_sha224 , evp_sha256 , evp_sha384 , evp_sha512 , evp_mdc2 evp_ripemd160 return evp_md structure md2 , md5 , sha , sha1 , sha224 , sha256 , sha384 , sha512 , mdc2 ripemd160 dig algorithm respectively": "EVP_md5", "encrypt des_cblock unk macro be provide perform two_key triple_de encryption by use ks1 final encryption": "DES_ecb2_encrypt", "return one letter string indicate type alert specify by value": "SSL_alert_type_string", "clean up openssls internal object table : should be call before application exit if object be add use obj_create": "OBJ_cleanup", "bignum bn_zero , bn_set_word set value 0 , # w respectively": "BN_one", "long ssl return 1 , if rsa key be need , rsa_bas strength_limited exportable ciphersuite because rsa key keysize large than # bit be instal": "SSL_need_tmp_rsa", "x509_verify_param enable policy checking add policy acceptable policy set": "X509_VERIFY_PARAM_add0_policy", "set unk macro set dh generator gen dh paramet generation": "EVP_PKEY_CTX_set_dh_paramgen_generator", "const unk evp_md_ctx hash cnt byte datum d into signature context ctx": "EVP_SignUpdate", "result unk ui return pointer result buffer associate information index by i": "UI_get0_result", "file lhash print number entry each bucket hash table": "lh_node_stats", "ssl wait handshake take place": "SSL_do_handshake", "bn_ulong bn_ulong bn_ulong bn_ulong bn call bn_mul_normal , or optimize implementation if factor have size : bn_mul_comba8 be use if be # word long , bn_mul_recursive if be large than bn_mull_size_normal size be exact multiple word size , bn_mul_part_recursive other be large than bn_mull_size_normal": "mul", "ocsp_singleresp extract field single reason , revtime , thisupd nextupd": "OCSP_single_get0_status", "set bn_ulong bignum bn_zero , bn_one set value 0 , # w respectively": "BN_set_word", "write evp_pkey file pem_write_bio_pkcs8privatekey_nid write out private key as pkc # encryptedprivatekeyinfo however use pkc # v1 or pkc # encryption algorithm instead": "PEM_write_PKCS8PrivateKey_nid", "dh const evp_pkey evp_pkey_get0_hmac , evp_pkey_get0_poly1305 , evp_pkey_get0_siphash , evp_pkey_get0_rsa , evp_pkey_get0_dsa , evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_DH", "set get ssl_ctx set callback function which be call , whenever client propose resume session but session could be find internal session cache see ssl_ctx_set_session_cache_mode 3": "SSL_CTX_sess_set_get_cb", "get bio perform bios get operation place datum buf": "BIO_gets", "assign unk evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , evp_pkey_assign_dh , evp_pkey_assign_ec_key , evp_pkey_assign_siphash set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_POLY1305", "x509 long x509 be similar d2i_x509 but input be expect consist x509 certificate follow by auxiliary trust information": "d2i_X509_AUX", "read bio attempt read len byte bio b place datum buf": "BIO_read", "bio_method return ssl bio method": "BIO_f_ssl", "remove ssl_session ssl_ctx ssl_add_session be synonyms ssl_ctx counterpart": "SSL_remove_session", "size_t evp_md_ctx verifie datum ctx against signature sig length siglen": "EVP_DigestVerifyFinal", "get x509_store_ctx return depth error": "X509_STORE_CTX_get_error_depth", "unk buf_strdup , buf_strndup , , buf_strlcpy , buf_strlcat buf_strnlen be equivalent standard c library function": "BUF_memdup", "const evp_md return nid public key signing algorithm associate digest": "EVP_MD_pkey_type", "bio cms_contentinfo bio return stream filter bio chain base cms": "BIO_new_CMS", "hash unsigned long const crypto_threadid return numeric value usable as hash_table key": "CRYPTO_THREADID_hash", "build ssl_ctx build certificate chain ctx normally use chain store or verify store if chain store be set": "SSL_CTX_build_cert_chain", "unsigned long err_get_error_line_data , err_peek_last_error_line_data store additional datum flag associate error code datum flag , unless be null": "ERR_peek_error_line_data", "x509_verify_param add name as additional reference identifer can match peer certificate": "X509_VERIFY_PARAM_add1_host", "set buf_mem bio set internal buf_mem structure bm set close flag c , be c should be either bio_close or bio_noclose": "BIO_set_mem_buf", "cmd ssl_conf_ctx return type value cmd refer": "SSL_CONF_cmd_value_type", "rsa decrypt flen byte use private key rsa store plaintext": "RSA_private_decrypt", "get long ssl_ctx return currently use cache mode": "SSL_CTX_get_session_cache_mode", "crypto_threadid record currently_execute thread identifier into give identifi object": "CRYPTO_THREADID_current", "dh free dh structure component": "DH_free", "const ui_method const ui_method ui change ui method associate give ui": "UI_set_method", "const evp_md evp_dss return evp_md structure sha sha1 digest algorithm but use dss signature algorithm": "EVP_dss1", "bio free up single bio , bio_vfree free up single bio but do return value": "BIO_free", "expand bignum bignum ensure b have enough space bit bit number": "bn_expand", "set verify x509_store_ctx set verification callback ctx verify_cb overwrite exist callback": "X509_STORE_CTX_set_verify_cb", "prompt ui be helper function can be use create prompt two piece information : description name": "UI_construct_prompt", "compute dh bignum compute share secret private dh value dh other party public value pub_key store key": "DH_compute_key", "encrypt implement cfb mode des 64bit feedback": "DES_cfb64_encrypt", "set accept long bio use stre name set accept port": "BIO_set_accept_port", "add add just asn1 object module": "ASN1_add_oid_module", "get verify const ssl return verification mode currently set ssl": "SSL_get_verify_mode", "be fast version unix crypt function": "DES_fcrypt", "ssl_ctx set support curve ctx string list": "SSL_CTX_set1_curves_list", "put bio attempt write null terminate string buf bio b": "BIO_puts", "disable configuration": "OPENSSL_no_config", "ocsp_singleresp unk return ocsp_singleresp structure bs correspond index idx": "OCSP_resp_get0", "set bio set behaviour memory bio b when be empty": "BIO_set_mem_eof_return", "const dsa d2i_dsaprivatekey , decode encode dsa private key component": "i2d_DSAPrivateKey", "unk must be call end encode operation": "EVP_EncodeFinal", "get verify const ssl_ctx return verification depth limit currently set ctx": "SSL_CTX_get_verify_depth", "encrypt be as des_cfb64_encrypt use output feed back mode": "DES_ofb64_encrypt", "unk asn1_object , obj_ln2nid , obj_sn2nid return correspond nid object o , long name ln or short name sn respectively or nid_undef if error occur": "OBJ_obj2nid", "ec_key evp_pkey evp_pkey_get1_rsa , evp_pkey_get1_dsa , evp_pkey_get1_dh return reference key pkey or null if key be correct type": "EVP_PKEY_get1_EC_KEY", "locking_function must be able handle up different mutex lock": "CRYPTO_num_locks", "get can be use assign library number user library runtime": "ERR_get_next_error_library", "get long unk ssl_session return timeout value set session s second": "SSL_SESSION_get_timeout", "md4_ctx md4_init , md4_update , , md5_init , md5_update , md5_final be analogous use md4_ctx md5_ctx structure": "MD4_Final", "mdc2_ctx place message digest md , which must have space mdc2_digest_length # byte output , erase mdc2_ctx": "MDC2_Final", "unk encode inl byte datum find buffer point by": "EVP_EncodeUpdate", "get const ssl return quiet shutdown setting ssl": "SSL_get_quiet_shutdown", "bn_blinding const bignum const bignum allocate bn_blinde structure copy ai value into newly create bn_blinding object": "BN_BLINDING_new", "x509 file be similar i2d_x509 except write encode structure x bio bp return # success # failure": "i2d_X509_fp", "get const ssl return pointer name ssl_cipher list ssl priority": "SSL_get_cipher_list", "bn_mont_ctx free component bn_mont_ctx , , if be create by bn_mont_ctx_new , structure": "BN_MONT_CTX_free", "read cms_contentinfo bio bio parse message format": "SMIME_read_CMS", "evp_cipher_ctx , evp_decryptfinal evp_cipherfinal be identical evp_encryptfinal_ex , evp_decryptfinal_ex evp_cipherfinal_ex": "EVP_EncryptFinal", "bignum free component bignum , if be create by bn_new , structure": "BN_free", "hmac_ctx initialize hmac_ctx structure hash function evp_md key key which be key_len byte long": "HMAC_Init", "get const rsa_method return pointer current default rsa_method": "RSA_get_default_method", "get unk ssl return servername extension value specify type if provide client hello or null": "SSL_get_servername", "ssl_ctx load one or more serverinfo extension file into ctx": "SSL_CTX_use_serverinfo_file", "asn1_string return internal pointer datum x": "ASN1_STRING_data", "const evp_md_ctx evp_md_ctx can be use copy message digest state out": "EVP_MD_CTX_copy_ex", "const ecdsa_sig create der encode ecdsa signature sig write encode signature pp note : if pp be null i2d_ecdsa_sig return expect length byte der encode signature": "i2d_ECDSA_SIG", "x509_store x509_store_ctx set up ctx subsequent verification operation": "X509_STORE_CTX_init", "set x509_store_ctx look up set default verification method name": "X509_STORE_CTX_set_default", "x509_crl cms_contentinfo cms_add1_crl add crl crl cms": "CMS_add0_crl", "dsa const evp_pkey evp_pkey_get0_hmac , evp_pkey_get0_poly1305 , evp_pkey_get0_siphash , evp_pkey_get0_rsa , , evp_pkey_get0_dh evp_pkey_get0_ec_key return reference key pkey or null if key be correct type but reference count return key be incremente so must be free up after": "EVP_PKEY_get0_DSA", "get retry bio return reason special condition if pass relevant bio , example as return by bio_get_retry_bio": "BIO_get_retry_reason", "set file bio set fp file bio fp": "BIO_set_fp", "assign ec_key evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , evp_pkey_assign_dh , , evp_pkey_assign_poly1305 evp_pkey_assign_siphash set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_EC_KEY", "set asn1_time set asn1_time structure s time represent by string str which must be appropriate asn time format example yymmddhhmmssz or yyyymmddhhmmssz": "ASN1_TIME_set_string", "fp file be , except output go file": "ERR_print_errors_fp", "encrypt des_ede3_cfb64_encrypt be as des_cfb64_encrypt except triple_des be use": "DES_ede2_cfb64_encrypt", "const evp_md evp_md_ctx_block_size return block size message digest when pass evp_md or evp_md_ctx structure": "EVP_MD_block_size", "dsa allocate initialize dsa structure": "DSA_new", "add x509_name x509_name_add_entry_by_txt , x509_name_add_entry_by_obj add field whose name be define by string field , object obj or nid nid respectively": "X509_NAME_add_entry_by_NID", "add double mix num byte buf into prng state": "RAND_add", "set long ssl_ctx server application must call function if want be able provide client ocsp certificate status response": "SSL_CTX_set_tlsext_status_cb", "add ssl_ctx add custom extension tls server extension type ext_type callback add_cb , free_cb parse_cb": "SSL_CTX_add_server_custom_ext", "ssl ssl_ctx_use_certificate_asn1 load asn1 encode certificate memory location d into ctx , load asn1 encode certificate into ssl": "SSL_use_certificate_ASN1", "set evp_cipher_ctx enable or disable padding": "EVP_CIPHER_CTX_set_padding", "const evp_cipher evp_cipher_ctx , evp_decryptinit evp_cipherinit behave similar way evp_encryptinit_ex , evp_decryptinit_ex evp_cipherinit_ex except ctx paramet do need be initialize always default cipher implementation": "EVP_EncryptInit", "compress cms_contentinfo bio create return cms compresseddata structure": "CMS_compress", "evp_pkey evp_pkey decode private key use algorithm type": "d2i_PrivateKey", "const bignum return bignum constant value #": "BN_value_one", "size_t generate default path random seed file": "RAND_file_name", "assign dh evp_pkey evp_pkey_assign_rsa , evp_pkey_assign_dsa , evp_pkey_assign_ec_key set reference key key however supply key internally so key be free when parent pkey be free": "EVP_PKEY_assign_DH", "const dsa_method initially , default dsa_method be openssl internal implementation , as return by": "DSA_OpenSSL", "free previously loaded error string": "ERR_free_strings", "long ssl_ctx return current number session internal session cache": "SSL_CTX_sess_number", "function add standard openssl configuration module internal list": "OPENSSL_load_builtin_modules", "decrypt unk function initialize public key algorithm context use key pkey decryption operation": "EVP_PKEY_decrypt_init", "get const ui_method ui return ui method associate give ui": "UI_get_method", "set bignum set bit n # 1 n": "BN_set_bit", "sha_ctx initialize sha_ctx structure": "SHA1_Init", "evp_pkey evp_md_ctx verify datum ctx use public key pkey against siglen byte sigbuf": "EVP_VerifyFinal", "const evp_md compute message authentication code n byte d use hash function evp_md key key which be key_len byte long": "HMAC", "bignum be use destroy sensitive datum such as key when be no longer need": "BN_clear", "dsa engine allocate initialize dsa structure so engine be use dsa operation": "DSA_new_method", "unsigned long x509_name bio print human readable version nm bio out": "X509_NAME_print_ex", "x509_verify_param ssl_ctx ssl_get0_param retrieve internal pointer verification parameter ctx or ssl respectively": "SSL_CTX_get0_param", "ssl_conf_ctx function free up context cctx": "SSL_CONF_CTX_free", "derive size_t unk derive share secret use ctx": "EVP_PKEY_derive", "unk bn_ctx bn_blinding bignum bn_blinding_convert be wrapper function bn_blinding_convert_ex bn_blinding_invert_ex r set null": "BN_BLINDING_invert", "evp_cipher_ctx evp_openupdate have exactly property as evp_decryptupdate evp_decryptfinal routine , as document evp_encryptinit manual page": "EVP_OpenFinal", "set long long ssl_ctx session cache by set operational mode ctx mode": "SSL_CTX_set_session_cache_mode", "bn_ctx allocate initialize bn_ctx structure": "BN_CTX_new", "set long long ssl_ctx set timeout newly create session ctx t": "SSL_CTX_set_timeout", "bn_mont_ctx bn_mont_ctx bn_mont_ctx copy bn_mont_ctx": "BN_MONT_CTX_copy", "x509 ssl_ctx ssl_ctx_add0_chain_cert append single certificate x509 chain associate current certificate ctx": "SSL_CTX_add1_chain_cert", "generate const bignum bignum generate pseudo_random prime number bit length bit": "BN_generate_prime_ex", "const evp_md evp_md_ctx initialize sign context ctx default implementation digest type": "EVP_SignInit", "unk unk duplicate context ctx": "EVP_PKEY_CTX_dup", "const evp_pkey return actual oid associate pkey": "EVP_PKEY_id", "evp_pkey function allocate empty evp_pkey structure which be use by openssl store private key": "EVP_PKEY_new", "asn1_object , obj_nid2ln obj_nid2sn convert nid n asn1_object structure , long name short name respectively , or null if error occur": "OBJ_nid2obj"}