compile ready execute
should be free after point
param be
api return compile null case error
initial state lookup
param be
api return initial state
param be
param be
api return constant if constant case error
param be start point
param be target point null
api return target state null case error
allow only
param be
param be start point
param allow param
param be target point null
param be minimum successive param
param be input stre associate param
create first target state param state param target state
param be maximum successive param
param be param associate param
api return target state null case error
param be
param be start point
param be target point null
param be input stre associate param
param be second input stre associate param
param be minimum successive param
param be maximum successive param
param be param associate param
api return target state null case error
param be
param be start point
param be target point null
param be param associate param
api return target state null case error
create counter
param be
create first target state param state param target state activate by input value whose number be max
param be minimal value counter
param be maximal value counter
api return counter number constant case error
param be
param be start point
param be target point null
param be param associate param
api return target state null case error
create first target state param state param target state which increment param provide
param be
create first target state param state param target state activate by input value whose number be max
param be start point
api return target state null case error
param be target point null
param be
param be start point
param be target point null
param be first input string associate param
param be second input stre associate param
api return target state null case error
create first target state param state param target state
param be
param be start point
param be target point null
param be param pass param callback function
param be input stre associate param
param be minimum successive param
create first target state param state param target state which be allow only if param be within range
param be maximum successive param
param be param associate param
api return target state null case error
param be
param be start point
param be target point null
param be input stre associate param
param be second input stre associate param
param be minimum successive param
param be maximum successive param
param be param associate param
api return target state null case error
create disconnected state
param be
param be
api return state null case error
param be start point
param be target point null
param be input stre associate param
api return target state null case error
param be
param be param pass param callback function
param be start point
param be target point null
param be first input string associate param
param be second input stre associate param
create first target state param state param target state activate by value
create first target state param state param target state activate by value
create first target state param state param target state activate by input value whose number be max , moreover can only be cross
create first target state param state param target state activate by input value whose number be max , moreover can only be cross
api return target state null case error
make param final param
create first target state param state param target state activate by value except
param be
param be param
api return constant case error
param be param pass param callback function
param be
api return object null case failure
api be use cleanup thread related data library processing have end
api be use reclaim resource associate struct
param be simple mutex
case call api before call api avoid leak report
api be use reclaim resource associate reentrant mutex
param be reentrant mutex
api return thread global state null case error
may crash application
api be use initialize thread related data library
api return current thread -PRON- would number
api be call retrieve global state thread
be sometimes hard guess
library may use without
api check whether current thread be main thread
api return constant
api be use take param lock library
api be use lock
api be use unlock
param be simple mutex
param be simple mutex
api find current thread -PRON- would number be likely be break platform use as specification do not mandate param be integer type
api return simple mutex pointer null case error
api be use struct use synchronize access datum
api return reentrant mutex pointer null case error
api be use reentrant mutex use synchronize access datum
api be use lock param
param be reentrant mutex
param be param lock thus useful synchronize access datum structure may be manipulate recursive fashion
api be use unlock param
param be reentrant mutex
api be use release param lock library
create parser context file content
param be param
api return parser context null
param be free form string describe param , null
initialize fast lookup close name
be not reentrant
call api before processing case use multithreaded program
parser input input stack
param be parser context
api return input remove
parser input input stack
param be parser context
param be parser input
api return constant case error , index stack otherwise
element name name stack
param be parser context
api return name remove
be provide by default
automatic support compress
element name name stack
param be parser context
param be element name
api return constant case error , index stack otherwise
element stack
param be parser context
api return remove
element stack
param be element
param be parser context
param be pointer string value
api return constant case error , index stack otherwise
api return constant if correct constant otherwise
check value conform
append char value array
be somewhat deprecate , be remove second
param be ignore , compatibility
append char value array
api return number write
param be param
param be param
param be char value
param be char value
param be param
api return parser context null
api return parser context null
api return number write
param be pointer array
create parser context file content
param be pointer array
param be possible param target uri
create parser context param
param be pointer char array
param be param array
api return parser context null
create parser context file content
param be param
param be combination
current reference rfc constant , currently constant
be provide by default
automatic support compress
param language language constant
extended language
short constant code
reserve future use constant
sometimes follow by
register language
permanently reserve script
select constant code constant
constant code
constant code
m. constant code variant constant
register variant extension constant _ rrb
be provide by default
automatic support compress
reserve private use digit
be provide by default
create parser context external automatic support compress
constant _ constant param
_ param
_ param
_ param
api return parser context null
param be parser context
_ sound still allow irregular param user code parser do not cope extension could be but not interoperable anyway
param be pointer length char read
api return current char value length
api be deprecate , always process content api
behavior can conveniently be produce by normalize line break input , before parse . _ rrb
current char value , may actually span multiple byte input buffer
remove major release
param be parser context
param be param decode _ lrb _ byte
param be combination constant
_ rrb _ , constant no size limit
api return newly string do
caller must deallocate
param be param , constant
param be
param be param , constant
param be
param be param , constant
param be last
attribute error
param be parser context
param be param information
implement end line
param be
free param stream
callback function use inherit
be remove point
param be parser context
param be param pointer
param be unicode character
api return constant  , param otherwise
parse name
not raw input
param be parser context
api return name null
seem not use anymore , handling be do api
not raw input
param be parser context
constant param handling wherever external parse literal value internal parse contain either literal param sequence literal , processor must pass application single character
parse prefix declaration
_ _ combiningchar
api return name
seem not use anymore , handling be do api
letter digit
not raw input
parse qualified name
seem not use anymore , handling be do api
param be parser context
param be
api return local part , param be update get prefix if
create input stream base
param be parser context
param be pointer
api return input stream null
param be parser context
create input stream base file
param be param use as
api return input stream null case error
create input stream structure
param be parser context
api return input stream null
param be parser context
param be memory param
create input stream base memory param
api return input stream
skip char input char
param be parser context
param be parser context
api return parse null
value have be free by caller
attribute must have be declare
param must be type declare
parse attribute attribute
text refer directly indirectly attribute param must not contain
name attribute value can not contain direct indirect reference external
be independently as definition
param be parser context
api return attribute name , param value
param be use store param attribute
param be parser context
no element type may have one -PRON- would attribute specify
attribute should be treat by param parser declare
PRON- would attribute must have declare default imply require
value must match value -PRON- would attribute
parse attribute list element
api return attribute type
parse escape pure raw content
param be parser context
value type must match
value type must match
name must not appear as value type
value type must match name , value type must match name
parse attribute list element
i. , -PRON- would value must uniquely identify element which bear
value type must match name , value type must match name
parse value attribute note
name must match name unparsed declare
name must match value -PRON- would attribute element
parser not , be later api
PRON- would validity constraint attribute value syntax be check api value type -PRON- would must match name
param be param build
constant param
append normalize value
before value attribute be pass application check validity , processor must normalize as follow
param be parser context
parse section
param be parser context
_ rrb _
param be int indicate
_ rsb _ _ rsb
param be parser context
api return value parse , constant case error
param be parser context
skip comment _ _ ... . param spec say compatibility , stre _ _ must not occur within comment
parse content
parse attribute default declaration
param be parser context
declare default param must meet lexical constraint declare attribute type
require imply
param be parser context
api return constant
param receive possible fix default param attribute
parse declaration
param be parser context
instance attribute must match default param
param be parser context
_ lrb
mark end section
parse element , be highly recursive element
_ lrb _
_ rrb
content name element param must match element type param
_ lrb _
_ character reference be process by append referenced character attribute value _ reference be process by recursively process text _ whitespace character be process by append normalize value , except only single be append sequence part external parse literal value internal parse _ character be process by , processor must process normalize attribute value by discard lead trail space character , by replace sequence space character by single space character
_ rrb
_ lrb _
_ rrb _ _ rrb
_ lrb _
_ rrb _ _ rrb
param be parser context
parse declaration mix element content lead _ lrb
apply param text must be properly nest parenthesized group
api return describe element
param be input use current , need boundary check
param be parser context
param be param element define
api return type element content param
parse element declaration
name type declaration must match element type root element
param be parser context
api return type element , constant case error
parse declaration element content either mixed , case empty be directly api
PRON- mixed
_ lrb _
name _ rrb _
no element type may be declare
_ rrb
param be parser context
_ rrb _ _ lrb _
be store
param be element content pointer
applie name must not appear single param declaration
api return list describe element choice
param be input use current , need boundary check
parse encode name
param be parser context
api return encode name value null
param be parser context
parse encode declaration
api return encode value null
encode conversion filter
param be parser context
param be parser context
parse end
parse reference declaration
be say
ndata name name must match declare name
declaration param must precede reference
character refer use character reference must match char
text should not be empty
neither first nor last param character text should be
reference must not contain name unparsed
param be parser context
api return if find , null otherwise
similarly , declaration general must precede reference which appear default value param declaration
param be parser context
api return parse reference substitute null
parse enumerate attribute type
name _ lrb _
name _ rrb _
parse value declaration
_ rrb _ , attribute must be specify element type param declaration
may be represent use string
_ lrb _
parse reference declaration
must , compatibility , be escape use
parse declaration mix element content lead _ lrb _ space have be skip api mix
_ lrb _
param be copy original value
param processor be not obligate read process declaration
be param constraint
character reference
rule must be declare yes
param be parser context
api return constant
parse attribute type
without , only internal which contain no param reference , yes , name give reference must match declaration , except param need not declare follow
_ lrb _
param be param build
_ lrb _
_ rrb _ _ rrb
value type must match one declaration
param be parser context
api return attribute build while parse
param be parser context
param be receive
param be indicate
parse declaration external
param be parser context
param be external identifier
api return function return second case param receive , be param be be possible return null have param set
param be system identifi _ lrb _
parse external -PRON- would -PRON- would note
interact badly since can generate
parse declaration
param be parser context
comment param text must be properly nest declaration
internal , param reference can occur only declaration can occur , not within declaration
parse optional field
comment s. param be parser context
parse name
param be parser context
api return name parse null
letter digit
parse specific
param be parser context
param be parser context
api return parse null
param be parser context
parse attribute type
parse declaration
name _ lrb _
hence be actually constant choice
param be parser context
name _ rrb _ _ rrb
api return attribute build while parse
system see note api
value type must match one name include declaration
name declaration must be declare
declaration param must precede reference
parse declaration content be directly by be content as input stream
misleading but be
be say
param be parser context
external external param no
parse processing instruction
declaration param must precede reference ... param reference may only appear
_ rrb _ _ rrb
_ _
combiningchar name
param be parser context
parse name
param be parser context
name _ _ rrb
api return name null
param be parser context
api return parse null
param be parser context
parse return string
api return stre parser null
deprecate , be remove binary compatibility
lead part have already parse
param be parser context
param be parser context
_ lrb _
parse start either rule element
case not parse char
support be still
be old param work specify , may still rely
_ _ lrb _
remove library be remove binary compatibility
no attribute name may appear param
no attribute name may appear param
param be parser context
api return element name parse
parse literal
param be parser context
api return parse null
parse must not contain recursive reference , either directly indirectly
parse declaration header external
api return constant  , but no value be specify attribute
param be parser context
parse literal
parse version
parse declaration
parse reference content , depend api , may param call api
without , only internal which contain no param reference , yes
declaration must have value no
tandalone _ rrb _ _ rrb _ _ rrb _
param be parser context
api return version string
parse version value
practice allow
param be parser context
_ attribute default value , _ attribute value subject , attribute appear value which change as result , _ element type element content
api return string give version number , null
parse declaration header
param be parser context
declaration param must precede reference
misleading but be
external external param no
param be parser context
declaration param must precede reference ... param reference may only appear
may have be detect current input stream handling be do accordingly
_ include literal value _ include as paramet reference within
remove , deprecate ... test be do directly content parse api
param be parser context
api remove use input parser
current input point by param come end return char
param be parser input
api return current parser context
param be parser context
param be parser context
param be parser param fragment
param stream which be stack previous one
api return constant case error index param stack
parse name but without consume input need rollback case
param be parser context
api return name parse null
use only
seem deprecate , only use default part api
letter digit
param be valid function
skip character find point input stream
param be parser context
api return number space char skip
parse utf8 encode qualified param string
param be parser context
param be parser context
param be
api return local part , param be update get prefix if
param be parser context
set function call call back
param be pointer begin char
param be pointer length char read
api return current char value length
finished process
take string content process adequate
param be parser context
parse must not contain recursive reference , either directly indirectly
param be input string
param be input string
caller must deallocate
param be parser context
param be stre length
param be combination constant
param be combination constant
api return newly string do
current char value , may actually span multiple byte input buffer
api return newly string do
take string content process adequate
caller must deallocate
_ _
param be parser context
combiningchar name
param be encode value
param be param , constant
api return constant case success , constant otherwise
param be parser context
param be param , constant
param be param stream
param be param , constant
param be param , constant
param be encode param
api return constant case success , constant otherwise
param be param , constant
param be param , constant
param be parser context
param be encode param
api return constant case success , constant otherwise
input function
param be validation context
register attribute declaration become
param be pointer
param function
param be element param
param be attribute param
param be attribute prefix
param be attribute param
reference must not contain name unparsed
input function
name give reference must match declaration , except param need not declare follow
may have be detect current input stream handling be do accordingly
without , only internal which contain no param reference , yes
param be attribute default param
param be attribute default value
api return null if not , otherwise attribute
register element declaration
param be validation context
param be pointer
param be
param be param
param be element param
param be element param null
api return null if not , otherwise
param be validation context
param be pointer
register -PRON- would declaration
param be param name
param be validation context
register declaration
param be pointer
api return null if not , otherwise
param be attribute holding -PRON- would
param be param
param be identifi null
param be system identifi null
api return null if not , otherwise
register declaration
param be validation context
param be pointer
param be param name
param be attribute holding
api return null if not , otherwise
build copy attribute param
param be attribute param
api return null case error
build copy element content description
param be own element declaration
param be element content pointer
api return null case error
build copy element content description
deprecate , use api instead
param be element content pointer
api return null case error
build copy element param
param be element param
api return null case error
copy attribute
param be copy
api return create null case error
build copy param
param be param
api return null case error
create initialize attribute
param be param null
api return create null case error
content attribute declaration as definition
param be buffer output
param be attribute declaration
content attribute param as definition
param be buffer output
param be attribute table
content element declaration as definition
param be buffer output
param be element table
param be buffer output
content element param as definition
param be element table
content declaration as definition
param be buffer output
param be declaration
content param as definition
param be buffer output
param be table
deallocate memory use by hash param
param be attribute table
free element content structure
whole be remove
param be own element declaration
param be element content free
free element content structure
whole be remove
deprecate , use api instead
param be element content free
deallocate memory use by element hash param
param be element table
free attribute
param be free
deallocate memory use by -PRON- would hash param
param be -PRON- would table
deallocate memory use by hash param
param be table
deallocate memory use by hash param
param be table
free validation context structure
param be validation context free
search description attribute element
param be pointer search
param be element param
param be attribute param
api return if find null
search description element
param be pointer search
param be element param
search description
api return if find null
param be pointer search
param be param
api return if find null
search description qualified attribute element
param be pointer search
param be element param
param be attribute param
param be attribute param
api return if find null
search description element
param be pointer search
param be element param
param be element param
search attribute declare give param
api return if find null
param be pointer
param be param value
api return null  would
find set reference supply param
param be pointer
param be param value
api return null  - PRON - would
param be
determine whether attribute be type -PRON- would
case parse parser , -PRON- would detection be do systematically
param be element carry attribute
param be attribute
api return constant depending lookup result
case have be do
param be
param be element param
determine whether attribute be type
param be
api return constant if no , constant
case have be simple , otherwise use
param be element carry attribute
param be param null
param be attribute
element content structure
param be param element content
param be
api return constant depending lookup result
api return null if not , otherwise element content structure
deprecate api
element content structure
param be param null
param be param element content
api return null if not , otherwise element content structure
validation context structure
api return null if not , otherwise validation context structure
param be
remove give attribute -PRON- would table maintain internally
param be attribute
api return constant
remove give attribute table maintain internally
param be
param be attribute
api return constant
param be output buffer
param be buffer param
param element param definition intend debug api
param be element table
deprecate , unsafe , use api
param be output buffer
param be element table
build associated content element
param be validation context
param be element declaration
api return constant case success , constant case error
param be validation context null
param be
declaration , update _ valid accordingly
param be
param be attribute param
param be attribute param
list potential allow by content
api return normalize string
param be element content
param be constant
param be array store list param
param be pointer number element list
param be size array
api return number element list , constant case error
param be constant
param be element insert after
api return list authorize insert within while respect validity constraint force by
param be element insert param
param be array store list param
do validation relate extra step attribute value
param be size array
api return number element list , constant case error
param be
if function return value max caller be invite grow receive array retry
param be
param be attribute param
param be attribute param
do validation relate extra step attribute value
point be define use following way
insert before
api _ lrb _ , _ , ... replace
api _ lrb _ _ , , ... insert param
api _ lrb _ _ , _ , ... prepend
api _ lrb _ null , _ , append
api _ lrb _ _ last , null , ... pointer element param be insert begin array not nee be free
processor must process normalize attribute param by discard lead trail space character , by replace sequence space character by single space character
param be validation context
api return normalize string
processor must process normalize attribute param by discard lead trail space character , by replace sequence space character by single space character
param be instance
param be attribute definition
api return constant if valid constant otherwise
validate single attribute definition basically do follow check as describe by param
_ _ _ matching be do separately
value param must match name , value param must match name
validate give attribute param match proper value param -PRON- would must match name
param be attribute param
value param must match name , value param must match name
value param must match
value param must match
param be attribute param
api return constant if valid constant otherwise
validate internal external validate
param be validation context
param be instance
validate instance basically instance do check describe by
api return constant if valid constant otherwise
param be validation context
param be instance
api return constant if valid constant otherwise
validate against param instance basically do check definition
param be validation context
note internal be param _ lrb _
param be instance
param be param instance
api return constant if valid constant otherwise
param be validation context
param be instance
_ check type attribute default possible value match one define
do final step validation incremental validation step have be complete basically do follow check describe by check attribute definition validity
api return constant if valid constant if invalid constant
validate element
param be validation context
param be instance
param be element instance
api return constant if valid constant otherwise
param be validation context
could give problem
not use _ rrb _ , which
param be instance
param be element definition
api return constant if valid constant otherwise
validate single element definition basically do follow check as describe by param
validate give param match name
param be name param
api return constant if valid constant otherwise
validate give param match name
param be name param
api return constant if valid constant otherwise
validate give param match
param be param
api return constant if valid constant otherwise
do final step validation have be parse basically validation do follow check describe by _ check type attribute default possible value match one define
validate give param match
param be nmtokens param
api return constant if valid constant otherwise
param be validation context
param be instance
param be definition
api return constant if valid constant otherwise
validate give name match declaration
param be validation context
validate single definition basically do follow check as describe by param
param be
param be name check
_ seem no validity constraint declaration but api get call anyway
api return constant if valid constant otherwise
param be validation context
param be instance
param be element instance
param be attribute instance
param be attribute param
api return constant if valid constant otherwise
validate single attribute element basically do follow check as describe by param
be do separately
param be validation context
param be instance
param be element instance
api return constant if valid constant otherwise
param be validation context
param be instance
param be element instance
validate single element be attribute , basically do follow check as describe by param
param be param
_ _ _ _ _ _ _ _ matching be do separately
param be declaration instance
_ _ call api attribute present
param be attribute param
api return constant if valid constant otherwise
element end validation stack
validate single declaration element basically do follow check as describe by param
param be validation context
param be instance
param be element instance
api return constant
param be qualified name as appear serialization
check parse validation current stack
param be validation context
param be character param read
param be length param
api return constant
_ _ _ _ _ _ _ _ matching be do separately
element start validation stack
param be validation context
param be instance
param be element instance
param be qualified name as appear serialization
api return constant
param be instance
param be validation context
api return constant if valid constant otherwise
be message orient function similar printf function
validate root element basically do follow check as describe by param
callback call
param be param stre format printf like param remain param format
_ do not apply check element
be message orient function similar printf function
param be usually validity error context , param come _
_ param be change by param user
param be param stre format printf like param remain param format
debug provide number lifetime
callback call
param be context
param be usually validity error context , param come _
api return number ever constant case error
_ param be change by param user
debug provide number point
param be context
api return number use constant case error
serialize as compile buffer
param be buffer receive output
param be compile
param be context
param be
param be
api return result null case internal error , result must be free
param be context
param be
free context
param be context
find string use store list
param be context
param be
param be store
evaluate result consume param base algebraic sometimes direct usually tatke less linear time can generate language
param be length list
api return number unique string find , constant case error constant
param be context
return list
find string appear start language accept by store list
param be
param be store
param be length list
param be
api return number unique string find , constant case error constant
api return constant
indicate maximum number input can accept
param be compile
api return maximum length constant case error
get associate param context
param be context
param be param
param be param length byte
api return null case error
create context manipulating
param be maximum number
param be optional use internally
api return context null case error
find nillable
param be context
param be param
param be param
api return null case error
param be context
param be be
param be context
api return null case error
param be param
param be low bind
param be upper bound , constant mean
param be param
api return null case error
param be context
param be constant terminate string
api return null case failure
increase reference count
param be
get associate choice be consume operation , keep use api use api release , be constant even case failure
param be context
minimal parser , understand follow construct _ string _ choice _ sequence , _ _ usual
one step respect input string
param be stre
param be
get associate range _ lcb _ , max _ rcb _ be consume operation , keep use api use api release , be constant even case failure
api return result null case internal error
check whether accept language accexpte by input
param be context
param be
param be
api return constant if constant
get associate sequence , be consume operation , keep use api use api release , be constant even case failure
callback function
param be stre param byte
param be regular context
param be current param string
_ finite sequence _ lcb _ , max _ rcb _ _ sequence _ lcb _ , _ rcb _ be minimal make especially no check string value
param be datum
param be input datum
param be return value error param
param be execution context generate error
param be return number negative
param be pointer number accept param
param be pointer array acceptable param
param be return value
api return be free exec context not nee be deallocate
string param
api return constant case success constant case error
param be execution context
param be pointer number accept param
param be return number negative
param be pointer array acceptable param
param be return value
api return be free exec context not nee be deallocate
api return constant case success constant case error
one input execution context
param be execution context null indicate end
param be stre input
param be param associate reuse callback
one input execution context
extract information execution , param value must point array nbval string pointer return param contain number possible string state value array be update
param be execution context null indicate end
param be first string input
api return constant
extract error information execution , param string be update value not accept , param value must point array nbval param pointer return param contain number possible string state value array be update
param be second string input
param be param associate reuse callback
free param
param be regular context
free structure associate regular context
param be
build context use progressive
param be precompile regular
param be param function use handling progress matching phase
api return constant
param be context param associate param context
param be regular string
api return context
api return compile null case error
parse regular conform part constant build suitable testing string against regular
param be compile regular
param be value check against regular
param be compile regular
api return constant if not negative value case error
print content compile regular
param be file param debug
param be compile param
api return constant if not negative value case error
additional cleanup param
register callback
param be function pointer
api return previous value function
signature callback discard param
param be current
additional param
api initialize global state default value library
param be pointer newly global state
register callback uri output file handling
param be function pointer
api return old value registration function
param be param write
param be
signature function do lookup suitable output api correspond param
param be
api return case success null if no api be find
register callback uri input file handling
param be function pointer
api return old value registration function
signature function do lookup suitable input api correspond param
param be param read
param be request source encode
api return case success null if no api be find
register callback creation
api return old value registration function
param be function pointer
signature registration callback create param
param be current
param be context
param be previous explore
convert number value
api return null
param be
traverse , engine call first time param null until function return null indicate end
api return number value
convert string value
param be
api return newly string
convert param value
param be param
api return value
convert param number value
param be param
convert param string value
api return number value
param be param
api return newly string
convert param number value
param be param
api return number value
convert param string value
param be param
convert number value
api return newly string
param be number
api return value
convert number string value
param be number
api return newly string
convert stre value
param be stre
api return value
convert stre number value
param be stre
convert object value
api return number value
param be object
api return value
convert object number value
param be object
api return number value
convert object api equivalent
param be object
api return string value object , null case error
be upto caller free string memory api
compare two order
param be
param be first
param be second
api return result compilation null
caller have free object
evaluate precompiled give context
param be compile
api return constant case error constant otherwise
param be context
api return result null
caller have free object
apply api function result give compile
param be compile
param be context
object cache context
use constant default number
api return constant
value option have currently no effect
param be context
param be cache
param be param semantic option
param be param
convert object api equivalent
api return constant
param be object
set object cache
api return object , old one be free operation be do directly
param be object
set maximum number object be cache per be constant
param , string , number , , object
param be number target param
conversion function be associate param use cast param primitive value
api return constant case error , constant otherwise
be cache internally be reuse
convert object api equivalent
param be object
convert object api equivalent
param be object
api return object , old one be free operation be do directly
api return object , old one be free operation be do directly
param be context
param be
api return result compilation null
caller have free object
evaluate location path give context
param be
param be context
api return result null
caller have free object
alias api
param be
param be context
api return result null
caller have free object
function , param be context stack
param be parser context
param be number param pass function
evaluate result current
be evaluate by evaluate convert result
param be context
param be result
api return constant
free memory by
param be
result be convert constant  position context context list be convert constant otherwise
result be convert as if by call function
param be context free
param be free
param be object
free object
param be object free
free but not deallocate object list api
param be context
prototype callback use plug function lookup engine
param be param function
param be param hosting function
api return function null
param be context
param be number param
param be context stack result be stack
initialize environment
base code
provide portable api function detect
param be double value
provide portable api function detect
base code
param be double value
api return constant
param be
api return
caller need free
evaluate location path give context
param be set as context param
context param be not restore
param be param use as context param
param be
api return constant vi value be , constant if _ , constant otherwise
api return result null
param be context
caller have free object
create type double value
param be initial , null
api return newly create object
copy give object
param be original object
call api speed static
api return newly create object
param be input
set as context param
api return number element find constant case error
param be param use as context param
param must be as associate context
param be context
api return constant case error constant if successful
prototype callback use plug variable lookup engine
param be context
param be param variable
param be param host variable
api return object value null if not find
deallocate resource associate param
param be
param be
create api structure use note
param be address hold
api return null case error
create api structure as output
param be compress output
api return null case error
create api structure uri as output
param be uri resource output
param be compress output
api return null case error
create api structure as output
param be
element order like line information , order be keep element _ content field , value store be actually _ number be able differentiate line number
param be compress output
api return null case error
create api structure as output note
param be deallocate
param be hold
param be compress output
api return null case error
param be
api return null case error
api return byte write constant case error
context be free result
api return byte write constant case error
create api structure as output starting
api return byte write constant case error
param be null _
param be compress output
api return byte write constant case error
end current element
param be
api return byte write constant case error
end section
param be
end current
param be
param be
param be
end attribute list
end element
param be
api return byte write constant case error
param be
api return byte write constant case error
open element be close , content be output
param be
api return byte write constant case error
end current element
param be
api return byte write constant case error
end current
param be
api return byte write constant case error
output buffer
param be
api return byte write constant case error
end current element
write end
api return byte write constant case error
api return constant error constant otherwise
api return constant error constant otherwise
param be
set output
api return constant error constant otherwise
param constant not
param constant
param be
api return byte write constant case error
set string
api return byte write constant case error
param be character
set character use quoting attribute
api return byte write constant case error
start attribute
param be
param be
param be element param
api return byte write constant case error
param be
start attribute support
param be
param be string
param be element local param
param be uri null
param be param null
api return byte write constant case error
start section
param be
api return byte write constant case error
param be
param be param
param be
param be
param be system identifi , which be uri
start comment
param be identifi , which be alternative system identifier
param be param
param be
start element
param be param element
param be
api return byte write constant case error
param be param
api return byte write constant case error
param be
param be param null default
param be constant
constant if not
param be param null default
api return byte write constant case error
param be yes no null default
start element
param be
param be element param
api return byte write constant case error
start element support
param be
param be param null
param be element local param
param be uri null
api return byte write constant case error
param be
param be param
api return byte write constant case error
write attribute
param be
param be attribute param
param be attribute param
api return byte write constant case error
write attribute
param be
param be param
param be attribute local param
param be uri
param be attribute param
write encode text
api return byte write constant case error
param be
param be binary param
param be position within param first byte encode
api return byte write constant case error
param be number byte encode
write encode text
param be
param be binary param
param be position within param first byte encode
param be number byte encode
api return byte write constant case error
param be
param be param
api return byte write constant case error
write comment
param be
param be comment string
api return byte write constant case error
param be
param be param
param be identifi , which be alternative system identifier
param be system identifi , which be uri
param be stre content
api return byte write constant case error
param be
param be param
param be param
api return byte write constant case error
write element
param be
param be param element
param be param element
api return byte write constant case error
param be
param be param
param be identifi , which be alternative system identifier
param be system identifi , which be uri
param be constant
param be param
constant if not
param be param
api return byte write constant case error
write external
must have be start api
param be
param be param
param be identifi , which be alternative system identifier
param be system identifi , which be uri
param be param
api return byte write constant case error
param be constant
constant if not
write content external
param be
param be identifi , which be alternative system identifier
param be system identifi , which be uri
param be name
api return byte write constant case error
param be
write internal
param be param
param be param
api return byte write constant case error
param be
param be param
param be constant
constant if not
param be identifi , which be alternative system identifier
api return byte write constant case error
param be system identifi , which be uri
write element
param be
param be element param
param be element param
api return byte write constant case error
write element support
param be
param be param
param be element local param
param be uri
param be element param
api return byte write constant case error
write format param attribute
param be param
param be attribute param
api return param byte write constant case error
param be param string param extra param
write formatted param support
param be param
param be param
param be attribute local param
param be param
param be param string param extra param
api return param byte write constant case error
write format param
param be param
param be param string param extra param
api return param byte write constant case error
write param comment
param be param
api return param byte write constant case error
param be param string param extra param
write param format declaration part
param be param
param be param
param be param identifier , which be alternative param system identifier
param be param system identifi , which be param uri param
param be param string param extra param
write format param
api return param byte write constant case error
param be param
param be param
param be param string param extra param
api return param byte write constant case error
write formatted param element
param be param
param be param element
param be param string param extra param
api return param byte write constant case error
write format param internal
param be param
param be param
api return param byte write constant case error
param be param string param extra param
param be param
write formatted param element
param be constant
param be element param
api return param byte write constant case error
param be param string param extra param
write formatted param element support
param be param
param be param
param be element local param
param be param
param be param string param extra param
api return param byte write constant case error
write formatted param be param
param be param
param be param string param extra param
api return param byte write constant case error
write format param text
param be param
param be param string param extra param
api return param byte write constant case error
write format param text
param be param
param be param string param extra param
api return param byte write constant case error
param be
param be param
param be param
api return byte write constant case error
write raw text
param be
param be text string
api return byte write constant case error
write text
special char
param be
param be text string
param be length text string
api return byte write constant case error
write text
param be
param be text string
api return byte write constant case error
write format attribute
param be
param be attribute param
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format param support
param be
param be param
param be attribute local param
param be uri
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format
param be
param be param string
api return byte write constant case error
write comment
param be pointer first member variable param list
param be
param be param string
api return byte write constant case error
param be pointer first member variable param list
param be
write format declaration part
param be param
param be identifi , which be alternative system identifier
param be system identifi , which be uri
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format
param be
param be param
param be param string
api return byte write constant case error
write format element
param be pointer first member variable param list
param be
param be param element
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format internal
param be
param be param
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format element
param be constant
constant if not
param be
param be element param
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format element support
param be
param be param
param be element local param
param be uri
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format
param be
param be param
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format raw text
param be
param be param string
api return byte write constant case error
param be pointer first member variable param list
write format text
param be
param be param string
api return byte write constant case error
param be pointer first member variable param list
do binary search range table determine
param be character be validate
param be pointer range be use validate
api return constant  valid , constant otherwise
api be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
api be deprecate
use instead
param be character validate
api return constant  valid , constant otherwise
function be deprecate
use param instead
param be character validate
api return constant  valid , constant otherwise
close saving context
make sure byte have be output free associated datum
param be saving context
api return number byte write constant case error
param be saving context
param be
api return number byte write constant case error
saving context
full saving context
make sure byte have be output
function be not fully implement yet as function do not return byte count but constant instead
param be saving context
api return number byte write constant case error
set custom escape function be use text attribute content
param be saving context
param be escape function
api return constant if successful constant case error
set custom escape function be use text element content
param be saving context
param be escape function
api return constant if successful constant case error
param be param
create saving context serialize param give
param be param name use null
param be set
api return serialization context null case error
param be file descriptor number
param be param name use null
create saving context serialize file descriptor param give
param be set
api return serialization context null case error
param be file name
param be param name use null
create saving context serialize param possibly param give
param be set
api return serialization context null case error
param be write function
param be close function
param be handler
create saving context serialize file descriptor param give
param be param name use null
param be set
api return serialization context null case error
param be saving context
api return number byte write constant case error
param be param
start param saving context
param be
function be not fully implement yet as do not return byte count but constant instead
param be param api
param be param
param be param
api return pointer null case error
register external
param be
param be param
param be system -PRON- would
param be external -PRON- would
param be param api
param be param
api return pointer null case error
cleanup predefined table
param be external -PRON- would
deprecate call
param be system -PRON- would
param be param
build copy param
api return null case error
create initialize empty hash table
really do not make sense should be deprecate
content param as definition
api return create null case error
param be buffer
param be table
param be buffer
content table as definition
param be table
param be contain string
remove api , be not afraid break binary compatibility must migrate code api
param be stre convert
api return null
api issue warning
api be reentrant , result must be deallocate
param be contain string
param be stre convert
api return newly string do
global encoding string , replace predefined non ascii value
param be contain string
param be stre convert
api return newly string do
deallocate memory use by hash param
global encoding string , replace predefined api be reentrant , result must be deallocate
param be table
lookup hash table
param be reference
param be param
api return correspond , otherwise lookup be do predefined
api return pointer structure null if not find
param be reference
param be param
lookup hash table
api return pointer structure null if not find
api return correspond
note first param be , not
lookup internal external
param be reference
param be param
api return correspond param
api return pointer structure null if not find
param be param
check whether param be predefine
set predefined
api return null if not , otherwise
deprecate call
param be
param be param
param be param api
param be param
api return pointer null case error
param be external -PRON- would
param be system -PRON- would
build list copy result
attribute declaration
param be result
api return list null
caller have free
evaluate location path give context
param be
param be context
api return result null
caller have free object
param be parser context
create , differ api  , be caller link later free not need anymore
param be free
evaluate as api but location set instead set
param be initial range set
param be
create type double value
param be initial , null
api return newly create object
be free
param be initial range set
param be
merge two , range be constant
param be first
param be second
api return param extend null case error
remove entry list
param be initial range set
param be index remove
create type range use single
param be start end
api return newly create object
create context
param be
api return
param be directly contain evaluate null
param be param
param be element which user program link , null
api return newly create object
create type initialize set
param be param value
param be param value null
api return newly create object
create type initialize single range make two start end
create type range
param be start
param be param index
param be end point
param be end index
api return newly create object
create type range not object
param be start
param be end object
api return newly create object
create type range point
param be start
param be end point
api return newly create object
create type range use constant
param be start
param be end
api return newly create object
create type range use constant point
param be end
param be start point
param be end point
create type range point
api return newly create object
api return newly create object
param be start point
param be value
param be parser context
implement api function obsolete
param be number arg
param be not real function but special type location step which be
api return newly create object
express param reference term relative param
param be param reference
param be param value
api return param string null case error
be process accord section constant rfc constant
resolve relative reference absolute form
param be param instance find
param be param value
example operation include
final param reference do by check give param be valid , build final param use param
param input param return param
param input param return param
api return param string null case error
construct canonic param specify param
may be worthwhile first convert nice one by call api before call api , since api assume param have already be validation
param be resource filesystem
api return canonic param duplicate param
caller be responsible free memory occupy by param
simply create empty
api return structure null case error
if be insufficient memory available , param be null , function return null
free struct
param be pointer
occur directly stre , no allocation be do
param be pointer param string
api return constant error code
parse uri base rfc constant param
apply constant step param string _ _ , rfc constant section constant , step constant
param be uri string analyze
api return newly build null case error
param uri param
parse uri but allow keep intact original fragment
param be uri string analyze
api return newly build null case error
param be pointer uri structure
param be stre analyze
param be
construct uri express param
api return constant error code
parse uri reference string base rfc constant fill appropriate field uri structure param uri param
param be resource filesystem
api return uri , duplicate param  fail
caller be responsible free memory occupy by param
print uri param stream
if be insufficient memory available , param be null , function return null
param be file output
param be pointer
uri as escape string
param be pointer
api return string be deallocate by caller
escape api , do not validity check
param be stre uri escape
_ dougla
api return copy string , but escape constant may constant us api escape correctly accord rfc constant
escape char need , but be base be impossible be sure
param be stre escape
param be exception param string char not escape
api escape string hex , ignore reserve character character exception param
api return escape stre null case error
api , but do not check string be uri
param be stre
param be length byte
param be optional destination buffer
deallocate type structure
api return copy string , but unescaped , return null only case error
param be param structure
deallocate param structure
output be direct unsigned char translation value length result can only be small size as input string
param be param structure
hash table
can later be retrieve by use name
param be hash param
duplicate name generate error
param be param
param be pointer param
api return constant addition succeed constant case error
hash table
can later be retrieve by use
duplicate generate error
param be hash param
param be second param
param be param
param be pointer param
hash table
api return constant addition succeed constant case error
can later be retrieve by use
duplicate entry generate error
param be hash param
param be param
param be third param
param be second param
api return constant addition succeed constant case error
param be pointer param
callback copy datum hash
param be data hash
param be param associate
api return copy datum null case error
hash table apply value
param be hash param
param be function hash
api return param null case error
param be param hash table
create which use as internal
api return newly create object , null
param be param hash table
param be use hash
api return newly create object , null
callback free data hash
param be data hash
param be param associate
free hash table content
param be hash param
param be function hash
find specify by name
param be hash param
be deallocate
param be param
api return pointer
find specify by
param be hash param
param be param
param be second param
api return pointer
find specify by
param be hash param
param be param
param be third param
param be second param
api return pointer
find specify by prefix
param be hash param
param be param
param be param
api return pointer
find specify by
param be hash param
param be param
param be param
param be second param
param be second param
api return pointer
find specify by
param be hash param
param be param
param be param
param be second param
param be second param
param be third param
param be third param
api return pointer
find specify by name remove name hash table
be remove free
param be param
param be function remove
api return constant
find specify by remove hash table
be remove free
param be param
param be second param
param be function remove
api return constant
find specify by remove hash table
be remove free
param be param
param be second param
param be third param
param be function remove
api return constant
hash table apply value
param be hash param
param be function hash
param be extra param pass
hash table apply value match
param be hash param
param be param null
param be second param null
param be third param null
comparison be consider match
param be function hash
param be extra param pass
hash table apply value
param be hash param
param be function hash
param be extra param pass
hash table apply value match
param be hash param
param be param null
param be second param null
param be third param null
comparison be consider match
param be extra param pass
param be function hash
param be param hash
param be extra param
param be param associate
param be param hash
param be param associate
param be extra param
param be second param associate
param be third param associate
query number element instal hash table
param be hash param
api return number element hash param constant case error
hash table
can later be retrieve by use name
param be hash param
param be param
param be pointer param
param be function replace
entry name be remove free
api return constant addition succeed constant case error
hash table
can later be retrieve by use
param be hash param
param be param
param be second param
param be pointer param
entry be remove free
param be function replace
api return constant addition succeed constant case error
hash table
can later be retrieve by use
param be hash param
param be param
param be second param
param be third param
entry be remove free
param be pointer param
param be function replace
api return constant addition succeed constant case error
param be file param
param be param structure
deallocate structure
param be param structure
free resource associate parser context
param be parser context
free resource associate validation context
param be validation context
get callback information use error parser context
param be param parser context
param be error callback result
param be warn callback result
param be contextual data callback result
api return constant case failure , constant otherwise
get error warning callback information
param be param validation context
param be error function result
param be warn function result
param be function context result
api return constant case error constant otherwise
param be validation context
create parse context
api return constant if valid far , constant case internal error
param be preparse
api return parser context null case error
create parse context memory param expect contain file
may be modify
param be pointer char array contain
param be param array
api return parser context null case error
create parse context expect contain file
param be location
api return parser context null case error
create validation context base give param
param be precompile
api return validation context null case error
param be validation context
api return internal structure build resource null case error
plug base validation layer parse event
parse definition resource build internal which can be use validate instance
param be validation context
param be pointer original
original datum be replace by pointer but call original be maintain
param be pointer original user datum pointer
api return pointer datum structure need unplug validation layer null case error
unplug base validation layer parse event
original pointer use call be restore
param be data structure return by api
api return constant case success constant case failure
set callback function use error validation context
param be validation context
param be error callback
param be warn callback
param be contextual data callback
set structured error callback
param be parser context
param be structured error function
param be function context
set error warning callback information
param be validation context
param be error function
param be warn function
param be function context
param be combination
set structured error callback
param be validation context
api return constant case success , constant case api error
be use
set param
param be structured error function
param be validation context
param be function context
get validation context option
param be validation context
api return option combination constant error
allow access parser context validation context
param be validation context
api return parser context validation context null case error
validate memory
param be validation context
param be parse
param be validation context
api return constant
validation give resource , validation give resource use streamable validation internally
param be uri instance
param be future set param , currently unused
validate , start give
param be validation context
param be element
param be validation context
api return constant
param be file name
param be validation context
api return constant
param be function pointer
workaround provide file error reporting information
param be context
param be validation context
param be param use read datum
param be optional encode information
param be handler result event
param be context provide handler
allow set function validation context , which be use provide file line information
signature error callback param validation
param be param validation context
param be param message param extra param
validation , callback call by
api return constant
param be user provide context
param return by api param information
param return by api param information
api return constant case success constant case error
signature warning callback param validation
validate param base event parser forward event handler provide param user provide handler must be one
param be param validation context
be use
param be param message param extra param
param be pointer array byte store result
param be length
take block param char param convert constant block char param
param be pointer array param char
param be length
value after return be number octet consume
param be pointer array byte store result
param be length
take block constant char param convert param block char param
param be pointer array constant char
param be length
value after return be number octet consume
register param alias encode name name
param be overwrite
param be encode param as parse , param format
param be param as parse , param format
api return number byte write
api return constant case success , constant case error
generic param encode param close function
api return number byte write
param be char enconde transformation datum structure
limit constant char
api return constant if success , constant case error
param be char enconde transformation datum structure
param encode param input function , but only first line
param be output
param be input
generic param encode param input function
param be char encode transformation datum structure
api return number byte write
param be output
param be input
api return number byte write
param be char enconde transformation datum structure
param be output
param be input
api return number byte write
case utf8 sequence conversion error give , content be automatically remappe sequence
generic param encode param output function first call null have be make output param case param encode need state output
value after return be number octet consume
value after return be number octet consume
param be length
api return number byte write , constant if lack space , constant
param be length
param be length
param be pointer array char param original encoding
param be length
api return number byte write , constant if lack space , constant
param be pointer array byte store result
param be pointer array param char
take block param char param convert another encoding
param be pointer array byte store param result
first call design produce head info be call param null
value after return be number octet produce
value after return be number octet consume
unregister aliase
should initialize state
take block char param original encoding convert block char param block char param
unregister encode param alias
cleanup memory char encoding support , unregister encode handler aliase
param be param name as parse , param format
param be pointer length buffer
api return constant case success , constant case error
api return one constant value
param be pointer first byte , must be least constant byte long
search register set handler able encoding
guess encode use first byte content accord param
param be stre describe char encoding
api return handler null
search register set handler able encoding
param be xmlcharencode value
api return handler null
canonical name encoding
charencode section constant character encode
param be encode
api return canonical name give encoding
lookup encode name give param
api return null if not find , otherwise original name
param be param name as parse , param format
create register
initialize char encode support , char encode support register default encode support
param be encode param format
param be api read encode
param be api write encoding
api return create null case error
api usually do not need be call normal processing
compare string encode scheme already know
comparison be case insensitive accordingly section constant character encode
param be encode param as parse , param format
api return one constant value constant
register char encode param , surprising , be not
param be param block
set reset default param generic error error function
param be handler
original error param place
param be source error
param be target error
api return constant case success constant case error
get last parsing error register
param be parser context
api return null
cleanup last global error register
parse error do not change param result
param be parser context
param be parse context
param be param message param extra param format param message
get last global error register
be per thread
signature param function param
api return null
param format error message , give file , line , position param extra param
param be param parser context
param be param message param extra param message
current context within param content error
param be input
associate file line information current param
param be param parser context
param be input
param format validity error message , give file , line , position param extra param
param be param message param extra param message
param be param parser context
param format validity warning message , give file , line , position param extra param
param be param message param extra param message
param be param parser context
param format warning message , give file , line , position param extra param
param be param message param extra param message
cleanup error
cleanup last global error register
param be pointer error
parse error do not change param result
function reset param error context context error message
param application , must be set separately thread
param be error handling context
param be param function
handler be call subsequent error message
simply mean
function reset param error context context structured error message
param be error handling context
param be param function
param be user provide datum param callback
be pass as first param handler one can simply force message be emit another file stderr by set file handler null
handler be call subsequent error message
be pass as first param handler param application , must be set separately thread
simply mean
param be param raise
param be buffer output
param be param string
param be
signature function use param report mechanism
param be should format space be
format be
param be buffer output
param be
param be param string
open file
param be file
param be
memory return be param
api return number byte write constant case failure
be upto caller free param
param be
param be memory pointer
param be memory length
memory return be param
be upto caller free param
param be
param be memory pointer
param be memory length
param be should format space be
encode definition lookup
param be
api return current encoding as flag source
param be param attribute check
api return constant
param be param , null
api return
param be external -PRON- would , null
param be param , null
param be external -PRON- would , null
api return , not initialize
param be buffer output
recursive behaviour , be print , format return be
create without
param be
param be current
api return number byte write constant case error
param be file pointer
param be
recursive behaviour , be print , format return be
param be current
recursive behaviour , be print
param be file pointer
param be
param be current
param be param
param be should format space be
api return number byte write constant case failure
recursive behaviour , be print
param be
param be buffer output
param be current
param be param string
param be should format space be
param be buffer output
recursive behaviour , be print , format be
param be
param be param string
param be current
param be param
param be
api return number byte write constant case failure
param be param
file use give param formatting be
param be
param be param
api return number byte write constant case failure
file use give param
param be param
stdout file be use
param be
param be param
param be should format space be
api return number byte write constant case failure
param be
param be param string
set current param note
not change content param , flag associate
api return constant case success constant case error
callback api command
param be user provide context
param be param receive
param be param size byte
callback api command
only one param
be specify
param be user provide datum callback
param be file name
param be attribute string
param be param string
param be param string
param be file param
param be link count
param be param
param be param
param be param
param be param
param be
param be context
api return code number , constant
cleanup protocol layer
cleanup proxy information
close connection control transport
param be context
api return constant error , constant otherwise
close datum connection server
param be context
api return constant error , constant otherwise
open control connection
param be context
api return constant case error , constant otherwise
open control connection give
param be param name
param be param
api return context null
change remote param
param be context
param be param server
api return constant error , constant
delete server
param be context
param be param directory server
free context after close connection
api return constant error , constant
param be context
fetch give file server
datum be pass back callback
last param have size constant block
param be context
param be user param
param be user param datum
param be file retrieve
api return constant error , constant otherwise
open data connection server
currently only passive mode be support
param be context
api return constant error , constant otherwise
get response server after command
param be context
api return code number
fetch give file server
param be context
param be file retrieve
initialize protocol layer
api return socket datum connection , constant case error
currently check proxy information , get hostname
listing server
file info be pass back callback
param be context
param be user param
param be user param datum
param be optional file list
api return constant error , constant otherwise
initialize context
param be param use initialize context
api return context null case error
param be param resource
api return context , null
start fetch give
proxy information
can be do by use param environment variable
param be proxy param name
param be proxy param
param be proxy param name
param be proxy password
param be param proxy constant use , constant user
send quit command server
param be context
api return constant case error , constant otherwise
be block call
param be context
api read byte connection dest
param be buffer
param be buffer length
api return number byte read
constant be indication end connection
constant indicate param error
param be proxy param use initialize proxy context
initialize proxy context by parse param find protocol host port indicate
update context by parse param finding path indicate
indicate connection have be establish
param be context
param be param use update context
api return constant if , constant case error
cleanup default type library associate
structure back
error be raise
param be param structure
param be file param
param be file param
param be param structure
deallocate structure
param be param structure
free resource associate parser context
param be parser context
free resource associate validation context
param be validation context
get callback information use error validation context
param be param validation context
param be error callback result
param be warn callback result
should be like
param be contextual data callback result
api return constant case failure , constant otherwise
constant null param clean proxy information
get error warning callback information
param be param validation context
param be error function result
param be warn function result
param be function context result
api return constant case error constant otherwise
initilize default type library
api return constant case success constant case error
create parser context
param be preparse
param be duplicate internally
api return parser context null case error
create parse context memory param expect contain file
param be pointer char array contain
param be param array
api return parser context null case error
param be location
api return parser context null case error
create parse context expect contain file
param be param parser context
create validation context base give param
api return validation context null case error
parse definition resource build internal which can be use validate instance
param be precompile
api return internal structure build resource null case error
set callback function use error validation context
param be error callback
param be warn callback
param be param validation context
param be contextual data callback
set callback function use error parse context
param be param parser context
param be error callback
param be contextual data callback
set error warning callback information
param be param validation context
param be error function
param be warn function
param be function context
set structured error callback
param be param validation context
param be structured error function
param be function context
validate memory
param be param validation context
param be parse
validate full api return constant content have be expand
param be validation context
param be element instance
param be instance
api return constant
element end validation stack
api return constant
param be validation context
param be instance
param be element instance
api return constant
check parse validation current stack
param be validation context
param be character param read
param be length param
api return constant
element start validation stack
param be validation context
param be instance
param be element instance
signature error callback param validation
param be param validation context
param be param message param extra param
api return constant
signature warning callback param validation
param be param validation context
param be param message param extra param
param be parser context
param be set param value
private function use pass information parser context which be combination
api return constant case error
canonize give memory
detail see canonical exclusive
param be
param be param
param include comment result not
api return number byte write success negative value fail
canonize give file
param be param set be include canonize null
param be memory pointer canonical text
detail see canonical exclusive
param be
caller api be responsible call api free allocated memory
param be param
param be list inclusive prefix end null null
param include comment result not
param be param store canonical
api return number byte write success negative value fail
param be param level constant _ default , constant _ uncompressed , constant _ param level
param be param set be include canonize null
canonize give provide buffer
param be
detail see canonical exclusive
param be list inclusive prefix end null null
param be param
param be param set be include canonize null
param be list inclusive prefix end null null
param include comment result not
api return param value success negative value fail
param be output buffer store canonical
buffer must have null
canonize give provide buffer
detail see canonical exclusive
param be
param be function use determine be visible not
param be first param function
param be param
param include comment result not
api return param value success negative value fail
signature callback visible
param be output buffer store canonical
buffer must have null
param be user datum
param be curent param
param be param
param be list inclusive prefix end null null
api return constant
deallocate resource associate param
param be
create xmltextread structure feed input
param be use read datum
api return null case error
create xmltextread structure feed resource uri
param be param resource process
api return null case error
param be param information source
create param
parse flag option be combination
param be pointer constant terminate string
param be base param use
param be param , null
api return null case error
param be combination
param be open file descriptor
create xmltextread file descriptor
param be base param use
parse flag option be combination
param be param , null
param be combination
api return null case error
file descriptor not be close
note reset
parse file filesystem network
parse flag option be combination
param be file
param be param , null
param be combination
api return null case error
create xmltextread function source
parse flag option be combination
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return null case error
create param
parse flag option be combination
param be pointer char array
param be param array
param be base param use
param be param , null
param be combination
api return null case error
parse param
parse flag option be combination
param be param
param be pointer constant terminate string
param be base param use
param be param , null
param be combination
api return constant case success constant case error
parse file descriptor
parse flag option be combination
param be param
param be open file descriptor
param be base param use
file descriptor not be close
note reset
param be param , null
param be combination
api return constant case success constant case error
parse file filesystem network
parse flag option be combination
param be param
param be param , null
param be file
param be combination
api return constant case success constant case error
parse function source
parse flag option be combination
param be param
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return constant case success constant case error
parse param
parse flag option be combination
param be param
param be pointer char array
param be param array
param be base param use
param be param , null
param be combination
api return constant case success constant case error
parse preparse
param be param
param be preparse
api return constant case success constant case error
create preparse
param be preparse
api return null case error
provide number attribute current
param be use
base uri
api return constant no attribute , constant case error attribute count
param be use
see api information
api return base uri null
api provide current index parser use by param , relative start current
param be param
api actually wrap call api parser context associate param
param be use
api return index byte begin constant case index could not be
api return constant case error
base uri
api release resource by current instance change state close close underlying input
param be use
determine encode read
api return base uri null if not available , string be deallocate
param be use
string be deallocate
api return string contain encode null case error
local name
param be use
qualified name , equal prefix
param be use
api return local name null if not available , string be deallocate
uri defining associate
api return local name null if not available , string be deallocate
param be use
api return uri null
reference associate
param be use
api return prefix null
param be use
get interned string param , allow string name comparison
param be stre
string be deallocate
api return copy string null case error
param be use
api return string null
result be deallocate api operation
within which reside
provide text value
param be use
api return value null
determine version read
param be use
string be deallocate
api return string contain version null case error
param be use
api return null case error
api allow get current access by
be dangerous
api allow get current access by
param be use
api return null case error
param be use
api return constant case error
as result call , param not destroy associate call api result be need param parsing have finish
param be user param
signature error callback parser
param be message
param be param error
param be param indicate error occur
read content current full
make available until api call
param be use
api return pointer valid until api call null case error
provide value attribute specify qualified param
param be use
param be qualified param attribute
string must be deallocate by caller
api return string contain value specify attribute , null case error
param be use
provide value attribute specify index relative contain element
param be param index attribute relative contain element
string must be deallocate by caller
api return string contain value specify attribute , null case error
provide value specify attribute
param be use
param be local name attribute
param be uri attribute
api return string contain value specify attribute , null case error
string must be deallocate by caller
retrieve error callback function user param
param be use
param be user param
param be callback function null be no callback have be register
provide number current parsing point
param be user datum
api return int constant if not available
provide line number current parsing point
param be user datum
api return int constant if not available
read parser internal property
param be use
param be get
api return value , usually constant case error
method get buffer
good would be rewrite differently
param be use
api stop parser , set state end file return input stream be parser do not use
api return attach null case error
whether have attribute
implementation be not good , parser certainly procgresse past _ input , be allocation problem
param be use
api return constant
whether can have text value
param be use
param be use
api return constant
whether attribute be generate default value define
param be use
api return constant  error
api return constant
determine whether current be declaration rather regular attribute
param be use
retrieve validity status parser context
param be use
local name
param be use
obtain base uri give param
api return flag value constant if valid , constant if no , constant case error
api return constant
param be use
obtain line number give param
api return local name null  , if non null nee be free by caller
param be use
api return line number constant case error
api return base uri null case error
resolve param current element
param be use
return default , specify null
param be param whose uri be be resolve
string must be deallocate by caller
api return string contain uri which param null case error
param be use
param be qualified param attribute
position current instance attribute specify qualified param
param be use
api return constant case success , constant case error , constant
api return constant case success , constant case error , constant
param be param index attribute relative contain element
position current instance attribute specify index relative contain element
param be use
param be local name attribute
position current instance attribute specify local name uri
param be uri attribute
api return constant case success , constant case error , constant
param be use
position current instance contain current attribute
api return constant case success , constant case error , constant
param be use
param be use
position current instance first attribute associate current
api return constant case success , constant case error , constant
position current instance attribute associate current
qualified name , equal prefix
param be use
uri defining associate
api return constant case success , constant case error , constant
param be use
param be use
api return local name null  , if non null nee be free by caller
api return uri null
currently implement only build
api return constant
skip follow current one order
param be use
get type current reference
param be use
skip follow current one order
api return constant
api return current constant case error
value indicate
param be use
api return constant case error
break accept range character like constant
since attribute value end line be must specification only value constant be accept
be not support either
reference associate
param be use
tell preserve current
api return prefix null
param be use
api return null case error
param be use
caller must use api keep result parsing have finish
tell preserve match by param
param be param
caller must use api keep result parsing have finish
api return param number case success constant case error
param be prefix definition , array null
mark character use enclose value attribute
param be use
api return constant case error
param be use
parse attribute value one text
position current instance stream , expose property
param be use
api return constant
param be use
read content current , include
string must be deallocate by caller
read content current , include
param be use
string must be deallocate by caller
api return string contain content , null  , have no
api return constant case success , constant case error
get read state param
api return string contain content , null
param be use
api return state value , constant case error
read content element text as string
param be use
string must be deallocate by caller
use validate as be process
api return string contain content element text , null
be only possible before first api
param be use
should not be free until param be deallocate use have be deactivate
param be precompile param
api return constant case validation could be activate constant case error
validation be desactivate
use validate as be process
be only possible before first api
param be use
param be path null
api return constant case validation could be activate constant case error
validation be deactivate
use context validate as be process
be only possible before first api
param be use
param be validation context null
param be param
api return constant case validation could be activate constant case error
validation be deactivate
use validate as be process
be only possible before first api
param be use
api return constant case validation could be activate constant case error
param be path null
validation be deactivate
use context validate as be process
be only possible before first api
param be use
param be validation context null
param be param
api return constant case validation could be activate constant case error
validation be deactivate
register callback function be call error warning
param be use
param be callback function call error warning
default error warning handler be restore
param be user param pass callback function
change parser processing behaviour by change internal property
property can only be change before read have be do
param be set
param be use
param be usually constant activate
api return constant
use validate as be process
be only possible before first api
param be use
param be precompile param
should not be free until param be deallocate use have be deactivate
api return constant case validation could be activate constant case error
validation be desactivate
register callback function be call error warning
param be use
param be callback function call error warning
param be user param pass callback function
default error warning handler be restore
param be param
param be use feed param , be destroy
param be base param use
param be param , null
param be combination
api return constant case success constant case error
determine status read
param be use
param be use
api return string null
result must be deallocate api
within which reside
provide text value
param be use
get authentication header context
api return value null
param be context
api return constant
api return stash value param header
cleanup protocol layer
param be context
provide specify content length header
api close context , api end connection free datum relate function
param be context
api return specify content length header
param be context
api return specify encode null
value constant indicate content length element be not include response header
param be param load
param be param content should be
provide specify
api return constant case failure , constant success
api fetch indicate resource via get be content file
initialize protocol layer
param be param information be return location
currently protocol layer check proxy information
param be param load
param be param use
param , must be free by caller
param be param information
param be extra param
param be param length
param be param string
api return null case failure , otherwise request handler
param be param load
param be param use
api open connection indicate resource via use give api , give extra param buffer request content
param , must be free by caller
param be param information
param be redirect param
param be param string
param be extra param
param be param length
api open connection indicate resource via use give api , give extra param buffer request content
api return null case failure , otherwise request handler
param be context
api return specify param null if not available
api open connection indicate resource via get
param , must be free by caller
param be param load
provide specified param
param be param information be return location
api return null case failure , otherwise request handler
param be param load
api open connection indicate resource via get
param be param information be return location
param be redirect param be return
param , must be free by caller
api return null case failure , otherwise request handler
be block call
param be context
api read byte connection dest
param be buffer
param , must be free by caller
param be buffer length
api return number byte read
constant be indication end connection
constant indicate param error
param be context
api return specify null if not redirect
get late return code receive
param be context
api return return code request
provide specify header
param be context
param be param content should be
api return constant case failure , constant success
api output file api close free context end
should be like
initialize proxy context by parse param find protocol host port indicate
param be proxy param use initialize proxy context
constant null param clean proxy information
deallocate structure
param be param structure
free resource associate parser context
param be parser context
free resource associate validation context
param be validation context
create parse context
param be preparse
api return parser context null case error
create parse context memory param expect contain file
may be modify
param be pointer char array contain
param be param array
api return parser context null case error
param be location
api return parser context null case error
create parse context expect contain file
create validation context base give param
param be precompile
param be set
api return validation context null case error
param be validation context
set structured error callback
parse definition resource build internal which can be use validate instance
api return internal structure build resource null case error
param be validation context
param be structured error function
param be function context
validate param against
param be validation context
param be
signature error callback validation
param be param validation context
api return constant case success , constant case internal error error count otherwise
param be param message param extra param
signature warning callback validation
param be param validation context
param be param message param extra param
free mutex
not call unless sure library be not use anymore
api return newly create , null
create , inherit string param
param be
api return newly create , null
param be
param be param
api return internal copy param null
free hash content
be create
lookup , string be first search
param be length param
param be
api return amount string
be deallocate
get much memory be use by string constant
param be
param be param
api return internal copy param null case internal error
check if string be own by disctionary
param be
param be stre
param be length param
param be
param be param
api return constant case error
param be param
api return internal copy null case internal error
name hash
increment reference counter
param be
api return constant case success constant case error
set size param constant
param be param byte
api return previous param constant
param be
query number element instal hash
mutex initialization
function be deprecate
api return number element constant case error
api return constant
object value stack
param be context
api return object remove
object param stack
param be context
param be object
api return number param stack
param be parser context
implement operation object
param be parser context
param be number param
param be parser context
param be number param
implement api function number function return small number not less param integer
numeric convert numeric number by call number function
param be parser context
implement compare operation object
param be less great
param be be comparison param
comparison be constant
comparison be constant
param be parser context
api return constant if comparison succeed , constant if fail
_ lrb _ constant , ... _ lrb _ constant , ... _ lrb _ constant , ... _ lrb _ constant
comparison be constant
implement api function string function return function param
param be number param
param be parser context
param be number param
implement api function contain contain function return constant  , otherwise return constant
comparison be constant
implement api function function convert param as follow
object be compare by converted object number compare number accord constant
_ number be constant
implement api function number count
param be parser context
param be number param
param be file param
param be precompile
param be level
content object debug purpose
param be file param
param be object inspect
param be level
implement _ set api function
param set
param be param
param be param
api return difference two set , param
param be param
implement _ set api function
param set
api return param contain
distinct be sort by order , exslsetsdistinctsorte be call sorted param
param set
implement _ set api function
param be param , sort by order
api return param contain
param be parser context
implement equal operation object content
arg constant
param be parser context
api return constant depending result test
implement operation object arg constant
param be parser context
param be param code
param be parser context
numeric convert numeric number by call number function
evaluate result current
parse evaluate give context , result context stack
be evaluate by evaluate convert result
param be parser context
param be result
api return constant
implement api function api
param be parser context
param be number param
param be parser context
param be number param
param be context free
implement api function number function return large number not great param integer
search function array context give function
param be context
param be function param
api return api null
search function array context give function
param be context
param be function param
param be function uri
api return api null
implement _ set param function
param be param
param be param
api return constant if , constant otherwise
param be parser context
param be number param
implement api function param -PRON- would -PRON- would function select element by unique -PRON- would
implement _ set api function
param set
param be param
be param give one
param be param
api return set comprising be within set pass as param
param be param string
api return constant if constant otherwise
param be parser context
param be number param
result be convert constant  position context context list be convert constant otherwise
param be parser context
param be number param
implement api function number api last function return number context list
result be convert as if by call function
result be result apply -PRON- would string value param
param be param
param be param
implement _ set api function
param set
implement _ set api function
param set
lead be sort by order , exslsetsleadingsorte be call
comment text param
implement api function function return constant depending be language specify by param string
param be param , sort by order
param be param , sort by order
implement api function string param
api return precede first order , if be null empty empty param
param be parser context
if param be empty first have no name , empty stringbe return by api
param be number param
param function return string contain local part name param first order
param be parser context
api return precede first order , if be null empty empty param
param be parser context
implement operation object
implement api function string param
implement multiply operation object
param function return string contain uri expand name param first order
arg constant
numeric convert numeric number by call number function
if param be empty , first have no name , expand name have no uri , empty stringbe return by api
language context be determine by value
param be convert string as if by call string function
string be split param list
numeric convert numeric number by call number function
attribute context , , have no
attribute , by value
result be param contain element as context have unique -PRON- would equal list
attribute near context have
param be parser context
param be number param
create type value
param be value
api return newly create object
create type string value
param be char value
api return newly create object
create type double value
param be double value
api return newly create object
create type initialize single
param be value
api return newly create object
create type initialize
param be
api return newly create object
param be
param be context
api return
create type string value
param be value
api return newly create object
param be value
api return newly create object
param be parser context
create type value initialize root
param be current
api return element follow
param be parser context
param be current
api return element follow
function attribute direction
support inherit default attribute
param be parser context
api return element follow
param be current attribute
param be parser context
param be current
api return element follow
function direction contain context order
param be parser context
param be current
api return element follow
param be parser context
param be current
api return element follow
param be parser context
function direction contain context order
param be current
api return element follow
param be parser context
function param direction param contain context context reverse order
param be current
api return element follow
function param direction param contain follow context order
thus context be first , context second
be define as
param be parser context
param be current attribute
api return element follow
param be parser context
param be current
api return element follow
param be current
param be parser context
api return element follow
function direction contain context
param be parser context
function direction contain context
function param direction param contain context context order
param be current
api return element follow
context consist context
be order order
function follow direction follow contain as context be after context order , exclude exclude attribute
be order reverse order
param be parser context
thus context be first , first context be second
param be current
function direction contain context
thus be first , be second
api return element follow
function direction contain context
param be param
order be param
param be param
implement _ set api function
param set
be empty unless context be element keep end list
lead be sort by order , exslsetsnodeleadingsorte be call
implement _ set api function
param set
param be param , sort by order
param be param
function param direction param contain precede context reverse order
api return param precede order ,  empty param
first precede be first
precede be second
param be initial set
param be
api return param precede order ,  empty param
be order reverse order
function precede direction precede contain as context be before context order , exclude exclude attribute
api return constant case success , constant case error
param be initial param set
param be host param
param be param
param be initial set
param be
api return constant case success constant case error
api return constant case success constant case failure
check whether contain
optimized version
param be param
param be
api return constant
param be initial set
param be
not match semantic
param be find
param be first null
set be duplicate pointer be set semantic
param be second
api return extend null case error
remove entry list
param be initial set
param be index remove
sort param order
param be set
set be create copy constant
merge two , be constant
param be param
param set
implement _ set api function
param be param
trail be sort by order , api be call
implement _ set api function
param set
param be param , sort by order
param be param
implement api function string param
api return param follow order
whitespace character be allow by
param be parser context
api return param follow order
param function return param stre white space normalize by strip lead trail whitespace replace sequence whitespace character by single space
param be number param
implement equal operation object content
arg constant
param be parser context
api return constant depending result test
param be parser context
param be number param
param be context
implement api function not not function return constant
param default context convert string , value context
param be param value
api return value null
search declaration array context give name associate give param
implement api function number number
param be parser context
param be number param
parse non qualified name
param be parser context
api return name null
parse name
param be parser context
api return name null
letter digit
_ _ combiningchar
letter digit
check error
param be parser context
api return
check error
param be parser context
api return object
external object stack
check error
param be parser context
api return param
_ _
param stack
combiningchar name
check error
param be parser context
api return number
number stack
check error
param be parser context
api return stre
stre stack
first position be constant , last position be equal api
param be parser context
param be number param
implement api function number api position function return position context context list
register default function context
param be context
register function
param be context
param be function param
param be function implementation null
api return constant case success , constant case error
unregister function
register external mechanism function lookup
param be context
param be lookup function
param be lookup datum
register function
param be context
param be function param
param be function uri
param be function implementation null
unregister function
api return constant case success , constant case error
param be context
param be name
param be param can not be null empty string
api return constant case success , constant case error
register variable param
param be context
param be variable param
param be variable param null
api return constant case success , constant case error
unregister variable
register external mechanism variable lookup
param be context
param be lookup function
param be lookup datum
register variable param
param be context
param be variable param
param be variable uri
param be variable param null
unregister variable
api return constant case success , constant case error
cleanup context datum associate register function
param be context
cleanup context datum associate register variable
param be context
cleanup context datum associate register variable
param be context
initialize context root
param be parser context
param be parser context
if be two number , one close positive infinitybe return by api
implement api function number function return number close param integer
param be number param
param be parser context
param be number param
digit _ lrb
param be string
implement api function param function return constant  , otherwise return constant
api return double value
implement api function string string
if param be empty , empty stringbe return by api
_ constant value be convert string constant
constant value be convert string constant
param be parser context
param be number param
string function convert object string as follow
_ param be convert string by return value param first order
implement api function number param
param return number character string
param be parser context
param be number param
param be parser context
be omit , default param context as only member
param return , param return
implement operation object
param be parser context
param be number param
param return constant param be parser context
param be number param
implement api function string substring
return constant
return constant
function return first param start position specify second param length specify third param
param default context convert string , value context
numeric convert numeric number by call number function
param be parser context
if third param be not specify , api return start position specify second param continue end string
param be number param
param be parser context
param be number param
implement api function number function return value param
precisely , character string be consider have numeric position
param be param
param be param
position first character be constant , position second character be constant
implement _ set api function
param set
trail be sort by order , api be call
implement _ set api function
param set
param be param , sort by order
implement api function string param function return first param string follow first second param string first param string , empty
param be param , sort by order
translate return stre
digit digit
api return follow first order
compile number stre number , api negative value
implement api function string param function return first param string precede first second param string first param string , empty string
param be parser context
_ number
param be number param
implement api function api
param be parser context
api return follow first order
param be number param
param be parser context
implement api function string translate translate function return first param string character second param string replace by character correspond position third param string
search variable array context give variable value
param be context
param contain character , less second third param
comparison addition use follow standard constant rule
param be variable param
api return copy value null if not find
implement unary _ operation object numeric convert numeric number by call number function
character first param string be remove
_ substring return constant _ substring return constant _ substring return _ substring return _ substring return constant _ substring return
must be no lead constant before decimal point apart possibly one require digit immediately before decimal point
param be context
search variable array context give variable value
param be variable uri
api return copy value null if not find
wrap string object
beyond one require digit after decimal point must be as many , but only as many , digit as be need uniquely distinguish number constant numeric value
param be variable param
api return newly create object
param be char value
wrap data object
api return newly create object
param be user datum
param be value
api return newly create object
wrap string object
param be value
api return newly create object
format error message
param be parser context
param be param name
param be param number
param be error number
free memory by
param be
free memory by element
param be param list
free param context
param be param context
param be precompile pattern
api return constant
get stream context pattern use api free context
param be precompile pattern
api return pointer context null case failure
test whether param match pattern
param be precompile pattern
param be param
check maximum reachable by pattern
api return constant
param be precompile pattern
be part set
param be precompile pattern
api return constant  , otherwise , constant case error
check minimum reachable by pattern , constant mean
api return constant case error otherwise
number be convert string as follow be convert string positive constant be convert stre constant negative constant be convert stre constant positive infinity be convert stre infinity negative infinity be convert string _ infinity , number be represent decimal form as number no decimal point no lead constant , precede by sign  one digit before decimal point least one digit after decimal point , precede by sign
api should work
param be precompile pattern
compile param
api return constant
param be param compile
param be optional string
param be compilation param , see
param be prefix definition , array null
api return compile form param null case error
one level param
param be param context
api return constant case error , constant otherwise
datum onto param
can act as reset
param be param context
name null mean
param be current param
param be param
string param be expect come
attribute datum onto param
api return constant case error , constant
otherwise function act
can act as reset
param be param context
name null mean
param be current param
param be param
string param be expect come
datum onto param
api return constant case error , constant
otherwise function act
can act as reset
param be param context
name null mean
param be current param
different api can be feed type
param be param
param be type
element _ , attribute _ , text _ , param _ , comment _ param
string param be expect come
api return constant case error , constant
constant api error
param be stream context
api return constant case nee describe type , constant otherwise
param nee be
param be user datum pointer
be prototype extend link detection callback
param be param carry link
param be pointer param array param
param be number detect link
param be pointer param array source param find
param be pointer param array target param find
param be pointer param array param
param be array value param attribute find
param be number detect link
param be array value param attribute find
param be number param detect link
param be
param be array value title
param be user datum pointer
param be param carry link
be prototype extend link set detection callback
param be number detect link
param be pointer array param
param be pointer array param
param be number param detect link
param be
param be array value title
get default detection api
api return current function null
get default handler
api return current value
check whether give param carry attribute need be link element _ rrb
param be contain param
param be param pointer
api return param
api not full link validity but detect return appropriate link type
be prototype link detection api
call default link detection callback upon link detection
param be user datum pointer
param be param check
set default detection api
param be pointer detection api
set default handler
param be value param block
param be user datum pointer
be prototype simple link detection callback
param be param carry link
param be target link
param be param string
param be link param
initialize default handler
initialize default handler
initialize default handler
attribute definition have be parse
param be user datum
param be name element
param be attribute name
param be attribute param
param be param default value
param be attribute default value
param be param enumerate value set
param be user datum
param be content
param be block length
receive char parser
param be user datum
param be string
param be number
api have be parse
param be user datum
param be api content
element definition have be parse
param be user datum
param be element param
param be element param
param be element value
param be user datum _ lrb _ parser context
param be user datum
param be element name
provide information element
param be user datum
param be local name element
definition have be parse
param be user datum
param be param
param be element param
param be param
param be element name
param be -PRON- would
param be system -PRON- would
param be value _ lrb _ without processing
callback external declaration
param be user datum
param be root element param
param be external -PRON- would
param be system -PRON- would _ lrb _
provide number current parsing point
param be user datum
api return int
get by param
param be user datum
param be param
api return if find
provide line number current parsing point
param be user datum
api return int
get param by param
param be user datum
param be param
api return if find
provide -PRON- would
param be user datum
api return
provide system -PRON- would , basically filename
api return
param be user datum
do have external
param be user datum
api return constant if constant
do have internal
param be user datum
_ en
api return constant if constant
receive ignorable whitespace parser
by default use api
param be user datum
param be string
param be number
initialize default handler
param be handler
initialize default handler
param be handler
initialize default handler
param be handler
param be flag
callback internal declaration
param be user datum
param be root element param
param be external -PRON- would
param be system -PRON- would _ lrb _
param be user datum
api return constant if constant
param be user datum
param be param
param be -PRON- would
param be system -PRON- would
processing instruction have be parse
param be user param
param be param name
param be datum
param be user datum
param be name
param be user datum
param be -PRON- would
param be system -PRON- would
api return if inline null behaviour
param be user datum
param be
control load external , application can either
receive , actually everything be available context , be useless case
param be user datum _ lrb _ parser context
param be user datum
param be element name , include prefix
_ override api callback block _ well use api function set be resolution api
param be array attribute pair , null terminate
param be user datum
param be local name element
provide information element , as well as declaration element
param be number definition
param be pointer array pair definition
param be element param
param be number param
param be element name
param be number default param
param be pointer array attribute value
param be user datum
param be param
param be -PRON- would
param be system -PRON- would
param be param
set default param use globally by library
initialize default handler accord param
param be param constant api return previous value case success constant case error
be generally better code style use api set param explicitly give parsing context
param be handler
by default , default be set constant
free memory by library use
param be param constant api return constant case success constant case error
should not be call by user level code
signature api implementation
param be already block memory
useful collect memory
param be place api function use
param be place api function use
param be place atomic api function use
param be place api function use
provide memory access function set currently use param be specialize atomic block allocation _ lrb _
param be place api function use
api return constant success
param be api function use
override default memory access function set have be call before api
param be api function use
param be specialize atomic block allocation _ lrb _
should be block
useful collect memory
param be api function use atomic allocation
param be api function use
param be api function use
api return constant success
initialize memory layer
api return constant success
api equivalent , log allocation info
param be unsigned int specify param byte
param be param name null
param be param number
api return pointer null case lack memory
signature api implementation
param be param request byte
api return pointer newly block null case error
api equivalent , log allocation info
param be int specify param byte
param be param name null
param be param number
provide number memory currently
api return pointer null case lack memory
api return int represent number block
param memory block
param be amount memory
last param memory not free , useful dumping memory two place runtime
api equivalent , error
param be memory block pointer
param be file descriptor use as output file
provide memory access function set currently use
param be place api function use
param be place api function use
param be place api function use
param be file descriptor use as output file
api return constant success
param be place api function use
api equivalent , log allocation info
api return pointer null case lack memory
param be int specify param byte
api equivalent , log allocation info
param be initial memory block pointer
api return pointer null case lack memory
param be int specify param byte
param be api function use
override default memory access function set have be call before api
param be api function use
param be api function use
should be block
param be api function use
api return constant success
param be file descriptor use as output file
param be number entry
memory , last which be not free
api equivalent , log allocation info
param be initial string pointer
param be param name null
param be param number
api return pointer string null if allocation error occur
provide amount memory currently
api return int represent amount memory
param memory block file
api equivalent , log allocation info
param be initial string pointer
api return pointer string null if allocation error occur
signature api implementation
param be already block memory
param be param request byte
api return pointer newly reallocate block null case error
api equivalent , log allocation info
param be initial memory block pointer
param be int specify param byte
param be param name null
param be param number
api return pointer null case lack memory
signature api implementation
param be constant terminate string
convenient way turn text
api return copy string null case error
param be turn text
api return pointer either constant
check potential content problem , param error output
param be file param
param be
api return number error find
param be file param
debug information attribute
param be attribute
param be level
debug information attribute list
param be file param
param be level
param be attribute list
debug information
param be
param be file param
debug information , be recursive
param be file param
param be
debug information cncerne , not recursive
param be file param
param be
debug information use by
param be file param
param be
debug information element param , be recursive
param be file param
param be param
param be level
debug information list element param , be recursive
param be file param
param be param list
param be level
debug information element param , be not recursive
param be file param
param be param
param be level
param be file param
param be stre
param be param count
api return number
information string
output type name
param be file param
param be param
param be initial
param be param buffer
param be line read function
implement allow load , validate , view , modify use environment similar unix
implement function base current base param
param be context
param be unused
param be param
param be unused
param be param file , default stdout
api return constant
implement function serialization param content
param be context
param be unused
param be param
param be unused
api return constant
be generic signature function
param be context
param be stre param
param be first param
param be second param
api return int , negative return indicate error
implement function dir information param
param be context
param be unused
param be param
param be unused
param be context
api return constant
param be unused
param be define
param be unused
api return constant case error
param be context
param be unused
implement function do unix like list give param
param be param
param be unused
api return constant
param be context
command work current
implement function structure
param be file name
implement function load load specify by param
param be unused
param be unused
api return constant
print param output file
param be param print output file
print error default error
param be valid error -PRON- would
param be param cause fail
print result output file
param be valid result generate by
output be compatible command
param be context
param be output param
param be param
param be unused
api return constant case error
be generic signature input function
param be stre param
api return stre which be free by
param be context
param be file name
implement function write current param , be original name
param be unused
param be unused
api return constant case error
implement function full path root param
param be context
param be uri
param be unused
param be unused
api return constant case error
param be context
param be file name
param be param
param be unused
api return constant case error
validation be do against give
implement function validate validate
implement function write write current param , serialization specify
param be input char
api return null
param be input char
param be param
api return null
check valid param
be assume be param
api be not param , as allow long param sequence necessary
api return value constant
param be pointer putative param encode string
read first utf8 character
note , api check param maximum size , but do not check maximum value
produce sequence
be capable
param be sequence param encode byte
param be pointer minimum number byte present sequence
be use assure character be completely contain within sequence
should be bit readable fast api
param be first
param be second
api return char value constant case error , set actual number byte consume case error
api return constant
check have content
format param place result
param be param result buffer
param be param result buffer length
param be param message printf formatting
param extra param message
param be prefix
api return param number character write constant
param be
param be second
api return constant
format place result
param be result buffer
param be result buffer length
param be message printf formatting
param be extra param message
param be first
api return number character write constant
param be second
api return integer result comparison
param be array
api return first null
param be search
param be original array
param be array
api return contain concatenate string
original be reallocate should not be free
param be array
assume mark constant
param be first
param be search
param be second
api return first null
api return integer result comparison
param be input
api return null
length string
param be array
assume mark constant
api return number contain array
param be first
param be second
param be max comparison length
api return integer result comparison
param be original array
if constant be api error null be return
array , extend param first byte
param be array
param be length
as api , but create string
api return , original be reallocate should not be free
original two string be not free
param be first string
param be second string
param be param constant api return null
length be calculate automatically
param be first
param be second
param be max comparison length
api return integer result comparison
param be input
param be param
api return null
param be array
param be search
api return first null
extract give string
param be array
param be index first char
param be length
api return first null
compare two value
param be pointer first utf8 char
param be pointer second utf8 char
api return result compare as api
calculate internal size utf8 character
param be pointer utf8 character
api return number byte character , constant format error
param be sequence param encode byte
api return number character stre constant case error
length utf8 string , do not full utf8 check content string
function provide relative location utf8 char
param be input constant
param be utf8 character be find
array constant
api return relative character position desire char constant
param be input constant
param be param
api return utf8 null
function provide equivalent fetch character string array
param be input constant
param be position desire utf8 char
api return pointer utf8 character null
param be sequence param encode byte
param be number character array
api return storage size first willen character array
param be sequence param encode byte
create give param string note
position be give unit param char
param be relative first char
param be total number copy
storage size utf8 string behaviour be not guarantee
api return pointer newly create string null
attribute definition have be parse
param be user datum
param be name element
param be attribute name
param be attribute param
param be param default value
param be attribute default value
param be param enumerate value set
attribute have be read by parser
param be user datum
param be attribute param , include prefix
param be attribute value
default handling be convert attribute past element element
param be user datum
param be content
param be block length
receive char parser
param be user datum
param be string
param be number
comment have be parse
param be user datum
param be comment content
element definition have be parse
param be user datum
param be element param
param be element param
param be element value
param be user datum _ lrb _ parser context
provide information element
param be user datum
param be local name element
param be user datum
param be element name
param be element param
definition have be parse
param be element name
param be param
param be user datum
param be param
param be -PRON- would
param be system -PRON- would
param be value _ lrb _ without processing
param be param parser context
param format error message , callback
callback external declaration
param be param message param extra param message
param be user datum
param be root element param
param be external -PRON- would
param be system -PRON- would _ lrb _
param format fatal error message , callback
param be param parser context
param be param message param extra param message
param api param callback param not use , api param callback param error
get by param
param be user datum
param be param
api return if find
get param by param
param be user datum
param be param
api return if find
do have external
param be user datum
api return constant if constant
do have internal
param be user datum
api return constant if constant
receive ignorable whitespace parser
by default use character
param be user datum
param be string
param be number
callback internal declaration
param be user datum
param be root element param
param be external -PRON- would
param be system -PRON- would _ lrb _
param be user datum
api return constant if constant
param be user datum
param be param
param be -PRON- would
param be system -PRON- would
processing instruction have be parse
param be user param
param be param name
param be datum
param be user datum
param be name
param be user datum
param be -PRON- would
param be system -PRON- would
api return if inline null behaviour
receive , actually
everything be available context , be useless case
param be user datum
param be
control load external , application can either
param be user datum _ lrb _ parser context
param be user datum
param be local name element
_ override api callback block _ well use api function set be resolution api
provide information element , as well as declaration element
param be number definition
param be pointer array pair definition
param be element param
param be number param
param be number default param
param be element name
defaulted one be end array
param be pointer array attribute value
param be user datum
param be element param , include prefix
param be array attribute pair , null terminate
param be user datum
param be param
param be -PRON- would
param be system -PRON- would
param be param
param format warning message , callback
param be param message param extra param message
param be param parser context
param be parser context
api provide current index parser relative start current
api name be somewhat misleading
api return index byte begin constant case index could not be
do not clean parser state , clean memory by library
be cleanup function library
reclaim relate global memory library processing
do not deallocate related memory
api be byte begin start constant finish size byte file
function be constant
_ _ clear info sequence
param be info sequence pointer
case call api before call api avoid leak report
one should call api only
clear parser context
may crash application
be sometimes hard guess
library may use without
param be parser context
create parser context param
param be pointer array
api return parser context null
create parser context use parser stream
param be handler
param be user datum return callback
param be read function
param be close function
param be handler
api return parser context null
create parser context use parser mode
param be encoding
param be handler
param be user datum return callback
remain character be parse remain character not need be feed api
datum be use detect encode
param be pointer array char
param be number char array
allow content encode detection , size should be constant value filename be use fetch external report
param be optional file name uri
api return parser context null
parse param build
reuse parser context
param be parser context
param be pointer constant terminate string
param be base param use
parse file descriptor build
param be combination
param be parser context
param be param , null
api return result
param be open file descriptor
param be base param use
param be param , null
param be combination
api return result
parse file filesystem network
file descriptor not be close reset
reuse parser context note
reuse parser context
param be parser context
param be file
param be param , null
param be combination
api return result
parse function source build
reuse parser context
param be parser context
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return result
parse param build
reuse parser context
param be parser context
param be pointer char array
param be param array
param be base param use
param be param , null
param be combination
api return result
reset parser context
param be parser context
reset parser context
param be parser context
param be pointer array char
param be number char array
param be optional file name uri
param be param , null
api return constant case success constant case error
apply param parser context
param be parser context
param be combination
external type
api return constant case success , set unknown unimplemented param case error
param be system param resource request
param be param resource request
param be parser param
api return input parser
free memory use by parser context
however parse _ be not free
param be parser context
api return api function pointer
get default external function application
read current value one feature parser instance
param be parser context
param be feature param
param be location store param
api return constant case error , constant otherwise
copy feature name result array
param be length feature name array
param be array string be fill feature name
param be param be examine
api return param value
api return constant
load parse
api return constant case error , total number feature , param be update number string copy , string must not be deallocate
param be handler block null
param be input buffer
api return result null case error
input be free by function case
_ _ initialize info sequence
param be info sequence pointer
param be encoding
initialization function parser
be not reentrant
call before processing case use multithreaded program
initialize parser context
param be parser context
api return constant case success constant case error
set return previous value default text support
constant version parser use detect ignorable white space
param be int constant api return last value constant no , constant
constant code should be do by use api function detect empty generate
set return previous value enable line number element content
may break old application be turn by default
value affect
param be int constant api return last value constant no , constant
be not generate
as result callback be generate api callback instead api one
param be param load
load external , use api unparsed may generate problem
param be param load
param be context which be call null
api return null
param be parser context
api be provide as way force standard behavior constant back old mode compatibility
param be input
create param stream structure encapsulating input stream suitable parser
api be only generate
constant later version standard way
api return param stream null
initialize parser context
api return null
param be encoding
param be
param be handler
param be return value set parse
param be user datum return callback
param be use loop detection , use constant
param be
param be handler
param be user datum return callback
api return constant
parse param call by parser allow sequence well balanced be one define by content
param be return value set parse
param be use loop detection , use constant
param be return
parse memory
param be parser context
param be char array
param be param byte param
param be last param
api return constant
parse param call by parser allow sequence well balanced be one define by content
param be parsing context
param be param load
param be system param load
param be return value set parse
load parse external
external general parse be param
api return constant
parse external general within parsing context
param be name contain external -PRON- would
param be name contain
api return result null case error
parse param build
param be pointer array
api return result
param be parser context
api return , constant case error
api return constant
parser context be augment as result parse
parse external context build
content correspond well balance
param be param
api return result
param be parser context
api return , constant case error
parser context be augment as result parse
external general parse be param
parse general parse
param be
param be handler
param be user datum return callback
param be use loop detection , use constant
external general parse be param
parse external general
param be return value set parse
param be system param load
parse file build
be provide by default
api return constant
automatic support compress
param be param
api return result
param be context param
parse param within context give param
param be input string
param be input string length byte
param be combination
param be return value set parse
allow sequence param be well balanced define by content
api return constant
parse param block build
param be pointer char array
param be param array
api return result
insert param record sorted sequence
param be parser context
param be param sequence pointer
find parser param info struct give param
param be parser context
param be param within
api return block pointer null
param be param info sequence pointer
param be param pointer
api return long indicate position record
find index info record give param be should be sort sequence
callback free parser input allocation
param be stre deallocate
api increase input parser
api preserve pointer input buffer , keep already read datum
param be parser input
param be indicative size
api be internal be deprecate
api return amount char read , constant param case error , constant indicate end
param be parser input
param be indicative size
api return constant as be error use
set return previous value enable pedantic warning
parse param build
param be int constant api return last value constant no , constant
param be pointer constant terminate string
param be base param use
param be param , null
param be combination
api return result
param be open file descriptor
parse file descriptor build
param be base param use
param be param , null
param be combination
api return result
file descriptor not be close
note reset
parse file filesystem network
param be file
param be param , null
param be combination
api return result
parse function source build
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return result
parse param build
param be pointer char array
param be param array
param be base param use
param be param , null
param be combination
api return result
parse param build
param be pointer array
api return result null case failure
case be not well form , attempt build be anyway
parse file build
param be param
api return result null case failure
case be not well form , attempt build anyway
parse param block build
be provide by default
automatic support compress
param be pointer char array
param be param array
api return result null case error
case be not well form , attempt build be anyway
load parse external
param be handler block
param be name contain external -PRON- would
api return result null case error
param be name contain
parse param build
param use give function block parse callback
param be handler block
param be pointer array
param be work param mode
read no well form
api return result
be null , default api
parse external context build
use give function block parse callback
be null , default api
content correspond well balance
param be handler block
param be param
api return result
parse file build
use give function block parse callback
param be handler block
param be param
param be work param mode
be provide by default
automatic support compress
read no well form
api return result
be null , default api
parse file build
use give function block parse callback
param be handler block
param be param
be provide by default
automatic support compress
param be work param mode
be null , default api
read no well form
param be
user param be store within parser context context _ private member , be available nearly everywhere
api return result
parse param block use give function block parse callback
param be handler block
param be pointer char array
param be param array
param be work param mode
be null , default api
read not well form
api return result
parse param block use give function block parse callback
param be handler block
param be pointer char array
param be param array
be null , default api
param be work param mode
read no well form
param be
user param be store within parser context context _ private member , be available nearly everywhere
api return result
parse file call give handler api
automatic support compress be provide
param be handler
param be user datum return callback
param be file name
api return constant case success error number otherwise
well parse api
parse param call give handler api
param be handler
param be user datum return callback
param be param input
param be length byte
api return constant case success error number otherwise
change defaultexternal function application
param be function
param be parser context
change current param one feature parser instance
param be feature param
param be pointer location param
api return constant case error , constant otherwise
param must not be null , but param can be
parser context parse param
clear prior content parser context
param be parser context
param be param
param be file name
block parser processing
param be parser context
set return previous value default support
initially parser always keep reference instead substitute value output
free context
param be int constant api return last value constant no , constant
param be context
create context
param be
function have be use change default parser behavior api have be use change file by file basis
api return set
param be
api return constant
param be
param be set use parse include
api return constant
param be
param be set use parse include
param be application param be pass parser context _ private field parser context
param be context
api return constant
param be param
implement give reuse information datum come give context
implement give
api return constant
param be
implement give
api return constant
param be
param be set use parse include
param be
param be set use parse include
api return constant
set param use processing resource
api return constant
param be application param be pass parser context _ private field parser context
param be processing context
param be set use parse include
api return constant case success constant case error
param be param
param be
api return null case error
param be param
be first destroy
param be first list
api return last null case error
list end list param merge adjacent text
as result text merge may be free
param be
param be
be property instead
end list merge adjacent text
api return null case error
be property instead
be first destroy
param be
param be
api return null case error
be property instead
be first destroy
param be
param be
be first unlinked context
api return element null case error
serialize text attribute value simple buffer
param be buffer output
param be
param be attribute
param be text content
function extract content buffer
be first unlinked context
as previous merge adjacent text
param be buffer
api return internal content
function extract end content buffer
param be buffer
api return end internal content null case error
reference be substitute
fill buffer value
param be buffer
be first unlinked context
element list merge adjacent text
param be read
api return constant case success constant case error
recursive behaviour , be print
param be buffer output
param be
param be current
param be param indent
param be be format allow
format constant provide indent
remove begin buffer
api return number byte write buffer , case error 0be return by api store error
param be buffer
param be number remove
api return number byte remove constant case failure
carry directly by
note api behaviour differ api as return constant error instead constant due param use as return type
read value , can be either text
function get length buffer
param be buffer
api return length datum internal content
string range buffer
param be buffer
param be string
param be number
length param be recompute
api return constant successful , positive error code number otherwise constant case internal api error
string range begin buffer
param be buffer
param be string
param be number
append constant terminate string buffer
length be recompute
param be buffer
api return constant successful , positive error code number otherwise constant case internal api error
param be char string
append constant terminate string buffer
param be buffer
api return constant successful , positive error code number otherwise constant case internal api error
param be string
function extract content buffer
param be buffer
api return internal content
api return constant successful , positive error code number otherwise constant case internal api error
api return structure
api create buffer
api return structure
api create buffer
param be initial param buffer
param be memory
api create buffer immutable memory
param be param byte
api return structure
not be modify nor copy , be expect be present until end buffer lifetime
remove string contain buffer back caller
buffer be reset empty content
param be buffer
do not work immutable buffer as can not be reset
api return previous string contain by buffer
buffer file
param be param output
param be buffer
api return number write
empty buffer
param be buffer
free buffer
free content structure which encapsulate
param be buffer free
grow available space buffer
param be buffer
param be minimum free size
api return available space constant case error
function get length buffer
param be buffer
api return length datum internal content
resize buffer accommodate minimum param size
param be buffer resize
param be desire param
api return constant case problem , constant otherwise
set allocation param buffer
param be buffer tune
param be allocation param use
remove begin buffer
param be buffer
api return number remove , constant case failure
param be number remove
api which manage grow output buffer
one end buffer
param be buffer
param be param
api which manage grow output buffer
one char end array
param be buffer output
param be param
api which manage grow output buffer
param be buffer output
param be param
if param be null empty api return param
param be name
build prefix
param be param
one write double param , check first
param be preallocate param
param be preallocate param length
find current number element which be element
param be param
api return stre which must be free by caller
api return count element constant if not available
copy info
param be
memory , otherwise string
note reference be different element spec
api return , null case error
copy param
param be param
api return , null case error
param be
content be copy as well as
param be
api return , null case error
copy list
param be first
api return , null case error
copy param
param be param
api return , null case error
recursive copy param list
param be first param list
param be
api return , null case error
copy attribute
use api
param be element attribute be graft
param be attribute
api return , null case error
copy attribute list
param be element attribute be graft
param be first attribute
api return , null case error
create internal
param be pointer
param be param
param be external -PRON- would
param be system -PRON- would
api return pointer structure
function call acquire wrapper
param be wrapper context
param be context param
param be request name
param be request prefix
api return null case error
api be not intensively test
param be optional context custom processing
param be optional param
param be param start
process could break attribute value element content
param be destination
param be optional
param be option flag
constant _ rrb _
currently return error
param be optional context custom processing
reference param be remappe point
be case
api return constant
ensure be wellforme by create additional param need
param be optional param
process could break attribute value element content
param be param start
param be give
param be destination
param be optional
param be option flag
constant _ rrb _ , entry param be use constant _ rrb _
free param context
param be param context
param be
api return constant
initialize param context
api return null case internal error
ensure param point param hold param
ensure be wellforme by create additional param need
api be not intensively test
param be wrapper context , unused moment
param be param
param be option flag
process could break attribute value element content
api return constant
unlink give param
api be not intensively test
param be wrapper context
reference param be remappe point
param be param
param be param be remove
param be set param , unused moment
substitute param _ param _ , thus ensure remove be autark param
copy param give
api return constant success , constant api internal error
param be param
param be
api return , null case error
recursive copy param list
param be target
param be first param list
api return , null case error
param be
open file
param be file
param be
api return number byte write constant case failure
memory return be param
be upto caller free param api
param be
param be memory pointer
param be memory length
param be should format space be
current memory use character encoding specify by caller
format constant provide indent
param be generate text
note be upto caller api free allocated memory api
param be memory pointer text
param be length generate text
param be should format space be
constant _ rrb _ , entry param be use
memory return be param byte
be upto caller free param api
format constant provide indent
param be
constant _ rrb _ if no be give , _ entry be use be case - PRON - have unlinke param want unlinked param context
param be character encode use
result byte array be constant terminate
param be memory pointer
param be memory length
current memory use character encoding specify by caller
note be upto caller api free allocated memory api
param be generate text
param be memory pointer text
param be length generate text
open file
param be file
param be
param be should format space be
api return number byte write constant case failure
param be character encode use
get root element
param be
api return root null
set param element
param be
format constant provide indent
api return old param element
recursive behaviour , be print
param be file output
param be
param be current
param be param element
param be param
api return first element null if not available
free structure use by , include
param be pointer
free structure
param be structure free
free , be recursive behaviour , be free
do not unlink list , use api first
param be
param be first list
free structure associate
free , be recursive behaviour , be free
param be pointer
find first element which be element note reference be different element spec
free structure associate chain
param be first pointer
free one attribute , content be free
param be attribute
free property , be free
param be first property list
api return current allocation scheme
get default mode use , base
api return constant
get , base
param be
api return constant
get internal
param be pointer
api return pointer structure null if not find
search last
param be param
api return last null
get line number
param be valid param
api return line number if successful , constant otherwise
search get value attribute associate param do
param be param
api look attribute declaration fix default declaration value unless use have be turn
param be attribute param
api be similar api except accept only attribute no
override line store constant bit int
api return attribute value null if not find
be upto caller free param api
build structure base path give param
param be param
api return path null case error
caller must free param
search apply give element
param be
param be current param
type be constant _ use exact size , keep memory usage constant _ double buffer tight normal usage , large string avoid pathological performance
api return null terminate array find nee be free by caller null if no
param be param
search get value attribute associate param attribute have be anchor specify
param be attribute param
api look attribute declaration fix default declaration value unless use have be turn
param be uri
api return attribute value null if not find
be upto caller free param api
search get value attribute associate param do
api act independently associate attribute
use api aware processing
api look attribute declaration fix default declaration value unless use have be turn
param be param
param be attribute param
be upto caller free param api
api return attribute value null if not find
search attribute associate param attribute have be anchor specify
null indicate use default
param be param
api look attribute declaration fix default declaration value unless use have be turn
param be attribute param
param be uri
param be param
api return attribute attribute declaration null if neither be find
check whether param be empty whitespace only param
api return attribute attribute declaration null if neither be find
param be attribute param
param be param
search attribute associate param api look attribute declaration fix default declaration value unless use have be turn
param be system identifier
api return constant yes , constant no
param be identifi
api return constant
param be param
api return last element null if not available
creation contain block
param be
param be block param
param be length block
api return pointer object
creation character reference
param be
api return pointer object
creation element , end list
content param be optional
find last element which be element note reference be different element spec
param be char string , start
content be suppose be piece , content allow reference
param be param
newly create element inherit
special char must be escape first by use api should be use
list contain text constant be create
param be param
api return pointer object
creation contain comment
param be
param be comment param
api return pointer object
param be param
api return
param be stre give param constant
creation contain comment within
param be
param be comment param
api return pointer object
creation fragment
param be own fragment
api return pointer object
creation element within
content be optional
param be
param be param
use api
api return pointer object
param be
creation element within
content be optional
param be
param be text param
content be suppose be piece , allow reference , but special char nee be escape first by use api
param be param
use api
api return pointer object
param be
creation processing instruction element
param be target
param be process instruction param
content be suppose be piece , allow reference , but special char nee be escape first by use api
param be text param
param be param
api return pointer object
param be
create property carry by
param be param attribute
param be param attribute
api return pointer attribute
creation element within
content be optional
param be
param be param
api return pointer object
creation text within
param be
param be
param be text param
api return pointer object
param be text param
creation text extra param length param
text give
param be
param be text param
param be text param
api return pointer object
creation external
create internal , use api
param be pointer
param be param
param be external -PRON- would
param be system -PRON- would
api return pointer structure
creation , old way use without deprecate
param be carry
param be uri associate
param be param
api return null functionality have be remove
creation element
be optional
param be param
api return pointer object
us api make copy name
param be
creation element
be optional
param be param
api return pointer object , pointer name as param
param be
default , prefix should be null
param be element carrying
api refuse create similar param one present param
use api be need as name
param be uri associate
use href null case element creation be not define
param be param
api return pointer null
create property carry by param
param be hold param
param be
param be param attribute
param be param attribute
api return pointer attribute
create property carry by param
param be hold param
param be
param be param attribute
param be param attribute
api return pointer attribute
creation processing instruction element
use preferably get string
param be process instruction param
param be param
api return pointer object
create property carry by param
param be hold param
param be param attribute
param be param attribute
api return pointer attribute
creation reference
param be
api return pointer object
param be reference param , reference string
creation text
param be text param
api return pointer object
content param be optional
creation element , end list
param be param
newly create element inherit
param be param
api return pointer object
text be create contain string content
param be
use api contain need be preserve
param be text param
creation text extra param length
param be text param
api return pointer object
param be text param
find first close param which be element param
param be current param
append extra substring param
api return element null if not available
note reference be different element spec
param be modify
param be extra content
append extra substring param
param be modify
param be extra param
param be size content
api , content be suppose be raw text , unescaped special char be allow , reference be not support
function , api , as , param sign , be automatically replace by
use escape representation
reference be substitute
fill param buffer value
param be param
param be read
api , content be suppose be raw text , unescaped special char be allow , reference be not support
api return constant case success constant case error
recursive behaviour , be print
param be buffer output
param be
param be current
param be param indent
param be be format allow
api return number byte write buffer constant case error
recursive behaviour , be print
param be buffer output
param be
carry directly by
read value , can be either text
param be current
param be param indent
param be be format allow
format constant provide indent
note , use api instead
param be optional param string
format constant provide indent
search base
code should work
api return base as define rfc constant section constant
base uri within content constant
param be
base uri encapsulating however do not return base , use param
param be check
reference be substitute
param be read
api return pointer base , null
api return null
be upto caller free param api
search language
param be check
attribute one carry by near
param be check
search space preserve behaviour
space attribute one carry by near
api return pointer value , null
be param text param
api return constant
param be param
api return constant yes , constant no
carry directly by
read value , can be either text
param be
param be param
param be should replace content external form
param be
api return pointer string copy , caller must free api
param be param
build stre equivalent text contain param make text constant
param be should replace content external form
build stre equivalent text contain param make text constant , api do not character encode handling
set base uri
api return pointer string copy , caller must free api
base attribute
param be change
param be base uri
replace param
param be modify
param be value content
replace param
param be modify
param be value param
param be size content
content be suppose be piece , content allow reference , but special char nee be escape first by use api
set language
param be change
param be language description
set param
content be suppose be piece , content allow reference , but special char nee be escape first by use api
param be change
param be name
set space preserve behaviour
space attribute
param be change
param be current param
find first close previous param which be element param
api return previous element null if not available
api check declare within give param be properly declare
be need after copy paste operation
note reference be different element spec
may still hold pointer declaration outside
param be value _ lrb _ constant default , constant preserve
param be
as much as possible function reuse find environment
param be define reconciliate
api return number declaration create constant case error
param be attribute
api return constant case error
be redeclare give
unlink free one attribute , content be free note do not work definition attribute
param be param
unlink param current context , prune one place
param be
api return old
param be param
be first unlinked context
param be
api return number byte write constant case failure
use enable
convert give param
param be param
param be
param be name param
stdout file be use
param be
api return number byte write constant case failure
param be param
call api param which be not available after call
param be param
api return number byte write constant case failure
param be output buffer
use enable
param be
be indent output
param be should format space be
api return number byte write constant case failure
param be param output
format constant provide indent
param be
stdout file be use
param be name param use null
param be should format space be
api return number byte write constant case error
call api param which be not available after call
param be output buffer
param be
format constant provide indent
param be should format space be
api return number byte write constant case failure
until find define return null otherwise
search register give name space
param be param
can be null , be search default
not allow cross boundary
warning be generate cover case
param be
param be current param
param be prefix
api return pointer null
search aliase give uri
until find define return null otherwise
param be
param be current param
param be value
api return pointer null
set buffer allocation api
param be allocation api use
set default param use , base correct value
param be
set , base correct value
param be
param be
update param point
type be constant _ use exact size , keep memory usage constant _ double buffer
param be first element
param be
associate param
param be param
param be pointer
set attribute carry by param
param be param
param structure must be , be not check
param be definition
param be attribute param
param be attribute param
api return attribute pointer
param be attribute param
set attribute carry by param
param be attribute param
param be param
api return attribute pointer
update param point
param be element
param be
parse qualified param string
param be full
corresponding param be use , if
param be
be error no param prefix
api return null
otherwise , return local part , param be update get prefix
return value param must be free by caller
parse qualified param string
param be full
param be int
parse param string build list associate
should produce flat only text constant
param be
param be param attribute
api return pointer first
parse param string build list associate
should produce flat only text constant
api return null  , otherwise , update param length byte prefix return pointer start param without prefix
param be
param be param text
param be length string param
api return pointer first
give string end param
param be param
param be param
param be content length
api return constant case error , constant otherwise
merge two text one
param be param text
param be param text merge
api return param text augment
param be
remove attribute carry by param
can not be unlinke as not have pointer
param be param
param be definition
param be attribute param
api return constant
remove attribute carry by param
only attribute no
param be param
param be attribute param
api return constant
be not free
unlink be current context , use api after unlink discard
check param conform lexical param
param be param check
param allow space end string
check param conform lexical param
param be param check
param allow space end string
api return constant  otherwise constant case internal api error
check param conform lexical param name
param be param check
param allow space end string
api return constant  otherwise constant case internal api error
check param conform lexical param
api return constant  otherwise constant case internal api error
param be param check
param allow space end string
close operation unload associate param free datum associate param
api return constant  otherwise constant case internal api error
param be param
param be param
api return constant case success , constant case param error
api return constant case success , constant case param error constant
param be not yet implement
param be module param
free operation free datum associate param but do not unload associate library which may still be use
open library give param path note
due issue , behaviour can only be guarantee name use ascii
param be set
api return module null case error
canot guarantee param string would work , which be param be const char not const
param be param
param be param
lookup param address give param note
due issue , behaviour can only be guarantee name use ascii
param be result param address
api return constant
canot guarantee param string would work , which be param be const char not const
param be pointer array byte store result
param be length
take block param char param convert ascii plus block char param
param be pointer array param char
param be length
value after return be number octet consume
param be element
check have full require deprecate attribute
param be attribute
param be whether allow deprecate attribute
api return one constant
allow implicitly close
list be keep array
param be
param be param
api check if element one list be would give
api return constant
param be element
create parser context param
api return constant if , constant otherwise
param be pointer char array
param be param array
api return parser context null
param be handler
param be user datum return callback
param be pointer array char
param be number char array
param be optional file name uri
param be optional encoding
api return parser context null
create parser context use parser mode value filename be use fetch external report
parse param build
reuse parser context
param be parser context
param be pointer constant terminate string
param be base param use
param be param , null
param be combination
api return result
parse file descriptor build
reuse parser context
param be parser context
param be open file descriptor
param be base param use
param be param , null
param be combination
api return result
parse file filesystem network
reuse parser context
param be parser context
param be file
param be param , null
param be combination
api return result
parse function source build
reuse parser context
param be parser context
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return result
parse param build
reuse parser context
param be parser context
param be pointer char array
param be param array
param be base param use
param be param , null
param be combination
api return result
reset parser context
param be parser context
apply param parser context
param be parser context
param be combination
check whether element may be direct param element
api return constant case success , set unknown unimplemented param case error
note _ do not check deprecated element
param be param element
param be element
api return constant
constant otherwise
check whether element may be direct param element
param be param element
param be element
api return one constant
param be pointer array byte store result
param be length
param be pointer array param char
take block param char param convert ascii plus block char param
param be length
param be character escape constant
value after return be number octet consume
param be param
lookup give entitiestable
api return associate  , null otherwise
linear be really ugly , hash table be really need
param be unicode param
lookup give entitiestable
api return associate  , null otherwise
linear be really ugly , hash table be really need
free memory use by parser context
however parse _ be not free
param be parser context
api return constant
set return previous value omit
param be int constant api return last value constant no handling , constant auto
allow implicitly close
list be keep array
param be
api check if be by one be
param be element
param be attribute param
api return constant if , constant otherwise
api return constant be attribute be script constant otherwise
initialize parser context
api return null case allocation error
check whether param be valid
param be
api return element , return api
param be whether allow deprecate element
param be parser context
attribute , return api , constant check perform
parse memory
api return value parse int
param be parser context
param be char array
param be param byte param
param be last param
api return constant
parse param build
param be pointer array
api return result
param be free form string describe param , null
param be parser context
api return , constant case error
parser context be augment as result parse
param be parser context
param be parser context
param be location store name
parse file build
api return associate
parse element , be highly recursive be keep compatibility previous code version element
content attribute
param be param
api return result
param be free form string describe param , null
parse param build
parse reference declaration
parse reference
be provide by default
param be pointer constant terminate string
automatic support compress
api return result
param be param , null
param be base param use
param be combination
parse file descriptor build
param be open file descriptor
param be base param use
param be param , null
param be combination
api return result
parse file filesystem network
param be file
param be param , null
param be combination
api return result
parse function source build
param be read function
param be close function
param be handler
param be base param use
param be param , null
param be combination
api return result
parse param build
param be param array
param be pointer char array
param be base param use
param be param , null
param be combination
api return result
parse param
if param be null , default behavior return
param be pointer array
param be free form string describe param , null
param be handler block
use callback parse event
parse file build
api return result unless be null be not well form
use give function block parse callback
param be
param be param
param be handler block
param be free form string describe param , null
be provide by default
automatic support compress
be null , default api
api return result unless be null be not well form
lookup param elementtable
param be param name
api return relate null if not find
param be
see api return
param be link
api return pointer datum reference link
insert param order list end value
param be list
param be param
remove datum list
api return constant case success , constant case failure
param be list
element param list list
param be list
param be param list
create list
api return constant case success constant case error
param be optional param function
param be optional comparison function
api return list null case error
callback function use compare constant datum
param be first datum
param be second datum
api return constant be equality , constant otherwise depend ordering
callback function use free data list
delete list associate datum
param be datum deallocate
param be list
duplicate list
param be list
api return copy list null case error
be list empty
param be list
get last element list
param be list
api return last element list , null
api return constant
get first element list
param be list
api return first element list , null
insert param order list beginning value
param be list
param be param
api return constant case success , constant case failure
param be original list
param be list
include element second list first one clear second list
remove last element list
param be list
remove first element list
param be list
param end list
param be list
param be param
api return constant if successful , constant otherwise
param beginning list
param be list
param be param
api return constant if successful , constant otherwise
remove instance associate param list
param be list
param be list param
api return number , constant
remove first instance associate param list
param be list
param be list param
remove last instance associate param list
api return constant
param be list
param be list param
reverse order element list
api return constant
param be list
search list reverse order value datum
param be list
param be search value
api return value associate datum null case error
param be list
param be process function
walk element list reverse order apply param function
param be param pass param function
search list value datum
param be list
param be search value
api return value associate datum null case error
get number element list
param be list
sort element list
api return number element list constant case error
param be list
param be list
param be process function
param be param pass param function
walk element first first last apply param function param function
param be param find list
param be extra param provide param
api return constant stop walk list , constant otherwise
callback function use
create buffer parser output
param be encode null
api return parser output null
create buffer parser input progressive parsing
param be param check
api return parser input null
api return constant  , return constant
param be encoding
if succeed file be directory , return constant otherwise return constant
param be parser context
function check see
param be parser input
api return input null case error
clear entire input callback table
check error which case input be cleanly free appropriate error be raise context
include param
clear entire output callback table
include param callback
check input case be create stream , case encode update base case
param be param
api return constant case error
input file
param be uri matching
api return constant otherwise
param be uri matching
api return handler null case failure
read byte buffer
param be param
param be datum
param be number byte write
api return number byte write constant case failure
param unescaped version filename
wrapper around param
free memory use by buffer parser input
param be buffer parser input
param be param
api return constant
check if uri match one
param be uri matching
api return constant otherwise
param be uri matching
api return context null case error
read byte buffer
param be param
param be datum
param be number byte write
api return number byte write
param be param
api return constant
check if uri match one
param be uri matching
api return constant otherwise
param be uri matching
api return context null case error
open temporary buffer collect subsequent request
param as be call output buffer creation api
param be destination uri
param be param desire
read byte buffer
api return context null case error
param be param
param be datum
api return number byte write
param be number byte write
callback use input api close resource
param be input param
api return constant case error
param be param uri
api return constant
callback use input api open resource
param be param uri
api return input context null case error
callback use input api detect
callback use input api read resource
param be input param
param be param store datum read
param be length param byte
api return number byte read constant case error
param be param load
specific disable network access , though still allow local access resolution
param be system param load
api return , null
param be context which be call null
api be obsolete
please see uri well
param be input file param
api return canonicalize version path
close output free associated resource
param be buffer output
api return number byte write constant case error
create buffer output progressive saving
param be
param be encode null
api return parser output null
create buffer output progressive saving file descriptor
param be file descriptor number
param be encode null
api return parser output null
param be file
create buffer output progressive saving file buffer
param be encode null
api return parser output null
param be string contain param filename
param be encode null
param be param
api return output null
be provide by default
automatic support compress
library only support write local file
create buffer output progressive saving file
use stdout as output
create buffer output progressive saving handler
param be write function
param be close function
param be handler
api return parser output null
param be buffer output
api return number byte write constant case error
param be encoding
give pointer datum currently hold output buffer
param be
api return pointer datum null case error
give length datum currently hold output buffer
param be
api return constant case error no data be hold , size otherwise
store case partial delay write
param be buffer parser output
param be size byte array
param be char array
api return number char immediately write , constant case error
store case partial delay write
write content array output buffer api internal param buffer be lossless
param be buffer parser output
param be constant terminate param string
param be optional param function
api return number char immediately write , constant case error
store case partial delay write
param be buffer parser output
param be constant terminate string
write content string output buffer api escape internal param buffer be lossless
api return number char immediately write , constant case error
callback use output api close resource
param be output param
write content string output buffer api internal param buffer be lossless
api return constant case error
param be param uri
api return constant
callback use output api open resource
param be param uri
api return output context null case error
callback use output api write resource
callback use output api detect
param be output param
param be param datum write
param be length param byte
api return number byte write constant case error
lookup directory file
param be path file
api return string contain directory , null
param be file descriptor number
api return parser input null
create buffer parser input progressive parse input file descriptor
param be file
create buffer parser input progressive parsing file buffer
param be encoding
api return parser input null
encode check  constant
param be encoding
param be string contain param filename
api return parser input null
be provide by default
automatic support compress
param be read function
param be close function
create buffer parser input progressive parse input handler
create buffer parser input progressive parsing file
use stdin as input
api return parser input null
param be memory input
param be handler
param be length memory block
param be encoding
api return parser input null
create buffer parser input progressive parse input immutable memory
param be encoding
param be encoding
param be memory input
param be length memory block
api return parser input null
create buffer parser input progressive parse input memory
param be buffer parser input
param be indicative value amount char read
param be buffer parser input
param be size param byte array
api return number char read stored param buffer , constant param case error
param be char array
param be encoding
param be buffer parser input
api return number char read stored param buffer , constant param case error
param be indicative value amount char read
clear input callback input stack
not copy memory buffer , but memory be expect be available until end parsing , be useful
api return number char read stored param buffer , constant param case error
refresh content input buffer , old datum be consider consume api internal param
include param
api return number input callback register constant case error
content arry param input buffer api internal param be use
register default param handler
register default param handler
by default , submit output request use put api
call api change output api use api instead
register set callback parser input
param be api
param be api
param be api
param be api
api return register handler number constant case error
register set callback handling output
param be api
param be api
param be api
param be api
api return register handler number constant case error
entry , may overwrite but different entry
api be use
grow content input buffer , old datum be preserve api internal param
param be
param be param record
param be system , prefix match
one should be able remove one extra copy by copy directly onto _ buffer _ raw
param be value match
api return constant if successful , constant otherwise
give give file
param be
param be file
remove entry
param be
param be param remove
api return number entry remove if successful , constant otherwise
complete resolution lookup external identifier
param be
param be -PRON- would string
param be system -PRON- would string
param be
api return uri resource null  , must be free by caller
lookup local reference associate -PRON- would
param be -PRON- would string
api return local resource if find null otherwise , value return must be free by caller
lookup resource system -PRON- would
param be
param be system -PRON- would string
complete resolution lookup param
param be
api return resource  , value return must be free by caller
param be param
entry , may overwrite but different entry
api return param resource null  , must be free by caller
param be param record
param be system , prefix match
param be value match
api return constant if successful , constant otherwise
entry list
param be list param
param be param local
api return update list
free memory associate
convert entry as one
api return number entry convert if successful , constant otherwise
global content give file
param be file
free memory associate list
param be list
use get user preference
should be accept
api return current value
lookup reference associate -PRON- would deprecate , use api
param be -PRON- would string
api return resource
lookup reference associate system -PRON- would deprecate , use api
param be system -PRON- would string
api return resource
param be should create
check be be empty
complete resolution lookup external identifier use private list
param be list param
api return constant
param be -PRON- would string
param be system -PRON- would string
api return uri resource null  , must be free by caller
complete resolution lookup param use private list
param be list param
param be param
remove entry
api return param resource null  , must be free by caller
param be param remove
api return number entry remove if successful , constant otherwise
complete resolution lookup external identifier
param be -PRON- would string
param be system -PRON- would string
lookup reference associate -PRON- would
param be -PRON- would string
lookup resource system -PRON- would
api return uri resource null  , must be free by caller
api return resource  , value return must be free by caller
complete resolution lookup param
param be system -PRON- would string
api return resource  , value return must be free by caller
param be param
api return param resource null  , must be free by caller
use set debug param operation , constant disable debugging , constant enable
param be debug param require
api return previous value debug level
allow set preference system resolution
section constant spec value accept be constant
param be default preference
api return previous value default preference
use set user preference
should be accept
param be should be accept
convert entry as one
param be
api return number entry convert if successful , constant otherwise
free memory
param be
api be not thread safe , initialization should preferably be do
load build associate datum structure
hand be not recursively
param be file path
can be either entry
api return parse null case error
load make definition effective default external
param be file path
api return constant case success constant case error
api be not thread safe , initialization should preferably be do
load make definition effective default external
api be not thread safe , initialization should preferably be do
param be list directory separate by colon space
load super
not expand reference
param be file path
api return parse null case error
be only need manipulate super like remove entry
param be should create
api return null case error
parse file build
be like api except bypass lookup
param be param
api return result null case error
check value
param be param
param be type definition
param be parser context null
param be optional param type
cleanup default type library
remove normalize white space stre
param be param
api return constant  if not valid constant case internal api error
api return string null
compare constant value
param be first value
param be second value
compare constant value
param be first value
param be whitespace value param
param be second value
param be whitespace value param
copy precompute value
duplicate stre within
param be precompute value be copy
deallocate structure
api return constant case error
api return copy null
param be param structure
cleanup default type library
param be param free
lookup function
api return constant case error
param be param simple param
give -PRON- param struct param by param -PRON- would
param be param build param
api return param  , null otherwise
get canonical lexical representation value
api return param type as define by param part constant , null case error
caller have free param
value type be not support yet , result
be fix constant
param be param
constant do not define canonical representation
caller have free param
get canonical representation value
param be precompute value
param be whitespace type value
api return constant
param be param
extract value param
param be type param
api return value as long
api return constant
lookup type default type library
api return type  , null otherwise
type value
param be type param
param be value
api return value
initialize default type library
param be param
param be param
api return newly structure null case error
param be uri usually
api return constant
give value be consume free struct
param be param
param be param null
api return pointer value null case error
give value be consume free struct
param be name
param be local name
api return pointer value null case error
simple param
param can be constant
one be intend be expand string base type
need as well
give param be consume free struct
param be param
param be param
api return pointer param null case error
if constant param be return
check param conform lexical space predefine param
param be predefined param
param be param check
param be return param
param be param contain param
if constant param be return
check param conform lexical space predefine param
one do apply param
api return constant  otherwise constant case internal api error
param be predefined param
param be param check
param be return param
param be param contain param
check param against param condition
param be param type
param be param check
api return constant  otherwise constant case internal api error
param be lexical param validate
param be precompute param
check param against param condition
take param accord specify whitespace type
param be param check
param be whitespace type param
api return constant
param be param type param
param be lexical param validate
param be precompute param
param be whitespace type param
param be param
value need be normalize param
param be param check
checka param against length , param
set length param value
api return constant
param be param type
param be lexical
param be validate
api return constant
param be lexical
param be param check
param be actual param
param be validate
set length param value
param be precompute param
checka param against length , param
param be precompute param
param be actual param
param be whitespace type param
check param list simple type against param
param be param check
param be lexical param validate
api return constant
param be number list
param be result expect number list
api return constant
if constant param be return
param be predefined param
check param conform lexical space predefine param
param be param check
param be return param
append list value
param be value
api return constant  otherwise constant case internal api error
param be value be append
api return constant
value value
param be value
string value value
api return constant if constant
param be value
api return stre value null
list value
api return value null
param be value
replace 0xd , space
param be param
api return string null
