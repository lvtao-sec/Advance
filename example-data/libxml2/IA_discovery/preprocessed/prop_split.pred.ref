['Compile the automata into a Reg Exp ready for being executed', 'compile ready execute']
['The automata should be free after this point', 'should be free after point']
['xmlAutomataCompile_APIParam_1 is an automata', 'param be']
['xmlAutomataCompile_APIName returns the compiled regexp or NULL in case of error', 'api return compile null case error']
['Initial state lookup', 'initial state lookup']
['xmlAutomataGetInitState_APIParam_1 is an automata', 'param be']
['xmlAutomataGetInitState_APIName returns the initial state of the automata', 'api return initial state']
['xmlAutomataIsDeterminist_APIParam_1 is an automata', 'param be']
['xmlAutomataNewAllTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataIsDeterminist_APIName returns 1 if true, 0 if not, and -1 in case of error', 'api return constant if constant case error']
['xmlAutomataNewAllTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewAllTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewAllTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['allowed only', 'allow only']
['xmlAutomataNewCountTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataNewCountTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewAllTrans_APIParam_4 allow xmlAutomataNewAllTrans_APIParam_3 transition', 'param allow param']
['xmlAutomataNewCountTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewCountTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewCountTrans_APIParam_4', 'param be minimum successive param']
['xmlAutomataNewCountTrans_APIParam_4 is the input string associated xmlAutomataNewCountTrans_APIParam_3 that transition', 'param be input stre associate param']
['this creates first a new target state in the automata and adds a an ALL transition xmlAutomataNewAllTrans_APIParam_2 the @from state xmlAutomataNewAllTrans_APIParam_3 the target state', 'create first target state param state param target state']
['xmlAutomataNewCountTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewCountTrans_APIParam_4', 'param be maximum successive param']
['xmlAutomataNewCountTrans_APIParam_7 is xmlAutomataNewCountTrans_APIParam_7 associated xmlAutomataNewCountTrans_APIParam_3 the transition', 'param be param associate param']
['xmlAutomataNewCountTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['xmlAutomataNewCountTrans2_APIParam_1 is an automata', 'param be']
['xmlAutomataNewCountTrans2_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewCountTrans2_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewCountTrans2_APIParam_4 is the input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition', 'param be input stre associate param']
['xmlAutomataNewCountTrans2_APIParam_5 is the second input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition', 'param be second input stre associate param']
['xmlAutomataNewCountTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewCountTrans2_APIParam_4', 'param be minimum successive param']
['xmlAutomataNewCountTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewCountTrans2_APIParam_4', 'param be maximum successive param']
['xmlAutomataNewCountTrans2_APIParam_8 is xmlAutomataNewCountTrans2_APIParam_8 associated xmlAutomataNewCountTrans2_APIParam_3 the transition', 'param be param associate param']
['xmlAutomataNewCountTrans2_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['xmlAutomataNewCountedTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataNewCountedTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewCountedTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewCountedTrans_APIParam_4 is the xmlAutomataNewCountedTrans_APIParam_4 associated xmlAutomataNewCountedTrans_APIParam_3 that transition', 'param be param associate param']
['xmlAutomataNewCountedTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['Create a new counter', 'create counter']
['xmlAutomataNewCounter_APIParam_1 is an automata', 'param be']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans_APIParam_2 the @from state xmlAutomataNewCountTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max', 'create first target state param state param target state activate by input value whose number be max']
['xmlAutomataNewCounter_APIParam_2 is the minimal value on the counter', 'param be minimal value counter']
['xmlAutomataNewCounter_APIParam_3 is the maximal value on the counter', 'param be maximal value counter']
['xmlAutomataNewCounter_APIName returns the counter number or -1 in case of error', 'api return counter number constant case error']
['xmlAutomataNewCounterTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataNewCounterTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewCounterTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewCounterTrans_APIParam_4 is the xmlAutomataNewCounterTrans_APIParam_4 associated xmlAutomataNewCounterTrans_APIParam_3 that transition', 'param be param associate param']
['xmlAutomataNewCounterTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCountedTrans_APIParam_2 the @from state xmlAutomataNewCountedTrans_APIParam_3 the target state which will increment the xmlAutomataNewCountedTrans_APIParam_4 provided', 'create first target state param state param target state which increment param provide']
['xmlAutomataNewEpsilon_APIParam_1 is an automata', 'param be']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans2_APIParam_2 the @from state xmlAutomataNewCountTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max', 'create first target state param state param target state activate by input value whose number be max']
['xmlAutomataNewEpsilon_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewEpsilon_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['xmlAutomataNewEpsilon_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewNegTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataNewNegTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewNegTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewNegTrans_APIParam_4 is the first input string associated xmlAutomataNewNegTrans_APIParam_3 that transition', 'param be first input string associate param']
['xmlAutomataNewNegTrans_APIParam_5 is the second input string associated xmlAutomataNewNegTrans_APIParam_3 that transition', 'param be second input stre associate param']
['xmlAutomataNewNegTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewEpsilon_APIParam_2 the @from state xmlAutomataNewEpsilon_APIParam_3 the target state', 'create first target state param state param target state']
['xmlAutomataNewOnceTrans_APIParam_1 is an automata', 'param be']
['xmlAutomataNewOnceTrans_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewOnceTrans_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewNegTrans_APIParam_6 is xmlAutomataNewNegTrans_APIParam_6 passed xmlAutomataNewNegTrans_APIParam_3 the callback function', 'param be param pass param callback function']
['xmlAutomataNewOnceTrans_APIParam_4 is the input string associated xmlAutomataNewOnceTrans_APIParam_3 that transition', 'param be input stre associate param']
['xmlAutomataNewOnceTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewOnceTrans_APIParam_4', 'param be minimum successive param']
['this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCounterTrans_APIParam_2 the @from state xmlAutomataNewCounterTrans_APIParam_3 the target state which will be allowed only if the xmlAutomataNewCounterTrans_APIParam_4 is within the right range', 'create first target state param state param target state which be allow only if param be within range']
['xmlAutomataNewOnceTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewOnceTrans_APIParam_4', 'param be maximum successive param']
['xmlAutomataNewOnceTrans_APIParam_7 is xmlAutomataNewOnceTrans_APIParam_7 associated xmlAutomataNewOnceTrans_APIParam_3 the transition', 'param be param associate param']
['xmlAutomataNewOnceTrans_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['xmlAutomataNewOnceTrans2_APIParam_1 is an automata', 'param be']
['xmlAutomataNewOnceTrans2_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewOnceTrans2_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewOnceTrans2_APIParam_4 is the input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition', 'param be input stre associate param']
['xmlAutomataNewOnceTrans2_APIParam_5 is the second input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition', 'param be second input stre associate param']
['xmlAutomataNewOnceTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4', 'param be minimum successive param']
['xmlAutomataNewOnceTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4', 'param be maximum successive param']
['xmlAutomataNewOnceTrans2_APIParam_8 is xmlAutomataNewOnceTrans2_APIParam_8 associated xmlAutomataNewOnceTrans2_APIParam_3 the transition', 'param be param associate param']
['xmlAutomataNewOnceTrans2_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['Create a new disconnected state in the automata', 'create disconnected state']
['xmlAutomataNewState_APIParam_1 is an automata', 'param be']
['xmlAutomataNewTransition_APIParam_1 is an automata', 'param be']
['xmlAutomataNewState_APIName returns the new state or NULL in case of error', 'api return state null case error']
['xmlAutomataNewTransition_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewTransition_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewTransition_APIParam_4 is the input string associated xmlAutomataNewTransition_APIParam_3 that transition', 'param be input stre associate param']
['xmlAutomataNewTransition_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['xmlAutomataNewTransition2_APIParam_1 is an automata', 'param be']
['xmlAutomataNewTransition_APIParam_5 is xmlAutomataNewTransition_APIParam_5 passed xmlAutomataNewTransition_APIParam_3 the callback function', 'param be param pass param callback function']
['xmlAutomataNewTransition2_APIParam_2 is the starting point of the transition', 'param be start point']
['xmlAutomataNewTransition2_APIParam_3 is the target point of the transition or NULL', 'param be target point null']
['xmlAutomataNewTransition2_APIParam_4 is the first input string associated xmlAutomataNewTransition2_APIParam_3 that transition', 'param be first input string associate param']
['xmlAutomataNewTransition2_APIParam_5 is the second input string associated xmlAutomataNewTransition2_APIParam_3 that transition', 'param be second input stre associate param']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition_APIParam_2 the @from state xmlAutomataNewTransition_APIParam_3 the target state activated by the value of @token', 'create first target state param state param target state activate by value']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition2_APIParam_2 the @from state xmlAutomataNewTransition2_APIParam_3 the target state activated by the value of @token', 'create first target state param state param target state activate by value']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans_APIParam_2 the @from state xmlAutomataNewOnceTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max , moreover that transition can only be crossed once', 'create first target state param state param target state activate by input value whose number be max , moreover can only be cross']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans2_APIParam_2 the @from state xmlAutomataNewOnceTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max , moreover that transition can only be crossed once', 'create first target state param state param target state activate by input value whose number be max , moreover can only be cross']
['xmlAutomataNewTransition2_APIName returns the target state or NULL in case of error', 'api return target state null case error']
['Makes that xmlAutomataSetFinalState_APIParam_2 a final xmlAutomataSetFinalState_APIParam_2', 'make param final param']
['this creates first a new target state in the automata and adds a transition xmlAutomataNewNegTrans_APIParam_2 the @from state xmlAutomataNewNegTrans_APIParam_3 the target state activated by any value except Note that if @token2 is not NULL , will not match xmlAutomataNewNegTrans_APIParam_3 follow # the semantic of XSD ## other', 'create first target state param state param target state activate by value except']
['xmlAutomataSetFinalState_APIParam_1 is an automata', 'param be']
['xmlAutomataSetFinalState_APIParam_2 is a xmlAutomataSetFinalState_APIParam_2 in this automata', 'param be param']
['xmlAutomataSetFinalState_APIName returns 0 or -1 in case of error', 'api return constant case error']
['xmlAutomataNewTransition2_APIParam_6 is xmlAutomataNewTransition2_APIParam_6 passed xmlAutomataNewTransition2_APIParam_3 the callback function', 'param be param pass param callback function']
['xmlFreeAutomata_APIParam_1 is an automata', 'param be']
['xmlNewAutomata_APIName returns the new object or NULL in case of failure', 'api return object null case failure']
['xmlCleanupThreads_APIName is used to to cleanup all the thread related data of the libxml2 library once processing has ended', 'api be use cleanup thread related data library processing have end']
['xmlFreeMutex_APIName is used to reclaim resources associated with a libxml2 token struct', 'api be use reclaim resource associate struct']
['xmlFreeMutex_APIParam_1 is the simple mutex', 'param be simple mutex']
['In case of doubt abstain from calling xmlCleanupThreads_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind', 'case call api before call api avoid leak report']
['xmlRFreeMutex_APIName is used to reclaim resources associated with a reentrant mutex', 'api be use reclaim resource associate reentrant mutex']
['xmlFreeRMutex_APIParam_1 is the reentrant mutex', 'param be reentrant mutex']
['xmlGetGlobalState_APIName returns the thread global state or NULL in case of error', 'api return thread global state null case error']
['may crash the application if another thread or a plugin is still using libxml2', 'may crash application']
['xmlInitThreads_APIName is used to to initialize all the thread related data of the libxml2 library', 'api be use initialize thread related data library']
['xmlGetThreadId_APIName returns the current thread ID number', 'api return current thread -PRON- would number']
['xmlGetGlobalState_APIName is called to retrieve the global state for a thread', 'api be call retrieve global state thread']
['it is sometimes very hard to guess', 'be sometimes hard guess']
['some libraries or plugins may use it without notice', 'library may use without']
['xmlIsMainThread_APIName check whether the current thread is the main thread', 'api check whether current thread be main thread']
['xmlIsMainThread_APIName returns 1 if the current thread is the main thread, 0 otherwise', 'api return constant']
['xmlLockLibrary_APIName is used to take out a re-entrant lock on the libxml2 library', 'api be use take param lock library']
['xmlMutexLock_APIName is used to lock a libxml2 token', 'api be use lock']
['xmlMutexUnlock_APIName is used to unlock a libxml2 token', 'api be use unlock']
['xmlMutexLock_APIParam_1 is the simple mutex', 'param be simple mutex']
['xmlMutexUnlock_APIParam_1 is the simple mutex', 'param be simple mutex']
['xmlGetThreadId_APIName find the current thread ID number Note that this is likely to be broken on some platforms using pthreads as the specification does not mandate pthread_t to be an integer type', 'api find current thread -PRON- would number be likely be break platform use as specification do not mandate param be integer type']
['xmlNewMutex_APIName returns a new simple mutex pointer or NULL in case of error', 'api return simple mutex pointer null case error']
['xmlNewMutex_APIName is used to allocate a libxml2 token struct for use in synchronizing access to data', 'api be use struct use synchronize access datum']
['xmlNewRMutex_APIName returns the new reentrant mutex pointer or NULL in case of error', 'api return reentrant mutex pointer null case error']
['xmlRNewMutex_APIName is used to allocate a reentrant mutex for use in synchronizing access to data', 'api be use reentrant mutex use synchronize access datum']
['xmlRMutexLock_APIName is used to lock a libxml2 token_r', 'api be use lock param']
['xmlRMutexLock_APIParam_1 is the reentrant mutex', 'param be reentrant mutex']
['token_r is a re-entrant lock and thus useful for synchronizing access to data structures that may be manipulated in a recursive fashion', 'param be param lock thus useful synchronize access datum structure may be manipulate recursive fashion']
['xmlRMutexUnlock_APIName is used to unlock a libxml2 token_r', 'api be use unlock param']
['xmlRMutexUnlock_APIParam_1 is the reentrant mutex', 'param be reentrant mutex']
['xmlUnlockLibrary_APIName is used to release a re-entrant lock on the libxml2 library', 'api be use release param lock library']
['Create a parser context for a file content', 'create parser context file content']
['htmlCreateFileParserCtxt_APIParam_1 is the htmlCreateFileParserCtxt_APIParam_1', 'param be param']
['htmlCreateFileParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['htmlCreateFileParserCtxt_APIParam_2 is a free form C string describing the HTML document htmlCreateFileParserCtxt_APIParam_2 , or NULL', 'param be free form string describe param , null']
['Initialize the htmlStartCloseIndex for fast lookup of closing tags names', 'initialize fast lookup close name']
['This is not reentrant', 'be not reentrant']
['Call xmlInitParser_APIName once before processing in case of use in multithreaded programs', 'call api before processing case use multithreaded program']
['Pops the top parser input from the input stack', 'parser input input stack']
['inputPop_APIParam_1 is an XML parser context', 'param be parser context']
['inputPop_APIName returns the input just removed', 'api return input remove']
['Pushes a new parser input on top of the input stack', 'parser input input stack']
['inputPush_APIParam_1 is an XML parser context', 'param be parser context']
['inputPush_APIParam_2 is the parser input', 'param be parser input']
['inputPush_APIName returns -1 in case of error, the index in the stack otherwise', 'api return constant case error , index stack otherwise']
['Pops the top element name from the name stack', 'element name name stack']
['namePop_APIParam_1 is an XML parser context', 'param be parser context']
['namePop_APIName returns the name just removed', 'api return name remove']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['Pushes a new element name on top of the name stack', 'element name name stack']
['namePush_APIParam_1 is an XML parser context', 'param be parser context']
['namePush_APIParam_2 is the element name', 'param be element name']
['namePush_APIName returns -1 in case of error, the index in the stack otherwise', 'api return constant case error , index stack otherwise']
['Pops the top element node from the node stack', 'element stack']
['nodePop_APIParam_1 is an XML parser context', 'param be parser context']
['nodePop_APIName returns the node just removed', 'api return remove']
['Pushes a new element node on top of the node stack', 'element stack']
['nodePush_APIParam_2 is the element node', 'param be element']
['nodePush_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCheckLanguageID_APIParam_1 is pointer to the string value', 'param be pointer string value']
['nodePush_APIName returns -1 in case of error, the index in the stack otherwise', 'api return constant case error , index stack otherwise']
['xmlCheckLanguageID_APIName returns 1 if correct 0 otherwise', 'api return constant if correct constant otherwise']
['Checks that the value conforms to the LanguageID production', 'check value conform']
['append the char value in the array', 'append char value array']
['this is somewhat deprecated , those productions were removed from the XML Second edition', 'be somewhat deprecate , be remove second']
['xmlCopyChar_APIParam_1 is Ignored , compatibility', 'param be ignore , compatibility']
['append the char value in the array', 'append char value array']
['xmlCopyCharMultiByte_APIName returns the number of xmlChar written', 'api return number write']
['xmlCreateFileParserCtxt_APIParam_1 is the xmlCreateFileParserCtxt_APIParam_1', 'param be param']
['xmlCreateEntityParserCtxt_APIParam_1 is the entity xmlCreateEntityParserCtxt_APIParam_1', 'param be param']
['xmlCopyChar_APIParam_3 is the char value', 'param be char value']
['xmlCopyCharMultiByte_APIParam_2 is the char value', 'param be char value']
['xmlCreateEntityParserCtxt_APIParam_2 is the entity PUBLIC xmlCreateEntityParserCtxt_APIParam_2', 'param be param']
['xmlCreateFileParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['xmlCreateEntityParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['xmlCopyChar_APIName returns the number of xmlChar written', 'api return number write']
['xmlCopyCharMultiByte_APIParam_1 is pointer to an array of xmlChar', 'param be pointer array']
['Create a parser context for a file content', 'create parser context file content']
['xmlCopyChar_APIParam_2 is pointer to an array of xmlChar', 'param be pointer array']
['xmlCreateEntityParserCtxt_APIParam_3 is a possible xmlCreateEntityParserCtxt_APIParam_3 for the target URI', 'param be possible param target uri']
['Create a parser context for an XML in-memory document', 'create parser context param']
['xmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array', 'param be pointer char array']
['xmlCreateMemoryParserCtxt_APIParam_2 is the xmlCreateMemoryParserCtxt_APIParam_2 of the array', 'param be param array']
['xmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['Create a parser context for a file or URL content', 'create parser context file content']
['xmlCreateURLParserCtxt_APIParam_1 is the xmlCreateURLParserCtxt_APIParam_1 or URL', 'param be param']
['xmlCreateURLParserCtxt_APIParam_2 is a combination of xmlParserOption', 'param be combination']
['= + The current REC reference the sucessors of RFC 1766 , currently 5646 http', 'current reference rfc constant , currently constant']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['/ / www.rfc-editor.org/rfc/rfc5646.txt langtag = language * * language = 2 * 3ALPHA', 'param language language constant']
['extended language subtags / 4ALPHA', 'extended language']
['shortest ISO 639 code', 'short constant code']
['or reserved for future use / 5 * 8ALPHA', 'reserve future use constant']
['sometimes followed by', 'sometimes follow by']
['or registered language subtag extlang = 3ALPHA', 'register language']
['permanently reserved script = 4ALPHA', 'permanently reserve script']
['selected ISO 639 codes * 2', 'select constant code constant']
['ISO 3166-1 code / 3DIGIT', 'constant code']
['ISO 15924 code region = 2ALPHA', 'constant code']
['UN M. 49 code variant = 5 * 8alphanum', 'm. constant code variant constant']
['registered variants / extension = singleton 1 * -RRB-', 'register variant extension constant _ rrb']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
["`` x '' reserved for private use singleton = DIGIT", 'reserve private use digit']
['document is provided by default', 'be provide by default']
['Create a parser context for an external entity Automatic support for ZLIB/Compress compressed', 'create parser context external automatic support compress']
['0 - 9 / % x41-57', 'constant _ constant param']
['A - W / % x59-5A', '_ param']
['Y - Z / % x61-77', '_ param']
['a - w / % x79-7A', '_ param']
['xmlCreateURLParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['xmlCurrentChar_APIParam_1 is the XML parser context', 'param be parser context']
['y - z it sounds right to still allow Irregular i-xxx IANA and user codes too The parser below does not try to cope with extension or privateuse that could be added but that not interoperable anyway', '_ sound still allow irregular param user code parser do not cope extension could be but not interoperable anyway']
['xmlCurrentChar_APIParam_2 is pointer to the length of the char read', 'param be pointer length char read']
['xmlCurrentChar_APIName returns the current char value and its length', 'api return current char value length']
['xmlDecodeEntities_APIName is deprecated , we now always process entities content through xmlStringDecodeEntities TODO', 'api be deprecate , always process content api']
['This behavior can conveniently be produced by normalizing all line breaks to #xA on input , before parsing . -RRB-', 'behavior can conveniently be produce by normalize line break input , before parse . _ rrb']
['The current char value , this may actually span multiple bytes in the input buffer', 'current char value , may actually span multiple byte input buffer']
['remove it in next major release', 'remove major release']
['xmlDecodeEntities_APIParam_1 is the parser context', 'param be parser context']
['xmlDecodeEntities_APIParam_2 is the xmlDecodeEntities_APIParam_2 to decode -LRB- in bytes !', 'param be param decode _ lrb _ byte']
['xmlDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF', 'param be combination constant']
['-RRB- , -1 for no size limit', '_ rrb _ , constant no size limit']
['xmlDecodeEntities_APIName returns A newly allocated string with the substitution done', 'api return newly string do']
['The caller must deallocate it', 'caller must deallocate']
['xmlDecodeEntities_APIParam_4 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlEntityReferenceFunc_APIParam_1 is the entity', 'param be']
['xmlDecodeEntities_APIParam_5 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlEntityReferenceFunc_APIParam_2 is the fist node in the chunk', 'param be']
['xmlDecodeEntities_APIParam_6 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlEntityReferenceFunc_APIParam_3 is the last nod in the chunk', 'param be last']
['Handle a redefinition of attribute error', 'attribute error']
['xmlErrMemory_APIParam_1 is an XML parser context', 'param be parser context']
['xmlErrMemory_APIParam_2 is xmlErrMemory_APIParam_2 informations', 'param be param information']
['Implement the end of line normalization', 'implement end line']
['xmlFreeInputStream_APIParam_1 is an xmlParserInputPtr', 'param be']
['Free up an xmlFreeInputStream_APIParam_1 stream', 'free param stream']
['Callback function used inherited from an entity replacement', 'callback function use inherit']
['to be removed at some point', 'be remove point']
['xmlHandleEntity_APIParam_1 is an XML parser context', 'param be parser context']
['xmlHandleEntity_APIParam_2 is an XML xmlHandleEntity_APIParam_2 pointer', 'param be param pointer']
['xmlIsLetter_APIParam_1 is an unicode character', 'param be unicode character']
['xmlIsLetter_APIName returns 0 if not, non-zero otherwise', 'api return constant  , param otherwise']
['parse an XML namespace name', 'parse name']
['not on raw input', 'not raw input']
['xmlNamespaceParseNCName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlNamespaceParseNCName_APIName returns the namespace name or NULL', 'api return name null']
['this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e', 'seem not use anymore , handling be do api']
['not on raw input', 'not raw input']
['xmlNamespaceParseNSDef_APIParam_1 is an XML parser context', 'param be parser context']
["2.11 End-of-Line Handling Wherever an external parsed entity or the literal entity value of an internal parsed entity contains either the literal two-character sequence '' #xD #xA '' or a standalone literal #xD , an XML processor must pass to the application the single character #xA", 'constant param handling wherever external parse literal value internal parse contain either literal param sequence literal , processor must pass application single character']
['parse a namespace prefix declaration TODO', 'parse prefix declaration']
["| ' - ' | '_' | CombiningChar | Extender", '_ _ combiningchar']
['xmlNamespaceParseNSDef_APIName returns the namespace name', 'api return name']
['this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e', 'seem not use anymore , handling be do api']
["= Letter | Digit | ' . '", 'letter digit']
['not on raw input', 'not raw input']
['parse an XML qualified name QName', 'parse qualified name']
['this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e', 'seem not use anymore , handling be do api']
['xmlNamespaceParseQName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlNamespaceParseQName_APIParam_2 is a xmlChar **', 'param be']
['xmlNamespaceParseQName_APIName returns the local part, and xmlNamespaceParseQName_APIParam_2 is updated to get the Prefix if any', 'api return local part , param be update get prefix if']
['Create a new input stream based on an xmlEntityPtr', 'create input stream base']
['xmlNewEntityInputStream_APIParam_1 is an XML parser context', 'param be parser context']
['xmlNewEntityInputStream_APIParam_2 is an Entity pointer', 'param be pointer']
['xmlNewEntityInputStream_APIName returns the new input stream or NULL', 'api return input stream null']
['xmlNewInputFromFile_APIParam_1 is an XML parser context', 'param be parser context']
['Create a new input stream based on a file or an URL', 'create input stream base file']
['xmlNewInputFromFile_APIParam_2 is the xmlNewInputFromFile_APIParam_2 to use as entity', 'param be param use as']
['xmlNewInputFromFile_APIName returns the new input stream or NULL in case of error', 'api return input stream null case error']
['Create a new input stream structure', 'create input stream structure']
['xmlNewInputStream_APIParam_1 is an XML parser context', 'param be parser context']
['xmlNewInputStream_APIName returns the new input stream or NULL', 'api return input stream null']
['xmlNewStringInputStream_APIParam_1 is an XML parser context', 'param be parser context']
['xmlNewStringInputStream_APIParam_2 is an memory xmlNewStringInputStream_APIParam_2', 'param be memory param']
['Create a new input stream based on a memory xmlNewStringInputStream_APIParam_2', 'create input stream base memory param']
['xmlNewStringInputStream_APIName returns the new input stream', 'api return input stream']
['Skip to the next char input char', 'skip char input char']
['xmlNextChar_APIParam_1 is the XML parser context', 'param be parser context']
['xmlParseAttValue_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseAttValue_APIName returns the AttValue parsed or NULL', 'api return parse null']
['The value has to be freed by the caller', 'value have be free by caller']
['The attribute must have been declared', 'attribute must have be declare']
['the xmlParseAttribute_APIParam_2 must be of the type declared for it', 'param must be type declare']
['parse an attribute Attribute', 'parse attribute attribute']
['The replacement text of any entity referred to directly or indirectly in an attribute xmlParseAttribute_APIParam_2 must not contain a <', 'text refer directly indirectly attribute param must not contain']
['= Name Eq AttValue Attribute values can not contain direct or indirect entity references to external entities', 'name attribute value can not contain direct indirect reference external']
['is handled independently as a namespace definition', 'be independently as definition']
['xmlParseAttribute_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseAttribute_APIName returns the attribute name, and the xmlParseAttribute_APIParam_2 in *value', 'api return attribute name , param value']
['xmlParseAttribute_APIParam_2 is a xmlChar ** used to store the xmlParseAttribute_APIParam_2 of the attribute', 'param be use store param attribute']
['xmlParseAttributeListDecl_APIParam_1 is an XML parser context', 'param be parser context']
['No element type may have more than one ID attribute specified', 'no element type may have one -PRON- would attribute specify']
['All attributes should be treated by a non-validating parser declared CDATA', 'attribute should be treat by param parser declare']
['An ID attribute must have a declared default of #IMPLIED or #REQUIRED', 'PRON- would attribute must have declare default imply require']
['IDREF values must match the value of some ID attribute', 'value must match value -PRON- would attribute']
['parse the Attribute list def for an element AttlistDecl', 'parse attribute list element']
['xmlParseAttributeType_APIName returns the attribute type', 'api return attribute type']
['Parse escaped pure raw content', 'parse escape pure raw content']
['xmlParseAttributeType_APIParam_1 is an XML parser context', 'param be parser context']
['Values of type NMTOKEN must match the Nmtoken production', 'value type must match']
['values of type NMTOKENS must match Nmtokens', 'value type must match']
['A name must not appear more than once in an XML document as a value of this type', 'name must not appear as value type']
['Values of type ENTITY must match the Name production , values of type ENTITIES must match Names', 'value type must match name , value type must match name']
['parse the Attribute list def for an element AttType', 'parse attribute list element']
['i.e. , ID values must uniquely identify the elements which bear them', 'i. , -PRON- would value must uniquely identify element which bear']
['Values of type IDREF must match the Name production , and values of type IDREFS must match Names', 'value type must match name , value type must match name']
['parse a value for an attribute Note', 'parse value attribute note']
['each Entity Name must match the name of an unparsed entity declared in the DTD', 'name must match name unparsed declare']
['each IDREF Name must match the value of an ID attribute on some element in the XML document', 'name must match value -PRON- would attribute element']
['the parser will not do substitution of entities here , this will be handled later in xmlStringGetNodeList AttValue', 'parser not , be later api']
["= ` ID ' | ` IDREF ' | ` IDREFS ' | ` ENTITY ' | ` ENTITIES ' | ` NMTOKEN ' | ` NMTOKENS ' Validity constraints for attribute values syntax are checked in xmlValidateAttributeValue_APIName Values of type ID must match the Name production", 'PRON- would validity constraint attribute value syntax be check api value type -PRON- would must match name']
['xmlParseAttributeType_APIParam_2 is the enumeration xmlParseAttributeType_APIParam_2 built', 'param be param build']
["= ' '' ' * ' '' ' | '' ' '' * '' ' '' 3.3.3 Attribute-Value Normalization", 'constant param']
['appending them to the normalized value', 'append normalize value']
['Before the value of an attribute is passed to the application or checked for validity , the XML processor must normalize it as follows', 'before value attribute be pass application check validity , processor must normalize as follow']
['xmlParseCDSect_APIParam_1 is an XML parser context', 'param be parser context']
['parse a CharData section', 'parse section']
['xmlParseCharData_APIParam_1 is an XML parser context', 'param be parser context']
['= -RRB- CDEnd', '_ rrb _']
['xmlParseCharData_APIParam_2 is int indicating', 'param be int indicate']
["= ' -RSB- -RSB- > '", '_ rsb _ _ rsb']
['xmlParseCharRef_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseCharRef_APIName returns the value parsed , 0 in case of error', 'api return value parse , constant case error']
['xmlParseComment_APIParam_1 is an XML parser context', 'param be parser context']
["Skip an XML comment <!-- .... --> The spec says that `` For compatibility , the string '' -- '' must not occur within comments . ''", 'skip comment _ _ ... . param spec say compatibility , stre _ _ must not occur within comment']
['Parse a content', 'parse content']
['Parse an attribute default declaration DefaultDecl', 'parse attribute default declaration']
['xmlParseContent_APIParam_1 is an XML parser context', 'param be parser context']
['The declared default xmlParseDefaultDecl_APIParam_2 must meet the lexical constraints of the declared attribute type c.f', 'declare default param must meet lexical constraint declare attribute type']
["= ' #REQUIRED ' | ' #IMPLIED ' | ?", 'require imply']
['xmlParseDefaultDecl_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseDefaultDecl_APIName returns XML_ATTRIBUTE_NONE, XML_ATTRIBUTE_REQUIRED, XML_ATTRIBUTE_IMPLIED or XML_ATTRIBUTE_FIXED', 'api return constant']
['xmlParseDefaultDecl_APIParam_2 Receive a possible fixed default xmlParseDefaultDecl_APIParam_2 for the attribute', 'param receive possible fix default param attribute']
['parse a DOCTYPE declaration doctypedecl', 'parse declaration']
['xmlParseDocTypeDecl_APIParam_1 is an XML parser context', 'param be parser context']
['instances of that attribute must match the default xmlParseDefaultDecl_APIParam_2', 'instance attribute must match default param']
['xmlParseElement_APIParam_1 is an XML parser context', 'param be parser context']
["= -LRB- ' ? '", '_ lrb']
['marks an end of section', 'mark end section']
['parse an XML element , this is highly recursive element', 'parse element , be highly recursive element']
['cp -LRB- S ?', '_ lrb _']
["| ' * ' | ' + ' -RRB- ?", '_ rrb']
['= EmptyElemTag | STag content ETag The Name in an element end-tag must match the element type in the start-tag', 'content name element param must match element type param']
["= ' -LRB- ' S ?", '_ lrb _']
["- a character reference is processed by appending the referenced character to the attribute value - an entity reference is processed by recursively processing the replacement text of the entity - a whitespace character is processed by appending #x20 to the normalized value , except that only a single #x20 is appended for a '' #xD #xA '' sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity - other characters are processed by , the XML processor must further process the normalized attribute value by discarding any leading and trailing space characters , and by replacing sequences of space characters by a single space character", '_ character reference be process by append referenced character attribute value _ reference be process by recursively process text _ whitespace character be process by append normalize value , except only single be append sequence part external parse literal value internal parse _ character be process by , processor must process normalize attribute value by discard lead trail space character , by replace sequence space character by single space character']
["| ' * ' | ' + ' -RRB- ?", '_ rrb']
['cp -LRB- S ?', '_ lrb _']
["cp -RRB- * S ? ' -RRB- '", '_ rrb _ _ rrb']
["= ' -LRB- ' S ?", '_ lrb _']
["cp -RRB- * S ? ' -RRB- '", '_ rrb _ _ rrb']
['xmlParseElementChildrenContentDecl_APIParam_1 is an XML parser context', 'param be parser context']
["parse the declaration for a Mixed Element content The leading ' -LRB- ' ? '", 'parse declaration mix element content lead _ lrb']
['applies to and TODO Parameter-entity replacement text must be properly nested with parenthesized groups', 'apply param text must be properly nest parenthesized group']
['xmlParseElementChildrenContentDecl_APIName returns the tree of xmlElementContentPtr describing the element hierarchy', 'api return describe element']
['xmlParseElementChildrenContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks', 'param be input use current , need boundary check']
['xmlParseElementContentDecl_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseElementContentDecl_APIParam_2 is the xmlParseElementContentDecl_APIParam_2 of the element being defined', 'param be param element define']
['xmlParseElementContentDecl_APIName returns the type of element content XML_ELEMENT_TYPE_xxx', 'api return type element content param']
['parse an Element declaration', 'parse element declaration']
["' > ' The Name in the document type declaration must match the element type of the root element", 'name type declaration must match element type root element']
['xmlParseElementDecl_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseElementDecl_APIName returns the type of the element, or -1 in case of error', 'api return type element , constant case error']
['parse the declaration for an Element content either Mixed or Children , the cases EMPTY and ANY are handled directly in xmlParseElementDecl contentspec', 'parse declaration element content either mixed , case empty be directly api']
["= 'EM PTY ' | ` ANY ' | Mixed | children", 'PRON- mixed']
["' #PCDATA ' -LRB- S ?", '_ lrb _']
['Name -RRB- * S ?', 'name _ rrb _']
["' > ' No element type may be declared more than once", 'no element type may be declare']
["' #PCDATA ' S ? ' -RRB- '", '_ rrb']
['xmlParseElementMixedContentDecl_APIParam_1 is an XML parser context', 'param be parser context']
["' -RRB- * ' | ' -LRB- ' S ?", '_ rrb _ _ lrb _']
['will be stored', 'be store']
['xmlParseElementContentDecl_APIParam_3 is the Element Content pointer', 'param be element content pointer']
['applies to too The same name must not appear more than once in a single mixed-content declaration', 'applie name must not appear single param declaration']
['xmlParseElementMixedContentDecl_APIName returns the list of the xmlElementContentPtr describing the element choices', 'api return list describe element choice']
['xmlParseElementMixedContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks', 'param be input use current , need boundary check']
['parse the XML encoding name EncName', 'parse encode name']
['xmlParseEncName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEncName_APIName returns the encoding name value or NULL', 'api return encode name value null']
['xmlParseEncodingDecl_APIParam_1 is an XML parser context', 'param be parser context']
['parse the XML encoding declaration EncodingDecl', 'parse encode declaration']
['xmlParseEncodingDecl_APIName returns the encoding value or NULL', 'api return encode value null']
["= S ` encoding ' Eq this setups the conversion filters", 'encode conversion filter']
['xmlParseEndTag_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEntityDecl_APIParam_1 is an XML parser context', 'param be parser context']
['parse an end of tag ETag', 'parse end']
['parse Reference declarations CharRef', 'parse reference declaration']
['That is to say', 'be say']
["= S ` NDATA ' S Name The Name must match the declared name of a notation", 'ndata name name must match declare name']
['The declaration of a parameter entity must precede any reference to it', 'declaration param must precede reference']
["' Characters referred to using character references must match the production for Char", 'character refer use character reference must match char']
['its replacement text should not be empty', 'text should not be empty']
['For interoperability , , and neither the first nor last non-blank character of the replacement text should be a connector', 'neither first nor last param character text should be']
['An entity reference must not contain the name of an unparsed entity', 'reference must not contain name unparsed']
['xmlParseEntityRef_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEntityRef_APIName returns the xmlEntityPtr if found, or NULL otherwise', 'api return if find , null otherwise']
['Similarly , the declaration of a general entity must precede any reference to it which appears in a default value in an attribute-list declaration', 'similarly , declaration general must precede reference which appear default value param declaration']
['xmlParseEntityValue_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEntityValue_APIName returns the EntityValue parsed with reference substituted or NULL', 'api return parse reference substitute null']
['parse an Enumerated attribute type', 'parse enumerate attribute type']
['Name -LRB- S ?', 'name _ lrb _']
['Name -RRB- * S ?', 'name _ rrb _']
['parse a value for ENTITY declarations EntityValue', 'parse value declaration']
['AttValue -RRB- , the attribute must be specified for all elements of the type in the attribute-list declaration', '_ rrb _ , attribute must be specify element type param declaration']
["The right angle bracket may be represented using the string '' & gt", 'may be represent use string']
["= ` NOTATION ' S ' -LRB- ' S ?", '_ lrb _']
['parse ENTITY references declarations EntityRef', 'parse reference declaration']
["'' , and must , for compatibility , be escaped using '' & gt", 'must , compatibility , be escape use']
["parse the declaration for a Mixed Element content The leading ' -LRB- ' and spaces have been skipped in xmlParseElementContentDecl Mixed", 'parse declaration mix element content lead _ lrb _ space have be skip api mix']
["= ' -LRB- ' S ?", '_ lrb _']
['xmlParseEntityValue_APIParam_2 is a copy of the original entity value', 'param be copy original value']
['a non-validating processor is not obligated to read and process their declarations', 'param processor be not obligate read process declaration']
['is a well-formedness constraint standalone =', 'be param constraint']
["'' or a character reference", 'character reference']
["for such documents , the rule that an entity must be declared ` yes '", 'rule must be declare yes']
['xmlParseEnumeratedType_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEnumeratedType_APIName returns XML_ATTRIBUTE_ENUMERATION or XML_ATTRIBUTE_NOTATION', 'api return constant']
['parse an Enumeration attribute type', 'parse attribute type']
["' In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' '' , the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities", 'without , only internal which contain no param reference , yes , name give reference must match declaration , except param need not declare follow']
['Nmtoken -LRB- S ?', '_ lrb _']
['xmlParseEnumeratedType_APIParam_2 is the enumeration xmlParseEnumeratedType_APIParam_2 built', 'param be param build']
["= ' -LRB- ' S ?", '_ lrb _']
["Nmtoken -RRB- * S ? ' -RRB- '", '_ rrb _ _ rrb']
['Values of this type must match one of the Nmtoken tokens in the declaration', 'value type must match one declaration']
['xmlParseEnumerationType_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseEnumerationType_APIName returns the enumeration attribute tree built while parsing', 'api return attribute build while parse']
['xmlParseExternalID_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseExternalID_APIParam_2 is a xmlChar ** receiving PubidLiteral', 'param be receive']
['xmlParseExternalID_APIParam_3 is indicate', 'param be indicate']
['parse Markup declarations from an external subset extSubset', 'parse declaration external']
['xmlParseExternalSubset_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseExternalSubset_APIParam_2 is the external identifier', 'param be external identifier']
['xmlParseExternalID_APIName returns the function returns SystemLiteral and in the second case xmlParseExternalID_APIParam_2 receives PubidLiteral, is xmlParseExternalID_APIParam_3 is off it is possible to return NULL and have xmlParseExternalID_APIParam_2 set', 'api return function return second case param receive , be param be be possible return null have param set']
['xmlParseExternalSubset_APIParam_3 is the system identifier -LRB- or URL', 'param be system identifi _ lrb _']
['Parse an External ID or a Public ID NOTE', 'parse external -PRON- would -PRON- would note']
["Productions and interact badly since can generate ` PUBLIC ' S PubidLiteral S SystemLiteral ExternalID", 'interact badly since can generate']
['parse Markup declarations markupdecl', 'parse declaration']
['xmlParseMarkupDecl_APIParam_1 is an XML parser context', 'param be parser context']
['= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment Parameter-entity replacement text must be properly nested with markup declarations', 'comment param text must be properly nest declaration']
['In the internal DTD subset , parameter-entity references can occur only where markup declarations can occur , not within markup declarations', 'internal , param reference can occur only declaration can occur , not within declaration']
['parse an XML Misc * optional field', 'parse optional field']
['= Comment | PI | S. xmlParseMisc_APIParam_1 is an XML parser context', 'comment s. param be parser context']
['parse an XML name', 'parse name']
['xmlParseName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseName_APIName returns the Name parsed or NULL', 'api return name parse null']
["= Letter | Digit | ' . '", 'letter digit']
["parse specific PI ' < ?", 'parse specific']
['xmlParseNamespace_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseNmtoken_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseNmtoken_APIName returns the Nmtoken parsed or NULL', 'api return parse null']
['xmlParseNotationDecl_APIParam_1 is an XML parser context', 'param be parser context']
['parse an Notation attribute type', 'parse attribute type']
['parse a notation declaration NotationDecl', 'parse declaration']
['Name -LRB- S ?', 'name _ lrb _']
["' > ' Hence there is actually 3 choices", 'hence be actually constant choice']
['xmlParseNotationType_APIParam_1 is an XML parser context', 'param be parser context']
["Name -RRB- * S ? ' -RRB- '", 'name _ rrb _ _ rrb']
['xmlParseNotationType_APIName returns the notation attribute tree built while parsing', 'api return attribute build while parse']
["` PUBLIC ' S PubidLiteral ` PUBLIC ' S PubidLiteral S SystemLiteral and ` SYSTEM ' S SystemLiteral See the NOTE on xmlParseExternalID_APIName", 'system see note api']
['Values of this type must match one of the notation names included in the declaration', 'value type must match one name include declaration']
['all notation names in the declaration must be declared', 'name declaration must be declare']
['The declaration of a parameter entity must precede any reference to it', 'declaration param must precede reference']
['parse PEReference declarations The entity content is handled directly by pushing it is content as a new input stream', 'parse declaration content be directly by be content as input stream']
['misleading but this is handled', 'misleading but be']
['That is to say', 'be say']
['xmlParsePEReference_APIParam_1 is an XML parser context', 'param be parser context']
["In a document with an external subset or external parameter entities with `` standalone = ` no ' ''", 'external external param no']
['parse an XML Processing Instruction', 'parse processing instruction']
['The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD', 'declaration param must precede reference ... param reference may only appear']
['PITarget -RRB- -RRB- ?', '_ rrb _ _ rrb']
["| ' - ' | '_' | '", '_ _']
["' | CombiningChar | Extender Name", 'combiningchar name']
['xmlParsePI_APIParam_1 is an XML parser context', 'param be parser context']
['parse the name of a PI PITarget', 'parse name']
['xmlParsePITarget_APIParam_1 is an XML parser context', 'param be parser context']
['= Name - -RRB-', 'name _ _ rrb']
['xmlParsePITarget_APIName returns the PITarget name or NULL', 'api return name null']
['xmlParsePubidLiteral_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParsePubidLiteral_APIName returns the PubidLiteral parsed or NULL', 'api return parse null']
['xmlParseQuotedString_APIParam_1 is an XML parser context', 'param be parser context']
['Parse and return a string between quotes or doublequotes TODO', 'parse return string']
['xmlParseQuotedString_APIName returns the string parser or NULL', 'api return stre parser null']
['Deprecated , to be removed at next drop of binary compatibility', 'deprecate , be remove binary compatibility']
["the leading ` NOTATION ' S part has already being parsed ... NotationType", 'lead part have already parse']
['xmlParseReference_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseSDDecl_APIParam_1 is an XML parser context', 'param be parser context']
["= ` NOTATION ' S ' -LRB- ' S ?", '_ lrb _']
['parse a start of tag either for rule element or EmptyElement', 'parse start either rule element']
['In both case we do not parse the tag closing chars', 'case not parse char']
['support is still here', 'support be still']
['This is what the older xml-name Working Draft specified , a bunch of other stuff may still rely on it , so', 'be old param work specify , may still rely']
['- -LRB- TODO', '_ _ lrb _']
['remove from library To be removed at next drop of binary compatibility', 'remove library be remove binary compatibility']
["' > ' No attribute name may appear more than once in the same start-tag or empty-element tag", 'no attribute name may appear param']
["' / > ' No attribute name may appear more than once in the same start-tag or empty-element tag", 'no attribute name may appear param']
['xmlParseStartTag_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseStartTag_APIName returns the element name parsed', 'api return element name parse']
['parse an XML Literal SystemLiteral', 'parse literal']
['xmlParseSystemLiteral_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseSystemLiteral_APIName returns the SystemLiteral parsed or NULL', 'api return parse null']
["' A parsed entity must not contain a recursive reference to itself , either directly or indirectly", 'parse must not contain recursive reference , either directly indirectly']
['parse an XML declaration header for external entities TextDecl', 'parse declaration header external']
['xmlParseSDDecl_APIName returns 1 if standalone="yes" 0 if standalone="no" -2 if standalone attribute is missing or invalid (A standalone value of -2 means that the XML declaration was found, but no value was specified for the standalone attribute', 'api return constant  , but no value be specify attribute']
['xmlParseTextDecl_APIParam_1 is an XML parser context', 'param be parser context']
['parse an XML public literal PubidLiteral', 'parse literal']
['parse the XML version', 'parse version']
['parse the XML standalone declaration SDDecl', 'parse declaration']
['parse and handle entity references in content , depending on the SAX interface , this may end-up in a call to character_APIName', 'parse reference content , depend api , may param call api']
["In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''", 'without , only internal which contain no param reference , yes']
["The standalone document declaration must have the value `` no ''", 'declaration must have value no']
["= S tandalone ' Eq '' ' '' -RRB- | ' '' ' -RRB- -RRB- TODO of", 'tandalone _ rrb _ _ rrb _ _ rrb _']
['xmlParseVersionInfo_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseVersionInfo_APIName returns the version string, e.g', 'api return version string']
['parse the XML version value', 'parse version value']
['+ In practice allow', 'practice allow']
['xmlParseVersionNum_APIParam_1 is an XML parser context', 'param be parser context']
['- attributes with default values , , or - attributes with values subject to normalization , where the attribute appears in the document with a value which will change as a result of normalization , or - element types with element content , if white space occurs directly within any instance of those types', '_ attribute default value , _ attribute value subject , attribute appear value which change as result , _ element type element content']
['xmlParseVersionNum_APIName returns the string giving the XML version number, or NULL', 'api return string give version number , null']
['parse an XML declaration header XMLDecl', 'parse declaration header']
['xmlParseXMLDecl_APIParam_1 is an XML parser context', 'param be parser context']
['The declaration of a parameter entity must precede any reference to it', 'declaration param must precede reference']
['misleading but this is handled', 'misleading but be']
["In a document with an external subset or external parameter entities with `` standalone = ` no ' ''", 'external external param no']
['xmlParserHandlePEReference_APIParam_1 is the parser context', 'param be parser context']
['The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD', 'declaration param must precede reference ... param reference may only appear']
['A PEReference may have been detected in the current input stream the handling is done accordingly to http', 'may have be detect current input stream handling be do accordingly']
['- Included in literal in entity values - Included as Parameter Entity reference within DTDs', '_ include literal value _ include as paramet reference within']
['Remove , now deprecated ... the test is done directly in the content parsing routines', 'remove , deprecate ... test be do directly content parse api']
['xmlParserHandleReference_APIParam_1 is the parser context', 'param be parser context']
['xmlParserInputShrink_APIName removes used input for the parser', 'api remove use input parser']
['the current input pointed by ctxt->input came to an end pop it and return the next char', 'current input point by param come end return char']
['xmlParserInputShrink_APIParam_1 is an XML parser input', 'param be parser input']
['xmlPopInput_APIName returns the current xmlChar in the parser context', 'api return current parser context']
['xmlPopInput_APIParam_1 is an XML parser context', 'param be parser context']
['xmlPushInput_APIParam_1 is an XML parser context', 'param be parser context']
['xmlPushInput_APIParam_2 is an XML parser xmlPushInput_APIParam_2 fragment', 'param be parser param fragment']
['switch to a new xmlPushInput_APIParam_2 stream which is stacked on top of the previous one', 'param stream which be stack previous one']
['xmlPushInput_APIName returns -1 in case of error or the index in the xmlPushInput_APIParam_2 stack', 'api return constant case error index param stack']
['parse an XML name but without consuming the input flow Needed for rollback cases', 'parse name but without consume input need rollback case']
['xmlScanName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlScanName_APIName returns the Name parsed or NULL', 'api return name parse null']
['Used only', 'use only']
['seems deprecated now , only used in the default part of xmlParserHandleReference NameChar', 'seem deprecate , only use default part api']
["= Letter | Digit | ' . '", 'letter digit']
['xmlSetEntityReferenceFunc_APIParam_1 is A valid function', 'param be valid function']
['skip all blanks character found at that point in the input streams', 'skip character find point input stream']
['xmlSkipBlankChars_APIParam_1 is the XML parser context', 'param be parser context']
['xmlSkipBlankChars_APIName returns the number of space chars skipped', 'api return number space char skip']
['parse an UTF8 encoded XML qualified xmlSplitQName_APIParam_2 string QName', 'parse utf8 encode qualified param string']
['xmlSplitQName_APIParam_2 is an XML parser context', 'param be parser context']
['xmlSplitQName_APIParam_1 is an XML parser context', 'param be parser context']
['xmlSplitQName_APIParam_3 is a xmlChar **', 'param be']
['xmlSplitQName_APIName returns the local part, and xmlSplitQName_APIParam_3 is updated to get the Prefix if any', 'api return local part , param be update get prefix if']
['xmlStringCurrentChar_APIParam_1 is the XML parser context', 'param be parser context']
['Set the function to call call back', 'set function call call back']
['xmlStringCurrentChar_APIParam_2 is pointer to the beginning of the char', 'param be pointer begin char']
['xmlStringCurrentChar_APIParam_3 is pointer to the length of the char read', 'param be pointer length char read']
['xmlStringCurrentChar_APIName returns the current char value and its length', 'api return current char value length']
['It pops up finished entities in the process', 'finished process']
['Takes a entity string content and process to do the adequate substitutions', 'take string content process adequate']
['xmlStringDecodeEntities_APIParam_1 is the parser context', 'param be parser context']
["' A parsed entity must not contain a recursive reference to itself , either directly or indirectly", 'parse must not contain recursive reference , either directly indirectly']
['xmlStringDecodeEntities_APIParam_2 is the input string', 'param be input string']
['xmlStringLenDecodeEntities_APIParam_2 is the input string', 'param be input string']
['The caller must deallocate it', 'caller must deallocate']
['xmlStringLenDecodeEntities_APIParam_1 is the parser context', 'param be parser context']
['xmlStringLenDecodeEntities_APIParam_3 is the string length', 'param be stre length']
['xmlStringDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF', 'param be combination constant']
['xmlStringLenDecodeEntities_APIParam_4 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF', 'param be combination constant']
['xmlStringDecodeEntities_APIName returns A newly allocated string with the substitution done', 'api return newly string do']
['The current char value , this may actually span multiple bytes in the input buffer', 'current char value , may actually span multiple byte input buffer']
['xmlStringLenDecodeEntities_APIName returns A newly allocated string with the substitution done', 'api return newly string do']
['Takes a entity string content and process to do the adequate substitutions', 'take string content process adequate']
['The caller must deallocate it', 'caller must deallocate']
["| ' - ' | '_' | '", '_ _']
['xmlSwitchEncoding_APIParam_1 is the parser context', 'param be parser context']
["' | CombiningChar | Extender Name", 'combiningchar name']
['xmlSwitchEncoding_APIParam_2 is the encoding value', 'param be encode value']
['xmlStringDecodeEntities_APIParam_4 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlSwitchEncoding_APIName returns 0 in case of success, -1 otherwise', 'api return constant case success , constant otherwise']
['xmlSwitchInputEncoding_APIParam_1 is the parser context', 'param be parser context']
['xmlStringDecodeEntities_APIParam_5 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlSwitchInputEncoding_APIParam_2 is the xmlSwitchInputEncoding_APIParam_2 stream', 'param be param stream']
['xmlStringLenDecodeEntities_APIParam_7 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0', 'param be param , constant']
['xmlStringLenDecodeEntities_APIParam_6 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0', 'param be param , constant']
['xmlSwitchInputEncoding_APIParam_3 is the encoding xmlSwitchInputEncoding_APIParam_3', 'param be encode param']
['xmlSwitchInputEncoding_APIName returns 0 in case of success, -1 otherwise', 'api return constant case success , constant otherwise']
['xmlStringLenDecodeEntities_APIParam_5 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0', 'param be param , constant']
['xmlStringDecodeEntities_APIParam_6 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0', 'param be param , constant']
['xmlSwitchToEncoding_APIParam_1 is the parser context', 'param be parser context']
['xmlSwitchToEncoding_APIParam_2 is the encoding xmlSwitchToEncoding_APIParam_2', 'param be encode param']
['xmlSwitchToEncoding_APIName returns 0 in case of success, -1 otherwise', 'api return constant case success , constant otherwise']
['the input functions', 'input function']
['xmlAddAttributeDecl_APIParam_1 is the validation context', 'param be validation context']
['Register a new attribute declaration Note that @tree becomes the ownership of the DTD', 'register attribute declaration become']
['xmlAddAttributeDecl_APIParam_2 is pointer to the DTD', 'param be pointer']
['the xmlSwitchInputEncoding_APIParam_2 functions', 'param function']
['xmlAddAttributeDecl_APIParam_3 is the element xmlAddAttributeDecl_APIParam_4', 'param be element param']
['xmlAddAttributeDecl_APIParam_4 is the attribute xmlAddAttributeDecl_APIParam_4', 'param be attribute param']
['xmlAddAttributeDecl_APIParam_5 is the attribute namespace prefix', 'param be attribute prefix']
['xmlAddAttributeDecl_APIParam_6 is the attribute xmlAddAttributeDecl_APIParam_6', 'param be attribute param']
['An entity reference must not contain the name of an unparsed entity CharRef', 'reference must not contain name unparsed']
['the input functions', 'input function']
["' the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities", 'name give reference must match declaration , except param need not declare follow']
["' A PEReference may have been detected in the current input stream the handling is done accordingly to http", 'may have be detect current input stream handling be do accordingly']
["In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''", 'without , only internal which contain no param reference , yes']
['xmlAddAttributeDecl_APIParam_7 is the attribute default xmlAddAttributeDecl_APIParam_6', 'param be attribute default param']
['xmlAddAttributeDecl_APIParam_8 is the attribute default value', 'param be attribute default value']
['xmlAddAttributeDecl_APIName returns NULL if not new, otherwise the attribute decl', 'api return null if not , otherwise attribute']
['Register a new element declaration', 'register element declaration']
['xmlAddElementDecl_APIParam_1 is the validation context', 'param be validation context']
['xmlAddElementDecl_APIParam_2 is pointer to the DTD', 'param be pointer']
['xmlAddAttributeDecl_APIParam_9 is', 'param be']
['xmlAddElementDecl_APIParam_3 is the entity xmlAddElementDecl_APIParam_3', 'param be param']
['xmlAddElementDecl_APIParam_4 is the element xmlAddElementDecl_APIParam_4', 'param be element param']
['xmlAddElementDecl_APIParam_5 is the element xmlAddElementDecl_APIParam_5 tree or NULL', 'param be element param null']
['xmlAddElementDecl_APIName returns NULL if not, otherwise the entity', 'api return null if not , otherwise']
['xmlAddID_APIParam_1 is the validation context', 'param be validation context']
['xmlAddID_APIParam_2 is pointer to the document', 'param be pointer']
['Register a new id declaration', 'register -PRON- would declaration']
['xmlAddID_APIParam_3 is the xmlAddID_APIParam_3 name', 'param be param name']
['xmlAddNotationDecl_APIParam_1 is the validation context', 'param be validation context']
['Register a new notation declaration', 'register declaration']
['xmlAddNotationDecl_APIParam_2 is pointer to the DTD', 'param be pointer']
['xmlAddID_APIName returns NULL if not, otherwise the new xmlIDPtr', 'api return null if not , otherwise']
['xmlAddID_APIParam_4 is the attribute holding the ID', 'param be attribute holding -PRON- would']
['xmlAddNotationDecl_APIParam_3 is the entity xmlAddNotationDecl_APIParam_3', 'param be param']
['xmlAddNotationDecl_APIParam_4 is the public identifier or NULL', 'param be identifi null']
['xmlAddNotationDecl_APIParam_5 is the system identifier or NULL', 'param be system identifi null']
['xmlAddNotationDecl_APIName returns NULL if not, otherwise the entity', 'api return null if not , otherwise']
['Register a new ref declaration', 'register declaration']
['xmlAddRef_APIParam_1 is the validation context', 'param be validation context']
['xmlAddRef_APIParam_2 is pointer to the document', 'param be pointer']
['xmlAddRef_APIParam_3 is the xmlAddRef_APIParam_3 name', 'param be param name']
['xmlAddRef_APIParam_4 is the attribute holding the Ref', 'param be attribute holding']
['xmlAddRef_APIName returns NULL if not, otherwise the new xmlRefPtr', 'api return null if not , otherwise']
['Build a copy of an attribute xmlCopyAttributeTable_APIParam_1', 'build copy attribute param']
['xmlCopyAttributeTable_APIParam_1 is An attribute xmlCopyAttributeTable_APIParam_1', 'param be attribute param']
['xmlCopyAttributeTable_APIName returns the new xmlAttributeTablePtr or NULL in case of error', 'api return null case error']
['Build a copy of an element content description', 'build copy element content description']
['xmlCopyDocElementContent_APIParam_1 is the document owning the element declaration', 'param be own element declaration']
['xmlCopyDocElementContent_APIParam_2 is An element content pointer', 'param be element content pointer']
['xmlCopyDocElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error', 'api return null case error']
['Build a copy of an element content description', 'build copy element content description']
['Deprecated , use xmlCopyDocElementContent instead', 'deprecate , use api instead']
['xmlCopyElementContent_APIParam_1 is An element content pointer', 'param be element content pointer']
['xmlCopyElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error', 'api return null case error']
['Build a copy of an element xmlCopyElementTable_APIParam_1', 'build copy element param']
['xmlCopyElementTable_APIParam_1 is An element xmlCopyElementTable_APIParam_1', 'param be element param']
['xmlCopyElementTable_APIName returns the new xmlElementTablePtr or NULL in case of error', 'api return null case error']
['Copy an enumeration attribute node', 'copy attribute']
['xmlCopyEnumeration_APIParam_1 is the tree to copy', 'param be copy']
['xmlCopyEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error', 'api return create null case error']
['Build a copy of a notation xmlCopyNotationTable_APIParam_1', 'build copy param']
['xmlCopyNotationTable_APIParam_1 is A notation xmlCopyNotationTable_APIParam_1', 'param be param']
['xmlCopyNotationTable_APIName returns the new xmlNotationTablePtr or NULL in case of error', 'api return null case error']
['create and initialize an enumeration attribute node', 'create initialize attribute']
['xmlCreateEnumeration_APIParam_1 is the enumeration xmlCreateEnumeration_APIParam_1 or NULL', 'param be param null']
['xmlCreateEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error', 'api return create null case error']
['This will dump the content of the attribute declaration as an XML DTD definition', 'content attribute declaration as definition']
['xmlDumpAttributeDecl_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlDumpAttributeDecl_APIParam_2 is An attribute declaration', 'param be attribute declaration']
['This will dump the content of the attribute xmlDumpAttributeTable_APIParam_2 as an XML DTD definition', 'content attribute param as definition']
['xmlDumpAttributeTable_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlDumpAttributeTable_APIParam_2 is An attribute table', 'param be attribute table']
['This will dump the content of the element declaration as an XML DTD definition', 'content element declaration as definition']
['xmlDumpElementDecl_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlDumpElementDecl_APIParam_2 is An element table', 'param be element table']
['xmlDumpElementTable_APIParam_1 is the XML buffer output', 'param be buffer output']
['This will dump the content of the element xmlDumpElementTable_APIParam_2 as an XML DTD definition', 'content element param as definition']
['xmlDumpElementTable_APIParam_2 is An element table', 'param be element table']
['This will dump the content the notation declaration as an XML DTD definition', 'content declaration as definition']
['xmlDumpNotationDecl_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlDumpNotationDecl_APIParam_2 is A notation declaration', 'param be declaration']
['This will dump the content of the notation xmlDumpNotationTable_APIParam_2 as an XML DTD definition', 'content param as definition']
['xmlDumpNotationTable_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlDumpNotationTable_APIParam_2 is A notation table', 'param be table']
['Deallocate the memory used by an entities hash xmlFreeAttributeTable_APIParam_1', 'deallocate memory use by hash param']
['xmlFreeAttributeTable_APIParam_1 is An attribute table', 'param be attribute table']
['Free an element content structure', 'free element content structure']
['The whole subtree is removed', 'whole be remove']
['xmlFreeDocElementContent_APIParam_1 is the document owning the element declaration', 'param be own element declaration']
['xmlFreeDocElementContent_APIParam_2 is the element content tree to free', 'param be element content free']
['Free an element content structure', 'free element content structure']
['The whole subtree is removed', 'whole be remove']
['Deprecated , use xmlFreeDocElementContent instead', 'deprecate , use api instead']
['xmlFreeElementContent_APIParam_1 is the element content tree to free', 'param be element content free']
['Deallocate the memory used by an element hash xmlFreeElementTable_APIParam_1', 'deallocate memory use by element hash param']
['xmlFreeElementTable_APIParam_1 is An element table', 'param be element table']
['free an enumeration attribute node', 'free attribute']
['xmlFreeEnumeration_APIParam_1 is the tree to free', 'param be free']
['Deallocate the memory used by an ID hash xmlFreeIDTable_APIParam_1', 'deallocate memory use by -PRON- would hash param']
['xmlFreeIDTable_APIParam_1 is An id table', 'param be -PRON- would table']
['Deallocate the memory used by an entities hash xmlFreeNotationTable_APIParam_1', 'deallocate memory use by hash param']
['xmlFreeNotationTable_APIParam_1 is An notation table', 'param be table']
['Deallocate the memory used by an Ref hash xmlFreeRefTable_APIParam_1', 'deallocate memory use by hash param']
['xmlFreeRefTable_APIParam_1 is An ref table', 'param be table']
['Free a validation context structure', 'free validation context structure']
['xmlFreeValidCtxt_APIParam_1 is the validation context to free', 'param be validation context free']
['Search the DTD for the description of this attribute on this element', 'search description attribute element']
['xmlGetDtdAttrDesc_APIParam_1 is a pointer to the DtD to search', 'param be pointer search']
['xmlGetDtdAttrDesc_APIParam_2 is the element xmlGetDtdAttrDesc_APIParam_3', 'param be element param']
['xmlGetDtdAttrDesc_APIParam_3 is the attribute xmlGetDtdAttrDesc_APIParam_3', 'param be attribute param']
['xmlGetDtdAttrDesc_APIName returns the xmlAttributePtr if found or NULL', 'api return if find null']
['Search the DTD for the description of this element', 'search description element']
['xmlGetDtdElementDesc_APIParam_1 is a pointer to the DtD to search', 'param be pointer search']
['xmlGetDtdElementDesc_APIParam_2 is the element xmlGetDtdElementDesc_APIParam_2', 'param be element param']
['Search the DTD for the description of this notation', 'search description']
['xmlGetDtdElementDesc_APIName returns the xmlElementPtr if found or NULL', 'api return if find null']
['xmlGetDtdNotationDesc_APIParam_1 is a pointer to the DtD to search', 'param be pointer search']
['xmlGetDtdNotationDesc_APIParam_2 is the notation xmlGetDtdNotationDesc_APIParam_2', 'param be param']
['xmlGetDtdNotationDesc_APIName returns the xmlNotationPtr if found or NULL', 'api return if find null']
['Search the DTD for the description of this qualified attribute on this element', 'search description qualified attribute element']
['xmlGetDtdQAttrDesc_APIParam_1 is a pointer to the DtD to search', 'param be pointer search']
['xmlGetDtdQAttrDesc_APIParam_2 is the element xmlGetDtdQAttrDesc_APIParam_3', 'param be element param']
['xmlGetDtdQAttrDesc_APIParam_3 is the attribute xmlGetDtdQAttrDesc_APIParam_3', 'param be attribute param']
['xmlGetDtdQAttrDesc_APIParam_4 is the attribute namespace xmlGetDtdQAttrDesc_APIParam_4', 'param be attribute param']
['xmlGetDtdQAttrDesc_APIName returns the xmlAttributePtr if found or NULL', 'api return if find null']
['Search the DTD for the description of this element', 'search description element']
['xmlGetDtdQElementDesc_APIParam_1 is a pointer to the DtD to search', 'param be pointer search']
['xmlGetDtdQElementDesc_APIParam_2 is the element xmlGetDtdQElementDesc_APIParam_2', 'param be element param']
['xmlGetDtdQElementDesc_APIParam_3 is the element namespace xmlGetDtdQElementDesc_APIParam_3', 'param be element param']
['Search the attribute declaring the given xmlGetID_APIParam_2', 'search attribute declare give param']
['xmlGetDtdQElementDesc_APIName returns the xmlElementPtr if found or NULL', 'api return if find null']
['xmlGetID_APIParam_1 is pointer to the document', 'param be pointer']
['xmlGetID_APIParam_2 is the xmlGetID_APIParam_2 value', 'param be param value']
['xmlGetID_APIName returns NULL if not found, otherwise the xmlAttrPtr defining the ID', 'api return null  would']
['Find the set of references for the supplied xmlGetRefs_APIParam_2', 'find set reference supply param']
['xmlGetRefs_APIParam_1 is pointer to the document', 'param be pointer']
['xmlGetRefs_APIParam_2 is the xmlGetRefs_APIParam_2 value', 'param be param value']
['xmlGetRefs_APIName returns NULL if not found, otherwise node set for the ID', 'api return null  - PRON - would']
['xmlIsID_APIParam_1 is the document', 'param be']
['Determine whether an attribute is of type ID', 'determine whether attribute be type -PRON- would']
['In the case of HTML documents parsed with the HTML parser , ID detection is done systematically', 'case parse parser , -PRON- would detection be do systematically']
['xmlIsID_APIParam_2 is the element carrying the attribute', 'param be element carry attribute']
['xmlIsID_APIParam_3 is the attribute', 'param be attribute']
['xmlIsID_APIName returns 0 or 1 depending on the lookup result', 'api return constant depending lookup result']
['In case we have DTD this is done', 'case have be do']
['xmlIsMixedElement_APIParam_1 is the document', 'param be']
['xmlIsMixedElement_APIParam_2 is the element xmlIsMixedElement_APIParam_2', 'param be element param']
['Determine whether an attribute is of type Ref', 'determine whether attribute be type']
['xmlIsRef_APIParam_1 is the document', 'param be']
['xmlIsMixedElement_APIName returns 0 if no, 1 if yes, and -1 if no element description is available', 'api return constant if no , constant']
['In case we have DTD this is simple , otherwise we use an heuristic', 'case have be simple , otherwise use']
['xmlIsRef_APIParam_2 is the element carrying the attribute', 'param be element carry attribute']
['xmlNewDocElementContent_APIParam_2 is the subelement xmlNewDocElementContent_APIParam_2 or NULL', 'param be param null']
['xmlIsRef_APIParam_3 is the attribute', 'param be attribute']
['Allocate an element content structure for the document', 'element content structure']
['xmlNewDocElementContent_APIParam_3 is the xmlNewDocElementContent_APIParam_3 of element content decl', 'param be param element content']
['xmlNewDocElementContent_APIParam_1 is the document', 'param be']
['xmlIsRef_APIName returns 0 or 1 depending on the lookup result', 'api return constant depending lookup result']
['xmlNewDocElementContent_APIName returns NULL if not, otherwise the new element content structure', 'api return null if not , otherwise element content structure']
['Deprecated in favor of xmlNewDocElementContent', 'deprecate api']
['Allocate an element content structure', 'element content structure']
['xmlNewElementContent_APIParam_1 is the subelement xmlNewElementContent_APIParam_1 or NULL', 'param be param null']
['xmlNewElementContent_APIParam_2 is the xmlNewElementContent_APIParam_2 of element content decl', 'param be param element content']
['xmlNewElementContent_APIName returns NULL if not, otherwise the new element content structure', 'api return null if not , otherwise element content structure']
['Allocate a validation context structure', 'validation context structure']
['xmlNewValidCtxt_APIName returns NULL if not, otherwise the new validation context structure', 'api return null if not , otherwise validation context structure']
['xmlRemoveID_APIParam_1 is the document', 'param be']
['Remove the given attribute from the ID table maintained internally', 'remove give attribute -PRON- would table maintain internally']
['xmlRemoveID_APIParam_2 is the attribute', 'param be attribute']
['xmlRemoveID_APIName returns -1 if the lookup failed and 0 otherwise', 'api return constant']
['Remove the given attribute from the Ref table maintained internally', 'remove give attribute table maintain internally']
['xmlRemoveRef_APIParam_1 is the document', 'param be']
['xmlRemoveRef_APIParam_2 is the attribute', 'param be attribute']
['xmlRemoveRef_APIName returns -1 if the lookup failed and 0 otherwise', 'api return constant']
['xmlSnprintfElementContent_APIParam_1 is an output buffer', 'param be output buffer']
['xmlSnprintfElementContent_APIParam_2 is the buffer xmlSnprintfElementContent_APIParam_2', 'param be buffer param']
['This will dump the xmlSnprintfElementContent_APIParam_3 of the element xmlSnprintfElementContent_APIParam_3 definition Intended just for the debug routine', 'param element param definition intend debug api']
['xmlSnprintfElementContent_APIParam_3 is An element table', 'param be element table']
['Deprecated , unsafe , use xmlSnprintfElementContent', 'deprecate , unsafe , use api']
['xmlSprintfElementContent_APIParam_1 is an output buffer', 'param be output buffer']
['xmlSprintfElementContent_APIParam_2 is An element table', 'param be element table']
['Build the automata associated to the content model of this element', 'build associated content element']
['xmlValidBuildContentModel_APIParam_1 is a validation context', 'param be validation context']
['xmlValidBuildContentModel_APIParam_2 is an element declaration node', 'param be element declaration']
['xmlValidBuildContentModel_APIName returns 1 in case of success, 0 in case of error', 'api return constant case success , constant case error']
['xmlValidCtxtNormalizeAttributeValue_APIParam_1 is the validation context or NULL', 'param be validation context null']
['xmlValidCtxtNormalizeAttributeValue_APIParam_2 is the document', 'param be']
['Standalone Document Declaration in P32 , and update ctxt - > valid accordingly', 'declaration , update _ valid accordingly']
['xmlValidCtxtNormalizeAttributeValue_APIParam_3 is the parent', 'param be']
['xmlValidCtxtNormalizeAttributeValue_APIParam_5 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5', 'param be attribute param']
['xmlValidCtxtNormalizeAttributeValue_APIParam_4 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_4', 'param be attribute param']
['Build/extend a list of potential children allowed by the content tree', 'list potential allow by content']
['xmlValidCtxtNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidCtxtNormalizeAttributeValue_APIParam_0 value', 'api return normalize string']
['xmlValidGetPotentialChildren_APIParam_1 is an element content tree', 'param be element content']
['xmlSnprintfElementContent_APIParam_4 is 1', 'param be constant']
['xmlValidGetPotentialChildren_APIParam_2 is an array to store the list of child xmlValidGetPotentialChildren_APIParam_2', 'param be array store list param']
['xmlValidGetPotentialChildren_APIParam_3 is a pointer to the number of element in the list', 'param be pointer number element list']
['xmlValidGetPotentialChildren_APIParam_4 is the size of the array', 'param be size array']
['xmlValidGetPotentialChildren_APIName returns the number of element in the list, or -1 in case of error', 'api return number element list , constant case error']
['xmlSprintfElementContent_APIParam_3 is 1', 'param be constant']
['xmlValidGetValidElements_APIParam_1 is an element to insert after', 'param be element insert after']
['xmlValidGetValidElements_APIName returns the list of authorized children to insert within an existing tree while respecting the validity constraints forced by the Dtd', 'api return list authorize insert within while respect validity constraint force by']
['xmlValidGetValidElements_APIParam_2 is an element to insert xmlValidGetValidElements_APIParam_2', 'param be element insert param']
['xmlValidGetValidElements_APIParam_3 is an array to store the list of child xmlValidGetValidElements_APIParam_3', 'param be array store list param']
['Does the validation related extra step of the normalization of attribute values', 'do validation relate extra step attribute value']
['xmlValidGetValidElements_APIParam_4 is the size of the array', 'param be size array']
['xmlValidGetValidElements_APIName returns the number of element in the list, or -1 in case of error', 'api return number element list , constant case error']
['xmlValidNormalizeAttributeValue_APIParam_1 is the document', 'param be']
['If the function returns the value @max the caller is invited to grow the receiving array and retry', 'if function return value max caller be invite grow receive array retry']
['xmlValidNormalizeAttributeValue_APIParam_2 is the parent', 'param be']
['xmlValidNormalizeAttributeValue_APIParam_3 is the attribute xmlValidNormalizeAttributeValue_APIParam_3', 'param be attribute param']
['xmlValidNormalizeAttributeValue_APIParam_4 is the attribute xmlValidNormalizeAttributeValue_APIParam_4', 'param be attribute param']
['Does the validation related extra step of the normalization of attribute values', 'do validation relate extra step attribute value']
['The insertion point is defined using @prev and @next in the following ways', 'point be define use following way']
["to insert before ` node '", 'insert before']
["xmlValidGetValidElements -LRB- node , node - > next , ... to replace ` node '", 'api _ lrb _ , _ , ... replace']
["xmlValidGetValidElements -LRB- node - > prev , node , ... to insert xmlValidGetValidElements_APIParam_2 ` node '", 'api _ lrb _ _ , , ... insert param']
["xmlValidGetValidElements -LRB- node - > prev , node - > next , ... to prepend a child to ` node '", 'api _ lrb _ _ , _ , ... prepend']
["xmlValidGetValidElements -LRB- NULL , node - > childs , to append a child to ` node '", 'api _ lrb _ null , _ , append']
['xmlValidGetValidElements -LRB- node - > last , NULL , ... pointers to the element xmlValidGetValidElements_APIParam_3 are inserted at the beginning of the array and do not need to be freed', 'api _ lrb _ _ last , null , ... pointer element param be insert begin array not nee be free']
['the XML processor must further process the normalized attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character', 'processor must process normalize attribute param by discard lead trail space character , by replace sequence space character by single space character']
['xmlValidateAttributeDecl_APIParam_1 is the validation context', 'param be validation context']
['xmlValidNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidNormalizeAttributeValue_APIParam_0 value', 'api return normalize string']
['the XML processor must further process the normalized attribute xmlValidNormalizeAttributeValue_APIParam_4 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character', 'processor must process normalize attribute param by discard lead trail space character , by replace sequence space character by single space character']
['xmlValidateAttributeDecl_APIParam_2 is a document instance', 'param be instance']
['xmlValidateAttributeDecl_APIParam_3 is an attribute definition', 'param be attribute definition']
['xmlValidateAttributeDecl_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Try to validate a single attribute definition basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single attribute definition basically do follow check as describe by param']
['- - - The ID/IDREF uniqueness and matching are done separately', '_ _ _ matching be do separately']
['Values of xmlValidateAttributeValue_APIParam_1 IDREF must match the Name production , and values of xmlValidateAttributeValue_APIParam_1 IDREFS must match Names', 'value param must match name , value param must match name']
['Validate that the given attribute xmlValidateAttributeValue_APIParam_2 match the proper production Values of xmlValidateAttributeValue_APIParam_1 ID must match the Name production', 'validate give attribute param match proper value param -PRON- would must match name']
['xmlValidateAttributeValue_APIParam_1 is an attribute xmlValidateAttributeValue_APIParam_1', 'param be attribute param']
['Values of xmlValidateAttributeValue_APIParam_1 ENTITY must match the Name production , values of xmlValidateAttributeValue_APIParam_1 ENTITIES must match Names', 'value param must match name , value param must match name']
['Values of xmlValidateAttributeValue_APIParam_1 NMTOKEN must match the Nmtoken production', 'value param must match']
['values of xmlValidateAttributeValue_APIParam_1 NMTOKENS must match Nmtokens', 'value param must match']
['xmlValidateAttributeValue_APIParam_2 is an attribute xmlValidateAttributeValue_APIParam_2', 'param be attribute param']
['xmlValidateAttributeValue_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['validates the internal and external subset and validate the document tree', 'validate internal external validate']
['xmlValidateDocument_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateDocument_APIParam_2 is a document instance', 'param be instance']
['Try to validate the document instance basically the document instance does the all the checks described by the XML Rec i.e', 'validate instance basically instance do check describe by']
['xmlValidateDocument_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateDocumentFinal_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateDocumentFinal_APIParam_2 is a document instance', 'param be instance']
['xmlValidateDocumentFinal_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Try to validate the document against the xmlValidateDtd_APIParam_3 instance Basically it does check all the definitions in the DtD', 'validate against param instance basically do check definition']
['xmlValidateDtd_APIParam_1 is the validation context', 'param be validation context']
['Note the the internal subset is de-coupled -LRB- i.e', 'note internal be param _ lrb _']
['xmlValidateDtd_APIParam_2 is a document instance', 'param be instance']
['xmlValidateDtd_APIParam_3 is a xmlValidateDtd_APIParam_3 instance', 'param be param instance']
['xmlValidateDtd_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateDtdFinal_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateDtdFinal_APIParam_2 is a document instance', 'param be instance']
['- check that NOTATION type attributes default or possible values matches one of the defined notations', '_ check type attribute default possible value match one define']
['Does the final step for the document validation once all the incremental validation steps have been completed basically it does the following checks described by the XML Rec Check all the IDREF/IDREFS attributes definition for validity', 'do final step validation incremental validation step have be complete basically do follow check describe by check attribute definition validity']
['xmlValidateDtdFinal_APIName returns 1 if valid or 0 if invalid and -1 if not well-formed', 'api return constant if valid constant if invalid constant']
['Try to validate the subtree under an element', 'validate element']
['xmlValidateElement_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateElement_APIParam_2 is a document instance', 'param be instance']
['xmlValidateElement_APIParam_3 is an element instance', 'param be element instance']
['xmlValidateElement_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateElementDecl_APIParam_1 is the validation context', 'param be validation context']
['could give problems', 'could give problem']
['not used -RRB- , which', 'not use _ rrb _ , which']
['xmlValidateElementDecl_APIParam_2 is a document instance', 'param be instance']
['xmlValidateElementDecl_APIParam_3 is an element definition', 'param be element definition']
['xmlValidateElementDecl_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Try to validate a single element definition basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single element definition basically do follow check as describe by param']
['Validate that the given xmlValidateNameValue_APIParam_1 match Name production', 'validate give param match name']
['xmlValidateNameValue_APIParam_1 is an Name xmlValidateNameValue_APIParam_1', 'param be name param']
['xmlValidateNameValue_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Validate that the given xmlValidateNamesValue_APIParam_1 match Names production', 'validate give param match name']
['xmlValidateNamesValue_APIParam_1 is an Names xmlValidateNamesValue_APIParam_1', 'param be name param']
['xmlValidateNamesValue_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Validate that the given xmlValidateNmtokenValue_APIParam_1 match Nmtoken production', 'validate give param match']
['xmlValidateNmtokenValue_APIParam_1 is an Nmtoken xmlValidateNmtokenValue_APIParam_1', 'param be param']
['xmlValidateNmtokenValue_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Does the final step for the dtds validation once all the subsets have been parsed basically the dtds validation does the following checks described by the XML Rec - check that ENTITY and ENTITIES type attributes default or possible values matches one of the defined entities', 'do final step validation have be parse basically validation do follow check describe by _ check type attribute default possible value match one define']
['Validate that the given xmlValidateNmtokensValue_APIParam_1 match Nmtokens production', 'validate give param match']
['xmlValidateNmtokensValue_APIParam_1 is an Nmtokens xmlValidateNmtokensValue_APIParam_1', 'param be nmtokens param']
['xmlValidateNmtokensValue_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateNotationDecl_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateNotationDecl_APIParam_2 is a document instance', 'param be instance']
['xmlValidateNotationDecl_APIParam_3 is a notation definition', 'param be definition']
['xmlValidateNotationDecl_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Validate that the given name match a notation declaration', 'validate give name match declaration']
['xmlValidateNotationUse_APIParam_1 is the validation context', 'param be validation context']
['Try to validate a single notation definition basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single definition basically do follow check as describe by param']
['xmlValidateNotationUse_APIParam_2 is the document', 'param be']
['xmlValidateNotationUse_APIParam_3 is the notation name to check', 'param be name check']
['- it seems that no validity constraint exists on notation declarations But xmlValidateNotationDecl_APIName get called anyway', '_ seem no validity constraint declaration but api get call anyway']
['xmlValidateNotationUse_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateOneAttribute_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateOneAttribute_APIParam_2 is a document instance', 'param be instance']
['xmlValidateOneAttribute_APIParam_3 is an element instance', 'param be element instance']
['xmlValidateOneAttribute_APIParam_4 is an attribute instance', 'param be attribute instance']
['xmlValidateOneAttribute_APIParam_5 is the attribute xmlValidateOneAttribute_APIParam_5', 'param be attribute param']
['xmlValidateOneAttribute_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Try to validate a single attribute for an element basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single attribute element basically do follow check as describe by param']
['The ID/IDREF checkings are done separately', 'be do separately']
['xmlValidateOneElement_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateOneElement_APIParam_2 is a document instance', 'param be instance']
['xmlValidateOneElement_APIParam_3 is an element instance', 'param be element instance']
['xmlValidateOneElement_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['xmlValidateOneNamespace_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateOneNamespace_APIParam_2 is a document instance', 'param be instance']
['xmlValidateOneNamespace_APIParam_3 is an element instance', 'param be element instance']
['Try to validate a single element and it is attributes , basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single element be attribute , basically do follow check as describe by param']
['xmlValidateOneNamespace_APIParam_4 is the namespace xmlValidateOneNamespace_APIParam_4', 'param be param']
['- - - - - - - - The ID/IDREF uniqueness and matching are done separately', '_ _ _ _ _ _ _ _ matching be do separately']
['xmlValidateOneNamespace_APIParam_5 is an namespace declaration instance', 'param be declaration instance']
['- - call xmlValidateOneAttribute_APIName for each attribute present', '_ _ call api attribute present']
['xmlValidateOneNamespace_APIParam_6 is the attribute xmlValidateOneNamespace_APIParam_6', 'param be attribute param']
['xmlValidateOneNamespace_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['Pop the element end from the validation stack', 'element end validation stack']
['Try to validate a single namespace declaration for an element basically it does the following checks as described by the XML-1 .0 recommendation', 'validate single declaration element basically do follow check as describe by param']
['xmlValidatePopElement_APIParam_1 is the validation context', 'param be validation context']
['xmlValidatePopElement_APIParam_2 is a document instance', 'param be instance']
['xmlValidatePopElement_APIParam_3 is an element instance', 'param be element instance']
['xmlValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise', 'api return constant']
['xmlValidatePopElement_APIParam_4 is the qualified name as appearing in the serialization', 'param be qualified name as appear serialization']
['check the CData parsed for validation in the current stack', 'check parse validation current stack']
['xmlValidatePushCData_APIParam_1 is the validation context', 'param be validation context']
['xmlValidatePushCData_APIParam_2 is some character xmlValidatePushCData_APIParam_2 read', 'param be character param read']
['xmlValidatePushCData_APIParam_3 is the length of the xmlValidatePushCData_APIParam_2', 'param be length param']
['xmlValidatePushCData_APIName returns 1 if no validation problem was found or 0 otherwise', 'api return constant']
['- - - - - - - - The ID/IDREF uniqueness and matching are done separately', '_ _ _ _ _ _ _ _ matching be do separately']
['Push a new element start on the validation stack', 'element start validation stack']
['xmlValidatePushElement_APIParam_1 is the validation context', 'param be validation context']
['xmlValidatePushElement_APIParam_2 is a document instance', 'param be instance']
['xmlValidatePushElement_APIParam_3 is an element instance', 'param be element instance']
['xmlValidatePushElement_APIParam_4 is the qualified name as appearing in the serialization', 'param be qualified name as appear serialization']
['xmlValidatePushElement_APIName returns 1 if no validation problem was found or 0 otherwise', 'api return constant']
['xmlValidateRoot_APIParam_2 is a document instance', 'param be instance']
['xmlValidateRoot_APIParam_1 is the validation context', 'param be validation context']
['xmlValidateRoot_APIName returns 1 if valid or 0 otherwise', 'api return constant if valid constant otherwise']
['This is a message oriented function similar to an * printf function', 'be message orient function similar printf function']
['Try to validate a the root element basically it does the following check as described by the XML-1 .0 recommendation', 'validate root element basically do follow check as describe by param']
['Callback called', 'callback call']
['xmlValidityErrorFunc_APIParam_2 is xmlValidityErrorFunc_APIParam_3 string to format * printf like vararg xmlValidityErrorFunc_APIParam_3 remaining arguments to xmlValidityErrorFunc_APIParam_3 format', 'param be param stre format printf like param remain param format']
['- it does not try to recurse or apply other check to the element', '_ do not apply check element']
['This is a message oriented function similar to an * printf function', 'be message orient function similar printf function']
['xmlValidityErrorFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityErrorFunc_APIParam_3 comes from ctxt - > userData', 'param be usually validity error context , param come _']
['ctxt - > userData xmlValidityErrorFunc_APIParam_3 be changed by xmlValidityErrorFunc_APIParam_3 user', '_ param be change by param user']
['xmlValidityWarningFunc_APIParam_2 is xmlValidityWarningFunc_APIParam_3 string to format * printf like vararg xmlValidityWarningFunc_APIParam_3 remaining arguments to xmlValidityWarningFunc_APIParam_3 format', 'param be param stre format printf like param remain param format']
['Debugging facility provides the number of allocated nodes over lifetime', 'debug provide number lifetime']
['Callback called', 'callback call']
['xmlExpCtxtNbCons_APIParam_1 is an expression context', 'param be context']
['xmlValidityWarningFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityWarningFunc_APIParam_3 comes from ctxt - > userData', 'param be usually validity error context , param come _']
['xmlExpCtxtNbCons_APIName returns the number of nodes ever allocated or -1 in case of error', 'api return number ever constant case error']
['ctxt - > userData xmlValidityWarningFunc_APIParam_3 be changed by xmlValidityWarningFunc_APIParam_3 user', '_ param be change by param user']
['Debugging facility provides the number of allocated nodes at a that point', 'debug provide number point']
['xmlExpCtxtNbNodes_APIParam_1 is an expression context', 'param be context']
['xmlExpCtxtNbNodes_APIName returns the number of nodes in use or -1 in case of error', 'api return number use constant case error']
['Serialize the expression as compiled to the buffer', 'serialize as compile buffer']
['xmlExpDump_APIParam_1 is a buffer to receive the output', 'param be buffer receive output']
['xmlExpDump_APIParam_2 is the compiled expression', 'param be compile']
['xmlExpExpDerive_APIParam_1 is the expressions context', 'param be context']
['xmlExpExpDerive_APIParam_2 is the englobing expression', 'param be']
['xmlExpExpDerive_APIParam_3 is the subexpression', 'param be']
['xmlExpExpDerive_APIName returns the resulting expression or NULL in case of internal error, the result must be freed', 'api return result null case internal error , result must be free']
['xmlExpFree_APIParam_1 is the expression context', 'param be context']
['xmlExpFree_APIParam_2 is the expression', 'param be']
['Free an expression context', 'free context']
['xmlExpFreeCtxt_APIParam_1 is an expression context', 'param be context']
['Find all the strings used in @exp and store them in @list', 'find string use store list']
['xmlExpGetLanguage_APIParam_1 is the expression context', 'param be context']
['xmlExpGetLanguage_APIParam_2 is the expression', 'param be']
['xmlExpGetLanguage_APIParam_3 is where to store the tokens', 'param be store']
['Evaluates the expression resulting from @exp consuming a xmlExpExpDerive_APIParam_3 expression @sub Based on algebraic derivation and sometimes direct Brzozowski derivation it usually tatkes less than linear time and can handle expressions generating infinite languages', 'evaluate result consume param base algebraic sometimes direct usually tatke less linear time can generate language']
['xmlExpGetLanguage_APIParam_4 is the allocated length of @list', 'param be length list']
['xmlExpGetLanguage_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings', 'api return number unique string find , constant case error constant']
['xmlExpGetStart_APIParam_1 is the expression context', 'param be context']
['for  | c it will return the list', 'return list']
['Find all the strings that appears at the start of the languages accepted by @exp and store them in @list', 'find string appear start language accept by store list']
['xmlExpGetStart_APIParam_2 is the expression', 'param be']
['xmlExpGetStart_APIParam_3 is where to store the tokens', 'param be store']
['xmlExpGetStart_APIParam_4 is the allocated length of @list', 'param be length list']
['xmlExpIsNillable_APIParam_1 is the expression', 'param be']
['xmlExpGetStart_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings', 'api return number unique string find , constant case error constant']
['xmlExpIsNillable_APIName returns 1 if nillable, 0 if not and -1 in case of error', 'api return constant']
['Indicate the maximum number of input a expression can accept', 'indicate maximum number input can accept']
['xmlExpMaxToken_APIParam_1 is a compiled expression', 'param be compile']
['xmlExpMaxToken_APIName returns the maximum length or -1 in case of error', 'api return maximum length constant case error']
['Get the atom associated to this xmlExpNewAtom_APIParam_2 from that context', 'get associate param context']
['xmlExpNewAtom_APIParam_1 is the expression context', 'param be context']
['xmlExpNewAtom_APIParam_2 is the atom xmlExpNewAtom_APIParam_2', 'param be param']
['xmlExpNewAtom_APIParam_3 is the atom xmlExpNewAtom_APIParam_2 length in byte', 'param be param length byte']
['xmlExpNewAtom_APIName returns the node or NULL in case of error', 'api return null case error']
['Creates a new context for manipulating expressions', 'create context manipulating']
['xmlExpNewCtxt_APIParam_1 is the maximum number of nodes', 'param be maximum number']
['xmlExpNewCtxt_APIParam_2 is optional dictionary to use internally', 'param be optional use internally']
['xmlExpNewCtxt_APIName returns the context or NULL in case of error', 'api return context null case error']
['Finds nillable , i.e', 'find nillable']
['xmlExpNewOr_APIParam_1 is the expression context', 'param be context']
['xmlExpNewOr_APIParam_2 is xmlExpNewOr_APIParam_2 expression', 'param be param']
['xmlExpNewOr_APIParam_3 is xmlExpNewOr_APIParam_3 expression', 'param be param']
['xmlExpNewOr_APIName returns the node or NULL in case of error', 'api return null case error']
['xmlExpNewRange_APIParam_1 is the expression context', 'param be context']
['xmlExpNewRange_APIParam_2 is the expression to be repeated', 'param be be']
['xmlExpNewSeq_APIParam_1 is the expression context', 'param be context']
['xmlExpNewRange_APIName returns the node or NULL in case of error', 'api return null case error']
['xmlExpNewSeq_APIParam_2 is xmlExpNewSeq_APIParam_2 expression', 'param be param']
['xmlExpNewRange_APIParam_3 is the lower bound for the repetition', 'param be low bind']
['xmlExpNewRange_APIParam_4 is the upper bound for the repetition , -1 means infinite', 'param be upper bound , constant mean']
['xmlExpNewSeq_APIParam_3 is xmlExpNewSeq_APIParam_3 expression', 'param be param']
['xmlExpNewSeq_APIName returns the node or NULL in case of error', 'api return null case error']
['xmlExpParse_APIParam_1 is the expressions context', 'param be context']
['xmlExpParse_APIParam_2 is the 0 terminated string', 'param be constant terminate string']
['xmlExpParse_APIName returns a new expression or NULL in case of failure', 'api return null case failure']
['Increase the reference count of the expression', 'increase reference count']
['xmlExpRef_APIParam_1 is the expression', 'param be']
['Get the atom associated to the choice @left | @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure', 'get associate choice be consume operation , keep use api use api release , be constant even case failure']
['xmlExpStringDerive_APIParam_1 is the expression context', 'param be context']
['Minimal parser for regexps , it understand the following constructs - string terminals - choice operator | - sequence operator , - subexpressions - usual cardinality operators + * and ?', 'minimal parser , understand follow construct _ string _ choice _ sequence , _ _ usual']
['Do one step of Brzozowski derivation of the expression @exp with respect to the input string', 'one step respect input string']
['xmlExpStringDerive_APIParam_3 is the string', 'param be stre']
['xmlExpStringDerive_APIParam_2 is the expression', 'param be']
['Get the atom associated to the range -LCB- @min , @max -RCB- Note that @subset is consumed in the operation , to keep an handle on @subset use xmlExpRef_APIName and use xmlExpFree_APIName to release @subset , this is true even in case of failure', 'get associate range _ lcb _ , max _ rcb _ be consume operation , keep use api use api release , be constant even case failure']
['xmlExpStringDerive_APIName returns the resulting expression or NULL in case of internal error', 'api return result null case internal error']
['Check whether @exp accepts all the languages accexpted by @sub the input being a subexpression', 'check whether accept language accexpte by input']
['xmlExpSubsume_APIParam_1 is the expressions context', 'param be context']
['xmlExpSubsume_APIParam_2 is the englobing expression', 'param be']
['xmlExpSubsume_APIParam_3 is the subexpression', 'param be']
['xmlExpSubsume_APIName returns 1 if true 0 if false and -1 in case of failure', 'api return constant if constant']
['Get the atom associated to the sequence @left , @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure', 'get associate sequence , be consume operation , keep use api use api release , be constant even case failure']
['Callback function', 'callback function']
['xmlExpStringDerive_APIParam_4 is the string xmlExpStringDerive_APIParam_4 in bytes', 'param be stre param byte']
['xmlRegExecCallbacks_APIParam_1 is the regular expression context', 'param be regular context']
['xmlRegExecCallbacks_APIParam_2 is the current xmlRegExecCallbacks_APIParam_2 string', 'param be current param string']
['- finite sequences -LCB- min , max -RCB- - infinite sequences -LCB- min , * -RCB- There is minimal checkings made especially no checking on strings values', '_ finite sequence _ lcb _ , max _ rcb _ _ sequence _ lcb _ , _ rcb _ be minimal make especially no check string value']
['xmlRegExecCallbacks_APIParam_3 is transition data', 'param be datum']
['xmlRegExecCallbacks_APIParam_4 is input data', 'param be input datum']
['xmlRegExecErrInfo_APIParam_2 is return value for the error xmlRegExecErrInfo_APIParam_2', 'param be return value error param']
['xmlRegExecErrInfo_APIParam_1 is a regexp execution context generating an error', 'param be execution context generate error']
['xmlRegExecErrInfo_APIParam_4 is return number of negative transitions', 'param be return number negative']
['xmlRegExecErrInfo_APIParam_3 is pointer to the number of accepted xmlRegExecErrInfo_APIParam_5 IN/OUT', 'param be pointer number accept param']
['xmlRegExecErrInfo_APIParam_5 is pointer to the array of acceptable xmlRegExecErrInfo_APIParam_5', 'param be pointer array acceptable param']
['xmlRegExecErrInfo_APIParam_6 is return value if this was a xmlRegExecErrInfo_APIParam_6 state', 'param be return value']
['xmlRegExecErrInfo_APIName returns will be freed with the @exec context and do not need to be deallocated', 'api return be free exec context not nee be deallocate']
['The string xmlRegExecNextValues_APIParam_4', 'string param']
['xmlRegExecErrInfo returns 0 in case of success or -1 in case of error', 'api return constant case success constant case error']
['xmlRegExecNextValues_APIParam_1 is a regexp execution context', 'param be execution context']
['xmlRegExecNextValues_APIParam_2 is pointer to the number of accepted xmlRegExecNextValues_APIParam_4 IN/OUT', 'param be pointer number accept param']
['xmlRegExecNextValues_APIParam_3 is return number of negative transitions', 'param be return number negative']
['xmlRegExecNextValues_APIParam_4 is pointer to the array of acceptable xmlRegExecNextValues_APIParam_4', 'param be pointer array acceptable param']
['xmlRegExecNextValues_APIParam_5 is return value if this was a xmlRegExecNextValues_APIParam_5 state', 'param be return value']
['xmlRegExecNextValues_APIName returns will be freed with the @exec context and do not need to be deallocated', 'api return be free exec context not nee be deallocate']
['xmlRegExecNextValues returns 0 in case of success or -1 in case of error', 'api return constant case success constant case error']
['Push one input token in the execution context', 'one input execution context']
['xmlRegExecPushString_APIParam_1 is a regexp execution context or NULL to indicate the end', 'param be execution context null indicate end']
['xmlRegExecPushString_APIParam_2 is a string token input', 'param be stre input']
['xmlRegExecPushString_APIParam_3 is xmlRegExecPushString_APIParam_3 associated to the token to reuse in callbacks', 'param be param associate reuse callback']
['Push one input token in the execution context', 'one input execution context']
['Extract informations from the regexp execution, the parameter @values must point to an array of @nbval string pointers on return xmlRegExecNextValues_APIParam_2 will contain the number of possible strings in that state and the @values array will be updated with them', 'extract information execution , param value must point array nbval string pointer return param contain number possible string state value array be update']
['xmlRegExecPushString2_APIParam_1 is a regexp execution context or NULL to indicate the end', 'param be execution context null indicate end']
['xmlRegExecPushString2_APIParam_2 is the first string token input', 'param be first string input']
['xmlRegExecPushString_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString_APIParam_2 in case of error', 'api return constant']
['Extract error informations from the regexp execution, the parameter @string will be updated with the value pushed and not accepted, the parameter @values must point to an array of @nbval xmlRegExecErrInfo_APIParam_2 pointers on return xmlRegExecErrInfo_APIParam_3 will contain the number of possible strings in that state and the @values array will be updated with them', 'extract error information execution , param string be update value not accept , param value must point array nbval param pointer return param contain number possible string state value array be update']
['xmlRegExecPushString2_APIParam_3 is the second string token input', 'param be second string input']
['xmlRegExecPushString2_APIParam_4 is xmlRegExecPushString2_APIParam_4 associated to the token to reuse in callbacks', 'param be param associate reuse callback']
['Free a xmlRegFreeRegexp_APIParam_1', 'free param']
['xmlRegFreeExecCtxt_APIParam_1 is a regular expression evaulation context', 'param be regular context']
['Free the structures associated to a regular expression evaulation context', 'free structure associate regular context']
['xmlRegFreeRegexp_APIParam_1 is the regexp', 'param be']
['Build a context used for progressive evaluation of a regexp', 'build context use progressive']
['xmlRegNewExecCtxt_APIParam_1 is a precompiled regular expression', 'param be precompile regular']
['xmlRegNewExecCtxt_APIParam_2 is a xmlRegNewExecCtxt_APIParam_2 function used for handling progresses in the automata matching phase', 'param be param function use handling progress matching phase']
['xmlRegExecPushString2_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString2_APIParam_2 in case of error', 'api return constant']
['xmlRegNewExecCtxt_APIParam_3 is the context xmlRegNewExecCtxt_APIParam_3 associated to the xmlRegNewExecCtxt_APIParam_2 in this context', 'param be context param associate param context']
['xmlRegexpCompile_APIParam_1 is a regular expression string', 'param be regular string']
['xmlRegNewExecCtxt_APIName returns the new context', 'api return context']
['xmlRegexpCompile_APIName returns the compiled expression or NULL in case of error', 'api return compile null case error']
['Parses a regular expression conforming to XML Schemas Part 2 Datatype Appendix F and builds an automata suitable for testing strings against that regular expression', 'parse regular conform part constant build suitable testing string against regular']
['xmlRegexpExec_APIParam_1 is the compiled regular expression', 'param be compile regular']
['xmlRegexpExec_APIParam_2 is the value to check against the regular expression', 'param be value check against regular']
['xmlRegexpIsDeterminist_APIParam_1 is the compiled regular expression', 'param be compile regular']
['xmlRegexpExec_APIName returns 1 if it matches, 0 if not and a negative value in case of error', 'api return constant if not negative value case error']
['Print the content of the compiled regular expression', 'print content compile regular']
['xmlRegexpPrint_APIParam_1 is the file for the xmlRegexpPrint_APIParam_1 debug', 'param be file param debug']
['xmlRegexpPrint_APIParam_2 is the compiled xmlRegexpPrint_APIParam_2', 'param be compile param']
['xmlRegexpIsDeterminist_APIName returns 1 if it yes, 0 if not and a negative value in case of error', 'api return constant if not negative value case error']
['Additional cleanup for multi-threading', 'additional cleanup param']
['Registers a callback for node destruction', 'register callback']
['xmlDeregisterNodeDefault_APIParam_1 is function pointer to the new DeregisterNodeFunc', 'param be function pointer']
['xmlDeregisterNodeDefault_APIName returns the previous value of the deregistration function', 'api return previous value function']
['Signature for the deregistration callback of a discarded xmlDeregisterNodeFunc_APIParam_1', 'signature callback discard param']
['xmlDeregisterNodeFunc_APIParam_1 is the current node', 'param be current']
['Additional initialisation for multi-threading', 'additional param']
['xmlInitializeGlobalState_APIName initialize a global state with all the default values of the library', 'api initialize global state default value library']
['xmlInitializeGlobalState_APIParam_1 is a pointer to a newly allocated global state', 'param be pointer newly global state']
['Registers a callback for URI output file handling', 'register callback uri output file handling']
['xmlOutputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new OutputBufferCreateFilenameFunc', 'param be function pointer']
['xmlOutputBufferCreateFilenameDefault_APIName returns the old value of the registration function', 'api return old value registration function']
['xmlOutputBufferCreateFilenameFunc_APIParam_1 is the xmlOutputBufferCreateFilenameFunc_APIParam_1 to write to', 'param be param write']
['xmlOutputBufferCreateFilenameFunc_APIParam_2 is', 'param be']
['Signature for the function doing the lookup for a suitable output method corresponding to an xmlOutputBufferCreateFilenameFunc_APIParam_1', 'signature function do lookup suitable output api correspond param']
['xmlOutputBufferCreateFilenameFunc_APIParam_3 is', 'param be']
['xmlOutputBufferCreateFilenameFunc_APIName returns the new xmlOutputBufferPtr in case of success or NULL if no method was found', 'api return case success null if no api be find']
['Registers a callback for URI input file handling', 'register callback uri input file handling']
['xmlParserInputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new ParserInputBufferCreateFilenameFunc', 'param be function pointer']
['xmlParserInputBufferCreateFilenameDefault_APIName returns the old value of the registration function', 'api return old value registration function']
['Signature for the function doing the lookup for a suitable input method corresponding to an xmlParserInputBufferCreateFilenameFunc_APIParam_1', 'signature function do lookup suitable input api correspond param']
['xmlParserInputBufferCreateFilenameFunc_APIParam_1 is the xmlParserInputBufferCreateFilenameFunc_APIParam_1 to read from', 'param be param read']
['xmlParserInputBufferCreateFilenameFunc_APIParam_2 is the requested source encoding', 'param be request source encode']
['xmlParserInputBufferCreateFilenameFunc_APIName returns the new xmlParserInputBufferPtr in case of success or NULL if no method was found', 'api return case success null if no api be find']
['Registers a callback for node creation', 'register callback creation']
['xmlRegisterNodeDefault_APIName returns the old value of the registration function', 'api return old value registration function']
['xmlRegisterNodeDefault_APIParam_1 is function pointer to the new RegisterNodeFunc', 'param be function pointer']
['Signature for the registration callback of a created xmlRegisterNodeFunc_APIParam_1', 'signature registration callback create param']
['xmlRegisterNodeFunc_APIParam_1 is the current node', 'param be current']
['xmlXPathAxisFunc_APIParam_1 is the XPath interpreter context', 'param be context']
['xmlXPathAxisFunc_APIParam_2 is the previous node being explored on that axis', 'param be previous explore']
['Converts a boolean to its number value', 'convert number value']
['xmlXPathAxisFunc_APIName returns the next node in that axis or NULL if at the end of the axis', 'api return null']
['xmlXPathCastBooleanToNumber_APIParam_1 is a boolean', 'param be']
['To traverse an axis, the engine calls the first time with xmlXPathAxisFunc_APIParam_2 == NULL and repeat until the function returns NULL indicating the end of the axis traversal', 'traverse , engine call first time param null until function return null indicate end']
['xmlXPathCastBooleanToNumber_APIName returns the number value', 'api return number value']
['Converts a boolean to its string value', 'convert string value']
['xmlXPathCastBooleanToString_APIParam_1 is a boolean', 'param be']
['xmlXPathCastBooleanToString_APIName returns a newly allocated string', 'api return newly string']
['Converts a node-set to its boolean value', 'convert param value']
['xmlXPathCastNodeSetToBoolean_APIParam_1 is a node-set', 'param be param']
['xmlXPathCastNodeSetToBoolean_APIName returns the boolean value', 'api return value']
['Converts a node-set to its number value', 'convert param number value']
['xmlXPathCastNodeSetToNumber_APIParam_1 is a node-set', 'param be param']
['Converts a node-set to its string value', 'convert param string value']
['xmlXPathCastNodeSetToNumber_APIName returns the number value', 'api return number value']
['xmlXPathCastNodeSetToString_APIParam_1 is a node-set', 'param be param']
['xmlXPathCastNodeSetToString_APIName returns a newly allocated string', 'api return newly string']
['Converts a xmlXPathCastNodeToNumber_APIParam_1 to its number value', 'convert param number value']
['xmlXPathCastNodeToNumber_APIParam_1 is a xmlXPathCastNodeToNumber_APIParam_1', 'param be param']
['xmlXPathCastNodeToNumber_APIName returns the number value', 'api return number value']
['Converts a xmlXPathCastNodeToString_APIParam_1 to its string value', 'convert param string value']
['xmlXPathCastNodeToString_APIParam_1 is a xmlXPathCastNodeToString_APIParam_1', 'param be param']
['Converts a number to its boolean value', 'convert number value']
['xmlXPathCastNodeToString_APIName returns a newly allocated string', 'api return newly string']
['xmlXPathCastNumberToBoolean_APIParam_1 is a number', 'param be number']
['xmlXPathCastNumberToBoolean_APIName returns the boolean value', 'api return value']
['Converts a number to its string value', 'convert number string value']
['xmlXPathCastNumberToString_APIParam_1 is a number', 'param be number']
['xmlXPathCastNumberToString_APIName returns a newly allocated string', 'api return newly string']
['Converts a string to its boolean value', 'convert stre value']
['xmlXPathCastStringToBoolean_APIParam_1 is a string', 'param be stre']
['xmlXPathCastStringToBoolean_APIName returns the boolean value', 'api return value']
['Converts a string to its number value', 'convert stre number value']
['xmlXPathCastStringToNumber_APIParam_1 is a string', 'param be stre']
['Converts an XPath object to its boolean value', 'convert object value']
['xmlXPathCastStringToNumber_APIName returns the number value', 'api return number value']
['xmlXPathCastToBoolean_APIParam_1 is an XPath object', 'param be object']
['xmlXPathCastToBoolean_APIName returns the boolean value', 'api return value']
['Converts an XPath object to its number value', 'convert object number value']
['xmlXPathCastToNumber_APIParam_1 is an XPath object', 'param be object']
['xmlXPathCastToNumber_APIName returns the number value', 'api return number value']
['Converts an existing object to its string_APIName equivalent', 'convert object api equivalent']
['xmlXPathCastToString_APIParam_1 is an XPath object', 'param be object']
['xmlXPathCastToString_APIName returns the allocated string value of the object, NULL in case of error', 'api return string value object , null case error']
['it is up to the caller to free the string memory with xmlFree_APIName', 'be upto caller free string memory api']
['Compare two nodes w.r.t document order', 'compare two order']
['xmlXPathCompile_APIParam_1 is the XPath expression', 'param be']
['xmlXPathCmpNodes_APIParam_1 is the first node', 'param be first']
['xmlXPathCmpNodes_APIParam_2 is the second node', 'param be second']
['xmlXPathCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL', 'api return result compilation null']
['the caller has to free the object', 'caller have free object']
['Evaluate the Precompiled XPath expression in the given context', 'evaluate precompiled give context']
['xmlXPathCompiledEval_APIParam_1 is the compiled XPath expression', 'param be compile']
['xmlXPathCmpNodes_APIName returns -2 in case of error 1 if first point < second point, 0 if it is the same node, -1 otherwise', 'api return constant case error constant otherwise']
['xmlXPathCompiledEval_APIParam_2 is the XPath context', 'param be context']
['xmlXPathCompiledEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL', 'api return result null']
['the caller has to free the object', 'caller have free object']
['Applies the XPath boolean_APIName function on the result of the given compiled expression', 'apply api function result give compile']
['xmlXPathCompiledEvalToBoolean_APIParam_1 is the compiled XPath expression', 'param be compile']
['xmlXPathCompiledEvalToBoolean_APIParam_2 is the XPath context', 'param be context']
['Creates/frees an object cache on the XPath context', 'object cache context']
['Use < 0 for the default number', 'use constant default number']
['xmlXPathCompiledEvalToBoolean_APIName returns 1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors', 'api return constant']
['Other values for @options have currently no effect', 'value option have currently no effect']
['xmlXPathContextSetCache_APIParam_1 is the XPath context', 'param be context']
['xmlXPathContextSetCache_APIParam_2 is enables/disables the cache', 'param be cache']
['xmlXPathContextSetCache_APIParam_3 is a xmlXPathContextSetCache_APIParam_3 with semantics dependant on @options', 'param be param semantic option']
['xmlXPathContextSetCache_APIParam_4 is xmlXPathContextSetCache_APIParam_4', 'param be param']
['Converts an existing object to its boolean_APIName equivalent', 'convert object api equivalent']
['xmlXPathContextSetCache_APIName returns 0 if the setting succeeded, and -1 on API or internal errors', 'api return constant']
['xmlXPathConvertBoolean_APIParam_1 is an XPath object', 'param be object']
['This will set the XPath object caching', 'set object cache']
['xmlXPathConvertBoolean_APIName returns the new object, the old one is freed (or the operation is done directly on @val', 'api return object , old one be free operation be do directly']
['xmlXPathConvertFunc_APIParam_1 is an XPath object', 'param be object']
['This will set the maximum number of XPath objects to be cached per slot There are 5 slots for', 'set maximum number object be cache per be constant']
['node-set , string , number , boolean , and misc objects', 'param , string , number , , object']
['xmlXPathConvertFunc_APIParam_2 is the number of the target xmlXPathConvertFunc_APIParam_2', 'param be number target param']
['A conversion function is associated to a xmlXPathConvertFunc_APIParam_2 and used to cast the new xmlXPathConvertFunc_APIParam_2 to primitive values', 'conversion function be associate param use cast param primitive value']
['xmlXPathConvertFunc_APIName returns -1 in case of error, 0 otherwise', 'api return constant case error , constant otherwise']
['will be cached internally to be reused', 'be cache internally be reuse']
['Converts an existing object to its number_APIName equivalent', 'convert object api equivalent']
['xmlXPathConvertNumber_APIParam_1 is an XPath object', 'param be object']
['Converts an existing object to its string_APIName equivalent', 'convert object api equivalent']
['xmlXPathConvertString_APIParam_1 is an XPath object', 'param be object']
['xmlXPathConvertNumber_APIName returns the new object, the old one is freed (or the operation is done directly on @val', 'api return object , old one be free operation be do directly']
['xmlXPathConvertString_APIName returns the new object, the old one is freed (or the operation is done directly on @val', 'api return object , old one be free operation be do directly']
['xmlXPathCtxtCompile_APIParam_1 is an XPath context', 'param be context']
['xmlXPathCtxtCompile_APIParam_2 is the XPath expression', 'param be']
['xmlXPathCtxtCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL', 'api return result compilation null']
['the caller has to free the object', 'caller have free object']
['Evaluate the XPath Location Path in the given context', 'evaluate location path give context']
['xmlXPathEval_APIParam_1 is the XPath expression', 'param be']
['xmlXPathEval_APIParam_2 is the XPath context', 'param be context']
['xmlXPathEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL', 'api return result null']
['the caller has to free the object', 'caller have free object']
['Alias for xmlXPathEval_APIName', 'alias api']
['xmlXPathEvalExpression_APIParam_1 is the XPath expression', 'param be']
['xmlXPathEvalExpression_APIParam_2 is the XPath context', 'param be context']
['xmlXPathEvalExpression_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL', 'api return result null']
['the caller has to free the object', 'caller have free object']
['An XPath evaluation function , the parameters are on the XPath context stack', 'function , param be context stack']
['xmlXPathEvalFunc_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathEvalFunc_APIParam_2 is the number of arguments passed to the function', 'param be number param pass function']
['Evaluate a predicate result for the current node', 'evaluate result current']
['A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean', 'be evaluate by evaluate convert result']
['xmlXPathEvalPredicate_APIParam_1 is the XPath context', 'param be context']
['xmlXPathEvalPredicate_APIParam_2 is the Predicate Expression evaluation result', 'param be result']
['xmlXPathEvalPredicate_APIName returns 1 if predicate is true, 0 otherwise', 'api return constant']
['Free up the memory allocated by @comp', 'free memory by']
['xmlXPathFreeCompExpr_APIParam_1 is an XPATH comp', 'param be']
['the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise', 'result be convert constant  position context context list be convert constant otherwise']
['the result will be converted as if by a call to the boolean function', 'result be convert as if by call function']
['xmlXPathFreeContext_APIParam_1 is the context to free', 'param be context free']
['xmlXPathFreeNodeSet_APIParam_1 is the xmlNodeSetPtr to free', 'param be free']
['xmlXPathFreeNodeSetList_APIParam_1 is an existing NodeSetList object', 'param be object']
['Free up an xmlXPathObjectPtr object', 'free object']
['xmlXPathFreeObject_APIParam_1 is the object to free', 'param be object free']
['Free up the xmlXPathObjectPtr @obj but do not deallocate the objects in the list contrary to xmlXPathFreeObject_APIName', 'free but not deallocate object list api']
['xmlXPathFuncLookupFunc_APIParam_1 is an XPath context', 'param be context']
['Prototype for callbacks used to plug function lookup in the XPath engine', 'prototype callback use plug function lookup engine']
['xmlXPathFuncLookupFunc_APIParam_2 is xmlXPathFuncLookupFunc_APIParam_2 of the function', 'param be param function']
['xmlXPathFuncLookupFunc_APIParam_3 is the namespace xmlXPathFuncLookupFunc_APIParam_2 hosting this function', 'param be param hosting function']
['xmlXPathFuncLookupFunc_APIName returns the XPath function or NULL if not found', 'api return function null']
['xmlXPathFunction_APIParam_1 is the XPath interprestation context', 'param be context']
['xmlXPathFunction_APIParam_2 is the number of arguments', 'param be number param']
['The arguments are popped out from the context stack and the result is pushed on the stack', 'param be context stack result be stack']
['Initialize the XPath environment', 'initialize environment']
['Based on trio code http', 'base code']
['Provides a portable isinf_APIName function to detect', 'provide portable api function detect']
['xmlXPathIsInf_APIParam_1 is a double value', 'param be double value']
['Provides a portable isnan_APIName function to detect', 'provide portable api function detect']
['Based on trio code http', 'base code']
['xmlXPathIsNaN_APIParam_1 is a double value', 'param be double value']
['xmlXPathIsNaN_APIName returns 1 if the value is a NaN, 0 otherwise', 'api return constant']
['xmlXPathNewContext_APIParam_1 is the XML document', 'param be']
['xmlXPathNewContext_APIName returns the xmlXPathContext just allocated', 'api return']
['The caller will need to free it', 'caller need free']
['Evaluate the XPath Location Path in the given context', 'evaluate location path give context']
["The xmlXPathNodeEval_APIParam_1 ` node ' is set as the context xmlXPathNodeEval_APIParam_1", 'param be set as context param']
['The context xmlXPathNodeEval_APIParam_1 is not restored', 'context param be not restore']
['xmlXPathNodeEval_APIParam_1 is the xmlXPathNodeEval_APIParam_1 to to use as the context xmlXPathNodeEval_APIParam_1', 'param be param use as context param']
['xmlXPathNodeEval_APIParam_2 is the XPath expression', 'param be']
['xmlXPathIsInf_APIName returns 1 vi the value is +Infinite, -1 if -Infinite, 0 otherwise', 'api return constant vi value be , constant if _ , constant otherwise']
['xmlXPathNodeEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL', 'api return result null']
['xmlXPathNodeEval_APIParam_3 is the XPath context', 'param be context']
['the caller has to free the object', 'caller have free object']
['Create a new xmlNodeSetPtr of type double and of value @val', 'create type double value']
['xmlXPathNodeSetCreate_APIParam_1 is an initial xmlNodePtr , or NULL', 'param be initial , null']
['xmlXPathNodeSetCreate_APIName returns the newly created object', 'api return newly create object']
['allocate a new copy of a given object', 'copy give object']
['xmlXPathObjectCopy_APIParam_1 is the original object', 'param be original object']
['Call this routine to speed up XPath computation on static documents', 'call api speed static']
['xmlXPathObjectCopy_APIName returns the newly created object', 'api return newly create object']
['xmlXPathOrderDocElems_APIParam_1 is an input document', 'param be input']
["Sets ` node ' as the context xmlXPathSetContextNode_APIParam_1", 'set as context param']
['xmlXPathOrderDocElems_APIName returns the number of elements found in the document or -1 in case of error', 'api return number element find constant case error']
['xmlXPathSetContextNode_APIParam_1 is the xmlXPathSetContextNode_APIParam_1 to to use as the context xmlXPathSetContextNode_APIParam_1', 'param be param use as context param']
['The xmlXPathSetContextNode_APIParam_1 must be in the same document as that associated with the context', 'param must be as associate context']
['xmlXPathSetContextNode_APIParam_2 is the XPath context', 'param be context']
['xmlXPathSetContextNode_APIName returns -1 in case of error or 0 if successful', 'api return constant case error constant if successful']
['Prototype for callbacks used to plug variable lookup in the XPath engine', 'prototype callback use plug variable lookup engine']
['xmlXPathVariableLookupFunc_APIParam_1 is an XPath context', 'param be context']
['xmlXPathVariableLookupFunc_APIParam_2 is xmlXPathVariableLookupFunc_APIParam_2 of the variable', 'param be param variable']
['xmlXPathVariableLookupFunc_APIParam_3 is the namespace xmlXPathVariableLookupFunc_APIParam_2 hosting this variable', 'param be param host variable']
['xmlXPathVariableLookupFunc_APIName returns the XPath object value or NULL if not found', 'api return object value null if not find']
['Deallocate all the resources associated to the xmlFreeTextWriter_APIParam_1', 'deallocate resource associate param']
['xmlFreeTextWriter_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlNewTextWriter_APIParam_1 is an xmlOutputBufferPtr', 'param be']
['Create a new xmlNewTextWriter_APIName structure using an xmlOutputBufferPtr NOTE', 'create api structure use note']
['xmlNewTextWriterDoc_APIParam_1 is address of a xmlDocPtr to hold the new XML document tree', 'param be address hold']
['xmlNewTextWriter_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['Create a new xmlNewTextWriter structure with @ * doc as output', 'create api structure as output']
['xmlNewTextWriterDoc_APIParam_2 is compress the output ?', 'param be compress output']
['xmlNewTextWriterDoc_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['Create a new xmlNewTextWriter structure with @uri as output', 'create api structure uri as output']
['xmlNewTextWriterFilename_APIParam_1 is the URI of the resource for the output', 'param be uri resource output']
['xmlNewTextWriterFilename_APIParam_2 is compress the output ?', 'param be compress output']
['xmlNewTextWriterFilename_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['Create a new xmlNewTextWriter structure with @buf as output TODO', 'create api structure as output']
['xmlNewTextWriterMemory_APIParam_1 is xmlBufferPtr', 'param be']
['This stamps all the element nodes with the document order Like for line information , the order is kept in the element - > content field , the value stored is actually - the node number to be able to differentiate from line numbers', 'element order like line information , order be keep element _ content field , value store be actually _ number be able differentiate line number']
['xmlNewTextWriterMemory_APIParam_2 is compress the output ?', 'param be compress output']
['xmlNewTextWriterMemory_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['Create a new xmlNewTextWriter structure with @ctxt as output NOTE', 'create api structure as output note']
['the @out parameter will be deallocated', 'param be deallocate']
['xmlNewTextWriterPushParser_APIParam_1 is xmlParserCtxtPtr to hold the new XML document tree', 'param be hold']
['xmlNewTextWriterPushParser_APIParam_2 is compress the output ?', 'param be compress output']
['xmlNewTextWriterPushParser_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['xmlNewTextWriterTree_APIParam_1 is xmlDocPtr', 'param be']
['xmlNewTextWriterTree_APIName returns the new xmlTextWriterPtr or NULL in case of error', 'api return null case error']
['xmlTextWriterEndAttribute_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['the @ctxt context will be freed with the resulting writer', 'context be free result']
['xmlTextWriterEndCDATA_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Create a new xmlNewTextWriter structure with @doc as output starting at @node', 'create api structure as output starting']
['xmlTextWriterEndComment_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlNewTextWriterTree_APIParam_2 is xmlNodePtr or NULL for doc - > children', 'param be null _']
['xmlNewTextWriterTree_APIParam_3 is compress the output ?', 'param be compress output']
['xmlTextWriterEndDTD_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['End the current xml element', 'end current element']
['xmlTextWriterEndAttribute_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndDTDAttlist_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['End an xml CDATA section', 'end section']
['xmlTextWriterEndCDATA_APIParam_1 is the xmlTextWriterPtr', 'param be']
['End the current xml coment', 'end current']
['xmlTextWriterEndDTD_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndComment_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndDTDAttlist_APIParam_1 is the xmlTextWriterPtr', 'param be']
['End an xml DTD attribute list', 'end attribute list']
['End an xml DTD element', 'end element']
['xmlTextWriterEndDTDElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndDTDElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterEndDTDEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndDTDEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['All open elements are closed , and the content is flushed to the output', 'open element be close , content be output']
['xmlTextWriterEndDocument_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndDocument_APIName returns the bytes written or -1 in case of error', 'api return byte write constant case error']
['End the current xml element', 'end current element']
['xmlTextWriterEndElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['End the current xml PI', 'end current']
['xmlTextWriterEndPI_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterEndPI_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Flush the output buffer', 'output buffer']
['xmlTextWriterFlush_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterFlush_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['End the current xml element', 'end current element']
['Writes an end tag', 'write end']
['xmlTextWriterFullEndElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterSetIndent_APIName returns -1 on error or 0 otherwise', 'api return constant error constant otherwise']
['xmlTextWriterSetIndentString_APIName returns -1 on error or 0 otherwise', 'api return constant error constant otherwise']
['xmlTextWriterFullEndElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['Set indentation output', 'set output']
['xmlTextWriterSetQuoteChar_APIName returns -1 on error or 0 otherwise', 'api return constant error constant otherwise']
['xmlTextWriterSetIndent_APIParam_2 = 0 do not indentation', 'param constant not']
['xmlTextWriterSetIndent_APIParam_2 > 0 do indentation', 'param constant']
['xmlTextWriterSetIndent_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartAttribute_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Set string indentation', 'set string']
['xmlTextWriterStartAttributeNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterSetQuoteChar_APIParam_2 is the quote character', 'param be character']
['Set the character used for quoting attributes', 'set character use quoting attribute']
['xmlTextWriterStartCDATA_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Start an xml attribute', 'start attribute']
['xmlTextWriterSetQuoteChar_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterSetIndentString_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartAttribute_APIParam_2 is element xmlTextWriterStartAttribute_APIParam_2', 'param be element param']
['xmlTextWriterStartComment_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterStartAttribute_APIParam_1 is the xmlTextWriterPtr', 'param be']
['Start an xml attribute with namespace support', 'start attribute support']
['xmlTextWriterStartAttributeNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterSetIndentString_APIParam_2 is the xmlChar string', 'param be string']
['xmlTextWriterStartAttributeNS_APIParam_3 is element local xmlTextWriterStartAttributeNS_APIParam_3', 'param be element local param']
['xmlTextWriterStartAttributeNS_APIParam_4 is namespace URI or NULL', 'param be uri null']
['xmlTextWriterStartAttributeNS_APIParam_2 is namespace xmlTextWriterStartAttributeNS_APIParam_2 or NULL', 'param be param null']
['xmlTextWriterStartDTD_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Start an xml CDATA section', 'start section']
['xmlTextWriterStartCDATA_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDTDAttlist_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterStartDTD_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDTD_APIParam_2 is the xmlTextWriterStartDTD_APIParam_2 of the DTD', 'param be param']
['xmlTextWriterStartComment_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDTDAttlist_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDTD_APIParam_4 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['Start an xml comment', 'start comment']
['xmlTextWriterStartDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterStartDTDAttlist_APIParam_2 is the xmlTextWriterStartDTDAttlist_APIParam_2 of the DTD ATTLIST', 'param be param']
['xmlTextWriterStartDTDElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['Start an xml DTD element', 'start element']
['xmlTextWriterStartDTDElement_APIParam_2 is the xmlTextWriterStartDTDElement_APIParam_2 of the DTD element', 'param be param element']
['xmlTextWriterStartDTDEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDTDElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterStartDTDEntity_APIParam_3 is the xmlTextWriterStartDTDEntity_APIParam_3 of the DTD ATTLIST', 'param be param']
['xmlTextWriterStartDTDEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterStartDocument_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartDocument_APIParam_2 is the xml xmlTextWriterStartDocument_APIParam_2 or NULL for default', 'param be param null default']
['xmlTextWriterStartDTDEntity_APIParam_2 is TRUE', 'param be constant']
['FALSE if not', 'constant if not']
['xmlTextWriterStartDocument_APIParam_3 is the xmlTextWriterStartDocument_APIParam_3 or NULL for default', 'param be param null default']
['xmlTextWriterStartDocument_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
["xmlTextWriterStartDocument_APIParam_4 is `` yes '' or `` no '' or NULL for default", 'param be yes no null default']
['Start an xml element', 'start element']
['xmlTextWriterStartElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartElement_APIParam_2 is element xmlTextWriterStartElement_APIParam_2', 'param be element param']
['xmlTextWriterStartElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Start an xml element with namespace support', 'start element support']
['xmlTextWriterStartElementNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartElementNS_APIParam_2 is namespace xmlTextWriterStartElementNS_APIParam_2 or NULL', 'param be param null']
['xmlTextWriterStartElementNS_APIParam_3 is element local xmlTextWriterStartElementNS_APIParam_3', 'param be element local param']
['xmlTextWriterStartElementNS_APIParam_4 is namespace URI or NULL', 'param be uri null']
['xmlTextWriterStartElementNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterStartPI_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterStartPI_APIParam_2 is PI xmlTextWriterStartPI_APIParam_2', 'param be param']
['xmlTextWriterStartPI_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml attribute', 'write attribute']
['xmlTextWriterWriteAttribute_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteAttribute_APIParam_2 is attribute xmlTextWriterWriteAttribute_APIParam_2', 'param be attribute param']
['xmlTextWriterWriteAttribute_APIParam_3 is attribute xmlTextWriterWriteAttribute_APIParam_3', 'param be attribute param']
['xmlTextWriterWriteAttribute_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml attribute', 'write attribute']
['xmlTextWriterWriteAttributeNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteAttributeNS_APIParam_2 is namespace xmlTextWriterWriteAttributeNS_APIParam_2', 'param be param']
['xmlTextWriterWriteAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteAttributeNS_APIParam_3', 'param be attribute local param']
['xmlTextWriterWriteAttributeNS_APIParam_4 is namespace URI', 'param be uri']
['xmlTextWriterWriteAttributeNS_APIParam_5 is attribute xmlTextWriterWriteAttributeNS_APIParam_5', 'param be attribute param']
['Write an base64 encoded xml text', 'write encode text']
['xmlTextWriterWriteAttributeNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteBase64_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteBase64_APIParam_2 is binary xmlTextWriterWriteBase64_APIParam_2', 'param be binary param']
['xmlTextWriterWriteBase64_APIParam_3 is the position within the xmlTextWriterWriteBase64_APIParam_2 of the first byte to encode', 'param be position within param first byte encode']
['xmlTextWriterWriteBase64_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteBase64_APIParam_4 is the number of bytes to encode', 'param be number byte encode']
['Write a BinHex encoded xml text', 'write encode text']
['xmlTextWriterWriteBinHex_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteBinHex_APIParam_2 is binary xmlTextWriterWriteBinHex_APIParam_2', 'param be binary param']
['xmlTextWriterWriteBinHex_APIParam_3 is the position within the xmlTextWriterWriteBinHex_APIParam_2 of the first byte to encode', 'param be position within param first byte encode']
['xmlTextWriterWriteBinHex_APIParam_4 is the number of bytes to encode', 'param be number byte encode']
['xmlTextWriterWriteBinHex_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteCDATA_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteCDATA_APIParam_2 is CDATA xmlTextWriterWriteCDATA_APIParam_2', 'param be param']
['xmlTextWriterWriteCDATA_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml comment', 'write comment']
['xmlTextWriterWriteComment_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteComment_APIParam_2 is comment string', 'param be comment string']
['xmlTextWriterWriteComment_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTD_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTD_APIParam_2 is the xmlTextWriterWriteDTD_APIParam_2 of the DTD', 'param be param']
['xmlTextWriterWriteDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteDTD_APIParam_4 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['xmlTextWriterWriteDTD_APIParam_5 is string content of the DTD', 'param be stre content']
['xmlTextWriterWriteDTD_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDAttlist_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDAttlist_APIParam_2 is the xmlTextWriterWriteDTDAttlist_APIParam_2 of the DTD ATTLIST', 'param be param']
['xmlTextWriterWriteDTDAttlist_APIParam_3 is xmlTextWriterWriteDTDAttlist_APIParam_3 of the ATTLIST', 'param be param']
['xmlTextWriterWriteDTDAttlist_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a DTD element', 'write element']
['xmlTextWriterWriteDTDElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDElement_APIParam_2 is the xmlTextWriterWriteDTDElement_APIParam_2 of the DTD element', 'param be param element']
['xmlTextWriterWriteDTDElement_APIParam_3 is xmlTextWriterWriteDTDElement_APIParam_3 of the element', 'param be param element']
['xmlTextWriterWriteDTDElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDEntity_APIParam_3 is the xmlTextWriterWriteDTDEntity_APIParam_3 of the DTD entity', 'param be param']
['xmlTextWriterWriteDTDEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteDTDEntity_APIParam_5 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['xmlTextWriterWriteDTDEntity_APIParam_2 is TRUE', 'param be constant']
['xmlTextWriterWriteDTDEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDEntity_APIParam_3', 'param be param']
['FALSE if not', 'constant if not']
['xmlTextWriterWriteDTDEntity_APIParam_7 is xmlTextWriterWriteDTDEntity_APIParam_7 of the entity', 'param be param']
['xmlTextWriterWriteDTDEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a DTD external entity', 'write external']
['The entity must have been started with xmlTextWriterStartDTDEntity', 'must have be start api']
['xmlTextWriterWriteDTDExternalEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDExternalEntity_APIParam_3 is the xmlTextWriterWriteDTDExternalEntity_APIParam_3 of the DTD entity', 'param be param']
['xmlTextWriterWriteDTDExternalEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteDTDExternalEntity_APIParam_5 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['xmlTextWriterWriteDTDExternalEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDExternalEntity_APIParam_3', 'param be param']
['xmlTextWriterWriteDTDExternalEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDExternalEntity_APIParam_2 is TRUE', 'param be constant']
['FALSE if not', 'constant if not']
['Write the contents of a DTD external entity', 'write content external']
['xmlTextWriterWriteDTDExternalEntityContents_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDExternalEntityContents_APIParam_2 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteDTDExternalEntityContents_APIParam_3 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['xmlTextWriterWriteDTDExternalEntityContents_APIParam_4 is the xml notation name', 'param be name']
['xmlTextWriterWriteDTDExternalEntityContents_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['Write a DTD internal entity', 'write internal']
['xmlTextWriterWriteDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteDTDInternalEntity_APIParam_3 of the DTD entity', 'param be param']
['xmlTextWriterWriteDTDInternalEntity_APIParam_4 is xmlTextWriterWriteDTDInternalEntity_APIParam_4 of the entity', 'param be param']
['xmlTextWriterWriteDTDInternalEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDNotation_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteDTDNotation_APIParam_2 is the xmlTextWriterWriteDTDNotation_APIParam_2 of the xml notation', 'param be param']
['xmlTextWriterWriteDTDInternalEntity_APIParam_2 is TRUE', 'param be constant']
['FALSE if not', 'constant if not']
['xmlTextWriterWriteDTDNotation_APIParam_3 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteDTDNotation_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteDTDNotation_APIParam_4 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['Write an xml element', 'write element']
['xmlTextWriterWriteElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteElement_APIParam_2 is element xmlTextWriterWriteElement_APIParam_2', 'param be element param']
['xmlTextWriterWriteElement_APIParam_3 is element xmlTextWriterWriteElement_APIParam_3', 'param be element param']
['xmlTextWriterWriteElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml element with namespace support', 'write element support']
['xmlTextWriterWriteElementNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteElementNS_APIParam_2 is namespace xmlTextWriterWriteElementNS_APIParam_2', 'param be param']
['xmlTextWriterWriteElementNS_APIParam_3 is element local xmlTextWriterWriteElementNS_APIParam_3', 'param be element local param']
['xmlTextWriterWriteElementNS_APIParam_4 is namespace URI', 'param be uri']
['xmlTextWriterWriteElementNS_APIParam_5 is element xmlTextWriterWriteElementNS_APIParam_5', 'param be element param']
['xmlTextWriterWriteElementNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatAttribute_APIParam_4 attribute', 'write format param attribute']
['xmlTextWriterWriteFormatAttribute_APIParam_1 is xmlTextWriterWriteFormatAttribute_APIParam_4 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteFormatAttribute_APIParam_2', 'param be attribute param']
['xmlTextWriterWriteFormatAttribute_APIName returns xmlTextWriterWriteFormatAttribute_APIParam_4 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWriteFormatAttribute_APIParam_3 is xmlTextWriterWriteFormatAttribute_APIParam_3 string xmlTextWriterWriteFormatAttribute_APIParam_4 extra parameters xmlTextWriterWriteFormatAttribute_APIParam_4 the xmlTextWriterWriteFormatAttribute_APIParam_3', 'param be param string param extra param']
['Write a formatted xmlTextWriterWriteFormatAttributeNS_APIParam_6 attribute.with namespace support', 'write formatted param support']
['xmlTextWriterWriteFormatAttributeNS_APIParam_1 is xmlTextWriterWriteFormatAttributeNS_APIParam_6 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_2', 'param be param']
['xmlTextWriterWriteFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteFormatAttributeNS_APIParam_3', 'param be attribute local param']
['xmlTextWriterWriteFormatAttributeNS_APIParam_4 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_6', 'param be param']
['xmlTextWriterWriteFormatAttributeNS_APIParam_5 is xmlTextWriterWriteFormatAttributeNS_APIParam_5 string xmlTextWriterWriteFormatAttributeNS_APIParam_6 extra parameters xmlTextWriterWriteFormatAttributeNS_APIParam_6 the xmlTextWriterWriteFormatAttributeNS_APIParam_5', 'param be param string param extra param']
['xmlTextWriterWriteFormatAttributeNS_APIName returns xmlTextWriterWriteFormatAttributeNS_APIParam_6 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatCDATA_APIParam_3 CDATA', 'write format param']
['xmlTextWriterWriteFormatCDATA_APIParam_1 is xmlTextWriterWriteFormatCDATA_APIParam_3 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatCDATA_APIParam_2 is xmlTextWriterWriteFormatCDATA_APIParam_2 string xmlTextWriterWriteFormatCDATA_APIParam_3 extra parameters xmlTextWriterWriteFormatCDATA_APIParam_3 the xmlTextWriterWriteFormatCDATA_APIParam_2', 'param be param string param extra param']
['xmlTextWriterWriteFormatCDATA_APIName returns xmlTextWriterWriteFormatCDATA_APIParam_3 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write an xmlTextWriterWriteFormatComment_APIParam_3 comment', 'write param comment']
['xmlTextWriterWriteFormatComment_APIParam_1 is xmlTextWriterWriteFormatComment_APIParam_3 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatComment_APIName returns xmlTextWriterWriteFormatComment_APIParam_3 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWriteFormatComment_APIParam_2 is xmlTextWriterWriteFormatComment_APIParam_2 string xmlTextWriterWriteFormatComment_APIParam_3 extra parameters xmlTextWriterWriteFormatComment_APIParam_3 the xmlTextWriterWriteFormatComment_APIParam_2', 'param be param string param extra param']
['Write a xmlTextWriterWriteFormatDTD_APIParam_6 with a formatted markup declarations part', 'write param format declaration part']
['xmlTextWriterWriteFormatDTD_APIParam_1 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatDTD_APIParam_2 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_2 of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6', 'param be param']
['xmlTextWriterWriteFormatDTD_APIParam_3 is xmlTextWriterWriteFormatDTD_APIParam_6 public identifier , which is an alternative to xmlTextWriterWriteFormatDTD_APIParam_6 system identifier', 'param be param identifier , which be alternative param system identifier']
['xmlTextWriterWriteFormatDTD_APIParam_4 is xmlTextWriterWriteFormatDTD_APIParam_6 system identifier , which is xmlTextWriterWriteFormatDTD_APIParam_6 URI of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6', 'param be param system identifi , which be param uri param']
['xmlTextWriterWriteFormatDTD_APIParam_5 is xmlTextWriterWriteFormatDTD_APIParam_5 string xmlTextWriterWriteFormatDTD_APIParam_6 extra parameters xmlTextWriterWriteFormatDTD_APIParam_6 the xmlTextWriterWriteFormatDTD_APIParam_5', 'param be param string param extra param']
['Write a formatted xmlTextWriterWriteFormatDTDAttlist_APIParam_4 ATTLIST', 'write format param']
['xmlTextWriterWriteFormatDTD_APIName returns xmlTextWriterWriteFormatDTD_APIParam_6 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWriteFormatDTDAttlist_APIParam_1 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatDTDAttlist_APIParam_2 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterWriteFormatDTDAttlist_APIParam_2 of xmlTextWriterWriteFormatDTDAttlist_APIParam_4 DTD ATTLIST', 'param be param']
['xmlTextWriterWriteFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteFormatDTDAttlist_APIParam_3 string xmlTextWriterWriteFormatDTDAttlist_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDAttlist_APIParam_4 the xmlTextWriterWriteFormatDTDAttlist_APIParam_3', 'param be param string param extra param']
['xmlTextWriterWriteFormatDTDAttlist_APIName returns xmlTextWriterWriteFormatDTDAttlist_APIParam_4 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatDTDElement_APIParam_4 element', 'write formatted param element']
['xmlTextWriterWriteFormatDTDElement_APIParam_1 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatDTDElement_APIParam_2 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterWriteFormatDTDElement_APIParam_2 of xmlTextWriterWriteFormatDTDElement_APIParam_4 DTD element', 'param be param element']
['xmlTextWriterWriteFormatDTDElement_APIParam_3 is xmlTextWriterWriteFormatDTDElement_APIParam_3 string xmlTextWriterWriteFormatDTDElement_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDElement_APIParam_4 the xmlTextWriterWriteFormatDTDElement_APIParam_3', 'param be param string param extra param']
['xmlTextWriterWriteFormatDTDElement_APIName returns xmlTextWriterWriteFormatDTDElement_APIParam_4 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 internal entity', 'write format param internal']
['xmlTextWriterWriteFormatDTDInternalEntity_APIParam_1 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 of xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 DTD entity', 'param be param']
['xmlTextWriterWriteFormatDTDInternalEntity_APIName returns xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 string xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 extra parameters xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 the xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4', 'param be param string param extra param']
['xmlTextWriterWriteFormatElement_APIParam_1 is xmlTextWriterWriteFormatElement_APIParam_4 xmlTextWriterPtr', 'param be param']
['Write a formatted xmlTextWriterWriteFormatElement_APIParam_4 element', 'write formatted param element']
['xmlTextWriterWriteFormatDTDInternalEntity_APIParam_2 is TRUE', 'param be constant']
['xmlTextWriterWriteFormatElement_APIParam_2 is element xmlTextWriterWriteFormatElement_APIParam_2', 'param be element param']
['xmlTextWriterWriteFormatElement_APIName returns xmlTextWriterWriteFormatElement_APIParam_4 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWriteFormatElement_APIParam_3 is xmlTextWriterWriteFormatElement_APIParam_3 string xmlTextWriterWriteFormatElement_APIParam_4 extra parameters xmlTextWriterWriteFormatElement_APIParam_4 the xmlTextWriterWriteFormatElement_APIParam_3', 'param be param string param extra param']
['Write a formatted xmlTextWriterWriteFormatElementNS_APIParam_6 element with namespace support', 'write formatted param element support']
['xmlTextWriterWriteFormatElementNS_APIParam_1 is xmlTextWriterWriteFormatElementNS_APIParam_6 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteFormatElementNS_APIParam_2', 'param be param']
['xmlTextWriterWriteFormatElementNS_APIParam_3 is element local xmlTextWriterWriteFormatElementNS_APIParam_3', 'param be element local param']
['xmlTextWriterWriteFormatElementNS_APIParam_4 is namespace xmlTextWriterWriteFormatElementNS_APIParam_6', 'param be param']
['xmlTextWriterWriteFormatElementNS_APIParam_5 is xmlTextWriterWriteFormatElementNS_APIParam_5 string xmlTextWriterWriteFormatElementNS_APIParam_6 extra parameters xmlTextWriterWriteFormatElementNS_APIParam_6 the xmlTextWriterWriteFormatElementNS_APIParam_5', 'param be param string param extra param']
['xmlTextWriterWriteFormatElementNS_APIName returns xmlTextWriterWriteFormatElementNS_APIParam_6 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterWriteFormatPI_APIParam_1 is xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterPtr', 'write formatted param be param']
['xmlTextWriterWriteFormatPI_APIParam_2 is PI xmlTextWriterWriteFormatPI_APIParam_2', 'param be param']
['xmlTextWriterWriteFormatPI_APIParam_3 is xmlTextWriterWriteFormatPI_APIParam_3 string xmlTextWriterWriteFormatPI_APIParam_4 extra parameters xmlTextWriterWriteFormatPI_APIParam_4 the xmlTextWriterWriteFormatPI_APIParam_3', 'param be param string param extra param']
['xmlTextWriterWriteFormatPI_APIName returns xmlTextWriterWriteFormatPI_APIParam_4 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatRaw_APIParam_3 xml text', 'write format param text']
['xmlTextWriterWriteFormatRaw_APIParam_1 is xmlTextWriterWriteFormatRaw_APIParam_3 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatRaw_APIParam_2 is xmlTextWriterWriteFormatRaw_APIParam_2 string xmlTextWriterWriteFormatRaw_APIParam_3 extra parameters xmlTextWriterWriteFormatRaw_APIParam_3 the xmlTextWriterWriteFormatRaw_APIParam_2', 'param be param string param extra param']
['xmlTextWriterWriteFormatRaw_APIName returns xmlTextWriterWriteFormatRaw_APIParam_3 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['Write a formatted xmlTextWriterWriteFormatString_APIParam_3 text', 'write format param text']
['xmlTextWriterWriteFormatString_APIParam_1 is xmlTextWriterWriteFormatString_APIParam_3 xmlTextWriterPtr', 'param be param']
['xmlTextWriterWriteFormatString_APIParam_2 is xmlTextWriterWriteFormatString_APIParam_2 string xmlTextWriterWriteFormatString_APIParam_3 extra parameters xmlTextWriterWriteFormatString_APIParam_3 the xmlTextWriterWriteFormatString_APIParam_2', 'param be param string param extra param']
['xmlTextWriterWriteFormatString_APIName returns xmlTextWriterWriteFormatString_APIParam_3 bytes written  or -1 in case of error', 'api return param byte write constant case error']
['xmlTextWriterWritePI_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWritePI_APIParam_2 is PI xmlTextWriterWritePI_APIParam_2', 'param be param']
['xmlTextWriterWritePI_APIParam_3 is PI xmlTextWriterWritePI_APIParam_3', 'param be param']
['xmlTextWriterWritePI_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a raw xml text', 'write raw text']
['xmlTextWriterWriteRaw_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteRaw_APIParam_2 is text string', 'param be text string']
['xmlTextWriterWriteRaw_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml text', 'write text']
['what about entities and special chars ??', 'special char']
['xmlTextWriterWriteRawLen_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteRawLen_APIParam_2 is text string', 'param be text string']
['xmlTextWriterWriteRawLen_APIParam_3 is length of the text string', 'param be length text string']
['xmlTextWriterWriteRawLen_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml text', 'write text']
['xmlTextWriterWriteString_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteString_APIParam_2 is text string', 'param be text string']
['xmlTextWriterWriteString_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a formatted xml attribute', 'write format attribute']
['xmlTextWriterWriteVFormatAttribute_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteVFormatAttribute_APIParam_2', 'param be attribute param']
['xmlTextWriterWriteVFormatAttribute_APIParam_3 is xmlTextWriterWriteVFormatAttribute_APIParam_3 string', 'param be param string']
['xmlTextWriterWriteVFormatAttribute_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatAttribute_APIParam_4 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml attribute.with namespace support', 'write format param support']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteVFormatAttributeNS_APIParam_2', 'param be param']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteVFormatAttributeNS_APIParam_3', 'param be attribute local param']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_4 is namespace URI', 'param be uri']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_5 is xmlTextWriterWriteVFormatAttributeNS_APIParam_5 string', 'param be param string']
['xmlTextWriterWriteVFormatAttributeNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatAttributeNS_APIParam_6 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml CDATA', 'write format']
['xmlTextWriterWriteVFormatCDATA_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatCDATA_APIParam_2 is xmlTextWriterWriteVFormatCDATA_APIParam_2 string', 'param be param string']
['xmlTextWriterWriteVFormatCDATA_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write an xml comment', 'write comment']
['xmlTextWriterWriteVFormatCDATA_APIParam_3 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['xmlTextWriterWriteVFormatComment_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatComment_APIParam_2 is xmlTextWriterWriteVFormatComment_APIParam_2 string', 'param be param string']
['xmlTextWriterWriteVFormatComment_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatComment_APIParam_3 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['xmlTextWriterWriteVFormatDTD_APIParam_1 is the xmlTextWriterPtr', 'param be']
['Write a DTD with a formatted markup declarations part', 'write format declaration part']
['xmlTextWriterWriteVFormatDTD_APIParam_2 is the xmlTextWriterWriteVFormatDTD_APIParam_2 of the DTD', 'param be param']
['xmlTextWriterWriteVFormatDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier', 'param be identifi , which be alternative system identifier']
['xmlTextWriterWriteVFormatDTD_APIParam_4 is the system identifier , which is the URI of the DTD', 'param be system identifi , which be uri']
['xmlTextWriterWriteVFormatDTD_APIParam_5 is xmlTextWriterWriteVFormatDTD_APIParam_5 string', 'param be param string']
['xmlTextWriterWriteVFormatDTD_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatDTD_APIParam_6 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted DTD ATTLIST', 'write format']
['xmlTextWriterWriteVFormatDTDAttlist_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 is the xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 of the DTD ATTLIST', 'param be param']
['xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 string', 'param be param string']
['xmlTextWriterWriteVFormatDTDAttlist_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['Write a formatted DTD element', 'write format element']
['xmlTextWriterWriteVFormatDTDAttlist_APIParam_4 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['xmlTextWriterWriteVFormatDTDElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatDTDElement_APIParam_2 is the xmlTextWriterWriteVFormatDTDElement_APIParam_2 of the DTD element', 'param be param element']
['xmlTextWriterWriteVFormatDTDElement_APIParam_3 is xmlTextWriterWriteVFormatDTDElement_APIParam_3 string', 'param be param string']
['xmlTextWriterWriteVFormatDTDElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatDTDElement_APIParam_4 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted DTD internal entity', 'write format internal']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 of the DTD entity', 'param be param']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 string', 'param be param string']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_5 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml element', 'write format element']
['xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_2 is TRUE', 'param be constant']
['FALSE if not', 'constant if not']
['xmlTextWriterWriteVFormatElement_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatElement_APIParam_2 is element xmlTextWriterWriteVFormatElement_APIParam_2', 'param be element param']
['xmlTextWriterWriteVFormatElement_APIParam_3 is xmlTextWriterWriteVFormatElement_APIParam_3 string', 'param be param string']
['xmlTextWriterWriteVFormatElement_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatElement_APIParam_4 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml element with namespace support', 'write format element support']
['xmlTextWriterWriteVFormatElementNS_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteVFormatElementNS_APIParam_2', 'param be param']
['xmlTextWriterWriteVFormatElementNS_APIParam_3 is element local xmlTextWriterWriteVFormatElementNS_APIParam_3', 'param be element local param']
['xmlTextWriterWriteVFormatElementNS_APIParam_4 is namespace URI', 'param be uri']
['xmlTextWriterWriteVFormatElementNS_APIParam_5 is xmlTextWriterWriteVFormatElementNS_APIParam_5 string', 'param be param string']
['xmlTextWriterWriteVFormatElementNS_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatElementNS_APIParam_6 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml PI', 'write format']
['xmlTextWriterWriteVFormatPI_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatPI_APIParam_2 is PI xmlTextWriterWriteVFormatPI_APIParam_2', 'param be param']
['xmlTextWriterWriteVFormatPI_APIParam_3 is xmlTextWriterWriteVFormatPI_APIParam_3 string', 'param be param string']
['xmlTextWriterWriteVFormatPI_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatPI_APIParam_4 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted raw xml text', 'write format raw text']
['xmlTextWriterWriteVFormatRaw_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatRaw_APIParam_2 is xmlTextWriterWriteVFormatRaw_APIParam_2 string', 'param be param string']
['xmlTextWriterWriteVFormatRaw_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatRaw_APIParam_3 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Write a formatted xml text', 'write format text']
['xmlTextWriterWriteVFormatString_APIParam_1 is the xmlTextWriterPtr', 'param be']
['xmlTextWriterWriteVFormatString_APIParam_2 is xmlTextWriterWriteVFormatString_APIParam_2 string', 'param be param string']
['xmlTextWriterWriteVFormatString_APIName returns the bytes written  or -1 in case of error', 'api return byte write constant case error']
['xmlTextWriterWriteVFormatString_APIParam_3 is pointer to the first member of the variable argument list', 'param be pointer first member variable param list']
['Does a binary search of the range table to determine if char is valid', 'do binary search range table determine']
['xmlCharInRange_APIParam_1 is character to be validated', 'param be character be validate']
['xmlCharInRange_APIParam_2 is pointer to range to be used to validate', 'param be pointer range be use validate']
['xmlCharInRange_APIName returns true if character valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsBaseChar_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsBaseChar_ch or xmlIsBaseCharQ instead', 'use param instead']
['xmlIsBaseChar_APIParam_1 is character to validate', 'param be character validate']
['xmlIsBaseChar_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsBlank_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsBlank_ch or xmlIsBlankQ instead', 'use param instead']
['xmlIsBlank_APIParam_1 is character to validate', 'param be character validate']
['xmlIsBlank_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsChar_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsChar_ch or xmlIsCharQ instead', 'use param instead']
['xmlIsChar_APIParam_1 is character to validate', 'param be character validate']
['xmlIsChar_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsCombining_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsCombiningQ instead', 'use instead']
['xmlIsCombining_APIParam_1 is character to validate', 'param be character validate']
['xmlIsCombining_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsDigit_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsDigit_ch or xmlIsDigitQ instead', 'use param instead']
['xmlIsDigit_APIParam_1 is character to validate', 'param be character validate']
['xmlIsDigit_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsExtender_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsExtender_ch or xmlIsExtenderQ instead', 'use param instead']
['xmlIsExtender_APIParam_1 is character to validate', 'param be character validate']
['xmlIsExtender_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['xmlIsIdeographic_APIName is DEPRECATED', 'api be deprecate']
['Use xmlIsIdeographicQ instead', 'use instead']
['xmlIsIdeographic_APIParam_1 is character to validate', 'param be character validate']
['xmlIsIdeographic_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['This function is DEPRECATED', 'function be deprecate']
['Use xmlIsPubidChar_ch or xmlIsPubidCharQ instead', 'use param instead']
['xmlIsPubidChar_APIParam_1 is character to validate', 'param be character validate']
['xmlIsPubidChar_APIName returns true if argument valid, false otherwise', 'api return constant  valid , constant otherwise']
['Close a document saving context , i.e', 'close saving context']
['make sure that all bytes have been output and free the associated data', 'make sure byte have be output free associated datum']
['xmlSaveClose_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveClose_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['xmlSaveDoc_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveDoc_APIParam_2 is a document', 'param be']
['xmlSaveDoc_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['Flush a document saving context , i.e', 'saving context']
['Save a full document to a saving context TODO', 'full saving context']
['make sure that all bytes have been output', 'make sure byte have be output']
['The function is not fully implemented yet as The function does not return the byte count but 0 instead', 'function be not fully implement yet as function do not return byte count but constant instead']
['xmlSaveFlush_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveFlush_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['Set a custom escaping function to be used for text in attribute content', 'set custom escape function be use text attribute content']
['xmlSaveSetAttrEscape_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveSetAttrEscape_APIParam_2 is the escaping function', 'param be escape function']
['xmlSaveSetAttrEscape_APIName returns 0 if successful or -1 in case of error', 'api return constant if successful constant case error']
['Set a custom escaping function to be used for text in element content', 'set custom escape function be use text element content']
['xmlSaveSetEscape_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveSetEscape_APIParam_2 is the escaping function', 'param be escape function']
['xmlSaveSetEscape_APIName returns 0 if successful or -1 in case of error', 'api return constant if successful constant case error']
['xmlSaveToBuffer_APIParam_1 is a xmlSaveToBuffer_APIParam_1', 'param be param']
['Create a document saving context serializing to a xmlSaveToBuffer_APIParam_1 with the xmlSaveToBuffer_APIParam_2 and the xmlSaveToBuffer_APIParam_3 given', 'create saving context serialize param give']
['xmlSaveToBuffer_APIParam_2 is the xmlSaveToBuffer_APIParam_2 name to use or NULL', 'param be param name use null']
['xmlSaveToBuffer_APIParam_3 is a set of xmlSaveOptions', 'param be set']
['xmlSaveToBuffer_APIName returns a new serialization context or NULL in case of error', 'api return serialization context null case error']
['xmlSaveToFd_APIParam_1 is a file descriptor number', 'param be file descriptor number']
['xmlSaveToFd_APIParam_2 is the xmlSaveToFd_APIParam_2 name to use or NULL', 'param be param name use null']
['Create a document saving context serializing to a file descriptor with the xmlSaveToFd_APIParam_2 and the xmlSaveToFd_APIParam_3 given', 'create saving context serialize file descriptor param give']
['xmlSaveToFd_APIParam_3 is a set of xmlSaveOptions', 'param be set']
['xmlSaveToFd_APIName returns a new serialization context or NULL in case of error', 'api return serialization context null case error']
['xmlSaveToFilename_APIParam_1 is a file name or an URL', 'param be file name']
['xmlSaveToFilename_APIParam_2 is the xmlSaveToFilename_APIParam_2 name to use or NULL', 'param be param name use null']
['Create a document saving context serializing to a xmlSaveToFilename_APIParam_1 or possibly to an URL with the xmlSaveToFilename_APIParam_2 and the xmlSaveToFilename_APIParam_3 given', 'create saving context serialize param possibly param give']
['xmlSaveToFilename_APIParam_3 is a set of xmlSaveOptions', 'param be set']
['xmlSaveToFilename_APIName returns a new serialization context or NULL in case of error', 'api return serialization context null case error']
['xmlSaveToIO_APIParam_1 is an I/O write function', 'param be write function']
['xmlSaveToIO_APIParam_2 is an I/O close function', 'param be close function']
['xmlSaveToIO_APIParam_3 is an I/O handler', 'param be handler']
['Create a document saving context serializing to a file descriptor with the xmlSaveToIO_APIParam_4 and the xmlSaveToIO_APIParam_5 given', 'create saving context serialize file descriptor param give']
['xmlSaveToIO_APIParam_4 is the xmlSaveToIO_APIParam_4 name to use or NULL', 'param be param name use null']
['xmlSaveToIO_APIParam_5 is a set of xmlSaveOptions', 'param be set']
['xmlSaveToIO_APIName returns a new serialization context or NULL in case of error', 'api return serialization context null case error']
['xmlSaveTree_APIParam_1 is a document saving context', 'param be saving context']
['xmlSaveTree_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['xmlSaveTree_APIParam_2 is the top xmlSaveTree_APIParam_2 of the subtree to save', 'param be param']
['Save a subtree starting at the xmlSaveTree_APIParam_2 parameter to a saving context TODO', 'start param saving context']
['xmlAddDocEntity_APIParam_1 is the document', 'param be']
['The function is not fully implemented yet as it does not return the byte count but 0 instead', 'function be not fully implement yet as do not return byte count but constant instead']
['xmlAddDocEntity_APIParam_3 is the entity xmlAddDocEntity_APIParam_3 XML_xxx_yyy_ENTITY', 'param be param api']
['xmlAddDocEntity_APIParam_2 is the entity xmlAddDocEntity_APIParam_2', 'param be param']
['xmlAddDocEntity_APIParam_6 is the entity xmlAddDocEntity_APIParam_6', 'param be param']
['xmlAddDocEntity_APIName returns a pointer to the entity or NULL in case of error', 'api return pointer null case error']
['Register a new entity for this document DTD external subset', 'register external']
['xmlAddDtdEntity_APIParam_1 is the document', 'param be']
['xmlAddDtdEntity_APIParam_2 is the entity xmlAddDtdEntity_APIParam_2', 'param be param']
['xmlAddDocEntity_APIParam_5 is the entity system ID', 'param be system -PRON- would']
['xmlAddDocEntity_APIParam_4 is the entity external ID', 'param be external -PRON- would']
['xmlAddDtdEntity_APIParam_3 is the entity xmlAddDtdEntity_APIParam_3 XML_xxx_yyy_ENTITY', 'param be param api']
['xmlAddDtdEntity_APIParam_6 is the entity xmlAddDtdEntity_APIParam_6', 'param be param']
['xmlAddDtdEntity_APIName returns a pointer to the entity or NULL in case of error', 'api return pointer null case error']
['Cleanup up the predefined entities table', 'cleanup predefined table']
['xmlAddDtdEntity_APIParam_4 is the entity external ID', 'param be external -PRON- would']
['Deprecated call', 'deprecate call']
['xmlAddDtdEntity_APIParam_5 is the entity system ID', 'param be system -PRON- would']
['xmlCopyEntitiesTable_APIParam_1 is An entity xmlCopyEntitiesTable_APIParam_1', 'param be param']
['Build a copy of an entity xmlCopyEntitiesTable_APIParam_1', 'build copy param']
['xmlCopyEntitiesTable_APIName returns the new xmlEntitiesTablePtr or NULL in case of error', 'api return null case error']
['create and initialize an empty entities hash table', 'create initialize empty hash table']
['This really does not make sense and should be deprecated', 'really do not make sense should be deprecate']
['This will dump the content of the entity xmlDumpEntitiesTable_APIParam_2 as an XML DTD definition', 'content param as definition']
['xmlCreateEntitiesTable_APIName returns the xmlEntitiesTablePtr just created or NULL in case of error', 'api return create null case error']
['xmlDumpEntitiesTable_APIParam_1 is An XML buffer', 'param be buffer']
['xmlDumpEntitiesTable_APIParam_2 is An entity table', 'param be table']
['xmlDumpEntityDecl_APIParam_1 is An XML buffer', 'param be buffer']
['This will dump the content of the entity table as an XML DTD definition', 'content table as definition']
['xmlDumpEntityDecl_APIParam_2 is An entity table', 'param be table']
['xmlEncodeEntities_APIParam_1 is the document containing the string', 'param be contain string']
['remove xmlEncodeEntities , once we are not afraid of breaking binary compatibility People must migrate their code to xmlEncodeEntitiesReentrant !', 'remove api , be not afraid break binary compatibility must migrate code api']
['xmlEncodeEntities_APIParam_2 is A string to convert to XML', 'param be stre convert']
['xmlEncodeEntities_APIName returns NULL', 'api return null']
['This routine will issue a warning', 'api issue warning']
['Contrary to xmlEncodeEntities , this routine is reentrant , and result must be deallocated', 'api be reentrant , result must be deallocate']
['xmlEncodeEntitiesReentrant_APIParam_1 is the document containing the string', 'param be contain string']
['xmlEncodeEntitiesReentrant_APIParam_2 is A string to convert to XML', 'param be stre convert']
['xmlEncodeEntitiesReentrant_APIName returns A newly allocated string with the substitution done', 'api return newly string do']
['Do a global encoding of a string , replacing the predefined entities and non ASCII values with their entities and CharRef counterparts', 'global encoding string , replace predefined non ascii value']
['xmlEncodeSpecialChars_APIParam_1 is the document containing the string', 'param be contain string']
['xmlEncodeSpecialChars_APIParam_2 is A string to convert to XML', 'param be stre convert']
['xmlEncodeSpecialChars_APIName returns A newly allocated string with the substitution done', 'api return newly string do']
['Deallocate the memory used by an entities hash xmlFreeEntitiesTable_APIParam_1', 'deallocate memory use by hash param']
['Do a global encoding of a string , replacing the predefined entities this routine is reentrant , and result must be deallocated', 'global encoding string , replace predefined api be reentrant , result must be deallocate']
['xmlFreeEntitiesTable_APIParam_1 is An entity table', 'param be table']
['Do an entity lookup in the document entity hash table and', 'lookup hash table']
['xmlGetDocEntity_APIParam_1 is the document referencing the entity', 'param be reference']
['xmlGetDocEntity_APIParam_2 is the entity xmlGetDocEntity_APIParam_2', 'param be param']
['xmlGetDocEntity_APIName returns the corresponding entity, otherwise a lookup is done in the predefined entities too', 'api return correspond , otherwise lookup be do predefined']
['xmlGetDocEntity returns A pointer to the entity structure or NULL if not found', 'api return pointer structure null if not find']
['xmlGetDtdEntity_APIParam_1 is the document referencing the entity', 'param be reference']
['xmlGetDtdEntity_APIParam_2 is the entity xmlGetDtdEntity_APIParam_2', 'param be param']
['Do an entity lookup in the DTD entity hash table and', 'lookup hash table']
['xmlGetDtdEntity returns A pointer to the entity structure or NULL if not found', 'api return pointer structure null if not find']
['xmlGetDtdEntity_APIName returns the corresponding entity, if found', 'api return correspond']
['Note the first argument is the document node , not the DTD node', 'note first param be , not']
['Do an entity lookup in the internal and external subsets and', 'lookup internal external']
['xmlGetParameterEntity_APIParam_1 is the document referencing the entity', 'param be reference']
['xmlGetParameterEntity_APIParam_2 is the entity xmlGetParameterEntity_APIParam_2', 'param be param']
['xmlGetParameterEntity_APIName returns the corresponding parameter entity, if found', 'api return correspond param']
['xmlGetParameterEntity returns A pointer to the entity structure or NULL if not found', 'api return pointer structure null if not find']
['xmlGetPredefinedEntity_APIParam_1 is the entity xmlGetPredefinedEntity_APIParam_1', 'param be param']
['Check whether this xmlGetPredefinedEntity_APIParam_1 is an predefined entity', 'check whether param be predefine']
['Set up the predefined entities', 'set predefined']
['xmlGetPredefinedEntity_APIName returns NULL if not, otherwise the entity', 'api return null if not , otherwise']
['Deprecated call', 'deprecate call']
['xmlNewEntity_APIParam_1 is the document', 'param be']
['xmlNewEntity_APIParam_2 is the entity xmlNewEntity_APIParam_2', 'param be param']
['xmlNewEntity_APIParam_3 is the entity xmlNewEntity_APIParam_3 XML_xxx_yyy_ENTITY', 'param be param api']
['xmlNewEntity_APIParam_6 is the entity xmlNewEntity_APIParam_6', 'param be param']
['xmlNewEntity_APIName returns a pointer to the entity or NULL in case of error', 'api return pointer null case error']
['xmlNewEntity_APIParam_4 is the entity external ID', 'param be external -PRON- would']
['xmlNewEntity_APIParam_5 is the entity system ID', 'param be system -PRON- would']
['Build a node list tree copy of the XPointer result', 'build list copy result']
['This will drop Attributes and Namespace declarations', 'attribute declaration']
['xmlXPtrBuildNodeList_APIParam_1 is the XPointer result from the evaluation', 'param be result']
['xmlXPtrBuildNodeList_APIName returns an xmlNodePtr list or NULL', 'api return list null']
['the caller has to free the node tree', 'caller have free']
['Evaluate the XPath Location Path in the given context', 'evaluate location path give context']
['xmlXPtrEval_APIParam_1 is the XPointer expression', 'param be']
['xmlXPtrEval_APIParam_2 is the XPointer context', 'param be context']
['xmlXPtrEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL', 'api return result null']
['the caller has to free the object', 'caller have free object']
['xmlXPtrEvalRangePredicate_APIParam_1 is the XPointer Parser context', 'param be parser context']
['Create a new entity, this differs from xmlAddDocEntity_APIName that if the document is NULL or has no internal subset defined, an unlinked entity structure will be returned, it is the responsability of the caller to link it to the document later or free it when not needed anymore', 'create , differ api  , be caller link later free not need anymore']
['xmlXPtrFreeLocationSet_APIParam_1 is the xmlLocationSetPtr to free', 'param be free']
['= Expr Evaluate a predicate as in xmlXPathEvalPredicate_APIName but for a Location Set instead of a node set', 'evaluate as api but location set instead set']
['xmlXPtrLocationSetAdd_APIParam_1 is the initial range set', 'param be initial range set']
['xmlXPtrLocationSetAdd_APIParam_2 is a new xmlXPathObjectPtr', 'param be']
['Create a new xmlLocationSetPtr of type double and of value @val', 'create type double value']
['xmlXPtrLocationSetCreate_APIParam_1 is an initial xmlXPathObjectPtr , or NULL', 'param be initial , null']
['xmlXPtrLocationSetCreate_APIName returns the newly created object', 'api return newly create object']
['is freed', 'be free']
['xmlXPtrLocationSetDel_APIParam_1 is the initial range set', 'param be initial range set']
['xmlXPtrLocationSetDel_APIParam_2 is an xmlXPathObjectPtr', 'param be']
['Merges two rangesets , all ranges from @val2 are added to @val1', 'merge two , range be constant']
['xmlXPtrLocationSetMerge_APIParam_1 is the first LocationSet', 'param be first']
['xmlXPtrLocationSetMerge_APIParam_2 is the second LocationSet', 'param be second']
['xmlXPtrLocationSetMerge_APIName returns xmlXPtrLocationSetMerge_APIParam_1 once extended or NULL in case of error', 'api return param extend null case error']
['Removes an entry from an existing LocationSet list', 'remove entry list']
['xmlXPtrLocationSetRemove_APIParam_1 is the initial range set', 'param be initial range set']
['xmlXPtrLocationSetRemove_APIParam_2 is the index to remove', 'param be index remove']
['Create a new xmlXPathObjectPtr of type range using a single nodes', 'create type range use single']
['xmlXPtrNewCollapsedRange_APIParam_1 is the starting and ending node', 'param be start end']
['xmlXPtrNewCollapsedRange_APIName returns the newly created object', 'api return newly create object']
['Create a new XPointer context', 'create context']
['xmlXPtrNewContext_APIParam_1 is the XML document', 'param be']
['xmlXPtrNewContext_APIName returns the xmlXPathContext just allocated', 'api return']
['xmlXPtrNewContext_APIParam_2 is the node that directly contains the XPointer being evaluated or NULL', 'param be directly contain evaluate null']
['xmlXPtrNewLocationSetNodeSet_APIParam_1 is a node xmlXPtrNewLocationSetNodeSet_APIParam_1', 'param be param']
['xmlXPtrNewContext_APIParam_3 is the element from which a user or program initiated traversal of the link , or NULL', 'param be element which user program link , null']
['xmlXPtrNewLocationSetNodeSet_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type LocationSet and initialize it with all the nodes from @set', 'create type initialize set']
['xmlXPtrNewLocationSetNodes_APIParam_1 is the xmlXPtrNewLocationSetNodes_APIParam_1 NodePtr value', 'param be param value']
['xmlXPtrNewLocationSetNodes_APIParam_2 is the xmlXPtrNewLocationSetNodes_APIParam_2 NodePtr value or NULL', 'param be param value null']
['xmlXPtrNewLocationSetNodes_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type LocationSet and initialize it with the single range made of the two nodes @start and @end', 'create type initialize single range make two start end']
['Create a new xmlXPathObjectPtr of type range', 'create type range']
['xmlXPtrNewRange_APIParam_1 is the starting node', 'param be start']
['xmlXPtrNewRange_APIParam_2 is the xmlXPtrNewRange_APIParam_1 index', 'param be param index']
['xmlXPtrNewRange_APIParam_3 is the ending point', 'param be end point']
['xmlXPtrNewRange_APIParam_4 is the ending index', 'param be end index']
['xmlXPtrNewRange_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type range from a not to an object', 'create type range not object']
['xmlXPtrNewRangeNodeObject_APIParam_1 is the starting node', 'param be start']
['xmlXPtrNewRangeNodeObject_APIParam_2 is the ending object', 'param be end object']
['xmlXPtrNewRangeNodeObject_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type range from a node to a point', 'create type range point']
['xmlXPtrNewRangeNodePoint_APIParam_1 is the starting node', 'param be start']
['xmlXPtrNewRangeNodePoint_APIParam_2 is the ending point', 'param be end point']
['xmlXPtrNewRangeNodePoint_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type range using 2 nodes', 'create type range use constant']
['xmlXPtrNewRangeNodes_APIParam_1 is the starting node', 'param be start']
['xmlXPtrNewRangeNodes_APIParam_2 is the ending node', 'param be end']
['xmlXPtrNewRangeNodes_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type range using 2 Points', 'create type range use constant point']
['xmlXPtrNewRangePointNode_APIParam_2 is the ending node', 'param be end']
['xmlXPtrNewRangePoints_APIParam_1 is the starting point', 'param be start point']
['xmlXPtrNewRangePoints_APIParam_2 is the ending point', 'param be end point']
['Create a new xmlXPathObjectPtr of type range from a point to a node', 'create type range point']
['xmlXPtrNewRangePoints_APIName returns the newly created object', 'api return newly create object']
['xmlXPtrNewRangePointNode_APIName returns the newly created object', 'api return newly create object']
['xmlXPtrNewRangePointNode_APIParam_1 is the starting point', 'param be start point']
['xmlXPtrWrapLocationSet_APIParam_1 is the LocationSet value', 'param be value']
['xmlXPtrRangeToFunction_APIParam_1 is the XPointer Parser context', 'param be parser context']
['Implement the range-to_APIName XPointer function Obsolete', 'implement api function obsolete']
['xmlXPtrRangeToFunction_APIParam_2 is the number of args', 'param be number arg']
['range-to is not a real function but a special type of location step which is handled in xpath.c', 'param be not real function but special type location step which be']
['xmlXPtrWrapLocationSet_APIName returns the newly created object', 'api return newly create object']
['Expresses the xmlBuildRelativeURI_APIParam_1 of the reference in terms relative to the xmlBuildRelativeURI_APIParam_2', 'express param reference term relative param']
['xmlBuildRelativeURI_APIParam_1 is the xmlBuildRelativeURI_APIParam_1 reference under consideration', 'param be param reference']
['xmlBuildRelativeURI_APIParam_2 is the xmlBuildRelativeURI_APIParam_2 value', 'param be param value']
['xmlBuildRelativeURI_APIName returns a new xmlBuildRelativeURI_APIParam_1 string  or NULL in case error', 'api return param string null case error']
['This is processed according to section 5.2 of the RFC 2396 5.2', 'be process accord section constant rfc constant']
['Resolving Relative References to Absolute Form', 'resolve relative reference absolute form']
['xmlBuildURI_APIParam_1 is the xmlBuildURI_APIParam_1 instance found in the document', 'param be param instance find']
['xmlBuildURI_APIParam_2 is the xmlBuildURI_APIParam_2 value', 'param be param value']
['Some examples of this operation include', 'example operation include']
['Computes he final xmlBuildURI_APIParam_1 of the reference done by checking that the given xmlBuildURI_APIParam_1 is valid , and building the final xmlBuildURI_APIParam_1 using the xmlBuildURI_APIParam_2 xmlBuildURI_APIParam_1', 'final param reference do by check give param be valid , build final param use param']
['//site1.com/docs/book1.html" xmlBuildRelativeURI_APIParam_1 input xmlBuildRelativeURI_APIParam_1 returned docs/pic1.gif pic1.gif docs/img/pic1.gif img/pic1.gif img/pic1.gif ../img/pic1.gif http', 'param input param return param']
['//site2.com/docs/pic1.gif xmlBuildRelativeURI_APIParam_2 = "docs/book1.html" xmlBuildRelativeURI_APIParam_1 input xmlBuildRelativeURI_APIParam_1 returned docs/pic1.gif pic1.gif docs/img/pic1.gif img/pic1.gif img/pic1.gif ../img/pic1.gif http', 'param input param return param']
['xmlBuildURI_APIName returns a new xmlBuildURI_APIParam_1 string  or NULL in case of error', 'api return param string null case error']
['Constructs a canonic xmlCanonicPath_APIParam_1 from the specified xmlCanonicPath_APIParam_1', 'construct canonic param specify param']
["it may be worthwhile to first convert it into a `` nice '' one by calling xmlBuildURI before calling this routine , since this routine assumes xmlBuildRelativeURI_APIParam_1 has already been through some validation", 'may be worthwhile first convert nice one by call api before call api , since api assume param have already be validation']
['xmlCanonicPath_APIParam_1 is the resource locator in a filesystem notation', 'param be resource filesystem']
['xmlCanonicPath_APIName returns a new canonic xmlCanonicPath_APIParam_1, or a duplicate of the xmlCanonicPath_APIParam_1 parameter if the construction fails', 'api return canonic param duplicate param']
['The caller is responsible for freeing the memory occupied by xmlCanonicPath_APIParam_0', 'caller be responsible free memory occupy by param']
['Simply creates an empty xmlURI', 'simply create empty']
['xmlCreateURI_APIName returns the new structure or NULL in case of error', 'api return structure null case error']
['If there is insufficient memory available, or the argument is NULL, the function returns NULL', 'if be insufficient memory available , param be null , function return null']
['Free up the xmlURI struct', 'free struct']
['xmlFreeURI_APIParam_1 is pointer to an xmlURI', 'param be pointer']
['Normalization occurs directly on the string , no new allocation is done', 'occur directly stre , no allocation be do']
['xmlNormalizeURIPath_APIParam_1 is pointer to the xmlNormalizeURIPath_APIParam_1 string', 'param be pointer param string']
['xmlNormalizeURIPath_APIName returns 0 or an error code', 'api return constant error code']
['Parse an URI based on RFC 3986 URI-reference =', 'parse uri base rfc constant param']
['Applies the 5 normalization steps to a xmlNormalizeURIPath_APIParam_1 string -- that is , RFC 2396 Section 5.2 , steps 6.c through 6', 'apply constant step param string _ _ , rfc constant section constant , step constant']
['xmlParseURI_APIParam_1 is the URI string to analyze', 'param be uri string analyze']
['xmlParseURI_APIName returns a newly built xmlURIPtr or NULL in case of error', 'api return newly build null case error']
['URI-reference = URI / relative-ref', 'param uri param']
['Parse an URI but allows to keep intact the original fragments', 'parse uri but allow keep intact original fragment']
['xmlParseURIRaw_APIParam_1 is the URI string to analyze', 'param be uri string analyze']
['xmlParseURIRaw_APIName returns a newly built xmlURIPtr or NULL in case of error', 'api return newly build null case error']
['xmlParseURIReference_APIParam_1 is pointer to an URI structure', 'param be pointer uri structure']
['xmlParseURIReference_APIParam_2 is the string to analyze', 'param be stre analyze']
['xmlParseURIRaw_APIParam_2 is', 'param be']
['Constructs an URI expressing the existing xmlPathToURI_APIParam_1', 'construct uri express param']
['xmlParseURIReference_APIName returns 0 or the error code', 'api return constant error code']
['Parse an URI reference string based on RFC 3986 and fills in the appropriate fields of the @uri structure URI-reference = URI / relative-ref', 'parse uri reference string base rfc constant fill appropriate field uri structure param uri param']
['xmlPathToURI_APIParam_1 is the resource locator in a filesystem notation', 'param be resource filesystem']
['xmlPathToURI_APIName returns a new URI, or a duplicate of the xmlPathToURI_APIParam_1 parameter if the construction fails', 'api return uri , duplicate param  fail']
['The caller is responsible for freeing the memory occupied by xmlPathToURI_APIParam_0', 'caller be responsible free memory occupy by param']
['Prints the URI in the xmlPrintURI_APIParam_1 @stream', 'print uri param stream']
['If there is insufficient memory available, or the argument is NULL, the function returns NULL', 'if be insufficient memory available , param be null , function return null']
['xmlPrintURI_APIParam_1 is a FILE * for the output', 'param be file output']
['xmlPrintURI_APIParam_2 is pointer to an xmlURI', 'param be pointer']
['Save the URI as an escaped string', 'uri as escape string']
['xmlSaveUri_APIParam_1 is pointer to an xmlURI', 'param be pointer']
['xmlSaveUri_APIName returns a new string (to be deallocated by caller', 'api return string be deallocate by caller']
['Escaping routine , does not do validity checks !', 'escape api , do not validity check']
['xmlURIEscape_APIParam_1 is the string of the URI to escape', 'param be stre uri escape']
['- Carl Douglas', '_ dougla']
['xmlURIEscape_APIName returns an copy of the string, but escaped 25 May 2001 Uses xmlParseURI and xmlURIEscapeStr to try to escape correctly according to RFC2396', 'api return copy string , but escape constant may constant us api escape correctly accord rfc constant']
['It will try to escape the chars needing this , but this is heuristic based it is impossible to be sure', 'escape char need , but be base be impossible be sure']
['xmlURIEscapeStr_APIParam_1 is string to escape', 'param be stre escape']
['xmlURIEscapeStr_APIParam_2 is exception xmlURIEscapeStr_APIParam_2 string of chars not to escape', 'param be exception param string char not escape']
['This routine escapes a string to hex , ignoring reserved characters and the characters in the exception xmlURIEscapeStr_APIParam_2', 'api escape string hex , ignore reserve character character exception param']
['xmlURIEscapeStr_APIName returns a new escaped string or NULL in case of error', 'api return escape stre null case error']
['Unescaping routine , but does not check that the string is an URI', 'api , but do not check string be uri']
['xmlURIUnescapeString_APIParam_1 is the string to unescape', 'param be stre']
['xmlURIUnescapeString_APIParam_2 is the length in bytes to unescape', 'param be length byte']
['xmlURIUnescapeString_APIParam_3 is optional destination buffer', 'param be optional destination buffer']
['Deallocate a Schema Type structure', 'deallocate type structure']
['xmlURIUnescapeString_APIName returns a copy of the string, but unescaped, will return NULL only in case of error', 'api return copy string , but unescaped , return null only case error']
['xmlSchemaFreeType_APIParam_1 is a schema xmlSchemaFreeType_APIParam_1 structure', 'param be param structure']
['Deallocates a xmlSchemaFreeWildcard_APIParam_1 structure', 'deallocate param structure']
['The output is a direct unsigned char translation of % XX values Note that the length of the result can only be smaller or same size as the input string', 'output be direct unsigned char translation value length result can only be small size as input string']
['xmlSchemaFreeWildcard_APIParam_1 is a xmlSchemaFreeWildcard_APIParam_1 structure', 'param be param structure']
['Add the @userdata to the hash @table', 'hash table']
['This can later be retrieved by using the @name', 'can later be retrieve by use name']
['xmlHashAddEntry_APIParam_1 is the hash xmlHashAddEntry_APIParam_1', 'param be hash param']
['Duplicate names generate errors', 'duplicate name generate error']
['xmlHashAddEntry_APIParam_2 is the xmlHashAddEntry_APIParam_2 of the xmlHashAddEntry_APIParam_3', 'param be param']
['xmlHashAddEntry_APIParam_3 is a pointer to the xmlHashAddEntry_APIParam_3', 'param be pointer param']
['xmlHashAddEntry_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['Add the @userdata to the hash @table', 'hash table']
['This can later be retrieved by using the tuple', 'can later be retrieve by use']
['Duplicate tuples generate errors', 'duplicate generate error']
['xmlHashAddEntry2_APIParam_1 is the hash xmlHashAddEntry2_APIParam_1', 'param be hash param']
['xmlHashAddEntry2_APIParam_3 is a second xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4', 'param be second param']
['xmlHashAddEntry2_APIParam_2 is the xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4', 'param be param']
['xmlHashAddEntry2_APIParam_4 is a pointer to the xmlHashAddEntry2_APIParam_4', 'param be pointer param']
['Add the @userdata to the hash @table', 'hash table']
['xmlHashAddEntry2_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['This can later be retrieved by using the tuple', 'can later be retrieve by use']
['Duplicate entries generate errors', 'duplicate entry generate error']
['xmlHashAddEntry3_APIParam_1 is the hash xmlHashAddEntry3_APIParam_1', 'param be hash param']
['xmlHashAddEntry3_APIParam_2 is the xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5', 'param be param']
['xmlHashAddEntry3_APIParam_4 is a third xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5', 'param be third param']
['xmlHashAddEntry3_APIParam_3 is a second xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5', 'param be second param']
['xmlHashAddEntry3_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['xmlHashAddEntry3_APIParam_5 is a pointer to the xmlHashAddEntry3_APIParam_5', 'param be pointer param']
['Callback to copy data from a hash', 'callback copy datum hash']
['xmlHashCopier_APIParam_1 is the data in the hash', 'param be data hash']
['xmlHashCopier_APIParam_2 is the xmlHashCopier_APIParam_2 associated', 'param be param associate']
['xmlHashCopier_APIName returns a copy of the data or NULL in case of error', 'api return copy datum null case error']
['Scan the hash @table and applied @f to each value', 'hash table apply value']
['xmlHashCopy_APIParam_1 is the hash xmlHashCopy_APIParam_1', 'param be hash param']
['xmlHashCopy_APIParam_2 is the copier function for items in the hash', 'param be function hash']
['xmlHashCopy_APIName returns the new xmlHashCopy_APIParam_1 or NULL in case of error', 'api return param null case error']
['xmlHashCreate_APIParam_1 is the xmlHashCreate_APIParam_1 of the hash table', 'param be param hash table']
['Create a new xmlHashTablePtr which will use @dict as the internal dictionary', 'create which use as internal']
['xmlHashCreate_APIName returns the newly created object, or NULL if an error occurred', 'api return newly create object , null']
['xmlHashCreateDict_APIParam_1 is the xmlHashCreateDict_APIParam_1 of the hash table', 'param be param hash table']
['xmlHashCreateDict_APIParam_2 is a dictionary to use for the hash', 'param be use hash']
['xmlHashCreateDict_APIName returns the newly created object, or NULL if an error occurred', 'api return newly create object , null']
['Callback to free data from a hash', 'callback free data hash']
['xmlHashDeallocator_APIParam_1 is the data in the hash', 'param be data hash']
['xmlHashDeallocator_APIParam_2 is the xmlHashDeallocator_APIParam_2 associated', 'param be param associate']
['Free the hash @table and its contents', 'free hash table content']
['xmlHashFree_APIParam_1 is the hash xmlHashFree_APIParam_1', 'param be hash param']
['xmlHashFree_APIParam_2 is the deallocator function for items in the hash', 'param be function hash']
['Find the userdata specified by the @name', 'find specify by name']
['xmlHashLookup_APIParam_1 is the hash xmlHashLookup_APIParam_1', 'param be hash param']
['The userdata is deallocated with @f', 'be deallocate']
['xmlHashLookup_APIParam_2 is the xmlHashLookup_APIParam_2 of the userdata', 'param be param']
['xmlHashLookup_APIName returns the pointer to the userdata', 'api return pointer']
['Find the userdata specified by the tuple', 'find specify by']
['xmlHashLookup2_APIParam_1 is the hash xmlHashLookup2_APIParam_1', 'param be hash param']
['xmlHashLookup2_APIParam_2 is the xmlHashLookup2_APIParam_2 of the userdata', 'param be param']
['xmlHashLookup2_APIParam_3 is a second xmlHashLookup2_APIParam_2 of the userdata', 'param be second param']
['xmlHashLookup2_APIName returns the pointer to the userdata', 'api return pointer']
['Find the userdata specified by the tuple', 'find specify by']
['xmlHashLookup3_APIParam_1 is the hash xmlHashLookup3_APIParam_1', 'param be hash param']
['xmlHashLookup3_APIParam_2 is the xmlHashLookup3_APIParam_2 of the userdata', 'param be param']
['xmlHashLookup3_APIParam_4 is a third xmlHashLookup3_APIParam_2 of the userdata', 'param be third param']
['xmlHashLookup3_APIParam_3 is a second xmlHashLookup3_APIParam_2 of the userdata', 'param be second param']
['xmlHashLookup3_APIName returns the a pointer to the userdata', 'api return pointer']
['Find the userdata specified by the QName @prefix', 'find specify by prefix']
['xmlHashQLookup_APIParam_1 is the hash xmlHashQLookup_APIParam_1', 'param be hash param']
['xmlHashQLookup_APIParam_2 is the xmlHashQLookup_APIParam_2 of the userdata', 'param be param']
['xmlHashQLookup_APIParam_3 is the xmlHashQLookup_APIParam_3 of the userdata', 'param be param']
['xmlHashQLookup_APIName returns the pointer to the userdata', 'api return pointer']
['Find the userdata specified by the QNames tuple', 'find specify by']
['xmlHashQLookup2_APIParam_1 is the hash xmlHashQLookup2_APIParam_1', 'param be hash param']
['xmlHashQLookup2_APIParam_2 is the xmlHashQLookup2_APIParam_2 of the userdata', 'param be param']
['xmlHashQLookup2_APIParam_3 is the xmlHashQLookup2_APIParam_3 of the userdata', 'param be param']
['xmlHashQLookup2_APIParam_4 is the second xmlHashQLookup2_APIParam_2 of the userdata', 'param be second param']
['xmlHashQLookup2_APIParam_5 is a second xmlHashQLookup2_APIParam_3 of the userdata', 'param be second param']
['xmlHashQLookup2_APIName returns the pointer to the userdata', 'api return pointer']
['Find the userdata specified by the tuple', 'find specify by']
['xmlHashQLookup3_APIParam_1 is the hash xmlHashQLookup3_APIParam_1', 'param be hash param']
['xmlHashQLookup3_APIParam_2 is the xmlHashQLookup3_APIParam_2 of the userdata', 'param be param']
['xmlHashQLookup3_APIParam_3 is the xmlHashQLookup3_APIParam_3 of the userdata', 'param be param']
['xmlHashQLookup3_APIParam_4 is the second xmlHashQLookup3_APIParam_2 of the userdata', 'param be second param']
['xmlHashQLookup3_APIParam_5 is a second xmlHashQLookup3_APIParam_3 of the userdata', 'param be second param']
['xmlHashQLookup3_APIParam_6 is the third xmlHashQLookup3_APIParam_2 of the userdata', 'param be third param']
['xmlHashQLookup3_APIParam_7 is a third xmlHashQLookup3_APIParam_3 of the userdata', 'param be third param']
['xmlHashQLookup3_APIName returns the a pointer to the userdata', 'api return pointer']
['Find the userdata specified by the @name and remove the @name from the hash @table', 'find specify by name remove name hash table']
['Existing userdata for this tuple will be removed and freed with @f', 'be remove free']
['xmlHashRemoveEntry_APIParam_2 is the xmlHashRemoveEntry_APIParam_2 of the userdata', 'param be param']
['xmlHashRemoveEntry_APIParam_3 is the deallocator function for removed item', 'param be function remove']
['xmlHashRemoveEntry_APIName returns 0 if the removal succeeded and -1 in case of error or not found', 'api return constant']
['Find the userdata specified by the tuple and remove it from the hash @table', 'find specify by remove hash table']
['Existing userdata for this tuple will be removed and freed with @f', 'be remove free']
['xmlHashRemoveEntry2_APIParam_2 is the xmlHashRemoveEntry2_APIParam_2 of the userdata', 'param be param']
['xmlHashRemoveEntry2_APIParam_3 is a second xmlHashRemoveEntry2_APIParam_2 of the userdata', 'param be second param']
['xmlHashRemoveEntry2_APIParam_4 is the deallocator function for removed item', 'param be function remove']
['xmlHashRemoveEntry2_APIName returns 0 if the removal succeeded and -1 in case of error or not found', 'api return constant']
['Find the userdata specified by the tuple and remove it from the hash @table', 'find specify by remove hash table']
['Existing userdata for this tuple will be removed and freed with @f', 'be remove free']
['xmlHashRemoveEntry3_APIParam_2 is the xmlHashRemoveEntry3_APIParam_2 of the userdata', 'param be param']
['xmlHashRemoveEntry3_APIParam_3 is a second xmlHashRemoveEntry3_APIParam_2 of the userdata', 'param be second param']
['xmlHashRemoveEntry3_APIParam_4 is a third xmlHashRemoveEntry3_APIParam_2 of the userdata', 'param be third param']
['xmlHashRemoveEntry3_APIParam_5 is the deallocator function for removed item', 'param be function remove']
['xmlHashRemoveEntry3_APIName returns 0 if the removal succeeded and -1 in case of error or not found', 'api return constant']
['Scan the hash @table and applied @f to each value', 'hash table apply value']
['xmlHashScan_APIParam_1 is the hash xmlHashScan_APIParam_1', 'param be hash param']
['xmlHashScan_APIParam_2 is the scanner function for items in the hash', 'param be function hash']
['xmlHashScan_APIParam_3 is extra xmlHashScan_APIParam_3 passed to f', 'param be extra param pass']
['Scan the hash @table and applied @f to each value matching tuple', 'hash table apply value match']
['xmlHashScan3_APIParam_1 is the hash xmlHashScan3_APIParam_1', 'param be hash param']
['xmlHashScan3_APIParam_2 is the xmlHashScan3_APIParam_2 of the userdata or NULL', 'param be param null']
['xmlHashScan3_APIParam_3 is a second xmlHashScan3_APIParam_2 of the userdata or NULL', 'param be second param null']
['xmlHashScan3_APIParam_4 is a third xmlHashScan3_APIParam_2 of the userdata or NULL', 'param be third param null']
['the comparison is considered to match', 'comparison be consider match']
['xmlHashScan3_APIParam_5 is the scanner function for items in the hash', 'param be function hash']
['xmlHashScan3_APIParam_6 is extra xmlHashScan3_APIParam_6 passed to f', 'param be extra param pass']
['Scan the hash @table and applied @f to each value', 'hash table apply value']
['xmlHashScanFull_APIParam_1 is the hash xmlHashScanFull_APIParam_1', 'param be hash param']
['xmlHashScanFull_APIParam_2 is the scanner function for items in the hash', 'param be function hash']
['xmlHashScanFull_APIParam_3 is extra xmlHashScanFull_APIParam_3 passed to f', 'param be extra param pass']
['Scan the hash @table and applied @f to each value matching tuple', 'hash table apply value match']
['xmlHashScanFull3_APIParam_1 is the hash xmlHashScanFull3_APIParam_1', 'param be hash param']
['xmlHashScanFull3_APIParam_2 is the xmlHashScanFull3_APIParam_2 of the userdata or NULL', 'param be param null']
['xmlHashScanFull3_APIParam_3 is a second xmlHashScanFull3_APIParam_2 of the userdata or NULL', 'param be second param null']
['xmlHashScanFull3_APIParam_4 is a third xmlHashScanFull3_APIParam_2 of the userdata or NULL', 'param be third param null']
['the comparison is considered to match', 'comparison be consider match']
['xmlHashScanFull3_APIParam_6 is extra xmlHashScanFull3_APIParam_6 passed to f', 'param be extra param pass']
['xmlHashScanFull3_APIParam_5 is the scanner function for items in the hash', 'param be function hash']
['xmlHashScanner_APIParam_1 is the xmlHashScanner_APIParam_2 in the hash', 'param be param hash']
['xmlHashScanner_APIParam_2 is extra scannner xmlHashScanner_APIParam_2', 'param be extra param']
['xmlHashScanner_APIParam_3 is the xmlHashScanner_APIParam_3 associated', 'param be param associate']
['xmlHashScannerFull_APIParam_1 is the xmlHashScannerFull_APIParam_2 in the hash', 'param be param hash']
['xmlHashScannerFull_APIParam_3 is the xmlHashScannerFull_APIParam_3 associated', 'param be param associate']
['xmlHashScannerFull_APIParam_2 is extra scannner xmlHashScannerFull_APIParam_2', 'param be extra param']
['xmlHashScannerFull_APIParam_4 is the second xmlHashScannerFull_APIParam_3 associated', 'param be second param associate']
['xmlHashScannerFull_APIParam_5 is the third xmlHashScannerFull_APIParam_3 associated', 'param be third param associate']
['Query the number of elements installed in the hash @table', 'query number element instal hash table']
['xmlHashSize_APIParam_1 is the hash xmlHashSize_APIParam_1', 'param be hash param']
['xmlHashSize_APIName returns the number of elements in the hash xmlHashSize_APIParam_1 or -1 in case of error', 'api return number element hash param constant case error']
['Add the @userdata to the hash @table', 'hash table']
['This can later be retrieved by using the @name', 'can later be retrieve by use name']
['xmlHashUpdateEntry_APIParam_1 is the hash xmlHashUpdateEntry_APIParam_1', 'param be hash param']
['xmlHashUpdateEntry_APIParam_2 is the xmlHashUpdateEntry_APIParam_2 of the xmlHashUpdateEntry_APIParam_3', 'param be param']
['xmlHashUpdateEntry_APIParam_3 is a pointer to the xmlHashUpdateEntry_APIParam_3', 'param be pointer param']
['xmlHashUpdateEntry_APIParam_4 is the deallocator function for replaced item', 'param be function replace']
['Existing entry for this @name will be removed and freed with @f', 'entry name be remove free']
['xmlHashUpdateEntry_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['Add the @userdata to the hash @table', 'hash table']
['This can later be retrieved by using the tuple', 'can later be retrieve by use']
['xmlHashUpdateEntry2_APIParam_1 is the hash xmlHashUpdateEntry2_APIParam_1', 'param be hash param']
['xmlHashUpdateEntry2_APIParam_2 is the xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4', 'param be param']
['xmlHashUpdateEntry2_APIParam_3 is a second xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4', 'param be second param']
['xmlHashUpdateEntry2_APIParam_4 is a pointer to the xmlHashUpdateEntry2_APIParam_4', 'param be pointer param']
['Existing entry for this tuple will be removed and freed with @f', 'entry be remove free']
['xmlHashUpdateEntry2_APIParam_5 is the deallocator function for replaced item', 'param be function replace']
['xmlHashUpdateEntry2_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['Add the @userdata to the hash @table', 'hash table']
['This can later be retrieved by using the tuple', 'can later be retrieve by use']
['xmlHashUpdateEntry3_APIParam_1 is the hash xmlHashUpdateEntry3_APIParam_1', 'param be hash param']
['xmlHashUpdateEntry3_APIParam_2 is the xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5', 'param be param']
['xmlHashUpdateEntry3_APIParam_3 is a second xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5', 'param be second param']
['xmlHashUpdateEntry3_APIParam_4 is a third xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5', 'param be third param']
['Existing entry for this tuple will be removed and freed with @f', 'entry be remove free']
['xmlHashUpdateEntry3_APIParam_5 is a pointer to the xmlHashUpdateEntry3_APIParam_5', 'param be pointer param']
['xmlHashUpdateEntry3_APIParam_6 is the deallocator function for replaced item', 'param be function replace']
['xmlHashUpdateEntry3_APIName returns 0 the addition succeeded and -1 in case of error', 'api return constant addition succeed constant case error']
['xmlSchemaDump_APIParam_1 is the file xmlSchemaDump_APIParam_1', 'param be file param']
['xmlSchemaDump_APIParam_2 is a xmlSchemaDump_APIParam_2 structure', 'param be param structure']
['Deallocate a Schema structure', 'deallocate structure']
['xmlSchemaFree_APIParam_1 is a xmlSchemaFree_APIParam_1 structure', 'param be param structure']
['Free the resources associated to the schema parser context', 'free resource associate parser context']
['xmlSchemaFreeParserCtxt_APIParam_1 is the schema parser context', 'param be parser context']
['Free the resources associated to the schema validation context', 'free resource associate validation context']
['xmlSchemaFreeValidCtxt_APIParam_1 is the schema validation context', 'param be validation context']
['Get the callback information used to handle errors for a parser context', 'get callback information use error parser context']
['xmlSchemaGetParserErrors_APIParam_1 is a XMl-Schema parser context', 'param be param parser context']
['xmlSchemaGetParserErrors_APIParam_2 is the error callback result', 'param be error callback result']
['xmlSchemaGetParserErrors_APIParam_3 is the warning callback result', 'param be warn callback result']
['xmlSchemaGetParserErrors_APIParam_4 is contextual data for the callbacks result', 'param be contextual data callback result']
['xmlSchemaGetParserErrors_APIName returns -1 in case of failure, 0 otherwise', 'api return constant case failure , constant otherwise']
['Get the error and warning callback informations', 'get error warning callback information']
['xmlSchemaGetValidErrors_APIParam_1 is a XML-Schema validation context', 'param be param validation context']
['xmlSchemaGetValidErrors_APIParam_2 is the error function result', 'param be error function result']
['xmlSchemaGetValidErrors_APIParam_3 is the warning function result', 'param be warn function result']
['xmlSchemaGetValidErrors_APIParam_4 is the functions context result', 'param be function context result']
['xmlSchemaGetValidErrors_APIName returns -1 in case of error and 0 otherwise', 'api return constant case error constant otherwise']
['xmlSchemaIsValid_APIParam_1 is the schema validation context', 'param be validation context']
['Create an XML Schemas parse context for that document', 'create parse context']
['xmlSchemaIsValid_APIName returns 1 if valid so far, 0 if errors were detected, and -1 in case of internal error', 'api return constant if valid far , constant case internal error']
['xmlSchemaNewDocParserCtxt_APIParam_1 is a preparsed document tree', 'param be preparse']
['xmlSchemaNewDocParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML Schemas parse context for that memory xmlSchemaNewMemParserCtxt_APIParam_1 expected to contain an XML Schemas file', 'create parse context memory param expect contain file']
['The document may be modified', 'may be modify']
['xmlSchemaNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas', 'param be pointer char array contain']
['xmlSchemaNewMemParserCtxt_APIParam_2 is the xmlSchemaNewMemParserCtxt_APIParam_2 of the array', 'param be param array']
['xmlSchemaNewMemParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML Schemas parse context for that file/resource expected to contain an XML Schemas file', 'create parse context expect contain file']
['xmlSchemaNewParserCtxt_APIParam_1 is the location of the schema', 'param be location']
['xmlSchemaNewParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML Schemas validation context based on the given xmlSchemaNewValidCtxt_APIParam_1', 'create validation context base give param']
['xmlSchemaNewValidCtxt_APIParam_1 is a precompiled XML Schemas', 'param be precompile']
['xmlSchemaNewValidCtxt_APIName returns the validation context or NULL in case of error', 'api return validation context null case error']
['xmlSchemaParse_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaParse_APIName returns the internal XML Schema structure built from the resource or NULL in case of error', 'api return internal structure build resource null case error']
['Plug a SAX based validation layer in a SAX parsing event flow', 'plug base validation layer parse event']
['parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances', 'parse definition resource build internal which can be use validate instance']
['xmlSchemaSAXPlug_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaSAXPlug_APIParam_2 is a pointer to the original xmlSAXHandlerPtr', 'param be pointer original']
['The original @saxptr and @dataptr data are replaced by new pointers but the calls to the original will be maintained', 'original datum be replace by pointer but call original be maintain']
['xmlSchemaSAXPlug_APIParam_3 is a pointer to the original SAX user data pointer', 'param be pointer original user datum pointer']
['xmlSchemaSAXPlug_APIName returns a pointer to a data structure needed to unplug the validation layer or NULL in case of errors', 'api return pointer datum structure need unplug validation layer null case error']
['Unplug a SAX based validation layer in a SAX parsing event flow', 'unplug base validation layer parse event']
['The original pointers used in the call are restored', 'original pointer use call be restore']
['xmlSchemaSAXUnplug_APIParam_1 is a data structure returned by xmlSchemaSAXPlug', 'param be data structure return by api']
['xmlSchemaSAXUnplug_APIName returns 0 in case of success and -1 in case of failure', 'api return constant case success constant case failure']
['Set the callback functions used to handle errors for a validation context', 'set callback function use error validation context']
['xmlSchemaSetParserErrors_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaSetParserErrors_APIParam_2 is the error callback', 'param be error callback']
['xmlSchemaSetParserErrors_APIParam_3 is the warning callback', 'param be warn callback']
['xmlSchemaSetParserErrors_APIParam_4 is contextual data for the callbacks', 'param be contextual data callback']
['Set the structured error callback', 'set structured error callback']
['xmlSchemaSetParserStructuredErrors_APIParam_1 is a schema parser context', 'param be parser context']
['xmlSchemaSetParserStructuredErrors_APIParam_2 is the structured error function', 'param be structured error function']
['xmlSchemaSetParserStructuredErrors_APIParam_3 is the functions context', 'param be function context']
['Set the error and warning callback informations', 'set error warning callback information']
['xmlSchemaSetValidErrors_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaSetValidErrors_APIParam_2 is the error function', 'param be error function']
['xmlSchemaSetValidErrors_APIParam_3 is the warning function', 'param be warn function']
['xmlSchemaSetValidErrors_APIParam_4 is the functions context', 'param be function context']
['xmlSchemaSetValidOptions_APIParam_2 is a combination of xmlSchemaValidOption', 'param be combination']
['Set the structured error callback', 'set structured error callback']
['xmlSchemaSetValidOptions_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaSetValidOptions_APIName returns 0 in case of success, -1 in case of an API error', 'api return constant case success , constant case api error']
['to be used', 'be use']
['Sets the xmlSchemaSetValidOptions_APIParam_2', 'set param']
['xmlSchemaSetValidStructuredErrors_APIParam_2 is the structured error function', 'param be structured error function']
['xmlSchemaSetValidStructuredErrors_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaSetValidStructuredErrors_APIParam_3 is the functions context', 'param be function context']
['Get the validation context options', 'get validation context option']
['xmlSchemaValidCtxtGetOptions_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidCtxtGetOptions_APIName returns the option combination or -1 on error', 'api return option combination constant error']
['allow access to the parser context of the schema validation context', 'allow access parser context validation context']
['xmlSchemaValidCtxtGetParserCtxt_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidCtxtGetParserCtxt_APIName returns the parser context of the schema validation context or NULL in case of error', 'api return parser context validation context null case error']
['Validate a document tree in memory', 'validate memory']
['xmlSchemaValidateDoc_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidateDoc_APIParam_2 is a parsed document tree', 'param be parse']
['xmlSchemaValidateFile_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidateDoc_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant']
['Do a schemas validation of the given resource , a schemas validation of the given resource will use the SAX streamable validation internally', 'validation give resource , validation give resource use streamable validation internally']
['xmlSchemaValidateFile_APIParam_2 is the URI of the instance', 'param be uri instance']
['xmlSchemaValidateFile_APIParam_3 is a future set of xmlSchemaValidateFile_APIParam_3 , currently unused', 'param be future set param , currently unused']
['Validate a branch of a tree , starting with the given @elem', 'validate , start give']
['xmlSchemaValidateOneElement_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidateOneElement_APIParam_2 is an element node', 'param be element']
['xmlSchemaValidateSetFilename_APIParam_1 is the schema validation context', 'param be validation context']
['xmlSchemaValidateFile_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of an internal or API error', 'api return constant']
['xmlSchemaValidateSetFilename_APIParam_2 is the file name', 'param be file name']
['xmlSchemaValidateSetLocator_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidateOneElement_APIName returns 0 if the element and its subtree is valid, a positive error code number otherwise and -1 in case of an internal or API error', 'api return constant']
['xmlSchemaValidateSetLocator_APIParam_2 is the locator function pointer', 'param be function pointer']
['Workaround to provide file error reporting information', 'workaround provide file error reporting information']
['xmlSchemaValidateSetLocator_APIParam_3 is the locator context', 'param be context']
['xmlSchemaValidateStream_APIParam_1 is a schema validation context', 'param be validation context']
['xmlSchemaValidateStream_APIParam_2 is the xmlSchemaValidateStream_APIParam_2 to use for reading the data', 'param be param use read datum']
['xmlSchemaValidateStream_APIParam_3 is an optional encoding information', 'param be optional encode information']
['xmlSchemaValidateStream_APIParam_4 is a SAX handler for the resulting events', 'param be handler result event']
['xmlSchemaValidateStream_APIParam_5 is the context to provide to the SAX handler', 'param be context provide handler']
['Allows to set a locator function to the validation context , which will be used to provide file and line information', 'allow set function validation context , which be use provide file line information']
['Signature of an error callback from an xmlSchemaValidityErrorFunc_APIParam_3 validation', 'signature error callback param validation']
['xmlSchemaValidityErrorFunc_APIParam_1 is xmlSchemaValidityErrorFunc_APIParam_3 validation context', 'param be param validation context']
['xmlSchemaValidityErrorFunc_APIParam_2 is xmlSchemaValidityErrorFunc_APIParam_3 message xmlSchemaValidityErrorFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['A schemas validation locator , a callback called by the validator', 'validation , callback call by']
['xmlSchemaValidateStream_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant']
['xmlSchemaValidityLocatorFunc_APIParam_1 is user provided context', 'param be user provide context']
['xmlSchemaValidityLocatorFunc_APIParam_2be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_2 information', 'param return by api param information']
['xmlSchemaValidityLocatorFunc_APIParam_3be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_3 information', 'param return by api param information']
['xmlSchemaValidityLocatorFunc_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Signature of a warning callback from an xmlSchemaValidityWarningFunc_APIParam_3 validation', 'signature warning callback param validation']
['Validate an xmlSchemaValidateStream_APIParam_2 based on a flow of SAX event from the parser and forward the events to the @sax handler with the provided @user_data the user provided @sax handler must be a SAX2 one', 'validate param base event parser forward event handler provide param user provide handler must be one']
['xmlSchemaValidityWarningFunc_APIParam_1 is xmlSchemaValidityWarningFunc_APIParam_3 validation context', 'param be param validation context']
['This is used', 'be use']
['xmlSchemaValidityWarningFunc_APIParam_2 is xmlSchemaValidityWarningFunc_APIParam_3 message xmlSchemaValidityWarningFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['UTF8Toisolat1_APIParam_1 is a pointer to an array of bytes to store the result', 'param be pointer array byte store result']
['UTF8Toisolat1_APIParam_2 is the length of @out', 'param be length']
['Take a block of UTF-8 chars UTF8Toisolat1_APIParam_3 and try to convert it to an ISO Latin 1 block of chars UTF8Toisolat1_APIParam_1', 'take block param char param convert constant block char param']
['UTF8Toisolat1_APIParam_3 is a pointer to an array of UTF-8 chars', 'param be pointer array param char']
['UTF8Toisolat1_APIParam_4 is the length of @in', 'param be length']
['The value of @outlen after return is the number of octets consumed', 'value after return be number octet consume']
['isolat1ToUTF8_APIParam_1 is a pointer to an array of bytes to store the result', 'param be pointer array byte store result']
['isolat1ToUTF8_APIParam_2 is the length of @out', 'param be length']
['Take a block of ISO Latin 1 chars isolat1ToUTF8_APIParam_3 and try to convert it to an UTF-8 block of chars isolat1ToUTF8_APIParam_1', 'take block constant char param convert param block char param']
['isolat1ToUTF8_APIParam_3 is a pointer to an array of ISO Latin 1 chars', 'param be pointer array constant char']
['isolat1ToUTF8_APIParam_4 is the length of @in', 'param be length']
['The value of @outlen after return is the number of octets consumed', 'value after return be number octet consume']
['Registers an xmlAddEncodingAlias_APIParam_2 @alias for an encoding named @name', 'register param alias encode name name']
['Existing xmlAddEncodingAlias_APIParam_2 will be overwritten', 'param be overwrite']
['xmlAddEncodingAlias_APIParam_1 is the encoding xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format', 'param be encode param as parse , param format']
['xmlAddEncodingAlias_APIParam_2 is the xmlAddEncodingAlias_APIParam_2 xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format', 'param be param as parse , param format']
['UTF8Toisolat1_APIName returns the number of bytes written if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable', 'api return number byte write']
['xmlAddEncodingAlias_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['Generic front-end for encoding xmlCharEncCloseFunc_APIParam_1 close function', 'generic param encode param close function']
['isolat1ToUTF8_APIName returns the number of bytes written if success, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable', 'api return number byte write']
['xmlCharEncCloseFunc_APIParam_1 is char enconding transformation data structure', 'param be char enconde transformation datum structure']
['limit itself to 45 chars', 'limit constant char']
['xmlCharEncCloseFunc_APIName returns 0 if success, or -1 in case of error', 'api return constant if success , constant case error']
['xmlCharEncFirstLine_APIParam_1 is char enconding transformation data structure', 'param be char enconde transformation datum structure']
['Front-end for the encoding xmlCharEncFirstLine_APIParam_1 input function , but handle only the very first line , i.e', 'param encode param input function , but only first line']
['xmlCharEncFirstLine_APIParam_2 is an xmlBuffer for the output', 'param be output']
['xmlCharEncFirstLine_APIParam_3 is an xmlBuffer for the input', 'param be input']
['Generic front-end for the encoding xmlCharEncInFunc_APIParam_1 input function', 'generic param encode param input function']
['xmlCharEncInFunc_APIParam_1 is char encoding transformation data structure', 'param be char encode transformation datum structure']
['xmlCharEncFirstLine_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or', 'api return number byte write']
['xmlCharEncInFunc_APIParam_2 is an xmlBuffer for the output', 'param be output']
['xmlCharEncInFunc_APIParam_3 is an xmlBuffer for the input', 'param be input']
['xmlCharEncInFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or', 'api return number byte write']
['xmlCharEncOutFunc_APIParam_1 is char enconding transformation data structure', 'param be char enconde transformation datum structure']
['xmlCharEncOutFunc_APIParam_2 is an xmlBuffer for the output', 'param be output']
['xmlCharEncOutFunc_APIParam_3 is an xmlBuffer for the input', 'param be input']
['xmlCharEncOutFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or', 'api return number byte write']
['In case of UTF8 sequence conversion errors for the given encoder , the content will be automatically remapped to a CharRef sequence', 'case utf8 sequence conversion error give , content be automatically remappe sequence']
['Generic front-end for the encoding xmlCharEncOutFunc_APIParam_1 output function a first call with @in == NULL has to be made firs to initiate the output xmlCharEncOutFunc_APIParam_3 case of non-stateless encoding needing to initiate their state or the output', 'generic param encode param output function first call null have be make output param case param encode need state output']
['The value of @outlen after return is the number of octets consumed', 'value after return be number octet consume']
['The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable', 'value after return be number octet consume']
['xmlCharEncodingInputFunc_APIParam_2 is the length of @out', 'param be length']
['xmlCharEncodingInputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed', 'api return number byte write , constant if lack space , constant']
['xmlCharEncodingOutputFunc_APIParam_2 is the length of @out', 'param be length']
['xmlCharEncodingInputFunc_APIParam_4 is the length of @in', 'param be length']
['xmlCharEncodingInputFunc_APIParam_3 is a pointer to an array of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding', 'param be pointer array char param original encoding']
['xmlCharEncodingOutputFunc_APIParam_4 is the length of @in', 'param be length']
['xmlCharEncodingOutputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed', 'api return number byte write , constant if lack space , constant']
['xmlCharEncodingOutputFunc_APIParam_1 is a pointer to an array of bytes to store the result', 'param be pointer array byte store result']
['xmlCharEncodingOutputFunc_APIParam_3 is a pointer to an array of UTF-8 chars', 'param be pointer array param char']
['Take a block of UTF-8 chars xmlCharEncodingOutputFunc_APIParam_3 and try to convert it to another encoding', 'take block param char param convert another encoding']
['xmlCharEncodingInputFunc_APIParam_1 is a pointer to an array of bytes to store the UTF-8 result', 'param be pointer array byte store param result']
['a first call designed to produce heading info is called with xmlCharEncodingOutputFunc_APIParam_3 = NULL', 'first call design produce head info be call param null']
['The value of @outlen after return is the number of octets produced', 'value after return be number octet produce']
['The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable', 'value after return be number octet consume']
['Unregisters all aliases', 'unregister aliase']
['this should also initialize the encoder state', 'should initialize state']
['Take a block of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding and try to convert a block of chars to an UTF-8 block of chars xmlCharEncodingInputFunc_APIParam_1', 'take block char param original encoding convert block char param block char param']
['Unregisters an encoding xmlDelEncodingAlias_APIParam_1 @alias', 'unregister encode param alias']
['Cleanup the memory allocated for the char encoding support , it unregisters all the encoding handlers and the aliases', 'cleanup memory char encoding support , unregister encode handler aliase']
['xmlDelEncodingAlias_APIParam_1 is the xmlDelEncodingAlias_APIParam_1 name as parsed , in UTF-8 format', 'param be param name as parse , param format']
['xmlDetectCharEncoding_APIParam_2 is pointer to the length of the buffer', 'param be pointer length buffer']
['xmlDelEncodingAlias_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['xmlDetectCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values', 'api return one constant value']
['xmlDetectCharEncoding_APIParam_1 is a pointer to the first bytes of the XML entity , must be at least 2 bytes long', 'param be pointer first byte , must be least constant byte long']
['Search in the registered set the handler able to read/write that encoding', 'search register set handler able encoding']
['Guess the encoding of the entity using the first bytes of the entity content according to the non-normative appendix F of the XML-1 .0 recommendation', 'guess encode use first byte content accord param']
['xmlFindCharEncodingHandler_APIParam_1 is a string describing the char encoding', 'param be stre describe char encoding']
['xmlFindCharEncodingHandler_APIName returns the handler or NULL if not found', 'api return handler null']
['Search in the registered set the handler able to read/write that encoding', 'search register set handler able encoding']
['xmlGetCharEncodingHandler_APIParam_1 is an xmlCharEncoding value', 'param be xmlcharencode value']
['xmlGetCharEncodingHandler_APIName returns the handler or NULL if not found', 'api return handler null']
["The `` canonical '' name for XML encoding", 'canonical name encoding']
['/ / www.w3.org/TR/REC-xml#charencoding Section 4.3.3 Character Encoding in Entities', 'charencode section constant character encode']
['xmlGetCharEncodingName_APIParam_1 is the encoding', 'param be encode']
['xmlGetCharEncodingName_APIName returns the canonical name for the given encoding', 'api return canonical name give encoding']
['Lookup an encoding name for the given xmlGetEncodingAlias_APIParam_1', 'lookup encode name give param']
['xmlGetEncodingAlias_APIName returns NULL if not found, otherwise the original name', 'api return null if not find , otherwise original name']
['xmlGetEncodingAlias_APIParam_1 is the xmlGetEncodingAlias_APIParam_1 name as parsed , in UTF-8 format', 'param be param name as parse , param format']
['Create and registers an xmlCharEncodingHandler', 'create register']
['Initialize the char encoding support , the char encoding support registers the default encoding supported', 'initialize char encode support , char encode support register default encode support']
['xmlNewCharEncodingHandler_APIParam_1 is the encoding xmlNewCharEncodingHandler_APIParam_1 , in UTF-8 format', 'param be encode param format']
['xmlNewCharEncodingHandler_APIParam_2 is the xmlCharEncodingInputFunc to read that encoding', 'param be api read encode']
['xmlNewCharEncodingHandler_APIParam_3 is the xmlCharEncodingOutputFunc to write that encoding', 'param be api write encoding']
['xmlNewCharEncodingHandler_APIName returns the xmlCharEncodingHandlerPtr created (or NULL in case of error', 'api return create null case error']
['xmlInitCharEncodingHandlers_APIName usually does not need to be called in normal processing', 'api usually do not need be call normal processing']
['Compare the string to the encoding schemes already known', 'compare string encode scheme already know']
['Note that the comparison is case insensitive accordingly to the section 4.3.3 Character Encoding in Entities', 'comparison be case insensitive accordingly section constant character encode']
['xmlParseCharEncoding_APIParam_1 is the encoding xmlParseCharEncoding_APIParam_1 as parsed , in UTF-8 format', 'param be encode param as parse , param format']
['xmlParseCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values or XML_CHAR_ENCODING_NONE if not recognized', 'api return one constant value constant']
['Register the char encoding xmlRegisterCharEncodingHandler_APIParam_1 , surprising , is not it ?', 'register char encode param , surprising , be not']
['xmlRegisterCharEncodingHandler_APIParam_1 is the xmlCharEncodingHandlerPtr xmlRegisterCharEncodingHandler_APIParam_1 block', 'param be param block']
['Set or reset the default initGenericErrorDefaultFunc_APIParam_1 for generic errors to the builtin error function', 'set reset default param generic error error function']
['initGenericErrorDefaultFunc_APIParam_1 is the handler', 'param be handler']
['Save the original error xmlCopyError_APIParam_2 the new place', 'original error param place']
['xmlCopyError_APIParam_1 is a source error', 'param be source error']
['xmlCopyError_APIParam_2 is a target error', 'param be target error']
['xmlCopyError_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Get the last parsing error registered', 'get last parsing error register']
['xmlCtxtGetLastError_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtGetLastError_APIName returns NULL if no error occurred or a pointer to the error', 'api return null']
['Cleanup the last global error registered', 'cleanup last global error register']
['For parsing error this does not change the well-formedness result', 'parse error do not change param result']
['xmlCtxtResetLastError_APIParam_1 is an XML parser context', 'param be parser context']
['xmlGenericErrorFunc_APIParam_1 is a parsing context', 'param be parse context']
['xmlGenericErrorFunc_APIParam_2 is xmlGenericErrorFunc_APIParam_3 message xmlGenericErrorFunc_APIParam_3 the extra arguments of xmlGenericErrorFunc_APIParam_3 varags to format xmlGenericErrorFunc_APIParam_3 message', 'param be param message param extra param format param message']
['Get the last global error registered', 'get last global error register']
['This is per thread', 'be per thread']
['Signature of xmlGenericErrorFunc_APIParam_3 function to xmlGenericErrorFunc_APIParam_3', 'signature param function param']
['xmlGetLastError_APIName returns NULL if no error occurred or a pointer to the error', 'api return null']
['Display xmlParserError_APIParam_3 format an error messages , gives file , line , position xmlParserError_APIParam_3 extra parameters', 'param format error message , give file , line , position param extra param']
['xmlParserError_APIParam_1 is an xmlParserError_APIParam_3 parser context', 'param be param parser context']
['xmlParserError_APIParam_2 is xmlParserError_APIParam_3 message to display/transmit xmlParserError_APIParam_3 extra parameters xmlParserError_APIParam_3 the message display', 'param be param message param extra param message']
['Displays current context within the xmlParserPrintFileContext_APIParam_1 content for error tracking', 'current context within param content error']
['xmlParserPrintFileContext_APIParam_1 is an xmlParserInputPtr input', 'param be input']
['Displays the associated file and line informations for the current xmlParserPrintFileInfo_APIParam_1', 'associate file line information current param']
['xmlParserValidityError_APIParam_1 is an xmlParserValidityError_APIParam_3 parser context', 'param be param parser context']
['xmlParserPrintFileInfo_APIParam_1 is an xmlParserInputPtr input', 'param be input']
['Display xmlParserValidityError_APIParam_3 format an validity error messages , gives file , line , position xmlParserValidityError_APIParam_3 extra parameters', 'param format validity error message , give file , line , position param extra param']
['xmlParserValidityError_APIParam_2 is xmlParserValidityError_APIParam_3 message to display/transmit xmlParserValidityError_APIParam_3 extra parameters xmlParserValidityError_APIParam_3 the message display', 'param be param message param extra param message']
['xmlParserValidityWarning_APIParam_1 is an xmlParserValidityWarning_APIParam_3 parser context', 'param be param parser context']
['Display xmlParserValidityWarning_APIParam_3 format a validity warning messages , gives file , line , position xmlParserValidityWarning_APIParam_3 extra parameters', 'param format validity warning message , give file , line , position param extra param']
['xmlParserValidityWarning_APIParam_2 is xmlParserValidityWarning_APIParam_3 message to display/transmit xmlParserValidityWarning_APIParam_3 extra parameters xmlParserValidityWarning_APIParam_3 the message display', 'param be param message param extra param message']
['xmlParserWarning_APIParam_1 is an xmlParserWarning_APIParam_3 parser context', 'param be param parser context']
['Display xmlParserWarning_APIParam_3 format a warning messages , gives file , line , position xmlParserWarning_APIParam_3 extra parameters', 'param format warning message , give file , line , position param extra param']
['xmlParserWarning_APIParam_2 is xmlParserWarning_APIParam_3 message to display/transmit xmlParserWarning_APIParam_3 extra parameters xmlParserWarning_APIParam_3 the message display', 'param be param message param extra param message']
['Cleanup the error', 'cleanup error']
['Cleanup the last global error registered', 'cleanup last global error register']
['xmlResetError_APIParam_1 is pointer to the error', 'param be pointer error']
['For parsing error this does not change the well-formedness result', 'parse error do not change param result']
['Function to reset the xmlSetGenericErrorFunc_APIParam_2 and the error context for out of context error messages', 'function reset param error context context error message']
['For multi-threaded applications , this must be set separately for each thread', 'param application , must be set separately thread']
['xmlSetGenericErrorFunc_APIParam_1 is the new error handling context', 'param be error handling context']
['xmlSetGenericErrorFunc_APIParam_2 is the new xmlSetGenericErrorFunc_APIParam_2 function', 'param be param function']
['@handler will be called for subsequent error messages', 'handler be call subsequent error message']
['This simply means that', 'simply mean']
['Function to reset the xmlSetStructuredErrorFunc_APIParam_2 and the error context for out of context structured error messages', 'function reset param error context context structured error message']
['xmlSetStructuredErrorFunc_APIParam_1 is the new error handling context', 'param be error handling context']
['xmlSetStructuredErrorFunc_APIParam_2 is the new xmlSetStructuredErrorFunc_APIParam_2 function', 'param be param function']
['xmlStructuredErrorFunc_APIParam_1 is user provided data for the xmlStructuredErrorFunc_APIParam_2 callback', 'param be user provide datum param callback']
['And @ctx will be passed as first argument to @handler One can simply force messages to be emitted to another FILE * than stderr by setting @ctx to this file handle and @handler to NULL', 'be pass as first param handler one can simply force message be emit another file stderr by set file handler null']
['@handler will be called for subsequent error messages', 'handler be call subsequent error message']
['And @ctx will be passed as first argument to @handler For multi-threaded applications , this must be set separately for each thread', 'be pass as first param handler param application , must be set separately thread']
['This simply means that', 'simply mean']
['xmlStructuredErrorFunc_APIParam_2 is the xmlStructuredErrorFunc_APIParam_2 being raised', 'param be param raise']
['htmlDocContentDumpFormatOutput_APIParam_1 is the HTML buffer output', 'param be buffer output']
['htmlDocContentDumpFormatOutput_APIParam_3 is the htmlDocContentDumpFormatOutput_APIParam_3 string', 'param be param string']
['htmlDocContentDumpFormatOutput_APIParam_2 is the document', 'param be']
['Signature of the function to use handles the new xmlStructuredErrorFunc_APIParam_2 reporting mechanism', 'signature function use param report mechanism']
['htmlDocContentDumpFormatOutput_APIParam_4 is should formatting spaces been added', 'param be should format space be']
['Formating return/spaces are added', 'format be']
['htmlDocContentDumpOutput_APIParam_1 is the HTML buffer output', 'param be buffer output']
['htmlDocContentDumpOutput_APIParam_2 is the document', 'param be']
['htmlDocContentDumpOutput_APIParam_3 is the htmlDocContentDumpOutput_APIParam_3 string', 'param be param string']
['Dump an HTML document to an open FILE', 'open file']
['htmlDocDump_APIParam_1 is the FILE *', 'param be file']
['htmlDocDump_APIParam_2 is the document', 'param be']
['Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemory_APIParam_3', 'memory return be param']
['htmlDocDump_APIName returns the number of byte written or -1 in case of failure', 'api return number byte write constant case failure']
['it is up to the caller to free htmlDocDumpMemory_APIParam_0', 'be upto caller free param']
['htmlDocDumpMemory_APIParam_1 is the document', 'param be']
['htmlDocDumpMemory_APIParam_2 is OUT the memory pointer', 'param be memory pointer']
['htmlDocDumpMemory_APIParam_3 is OUT the memory length', 'param be memory length']
['Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemoryFormat_APIParam_3', 'memory return be param']
['it is up to the caller to free htmlDocDumpMemoryFormat_APIParam_0', 'be upto caller free param']
['htmlDocDumpMemoryFormat_APIParam_1 is the document', 'param be']
['htmlDocDumpMemoryFormat_APIParam_2 is OUT the memory pointer', 'param be memory pointer']
['htmlDocDumpMemoryFormat_APIParam_3 is OUT the memory length', 'param be memory length']
['htmlDocDumpMemoryFormat_APIParam_4 is should formatting spaces been added', 'param be should format space be']
['Encoding definition lookup in the Meta tags', 'encode definition lookup']
['htmlGetMetaEncoding_APIParam_1 is the document', 'param be']
['htmlGetMetaEncoding_APIName returns the current encoding as flagged in the HTML source', 'api return current encoding as flag source']
['htmlIsBooleanAttr_APIParam_1 is the htmlIsBooleanAttr_APIParam_1 of the attribute to check', 'param be param attribute check']
['htmlIsBooleanAttr_APIName returns false if the attribute is not boolean, true otherwise', 'api return constant']
['htmlNewDoc_APIParam_1 is htmlNewDoc_APIParam_1 for the dtd , or NULL', 'param be param , null']
['htmlNewDoc_APIName returns a new document', 'api return']
['htmlNewDoc_APIParam_2 is the external ID of the DTD , or NULL', 'param be external -PRON- would , null']
['htmlNewDocNoDtD_APIParam_1 is htmlNewDocNoDtD_APIParam_1 for the dtd , or NULL', 'param be param , null']
['htmlNewDocNoDtD_APIParam_2 is the external ID of the DTD , or NULL', 'param be external -PRON- would , null']
['htmlNewDocNoDtD_APIName returns a new document, do not initialize the DTD if not provided', 'api return , not initialize']
['htmlNodeDump_APIParam_1 is the HTML buffer output', 'param be buffer output']
['Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added', 'recursive behaviour , be print , format return be']
['Creates a new HTML document without a DTD node', 'create without']
['htmlNodeDump_APIParam_2 is the document', 'param be']
['htmlNodeDump_APIParam_3 is the current node', 'param be current']
['htmlNodeDump_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['htmlNodeDumpFile_APIParam_1 is the FILE pointer', 'param be file pointer']
['htmlNodeDumpFile_APIParam_2 is the document', 'param be']
['Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added', 'recursive behaviour , be print , format return be']
['htmlNodeDumpFile_APIParam_3 is the current node', 'param be current']
['Dump an HTML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['htmlNodeDumpFileFormat_APIParam_1 is the FILE pointer', 'param be file pointer']
['htmlNodeDumpFileFormat_APIParam_2 is the document', 'param be']
['htmlNodeDumpFileFormat_APIParam_3 is the current node', 'param be current']
['htmlNodeDumpFileFormat_APIParam_4 is the document htmlNodeDumpFileFormat_APIParam_4', 'param be param']
['htmlNodeDumpFileFormat_APIParam_5 is should formatting spaces been added', 'param be should format space be']
['htmlNodeDumpFileFormat_APIName returns the number of byte written or -1 in case of failure', 'api return number byte write constant case failure']
['Dump an HTML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['htmlNodeDumpFormatOutput_APIParam_2 is the document', 'param be']
['htmlNodeDumpFormatOutput_APIParam_1 is the HTML buffer output', 'param be buffer output']
['htmlNodeDumpFormatOutput_APIParam_3 is the current node', 'param be current']
['htmlNodeDumpFormatOutput_APIParam_4 is the htmlNodeDumpFormatOutput_APIParam_4 string', 'param be param string']
['htmlNodeDumpFormatOutput_APIParam_5 is should formatting spaces been added', 'param be should format space be']
['htmlNodeDumpOutput_APIParam_1 is the HTML buffer output', 'param be buffer output']
['Dump an HTML node, recursive behaviour,children are printed too, and formatting returns/spaces are added', 'recursive behaviour , be print , format be']
['htmlNodeDumpOutput_APIParam_2 is the document', 'param be']
['htmlNodeDumpOutput_APIParam_4 is the htmlNodeDumpOutput_APIParam_4 string', 'param be param string']
['htmlNodeDumpOutput_APIParam_3 is the current node', 'param be current']
['htmlSaveFile_APIParam_1 is the htmlSaveFile_APIParam_1', 'param be param']
['htmlSaveFile_APIParam_2 is the document', 'param be']
['htmlSaveFile_APIName returns the number of byte written or -1 in case of failure', 'api return number byte write constant case failure']
['htmlSaveFileEnc_APIParam_1 is the htmlSaveFileEnc_APIParam_1', 'param be param']
['Dump an HTML document to a file using a given htmlSaveFileEnc_APIParam_3 and formatting returns/spaces are added', 'file use give param formatting be']
['htmlSaveFileEnc_APIParam_2 is the document', 'param be']
['htmlSaveFileEnc_APIParam_3 is the document htmlSaveFileEnc_APIParam_3', 'param be param']
['htmlSaveFileEnc_APIName returns the number of byte written or -1 in case of failure', 'api return number byte write constant case failure']
['Dump an HTML document to a file using a given htmlSaveFileFormat_APIParam_3', 'file use give param']
['htmlSaveFileFormat_APIParam_1 is the htmlSaveFileFormat_APIParam_1', 'param be param']
['the stdout file is used', 'stdout file be use']
['htmlSaveFileFormat_APIParam_2 is the document', 'param be']
['htmlSaveFileFormat_APIParam_3 is the document htmlSaveFileFormat_APIParam_3', 'param be param']
['htmlSaveFileFormat_APIParam_4 is should formatting spaces been added', 'param be should format space be']
['htmlSaveFileFormat_APIName returns the number of byte written or -1 in case of failure', 'api return number byte write constant case failure']
['htmlSetMetaEncoding_APIParam_1 is the document', 'param be']
['htmlSetMetaEncoding_APIParam_2 is the htmlSetMetaEncoding_APIParam_2 string', 'param be param string']
['Sets the current htmlSetMetaEncoding_APIParam_2 in the Meta tags NOTE', 'set current param note']
['this will not change the document content htmlSetMetaEncoding_APIParam_2 , just the META flag associated', 'not change content param , flag associate']
['htmlSetMetaEncoding_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['A callback for the xmlNanoFTPGet command', 'callback api command']
['ftpDataCallback_APIParam_1 is the user provided context', 'param be user provide context']
['ftpDataCallback_APIParam_2 is the ftpDataCallback_APIParam_2 received', 'param be param receive']
['ftpDataCallback_APIParam_3 is ftpDataCallback_APIParam_3 size in bytes', 'param be param size byte']
['A callback for the xmlNanoFTPList command', 'callback api command']
['Note that only one of ftpListCallback_APIParam_8 and ftpListCallback_APIParam_10', 'only one param']
['minute are specified', 'be specify']
['ftpListCallback_APIParam_1 is user provided data for the callback', 'param be user provide datum callback']
['ftpListCallback_APIParam_2 is the file name', 'param be file name']
['ftpListCallback_APIParam_3 is the attribute string', 'param be attribute string']
['ftpListCallback_APIParam_4 is the ftpListCallback_APIParam_4 string', 'param be param string']
['ftpListCallback_APIParam_5 is the ftpListCallback_APIParam_5 string', 'param be param string']
['ftpListCallback_APIParam_6 is the file ftpListCallback_APIParam_6', 'param be file param']
['ftpListCallback_APIParam_7 is the link count', 'param be link count']
['ftpListCallback_APIParam_8 is the ftpListCallback_APIParam_8', 'param be param']
['ftpListCallback_APIParam_9 is the ftpListCallback_APIParam_9', 'param be param']
['ftpListCallback_APIParam_10 is the ftpListCallback_APIParam_10', 'param be param']
['ftpListCallback_APIParam_11 is the ftpListCallback_APIParam_11', 'param be param']
['ftpListCallback_APIParam_12 is the minute', 'param be']
['xmlNanoFTPCheckResponse_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPCheckResponse_APIName returns the code number, or 0', 'api return code number , constant']
['Cleanup the FTP protocol layer', 'cleanup protocol layer']
['This cleanup proxy informations', 'cleanup proxy information']
['Close the connection and both control and transport', 'close connection control transport']
['xmlNanoFTPClose_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPClose_APIName returns -1 incase of error, 0 otherwise', 'api return constant error , constant otherwise']
['Close the data connection from the server', 'close datum connection server']
['xmlNanoFTPCloseConnection_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPCloseConnection_APIName returns -1 incase of error, 0 otherwise', 'api return constant error , constant otherwise']
['Tries to open a control connection', 'open control connection']
['xmlNanoFTPConnect_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPConnect_APIName returns -1 in case of error, 0 otherwise', 'api return constant case error , constant otherwise']
['Tries to open a control connection to the given server/port', 'open control connection give']
['xmlNanoFTPConnectTo_APIParam_1 is an FTP xmlNanoFTPConnectTo_APIParam_1 name', 'param be param name']
['xmlNanoFTPConnectTo_APIParam_2 is the xmlNanoFTPConnectTo_APIParam_2', 'param be param']
['xmlNanoFTPConnectTo_APIName returns an fTP context or NULL if xmlNanoFTPConnectTo_APIName failed', 'api return context null']
['Tries to change the remote xmlNanoFTPCwd_APIParam_2', 'change remote param']
['xmlNanoFTPCwd_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPCwd_APIParam_2 is a xmlNanoFTPCwd_APIParam_2 on the server', 'param be param server']
['xmlNanoFTPCwd_APIName returns -1 incase of error, 1 if CWD worked, 0 if CWD failed', 'api return constant error , constant']
['Tries to delete an item from server', 'delete server']
['xmlNanoFTPDele_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPDele_APIParam_2 is a xmlNanoFTPDele_APIParam_2 or directory on the server', 'param be param directory server']
['Frees the context after closing the connection', 'free context after close connection']
['xmlNanoFTPDele_APIName returns -1 incase of error, 1 if DELE worked, 0 if it failed', 'api return constant error , constant']
['xmlNanoFTPFreeCtxt_APIParam_1 is an FTP context', 'param be context']
['Fetch the given file from the server', 'fetch give file server']
['All data are passed back in the callbacks', 'datum be pass back callback']
['The last xmlNanoFTPGet_APIParam_2 has a size of 0 block', 'last param have size constant block']
['xmlNanoFTPGet_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPGet_APIParam_2 is the user xmlNanoFTPGet_APIParam_2', 'param be user param']
['xmlNanoFTPGet_APIParam_3 is the user xmlNanoFTPGet_APIParam_2 data', 'param be user param datum']
['xmlNanoFTPGet_APIParam_4 is the file to retrieve', 'param be file retrieve']
['xmlNanoFTPGet_APIName returns -1 incase of error, 0 otherwise', 'api return constant error , constant otherwise']
['Try to open a data connection to the server', 'open data connection server']
['Currently only passive mode is supported', 'currently only passive mode be support']
['xmlNanoFTPGetConnection_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPGetConnection_APIName returns -1 incase of error, 0 otherwise', 'api return constant error , constant otherwise']
['Get the response from the FTP server after a command', 'get response server after command']
['xmlNanoFTPGetResponse_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPGetResponse_APIName returns the code number', 'api return code number']
['Initiate fetch of the given file from the server', 'fetch give file server']
['xmlNanoFTPGetSocket_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPGetSocket_APIParam_2 is the file to retrieve', 'param be file retrieve']
['Initialize the FTP protocol layer', 'initialize protocol layer']
['xmlNanoFTPGetSocket_APIName returns the socket for the data connection, or <0 in case of error', 'api return socket datum connection , constant case error']
['Currently it just checks for proxy informations , and get the hostname', 'currently check proxy information , get hostname']
['Do a listing on the server', 'listing server']
['All files info are passed back in the callbacks', 'file info be pass back callback']
['xmlNanoFTPList_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPList_APIParam_2 is the user xmlNanoFTPList_APIParam_2', 'param be user param']
['xmlNanoFTPList_APIParam_3 is the user xmlNanoFTPList_APIParam_2 data', 'param be user param datum']
['xmlNanoFTPList_APIParam_4 is optional files to list', 'param be optional file list']
['xmlNanoFTPList_APIName returns -1 incase of error, 0 otherwise', 'api return constant error , constant otherwise']
['Allocate and initialize a new FTP context', 'initialize context']
['xmlNanoFTPNewCtxt_APIParam_1 is The xmlNanoFTPNewCtxt_APIParam_1 used to initialize the context', 'param be param use initialize context']
['xmlNanoFTPNewCtxt_APIName returns an FTP context or NULL in case of error', 'api return context null case error']
['xmlNanoFTPOpen_APIParam_1 is the xmlNanoFTPOpen_APIParam_1 to the resource', 'param be param resource']
['xmlNanoFTPOpen_APIName returns an FTP context, or NULL', 'api return context , null']
['Start to fetch the given ftp', 'start fetch give']
['Setup the FTP proxy informations', 'proxy information']
['This can also be done by using ftp_proxy ftp_proxy_user and ftp_proxy_password environment variables', 'can be do by use param environment variable']
['xmlNanoFTPProxy_APIParam_1 is the proxy xmlNanoFTPProxy_APIParam_1 name', 'param be proxy param name']
['xmlNanoFTPProxy_APIParam_2 is the proxy xmlNanoFTPProxy_APIParam_2', 'param be proxy param']
['xmlNanoFTPProxy_APIParam_3 is the proxy xmlNanoFTPProxy_APIParam_3 name', 'param be proxy param name']
['xmlNanoFTPProxy_APIParam_4 is the proxy password', 'param be proxy password']
['xmlNanoFTPProxy_APIParam_5 is the xmlNanoFTPProxy_APIParam_5 of proxy 1 for using SITE , 2 for USER a@b', 'param be param proxy constant use , constant user']
['Send a QUIT command to the server', 'send quit command server']
['xmlNanoFTPQuit_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPQuit_APIName returns -1 in case of error, 0 otherwise', 'api return constant case error , constant otherwise']
['This is a blocking call', 'be block call']
['xmlNanoFTPRead_APIParam_1 is the FTP context', 'param be context']
['xmlNanoFTPRead_APIName tries to read @len bytes from the existing FTP connection and saves them in @dest', 'api read byte connection dest']
['xmlNanoFTPRead_APIParam_2 is a buffer', 'param be buffer']
['xmlNanoFTPRead_APIParam_3 is the buffer length', 'param be buffer length']
['xmlNanoFTPRead_APIName returns the number of byte read', 'api return number byte read']
['0 is an indication of an end of connection', 'constant be indication end connection']
['-1 indicates a parameter error', 'constant indicate param error']
['xmlNanoFTPScanProxy_APIParam_1 is The proxy xmlNanoFTPScanProxy_APIParam_1 used to initialize the proxy context', 'param be proxy param use initialize proxy context']
['Initialize the FTP Proxy context by parsing the xmlNanoFTPScanProxy_APIParam_1 and finding the protocol host port it indicates', 'initialize proxy context by parse param find protocol host port indicate']
['Update an FTP context by parsing the xmlNanoFTPUpdateURL_APIParam_2 and finding new path it indicates', 'update context by parse param finding path indicate']
['It indicates a new connection has to be established', 'indicate connection have be establish']
['xmlNanoFTPUpdateURL_APIParam_1 is an FTP context', 'param be context']
['xmlNanoFTPUpdateURL_APIParam_2 is The xmlNanoFTPUpdateURL_APIParam_2 used to update the context', 'param be param use update context']
['xmlNanoFTPUpdateURL_APIName returns 0 if Ok, -1 in case of error', 'api return constant if , constant case error']
['Cleanup the default Schemas type library associated to RelaxNG', 'cleanup default type library associate']
['Dump a RelaxNG structure back', 'structure back']
['the error is raised', 'error be raise']
['xmlRelaxNGDump_APIParam_2 is a xmlRelaxNGDump_APIParam_2 structure', 'param be param structure']
['xmlRelaxNGDump_APIParam_1 is the file xmlRelaxNGDump_APIParam_1', 'param be file param']
['xmlRelaxNGDumpTree_APIParam_1 is the file xmlRelaxNGDumpTree_APIParam_1', 'param be file param']
['xmlRelaxNGDumpTree_APIParam_2 is a xmlRelaxNGDumpTree_APIParam_2 structure', 'param be param structure']
['Deallocate a RelaxNG structure', 'deallocate structure']
['xmlRelaxNGFree_APIParam_1 is a xmlRelaxNGFree_APIParam_1 structure', 'param be param structure']
['Free the resources associated to the schema parser context', 'free resource associate parser context']
['xmlRelaxNGFreeParserCtxt_APIParam_1 is the schema parser context', 'param be parser context']
['Free the resources associated to the schema validation context', 'free resource associate validation context']
['xmlRelaxNGFreeValidCtxt_APIParam_1 is the schema validation context', 'param be validation context']
['Get the callback information used to handle errors for a validation context', 'get callback information use error validation context']
['xmlRelaxNGGetParserErrors_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGGetParserErrors_APIParam_2 is the error callback result', 'param be error callback result']
['xmlRelaxNGGetParserErrors_APIParam_3 is the warning callback result', 'param be warn callback result']
['Should be like ftp', 'should be like']
['xmlRelaxNGGetParserErrors_APIParam_4 is contextual data for the callbacks result', 'param be contextual data callback result']
['xmlRelaxNGGetParserErrors_APIName returns -1 in case of failure, 0 otherwise', 'api return constant case failure , constant otherwise']
['3128 / A NULL xmlNanoFTPScanProxy_APIParam_1 cleans up proxy informations', 'constant null param clean proxy information']
['Get the error and warning callback informations', 'get error warning callback information']
['xmlRelaxNGGetValidErrors_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGGetValidErrors_APIParam_2 is the error function result', 'param be error function result']
['xmlRelaxNGGetValidErrors_APIParam_3 is the warning function result', 'param be warn function result']
['xmlRelaxNGGetValidErrors_APIParam_4 is the functions context result', 'param be function context result']
['xmlRelaxNGGetValidErrors_APIName returns -1 in case of error and 0 otherwise', 'api return constant case error constant otherwise']
['Initilize the default type libraries', 'initilize default type library']
['xmlRelaxNGInitTypes_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Create an XML RelaxNGs parser context for that document', 'create parser context']
['xmlRelaxNGNewDocParserCtxt_APIParam_1 is a preparsed document tree', 'param be preparse']
['the @doc parameter is duplicated internally', 'param be duplicate internally']
['xmlRelaxNGNewDocParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML RelaxNGs parse context for that memory xmlRelaxNGNewMemParserCtxt_APIParam_1 expected to contain an XML RelaxNGs file', 'create parse context memory param expect contain file']
['xmlRelaxNGNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas', 'param be pointer char array contain']
['xmlRelaxNGNewMemParserCtxt_APIParam_2 is the xmlRelaxNGNewMemParserCtxt_APIParam_2 of the array', 'param be param array']
['xmlRelaxNGNewMemParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['xmlRelaxNGNewParserCtxt_APIParam_1 is the location of the schema', 'param be location']
['xmlRelaxNGNewParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML RelaxNGs parse context for that file/resource expected to contain an XML RelaxNGs file', 'create parse context expect contain file']
['xmlRelaxNGParse_APIParam_1 is a Relax-NG parser context', 'param be param parser context']
['Create an XML RelaxNGs validation context based on the given xmlRelaxNGNewValidCtxt_APIParam_1', 'create validation context base give param']
['xmlRelaxNGNewValidCtxt_APIName returns the validation context or NULL in case of error', 'api return validation context null case error']
['parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances', 'parse definition resource build internal which can be use validate instance']
['xmlRelaxNGNewValidCtxt_APIParam_1 is a precompiled XML RelaxNGs', 'param be precompile']
['xmlRelaxNGParse_APIName returns the internal XML RelaxNG structure built from the resource or NULL in case of error', 'api return internal structure build resource null case error']
['Set the callback functions used to handle errors for a validation context', 'set callback function use error validation context']
['xmlRelaxNGSetParserErrors_APIParam_2 is the error callback', 'param be error callback']
['xmlRelaxNGSetParserErrors_APIParam_3 is the warning callback', 'param be warn callback']
['xmlRelaxNGSetParserErrors_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGSetParserErrors_APIParam_4 is contextual data for the callbacks', 'param be contextual data callback']
['Set the callback functions used to handle errors for a parsing context', 'set callback function use error parse context']
['xmlRelaxNGSetParserStructuredErrors_APIParam_1 is a Relax-NG parser context', 'param be param parser context']
['xmlRelaxNGSetParserStructuredErrors_APIParam_2 is the error callback', 'param be error callback']
['xmlRelaxNGSetParserStructuredErrors_APIParam_3 is contextual data for the callbacks', 'param be contextual data callback']
['Set the error and warning callback informations', 'set error warning callback information']
['xmlRelaxNGSetValidErrors_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGSetValidErrors_APIParam_2 is the error function', 'param be error function']
['xmlRelaxNGSetValidErrors_APIParam_3 is the warning function', 'param be warn function']
['xmlRelaxNGSetValidErrors_APIParam_4 is the functions context', 'param be function context']
['Set the structured error callback', 'set structured error callback']
['xmlRelaxNGSetValidStructuredErrors_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGSetValidStructuredErrors_APIParam_2 is the structured error function', 'param be structured error function']
['xmlRelaxNGSetValidStructuredErrors_APIParam_3 is the functions context', 'param be function context']
['Validate a document tree in memory', 'validate memory']
['xmlRelaxNGValidateDoc_APIParam_1 is a Relax-NG validation context', 'param be param validation context']
['xmlRelaxNGValidateDoc_APIParam_2 is a parsed document tree', 'param be parse']
['Validate a full subtree when xmlRelaxNGValidatePushElement_APIName returned 0 and the content of the node has been expanded', 'validate full api return constant content have be expand']
['xmlRelaxNGValidateFullElement_APIParam_1 is the validation context', 'param be validation context']
['xmlRelaxNGValidateFullElement_APIParam_3 is an element instance', 'param be element instance']
['xmlRelaxNGValidateFullElement_APIParam_2 is a document instance', 'param be instance']
['xmlRelaxNGValidateDoc_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant']
['Pop the element end from the RelaxNG validation stack', 'element end validation stack']
['xmlRelaxNGValidateFullElement_APIName returns 1 if no validation problem was found or -1 in case of error', 'api return constant']
['xmlRelaxNGValidatePopElement_APIParam_1 is the RelaxNG validation context', 'param be validation context']
['xmlRelaxNGValidatePopElement_APIParam_2 is a document instance', 'param be instance']
['xmlRelaxNGValidatePopElement_APIParam_3 is an element instance', 'param be element instance']
['xmlRelaxNGValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise', 'api return constant']
['check the CData parsed for validation in the current stack', 'check parse validation current stack']
['xmlRelaxNGValidatePushCData_APIParam_1 is the RelaxNG validation context', 'param be validation context']
['xmlRelaxNGValidatePushCData_APIParam_2 is some character xmlRelaxNGValidatePushCData_APIParam_2 read', 'param be character param read']
['xmlRelaxNGValidatePushCData_APIParam_3 is the length of the xmlRelaxNGValidatePushCData_APIParam_2', 'param be length param']
['xmlRelaxNGValidatePushCData_APIName returns 1 if no validation problem was found or -1 otherwise', 'api return constant']
['Push a new element start on the RelaxNG validation stack', 'element start validation stack']
['xmlRelaxNGValidatePushElement_APIParam_1 is the validation context', 'param be validation context']
['xmlRelaxNGValidatePushElement_APIParam_2 is a document instance', 'param be instance']
['xmlRelaxNGValidatePushElement_APIParam_3 is an element instance', 'param be element instance']
['Signature of an error callback from a Relax-NG validation', 'signature error callback param validation']
['xmlRelaxNGValidityErrorFunc_APIParam_1 is xmlRelaxNGValidityErrorFunc_APIParam_3 validation context', 'param be param validation context']
['xmlRelaxNGValidityErrorFunc_APIParam_2 is xmlRelaxNGValidityErrorFunc_APIParam_3 message xmlRelaxNGValidityErrorFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['xmlRelaxNGValidatePushElement_APIName returns 1 if no validation problem was found or 0 if validating the element requires a full node, and -1 in case of error', 'api return constant']
['Signature of a warning callback from a Relax-NG validation', 'signature warning callback param validation']
['xmlRelaxNGValidityWarningFunc_APIParam_1 is xmlRelaxNGValidityWarningFunc_APIParam_3 validation context', 'param be param validation context']
['xmlRelaxNGValidityWarningFunc_APIParam_2 is xmlRelaxNGValidityWarningFunc_APIParam_3 message xmlRelaxNGValidityWarningFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['xmlRelaxParserSetFlag_APIParam_1 is a RelaxNG parser context', 'param be parser context']
['xmlRelaxParserSetFlag_APIParam_2 is a set of xmlRelaxParserSetFlag_APIParam_2 values', 'param be set param value']
['Semi private function used to pass informations to a parser context which are a combination of xmlRelaxNGParserFlag', 'private function use pass information parser context which be combination']
['xmlRelaxParserSetFlag_APIName returns 0 if success and -1 in case of error', 'api return constant case error']
['Dumps the canonized image of given XML document into memory', 'canonize give memory']
["For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''", 'detail see canonical exclusive']
['xmlC14NDocDumpMemory_APIParam_1 is the XML document for canonization', 'param be']
['xmlC14NDocDumpMemory_APIParam_3 is the c14n xmlC14NDocDumpMemory_APIParam_3', 'param be param']
['xmlC14NDocDumpMemory_APIParam_5 include comments in the result or not', 'param include comment result not']
['xmlC14NDocDumpMemory_APIName returns the number of bytes written on success or a negative value on fail', 'api return number byte write success negative value fail']
['Dumps the canonized image of given XML document into the file', 'canonize give file']
['xmlC14NDocDumpMemory_APIParam_2 is the xmlC14NDocDumpMemory_APIParam_2 set to be included in the canonized image or NULL', 'param be param set be include canonize null']
['xmlC14NDocDumpMemory_APIParam_6 is the memory pointer for allocated canonical XML text', 'param be memory pointer canonical text']
["For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''", 'detail see canonical exclusive']
['xmlC14NDocSave_APIParam_1 is the XML document for canonization', 'param be']
['the caller of xmlC14NDocDumpMemory_APIName is responsible for calling xmlFree_APIName to free allocated memory', 'caller api be responsible call api free allocated memory']
['xmlC14NDocSave_APIParam_3 is the c14n xmlC14NDocSave_APIParam_3', 'param be param']
['xmlC14NDocDumpMemory_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL', 'param be list inclusive prefix end null null']
['xmlC14NDocSave_APIParam_5 include comments in the result or not', 'param include comment result not']
['xmlC14NDocSave_APIParam_6 is the xmlC14NDocSave_APIParam_6 to store canonical XML image', 'param be param store canonical']
['xmlC14NDocSave_APIName returns the number of bytes written success or a negative value on fail', 'api return number byte write success negative value fail']
['xmlC14NDocSave_APIParam_7 is the xmlC14NDocSave_APIParam_7 level -1 - libxml default , 0 - uncompressed , > 0 - xmlC14NDocSave_APIParam_7 level', 'param be param level constant _ default , constant _ uncompressed , constant _ param level']
['xmlC14NDocSave_APIParam_2 is the xmlC14NDocSave_APIParam_2 set to be included in the canonized image or NULL', 'param be param set be include canonize null']
['Dumps the canonized image of given XML document into the provided buffer', 'canonize give provide buffer']
['xmlC14NDocSaveTo_APIParam_1 is the XML document for canonization', 'param be']
["For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''", 'detail see canonical exclusive']
['xmlC14NDocSave_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL', 'param be list inclusive prefix end null null']
['xmlC14NDocSaveTo_APIParam_3 is the c14n xmlC14NDocSaveTo_APIParam_3', 'param be param']
['xmlC14NDocSaveTo_APIParam_2 is the xmlC14NDocSaveTo_APIParam_2 set to be included in the canonized image or NULL', 'param be param set be include canonize null']
['xmlC14NDocSaveTo_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL', 'param be list inclusive prefix end null null']
['xmlC14NDocSaveTo_APIParam_5 include comments in the result or not', 'param include comment result not']
['xmlC14NDocSaveTo_APIName returns non-negative value on success or a negative value on fail', 'api return param value success negative value fail']
['xmlC14NDocSaveTo_APIParam_6 is the output buffer to store canonical XML', 'param be output buffer store canonical']
['this buffer MUST have encoder == NULL', 'buffer must have null']
['Dumps the canonized image of given XML document into the provided buffer', 'canonize give provide buffer']
["For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''", 'detail see canonical exclusive']
['xmlC14NExecute_APIParam_1 is the XML document for canonization', 'param be']
['xmlC14NExecute_APIParam_2 is the function to use to determine is node visible or not', 'param be function use determine be visible not']
['xmlC14NExecute_APIParam_3 is the first parameter for @is_visible_callback function', 'param be first param function']
['xmlC14NExecute_APIParam_4 is the c14n xmlC14NExecute_APIParam_4', 'param be param']
['xmlC14NExecute_APIParam_6 include comments in the result or not', 'param include comment result not']
['xmlC14NExecute_APIName returns non-negative value on success or a negative value on fail', 'api return param value success negative value fail']
['Signature for a C14N callback on visible nodes', 'signature callback visible']
['xmlC14NExecute_APIParam_7 is the output buffer to store canonical XML', 'param be output buffer store canonical']
['this buffer MUST have encoder == NULL', 'buffer must have null']
['xmlC14NIsVisibleCallback_APIParam_1 is user data', 'param be user datum']
['xmlC14NIsVisibleCallback_APIParam_2 is the curent xmlC14NIsVisibleCallback_APIParam_2', 'param be curent param']
['xmlC14NIsVisibleCallback_APIParam_3 is the xmlC14NIsVisibleCallback_APIParam_3 xmlC14NIsVisibleCallback_APIParam_2', 'param be param']
['xmlC14NExecute_APIParam_5 is the list of inclusive namespace prefixes ended with a NULL or NULL', 'param be list inclusive prefix end null null']
['xmlC14NIsVisibleCallback_APIName returns 1 if the xmlC14NIsVisibleCallback_APIParam_2 should be included', 'api return constant']
['Deallocate all the resources associated to the xmlFreeTextReader_APIParam_1', 'deallocate resource associate param']
['xmlFreeTextReader_APIParam_1 is the xmlTextReaderPtr', 'param be']
['Create an xmlTextReader structure fed with @input', 'create xmltextread structure feed input']
['xmlNewTextReader_APIParam_1 is the xmlParserInputBufferPtr used to read data', 'param be use read datum']
['xmlNewTextReader_APIName returns the new xmlTextReaderPtr or NULL in case of error', 'api return null case error']
['Create an xmlTextReader structure fed with the resource at @URI', 'create xmltextread structure feed resource uri']
['xmlNewTextReaderFilename_APIParam_1 is the xmlNewTextReaderFilename_APIParam_1 of the resource to process', 'param be param resource process']
['xmlNewTextReaderFilename_APIName returns the new xmlTextReaderPtr or NULL in case of error', 'api return null case error']
['xmlNewTextReader_APIParam_2 is the xmlNewTextReader_APIParam_2 information for the source', 'param be param information source']
['Create an xmltextReader for an XML in-memory document', 'create param']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderForDoc_APIParam_1 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['xmlReaderForDoc_APIParam_2 is the base xmlReaderForDoc_APIParam_2 to use for the document', 'param be base param use']
['xmlReaderForDoc_APIParam_3 is the document xmlReaderForDoc_APIParam_3 , or NULL', 'param be param , null']
['xmlReaderForDoc_APIName returns the new reader or NULL in case of error', 'api return null case error']
['xmlReaderForDoc_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlReaderForFd_APIParam_1 is an open file descriptor', 'param be open file descriptor']
['Create an xmltextReader for an XML from a file descriptor', 'create xmltextread file descriptor']
['xmlReaderForFd_APIParam_2 is the base xmlReaderForFd_APIParam_2 to use for the document', 'param be base param use']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderForFd_APIParam_3 is the document xmlReaderForFd_APIParam_3 , or NULL', 'param be param , null']
['xmlReaderForFd_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlReaderForFd_APIName returns the new reader or NULL in case of error', 'api return null case error']
['the file descriptor will not be closed', 'file descriptor not be close']
['NOTE that or reset', 'note reset']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderForFile_APIParam_1 is a file or URL', 'param be file']
['xmlReaderForFile_APIParam_2 is the document xmlReaderForFile_APIParam_2 , or NULL', 'param be param , null']
['xmlReaderForFile_APIParam_3 is a combination of xmlParserOption', 'param be combination']
['xmlReaderForFile_APIName returns the new reader or NULL in case of error', 'api return null case error']
['Create an xmltextReader for an XML document from I/O functions and source', 'create xmltextread function source']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderForIO_APIParam_1 is an I/O read function', 'param be read function']
['xmlReaderForIO_APIParam_2 is an I/O close function', 'param be close function']
['xmlReaderForIO_APIParam_3 is an I/O handler', 'param be handler']
['xmlReaderForIO_APIParam_4 is the base xmlReaderForIO_APIParam_4 to use for the document', 'param be base param use']
['xmlReaderForIO_APIParam_5 is the document xmlReaderForIO_APIParam_5 , or NULL', 'param be param , null']
['xmlReaderForIO_APIParam_6 is a combination of xmlParserOption', 'param be combination']
['xmlReaderForIO_APIName returns the new reader or NULL in case of error', 'api return null case error']
['Create an xmltextReader for an XML in-memory document', 'create param']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderForMemory_APIParam_1 is a pointer to a char array', 'param be pointer char array']
['xmlReaderForMemory_APIParam_2 is the xmlReaderForMemory_APIParam_2 of the array', 'param be param array']
['xmlReaderForMemory_APIParam_3 is the base xmlReaderForMemory_APIParam_3 to use for the document', 'param be base param use']
['xmlReaderForMemory_APIParam_4 is the document xmlReaderForMemory_APIParam_4 , or NULL', 'param be param , null']
['xmlReaderForMemory_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlReaderForMemory_APIName returns the new reader or NULL in case of error', 'api return null case error']
['Setup an xmltextReader to parse an XML in-memory document', 'parse param']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderNewDoc_APIParam_1 is an XML xmlReaderNewDoc_APIParam_1', 'param be param']
['xmlReaderNewDoc_APIParam_2 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['xmlReaderNewDoc_APIParam_3 is the base xmlReaderNewDoc_APIParam_3 to use for the document', 'param be base param use']
['xmlReaderNewDoc_APIParam_4 is the document xmlReaderNewDoc_APIParam_4 , or NULL', 'param be param , null']
['xmlReaderNewDoc_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlReaderNewDoc_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Setup an xmltextReader to parse an XML from a file descriptor', 'parse file descriptor']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderNewFd_APIParam_1 is an XML xmlReaderNewFd_APIParam_1', 'param be param']
['xmlReaderNewFd_APIParam_2 is an open file descriptor', 'param be open file descriptor']
['xmlReaderNewFd_APIParam_3 is the base xmlReaderNewFd_APIParam_3 to use for the document', 'param be base param use']
['the file descriptor will not be closed', 'file descriptor not be close']
['NOTE that or reset', 'note reset']
['xmlReaderNewFd_APIParam_4 is the document xmlReaderNewFd_APIParam_4 , or NULL', 'param be param , null']
['xmlReaderNewFd_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlReaderNewFd_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderNewFile_APIParam_1 is an XML xmlReaderNewFile_APIParam_1', 'param be param']
['xmlReaderNewFile_APIParam_3 is the document xmlReaderNewFile_APIParam_3 , or NULL', 'param be param , null']
['xmlReaderNewFile_APIParam_2 is a file or URL', 'param be file']
['xmlReaderNewFile_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlReaderNewFile_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Setup an xmltextReader to parse an XML document from I/O functions and source', 'parse function source']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderNewIO_APIParam_1 is an XML xmlReaderNewIO_APIParam_1', 'param be param']
['xmlReaderNewIO_APIParam_2 is an I/O read function', 'param be read function']
['xmlReaderNewIO_APIParam_3 is an I/O close function', 'param be close function']
['xmlReaderNewIO_APIParam_4 is an I/O handler', 'param be handler']
['xmlReaderNewIO_APIParam_5 is the base xmlReaderNewIO_APIParam_5 to use for the document', 'param be base param use']
['xmlReaderNewIO_APIParam_6 is the document xmlReaderNewIO_APIParam_6 , or NULL', 'param be param , null']
['xmlReaderNewIO_APIParam_7 is a combination of xmlParserOption', 'param be combination']
['xmlReaderNewIO_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Setup an xmltextReader to parse an XML in-memory document', 'parse param']
['The parsing flags @options are a combination of xmlParserOption', 'parse flag option be combination']
['xmlReaderNewMemory_APIParam_1 is an XML xmlReaderNewMemory_APIParam_1', 'param be param']
['xmlReaderNewMemory_APIParam_2 is a pointer to a char array', 'param be pointer char array']
['xmlReaderNewMemory_APIParam_3 is the xmlReaderNewMemory_APIParam_3 of the array', 'param be param array']
['xmlReaderNewMemory_APIParam_4 is the base xmlReaderNewMemory_APIParam_4 to use for the document', 'param be base param use']
['xmlReaderNewMemory_APIParam_5 is the document xmlReaderNewMemory_APIParam_5 , or NULL', 'param be param , null']
['xmlReaderNewMemory_APIParam_6 is a combination of xmlParserOption', 'param be combination']
['xmlReaderNewMemory_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Setup an xmltextReader to parse a preparsed XML document', 'parse preparse']
['xmlReaderNewWalker_APIParam_1 is an XML xmlReaderNewWalker_APIParam_1', 'param be param']
['xmlReaderNewWalker_APIParam_2 is a preparsed document', 'param be preparse']
['xmlReaderNewWalker_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Create an xmltextReader for a preparsed document', 'create preparse']
['xmlReaderWalker_APIParam_1 is a preparsed document', 'param be preparse']
['xmlReaderWalker_APIName returns the new reader or NULL in case of error', 'api return null case error']
['Provides the number of attributes of the current node', 'provide number attribute current']
['xmlTextReaderAttributeCount_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The base URI of the node', 'base uri']
['xmlTextReaderAttributeCount_APIName returns 0 i no attributes, -1 in case of error or the attribute count', 'api return constant no attribute , constant case error attribute count']
['xmlTextReaderBaseUri_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['See xmlBytesConsumed_APIName for more information', 'see api information']
['xmlTextReaderBaseUri_APIName returns the base URI or NULL if not available, if non NULL it need to be freed by the caller', 'api return base uri null']
['xmlTextReaderByteConsumed_APIName provides the current index of the parser used by the xmlTextReaderByteConsumed_APIParam_1 , relative to the start of the current entity', 'api provide current index parser use by param , relative start current']
['xmlTextReaderByteConsumed_APIParam_1 is an XML xmlTextReaderByteConsumed_APIParam_1', 'param be param']
['xmlTextReaderByteConsumed_APIName actually just wraps a call to xmlBytesConsumed_APIName for the parser context associated with the xmlTextReaderByteConsumed_APIParam_1', 'api actually wrap call api parser context associate param']
['xmlTextReaderClose_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed', 'api return index byte begin constant case index could not be']
['xmlTextReaderClose_APIName returns 0 or -1 in case of error', 'api return constant case error']
['The base URI of the node', 'base uri']
['This method releases any resources allocated by the current instance changes the state to Closed and close any underlying input', 'api release resource by current instance change state close close underlying input']
['xmlTextReaderConstBaseUri_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Determine the encoding of the document being read', 'determine encode read']
['xmlTextReaderConstBaseUri_APIName returns the base URI or NULL if not available, the string will be deallocated with the reader', 'api return base uri null if not available , string be deallocate']
['xmlTextReaderConstEncoding_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The string is deallocated with the reader', 'string be deallocate']
['xmlTextReaderConstEncoding_APIName returns a string containing the encoding of the document or NULL in case of error', 'api return string contain encode null case error']
['The local name of the node', 'local name']
['xmlTextReaderConstLocalName_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The qualified name of the node , equal to Prefix', 'qualified name , equal prefix']
['xmlTextReaderConstName_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderConstLocalName_APIName returns the local name or NULL if not available, the string will be deallocated with the reader', 'api return local name null if not available , string be deallocate']
['The URI defining the namespace associated with the node', 'uri defining associate']
['xmlTextReaderConstName_APIName returns the local name or NULL if not available, the string is deallocated with the reader', 'api return local name null if not available , string be deallocate']
['xmlTextReaderConstNamespaceUri_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderConstNamespaceUri_APIName returns the namespace URI or NULL if not available, the string will be deallocated with the reader', 'api return uri null']
['A shorthand reference to the namespace associated with the node', 'reference associate']
['xmlTextReaderConstPrefix_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderConstPrefix_APIName returns the prefix or NULL if not available, the string is deallocated with the reader', 'api return prefix null']
['xmlTextReaderConstString_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Get an interned string from the xmlTextReaderConstString_APIParam_1 , allows to speedup string name comparisons', 'get interned string param , allow string name comparison']
['xmlTextReaderConstString_APIParam_2 is the string to intern', 'param be stre']
['The string will be deallocated with the reader', 'string be deallocate']
['xmlTextReaderConstString_APIName returns an interned copy of the string or NULL in case of error', 'api return copy string null case error']
['xmlTextReaderConstValue_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderConstValue_APIName returns the string or NULL if not available', 'api return string null']
['The result will be deallocated on the next Read_APIName operation', 'result be deallocate api operation']
['lang scope within which the node resides', 'within which reside']
['Provides the text value of the node', 'provide text value']
['xmlTextReaderConstXmlLang_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderConstXmlLang_APIName returns the xmllang value or NULL if none exists', 'api return value null']
['Determine the XML version of the document being read', 'determine version read']
['xmlTextReaderConstXmlVersion_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The string is deallocated with the reader', 'string be deallocate']
['xmlTextReaderConstXmlVersion_APIName returns a string containing the XML version of the document or NULL in case of error', 'api return string contain version null case error']
['xmlTextReaderCurrentDoc_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderCurrentDoc_APIName returns the xmlDocPtr or NULL in case of error', 'api return null case error']
['Hacking interface allowing to get the xmlDocPtr correponding to the current document being accessed by the xmlTextReader', 'api allow get current access by']
['This is dangerous', 'be dangerous']
['Hacking interface allowing to get the xmlNodePtr correponding to the current node being accessed by the xmlTextReader', 'api allow get current access by']
['xmlTextReaderCurrentNode_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderCurrentNode_APIName returns the xmlNodePtr or NULL in case of error', 'api return null case error']
['xmlTextReaderDepth_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderDepth_APIName returns the depth or -1 in case of error', 'api return constant case error']
['as a result of this call , the xmlTextReaderCurrentDoc_APIParam_1 will not destroy the associated XML document and calling xmlFreeDoc_APIName on the result is needed once the xmlTextReaderCurrentDoc_APIParam_1 parsing has finished', 'as result call , param not destroy associate call api result be need param parsing have finish']
['xmlTextReaderErrorFunc_APIParam_1 is the user argument', 'param be user param']
['Signature of an error callback from a reader parser', 'signature error callback parser']
['xmlTextReaderErrorFunc_APIParam_2 is the message', 'param be message']
['xmlTextReaderErrorFunc_APIParam_3 is the xmlTextReaderErrorFunc_APIParam_3 of the error', 'param be param error']
['xmlTextReaderErrorFunc_APIParam_4 is a xmlTextReaderErrorFunc_APIParam_4 indicating where the error occurred', 'param be param indicate error occur']
['Reads the contents of the current node and the full subtree', 'read content current full']
['It makes the subtree available until the next xmlTextReaderRead_APIName call', 'make available until api call']
['xmlTextReaderExpand_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderExpand_APIName returns a node pointer valid until the next xmlTextReaderRead_APIName call or NULL in case of error', 'api return pointer valid until api call null case error']
['Provides the value of the attribute with the specified qualified xmlTextReaderGetAttribute_APIParam_2', 'provide value attribute specify qualified param']
['xmlTextReaderGetAttribute_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderGetAttribute_APIParam_2 is the qualified xmlTextReaderGetAttribute_APIParam_2 of the attribute', 'param be qualified param attribute']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['xmlTextReaderGetAttribute_APIName returns a string containing the value of the specified attribute, or NULL in case of error', 'api return string contain value specify attribute , null case error']
['xmlTextReaderGetAttributeNo_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Provides the value of the attribute with the specified index relative to the containing element', 'provide value attribute specify index relative contain element']
['xmlTextReaderGetAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element', 'param be param index attribute relative contain element']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['xmlTextReaderGetAttributeNo_APIName returns a string containing the value of the specified attribute, or NULL in case of error', 'api return string contain value specify attribute , null case error']
['Provides the value of the specified attribute', 'provide value specify attribute']
['xmlTextReaderGetAttributeNs_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderGetAttributeNs_APIParam_2 is the local name of the attribute', 'param be local name attribute']
['xmlTextReaderGetAttributeNs_APIParam_3 is the namespace URI of the attribute', 'param be uri attribute']
['xmlTextReaderGetAttributeNs_APIName returns a string containing the value of the specified attribute, or NULL in case of error', 'api return string contain value specify attribute , null case error']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['Retrieve the error callback function and user argument', 'retrieve error callback function user param']
['xmlTextReaderGetErrorHandler_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderGetErrorHandler_APIParam_3 is a user argument', 'param be user param']
['xmlTextReaderGetErrorHandler_APIParam_2 is the callback function or NULL is no callback has been registered', 'param be callback function null be no callback have be register']
['Provide the column number of the current parsing point', 'provide number current parsing point']
['xmlTextReaderGetParserColumnNumber_APIParam_1 is the user data', 'param be user datum']
['xmlTextReaderGetParserColumnNumber_APIName returns an int or 0 if not available', 'api return int constant if not available']
['Provide the line number of the current parsing point', 'provide line number current parsing point']
['xmlTextReaderGetParserLineNumber_APIParam_1 is the user data', 'param be user datum']
['xmlTextReaderGetParserLineNumber_APIName returns an int or 0 if not available', 'api return int constant if not available']
['Read the parser internal property', 'read parser internal property']
['xmlTextReaderGetParserProp_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderGetParserProp_APIParam_2 is the xmlParserProperties to get', 'param be get']
['xmlTextReaderGetParserProp_APIName returns the value, usually 0 or 1, or -1 in case of error', 'api return value , usually constant case error']
['Method to get the remainder of the buffered XML', 'method get buffer']
['Best would be to rewrite it differently', 'good would be rewrite differently']
['xmlTextReaderGetRemainder_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['this method stops the parser, set its state to End Of File and return the input stream with what is left that the parser did not use', 'api stop parser , set state end file return input stream be parser do not use']
['xmlTextReaderGetRemainder_APIName returns the xmlParserInputBufferPtr attached to the XML or NULL in case of error', 'api return attach null case error']
['Whether the node has attributes', 'whether have attribute']
['The implementation is not good , the parser certainly procgressed past what left in reader - > input , and there is an allocation problem', 'implementation be not good , parser certainly procgresse past _ input , be allocation problem']
['xmlTextReaderHasAttributes_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderHasAttributes_APIName returns 1 if true, 0 if false, and -1 in case or error', 'api return constant']
['Whether the node can have a text value', 'whether can have text value']
['xmlTextReaderHasValue_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderIsDefault_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderHasValue_APIName returns 1 if true, 0 if false, and -1 in case or error', 'api return constant']
['Whether an Attribute node was generated from the default value defined in the DTD or schema', 'whether attribute be generate default value define']
['xmlTextReaderIsEmptyElement_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderIsDefault_APIName returns 0 if not defaulted, 1 if defaulted, and -1 in case of error', 'api return constant  error']
['xmlTextReaderIsEmptyElement_APIName returns 1 if empty, 0 if not and -1 in case of error', 'api return constant']
['Determine whether the current node is a namespace declaration rather than a regular attribute', 'determine whether current be declaration rather regular attribute']
['xmlTextReaderIsNamespaceDecl_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Retrieve the validity status from the parser context', 'retrieve validity status parser context']
['xmlTextReaderIsValid_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The local name of the node', 'local name']
['xmlTextReaderLocalName_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Obtain the base URI for the given xmlTextReaderLocatorBaseURI_APIParam_1', 'obtain base uri give param']
['xmlTextReaderIsValid_APIName returns the flag value 1 if valid, 0 if no, and -1 in case of error', 'api return flag value constant if valid , constant if no , constant case error']
['xmlTextReaderIsNamespaceDecl_APIName returns 1 if the current node is a namespace declaration, 0 if the current node is a regular attribute or other type of node, or -1 in case of error', 'api return constant']
['xmlTextReaderLocatorBaseURI_APIParam_1 is the xmlTextReaderLocatorPtr used', 'param be use']
['Obtain the line number for the given xmlTextReaderLocatorLineNumber_APIParam_1', 'obtain line number give param']
['xmlTextReaderLocalName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller', 'api return local name null  , if non null nee be free by caller']
['xmlTextReaderLocatorLineNumber_APIParam_1 is the xmlTextReaderLocatorPtr used', 'param be use']
['xmlTextReaderLocatorLineNumber_APIName returns the line number or -1 in case of error', 'api return line number constant case error']
['xmlTextReaderLocatorBaseURI_APIName returns the base URI or NULL in case of error, if non NULL it need to be freed by the caller', 'api return base uri null case error']
['Resolves a namespace xmlTextReaderLookupNamespace_APIParam_2 in the scope of the current element', 'resolve param current element']
['xmlTextReaderLookupNamespace_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['To return the default namespace, specify NULL', 'return default , specify null']
['xmlTextReaderLookupNamespace_APIParam_2 is the xmlTextReaderLookupNamespace_APIParam_2 whose namespace URI is to be resolved', 'param be param whose uri be be resolve']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['xmlTextReaderLookupNamespace_APIName returns a string containing the namespace URI to which the xmlTextReaderLookupNamespace_APIParam_2 maps or NULL in case of error', 'api return string contain uri which param null case error']
['xmlTextReaderMoveToAttribute_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderMoveToAttribute_APIParam_2 is the qualified xmlTextReaderMoveToAttribute_APIParam_2 of the attribute', 'param be qualified param attribute']
['Moves the position of the current instance to the attribute with the specified qualified xmlTextReaderMoveToAttribute_APIParam_2', 'position current instance attribute specify qualified param']
['xmlTextReaderMoveToAttributeNo_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderMoveToAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found', 'api return constant case success , constant case error , constant']
['xmlTextReaderMoveToAttributeNo_APIName returns 1 in case of success, -1 in case of error, 0 if not found', 'api return constant case success , constant case error , constant']
['xmlTextReaderMoveToAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element', 'param be param index attribute relative contain element']
['Moves the position of the current instance to the attribute with the specified index relative to the containing element', 'position current instance attribute specify index relative contain element']
['xmlTextReaderMoveToAttributeNs_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderMoveToAttributeNs_APIParam_2 is the local name of the attribute', 'param be local name attribute']
['Moves the position of the current instance to the attribute with the specified local name and namespace URI', 'position current instance attribute specify local name uri']
['xmlTextReaderMoveToAttributeNs_APIParam_3 is the namespace URI of the attribute', 'param be uri attribute']
['xmlTextReaderMoveToAttributeNs_APIName returns 1 in case of success, -1 in case of error, 0 if not found', 'api return constant case success , constant case error , constant']
['xmlTextReaderMoveToElement_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Moves the position of the current instance to the node that contains the current Attribute node', 'position current instance contain current attribute']
['xmlTextReaderMoveToElement_APIName returns 1 in case of success, -1 in case of error, 0 if not moved', 'api return constant case success , constant case error , constant']
['xmlTextReaderMoveToFirstAttribute_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderMoveToNextAttribute_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Moves the position of the current instance to the first attribute associated with the current node', 'position current instance first attribute associate current']
['xmlTextReaderMoveToFirstAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found', 'api return constant case success , constant case error , constant']
['Moves the position of the current instance to the next attribute associated with the current node', 'position current instance attribute associate current']
['The qualified name of the node , equal to Prefix', 'qualified name , equal prefix']
['xmlTextReaderName_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The URI defining the namespace associated with the node', 'uri defining associate']
['xmlTextReaderMoveToNextAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found', 'api return constant case success , constant case error , constant']
['xmlTextReaderNamespaceUri_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderNext_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller', 'api return local name null  , if non null nee be free by caller']
['xmlTextReaderNamespaceUri_APIName returns the namespace URI or NULL if not available, if non NULL it need to be freed by the caller', 'api return uri null']
['Currently implemented only for Readers built on a document', 'currently implement only build']
['xmlTextReaderNext_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error', 'api return constant']
['Skip to the node following the current one in document order', 'skip follow current one order']
['xmlTextReaderNextSibling_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Get the node type of the current node Reference', 'get type current reference']
['xmlTextReaderNodeType_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Skip to the node following the current one in document order', 'skip follow current one order']
['xmlTextReaderNextSibling_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error', 'api return constant']
['xmlTextReaderNodeType_APIName returns the xmlNodeType of the current node or -1 in case of error', 'api return current constant case error']
['The value indicating', 'value indicate']
['xmlTextReaderNormalization_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderNormalization_APIName returns 1 or -1 in case of error', 'api return constant case error']
['The broken bahaviour of accepting out of range character entities like & # 0', 'break accept range character like constant']
['Since attribute value and end of line normalizations are a MUST in the XML specification only the value true is accepted', 'since attribute value end line be must specification only value constant be accept']
['is of course not supported either', 'be not support either']
['A shorthand reference to the namespace associated with the node', 'reference associate']
['xmlTextReaderPrefix_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['This tells the XML Reader to preserve the current node', 'tell preserve current']
['xmlTextReaderPrefix_APIName returns the prefix or NULL if not available, if non NULL it need to be freed by the caller', 'api return prefix null']
['xmlTextReaderPreserve_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderPreserve_APIName returns the xmlNodePtr or NULL in case of error', 'api return null case error']
['xmlTextReaderPreservePattern_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished', 'caller must use api keep result parsing have finish']
['This tells the XML Reader to preserve all nodes matched by the xmlTextReaderPreservePattern_APIParam_2', 'tell preserve match by param']
['xmlTextReaderPreservePattern_APIParam_2 is an XPath subset xmlTextReaderPreservePattern_APIParam_2', 'param be param']
['The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished', 'caller must use api keep result parsing have finish']
['xmlTextReaderPreservePattern_APIName returns a non-negative number in case of success and -1 in case of error', 'api return param number case success constant case error']
['xmlTextReaderPreservePattern_APIParam_3 is the prefix definitions , array of or NULL', 'param be prefix definition , array null']
['The quotation mark character used to enclose the value of an attribute', 'mark character use enclose value attribute']
['xmlTextReaderQuoteChar_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderQuoteChar_APIName returns " or \' and -1 in case of error', 'api return constant case error']
['xmlTextReaderRead_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Parses an attribute value into one or more Text and EntityReference nodes', 'parse attribute value one text']
['Moves the position of the current instance to the next node in the stream , exposing its properties', 'position current instance stream , expose property']
['xmlTextReaderReadAttributeValue_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderRead_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error', 'api return constant']
['xmlTextReaderReadInnerXml_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Reads the contents of the current node , including child nodes and markup', 'read content current , include']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['Reads the contents of the current node , including child nodes and markup', 'read content current , include']
['xmlTextReaderReadOuterXml_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['xmlTextReaderReadInnerXml_APIName returns a string containing the XML content, or NULL if the current node is neither an element nor attribute, or has no child nodes', 'api return string contain content , null  , have no']
['xmlTextReaderReadAttributeValue_APIName returns 1 in case of success, 0 if the xmlTextReaderReadAttributeValue_APIParam_1 was not positionned on an ttribute node or all the attribute values have been read, or -1 in case of error', 'api return constant case success , constant case error']
['Gets the read state of the xmlTextReaderReadState_APIParam_1', 'get read state param']
['xmlTextReaderReadOuterXml_APIName returns a string containing the node and any XML content, or NULL if the current node cannot be serialized', 'api return string contain content , null']
['xmlTextReaderReadState_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderReadState_APIName returns the state value, or -1 in case of error', 'api return state value , constant case error']
['Reads the contents of an element or a text node as a string', 'read content element text as string']
['xmlTextReaderReadString_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['The string must be deallocated by the caller', 'string must be deallocate by caller']
['Use RelaxNG to validate the document as it is processed', 'use validate as be process']
['xmlTextReaderReadString_APIName returns a string containing the contents of the Element or Text node, or NULL if the xmlTextReaderReadString_APIParam_1 is positioned on any other type of node', 'api return string contain content element text , null']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderRelaxNGSetSchema_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['@ The @schema should not be freed until the xmlTextReaderRelaxNGSetSchema_APIParam_1 is deallocated or its use has been deactivated', 'should not be free until param be deallocate use have be deactivate']
['xmlTextReaderRelaxNGSetSchema_APIParam_2 is a precompiled RelaxNG xmlTextReaderRelaxNGSetSchema_APIParam_2', 'param be precompile param']
['xmlTextReaderRelaxNGSetSchema_APIName returns 0 in case the RelaxNG validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['RelaxNG validation is desactivated', 'validation be desactivate']
['Use RelaxNG schema to validate the document as the document is processed', 'use validate as be process']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderRelaxNGValidate_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderRelaxNGValidate_APIParam_2 is the path to a RelaxNG schema or NULL', 'param be path null']
['xmlTextReaderRelaxNGValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['RelaxNG schema validation is deactivated', 'validation be deactivate']
['Use RelaxNG schema context to validate the document as the document is processed', 'use context validate as be process']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderRelaxNGValidateCtxt_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderRelaxNGValidateCtxt_APIParam_2 is the RelaxNG schema validation context or NULL', 'param be validation context null']
['xmlTextReaderRelaxNGValidateCtxt_APIParam_3 is xmlTextReaderRelaxNGValidateCtxt_APIParam_3', 'param be param']
['xmlTextReaderRelaxNGValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['RelaxNG schema validation is deactivated', 'validation be deactivate']
['Use W3C XSD schema to validate the document as the document is processed', 'use validate as be process']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderSchemaValidate_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSchemaValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['xmlTextReaderSchemaValidate_APIParam_2 is the path to a W3C XSD schema or NULL', 'param be path null']
['XML Schema validation is deactivated', 'validation be deactivate']
['Use W3C XSD schema context to validate the document as the document is processed', 'use context validate as be process']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderSchemaValidateCtxt_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSchemaValidateCtxt_APIParam_2 is the XML Schema validation context or NULL', 'param be validation context null']
['xmlTextReaderSchemaValidateCtxt_APIParam_3 is xmlTextReaderSchemaValidateCtxt_APIParam_3', 'param be param']
['xmlTextReaderSchemaValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['XML Schema validation is deactivated', 'validation be deactivate']
['Register a callback function that will be called on error and warnings', 'register callback function be call error warning']
['xmlTextReaderSetErrorHandler_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSetErrorHandler_APIParam_2 is the callback function to call on error and warnings', 'param be callback function call error warning']
['the default error and warning handlers are restored', 'default error warning handler be restore']
['xmlTextReaderSetErrorHandler_APIParam_3 is a user argument to pass to the callback function', 'param be user param pass callback function']
['Change the parser processing behaviour by changing some of its internal properties', 'change parser processing behaviour by change internal property']
['Note that some properties can only be changed before any read has been done', 'property can only be change before read have be do']
['xmlTextReaderSetParserProp_APIParam_2 is the xmlParserProperties to set', 'param be set']
['xmlTextReaderSetParserProp_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSetParserProp_APIParam_3 is usually 0 or 1 to activate it', 'param be usually constant activate']
['xmlTextReaderSetParserProp_APIName returns 0 if the call was successful, or -1 in case of error', 'api return constant']
['Use XSD Schema to validate the document as it is processed', 'use validate as be process']
['Activation is only possible before the first Read_APIName', 'be only possible before first api']
['xmlTextReaderSetSchema_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSetSchema_APIParam_2 is a precompiled Schema xmlTextReaderSetSchema_APIParam_2', 'param be precompile param']
['@ The @schema should not be freed until the xmlTextReaderSetSchema_APIParam_1 is deallocated or its use has been deactivated', 'should not be free until param be deallocate use have be deactivate']
['xmlTextReaderSetSchema_APIName returns 0 in case the Schema validation could be activated and -1 in case of error', 'api return constant case validation could be activate constant case error']
['Schema validation is desactivated', 'validation be desactivate']
['Register a callback function that will be called on error and warnings', 'register callback function be call error warning']
['xmlTextReaderSetStructuredErrorHandler_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderSetStructuredErrorHandler_APIParam_2 is the callback function to call on error and warnings', 'param be callback function call error warning']
['xmlTextReaderSetStructuredErrorHandler_APIParam_3 is a user argument to pass to the callback function', 'param be user param pass callback function']
['the default error and warning handlers are restored', 'default error warning handler be restore']
['xmlTextReaderSetup_APIParam_1 is an XML xmlTextReaderSetup_APIParam_1', 'param be param']
['xmlTextReaderSetup_APIParam_2 is xmlParserInputBufferPtr used to feed the xmlTextReaderSetup_APIParam_1 , will be destroyed with it', 'param be use feed param , be destroy']
['xmlTextReaderSetup_APIParam_3 is the base xmlTextReaderSetup_APIParam_3 to use for the document', 'param be base param use']
['xmlTextReaderSetup_APIParam_4 is the document xmlTextReaderSetup_APIParam_4 , or NULL', 'param be param , null']
['xmlTextReaderSetup_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlTextReaderSetup_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Determine the standalone status of the document being read', 'determine status read']
['xmlTextReaderStandalone_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderValue_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['xmlTextReaderValue_APIName returns the string or NULL if not available', 'api return string null']
['The result must be deallocated with xmlFree_APIName', 'result must be deallocate api']
['lang scope within which the node resides', 'within which reside']
['Provides the text value of the node', 'provide text value']
['xmlTextReaderXmlLang_APIParam_1 is the xmlTextReaderPtr used', 'param be use']
['Get the authentication header of an HTTP context', 'get authentication header context']
['xmlTextReaderXmlLang_APIName returns the xmllang value or NULL if none exists., if non NULL it need to be freed by the caller', 'api return value null']
['xmlNanoHTTPAuthHeader_APIParam_1 is the HTTP context', 'param be context']
['xmlTextReaderStandalone_APIName returns 1 if the document was declared to be standalone, 0 if it was declared to be not standalone, or -1 if the document did not specify its standalone status or in case of error', 'api return constant']
['xmlNanoHTTPAuthHeader_APIName returns the stashed value of the WWW-Authenticate or Proxy-Authenticate header', 'api return stash value param header']
['Cleanup the HTTP protocol layer', 'cleanup protocol layer']
['xmlNanoHTTPClose_APIParam_1 is the HTTP context', 'param be context']
['Provides the specified content length from the HTTP header', 'provide specify content length header']
['xmlNanoHTTPClose_APIName closes an HTTP context , xmlNanoHTTPClose_APIName ends up the connection and free all data related to This function', 'api close context , api end connection free datum relate function']
['xmlNanoHTTPContentLength_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPContentLength_APIName returns the specified content length from the HTTP header', 'api return specify content length header']
['xmlNanoHTTPEncoding_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPEncoding_APIName returns the specified encoding or NULL if not available', 'api return specify encode null']
['Note that a value of -1 indicates that the content length element was not included in the response header', 'value constant indicate content length element be not include response header']
['xmlNanoHTTPFetch_APIParam_1 is The xmlNanoHTTPFetch_APIParam_1 to load', 'param be param load']
['xmlNanoHTTPFetch_APIParam_2 is the xmlNanoHTTPFetch_APIParam_2 where the content should be saved', 'param be param content should be']
['Provides the specified', 'provide specify']
['xmlNanoHTTPFetch_APIName returns -1 in case of failure, 0 incase of success', 'api return constant case failure , constant success']
['xmlNanoHTTPFetch_APIName try to fetch the indicated resource via HTTP GET and save it is content in the file', 'api fetch indicate resource via get be content file']
['Initialize the HTTP protocol layer', 'initialize protocol layer']
['xmlNanoHTTPFetch_APIParam_3 is if available the Content-Type information will be returned at that location', 'param be param information be return location']
['Currently the HTTP protocol layer just checks for proxy informations', 'currently protocol layer check proxy information']
['xmlNanoHTTPMethod_APIParam_1 is The xmlNanoHTTPMethod_APIParam_1 to load', 'param be param load']
['xmlNanoHTTPMethod_APIParam_2 is the HTTP xmlNanoHTTPMethod_APIParam_2 to use', 'param be param use']
['The xmlNanoHTTPFetch_APIParam_3 , must be freed by the caller', 'param , must be free by caller']
['xmlNanoHTTPMethod_APIParam_4 is the Content-Type information IN and OUT', 'param be param information']
['xmlNanoHTTPMethod_APIParam_5 is the extra xmlNanoHTTPMethod_APIParam_5', 'param be extra param']
['xmlNanoHTTPMethod_APIParam_6 is xmlNanoHTTPMethod_APIParam_3 length', 'param be param length']
['xmlNanoHTTPMethod_APIParam_3 is the xmlNanoHTTPMethod_APIParam_3 string', 'param be param string']
['xmlNanoHTTPMethod_APIName returns NULL in case of failure, otherwise a request handler', 'api return null case failure , otherwise request handler']
['xmlNanoHTTPMethodRedir_APIParam_1 is The xmlNanoHTTPMethodRedir_APIParam_1 to load', 'param be param load']
['xmlNanoHTTPMethodRedir_APIParam_2 is the HTTP xmlNanoHTTPMethodRedir_APIParam_2 to use', 'param be param use']
['xmlNanoHTTPMethod_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethod_APIParam_5 and the xmlNanoHTTPMethod_APIParam_3 buffer for the request content', 'api open connection indicate resource via use give api , give extra param buffer request content']
['The xmlNanoHTTPMethod_APIParam_4 , must be freed by the caller', 'param , must be free by caller']
['xmlNanoHTTPMethodRedir_APIParam_4 is the Content-Type information IN and OUT', 'param be param information']
['xmlNanoHTTPMethodRedir_APIParam_5 is the redirected xmlNanoHTTPMethodRedir_APIParam_1 OUT', 'param be redirect param']
['xmlNanoHTTPMethodRedir_APIParam_3 is the xmlNanoHTTPMethodRedir_APIParam_3 string', 'param be param string']
['xmlNanoHTTPMethodRedir_APIParam_6 is the extra xmlNanoHTTPMethodRedir_APIParam_6', 'param be extra param']
['xmlNanoHTTPMethodRedir_APIParam_7 is xmlNanoHTTPMethodRedir_APIParam_3 length', 'param be param length']
['xmlNanoHTTPMethodRedir_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethodRedir_APIParam_6 and the xmlNanoHTTPMethodRedir_APIParam_3 buffer for the request content', 'api open connection indicate resource via use give api , give extra param buffer request content']
['xmlNanoHTTPMethodRedir_APIName returns NULL in case of failure, otherwise a request handler', 'api return null case failure , otherwise request handler']
['xmlNanoHTTPMimeType_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPMimeType_APIName returns the specified Mime-Type or NULL if not available', 'api return specify param null if not available']
['xmlNanoHTTPOpen_APIName try to open a connection to the indicated resource via HTTP GET', 'api open connection indicate resource via get']
['The xmlNanoHTTPMethodRedir_APIParam_4 , or xmlNanoHTTPMethodRedir_APIParam_5 , must be freed by the caller', 'param , must be free by caller']
['xmlNanoHTTPOpen_APIParam_1 is The xmlNanoHTTPOpen_APIParam_1 to load', 'param be param load']
['Provides the specified Mime-Type', 'provide specified param']
['xmlNanoHTTPOpen_APIParam_2 is if available the Content-Type information will be returned at that location', 'param be param information be return location']
['xmlNanoHTTPOpen_APIName returns NULL in case of failure, otherwise a request handler', 'api return null case failure , otherwise request handler']
['xmlNanoHTTPOpenRedir_APIParam_1 is The xmlNanoHTTPOpenRedir_APIParam_1 to load', 'param be param load']
['xmlNanoHTTPOpenRedir_APIName try to open a connection to the indicated resource via HTTP GET', 'api open connection indicate resource via get']
['xmlNanoHTTPOpenRedir_APIParam_2 is if available the Content-Type information will be returned at that location', 'param be param information be return location']
['xmlNanoHTTPOpenRedir_APIParam_3 is if available the redirected xmlNanoHTTPOpenRedir_APIParam_1 will be returned', 'param be redirect param be return']
['The xmlNanoHTTPOpen_APIParam_2 , must be freed by the caller', 'param , must be free by caller']
['xmlNanoHTTPOpenRedir_APIName returns NULL in case of failure, otherwise a request handler', 'api return null case failure , otherwise request handler']
['This is a blocking call', 'be block call']
['xmlNanoHTTPRead_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPRead_APIName tries to read @len bytes from the existing HTTP connection and saves them in @dest', 'api read byte connection dest']
['xmlNanoHTTPRead_APIParam_2 is a buffer', 'param be buffer']
['The xmlNanoHTTPOpenRedir_APIParam_2 , must be freed by the caller', 'param , must be free by caller']
['xmlNanoHTTPRead_APIParam_3 is the buffer length', 'param be buffer length']
['xmlNanoHTTPRead_APIName returns the number of byte read', 'api return number byte read']
['0 is an indication of an end of connection', 'constant be indication end connection']
['-1 indicates a parameter error', 'constant indicate param error']
['xmlNanoHTTPRedir_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPRedir_APIName returns the specified redirection URL or NULL if not redirected', 'api return specify null if not redirect']
['Get the latest HTTP return code received', 'get late return code receive']
['xmlNanoHTTPReturnCode_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPReturnCode_APIName returns the HTTP return code for the request', 'api return return code request']
['Provides the specified redirection URL from the HTTP header', 'provide specify header']
['xmlNanoHTTPSave_APIParam_1 is the HTTP context', 'param be context']
['xmlNanoHTTPSave_APIParam_2 is the xmlNanoHTTPSave_APIParam_2 where the content should be saved', 'param be param content should be']
['xmlNanoHTTPSave_APIName returns -1 in case of failure, 0 incase of success', 'api return constant case failure , constant success']
['xmlNanoHTTPSave_APIName saves the output of the HTTP transaction to a file xmlNanoHTTPSave_APIName closes and free the context at the end', 'api output file api close free context end']
['Should be like http', 'should be like']
['Initialize the HTTP Proxy context by parsing the xmlNanoHTTPScanProxy_APIParam_1 and finding the protocol host port it indicates', 'initialize proxy context by parse param find protocol host port indicate']
['xmlNanoHTTPScanProxy_APIParam_1 is The proxy xmlNanoHTTPScanProxy_APIParam_1 used to initialize the proxy context', 'param be proxy param use initialize proxy context']
['3128 / A NULL xmlNanoHTTPScanProxy_APIParam_1 cleans up proxy informations', 'constant null param clean proxy information']
['Deallocate a Schematron structure', 'deallocate structure']
['xmlSchematronFree_APIParam_1 is a xmlSchematronFree_APIParam_1 structure', 'param be param structure']
['Free the resources associated to the schema parser context', 'free resource associate parser context']
['xmlSchematronFreeParserCtxt_APIParam_1 is the schema parser context', 'param be parser context']
['Free the resources associated to the schema validation context', 'free resource associate validation context']
['xmlSchematronFreeValidCtxt_APIParam_1 is the schema validation context', 'param be validation context']
['Create an XML Schematrons parse context for that document', 'create parse context']
['xmlSchematronNewDocParserCtxt_APIParam_1 is a preparsed document tree', 'param be preparse']
['xmlSchematronNewDocParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML Schematrons parse context for that memory xmlSchematronNewMemParserCtxt_APIParam_1 expected to contain an XML Schematrons file', 'create parse context memory param expect contain file']
['The document may be modified', 'may be modify']
['xmlSchematronNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas', 'param be pointer char array contain']
['xmlSchematronNewMemParserCtxt_APIParam_2 is the xmlSchematronNewMemParserCtxt_APIParam_2 of the array', 'param be param array']
['xmlSchematronNewMemParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['xmlSchematronNewParserCtxt_APIParam_1 is the location of the schema', 'param be location']
['xmlSchematronNewParserCtxt_APIName returns the parser context or NULL in case of error', 'api return parser context null case error']
['Create an XML Schematrons parse context for that file/resource expected to contain an XML Schematrons file', 'create parse context expect contain file']
['Create an XML Schematrons validation context based on the given xmlSchematronNewValidCtxt_APIParam_1', 'create validation context base give param']
['xmlSchematronNewValidCtxt_APIParam_1 is a precompiled XML Schematrons', 'param be precompile']
['xmlSchematronNewValidCtxt_APIParam_2 is a set of xmlSchematronValidOptions', 'param be set']
['xmlSchematronNewValidCtxt_APIName returns the validation context or NULL in case of error', 'api return validation context null case error']
['xmlSchematronParse_APIParam_1 is a schema validation context', 'param be validation context']
['Set the structured error callback', 'set structured error callback']
['parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances', 'parse definition resource build internal which can be use validate instance']
['xmlSchematronParse_APIName returns the internal XML Schematron structure built from the resource or NULL in case of error', 'api return internal structure build resource null case error']
['xmlSchematronSetValidStructuredErrors_APIParam_1 is a Schematron validation context', 'param be validation context']
['xmlSchematronSetValidStructuredErrors_APIParam_2 is the structured error function', 'param be structured error function']
['xmlSchematronSetValidStructuredErrors_APIParam_3 is the functions context', 'param be function context']
['Validate a tree xmlSchematronValidateDoc_APIParam_2 against the schematron', 'validate param against']
['xmlSchematronValidateDoc_APIParam_1 is the schema validation context', 'param be validation context']
['xmlSchematronValidateDoc_APIParam_2 is the document instace tree', 'param be']
['Signature of an error callback from a Schematron validation', 'signature error callback validation']
['xmlSchematronValidityErrorFunc_APIParam_1 is xmlSchematronValidityErrorFunc_APIParam_3 validation context', 'param be param validation context']
['xmlSchematronValidateDoc_APIName returns 0 in case of success, -1 in case of internal error and an error count otherwise', 'api return constant case success , constant case internal error error count otherwise']
['xmlSchematronValidityErrorFunc_APIParam_2 is xmlSchematronValidityErrorFunc_APIParam_3 message xmlSchematronValidityErrorFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['Signature of a warning callback from a Schematron validation', 'signature warning callback validation']
['xmlSchematronValidityWarningFunc_APIParam_1 is xmlSchematronValidityWarningFunc_APIParam_3 validation context', 'param be param validation context']
['xmlSchematronValidityWarningFunc_APIParam_2 is xmlSchematronValidityWarningFunc_APIParam_3 message xmlSchematronValidityWarningFunc_APIParam_3 extra arguments', 'param be param message param extra param']
['Free the dictionary mutex', 'free mutex']
['Do not call unless sure the library is not in use anymore', 'not call unless sure library be not use anymore']
['xmlDictCreate_APIName returns the newly created dictionary, or NULL if an error occurred', 'api return newly create , null']
['Create a new dictionary , inheriting strings from the read-only dictionary @sub', 'create , inherit string param']
['xmlDictCreateSub_APIParam_1 is an existing dictionary', 'param be']
['xmlDictCreateSub_APIName returns the newly created dictionary, or NULL if an error occurred', 'api return newly create , null']
['xmlDictExists_APIParam_1 is the dictionary', 'param be']
['xmlDictExists_APIParam_2 is the xmlDictExists_APIParam_2 of the userdata', 'param be param']
['xmlDictExists_APIName returns the internal copy of the xmlDictExists_APIParam_2 or NULL if not found', 'api return internal copy param null']
['Free the hash @dict and its contents', 'free hash content']
['are created in the new dictionary', 'be create']
['On lookup , strings are first searched in the new dictionary , in @sub , and', 'lookup , string be first search']
['xmlDictExists_APIParam_3 is the length of the xmlDictExists_APIParam_2', 'param be length param']
['xmlDictFree_APIParam_1 is the dictionary', 'param be']
['xmlDictGetUsage_APIName returns the amount of strings allocated', 'api return amount string']
['The userdata is deallocated with @f', 'be deallocate']
['Get how much memory is used by a dictionary for strings Added in 2.9.0', 'get much memory be use by string constant']
['xmlDictLookup_APIParam_1 is the dictionary', 'param be']
['xmlDictLookup_APIParam_2 is the xmlDictLookup_APIParam_2 of the userdata', 'param be param']
['xmlDictLookup_APIName returns the internal copy of the xmlDictLookup_APIParam_2 or NULL in case of internal error', 'api return internal copy param null case internal error']
['check if a string is owned by the disctionary', 'check if string be own by disctionary']
['xmlDictOwns_APIParam_1 is the dictionary', 'param be']
['xmlDictOwns_APIParam_2 is the string', 'param be stre']
['xmlDictLookup_APIParam_3 is the length of the xmlDictLookup_APIParam_2', 'param be length param']
['xmlDictQLookup_APIParam_1 is the dictionary', 'param be']
['xmlDictQLookup_APIParam_2 is the xmlDictQLookup_APIParam_2', 'param be param']
['xmlDictOwns_APIName returns 1 if true, 0 if false and -1 in case of error -1 in case of error', 'api return constant case error']
['xmlDictQLookup_APIParam_3 is the xmlDictQLookup_APIParam_3', 'param be param']
['xmlDictQLookup_APIName returns the internal copy of the QName or NULL in case of internal error', 'api return internal copy null case internal error']
['@name to the hash @dict', 'name hash']
['Increment the reference counter of a dictionary', 'increment reference counter']
['xmlDictReference_APIParam_1 is the dictionary', 'param be']
['xmlDictReference_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Set a size xmlDictSetLimit_APIParam_2 for the dictionary Added in 2.9.0', 'set size param constant']
['xmlDictSetLimit_APIParam_2 is the xmlDictSetLimit_APIParam_2 in bytes', 'param be param byte']
['xmlDictSetLimit_APIName returns the previous xmlDictSetLimit_APIParam_2 of the dictionary or 0', 'api return previous param constant']
['xmlDictSize_APIParam_1 is the dictionary', 'param be']
['Query the number of elements installed in the hash @dict', 'query number element instal hash']
['Do the dictionary mutex initialization', 'mutex initialization']
['this function is deprecated', 'function be deprecate']
['xmlDictSize_APIName returns the number of elements in the dictionary or -1 in case of error', 'api return number element constant case error']
['xmlInitializeDict_APIName returns 0 if initialization was already done, and 1 if that call led to the initialization', 'api return constant']
['Pops the top XPath object from the value stack', 'object value stack']
['valuePop_APIParam_1 is an XPath evaluation context', 'param be context']
['valuePop_APIName returns the XPath object just removed', 'api return object remove']
['Pushes a new XPath object on top of the valuePush_APIParam_2 stack', 'object param stack']
['valuePush_APIParam_1 is an XPath evaluation context', 'param be context']
['valuePush_APIParam_2 is the XPath object', 'param be object']
['valuePush_APIName returns the number of items on the valuePush_APIParam_2 stack', 'api return number param stack']
['xmlXPathAddValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['Implement the add operation on XPath objects', 'implement operation object']
['xmlXPathBooleanFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathBooleanFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathCeilingFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathCeilingFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the ceiling_APIName XPath function number ceiling The ceiling function returns the smallest  number that is not less than the argument and that is an integer', 'implement api function number function return small number not less param integer']
['The numeric operators convert The numeric operators operands to numbers by calling the number function', 'numeric convert numeric number by call number function']
['xmlXPathCompareValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['Implement the compare operation on XPath objects', 'implement compare operation object']
['xmlXPathCompareValues_APIParam_2 is less than or greater than', 'param be less great']
['xmlXPathCompareValues_APIParam_3 is is the comparison xmlXPathCompareValues_APIParam_3', 'param be be comparison param']
['The < comparison will be true if the first number is less than the second number', 'comparison be constant']
['The < = comparison will be true if the first number is less than or equal to the second number', 'comparison be constant']
['xmlXPathConcatFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathCompareValues_APIName returns 1 if the comparison succeeded, 0 if it failed', 'api return constant if comparison succeed , constant if fail']
['@arg1 < @arg2 -LRB- 1 , 1 , ... @arg1 < = @arg2 -LRB- 1 , 0 , ... @arg1 > @arg2 -LRB- 0 , 1 , ... @arg1 > = @arg2 -LRB- 0 , 0', '_ lrb _ constant , ... _ lrb _ constant , ... _ lrb _ constant , ... _ lrb _ constant']
['The < = comparison will be true if the first number is greater than the second number', 'comparison be constant']
['Implement the concat_APIName XPath function string concat The concat function returns the concatenation of The concat function arguments', 'implement api function string function return function param']
['xmlXPathConcatFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathContainsFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathContainsFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the contains_APIName XPath function boolean contains The contains function returns true if the first argument string contains the second argument string, and otherwise returns false', 'implement api function contain contain function return constant  , otherwise return constant']
['The < = comparison will be true if the first number is greater than or equal to the second number', 'comparison be constant']
['Implement the boolean_APIName XPath function boolean boolean The boolean function converts its argument to a boolean as follows', 'implement api function function convert param as follow']
['the objects are compared by converted both objects to numbers and comparing the numbers according to IEEE 754', 'object be compare by converted object number compare number accord constant']
['- a number is true', '_ number be constant']
['Implement the count_APIName XPath function number count', 'implement api function number count']
['xmlXPathCountFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathCountFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathDebugDumpCompExpr_APIParam_1 is the FILE * for the xmlXPathDebugDumpCompExpr_APIParam_1', 'param be file param']
['xmlXPathDebugDumpCompExpr_APIParam_2 is the precompiled XPath expression', 'param be precompile']
['xmlXPathDebugDumpCompExpr_APIParam_3 is the indentation level', 'param be level']
['Dump the content of the object for debugging purposes', 'content object debug purpose']
['xmlXPathDebugDumpObject_APIParam_1 is the FILE * to dump the xmlXPathDebugDumpObject_APIParam_1', 'param be file param']
['xmlXPathDebugDumpObject_APIParam_2 is the object to inspect', 'param be object inspect']
['xmlXPathDebugDumpObject_APIParam_3 is indentation level', 'param be level']
['Implements the EXSLT - Sets difference_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathDifference_APIParam_1 is a node-set', 'param be param']
['xmlXPathDifference_APIParam_2 is a node-set', 'param be param']
['xmlXPathDifference_APIName returns the difference between the two node sets, or xmlXPathDifference_APIParam_1 if xmlXPathDifference_APIParam_2 is empty', 'api return difference two set , param']
['xmlXPathDistinct_APIParam_1 is a node-set', 'param be param']
['Implements the EXSLT - Sets distinct_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathDistinct_APIName returns a subset of the xmlXPathDistinct_APIParam_1 contained in @nodes, or @nodes if it is empty', 'api return param contain']
['distinct @nodes is sorted by document order , #exslSetsDistinctSorted is called with the sorted node-set', 'distinct be sort by order , exslsetsdistinctsorte be call sorted param']
['node-set set', 'param set']
['Implements the EXSLT - Sets distinct_APIName function', 'implement _ set api function']
['xmlXPathDistinctSorted_APIParam_1 is a node-set , sorted by document order', 'param be param , sort by order']
['xmlXPathDistinctSorted_APIName returns a subset of the xmlXPathDistinctSorted_APIParam_1 contained in @nodes, or @nodes if it is empty', 'api return param contain']
['xmlXPathDivValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['Implement the equal operation on XPath objects content', 'implement equal operation object content']
['@arg1 == @arg2', 'arg constant']
['xmlXPathEqualValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathEqualValues_APIName returns 0 or 1 depending on the results of the test', 'api return constant depending result test']
['Implement the div operation on XPath objects @arg1 / @arg2', 'implement operation object arg constant']
['xmlXPathErr_APIParam_1 is a XPath parser context', 'param be parser context']
['xmlXPathErr_APIParam_2 is the xmlXPathErr_APIParam_2 code', 'param be param code']
['xmlXPathEvalExpr_APIParam_1 is the XPath Parser context', 'param be parser context']
['The numeric operators convert The numeric operators operands to numbers by calling the number function', 'numeric convert numeric number by call number function']
['Evaluate a predicate result for the current node', 'evaluate result current']
['Parse and evaluate an XPath expression in the given context , push the result on the context stack', 'parse evaluate give context , result context stack']
['A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean', 'be evaluate by evaluate convert result']
['xmlXPathEvaluatePredicateResult_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathEvaluatePredicateResult_APIParam_2 is the Predicate Expression evaluation result', 'param be result']
['xmlXPathEvaluatePredicateResult_APIName returns 1 if predicate is true, 0 otherwise', 'api return constant']
['Implement the false_APIName XPath function boolean false_APIName', 'implement api function api']
['xmlXPathFalseFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathFalseFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathFloorFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathFloorFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathFreeParserContext_APIParam_1 is the context to free', 'param be context free']
['Implement the floor_APIName XPath function number floor The floor function returns the largest  number that is not greater than the argument and that is an integer', 'implement api function number function return large number not great param integer']
['Search in the Function array of the context for the given function', 'search function array context give function']
['xmlXPathFunctionLookup_APIParam_1 is the XPath context', 'param be context']
['xmlXPathFunctionLookup_APIParam_2 is the function xmlXPathFunctionLookup_APIParam_2', 'param be function param']
['xmlXPathFunctionLookup_APIName returns the xmlXPathFunction or NULL if not found', 'api return api null']
['Search in the Function array of the context for the given function', 'search function array context give function']
['xmlXPathFunctionLookupNS_APIParam_1 is the XPath context', 'param be context']
['xmlXPathFunctionLookupNS_APIParam_2 is the function xmlXPathFunctionLookupNS_APIParam_2', 'param be function param']
['xmlXPathFunctionLookupNS_APIParam_3 is the function namespace URI', 'param be function uri']
['xmlXPathFunctionLookupNS_APIName returns the xmlXPathFunction or NULL if not found', 'api return api null']
['Implements the EXSLT - Sets has-same-nodes function', 'implement _ set param function']
['xmlXPathHasSameNodes_APIParam_1 is a node-set', 'param be param']
['xmlXPathHasSameNodes_APIParam_2 is a node-set', 'param be param']
['xmlXPathHasSameNodes_APIName returns true  if @nodes1 shares any node with @nodes2, false  otherwise', 'api return constant if , constant otherwise']
['xmlXPathIdFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathIdFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the id_APIName XPath function node-set id The id function selects elements by their unique ID', 'implement api function param -PRON- would -PRON- would function select element by unique -PRON- would']
['Implements the EXSLT - Sets intersection_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathIntersection_APIParam_1 is a node-set', 'param be param']
['Is the xmlXPathIsNodeType_APIParam_1 given a NodeType one', 'be param give one']
['xmlXPathIntersection_APIParam_2 is a node-set', 'param be param']
['xmlXPathIntersection_APIName returns a node set comprising the nodes that are within both the node sets passed as arguments', 'api return set comprising be within set pass as param']
['xmlXPathIsNodeType_APIParam_1 is a xmlXPathIsNodeType_APIParam_1 string', 'param be param string']
['xmlXPathIsNodeType_APIName returns 1 if true 0 otherwise', 'api return constant if constant otherwise']
['xmlXPathLangFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathLangFunction_APIParam_2 is the number of arguments', 'param be number param']
['the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise', 'result be convert constant  position context context list be convert constant otherwise']
['xmlXPathLastFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathLastFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the last_APIName XPath function number last_APIName The last function returns the number of nodes in the context node list', 'implement api function number api last function return number context list']
['the result will be converted as if by a call to the boolean function', 'result be convert as if by call function']
['the result is the union of the result of applying id to the string value of each of the nodes in the argument node-set', 'result be result apply -PRON- would string value param']
['xmlXPathLeading_APIParam_1 is a node-set', 'param be param']
['xmlXPathLeading_APIParam_2 is a node-set', 'param be param']
['Implements the EXSLT - Sets leading_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['Implements the EXSLT - Sets leading_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['leading @nodes1 and @nodes2 are sorted by document order , #exslSetsLeadingSorted is called', 'lead be sort by order , exslsetsleadingsorte be call']
["= ` comment ' | ` text ' | ` processing-instruction ' | ` node '", 'comment text param']
['Implement the lang_APIName XPath function boolean lang The lang function returns true or false depending on  or is a sublanguage of the language specified by the argument string', 'implement api function function return constant depending be language specify by param string']
['xmlXPathLeadingSorted_APIParam_1 is a node-set , sorted by document order', 'param be param , sort by order']
['xmlXPathLeadingSorted_APIParam_2 is a node-set , sorted by document order', 'param be param , sort by order']
['Implement the local-name_APIName XPath function string local-name', 'implement api function string param']
['xmlXPathLeading_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2', 'api return precede first order , if be null empty empty param']
['xmlXPathLocalNameFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['If the node-set is empty or the first node has no name, an empty stringbe returned by xmlXPathLocalNameFunction_APIName', 'if param be empty first have no name , empty stringbe return by api']
['xmlXPathLocalNameFunction_APIParam_2 is the number of arguments', 'param be number param']
['The local-name function returns a string containing the local part of the name of the node in the argument node-set that is first in document order', 'param function return string contain local part name param first order']
['xmlXPathModValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathLeadingSorted_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2', 'api return precede first order , if be null empty empty param']
['xmlXPathMultValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['Implement the mod operation on XPath objects', 'implement operation object']
['Implement the namespace-uri_APIName XPath function string namespace-uri', 'implement api function string param']
['Implement the multiply operation on XPath objects', 'implement multiply operation object']
['The namespace-uri function returns a string containing the namespace URI of the expanded name of the node in the argument node-set that is first in document order', 'param function return string contain uri expand name param first order']
['@arg1 /', 'arg constant']
['@arg2 The numeric operators convert The numeric operators operands to numbers by calling the number function', 'numeric convert numeric number by call number function']
['If the node-set is empty, the first node has no name, or the expanded name has no namespace URI, an empty stringbe returned by xmlXPathNamespaceURIFunction_APIName', 'if param be empty , first have no name , expand name have no uri , empty stringbe return by api']
['The language of the context node is determined by the value of the xml', 'language context be determine by value']
['the argument is converted to a string as if by a call to the string function', 'param be convert string as if by call string function']
['the string is split into a whitespace-separated list of tokens', 'string be split param list']
['The numeric operators convert The numeric operators operands to numbers by calling the number function', 'numeric convert numeric number by call number function']
['lang attribute on the context node , or , has no xml', 'attribute context , , have no']
['lang attribute , by the value of the xml', 'attribute , by value']
['the result is a node-set containing the elements in the same document as the context node that have a unique ID equal to any of the tokens in the list', 'result be param contain element as context have unique -PRON- would equal list']
['lang attribute on the nearest ancestor of the context node that has an xml', 'attribute near context have']
['xmlXPathNamespaceURIFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNamespaceURIFunction_APIParam_2 is the number of arguments', 'param be number param']
['Create a new xmlXPathObjectPtr of type boolean and of value @val', 'create type value']
['xmlXPathNewBoolean_APIParam_1 is the boolean value', 'param be value']
['xmlXPathNewBoolean_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type string and of value @val', 'create type string value']
['xmlXPathNewCString_APIParam_1 is the char * value', 'param be char value']
['xmlXPathNewCString_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type double and of value @val', 'create type double value']
['xmlXPathNewFloat_APIParam_1 is the double value', 'param be double value']
['xmlXPathNewFloat_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the single Node @val', 'create type initialize single']
['xmlXPathNewNodeSet_APIParam_1 is the NodePtr value', 'param be value']
['xmlXPathNewNodeSet_APIName returns the newly created object', 'api return newly create object']
['Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the Nodeset @val', 'create type initialize']
['xmlXPathNewNodeSetList_APIParam_1 is an existing NodeSet', 'param be']
['xmlXPathNewNodeSetList_APIName returns the newly created object', 'api return newly create object']
['xmlXPathNewParserContext_APIParam_1 is the XPath expression', 'param be']
['xmlXPathNewParserContext_APIParam_2 is the XPath context', 'param be context']
['xmlXPathNewParserContext_APIName returns the xmlXPathParserContext just allocated', 'api return']
['Create a new xmlXPathObjectPtr of type string and of value @val', 'create type string value']
['xmlXPathNewString_APIParam_1 is the xmlChar * value', 'param be value']
['xmlXPathNewString_APIName returns the newly created object', 'api return newly create object']
['xmlXPathNewValueTree_APIParam_1 is the NodePtr value', 'param be value']
['xmlXPathNewValueTree_APIName returns the newly created object', 'api return newly create object']
['xmlXPathNextAncestor_APIParam_1 is the XPath Parser context', 'param be parser context']
['Create a new xmlXPathObjectPtr of type Value Tree and initialize it with the tree root @val', 'create type value initialize root']
['xmlXPathNextAncestor_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextAncestor_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextAncestorOrSelf_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextAncestorOrSelf_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextAncestorOrSelf_APIName returns the next element following that axis', 'api return element follow']
["Traversal function for the `` attribute '' direction TODO", 'function attribute direction']
['support DTD inherited default attributes', 'support inherit default attribute']
['xmlXPathNextAttribute_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextAttribute_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextAttribute_APIParam_2 is the current attribute in the traversal', 'param be current attribute']
['xmlXPathNextChild_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextChild_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextChild_APIName returns the next element following that axis', 'api return element follow']
["Traversal function for the `` child '' direction The child axis contains the children of the context node in document order", 'function direction contain context order']
['xmlXPathNextDescendant_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextDescendant_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextDescendant_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextDescendantOrSelf_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextDescendantOrSelf_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextDescendantOrSelf_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextFollowing_APIParam_1 is the XPath Parser context', 'param be parser context']
["Traversal function for the `` descendant '' direction the descendant axis contains the descendants of the context node in document order", 'function direction contain context order']
['xmlXPathNextFollowing_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextFollowing_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextFollowingSibling_APIParam_1 is the XPath Parser context', 'param be parser context']
["Traversal function for the `` ancestor-or-self '' direction he ancestor-or-self axis contains the context node and ancestors of the context node in reverse document order", 'function param direction param contain context context reverse order']
['xmlXPathNextFollowingSibling_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextFollowingSibling_APIName returns the next element following that axis', 'api return element follow']
["Traversal function for the `` following-sibling '' direction The following-sibling axis contains the following siblings of the context node in document order", 'function param direction param contain follow context order']
['thus the context node is the first node on the axis , and the context node parent the second', 'thus context be first , context second']
['parent here is defined the same as with the parent axis', 'be define as']
['xmlXPathNextNamespace_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextNamespace_APIParam_2 is the current attribute in the traversal', 'param be current attribute']
['xmlXPathNextNamespace_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextParent_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextParent_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextParent_APIName returns the next element following that axis', 'api return element follow']
['xmlXPathNextPreceding_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextPreceding_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNextPreceding_APIName returns the next element following that axis', 'api return element follow']
["Traversal function for the `` parent '' direction The parent axis contains the parent of the context node", 'function direction contain context']
['xmlXPathNextPrecedingSibling_APIParam_1 is the XPath Parser context', 'param be parser context']
["Traversal function for the `` ancestor '' direction the ancestor axis contains the ancestors of the context node", 'function direction contain context']
["Traversal function for the `` descendant-or-self '' direction the descendant-or-self axis contains the context node and the descendants of the context node in document order", 'function param direction param contain context context order']
['xmlXPathNextPrecedingSibling_APIParam_2 is the current node in the traversal', 'param be current']
['xmlXPathNextPrecedingSibling_APIName returns the next element following that axis', 'api return element follow']
['the ancestors of the context node consist of the parent of context node and the parent parent and so on', 'context consist context']
['the nodes are ordered in document order', 'be order order']
["Traversal function for the `` following '' direction The following axis contains all nodes in the same document as the context node that are after the context node in document order , excluding any descendants and excluding attribute nodes and namespace nodes", 'function follow direction follow contain as context be after context order , exclude exclude attribute']
['the nodes are ordered in reverse document order', 'be order reverse order']
['xmlXPathNextSelf_APIParam_1 is the XPath Parser context', 'param be parser context']
['thus the context node is the first node on the axis , and the first child of the context node is the second node on the axis', 'thus context be first , first context be second']
['xmlXPathNextSelf_APIParam_2 is the current node in the traversal', 'param be current']
["Traversal function for the `` self '' direction The self axis contains just the context node itself", 'function direction contain context']
['thus the parent is the first node on the axis , and the parent parent is the second node on the axis', 'thus be first , be second']
['xmlXPathNextSelf_APIName returns the next element following that axis', 'api return element follow']
["Traversal function for the `` namespace '' direction the namespace axis contains the namespace nodes of the context node", 'function direction contain context']
['xmlXPathNodeLeading_APIParam_1 is a node-set', 'param be param']
['the order of nodes on this axis is implementation-defined', 'order be param']
['xmlXPathNodeLeading_APIParam_2 is a xmlXPathNodeLeading_APIParam_2', 'param be param']
['Implements the EXSLT - Sets leading_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['the axis will be empty unless the context node is an element We keep the XML namespace node at the end of the list', 'be empty unless context be element keep end list']
['leading @nodes is sorted by document order , #exslSetsNodeLeadingSorted is called', 'lead be sort by order , exslsetsnodeleadingsorte be call']
['Implements the EXSLT - Sets leading_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathNodeLeadingSorted_APIParam_1 is a node-set , sorted by document order', 'param be param , sort by order']
['xmlXPathNodeLeadingSorted_APIParam_2 is a xmlXPathNodeLeadingSorted_APIParam_2', 'param be param']
["Traversal function for the `` preceding-sibling '' direction The preceding-sibling axis contains the preceding siblings of the context node in reverse document order", 'function param direction param contain precede context reverse order']
['xmlXPathNodeLeading_APIName returns the xmlXPathNodeLeading_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node', 'api return param precede order ,  empty param']
['the first preceding sibling is first on the axis', 'first precede be first']
['the sibling preceding that node is the second on the axis and so on', 'precede be second']
['xmlXPathNodeSetAdd_APIParam_1 is the initial node set', 'param be initial set']
['xmlXPathNodeSetAdd_APIParam_2 is a new xmlNodePtr', 'param be']
['xmlXPathNodeLeadingSorted_APIName returns the xmlXPathNodeLeadingSorted_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node', 'api return param precede order ,  empty param']
['the nodes are ordered in reverse document order', 'be order reverse order']
["Traversal function for the `` preceding '' direction the preceding axis contains all nodes in the same document as the context node that are before the context node in document order , excluding any ancestors and excluding attribute nodes and namespace nodes", 'function precede direction precede contain as context be before context order , exclude exclude attribute']
['xmlXPathNodeSetAdd_APIName returns 0 in case of success, and -1 in case of error', 'api return constant case success , constant case error']
['xmlXPathNodeSetAddNs_APIParam_1 is the initial xmlXPathNodeSetAddNs_APIParam_2 set', 'param be initial param set']
['xmlXPathNodeSetAddNs_APIParam_2 is the hosting xmlXPathNodeSetAddNs_APIParam_2', 'param be host param']
['xmlXPathNodeSetAddNs_APIParam_3 is a the namespace xmlXPathNodeSetAddNs_APIParam_2', 'param be param']
['xmlXPathNodeSetAddUnique_APIParam_1 is the initial node set', 'param be initial set']
['xmlXPathNodeSetAddUnique_APIParam_2 is a new xmlNodePtr', 'param be']
['xmlXPathNodeSetAddNs_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['xmlXPathNodeSetAddUnique_APIName returns 0 in case of success and -1 in case of failure', 'api return constant case success constant case failure']
['checks whether @cur contains @val', 'check whether contain']
['add a new xmlNodePtr to an existing NodeSet , optimized version', 'optimized version']
['xmlXPathNodeSetContains_APIParam_1 is the node-set', 'param be param']
['xmlXPathNodeSetContains_APIParam_2 is the node', 'param be']
['xmlXPathNodeSetContains_APIName returns true  if @cur contains @val, false  otherwise', 'api return constant']
['xmlXPathNodeSetDel_APIParam_1 is the initial node set', 'param be initial set']
['xmlXPathNodeSetDel_APIParam_2 is an xmlNodePtr', 'param be']
['Namespace nodes in libxml do not match the XPath semantic', 'not match semantic']
['xmlXPathNodeSetFreeNs_APIParam_1 is the XPath namespace node found in a nodeset', 'param be find']
['xmlXPathNodeSetMerge_APIParam_1 is the first NodeSet or NULL', 'param be first null']
['In a node set the namespace nodes are duplicated and the next pointer is set to the parent node in the XPath semantic', 'set be duplicate pointer be set semantic']
['xmlXPathNodeSetMerge_APIParam_2 is the second NodeSet', 'param be second']
['xmlXPathNodeSetMerge_APIName returns @val1 once extended or NULL in case of error', 'api return extend null case error']
['Removes an entry from an existing NodeSet list', 'remove entry list']
['xmlXPathNodeSetRemove_APIParam_1 is the initial node set', 'param be initial set']
['xmlXPathNodeSetRemove_APIParam_2 is the index to remove', 'param be index remove']
['Sort the node xmlXPathNodeSetSort_APIParam_1 in document order', 'sort param order']
['xmlXPathNodeSetSort_APIParam_1 is the node set', 'param be set']
['a new set is created and copied from @val2', 'set be create copy constant']
['Merges two nodesets , all nodes from @val2 are added to @val1', 'merge two , be constant']
['xmlXPathNodeTrailing_APIParam_1 is a node-set', 'param be param']
['node-set set', 'param set']
['Implements the EXSLT - Sets trailing_APIName function', 'implement _ set api function']
['xmlXPathNodeTrailing_APIParam_2 is a xmlXPathNodeTrailing_APIParam_2', 'param be param']
['trailing @nodes is sorted by document order , #xmlXPathNodeTrailingSorted is called', 'trail be sort by order , api be call']
['Implements the EXSLT - Sets trailing_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathNodeTrailingSorted_APIParam_1 is a node-set , sorted by document order', 'param be param , sort by order']
['xmlXPathNodeTrailingSorted_APIParam_2 is a xmlXPathNodeTrailingSorted_APIParam_2', 'param be param']
['Implement the normalize-space_APIName XPath function string normalize-space', 'implement api function string param']
['xmlXPathNodeTrailing_APIName returns the xmlXPathNodeTrailing_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node', 'api return param follow order']
['Whitespace characters are the same allowed by the S production in XML', 'whitespace character be allow by']
['xmlXPathNormalizeFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNodeTrailingSorted_APIName returns the xmlXPathNodeTrailingSorted_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node', 'api return param follow order']
['The normalize-space function returns the argument string with white space normalized by stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space', 'param function return param stre white space normalize by strip lead trail whitespace replace sequence whitespace character by single space']
['xmlXPathNormalizeFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the equal operation on XPath objects content', 'implement equal operation object content']
['@arg1 == @arg2', 'arg constant']
['xmlXPathNotEqualValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNotEqualValues_APIName returns 0 or 1 depending on the results of the test', 'api return constant depending result test']
['xmlXPathNotFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNotFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathNsLookup_APIParam_1 is the XPath context', 'param be context']
['Implement the not_APIName XPath function boolean not The not function returns true if its argument is false, and false otherwise', 'implement api function not not function return constant']
['the argument defaults to the context node converted to a string , the value of the context node', 'param default context convert string , value context']
['xmlXPathNsLookup_APIParam_2 is the namespace xmlXPathNsLookup_APIParam_2 value', 'param be param value']
['xmlXPathNsLookup_APIName returns the value or NULL if not found', 'api return value null']
['Search in the namespace declaration array of the context for the given namespace name associated to the given xmlXPathNsLookup_APIParam_2', 'search declaration array context give name associate give param']
['Implement the number_APIName XPath function number number', 'implement api function number number']
['xmlXPathNumberFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathNumberFunction_APIParam_2 is the number of arguments', 'param be number param']
['parse an XML namespace non qualified name', 'parse non qualified name']
['xmlXPathParseNCName_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathParseNCName_APIName returns the namespace name or NULL', 'api return name null']
['parse an XML name NameChar', 'parse name']
['xmlXPathParseName_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathParseName_APIName returns the namespace name or NULL', 'api return name null']
["= Letter | Digit | ' . '", 'letter digit']
["| ' - ' | '_' | CombiningChar | Extender", '_ _ combiningchar']
["= Letter | Digit | ' . '", 'letter digit']
['Check error with #xmlXPathCheckError', 'check error']
['xmlXPathPopBoolean_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathPopBoolean_APIName returns the boolean', 'api return']
['Check error with #xmlXPathCheckError', 'check error']
['xmlXPathPopExternal_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathPopExternal_APIName returns the object', 'api return object']
['Pops an external object from the stack', 'external object stack']
['Check error with #xmlXPathCheckError', 'check error']
['xmlXPathPopNodeSet_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathPopNodeSet_APIName returns the node-set', 'api return param']
["| ' - ' | '_' | '", '_ _']
['Pops a node-set from the stack', 'param stack']
["' | CombiningChar | Extender Name", 'combiningchar name']
['Check error with #xmlXPathCheckError', 'check error']
['xmlXPathPopNumber_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathPopNumber_APIName returns the number', 'api return number']
['Pops a number from the stack', 'number stack']
['Check error with #xmlXPathCheckError', 'check error']
['xmlXPathPopString_APIParam_1 is an XPath parser context', 'param be parser context']
['xmlXPathPopString_APIName returns the string', 'api return stre']
['Pops a string from the stack', 'stre stack']
['The first position is 1 , and so the last position will be equal to last_APIName', 'first position be constant , last position be equal api']
['xmlXPathPositionFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathPositionFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the position_APIName XPath function number position_APIName The position function returns the position of the context node in the context node list', 'implement api function number api position function return position context context list']
['Registers all default XPath functions in this context', 'register default function context']
['xmlXPathRegisterAllFunctions_APIParam_1 is the XPath context', 'param be context']
['Register a new function', 'register function']
['xmlXPathRegisterFunc_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterFunc_APIParam_2 is the function xmlXPathRegisterFunc_APIParam_2', 'param be function param']
['xmlXPathRegisterFunc_APIParam_3 is the function implementation or NULL', 'param be function implementation null']
['xmlXPathRegisterFunc_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['it unregisters the function', 'unregister function']
['Registers an external mechanism to do function lookup', 'register external mechanism function lookup']
['xmlXPathRegisterFuncLookup_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterFuncLookup_APIParam_2 is the lookup function', 'param be lookup function']
['xmlXPathRegisterFuncLookup_APIParam_3 is the lookup data', 'param be lookup datum']
['Register a new function', 'register function']
['xmlXPathRegisterFuncNS_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterFuncNS_APIParam_2 is the function xmlXPathRegisterFuncNS_APIParam_2', 'param be function param']
['xmlXPathRegisterFuncNS_APIParam_3 is the function namespace URI', 'param be function uri']
['xmlXPathRegisterFuncNS_APIParam_4 is the function implementation or NULL', 'param be function implementation null']
['it unregisters the function', 'unregister function']
['xmlXPathRegisterFuncNS_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['xmlXPathRegisterNs_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterNs_APIParam_3 is the namespace name', 'param be name']
['xmlXPathRegisterNs_APIParam_2 is the namespace xmlXPathRegisterNs_APIParam_2 can not be NULL or empty string', 'param be param can not be null empty string']
['xmlXPathRegisterNs_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['Register a new variable xmlXPathRegisterVariable_APIParam_3', 'register variable param']
['xmlXPathRegisterVariable_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterVariable_APIParam_2 is the variable xmlXPathRegisterVariable_APIParam_2', 'param be variable param']
['xmlXPathRegisterVariable_APIParam_3 is the variable xmlXPathRegisterVariable_APIParam_3 or NULL', 'param be variable param null']
['xmlXPathRegisterVariable_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['it unregisters the variable', 'unregister variable']
['register an external mechanism to do variable lookup', 'register external mechanism variable lookup']
['xmlXPathRegisterVariableLookup_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterVariableLookup_APIParam_2 is the lookup function', 'param be lookup function']
['xmlXPathRegisterVariableLookup_APIParam_3 is the lookup data', 'param be lookup datum']
['Register a new variable xmlXPathRegisterVariableNS_APIParam_4', 'register variable param']
['xmlXPathRegisterVariableNS_APIParam_1 is the XPath context', 'param be context']
['xmlXPathRegisterVariableNS_APIParam_2 is the variable xmlXPathRegisterVariableNS_APIParam_2', 'param be variable param']
['xmlXPathRegisterVariableNS_APIParam_3 is the variable namespace URI', 'param be variable uri']
['xmlXPathRegisterVariableNS_APIParam_4 is the variable xmlXPathRegisterVariableNS_APIParam_4 or NULL', 'param be variable param null']
['it unregisters the variable', 'unregister variable']
['xmlXPathRegisterVariableNS_APIName returns 0 in case of success, -1 in case of error', 'api return constant case success , constant case error']
['Cleanup the XPath context data associated to registered functions', 'cleanup context datum associate register function']
['xmlXPathRegisteredFuncsCleanup_APIParam_1 is the XPath context', 'param be context']
['Cleanup the XPath context data associated to registered variables', 'cleanup context datum associate register variable']
['xmlXPathRegisteredNsCleanup_APIParam_1 is the XPath context', 'param be context']
['Cleanup the XPath context data associated to registered variables', 'cleanup context datum associate register variable']
['xmlXPathRegisteredVariablesCleanup_APIParam_1 is the XPath context', 'param be context']
['Initialize the context to the root of the document', 'initialize context root']
['xmlXPathRoot_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathRoundFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['If there are two such numbers, the one that is closest to positive infinitybe returned by xmlXPathRoundFunction_APIName', 'if be two number , one close positive infinitybe return by api']
['Implement the round_APIName XPath function number round The round function returns the number that is closest to the argument and that is an integer', 'implement api function number function return number close param integer']
['xmlXPathRoundFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathStartsWithFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathStartsWithFunction_APIParam_2 is the number of arguments', 'param be number param']
["= Digits -LRB- ' . '", 'digit _ lrb']
['xmlXPathStringEvalNumber_APIParam_1 is A string to scan', 'param be string']
['Implement the starts-with_APIName XPath function boolean starts-with The starts-with function returns true if the first argument string starts with the second argument string, and otherwise returns false', 'implement api function param function return constant  , otherwise return constant']
['xmlXPathStringEvalNumber_APIName returns the double value', 'api return double value']
['Implement the string_APIName XPath function string string', 'implement api function string string']
['If the node-set is empty, an empty stringbe returned by xmlXPathStringFunction_APIName', 'if param be empty , empty stringbe return by api']
['- The boolean false value is converted to the string false', '_ constant value be convert string constant']
['The boolean true value is converted to the string true', 'constant value be convert string constant']
['xmlXPathStringFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathStringFunction_APIParam_2 is the number of arguments', 'param be number param']
['The string function converts an object to a string as follows', 'string function convert object string as follow']
['- A node-set is converted to a string by returning the value of the node in the node-set that is first in document order', '_ param be convert string by return value param first order']
['Implement the string-length_APIName XPath function number string-length', 'implement api function number param']
['The string-length returns the number of characters in the string', 'param return number character string']
['xmlXPathStringLengthFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathStringLengthFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathSubValues_APIParam_1 is the XPath Parser context', 'param be parser context']
['is omitted , it defaults to a node-set with the context node as its only member', 'be omit , default param context as only member']
['substring-after returns 04/01, and substring-after returns 99/04/01', 'param return , param return']
['Implement the subtraction operation on XPath objects', 'implement operation object']
['xmlXPathSubstringAfterFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathSubstringAfterFunction_APIParam_2 is the number of arguments', 'param be number param']
['substring-before returns 1999. xmlXPathSubstringBeforeFunction_APIParam_1 is the XPath Parser context', 'param return constant param be parser context']
['xmlXPathSubstringBeforeFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the substring_APIName XPath function string substring', 'implement api function string substring']
['substring returns "234"', 'return constant']
['substring returns "2345"', 'return constant']
['The substring function returns the substring of the first argument starting at the position specified in the second argument with length specified in the third argument', 'function return first param start position specify second param length specify third param']
['the argument defaults to the context node converted to a string , the value of the context node', 'param default context convert string , value context']
['The numeric operators convert The numeric operators operands to numbers by calling the number function', 'numeric convert numeric number by call number function']
['xmlXPathSubstringFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['If the third argument is not specified, {}_APIName returns the substring starting at the position specified in the second argument and continuing to the end of the string', 'if third param be not specify , api return start position specify second param continue end string']
['xmlXPathSubstringFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathSumFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathSumFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the sum_APIName XPath function number sum The sum function returns the sum of the values of the nodes in the argument node-set', 'implement api function number function return value param']
['More precisely , each character in the string is considered to have a numeric position', 'precisely , character string be consider have numeric position']
['xmlXPathTrailing_APIParam_2 is a node-set', 'param be param']
['xmlXPathTrailing_APIParam_1 is a node-set', 'param be param']
['the position of the first character is 1 , the position of the second character is 2 and so on', 'position first character be constant , position second character be constant']
['Implements the EXSLT - Sets trailing_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['trailing @nodes1 and @nodes2 are sorted by document order , #xmlXPathTrailingSorted is called', 'trail be sort by order , api be call']
['Implements the EXSLT - Sets trailing_APIName function', 'implement _ set api function']
['node-set set', 'param set']
['xmlXPathTrailingSorted_APIParam_1 is a node-set , sorted by document order', 'param be param , sort by order']
['Implement the substring-after_APIName XPath function string substring-after The substring-after function returns the substring of the first argument string that follows the first occurrence of the second argument string in the first argument string, or the empty stringi if the first argument string does not contain the second argument string', 'implement api function string param function return first param string follow first second param string first param string , empty']
['xmlXPathTrailingSorted_APIParam_2 is a node-set , sorted by document order', 'param be param , sort by order']
['translate returns the string BAr', 'translate return stre']
['Digits Digits', 'digit digit']
['xmlXPathTrailing_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2', 'api return follow first order']
['= + Compile a Number in the string In complement of the Number expression , xmlXPathStringEvalNumber_APIName also handles negative values', 'compile number stre number , api negative value']
['Implement the substring-before_APIName XPath function string substring-before The substring-before function returns the substring of the first argument string that precedes the first occurrence of the second argument string in the first argument string, or the empty string if the first argument string does not contain the second argument string', 'implement api function string param function return first param string precede first second param string first param string , empty string']
['xmlXPathTranslateFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
["' - ' Number", '_ number']
['xmlXPathTranslateFunction_APIParam_2 is the number of arguments', 'param be number param']
['Implement the true_APIName XPath function boolean true_APIName', 'implement api function api']
['xmlXPathTrueFunction_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPathTrailingSorted_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2', 'api return follow first order']
['xmlXPathTrueFunction_APIParam_2 is the number of arguments', 'param be number param']
['xmlXPathValueFlipSign_APIParam_1 is the XPath Parser context', 'param be parser context']
['Implement the translate_APIName XPath function string translate The translate function returns the first argument string with occurrences of characters in the second argument string replaced by the character at the corresponding position in the third argument string', 'implement api function string translate translate function return first param string character second param string replace by character correspond position third param string']
['Search in the Variable array of the context for the given variable value', 'search variable array context give variable value']
['xmlXPathVariableLookup_APIParam_1 is the XPath context', 'param be context']
['xmlXPathSubstringFunction_APIParam_0 contains those characters and , , less than the sum of the second and third arguments', 'param contain character , less second third param']
['the comparisons and addition used for the above follow the standard IEEE 754 rules', 'comparison addition use follow standard constant rule']
['xmlXPathVariableLookup_APIParam_2 is the variable xmlXPathVariableLookup_APIParam_2', 'param be variable param']
['xmlXPathVariableLookup_APIName returns a copy of the value or NULL if not found', 'api return copy value null if not find']
['Implement the unary - operation on an XPath object The numeric operators convert The numeric operators operands to numbers by calling the number function', 'implement unary _ operation object numeric convert numeric number by call number function']
['occurrences of that character in the first argument string are removed', 'character first param string be remove']
['- substring returns "234" - substring returns "12" - substring returns "" - substring returns "" - substring returns "12345" - substring returns ""', '_ substring return constant _ substring return constant _ substring return _ substring return _ substring return constant _ substring return']
['there must be no leading zeros before the decimal point apart possibly from the one required digit immediately before the decimal point', 'must be no lead constant before decimal point apart possibly one require digit immediately before decimal point']
['xmlXPathVariableLookupNS_APIParam_1 is the XPath context', 'param be context']
['Search in the Variable array of the context for the given variable value', 'search variable array context give variable value']
['xmlXPathVariableLookupNS_APIParam_3 is the variable namespace URI', 'param be variable uri']
['xmlXPathVariableLookupNS_APIName returns the a copy of the value or NULL if not found', 'api return copy value null if not find']
['Wraps a string into an XPath object', 'wrap string object']
['beyond the one required digit after the decimal point there must be as many , but only as many , more digits as are needed to uniquely distinguish the number from all other IEEE 754 numeric values', 'beyond one require digit after decimal point must be as many , but only as many , digit as be need uniquely distinguish number constant numeric value']
['xmlXPathVariableLookupNS_APIParam_2 is the variable xmlXPathVariableLookupNS_APIParam_2', 'param be variable param']
['xmlXPathWrapCString_APIName returns the newly created object', 'api return newly create object']
['xmlXPathWrapCString_APIParam_1 is the char * value', 'param be char value']
['Wraps the @val data into an XPath object', 'wrap data object']
['xmlXPathWrapExternal_APIName returns the newly created object', 'api return newly create object']
['xmlXPathWrapExternal_APIParam_1 is the user data', 'param be user datum']
['xmlXPathWrapNodeSet_APIParam_1 is the NodePtr value', 'param be value']
['xmlXPathWrapNodeSet_APIName returns the newly created object', 'api return newly create object']
['Wraps the @val string into an XPath object', 'wrap string object']
['xmlXPathWrapString_APIParam_1 is the xmlChar * value', 'param be value']
['xmlXPathWrapString_APIName returns the newly created object', 'api return newly create object']
['Formats an error message', 'format error message']
['xmlXPatherror_APIParam_1 is the XPath Parser context', 'param be parser context']
['xmlXPatherror_APIParam_2 is the xmlXPatherror_APIParam_2 name', 'param be param name']
['xmlXPatherror_APIParam_3 is the xmlXPatherror_APIParam_3 number', 'param be param number']
['xmlXPatherror_APIParam_4 is the error number', 'param be error number']
['Free up the memory allocated by @comp', 'free memory by']
['xmlFreePattern_APIParam_1 is an XSLT comp', 'param be']
['Free up the memory allocated by all the elements of @comp', 'free memory by element']
['xmlFreePatternList_APIParam_1 is an XSLT xmlFreePatternList_APIParam_1 list', 'param be param list']
['Free the xmlFreeStreamCtxt_APIParam_1 context', 'free param context']
['xmlFreeStreamCtxt_APIParam_1 is the xmlFreeStreamCtxt_APIParam_1 context', 'param be param context']
['xmlPatternFromRoot_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['xmlPatternFromRoot_APIName returns 1 if true, 0 if false and -1 in case of error', 'api return constant']
['Get a streaming context for that pattern Use xmlFreeStreamCtxt to free the context', 'get stream context pattern use api free context']
['xmlPatternGetStreamCtxt_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['xmlPatternGetStreamCtxt_APIName returns a pointer to the context or NULL in case of failure', 'api return pointer context null case failure']
['Test whether the xmlPatternMatch_APIParam_2 matches the pattern', 'test whether param match pattern']
['xmlPatternMatch_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['xmlPatternMatch_APIParam_2 is a xmlPatternMatch_APIParam_2', 'param be param']
['Check the maximum depth reachable by a pattern', 'check maximum reachable by pattern']
['xmlPatternMatch_APIName returns 1 if it matches, 0 if it does not and -1 in case of failure', 'api return constant']
['xmlPatternMaxDepth_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['are part of the set', 'be part set']
['xmlPatternMinDepth_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['xmlPatternMaxDepth_APIName returns -2 if no limit , otherwise the depth, and -1 in case of error', 'api return constant  , otherwise , constant case error']
['Check the minimum depth reachable by a pattern , 0 mean the / or', 'check minimum reachable by pattern , constant mean']
['xmlPatternMinDepth_APIName returns -1 in case of error otherwise the depth', 'api return constant case error otherwise']
['A number is converted to a string as follows + NaN is converted to the string NaN + positive zero is converted to the string 0 + negative zero is converted to the string 0 + positive infinity is converted to the string Infinity + negative infinity is converted to the string - Infinity + , the number is represented in decimal form as a Number with no decimal point and no leading zeros , preceded by a minus sign if the number is negative + otherwise , the number is represented in decimal form as a Number including a decimal point with at least one digit before the decimal point and at least one digit after the decimal point , preceded by a minus sign if the number is negative', 'number be convert string as follow be convert string positive constant be convert stre constant negative constant be convert stre constant positive infinity be convert stre infinity negative infinity be convert string _ infinity , number be represent decimal form as number no decimal point no lead constant , precede by sign  one digit before decimal point least one digit after decimal point , precede by sign']
['xmlPatternGetStreamCtxt_APIName should work', 'api should work']
['xmlPatternStreamable_APIParam_1 is the precompiled pattern', 'param be precompile pattern']
['Compile a xmlPatterncompile_APIParam_1', 'compile param']
['xmlPatternStreamable_APIName returns 1 if streamable, 0 if not and -1 in case of error', 'api return constant']
['xmlPatterncompile_APIParam_1 is the xmlPatterncompile_APIParam_1 to compile', 'param be param compile']
['xmlPatterncompile_APIParam_2 is an optional dictionary for interned strings', 'param be optional string']
['xmlPatterncompile_APIParam_3 is compilation xmlPatterncompile_APIParam_3 , see xmlPatternFlags', 'param be compilation param , see']
['xmlPatterncompile_APIParam_4 is the prefix definitions , array of or NULL', 'param be prefix definition , array null']
['xmlPatterncompile_APIName returns the compiled form of the xmlPatterncompile_APIParam_1 or NULL in case of error', 'api return compile form param null case error']
['push one level from the xmlStreamPop_APIParam_1', 'one level param']
['xmlStreamPop_APIParam_1 is the xmlStreamPop_APIParam_1 context', 'param be param context']
['xmlStreamPop_APIName returns -1 in case of error, 0 otherwise', 'api return constant case error , constant otherwise']
['Push new data onto the xmlStreamPush_APIParam_1', 'datum onto param']
['This can also act as a reset', 'can act as reset']
['xmlStreamPush_APIParam_1 is the xmlStreamPush_APIParam_1 context', 'param be param context']
['Both @name and @ns being NULL means the / i.e', 'name null mean']
['xmlStreamPush_APIParam_2 is the current xmlStreamPush_APIParam_2', 'param be current param']
['xmlStreamPush_APIParam_3 is the namespace xmlStreamPush_APIParam_2', 'param be param']
['strings for xmlStreamPush_APIParam_2 and xmlStreamPush_APIParam_3 will be expected to come from the dictionary', 'string param be expect come']
['Push new attribute data onto the xmlStreamPushAttr_APIParam_1', 'attribute datum onto param']
['xmlStreamPush_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPush_APIParam_1 is a match and 0 otherwise', 'api return constant case error , constant']
['Otherwise the function will act', 'otherwise function act']
['This can also act as a reset', 'can act as reset']
['xmlStreamPushAttr_APIParam_1 is the xmlStreamPushAttr_APIParam_1 context', 'param be param context']
['Both @name and @ns being NULL means the / i.e', 'name null mean']
['xmlStreamPushAttr_APIParam_2 is the current xmlStreamPushAttr_APIParam_2', 'param be current param']
['xmlStreamPushAttr_APIParam_3 is the namespace xmlStreamPushAttr_APIParam_2', 'param be param']
['strings for xmlStreamPushAttr_APIParam_2 and xmlStreamPushAttr_APIParam_3 will be expected to come from the dictionary', 'string param be expect come']
['Push new data onto the xmlStreamPushNode_APIParam_1', 'datum onto param']
['xmlStreamPushAttr_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushAttr_APIParam_1 is a match and 0 otherwise', 'api return constant case error , constant']
['Otherwise the function will act', 'otherwise function act']
['This can also act as a reset', 'can act as reset']
['xmlStreamPushNode_APIParam_1 is the xmlStreamPushNode_APIParam_1 context', 'param be param context']
['Both @name and @ns being NULL means the / i.e', 'name null mean']
['xmlStreamPushNode_APIParam_2 is the current xmlStreamPushNode_APIParam_2', 'param be current param']
['Different from xmlStreamPush_APIName xmlStreamPushNode_APIName can be fed with nodes of type', 'different api can be feed type']
['xmlStreamPushNode_APIParam_3 is the namespace xmlStreamPushNode_APIParam_2', 'param be param']
['xmlStreamPushNode_APIParam_4 is the type of the node being pushed', 'param be type']
['element - , attribute - , text - , cdata-section - , comment - and processing-instruction-node', 'element _ , attribute _ , text _ , param _ , comment _ param']
['strings for xmlStreamPushNode_APIParam_2 and xmlStreamPushNode_APIParam_3 will be expected to come from the dictionary', 'string param be expect come']
['xmlStreamPushNode_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushNode_APIParam_1 is a match and 0 otherwise', 'api return constant case error , constant']
['-1 on API errors', 'constant api error']
['xmlStreamWantsAnyNode_APIParam_1 is the stream context', 'param be stream context']
['xmlStreamWantsAnyNode_APIName returns 1 in case of need of nodes of the above described types, 0 otherwise', 'api return constant case nee describe type , constant otherwise']
['element-nodes and attribute-nodes need to be pushed', 'param nee be']
['xlinkExtendedLinkFunk_APIParam_1 is user data pointer', 'param be user datum pointer']
['This is the prototype for a extended link detection callback', 'be prototype extend link detection callback']
['xlinkExtendedLinkFunk_APIParam_2 is the xlinkExtendedLinkFunk_APIParam_2 carrying the link', 'param be param carry link']
['xlinkExtendedLinkFunk_APIParam_4 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_4', 'param be pointer param array param']
['xlinkExtendedLinkFunk_APIParam_6 is the number of arcs detected on the link', 'param be number detect link']
['xlinkExtendedLinkFunk_APIParam_7 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of source xlinkExtendedLinkFunk_APIParam_5 found on the arcs', 'param be pointer param array source param find']
['xlinkExtendedLinkFunk_APIParam_8 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of target xlinkExtendedLinkFunk_APIParam_5 found on the arcs', 'param be pointer param array target param find']
['xlinkExtendedLinkFunk_APIParam_5 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_5', 'param be pointer param array param']
['xlinkExtendedLinkFunk_APIParam_9 is array of values for the xlinkExtendedLinkFunk_APIParam_9 attributes found on the arcs', 'param be array value param attribute find']
['xlinkExtendedLinkFunk_APIParam_3 is the number of locators detected on the link', 'param be number detect link']
['xlinkExtendedLinkFunk_APIParam_10 is array of values for the xlinkExtendedLinkFunk_APIParam_10 attributes found on the arcs', 'param be array value param attribute find']
['xlinkExtendedLinkFunk_APIParam_11 is the number of xlinkExtendedLinkFunk_APIParam_12 detected on the link', 'param be number param detect link']
['xlinkExtendedLinkFunk_APIParam_12 is', 'param be']
['xlinkExtendedLinkFunk_APIParam_13 is array of xmllang values for the titles', 'param be array value title']
['xlinkExtendedLinkSetFunk_APIParam_1 is user data pointer', 'param be user datum pointer']
['xlinkExtendedLinkSetFunk_APIParam_2 is the xlinkExtendedLinkSetFunk_APIParam_2 carrying the link', 'param be param carry link']
['This is the prototype for a extended link set detection callback', 'be prototype extend link set detection callback']
['xlinkExtendedLinkSetFunk_APIParam_3 is the number of locators detected on the link', 'param be number detect link']
['xlinkExtendedLinkSetFunk_APIParam_4 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_4', 'param be pointer array param']
['xlinkExtendedLinkSetFunk_APIParam_5 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_5', 'param be pointer array param']
['xlinkExtendedLinkSetFunk_APIParam_6 is the number of xlinkExtendedLinkSetFunk_APIParam_7 detected on the link', 'param be number param detect link']
['xlinkExtendedLinkSetFunk_APIParam_7 is', 'param be']
['xlinkExtendedLinkSetFunk_APIParam_8 is array of xmllang values for the titles', 'param be array value title']
['Get the default xlink detection routine', 'get default detection api']
['xlinkGetDefaultDetect_APIName returns the current function or NULL', 'api return current function null']
['Get the default xlink handler', 'get default handler']
['xlinkGetDefaultHandler_APIName returns the current xlinkHandlerPtr value', 'api return current value']
['Check whether the given xlinkIsLink_APIParam_2 carries the attributes needed to be a link element HTML DtDs -RRB-', 'check whether give param carry attribute need be link element _ rrb']
['xlinkIsLink_APIParam_1 is the document containing the xlinkIsLink_APIParam_2', 'param be contain param']
['xlinkIsLink_APIParam_2 is the xlinkIsLink_APIParam_2 pointer itself', 'param be param pointer']
['xlinkIsLink_APIName returns the xlinkType of the xlinkIsLink_APIParam_2 (XLINK_TYPE_NONE if there is no link detected', 'api return param']
['This routine do not try to do full checking of the link validity but tries to detect and return the appropriate link type', 'api not full link validity but detect return appropriate link type']
['This is the prototype for the link detection routine', 'be prototype link detection api']
['It calls the default link detection callbacks upon link detection', 'call default link detection callback upon link detection']
['xlinkNodeDetectFunc_APIParam_1 is user data pointer', 'param be user datum pointer']
['xlinkNodeDetectFunc_APIParam_2 is the xlinkNodeDetectFunc_APIParam_2 to check', 'param be param check']
['Set the default xlink detection routine', 'set default detection api']
['xlinkSetDefaultDetect_APIParam_1 is pointer to the new detection routine', 'param be pointer detection api']
['Set the default xlink handlers', 'set default handler']
['xlinkSetDefaultHandler_APIParam_1 is the new value for the xlink xlinkSetDefaultHandler_APIParam_1 block', 'param be value param block']
['xlinkSimpleLinkFunk_APIParam_1 is user data pointer', 'param be user datum pointer']
['This is the prototype for a simple link detection callback', 'be prototype simple link detection callback']
['xlinkSimpleLinkFunk_APIParam_2 is the xlinkSimpleLinkFunk_APIParam_2 carrying the link', 'param be param carry link']
['xlinkSimpleLinkFunk_APIParam_3 is the target of the link', 'param be target link']
['xlinkSimpleLinkFunk_APIParam_4 is the xlinkSimpleLinkFunk_APIParam_4 string', 'param be param string']
['xlinkSimpleLinkFunk_APIParam_5 is the link xlinkSimpleLinkFunk_APIParam_5', 'param be link param']
['Initialize the default SAX handler', 'initialize default handler']
['Initialize the default SAX handler', 'initialize default handler']
['Initialize the default SAX2 handler', 'initialize default handler']
['An attribute definition has been parsed', 'attribute definition have be parse']
['xmlSAX2AttributeDecl_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2AttributeDecl_APIParam_2 is the name of the element', 'param be name element']
['xmlSAX2AttributeDecl_APIParam_3 is the attribute name', 'param be attribute name']
['xmlSAX2AttributeDecl_APIParam_4 is the attribute xmlSAX2AttributeDecl_APIParam_4', 'param be attribute param']
['xmlSAX2AttributeDecl_APIParam_5 is the xmlSAX2AttributeDecl_APIParam_4 of default value', 'param be param default value']
['xmlSAX2AttributeDecl_APIParam_6 is the attribute default value', 'param be attribute default value']
['xmlSAX2AttributeDecl_APIParam_7 is the xmlSAX2AttributeDecl_APIParam_7 of enumerated value set', 'param be param enumerate value set']
['xmlSAX2CDataBlock_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2CDataBlock_APIParam_2 is The pcdata content', 'param be content']
['xmlSAX2CDataBlock_APIParam_3 is the block length', 'param be block length']
['receiving some chars from the parser', 'receive char parser']
['xmlSAX2Characters_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2Characters_APIParam_2 is a xmlChar string', 'param be string']
['xmlSAX2Characters_APIParam_3 is the number of xmlChar', 'param be number']
['A xmlSAX2Comment_APIName has been parsed', 'api have be parse']
['xmlSAX2Comment_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2Comment_APIParam_2 is the xmlSAX2Comment_APIName content', 'param be api content']
['An element definition has been parsed', 'element definition have be parse']
['xmlSAX2ElementDecl_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2ElementDecl_APIParam_2 is the element xmlSAX2ElementDecl_APIParam_2', 'param be element param']
['xmlSAX2ElementDecl_APIParam_3 is the element xmlSAX2ElementDecl_APIParam_3', 'param be element param']
['xmlSAX2ElementDecl_APIParam_4 is the element value tree', 'param be element value']
['xmlSAX2EndDocument_APIParam_1 is the user data -LRB- XML parser context', 'param be user datum _ lrb _ parser context']
['xmlSAX2EndElement_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2EndElement_APIParam_2 is The element name', 'param be element name']
['It provides the namespace informations for the element', 'provide information element']
['xmlSAX2EndElementNs_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2EndElementNs_APIParam_2 is the local name of the element', 'param be local name element']
['An entity definition has been parsed', 'definition have be parse']
['xmlSAX2EntityDecl_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2EntityDecl_APIParam_2 is the entity xmlSAX2EntityDecl_APIParam_2', 'param be param']
['xmlSAX2EndElementNs_APIParam_3 is the element namespace xmlSAX2EndElementNs_APIParam_3', 'param be element param']
['xmlSAX2EntityDecl_APIParam_3 is the entity xmlSAX2EntityDecl_APIParam_3', 'param be param']
['xmlSAX2EndElementNs_APIParam_4 is the element namespace name', 'param be element name']
['xmlSAX2EntityDecl_APIParam_4 is The public ID of the entity', 'param be -PRON- would']
['xmlSAX2EntityDecl_APIParam_5 is The system ID of the entity', 'param be system -PRON- would']
['xmlSAX2EntityDecl_APIParam_6 is the entity value -LRB- without processing', 'param be value _ lrb _ without processing']
['Callback on external subset declaration', 'callback external declaration']
['xmlSAX2ExternalSubset_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2ExternalSubset_APIParam_2 is the root element xmlSAX2ExternalSubset_APIParam_2', 'param be root element param']
['xmlSAX2ExternalSubset_APIParam_3 is the external ID', 'param be external -PRON- would']
['xmlSAX2ExternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g', 'param be system -PRON- would _ lrb _']
['Provide the column number of the current parsing point', 'provide number current parsing point']
['xmlSAX2GetColumnNumber_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2GetColumnNumber_APIName returns an int', 'api return int']
['Get an entity by xmlSAX2GetEntity_APIParam_2', 'get by param']
['xmlSAX2GetEntity_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2GetEntity_APIParam_2 is The entity xmlSAX2GetEntity_APIParam_2', 'param be param']
['xmlSAX2GetEntity_APIName returns the xmlEntityPtr if found', 'api return if find']
['Provide the line number of the current parsing point', 'provide line number current parsing point']
['xmlSAX2GetLineNumber_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2GetLineNumber_APIName returns an int', 'api return int']
['Get a parameter entity by xmlSAX2GetParameterEntity_APIParam_2', 'get param by param']
['xmlSAX2GetParameterEntity_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2GetParameterEntity_APIParam_2 is The entity xmlSAX2GetParameterEntity_APIParam_2', 'param be param']
['xmlSAX2GetParameterEntity_APIName returns the xmlEntityPtr if found', 'api return if find']
['Provides the public ID e.g', 'provide -PRON- would']
['xmlSAX2GetPublicId_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2GetPublicId_APIName returns a xmlChar', 'api return']
['Provides the system ID , basically URL or filename e.g', 'provide system -PRON- would , basically filename']
['xmlSAX2GetSystemId_APIName returns a xmlChar', 'api return']
['xmlSAX2GetSystemId_APIParam_1 is the user data', 'param be user datum']
['Does this document has an external subset', 'do have external']
['xmlSAX2HasExternalSubset_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2HasExternalSubset_APIName returns 1 if true', 'api return constant if constant']
['Does this document has an internal subset', 'do have internal']
['xmlSAX2HasInternalSubset_APIParam_1 is the user data', 'param be user datum']
["'' - / / SGMLSOURCE / / DTD DEMO / / EN ''", '_ en']
['xmlSAX2HasInternalSubset_APIName returns 1 if true', 'api return constant if constant']
['receiving some ignorable whitespaces from the parser', 'receive ignorable whitespace parser']
['by default the DOM building will use xmlSAX2Characters', 'by default use api']
['xmlSAX2IgnorableWhitespace_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2IgnorableWhitespace_APIParam_2 is a xmlChar string', 'param be string']
['xmlSAX2IgnorableWhitespace_APIParam_3 is the number of xmlChar', 'param be number']
['Initialize the default XML SAX2 handler', 'initialize default handler']
['xmlSAX2InitDefaultSAXHandler_APIParam_1 is the SAX handler', 'param be handler']
['Initialize the default DocBook SAX2 handler', 'initialize default handler']
['xmlSAX2InitDocbDefaultSAXHandler_APIParam_1 is the SAX handler', 'param be handler']
['Initialize the default HTML SAX2 handler', 'initialize default handler']
['xmlSAX2InitHtmlDefaultSAXHandler_APIParam_1 is the SAX handler', 'param be handler']
['xmlSAX2InitDefaultSAXHandler_APIParam_2 is flag', 'param be flag']
['Callback on internal subset declaration', 'callback internal declaration']
['xmlSAX2InternalSubset_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2InternalSubset_APIParam_2 is the root element xmlSAX2InternalSubset_APIParam_2', 'param be root element param']
['xmlSAX2InternalSubset_APIParam_3 is the external ID', 'param be external -PRON- would']
['xmlSAX2InternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g', 'param be system -PRON- would _ lrb _']
['xmlSAX2IsStandalone_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2IsStandalone_APIName returns 1 if true', 'api return constant if constant']
['xmlSAX2NotationDecl_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2NotationDecl_APIParam_2 is The xmlSAX2NotationDecl_APIParam_2 of the notation', 'param be param']
['xmlSAX2NotationDecl_APIParam_3 is The public ID of the entity', 'param be -PRON- would']
['xmlSAX2NotationDecl_APIParam_4 is The system ID of the entity', 'param be system -PRON- would']
['A processing instruction has been parsed', 'processing instruction have be parse']
['xmlSAX2ProcessingInstruction_APIParam_1 is the user xmlSAX2ProcessingInstruction_APIParam_3', 'param be user param']
['xmlSAX2ProcessingInstruction_APIParam_2 is the xmlSAX2ProcessingInstruction_APIParam_2 name', 'param be param name']
['xmlSAX2ProcessingInstruction_APIParam_3 is the PI data', 'param be datum']
['xmlSAX2Reference_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2Reference_APIParam_2 is The entity name', 'param be name']
['xmlSAX2ResolveEntity_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2ResolveEntity_APIParam_2 is The public ID of the entity', 'param be -PRON- would']
['xmlSAX2ResolveEntity_APIParam_3 is The system ID of the entity', 'param be system -PRON- would']
['xmlSAX2ResolveEntity_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour', 'api return if inline null behaviour']
['xmlSAX2SetDocumentLocator_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2SetDocumentLocator_APIParam_2 is A SAX Locator', 'param be']
['The entity loader , to control the loading of external entities , the application can either', 'control load external , application can either']
['Receive the document locator at startup , actually xmlDefaultSAXLocator Everything is available on the context , so this is useless in our case', 'receive , actually everything be available context , be useless case']
['xmlSAX2StartDocument_APIParam_1 is the user data -LRB- XML parser context', 'param be user datum _ lrb _ parser context']
['xmlSAX2StartElement_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2StartElement_APIParam_2 is The element name , including namespace prefix', 'param be element name , include prefix']
['- override this xmlSAX2ResolveEntity_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine', '_ override api callback block _ well use api function set be resolution api']
['xmlSAX2StartElement_APIParam_3 is An array of name/value attributes pairs , NULL terminated', 'param be array attribute pair , null terminate']
['xmlSAX2StartElementNs_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2StartElementNs_APIParam_2 is the local name of the element', 'param be local name element']
['It provides the namespace informations for the element , as well as the new namespace declarations on the element', 'provide information element , as well as declaration element']
['xmlSAX2StartElementNs_APIParam_5 is number of namespace definitions on that node', 'param be number definition']
['xmlSAX2StartElementNs_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions', 'param be pointer array pair definition']
['xmlSAX2StartElementNs_APIParam_3 is the element namespace xmlSAX2StartElementNs_APIParam_3', 'param be element param']
['xmlSAX2StartElementNs_APIParam_7 is the number of xmlSAX2StartElementNs_APIParam_9 on that node', 'param be number param']
['xmlSAX2StartElementNs_APIParam_4 is the element namespace name', 'param be element name']
['xmlSAX2StartElementNs_APIParam_8 is the number of defaulted xmlSAX2StartElementNs_APIParam_9', 'param be number default param']
['xmlSAX2StartElementNs_APIParam_9 is pointer to the array of attribute values', 'param be pointer array attribute value']
['xmlSAX2UnparsedEntityDecl_APIParam_1 is the user data', 'param be user datum']
['xmlSAX2UnparsedEntityDecl_APIParam_2 is The xmlSAX2UnparsedEntityDecl_APIParam_2 of the entity', 'param be param']
['xmlSAX2UnparsedEntityDecl_APIParam_3 is The public ID of the entity', 'param be -PRON- would']
['xmlSAX2UnparsedEntityDecl_APIParam_4 is The system ID of the entity', 'param be system -PRON- would']
['xmlSAX2UnparsedEntityDecl_APIParam_5 is the xmlSAX2UnparsedEntityDecl_APIParam_2 of the notation', 'param be param']
['Set the default xmlSAXDefaultVersion_APIParam_1 of SAX used globally by the library', 'set default param use globally by library']
['Initialize the default XML SAX handler according to the xmlSAXVersion_APIParam_2', 'initialize default handler accord param']
['xmlSAXDefaultVersion_APIParam_1 is the xmlSAXDefaultVersion_APIParam_1, 1 or 2. xmlSAXDefaultVersion_APIName returns the previous value in case of success and -1 in case of error', 'param be param constant api return previous value case success constant case error']
['Note that it is generally a better coding style to use xmlSAXVersion_APIName to set up the xmlSAXDefaultVersion_APIParam_1 explicitly for a given parsing context', 'be generally better code style use api set param explicitly give parsing context']
['xmlSAXVersion_APIParam_1 is the SAX handler', 'param be handler']
['By default , the default is set to 2', 'by default , default be set constant']
['Free up all the memory allocated by the library for its own use', 'free memory by library use']
['xmlSAXVersion_APIParam_2 is the xmlSAXVersion_APIParam_2, 1 or 2. xmlSAXVersion_APIName returns 0 in case of success and -1 in case of error', 'param be param constant api return constant case success constant case error']
['This should not be called by user level code', 'should not be call by user level code']
['Signature for a free_APIName implementation', 'signature api implementation']
['xmlFreeFunc_APIParam_1 is an already allocated block of memory', 'param be already block memory']
['of areas useful for garbage collected memory allocators', 'useful collect memory']
['xmlGcMemGet_APIParam_1 is place to save the free_APIName function in use', 'param be place api function use']
['xmlGcMemGet_APIParam_2 is place to save the malloc_APIName function in use', 'param be place api function use']
['xmlGcMemGet_APIParam_3 is place to save the atomic malloc_APIName function in use', 'param be place atomic api function use']
['xmlGcMemGet_APIParam_4 is place to save the realloc_APIName function in use', 'param be place api function use']
['Provides the memory access functions set currently in use The xmlGcMemGet_APIParam_3 is specialized for atomic block allocations -LRB- i.e', 'provide memory access function set currently use param be specialize atomic block allocation _ lrb _']
['xmlGcMemGet_APIParam_5 is place to save the strdup_APIName function in use', 'param be place api function use']
['xmlGcMemGet_APIName returns 0 on success', 'api return constant success']
['xmlGcMemSetup_APIParam_1 is the free_APIName function to use', 'param be api function use']
['Override the default memory access functions with a new set This has to be called before any other libxml routines !', 'override default memory access function set have be call before api']
['xmlGcMemSetup_APIParam_2 is the malloc_APIName function to use', 'param be api function use']
['The xmlGcMemSetup_APIParam_3 is specialized for atomic block allocations -LRB- i.e', 'param be specialize atomic block allocation _ lrb _']
['Should this be blocked', 'should be block']
['of areas useful for garbage collected memory allocators ?', 'useful collect memory']
['xmlGcMemSetup_APIParam_3 is the malloc_APIName function to use for atomic allocations', 'param be api function use atomic allocation']
['xmlGcMemSetup_APIParam_4 is the realloc_APIName function to use', 'param be api function use']
['xmlGcMemSetup_APIParam_5 is the strdup_APIName function to use', 'param be api function use']
['xmlGcMemSetup_APIName returns 0 on success', 'api return constant success']
['Initialize the memory layer', 'initialize memory layer']
['xmlInitMemory_APIName returns 0 on success', 'api return constant success']
['a malloc_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMallocAtomicLoc_APIParam_1 is an unsigned int specifying the xmlMallocAtomicLoc_APIParam_1 in byte to allocate', 'param be unsigned int specify param byte']
['xmlMallocAtomicLoc_APIParam_2 is the xmlMallocAtomicLoc_APIParam_2 name or NULL', 'param be param name null']
['xmlMallocAtomicLoc_APIParam_3 is the xmlMallocAtomicLoc_APIParam_3 number', 'param be param number']
['xmlMallocAtomicLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory', 'api return pointer null case lack memory']
['Signature for a malloc_APIName implementation', 'signature api implementation']
['xmlMallocFunc_APIParam_1 is the xmlMallocFunc_APIParam_1 requested in bytes', 'param be param request byte']
['xmlMallocFunc_APIName returns a pointer to the newly allocated block or NULL in case of error', 'api return pointer newly block null case error']
['a malloc_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMallocLoc_APIParam_1 is an int specifying the xmlMallocLoc_APIParam_1 in byte to allocate', 'param be int specify param byte']
['xmlMallocLoc_APIParam_2 is the xmlMallocLoc_APIParam_2 name or NULL', 'param be param name null']
['xmlMallocLoc_APIParam_3 is the xmlMallocLoc_APIParam_3 number', 'param be param number']
['Provides the number of memory areas currently allocated', 'provide number memory currently']
['xmlMallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory', 'api return pointer null case lack memory']
['xmlMemBlocks_APIName returns an int representing the number of blocks', 'api return int represent number block']
['show in-extenso the memory blocks allocated', 'param memory block']
['xmlMemDisplayLast_APIParam_2 is the amount of memory to dump', 'param be amount memory']
['the last xmlMemDisplayLast_APIParam_2 of memory allocated and not freed , useful for dumping the memory left allocated between two places at runtime', 'last param memory not free , useful dumping memory two place runtime']
['a free_APIName equivalent , with error checking', 'api equivalent , error']
['xmlMemFree_APIParam_1 is the memory block pointer', 'param be memory block pointer']
['xmlMemDisplay_APIParam_1 is a FILE descriptor used as the output file', 'param be file descriptor use as output file']
['Provides the memory access functions set currently in use', 'provide memory access function set currently use']
['xmlMemGet_APIParam_1 is place to save the free_APIName function in use', 'param be place api function use']
['xmlMemGet_APIParam_2 is place to save the malloc_APIName function in use', 'param be place api function use']
['xmlMemGet_APIParam_3 is place to save the realloc_APIName function in use', 'param be place api function use']
['xmlMemDisplayLast_APIParam_1 is a FILE descriptor used as the output file', 'param be file descriptor use as output file']
['xmlMemGet_APIName returns 0 on success', 'api return constant success']
['xmlMemGet_APIParam_4 is place to save the strdup_APIName function in use', 'param be place api function use']
['a malloc_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMemMalloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory', 'api return pointer null case lack memory']
['xmlMemMalloc_APIParam_1 is an int specifying the xmlMemMalloc_APIParam_1 in byte to allocate', 'param be int specify param byte']
['a realloc_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMemRealloc_APIParam_1 is the initial memory block pointer', 'param be initial memory block pointer']
['xmlMemRealloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory', 'api return pointer null case lack memory']
['xmlMemRealloc_APIParam_2 is an int specifying the xmlMemRealloc_APIParam_2 in byte to allocate', 'param be int specify param byte']
['xmlMemSetup_APIParam_1 is the free_APIName function to use', 'param be api function use']
['Override the default memory access functions with a new set This has to be called before any other libxml routines !', 'override default memory access function set have be call before api']
['xmlMemSetup_APIParam_2 is the malloc_APIName function to use', 'param be api function use']
['xmlMemSetup_APIParam_3 is the realloc_APIName function to use', 'param be api function use']
['Should this be blocked ?', 'should be block']
['xmlMemSetup_APIParam_4 is the strdup_APIName function to use', 'param be api function use']
['xmlMemSetup_APIName returns 0 on success', 'api return constant success']
['xmlMemShow_APIParam_1 is a FILE descriptor used as the output file', 'param be file descriptor use as output file']
['xmlMemShow_APIParam_2 is number of entries to dump', 'param be number entry']
['show a show display of the memory allocated , and dump the @nr last allocated areas which were not freed', 'memory , last which be not free']
['a strdup_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMemStrdupLoc_APIParam_1 is the initial string pointer', 'param be initial string pointer']
['xmlMemStrdupLoc_APIParam_2 is the xmlMemStrdupLoc_APIParam_2 name or NULL', 'param be param name null']
['xmlMemStrdupLoc_APIParam_3 is the xmlMemStrdupLoc_APIParam_3 number', 'param be param number']
['xmlMemStrdupLoc_APIName returns a pointer to the new string or NULL if allocation error occurred', 'api return pointer string null if allocation error occur']
['Provides the amount of memory currently allocated', 'provide amount memory currently']
['xmlMemUsed_APIName returns an int representing the amount of memory allocated', 'api return int represent amount memory']
['Dump in-extenso the memory blocks allocated to the file', 'param memory block file']
['a strdup_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlMemoryStrdup_APIParam_1 is the initial string pointer', 'param be initial string pointer']
['xmlMemoryStrdup_APIName returns a pointer to the new string or NULL if allocation error occurred', 'api return pointer string null if allocation error occur']
['Signature for a realloc_APIName implementation', 'signature api implementation']
['xmlReallocFunc_APIParam_1 is an already allocated block of memory', 'param be already block memory']
['xmlReallocFunc_APIParam_2 is the new xmlReallocFunc_APIParam_2 requested in bytes', 'param be param request byte']
['xmlReallocFunc_APIName returns a pointer to the newly reallocated block or NULL in case of error', 'api return pointer newly reallocate block null case error']
['a realloc_APIName equivalent , with logging of the allocation info', 'api equivalent , log allocation info']
['xmlReallocLoc_APIParam_1 is the initial memory block pointer', 'param be initial memory block pointer']
['xmlReallocLoc_APIParam_2 is an int specifying the xmlReallocLoc_APIParam_2 in byte to allocate', 'param be int specify param byte']
['xmlReallocLoc_APIParam_3 is the xmlReallocLoc_APIParam_3 name or NULL', 'param be param name null']
['xmlReallocLoc_APIParam_4 is the xmlReallocLoc_APIParam_4 number', 'param be param number']
['xmlReallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory', 'api return pointer null case lack memory']
['Signature for an strdup_APIName implementation', 'signature api implementation']
['xmlStrdupFunc_APIParam_1 is a zero terminated string', 'param be constant terminate string']
['Convenient way to turn bool into text', 'convenient way turn text']
['xmlStrdupFunc_APIName returns the copy of the string or NULL in case of error', 'api return copy string null case error']
['xmlBoolToText_APIParam_1 is a bool to turn into text', 'param be turn text']
['xmlBoolToText_APIName returns a pointer to either "True" or "False', 'api return pointer either constant']
['Check the document for potential content problems , and xmlDebugCheckDocument_APIParam_1 the errors to @output', 'check potential content problem , param error output']
['xmlDebugCheckDocument_APIParam_1 is the FILE * for the xmlDebugCheckDocument_APIParam_1', 'param be file param']
['xmlDebugCheckDocument_APIParam_2 is the document', 'param be']
['xmlDebugCheckDocument_APIName returns the number of errors found', 'api return number error find']
['xmlDebugDumpAttr_APIParam_1 is the FILE * for the xmlDebugDumpAttr_APIParam_1', 'param be file param']
['Dumps debug information for the attribute', 'debug information attribute']
['xmlDebugDumpAttr_APIParam_2 is the attribute', 'param be attribute']
['xmlDebugDumpAttr_APIParam_3 is the indentation level', 'param be level']
['Dumps debug information for the attribute list', 'debug information attribute list']
['xmlDebugDumpAttrList_APIParam_1 is the FILE * for the xmlDebugDumpAttrList_APIParam_1', 'param be file param']
['xmlDebugDumpAttrList_APIParam_3 is the indentation level', 'param be level']
['xmlDebugDumpAttrList_APIParam_2 is the attribute list', 'param be attribute list']
['Dumps debug information for the DTD', 'debug information']
['xmlDebugDumpDTD_APIParam_2 is the DTD', 'param be']
['xmlDebugDumpDTD_APIParam_1 is the FILE * for the xmlDebugDumpDTD_APIParam_1', 'param be file param']
['Dumps debug information for the document , it is recursive', 'debug information , be recursive']
['xmlDebugDumpDocument_APIParam_1 is the FILE * for the xmlDebugDumpDocument_APIParam_1', 'param be file param']
['xmlDebugDumpDocument_APIParam_2 is the document', 'param be']
['Dumps debug information cncerning the document , not recursive', 'debug information cncerne , not recursive']
['xmlDebugDumpDocumentHead_APIParam_1 is the FILE * for the xmlDebugDumpDocumentHead_APIParam_1', 'param be file param']
['xmlDebugDumpDocumentHead_APIParam_2 is the document', 'param be']
['Dumps debug information for all the entities in use by the document', 'debug information use by']
['xmlDebugDumpEntities_APIParam_1 is the FILE * for the xmlDebugDumpEntities_APIParam_1', 'param be file param']
['xmlDebugDumpEntities_APIParam_2 is the document', 'param be']
['Dumps debug information for the element xmlDebugDumpNode_APIParam_2 , it is recursive', 'debug information element param , be recursive']
['xmlDebugDumpNode_APIParam_1 is the FILE * for the xmlDebugDumpNode_APIParam_1', 'param be file param']
['xmlDebugDumpNode_APIParam_2 is the xmlDebugDumpNode_APIParam_2', 'param be param']
['xmlDebugDumpNode_APIParam_3 is the indentation level', 'param be level']
['Dumps debug information for the list of element xmlDebugDumpNodeList_APIParam_2 , it is recursive', 'debug information list element param , be recursive']
['xmlDebugDumpNodeList_APIParam_1 is the FILE * for the xmlDebugDumpNodeList_APIParam_1', 'param be file param']
['xmlDebugDumpNodeList_APIParam_2 is the xmlDebugDumpNodeList_APIParam_2 list', 'param be param list']
['xmlDebugDumpNodeList_APIParam_3 is the indentation level', 'param be level']
['Dumps debug information for the element xmlDebugDumpOneNode_APIParam_2 , it is not recursive', 'debug information element param , be not recursive']
['xmlDebugDumpOneNode_APIParam_1 is the FILE * for the xmlDebugDumpOneNode_APIParam_1', 'param be file param']
['xmlDebugDumpOneNode_APIParam_2 is the xmlDebugDumpOneNode_APIParam_2', 'param be param']
['xmlDebugDumpOneNode_APIParam_3 is the indentation level', 'param be level']
['xmlDebugDumpString_APIParam_1 is the FILE * for the xmlDebugDumpString_APIParam_1', 'param be file param']
['xmlDebugDumpString_APIParam_2 is the string', 'param be stre']
['xmlLsCountNode_APIParam_1 is the xmlLsCountNode_APIParam_1 to count', 'param be param count']
['xmlLsCountNode_APIName returns the number of children of @node', 'api return number']
['Dumps informations about the string', 'information string']
['Dump to @output the type and name of @node', 'output type name']
['xmlLsOneNode_APIParam_1 is the FILE * for the xmlLsOneNode_APIParam_1', 'param be file param']
['xmlLsOneNode_APIParam_2 is the xmlLsOneNode_APIParam_2 to dump', 'param be param']
['xmlShell_APIParam_1 is the initial document', 'param be initial']
['xmlShell_APIParam_2 is the xmlShell_APIParam_4 buffer', 'param be param buffer']
['xmlShell_APIParam_3 is the line reading function', 'param be line read function']
['Implements the XML shell This allow to load , validate , view , modify and save a document using a environment similar to a UNIX commandline', 'implement allow load , validate , view , modify use environment similar unix']
["Implements the XML shell function `` base '' dumps the current XML base of the xmlShellBase_APIParam_3", 'implement function base current base param']
['xmlShellBase_APIParam_1 is the shell context', 'param be context']
['xmlShellBase_APIParam_2 is unused', 'param be unused']
['xmlShellBase_APIParam_3 is a xmlShellBase_APIParam_3', 'param be param']
['xmlShellBase_APIParam_4 is unused', 'param be unused']
['xmlShell_APIParam_4 is the xmlShell_APIParam_4 FILE * , defaults to stdout', 'param be param file , default stdout']
['xmlShellBase_APIName returns 0', 'api return constant']
["Implements the XML shell function `` cat '' dumps the serialization xmlShellCat_APIParam_3 content", 'implement function serialization param content']
['xmlShellCat_APIParam_1 is the shell context', 'param be context']
['xmlShellCat_APIParam_2 is unused', 'param be unused']
['xmlShellCat_APIParam_3 is a xmlShellCat_APIParam_3', 'param be param']
['xmlShellCat_APIParam_4 is unused', 'param be unused']
['xmlShellCat_APIName returns 0', 'api return constant']
['This is a generic signature for the XML shell functions', 'be generic signature function']
['xmlShellCmd_APIParam_1 is a shell context', 'param be context']
['xmlShellCmd_APIParam_2 is a string argument', 'param be stre param']
['xmlShellCmd_APIParam_3 is a first xmlShellCmd_APIParam_3', 'param be first param']
['xmlShellCmd_APIParam_4 is a second xmlShellCmd_APIParam_3', 'param be second param']
['xmlShellCmd_APIName returns an int, negative returns indicating errors', 'api return int , negative return indicate error']
["Implements the XML shell function `` dir '' dumps informations about the xmlShellDir_APIParam_3", 'implement function dir information param']
['xmlShellDir_APIParam_1 is the shell context', 'param be context']
['xmlShellDir_APIParam_2 is unused', 'param be unused']
['xmlShellDir_APIParam_3 is a xmlShellDir_APIParam_3', 'param be param']
['xmlShellDir_APIParam_4 is unused', 'param be unused']
['xmlShellDu_APIParam_1 is the shell context', 'param be context']
['xmlShellDir_APIName returns 0', 'api return constant']
['xmlShellDu_APIParam_2 is unused', 'param be unused']
['xmlShellDu_APIParam_3 is a node defining a subtree', 'param be define']
['xmlShellDu_APIParam_4 is unused', 'param be unused']
['xmlShellDu_APIName returns 0 or -1 in case of error', 'api return constant case error']
['xmlShellList_APIParam_1 is the shell context', 'param be context']
['xmlShellList_APIParam_2 is unused', 'param be unused']
["Implements the XML shell function `` ls '' Does an Unix like listing of the given xmlShellList_APIParam_3", 'implement function do unix like list give param']
['xmlShellList_APIParam_3 is a xmlShellList_APIParam_3', 'param be param']
['xmlShellList_APIParam_4 is unused', 'param be unused']
['xmlShellList_APIName returns 0', 'api return constant']
['xmlShellLoad_APIParam_1 is the shell context', 'param be context']
['the command works on the current node', 'command work current']
["Implements the XML shell function `` du '' show the structure of the subtree under node @tree", 'implement function structure']
['xmlShellLoad_APIParam_2 is the file name', 'param be file name']
["Implements the XML shell function `` load '' loads a new document specified by the xmlShellLoad_APIParam_2", 'implement function load load specify by param']
['xmlShellLoad_APIParam_3 is unused', 'param be unused']
['xmlShellLoad_APIParam_4 is unused', 'param be unused']
['xmlShellLoad_APIName returns 0 or -1 if loading failed', 'api return constant']
['Print xmlShellPrintNode_APIParam_1 to the output FILE', 'print param output file']
['xmlShellPrintNode_APIParam_1 is a non-null xmlShellPrintNode_APIParam_1 to print to the output FILE', 'param be param print output file']
['Print the xpath error to libxml default error channel', 'print error default error']
['xmlShellPrintXPathError_APIParam_1 is valid xpath error id', 'param be valid error -PRON- would']
['xmlShellPrintXPathError_APIParam_2 is the argument that cause xpath to fail', 'param be param cause fail']
['Prints result to the output FILE', 'print result output file']
['xmlShellPrintXPathResult_APIParam_1 is a valid result generated by an xpath evaluation', 'param be valid result generate by']
['The output is compatible with XPath commands', 'output be compatible command']
['xmlShellPwd_APIParam_1 is the shell context', 'param be context']
['xmlShellPwd_APIParam_2 is the output xmlShellPwd_APIParam_2', 'param be output param']
['xmlShellPwd_APIParam_3 is a xmlShellPwd_APIParam_3', 'param be param']
['xmlShellPwd_APIParam_4 is unused', 'param be unused']
['xmlShellPwd_APIName returns 0 or -1 in case of error', 'api return constant case error']
['This is a generic signature for the XML shell input function', 'be generic signature input function']
['xmlShellReadlineFunc_APIParam_1 is a string xmlShellReadlineFunc_APIParam_1', 'param be stre param']
['xmlShellReadlineFunc_APIName returns a string which will be freed by the Shell', 'api return stre which be free by']
['xmlShellSave_APIParam_1 is the shell context', 'param be context']
['xmlShellSave_APIParam_2 is the file name', 'param be file name']
["Implements the XML shell function `` save '' Write the current document to the xmlShellSave_APIParam_2 , or it is original name", 'implement function write current param , be original name']
['xmlShellSave_APIParam_3 is unused', 'param be unused']
['xmlShellSave_APIParam_4 is unused', 'param be unused']
['xmlShellSave_APIName returns 0 or -1 in case of error', 'api return constant case error']
["Implements the XML shell function `` pwd '' Show the full path from the root to the xmlShellPwd_APIParam_3", 'implement function full path root param']
['xmlShellValidate_APIParam_1 is the shell context', 'param be context']
['xmlShellValidate_APIParam_2 is the DTD URI', 'param be uri']
['xmlShellValidate_APIParam_3 is unused', 'param be unused']
['xmlShellValidate_APIParam_4 is unused', 'param be unused']
['xmlShellValidate_APIName returns 0 or -1 in case of error', 'api return constant case error']
['xmlShellWrite_APIParam_1 is the shell context', 'param be context']
['xmlShellWrite_APIParam_2 is the file name', 'param be file name']
['xmlShellWrite_APIParam_3 is a xmlShellWrite_APIParam_3 in the tree', 'param be param']
['xmlShellWrite_APIParam_4 is unused', 'param be unused']
['xmlShellWrite_APIName returns 0 or -1 in case of error', 'api return constant case error']
['the validation is done against the given DTD', 'validation be do against give']
["Implements the XML shell function `` validate '' Validate the document", 'implement function validate validate']
["Implements the XML shell function `` write '' Write the current xmlShellWrite_APIParam_3 to the xmlShellWrite_APIParam_2 , it saves the serialization of the subtree under the @node specified", 'implement function write write current param , serialization specify']
['xmlCharStrdup_APIParam_1 is the input char *', 'param be input char']
['xmlCharStrdup_APIName returns a new xmlChar * or NULL', 'api return null']
['xmlCharStrndup_APIParam_1 is the input char *', 'param be input char']
['xmlCharStrndup_APIParam_2 is the xmlCharStrndup_APIParam_2 of @cur', 'param be param']
['xmlCharStrndup_APIName returns a new xmlChar * or NULL', 'api return null']
['Checks @utf for being valid UTF-8', 'check valid param']
['@utf is assumed to be null-terminated', 'be assume be param']
['xmlCheckUTF8_APIName is not super-strict , as it will allow longer UTF-8 sequences than necessary', 'api be not param , as allow long param sequence necessary']
['xmlCheckUTF8_APIName returns value true if @utf is valid', 'api return value constant']
['xmlCheckUTF8_APIParam_1 is Pointer to putative UTF-8 encoded string', 'param be pointer putative param encode string']
['Read the first UTF8 character from @utf', 'read first utf8 character']
['Also note , this routine checks for the 4-byte maximum size , but does not check for 0x10ffff maximum value', 'note , api check param maximum size , but do not check maximum value']
['producing these sequences', 'produce sequence']
['Note that Java is capable of', 'be capable']
['xmlGetUTF8Char_APIParam_1 is a sequence of UTF-8 encoded bytes', 'param be sequence param encode byte']
['xmlGetUTF8Char_APIParam_2 is a pointer to the minimum number of bytes present in the sequence', 'param be pointer minimum number byte present sequence']
['This is used to assure the next character is completely contained within the sequence', 'be use assure character be completely contain within sequence']
['Should be a bit more readable and faster than xmlStrcmp_APIName', 'should be bit readable fast api']
['xmlStrEqual_APIParam_1 is the first xmlChar *', 'param be first']
['xmlStrEqual_APIParam_2 is the second xmlChar *', 'param be second']
['xmlGetUTF8Char_APIName returns the char value or -1 in case of error, and sets *len to the actual number of bytes consumed (0 in case of error', 'api return char value constant case error , set actual number byte consume case error']
['xmlStrEqual_APIName returns 1 if they are equal, 0 if they are different', 'api return constant']
['Check have same content', 'check have content']
['Formats @msg xmlStrPrintf_APIParam_4 places result into @buf', 'format param place result']
['xmlStrPrintf_APIParam_1 is xmlStrPrintf_APIParam_4 result buffer', 'param be param result buffer']
['xmlStrPrintf_APIParam_2 is xmlStrPrintf_APIParam_4 result buffer length', 'param be param result buffer length']
['xmlStrPrintf_APIParam_3 is xmlStrPrintf_APIParam_4 message with printf formatting', 'param be param message printf formatting']
['xmlStrPrintf_APIParam_4 extra parameters xmlStrPrintf_APIParam_4 the message', 'param extra param message']
['xmlStrQEqual_APIParam_1 is the prefix of the QName', 'param be prefix']
['xmlStrPrintf_APIName returns xmlStrPrintf_APIParam_4 number of characters written to @buf or -1 if an error occurs', 'api return param number character write constant']
['xmlStrQEqual_APIParam_2 is the localname of the QName', 'param be']
['xmlStrQEqual_APIParam_3 is the second xmlChar *', 'param be second']
['xmlStrQEqual_APIName returns 1 if they are equal, 0 if they are different', 'api return constant']
['Formats @msg and places result into @buf', 'format place result']
['xmlStrVPrintf_APIParam_1 is the result buffer', 'param be result buffer']
['xmlStrVPrintf_APIParam_2 is the result buffer length', 'param be result buffer length']
['xmlStrVPrintf_APIParam_3 is the message with printf formatting', 'param be message printf formatting']
['xmlStrVPrintf_APIParam_4 is extra parameters for the message', 'param be extra param message']
['xmlStrcasecmp_APIParam_1 is the first xmlChar *', 'param be first']
['xmlStrVPrintf_APIName returns the number of characters written to @buf or -1 if an error occurs', 'api return number character write constant']
['xmlStrcasecmp_APIParam_2 is the second xmlChar *', 'param be second']
['xmlStrcasecmp_APIName returns the integer result of the comparison', 'api return integer result comparison']
['xmlStrcasestr_APIParam_1 is the xmlChar * array', 'param be array']
['xmlStrcasestr_APIName returns the xmlChar * for the first occurrence or NULL', 'api return first null']
['xmlStrcasestr_APIParam_2 is the xmlChar to search', 'param be search']
['xmlStrcat_APIParam_1 is the original xmlChar * array', 'param be original array']
['xmlStrcat_APIParam_2 is the xmlChar * array added', 'param be array']
['xmlStrcat_APIName returns a new xmlChar * containing the concatenated string', 'api return contain concatenate string']
['The original @cur is reallocated and should not be freed', 'original be reallocate should not be free']
['xmlStrchr_APIParam_1 is the xmlChar * array', 'param be array']
["we assume a termination mark of ' 0 '", 'assume mark constant']
['xmlStrcmp_APIParam_1 is the first xmlChar *', 'param be first']
['xmlStrchr_APIParam_2 is the xmlChar to search', 'param be search']
['xmlStrcmp_APIParam_2 is the second xmlChar *', 'param be second']
['xmlStrchr_APIName returns the xmlChar * for the first occurrence or NULL', 'api return first null']
['xmlStrcmp_APIName returns the integer result of the comparison', 'api return integer result comparison']
['xmlStrdup_APIParam_1 is the input xmlChar *', 'param be input']
['xmlStrdup_APIName returns a new xmlChar * or NULL', 'api return null']
['length of a xmlChar string', 'length string']
['xmlStrlen_APIParam_1 is the xmlChar * array', 'param be array']
["we assume a termination mark of ' 0 '", 'assume mark constant']
['xmlStrlen_APIName returns the number of xmlChar contained in the ARRAY', 'api return number contain array']
['xmlStrncasecmp_APIParam_1 is the first xmlChar *', 'param be first']
['xmlStrncasecmp_APIParam_2 is the second xmlChar *', 'param be second']
['xmlStrncasecmp_APIParam_3 is the max comparison length', 'param be max comparison length']
['xmlStrncasecmp_APIName returns the integer result of the comparison', 'api return integer result comparison']
['xmlStrncat_APIParam_1 is the original xmlChar * array', 'param be original array']
['Note that if @len < 0 this is an API error and NULL will be returned', 'if constant be api error null be return']
['a strncat for array of xmlChar , it will extend @cur with the xmlStrncat_APIParam_3 first bytes of @add', 'array , extend param first byte']
['xmlStrncat_APIParam_2 is the xmlChar * array added', 'param be array']
['xmlStrncat_APIParam_3 is the length of @add', 'param be length']
['same as xmlStrncat , but creates a new string', 'as api , but create string']
['xmlStrncat_APIName returns a new xmlChar *, the original @cur is reallocated and should not be freed', 'api return , original be reallocate should not be free']
['The original two strings are not freed', 'original two string be not free']
['xmlStrncatNew_APIParam_1 is first xmlChar string', 'param be first string']
['xmlStrncatNew_APIParam_2 is second xmlChar string', 'param be second string']
['xmlStrncatNew_APIParam_3 is the xmlStrncatNew_APIParam_3 of @str2 or < 0. xmlStrncatNew_APIName returns a new xmlChar * or NULL', 'param be param constant api return null']
['the length will be calculated automatically', 'length be calculate automatically']
['xmlStrncmp_APIParam_1 is the first xmlChar *', 'param be first']
['xmlStrncmp_APIParam_2 is the second xmlChar *', 'param be second']
['xmlStrncmp_APIParam_3 is the max comparison length', 'param be max comparison length']
['xmlStrncmp_APIName returns the integer result of the comparison', 'api return integer result comparison']
['xmlStrndup_APIParam_1 is the input xmlChar *', 'param be input']
['xmlStrndup_APIParam_2 is the xmlStrndup_APIParam_2 of @cur', 'param be param']
['xmlStrndup_APIName returns a new xmlChar * or NULL', 'api return null']
['xmlStrstr_APIParam_1 is the xmlChar * array', 'param be array']
['xmlStrstr_APIParam_2 is the xmlChar to search', 'param be search']
['xmlStrstr_APIName returns the xmlChar * for the first occurrence or NULL', 'api return first null']
['Extract a substring of a given string', 'extract give string']
['xmlStrsub_APIParam_1 is the xmlChar * array', 'param be array']
['xmlStrsub_APIParam_2 is the index of the first char', 'param be index first char']
['xmlStrsub_APIParam_3 is the length of the substring', 'param be length']
['xmlStrsub_APIName returns the xmlChar * for the first occurrence or NULL', 'api return first null']
['compares the two UCS4 values', 'compare two value']
['xmlUTF8Charcmp_APIParam_1 is pointer to first UTF8 char', 'param be pointer first utf8 char']
['xmlUTF8Charcmp_APIParam_2 is pointer to second UTF8 char', 'param be pointer second utf8 char']
['xmlUTF8Charcmp_APIName returns result of the compare as with xmlStrncmp', 'api return result compare as api']
['calculates the internal size of a UTF8 character', 'calculate internal size utf8 character']
['xmlUTF8Size_APIParam_1 is pointer to the UTF8 character', 'param be pointer utf8 character']
['xmlUTF8Size_APIName returns the numbers of bytes in the character, -1 on format error', 'api return number byte character , constant format error']
['xmlUTF8Strlen_APIParam_1 is a sequence of UTF-8 encoded bytes', 'param be sequence param encode byte']
['xmlUTF8Strlen_APIName returns the number of characters in the string or -1 in case of error', 'api return number character stre constant case error']
['compute the length of an UTF8 string , it does not do a full UTF8 checking of the content of the string', 'length utf8 string , do not full utf8 check content string']
['a function to provide the relative location of a UTF8 char', 'function provide relative location utf8 char']
['xmlUTF8Strloc_APIParam_1 is the input UTF8 *', 'param be input constant']
['xmlUTF8Strloc_APIParam_2 is the UTF8 character to be found', 'param be utf8 character be find']
['a strndup for array of UTF8', 'array constant']
['xmlUTF8Strloc_APIName returns the relative character position of the desired char or -1 if not found', 'api return relative character position desire char constant']
['xmlUTF8Strndup_APIParam_1 is the input UTF8 *', 'param be input constant']
['xmlUTF8Strndup_APIParam_2 is the xmlUTF8Strndup_APIParam_2 of @utf', 'param be param']
['xmlUTF8Strndup_APIName returns a new UTF8 * or NULL', 'api return utf8 null']
['a function to provide the equivalent of fetching a character from a string array', 'function provide equivalent fetch character string array']
['xmlUTF8Strpos_APIParam_1 is the input UTF8 *', 'param be input constant']
['xmlUTF8Strpos_APIParam_2 is the position of the desired UTF8 char', 'param be position desire utf8 char']
['xmlUTF8Strpos_APIName returns a pointer to the UTF8 character or NULL', 'api return pointer utf8 character null']
['xmlUTF8Strsize_APIParam_1 is a sequence of UTF-8 encoded bytes', 'param be sequence param encode byte']
['xmlUTF8Strsize_APIParam_2 is the number of characters in the array', 'param be number character array']
["xmlUTF8Strsize_APIName returns the storage size of the first willen' characters of ARRAY", 'api return storage size first willen character array']
['xmlUTF8Strsub_APIParam_1 is a sequence of UTF-8 encoded bytes', 'param be sequence param encode byte']
['Create a substring from a given UTF-8 string Note', 'create give param string note']
['positions are given in units of UTF-8 chars', 'position be give unit param char']
['xmlUTF8Strsub_APIParam_2 is relative pos of first char', 'param be relative first char']
['xmlUTF8Strsub_APIParam_3 is total number to copy', 'param be total number copy']
['storage size of an UTF8 string the behaviour is not guaranteed', 'storage size utf8 string behaviour be not guarantee']
['xmlUTF8Strsub_APIName returns a pointer to a newly created string or NULL if any problem', 'api return pointer newly create string null']
['An attribute definition has been parsed', 'attribute definition have be parse']
['attributeDeclSAXFunc_APIParam_1 is the user data', 'param be user datum']
['attributeDeclSAXFunc_APIParam_2 is the name of the element', 'param be name element']
['attributeDeclSAXFunc_APIParam_3 is the attribute name', 'param be attribute name']
['attributeDeclSAXFunc_APIParam_4 is the attribute attributeDeclSAXFunc_APIParam_4', 'param be attribute param']
['attributeDeclSAXFunc_APIParam_5 is the attributeDeclSAXFunc_APIParam_4 of default value', 'param be param default value']
['attributeDeclSAXFunc_APIParam_6 is the attribute default value', 'param be attribute default value']
['attributeDeclSAXFunc_APIParam_7 is the attributeDeclSAXFunc_APIParam_7 of enumerated value set', 'param be param enumerate value set']
['Handle an attribute that has been read by the parser', 'attribute have be read by parser']
['attributeSAXFunc_APIParam_1 is the user data', 'param be user datum']
['attributeSAXFunc_APIParam_2 is The attribute attributeSAXFunc_APIParam_2 , including namespace prefix', 'param be attribute param , include prefix']
['attributeSAXFunc_APIParam_3 is The attribute value', 'param be attribute value']
['The default handling is to convert the attribute into an DOM subtree and past it in a new xmlAttr element added to the element', 'default handling be convert attribute past element element']
['cdataBlockSAXFunc_APIParam_1 is the user data', 'param be user datum']
['cdataBlockSAXFunc_APIParam_2 is The pcdata content', 'param be content']
['cdataBlockSAXFunc_APIParam_3 is the block length', 'param be block length']
['Receiving some chars from the parser', 'receive char parser']
['charactersSAXFunc_APIParam_1 is the user data', 'param be user datum']
['charactersSAXFunc_APIParam_2 is a xmlChar string', 'param be string']
['charactersSAXFunc_APIParam_3 is the number of xmlChar', 'param be number']
['A comment has been parsed', 'comment have be parse']
['commentSAXFunc_APIParam_1 is the user data', 'param be user datum']
['commentSAXFunc_APIParam_2 is the comment content', 'param be comment content']
['An element definition has been parsed', 'element definition have be parse']
['elementDeclSAXFunc_APIParam_1 is the user data', 'param be user datum']
['elementDeclSAXFunc_APIParam_2 is the element elementDeclSAXFunc_APIParam_2', 'param be element param']
['elementDeclSAXFunc_APIParam_3 is the element elementDeclSAXFunc_APIParam_3', 'param be element param']
['elementDeclSAXFunc_APIParam_4 is the element value tree', 'param be element value']
['endDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context', 'param be user datum _ lrb _ parser context']
['It provides the namespace informations for the element', 'provide information element']
['endElementNsSAX2Func_APIParam_1 is the user data', 'param be user datum']
['endElementNsSAX2Func_APIParam_2 is the local name of the element', 'param be local name element']
['endElementSAXFunc_APIParam_1 is the user data', 'param be user datum']
['endElementSAXFunc_APIParam_2 is The element name', 'param be element name']
['endElementNsSAX2Func_APIParam_3 is the element namespace endElementNsSAX2Func_APIParam_3', 'param be element param']
['An entity definition has been parsed', 'definition have be parse']
['endElementNsSAX2Func_APIParam_4 is the element namespace name', 'param be element name']
['entityDeclSAXFunc_APIParam_2 is the entity entityDeclSAXFunc_APIParam_2', 'param be param']
['entityDeclSAXFunc_APIParam_1 is the user data', 'param be user datum']
['entityDeclSAXFunc_APIParam_3 is the entity entityDeclSAXFunc_APIParam_3', 'param be param']
['entityDeclSAXFunc_APIParam_4 is The public ID of the entity', 'param be -PRON- would']
['entityDeclSAXFunc_APIParam_5 is The system ID of the entity', 'param be system -PRON- would']
['entityDeclSAXFunc_APIParam_6 is the entity value -LRB- without processing', 'param be value _ lrb _ without processing']
['errorSAXFunc_APIParam_1 is an errorSAXFunc_APIParam_3 parser context', 'param be param parser context']
['Display errorSAXFunc_APIParam_3 format an error messages , callback', 'param format error message , callback']
['Callback on external subset declaration', 'callback external declaration']
['errorSAXFunc_APIParam_2 is errorSAXFunc_APIParam_3 message to display/transmit errorSAXFunc_APIParam_3 extra parameters errorSAXFunc_APIParam_3 the message display', 'param be param message param extra param message']
['externalSubsetSAXFunc_APIParam_1 is the user data', 'param be user datum']
['externalSubsetSAXFunc_APIParam_2 is the root element externalSubsetSAXFunc_APIParam_2', 'param be root element param']
['externalSubsetSAXFunc_APIParam_3 is the external ID', 'param be external -PRON- would']
['externalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g', 'param be system -PRON- would _ lrb _']
['Display fatalErrorSAXFunc_APIParam_3 format fatal error messages , callback', 'param format fatal error message , callback']
['fatalErrorSAXFunc_APIParam_1 is an fatalErrorSAXFunc_APIParam_3 parser context', 'param be param parser context']
['fatalErrorSAXFunc_APIParam_2 is fatalErrorSAXFunc_APIParam_3 message to display/transmit fatalErrorSAXFunc_APIParam_3 extra parameters fatalErrorSAXFunc_APIParam_3 the message display', 'param be param message param extra param message']
['so fatalErrorSAXFunc_APIParam_3 fatalError_APIName fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 not used , error_APIName fatalErrorSAXFunc_APIParam_3 all fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 errors', 'param api param callback param not use , api param callback param error']
['Get an entity by getEntitySAXFunc_APIParam_2', 'get by param']
['getEntitySAXFunc_APIParam_1 is the user data', 'param be user datum']
['getEntitySAXFunc_APIParam_2 is The entity getEntitySAXFunc_APIParam_2', 'param be param']
['getEntitySAXFunc_APIName returns the xmlEntityPtr if found', 'api return if find']
['Get a parameter entity by getParameterEntitySAXFunc_APIParam_2', 'get param by param']
['getParameterEntitySAXFunc_APIParam_1 is the user data', 'param be user datum']
['getParameterEntitySAXFunc_APIParam_2 is The entity getParameterEntitySAXFunc_APIParam_2', 'param be param']
['getParameterEntitySAXFunc_APIName returns the xmlEntityPtr if found', 'api return if find']
['Does this document has an external subset ?', 'do have external']
['hasExternalSubsetSAXFunc_APIParam_1 is the user data', 'param be user datum']
['hasExternalSubsetSAXFunc_APIName returns 1 if true', 'api return constant if constant']
['Does this document has an internal subset', 'do have internal']
['hasInternalSubsetSAXFunc_APIParam_1 is the user data', 'param be user datum']
['hasInternalSubsetSAXFunc_APIName returns 1 if true', 'api return constant if constant']
['Receiving some ignorable whitespaces from the parser', 'receive ignorable whitespace parser']
['by default the DOM building will use characters', 'by default use character']
['ignorableWhitespaceSAXFunc_APIParam_1 is the user data', 'param be user datum']
['ignorableWhitespaceSAXFunc_APIParam_2 is a xmlChar string', 'param be string']
['ignorableWhitespaceSAXFunc_APIParam_3 is the number of xmlChar', 'param be number']
['Callback on internal subset declaration', 'callback internal declaration']
['internalSubsetSAXFunc_APIParam_1 is the user data', 'param be user datum']
['internalSubsetSAXFunc_APIParam_2 is the root element internalSubsetSAXFunc_APIParam_2', 'param be root element param']
['internalSubsetSAXFunc_APIParam_3 is the external ID', 'param be external -PRON- would']
['internalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g', 'param be system -PRON- would _ lrb _']
['isStandaloneSAXFunc_APIParam_1 is the user data', 'param be user datum']
['isStandaloneSAXFunc_APIName returns 1 if true', 'api return constant if constant']
['notationDeclSAXFunc_APIParam_1 is the user data', 'param be user datum']
['notationDeclSAXFunc_APIParam_2 is The notationDeclSAXFunc_APIParam_2 of the notation', 'param be param']
['notationDeclSAXFunc_APIParam_3 is The public ID of the entity', 'param be -PRON- would']
['notationDeclSAXFunc_APIParam_4 is The system ID of the entity', 'param be system -PRON- would']
['A processing instruction has been parsed', 'processing instruction have be parse']
['processingInstructionSAXFunc_APIParam_1 is the user processingInstructionSAXFunc_APIParam_3', 'param be user param']
['processingInstructionSAXFunc_APIParam_2 is the processingInstructionSAXFunc_APIParam_2 name', 'param be param name']
['processingInstructionSAXFunc_APIParam_3 is the PI data', 'param be datum']
['referenceSAXFunc_APIParam_1 is the user data', 'param be user datum']
['referenceSAXFunc_APIParam_2 is The entity name', 'param be name']
['resolveEntitySAXFunc_APIParam_1 is the user data', 'param be user datum']
['resolveEntitySAXFunc_APIParam_2 is The public ID of the entity', 'param be -PRON- would']
['resolveEntitySAXFunc_APIParam_3 is The system ID of the entity', 'param be system -PRON- would']
['resolveEntitySAXFunc_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour', 'api return if inline null behaviour']
['Receive the document locator at startup , actually xmlDefaultSAXLocator', 'receive , actually']
['Everything is available on the context , so this is useless in our case', 'everything be available context , be useless case']
['setDocumentLocatorSAXFunc_APIParam_1 is the user data', 'param be user datum']
['setDocumentLocatorSAXFunc_APIParam_2 is A SAX Locator', 'param be']
['The entity loader , to control the loading of external entities , the application can either', 'control load external , application can either']
['startDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context', 'param be user datum _ lrb _ parser context']
['startElementNsSAX2Func_APIParam_1 is the user data', 'param be user datum']
['startElementNsSAX2Func_APIParam_2 is the local name of the element', 'param be local name element']
['- override this resolveEntity_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine', '_ override api callback block _ well use api function set be resolution api']
['It provides the namespace informations for the element , as well as the new namespace declarations on the element', 'provide information element , as well as declaration element']
['startElementNsSAX2Func_APIParam_5 is number of namespace definitions on that node', 'param be number definition']
['startElementNsSAX2Func_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions', 'param be pointer array pair definition']
['startElementNsSAX2Func_APIParam_3 is the element namespace startElementNsSAX2Func_APIParam_3', 'param be element param']
['startElementNsSAX2Func_APIParam_7 is the number of startElementNsSAX2Func_APIParam_9 on that node', 'param be number param']
['startElementNsSAX2Func_APIParam_8 is the number of defaulted startElementNsSAX2Func_APIParam_9', 'param be number default param']
['startElementNsSAX2Func_APIParam_4 is the element namespace name', 'param be element name']
['The defaulted ones are at the end of the array', 'defaulted one be end array']
['startElementNsSAX2Func_APIParam_9 is pointer to the array of attribute values', 'param be pointer array attribute value']
['startElementSAXFunc_APIParam_1 is the user data', 'param be user datum']
['startElementSAXFunc_APIParam_2 is The element startElementSAXFunc_APIParam_2 , including namespace prefix', 'param be element param , include prefix']
['startElementSAXFunc_APIParam_3 is An array of name/value attributes pairs , NULL terminated', 'param be array attribute pair , null terminate']
['unparsedEntityDeclSAXFunc_APIParam_1 is the user data', 'param be user datum']
['unparsedEntityDeclSAXFunc_APIParam_2 is The unparsedEntityDeclSAXFunc_APIParam_2 of the entity', 'param be param']
['unparsedEntityDeclSAXFunc_APIParam_3 is The public ID of the entity', 'param be -PRON- would']
['unparsedEntityDeclSAXFunc_APIParam_4 is The system ID of the entity', 'param be system -PRON- would']
['unparsedEntityDeclSAXFunc_APIParam_5 is the unparsedEntityDeclSAXFunc_APIParam_2 of the notation', 'param be param']
['Display warningSAXFunc_APIParam_3 format a warning messages , callback', 'param format warning message , callback']
['warningSAXFunc_APIParam_2 is warningSAXFunc_APIParam_3 message to display/transmit warningSAXFunc_APIParam_3 extra parameters warningSAXFunc_APIParam_3 the message display', 'param be param message param extra param message']
['warningSAXFunc_APIParam_1 is an warningSAXFunc_APIParam_3 parser context', 'param be param parser context']
['xmlByteConsumed_APIParam_1 is an XML parser context', 'param be parser context']
['xmlByteConsumed_APIName provides the current index of the parser relative to the start of the current entity', 'api provide current index parser relative start current']
['xmlCleanupParser_APIName name is somewhat misleading', 'api name be somewhat misleading']
['xmlByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed', 'api return index byte begin constant case index could not be']
['It does not clean up parser state , it cleans up memory allocated by the library itself', 'do not clean parser state , clean memory by library']
['It is a cleanup function for the XML library', 'be cleanup function library']
['It tries to reclaim all related global memory allocated for the library processing', 'reclaim relate global memory library processing']
['It does not deallocate any document related memory', 'do not deallocate related memory']
['xmlByteConsumed_APIName is computed in bytes from the beginning starting at zero and finishing at the size in byte of the file', 'api be byte begin start constant finish size byte file']
['The function is of constant cost', 'function be constant']
['-- Clear node info sequence', '_ _ clear info sequence']
['xmlClearNodeInfoSeq_APIParam_1 is a node info sequence pointer', 'param be info sequence pointer']
['In case of doubt abstain from calling xmlCleanupParser_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind', 'case call api before call api avoid leak report']
['One should call xmlCleanupParser_APIName only', 'one should call api only']
['Clear and reinitialize a parser context', 'clear parser context']
['may crash the application if another thread or a plugin is still using libxml2', 'may crash application']
['it is sometimes very hard to guess', 'be sometimes hard guess']
['some libraries or plugins may use it without notice', 'library may use without']
['xmlClearParserCtxt_APIParam_1 is an XML parser context', 'param be parser context']
['Creates a parser context for an XML in-memory document', 'create parser context param']
['xmlCreateDocParserCtxt_APIParam_1 is a pointer to an array of xmlChar', 'param be pointer array']
['xmlCreateDocParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['Create a parser context for using the XML parser with an existing I/O stream', 'create parser context use parser stream']
['xmlCreateIOParserCtxt_APIParam_1 is a SAX handler', 'param be handler']
['xmlCreateIOParserCtxt_APIParam_2 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlCreateIOParserCtxt_APIParam_3 is an I/O read function', 'param be read function']
['xmlCreateIOParserCtxt_APIParam_4 is an I/O close function', 'param be close function']
['xmlCreateIOParserCtxt_APIParam_5 is an I/O handler', 'param be handler']
['xmlCreateIOParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['Create a parser context for using the XML parser in push mode', 'create parser context use parser mode']
['xmlCreateIOParserCtxt_APIParam_6 is the charset encoding', 'param be encoding']
['xmlCreatePushParserCtxt_APIParam_1 is a SAX handler', 'param be handler']
['xmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks', 'param be user datum return callback']
['The remaining characters will be parsed so The remaining characters do not need to be fed in again through xmlParseChunk', 'remain character be parse remain character not need be feed api']
['the data is used to detect the encoding', 'datum be use detect encode']
['xmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars', 'param be pointer array char']
['xmlCreatePushParserCtxt_APIParam_4 is number of chars in the array', 'param be number char array']
['To allow content encoding detection , @size should be > = 4 The value of @filename is used for fetching external entities and error/warning reports', 'allow content encode detection , size should be constant value filename be use fetch external report']
['xmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI', 'param be optional file name uri']
['xmlCreatePushParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['parse an XML in-memory document and build a tree', 'parse param build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['xmlCtxtReadDoc_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['xmlCtxtReadDoc_APIParam_3 is the base xmlCtxtReadDoc_APIParam_3 to use for the document', 'param be base param use']
['parse an XML from a file descriptor and build a tree', 'parse file descriptor build']
['xmlCtxtReadDoc_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlCtxtReadFd_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtReadDoc_APIParam_4 is the document xmlCtxtReadDoc_APIParam_4 , or NULL', 'param be param , null']
['xmlCtxtReadDoc_APIName returns the resulting document tree', 'api return result']
['xmlCtxtReadFd_APIParam_2 is an open file descriptor', 'param be open file descriptor']
['xmlCtxtReadFd_APIParam_3 is the base xmlCtxtReadFd_APIParam_3 to use for the document', 'param be base param use']
['xmlCtxtReadFd_APIParam_4 is the document xmlCtxtReadFd_APIParam_4 , or NULL', 'param be param , null']
['xmlCtxtReadFd_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlCtxtReadFd_APIName returns the resulting document tree', 'api return result']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['the file descriptor will not be closed or reset', 'file descriptor not be close reset']
['This reuses the existing @ctxt parser context NOTE that', 'reuse parser context note']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['xmlCtxtReadFile_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtReadFile_APIParam_2 is a file or URL', 'param be file']
['xmlCtxtReadFile_APIParam_3 is the document xmlCtxtReadFile_APIParam_3 , or NULL', 'param be param , null']
['xmlCtxtReadFile_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlCtxtReadFile_APIName returns the resulting document tree', 'api return result']
['parse an XML document from I/O functions and source and build a tree', 'parse function source build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['xmlCtxtReadIO_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtReadIO_APIParam_2 is an I/O read function', 'param be read function']
['xmlCtxtReadIO_APIParam_3 is an I/O close function', 'param be close function']
['xmlCtxtReadIO_APIParam_4 is an I/O handler', 'param be handler']
['xmlCtxtReadIO_APIParam_5 is the base xmlCtxtReadIO_APIParam_5 to use for the document', 'param be base param use']
['xmlCtxtReadIO_APIParam_6 is the document xmlCtxtReadIO_APIParam_6 , or NULL', 'param be param , null']
['xmlCtxtReadIO_APIParam_7 is a combination of xmlParserOption', 'param be combination']
['xmlCtxtReadIO_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory document and build a tree', 'parse param build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['xmlCtxtReadMemory_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtReadMemory_APIParam_2 is a pointer to a char array', 'param be pointer char array']
['xmlCtxtReadMemory_APIParam_3 is the xmlCtxtReadMemory_APIParam_3 of the array', 'param be param array']
['xmlCtxtReadMemory_APIParam_4 is the base xmlCtxtReadMemory_APIParam_4 to use for the document', 'param be base param use']
['xmlCtxtReadMemory_APIParam_5 is the document xmlCtxtReadMemory_APIParam_5 , or NULL', 'param be param , null']
['xmlCtxtReadMemory_APIParam_6 is a combination of xmlParserOption', 'param be combination']
['xmlCtxtReadMemory_APIName returns the resulting document tree', 'api return result']
['Reset a parser context', 'reset parser context']
['xmlCtxtReset_APIParam_1 is an XML parser context', 'param be parser context']
['Reset a push parser context', 'reset parser context']
['xmlCtxtResetPush_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtResetPush_APIParam_2 is a pointer to an array of chars', 'param be pointer array char']
['xmlCtxtResetPush_APIParam_3 is number of chars in the array', 'param be number char array']
['xmlCtxtResetPush_APIParam_4 is an optional file name or URI', 'param be optional file name uri']
['xmlCtxtResetPush_APIParam_5 is the document xmlCtxtResetPush_APIParam_5 , or NULL', 'param be param , null']
['xmlCtxtResetPush_APIName returns 0 in case of success and 1 in case of error', 'api return constant case success constant case error']
['Applies the xmlCtxtUseOptions_APIParam_2 to the parser context', 'apply param parser context']
['xmlCtxtUseOptions_APIParam_1 is an XML parser context', 'param be parser context']
['xmlCtxtUseOptions_APIParam_2 is a combination of xmlParserOption', 'param be combination']
['External entity loaders types', 'external type']
['xmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented xmlCtxtUseOptions_APIParam_2 in case of error', 'api return constant case success , set unknown unimplemented param case error']
['xmlExternalEntityLoader_APIParam_1 is The System xmlExternalEntityLoader_APIParam_2 of the resource requested', 'param be system param resource request']
['xmlExternalEntityLoader_APIParam_2 is The Public xmlExternalEntityLoader_APIParam_2 of the resource requested', 'param be param resource request']
['xmlExternalEntityLoader_APIParam_3 is the XML parser xmlExternalEntityLoader_APIParam_3', 'param be parser param']
['xmlExternalEntityLoader_APIName returns the entity input parser', 'api return input parser']
['Free all the memory used by a parser context', 'free memory use by parser context']
['However the parsed document in ctxt - > myDoc is not freed', 'however parse _ be not free']
['xmlFreeParserCtxt_APIParam_1 is an XML parser context', 'param be parser context']
['xmlGetExternalEntityLoader_APIName returns the xmlExternalEntityLoader function pointer', 'api return api function pointer']
['Get the default external entity resolver function for the application', 'get default external function application']
['Read the current value of one feature of this parser instance', 'read current value one feature parser instance']
['xmlGetFeature_APIParam_1 is an XML/HTML parser context', 'param be parser context']
['xmlGetFeature_APIParam_2 is the feature xmlGetFeature_APIParam_2', 'param be feature param']
['xmlGetFeature_APIParam_3 is location to store the xmlGetFeature_APIParam_3', 'param be location store param']
['xmlGetFeature_APIName returns -1 in case or error, 0 otherwise', 'api return constant case error , constant otherwise']
['Copy at most * @len feature names into the @result array', 'copy feature name result array']
['xmlGetFeaturesList_APIParam_1 is the length of the features name array', 'param be length feature name array']
['xmlGetFeaturesList_APIParam_2 is an array of string to be filled with the features name', 'param be array string be fill feature name']
['xmlHasFeature_APIParam_1 is the xmlHasFeature_APIParam_1 to be examined', 'param be param be examine']
['xmlHasFeature_APIName returns a non-zero value if the xmlHasFeature_APIParam_1 exist, otherwise zero', 'api return param value']
['xmlHasFeature returns zero  if the xmlHasFeature_APIParam_1 does not exist or an unknown unknown xmlHasFeature_APIParam_1 is requested, non-zero otherwise', 'api return constant']
['Load and parse a DTD', 'load parse']
['xmlGetFeaturesList_APIName returns -1 in case or error, or the total number of features, xmlGetFeaturesList_APIParam_1 is updated with the number of strings copied, strings must not be deallocated', 'api return constant case error , total number feature , param be update number string copy , string must not be deallocate']
['xmlIOParseDTD_APIParam_1 is the SAX handler block or NULL', 'param be handler block null']
['xmlIOParseDTD_APIParam_2 is an Input Buffer', 'param be input buffer']
['xmlIOParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error', 'api return result null case error']
['@input will be freed by the function in any case', 'input be free by function case']
['-- Initialize node info sequence', '_ _ initialize info sequence']
['xmlInitNodeInfoSeq_APIParam_1 is a node info sequence pointer', 'param be info sequence pointer']
['xmlIOParseDTD_APIParam_3 is the charset encoding', 'param be encoding']
['Initialization function for the XML parser', 'initialization function parser']
['This is not reentrant', 'be not reentrant']
['Call once before processing in case of use in multithreaded programs', 'call before processing case use multithreaded program']
['Initialize a parser context', 'initialize parser context']
['xmlInitParserCtxt_APIParam_1 is an XML parser context', 'param be parser context']
['xmlInitParserCtxt_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Set and return the previous value for default blanks text nodes support', 'set return previous value default text support']
['The 1.x version of the parser used an heuristic to try to detect ignorable white spaces', 'constant version parser use detect ignorable white space']
['xmlKeepBlanksDefault_APIParam_1 is int 0 or 1. xmlKeepBlanksDefault_APIName returns the last value for 0 for no substitution, 1 for substitution', 'param be int constant api return last value constant no , constant']
["Upgrade of 1.X code should be done by using xmlIsBlankNode_APIName commodity function to detect the `` empty '' nodes generated", 'constant code should be do by use api function detect empty generate']
['Set and return the previous value for enabling line numbers in elements contents', 'set return previous value enable line number element content']
['This may break on old application and is turned off by default', 'may break old application be turn by default']
['This value also affect autogeneration of indentation', 'value affect']
['xmlLineNumbersDefault_APIParam_1 is int 0 or 1. xmlLineNumbersDefault_APIName returns the last value for 0 for no substitution, 1 for substitution', 'param be int constant api return last value constant no , constant']
['were not generated', 'be not generate']
['As a result the SAX callback was generating xmlSAX2IgnorableWhitespace_APIName callbacks instead of characters_APIName one , and', 'as result callback be generate api callback instead api one']
['xmlLoadExternalEntity_APIParam_1 is the xmlLoadExternalEntity_APIParam_1 for the entity to load', 'param be param load']
['Load an external entity , note that the use of xmlLoadExternalEntity_APIName for unparsed entities may generate problems', 'load external , use api unparsed may generate problem']
['xmlLoadExternalEntity_APIParam_2 is the Public xmlLoadExternalEntity_APIParam_2 for the entity to load', 'param be param load']
['xmlLoadExternalEntity_APIParam_3 is the context in which the entity is called or NULL', 'param be context which be call null']
['xmlLoadExternalEntity_APIName returns the xmlParserInputPtr or NULL', 'api return null']
['xmlNewIOInputStream_APIParam_1 is an XML parser context', 'param be parser context']
['xmlKeepBlanksDefault_APIName is provided as a way to force the standard behavior on 1.X libs and to switch back to the old mode for compatibility', 'api be provide as way force standard behavior constant back old mode compatibility']
['xmlNewIOInputStream_APIParam_2 is an I/O Input', 'param be input']
['Create a new xmlNewIOInputStream_APIParam_2 stream structure encapsulating the @input into a stream suitable for the parser', 'create param stream structure encapsulating input stream suitable parser']
['ignorableWhitespace_APIName are only generated and', 'api be only generate']
['The 2.x and later version will switch to the XML standard way and', 'constant later version standard way']
['xmlNewIOInputStream_APIName returns the new xmlNewIOInputStream_APIParam_2 stream or NULL', 'api return param stream null']
['Allocate and initialize a new parser context', 'initialize parser context']
['xmlNewParserCtxt_APIName returns the xmlParserCtxtPtr or NULL', 'api return null']
['xmlNewIOInputStream_APIParam_3 is the charset encoding', 'param be encoding']
['xmlParseBalancedChunkMemory_APIParam_1 is the document the chunk pertains to', 'param be']
['xmlParseBalancedChunkMemory_APIParam_2 is the SAX handler bloc', 'param be handler']
['xmlParseBalancedChunkMemory_APIParam_6 is the return value for the set of parsed nodes', 'param be return value set parse']
['xmlParseBalancedChunkMemory_APIParam_3 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlParseBalancedChunkMemory_APIParam_4 is Used for loop detection , use 0', 'param be use loop detection , use constant']
['xmlParseBalancedChunkMemoryRecover_APIParam_1 is the document the chunk pertains to', 'param be']
['xmlParseBalancedChunkMemoryRecover_APIParam_2 is the SAX handler bloc', 'param be handler']
['xmlParseBalancedChunkMemoryRecover_APIParam_3 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlParseBalancedChunkMemory_APIName returns 0 if the chunk is well balanced, -1 in case of args problem and the parser error code otherwise', 'api return constant']
['Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar', 'parse param call by parser allow sequence well balanced be one define by content']
['xmlParseBalancedChunkMemoryRecover_APIParam_6 is the return value for the set of parsed nodes', 'param be return value set parse']
['xmlParseBalancedChunkMemoryRecover_APIParam_4 is Used for loop detection , use 0', 'param be use loop detection , use constant']
['xmlParseBalancedChunkMemoryRecover_APIParam_7 is return nodes', 'param be return']
['Parse a Chunk of memory', 'parse memory']
['xmlParseChunk_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseChunk_APIParam_2 is an char array', 'param be char array']
['xmlParseChunk_APIParam_3 is the xmlParseChunk_APIParam_3 in byte of the xmlParseChunk_APIParam_2', 'param be param byte param']
['xmlParseChunk_APIParam_4 is last xmlParseChunk_APIParam_2 indicator', 'param be last param']
['xmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise', 'api return constant']
['Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar', 'parse param call by parser allow sequence well balanced be one define by content']
['xmlParseCtxtExternalEntity_APIParam_1 is the existing parsing context', 'param be parsing context']
['xmlParseCtxtExternalEntity_APIParam_2 is the xmlParseCtxtExternalEntity_APIParam_2 for the entity to load', 'param be param load']
['xmlParseCtxtExternalEntity_APIParam_3 is the System xmlParseCtxtExternalEntity_APIParam_3 for the entity to load', 'param be system param load']
['xmlParseCtxtExternalEntity_APIParam_4 is the return value for the set of parsed nodes', 'param be return value set parse']
['Load and parse an external subset', 'load parse external']
['An external general parsed entity is well-formed', 'external general parse be param']
['xmlParseCtxtExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise', 'api return constant']
['Parse an external general entity within an existing parsing context', 'parse external general within parsing context']
['xmlParseDTD_APIParam_1 is a NAME * containing the External ID of the DTD', 'param be name contain external -PRON- would']
['xmlParseDTD_APIParam_2 is a NAME * containing the URL to the DTD', 'param be name contain']
['xmlParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error', 'api return result null case error']
['parse an XML in-memory document and build a tree', 'parse param build']
['xmlParseDoc_APIParam_1 is a pointer to an array of xmlChar', 'param be pointer array']
['xmlParseDoc_APIName returns the resulting document tree', 'api return result']
['xmlParseDocument_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseDocument_APIName returns 0, -1 in case of error', 'api return , constant case error']
['xmlParseBalancedChunkMemoryRecover_APIName returns 0 if the chunk is well balanced , -1 in case of args problem and the parser error code otherwise In case xmlParseBalancedChunkMemoryRecover_APIParam_7 is set to 1 , the nodelist will not be empty  , assuming the parsing succeeded to some extent', 'api return constant']
['the parser context is augmented as a result of the parsing', 'parser context be augment as result parse']
['parse an XML external entity out of context and build a tree', 'parse external context build']
["content This correspond to a `` Well Balanced '' chunk", 'content correspond well balance']
['xmlParseEntity_APIParam_1 is the xmlParseEntity_APIParam_1', 'param be param']
['xmlParseEntity_APIName returns the resulting document tree', 'api return result']
['xmlParseExtParsedEnt_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParseExtParsedEnt_APIName returns 0, -1 in case of error', 'api return , constant case error']
['the parser context is augmented as a result of the parsing', 'parser context be augment as result parse']
['An external general parsed entity is well-formed', 'external general parse be param']
['parse a general parsed entity', 'parse general parse']
['xmlParseExternalEntity_APIParam_1 is the document the chunk pertains to', 'param be']
['xmlParseExternalEntity_APIParam_2 is the SAX handler bloc', 'param be handler']
['xmlParseExternalEntity_APIParam_3 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlParseExternalEntity_APIParam_4 is Used for loop detection , use 0', 'param be use loop detection , use constant']
['An external general parsed entity is well-formed', 'external general parse be param']
['Parse an external general entity', 'parse external general']
['xmlParseExternalEntity_APIParam_7 is the return value for the set of parsed nodes', 'param be return value set parse']
['xmlParseExternalEntity_APIParam_6 is the System xmlParseExternalEntity_APIParam_6 for the entity to load', 'param be system param load']
['parse an XML file and build a tree', 'parse file build']
['document is provided by default', 'be provide by default']
['xmlParseExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise', 'api return constant']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['xmlParseFile_APIParam_1 is the xmlParseFile_APIParam_1', 'param be param']
['xmlParseFile_APIName returns the resulting document tree if the file was wellformed, NULL otherwise', 'api return result']
['xmlParseInNodeContext_APIParam_1 is the context xmlParseInNodeContext_APIParam_1', 'param be context param']
['Parse a well-balanced chunk of an XML document within the context of the given xmlParseInNodeContext_APIParam_1', 'parse param within context give param']
['xmlParseInNodeContext_APIParam_2 is the input string', 'param be input string']
['xmlParseInNodeContext_APIParam_3 is the input string length in bytes', 'param be input string length byte']
['xmlParseInNodeContext_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlParseInNodeContext_APIParam_5 is the return value for the set of parsed nodes', 'param be return value set parse']
['The allowed sequence for the xmlParseInNodeContext_APIParam_2 is a Well Balanced Chunk defined by the content production in the XML grammar', 'allow sequence param be well balanced define by content']
['xmlParseInNodeContext_APIName returns XML_ERR_OK if the chunk is well balanced, and the parser error code otherwise', 'api return constant']
['parse an XML in-memory block and build a tree', 'parse param block build']
['xmlParseMemory_APIParam_1 is an pointer to a char array', 'param be pointer char array']
['xmlParseMemory_APIParam_2 is the xmlParseMemory_APIParam_2 of the array', 'param be param array']
['xmlParseMemory_APIName returns the resulting document tree', 'api return result']
['Insert node xmlParserAddNodeInfo_APIParam_2 record into the sorted sequence', 'insert param record sorted sequence']
['xmlParserAddNodeInfo_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParserAddNodeInfo_APIParam_2 is a node xmlParserAddNodeInfo_APIParam_2 sequence pointer', 'param be param sequence pointer']
['Find the parser xmlParserFindNodeInfo_APIParam_2 info struct for a given xmlParserFindNodeInfo_APIParam_2', 'find parser param info struct give param']
['xmlParserFindNodeInfo_APIParam_1 is an XML parser context', 'param be parser context']
['xmlParserFindNodeInfo_APIParam_2 is an XML xmlParserFindNodeInfo_APIParam_2 within the tree', 'param be param within']
['xmlParserFindNodeInfo_APIName returns an xmlParserNodeInfo block pointer or NULL', 'api return block pointer null']
['xmlParserFindNodeInfoIndex_APIParam_1 is a xmlParserFindNodeInfoIndex_APIParam_2 info sequence pointer', 'param be param info sequence pointer']
['xmlParserFindNodeInfoIndex_APIParam_2 is an XML xmlParserFindNodeInfoIndex_APIParam_2 pointer', 'param be param pointer']
['xmlParserFindNodeInfoIndex_APIName returns a long indicating the position of the record', 'api return long indicate position record']
['Find the index that the info record for the given xmlParserFindNodeInfoIndex_APIParam_2 is or should be at in a sorted sequence', 'find index info record give param be should be sort sequence']
['Callback for freeing some parser input allocations', 'callback free parser input allocation']
['xmlParserInputDeallocate_APIParam_1 is the string to deallocate', 'param be stre deallocate']
['xmlParserInputGrow_APIName increase the input for the parser', 'api increase input parser']
['xmlParserInputGrow_APIName tries to preserve pointers to the input buffer , and keep already read data', 'api preserve pointer input buffer , keep already read datum']
['xmlParserInputGrow_APIParam_1 is an XML parser input', 'param be parser input']
['xmlParserInputGrow_APIParam_2 is an indicative size for the lookahead', 'param be indicative size']
['xmlParserInputRead_APIName was internal and is deprecated', 'api be internal be deprecate']
['xmlParserInputGrow_APIName returns the amount of char read, or -1 xmlParserInputGrow_APIParam_1 case of error, 0 indicate the end of this entity', 'api return amount char read , constant param case error , constant indicate end']
['xmlParserInputRead_APIParam_1 is an XML parser input', 'param be parser input']
['xmlParserInputRead_APIParam_2 is an indicative size for the lookahead', 'param be indicative size']
['xmlParserInputRead_APIName returns -1 as this is an error to use it', 'api return constant as be error use']
['Set and return the previous value for enabling pedantic warnings', 'set return previous value enable pedantic warning']
['parse an XML in-memory document and build a tree', 'parse param build']
['xmlPedanticParserDefault_APIParam_1 is int 0 or 1. xmlPedanticParserDefault_APIName returns the last value for 0 for no substitution, 1 for substitution', 'param be int constant api return last value constant no , constant']
['xmlReadDoc_APIParam_1 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['xmlReadDoc_APIParam_2 is the base xmlReadDoc_APIParam_2 to use for the document', 'param be base param use']
['xmlReadDoc_APIParam_3 is the document xmlReadDoc_APIParam_3 , or NULL', 'param be param , null']
['xmlReadDoc_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlReadDoc_APIName returns the resulting document tree', 'api return result']
['xmlReadFd_APIParam_1 is an open file descriptor', 'param be open file descriptor']
['parse an XML from a file descriptor and build a tree', 'parse file descriptor build']
['xmlReadFd_APIParam_2 is the base xmlReadFd_APIParam_2 to use for the document', 'param be base param use']
['xmlReadFd_APIParam_3 is the document xmlReadFd_APIParam_3 , or NULL', 'param be param , null']
['xmlReadFd_APIParam_4 is a combination of xmlParserOption', 'param be combination']
['xmlReadFd_APIName returns the resulting document tree', 'api return result']
['the file descriptor will not be closed', 'file descriptor not be close']
['NOTE that or reset', 'note reset']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['xmlReadFile_APIParam_1 is a file or URL', 'param be file']
['xmlReadFile_APIParam_2 is the document xmlReadFile_APIParam_2 , or NULL', 'param be param , null']
['xmlReadFile_APIParam_3 is a combination of xmlParserOption', 'param be combination']
['xmlReadFile_APIName returns the resulting document tree', 'api return result']
['parse an XML document from I/O functions and source and build a tree', 'parse function source build']
['xmlReadIO_APIParam_1 is an I/O read function', 'param be read function']
['xmlReadIO_APIParam_2 is an I/O close function', 'param be close function']
['xmlReadIO_APIParam_3 is an I/O handler', 'param be handler']
['xmlReadIO_APIParam_4 is the base xmlReadIO_APIParam_4 to use for the document', 'param be base param use']
['xmlReadIO_APIParam_5 is the document xmlReadIO_APIParam_5 , or NULL', 'param be param , null']
['xmlReadIO_APIParam_6 is a combination of xmlParserOption', 'param be combination']
['xmlReadIO_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory document and build a tree', 'parse param build']
['xmlReadMemory_APIParam_1 is a pointer to a char array', 'param be pointer char array']
['xmlReadMemory_APIParam_2 is the xmlReadMemory_APIParam_2 of the array', 'param be param array']
['xmlReadMemory_APIParam_3 is the base xmlReadMemory_APIParam_3 to use for the document', 'param be base param use']
['xmlReadMemory_APIParam_4 is the document xmlReadMemory_APIParam_4 , or NULL', 'param be param , null']
['xmlReadMemory_APIParam_5 is a combination of xmlParserOption', 'param be combination']
['xmlReadMemory_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory document and build a tree', 'parse param build']
['xmlRecoverDoc_APIParam_1 is a pointer to an array of xmlChar', 'param be pointer array']
['xmlRecoverDoc_APIName returns the resulting document tree or NULL in case of failure', 'api return result null case failure']
['In the case the document is not Well Formed , a attempt to build a tree is tried anyway', 'case be not well form , attempt build be anyway']
['parse an XML file and build a tree', 'parse file build']
['xmlRecoverFile_APIParam_1 is the xmlRecoverFile_APIParam_1', 'param be param']
['xmlRecoverFile_APIName returns the resulting document tree or NULL in case of failure', 'api return result null case failure']
['In the case the document is not Well Formed , it attempts to build a tree anyway', 'case be not well form , attempt build anyway']
['parse an XML in-memory block and build a tree', 'parse param block build']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['xmlRecoverMemory_APIParam_1 is an pointer to a char array', 'param be pointer char array']
['xmlRecoverMemory_APIParam_2 is the xmlRecoverMemory_APIParam_2 of the array', 'param be param array']
['xmlRecoverMemory_APIName returns the resulting document tree or NULL in case of error', 'api return result null case error']
['In the case the document is not Well Formed , an attempt to build a tree is tried anyway', 'case be not well form , attempt build be anyway']
['Load and parse an external subset', 'load parse external']
['xmlSAXParseDTD_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseDTD_APIParam_2 is a NAME * containing the External ID of the DTD', 'param be name contain external -PRON- would']
['xmlSAXParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error', 'api return result null case error']
['xmlSAXParseDTD_APIParam_3 is a NAME * containing the URL to the DTD', 'param be name contain']
['parse an XML in-memory document and build a tree', 'parse param build']
['an XML in-memory document use the given SAX function block to handle the parsing callback', 'param use give function block parse callback']
['xmlSAXParseDoc_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseDoc_APIParam_2 is a pointer to an array of xmlChar', 'param be pointer array']
['xmlSAXParseDoc_APIParam_3 is work in xmlSAXParseDoc_APIParam_3 mode , i.e', 'param be work param mode']
['tries to read no Well Formed documents', 'read no well form']
['xmlSAXParseDoc_APIName returns the resulting document tree', 'api return result']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['parse an XML external entity out of context and build a tree', 'parse external context build']
['It use the given SAX function block to handle the parsing callback', 'use give function block parse callback']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
["content This correspond to a `` Well Balanced '' chunk", 'content correspond well balance']
['xmlSAXParseEntity_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseEntity_APIParam_2 is the xmlSAXParseEntity_APIParam_2', 'param be param']
['xmlSAXParseEntity_APIName returns the resulting document tree', 'api return result']
['parse an XML file and build a tree', 'parse file build']
['It use the given SAX function block to handle the parsing callback', 'use give function block parse callback']
['xmlSAXParseFile_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseFile_APIParam_2 is the xmlSAXParseFile_APIParam_2', 'param be param']
['xmlSAXParseFile_APIParam_3 is work in xmlSAXParseFile_APIParam_3 mode , i.e', 'param be work param mode']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['tries to read no Well Formed documents', 'read no well form']
['xmlSAXParseFile_APIName returns the resulting document tree', 'api return result']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['parse an XML file and build a tree', 'parse file build']
['It use the given SAX function block to handle the parsing callback', 'use give function block parse callback']
['xmlSAXParseFileWithData_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseFileWithData_APIParam_2 is the xmlSAXParseFileWithData_APIParam_2', 'param be param']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['xmlSAXParseFileWithData_APIParam_3 is work in xmlSAXParseFileWithData_APIParam_3 mode , i.e', 'param be work param mode']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['tries to read no Well Formed documents', 'read no well form']
['xmlSAXParseFileWithData_APIParam_4 is the userdata', 'param be']
['User xmlSAXParseFileWithData_APIParam_4 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml', 'user param be store within parser context context _ private member , be available nearly everywhere']
['xmlSAXParseFileWithData_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory block and use the given SAX function block to handle the parsing callback', 'parse param block use give function block parse callback']
['xmlSAXParseMemory_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseMemory_APIParam_2 is an pointer to a char array', 'param be pointer char array']
['xmlSAXParseMemory_APIParam_3 is the xmlSAXParseMemory_APIParam_3 of the array', 'param be param array']
['xmlSAXParseMemory_APIParam_4 is work in xmlSAXParseMemory_APIParam_4 mode , i.e', 'param be work param mode']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['tries to read not Well Formed documents', 'read not well form']
['xmlSAXParseMemory_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory block and use the given SAX function block to handle the parsing callback', 'parse param block use give function block parse callback']
['xmlSAXParseMemoryWithData_APIParam_1 is the SAX handler block', 'param be handler block']
['xmlSAXParseMemoryWithData_APIParam_2 is an pointer to a char array', 'param be pointer char array']
['xmlSAXParseMemoryWithData_APIParam_3 is the xmlSAXParseMemoryWithData_APIParam_3 of the array', 'param be param array']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['xmlSAXParseMemoryWithData_APIParam_4 is work in xmlSAXParseMemoryWithData_APIParam_4 mode , i.e', 'param be work param mode']
['tries to read no Well Formed documents', 'read no well form']
['xmlSAXParseMemoryWithData_APIParam_5 is the userdata', 'param be']
['User xmlSAXParseMemoryWithData_APIParam_5 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml', 'user param be store within parser context context _ private member , be available nearly everywhere']
['xmlSAXParseMemoryWithData_APIName returns the resulting document tree', 'api return result']
['parse an XML file and call the given SAX handler routines', 'parse file call give handler api']
['Automatic support for ZLIB/Compress compressed document is provided', 'automatic support compress be provide']
['xmlSAXUserParseFile_APIParam_1 is a SAX handler', 'param be handler']
['xmlSAXUserParseFile_APIParam_2 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlSAXUserParseFile_APIParam_3 is a file name', 'param be file name']
['xmlSAXUserParseFile_APIName returns 0 in case of success or a error number otherwise', 'api return constant case success error number otherwise']
['A better SAX parsing routine', 'well parse api']
['parse an XML in-memory xmlSAXUserParseMemory_APIParam_3 and call the given SAX handler routines', 'parse param call give handler api']
['xmlSAXUserParseMemory_APIParam_1 is a SAX handler', 'param be handler']
['xmlSAXUserParseMemory_APIParam_2 is The user data returned on SAX callbacks', 'param be user datum return callback']
['xmlSAXUserParseMemory_APIParam_3 is an in-memory XML document input', 'param be param input']
['xmlSAXUserParseMemory_APIParam_4 is the length of the XML document in bytes', 'param be length byte']
['xmlSAXUserParseMemory_APIName returns 0 in case of success or a error number otherwise', 'api return constant case success error number otherwise']
['Changes the defaultexternal entity resolver function for the application', 'change defaultexternal function application']
['xmlSetExternalEntityLoader_APIParam_1 is the new entity resolver function', 'param be function']
['xmlSetFeature_APIParam_1 is an XML/HTML parser context', 'param be parser context']
['Change the current xmlSetFeature_APIParam_3 of one feature of this parser instance', 'change current param one feature parser instance']
['xmlSetFeature_APIParam_2 is the feature xmlSetFeature_APIParam_2', 'param be feature param']
['xmlSetFeature_APIParam_3 is pointer to the location of the new xmlSetFeature_APIParam_3', 'param be pointer location param']
['xmlSetFeature_APIName returns -1 in case or error, 0 otherwise', 'api return constant case error , constant otherwise']
['The xmlSetupParserForBuffer_APIParam_2 parameter must not be NULL , but the xmlSetupParserForBuffer_APIParam_3 parameter can be', 'param must not be null , but param can be']
['Setup the parser context to parse a new xmlSetupParserForBuffer_APIParam_2', 'parser context parse param']
['Clears any prior contents from the parser context', 'clear prior content parser context']
['xmlSetupParserForBuffer_APIParam_1 is an XML parser context', 'param be parser context']
['xmlSetupParserForBuffer_APIParam_2 is a xmlChar * xmlSetupParserForBuffer_APIParam_2', 'param be param']
['xmlSetupParserForBuffer_APIParam_3 is a file name', 'param be file name']
['Blocks further parser processing', 'block parser processing']
['xmlStopParser_APIParam_1 is an XML parser context', 'param be parser context']
['Set and return the previous value for default entity support', 'set return previous value default support']
['Initially the parser always keep entity references instead of substituting entity values in the output', 'initially parser always keep reference instead substitute value output']
['Free an XInclude context', 'free context']
['xmlSubstituteEntitiesDefault_APIParam_1 is int 0 or 1. xmlSubstituteEntitiesDefault_APIName returns the last value for 0 for no substitution, 1 for substitution', 'param be int constant api return last value constant no , constant']
['xmlXIncludeFreeContext_APIParam_1 is the XInclude context', 'param be context']
['Creates a new XInclude context', 'create context']
['xmlXIncludeNewContext_APIParam_1 is an XML Document', 'param be']
['This function has to be used to change the default parser behavior SAX::substituteEntities_APIName has to be used for changing that on a file by file basis', 'function have be use change default parser behavior api have be use change file by file basis']
['xmlXIncludeNewContext_APIName returns the new set', 'api return set']
['xmlXIncludeProcess_APIParam_1 is an XML document', 'param be']
['xmlXIncludeProcess_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessFlags_APIParam_1 is an XML document', 'param be']
['xmlXIncludeProcessFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes', 'param be set use parse include']
['xmlXIncludeProcessFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessFlagsData_APIParam_1 is an XML document', 'param be']
['xmlXIncludeProcessFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes', 'param be set use parse include']
['xmlXIncludeProcessFlagsData_APIParam_3 is application xmlXIncludeProcessFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context', 'param be application param be pass parser context _ private field parser context']
['xmlXIncludeProcessNode_APIParam_1 is an existing XInclude context', 'param be context']
['xmlXIncludeProcessFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessNode_APIParam_2 is a xmlXIncludeProcessNode_APIParam_2 in an XML document', 'param be param']
['Implement the XInclude substitution for the given subtree reusing the informations and data coming from the given context', 'implement give reuse information datum come give context']
['Implement the XInclude substitution for the given subtree', 'implement give']
['xmlXIncludeProcessNode_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessTree_APIParam_1 is a node in an XML document', 'param be']
['Implement the XInclude substitution for the given subtree', 'implement give']
['xmlXIncludeProcessTree_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessTreeFlags_APIParam_1 is a node in an XML document', 'param be']
['xmlXIncludeProcessTreeFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes', 'param be set use parse include']
['xmlXIncludeProcessTreeFlagsData_APIParam_1 is an XML node', 'param be']
['xmlXIncludeProcessTreeFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes', 'param be set use parse include']
['xmlXIncludeProcessTreeFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['Set the xmlXIncludeSetFlags_APIParam_2 used for further processing of XML resources', 'set param use processing resource']
['xmlXIncludeProcessTreeFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done', 'api return constant']
['xmlXIncludeProcessTreeFlagsData_APIParam_3 is application xmlXIncludeProcessTreeFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context', 'param be application param be pass parser context _ private field parser context']
['xmlXIncludeSetFlags_APIParam_1 is an XInclude processing context', 'param be processing context']
['xmlXIncludeSetFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes', 'param be set use parse include']
['xmlXIncludeSetFlags_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['xmlAddChild_APIParam_1 is the xmlAddChild_APIParam_1 node', 'param be param']
['xmlAddChild_APIParam_2 is the child node', 'param be']
['xmlAddChild_APIName returns the child or NULL in case of error', 'api return null case error']
['xmlAddChildList_APIParam_1 is the xmlAddChildList_APIParam_1 node', 'param be param']
['it is first destroyed', 'be first destroy']
['xmlAddChildList_APIParam_2 is the first node in the list', 'param be first list']
['xmlAddChildList_APIName returns the last child or NULL in case of error', 'api return last null case error']
['Add a list of node at the end of the child list of the xmlAddChildList_APIParam_1 merging adjacent TEXT nodes', 'list end list param merge adjacent text']
['As a result of text merging @elem may be freed', 'as result text merge may be free']
['xmlAddNextSibling_APIParam_1 is the child node', 'param be']
['xmlAddNextSibling_APIParam_2 is the new node', 'param be']
['it is added into properties instead of children', 'be property instead']
['Add a new node to @parent , at the end of the child list merging adjacent TEXT nodes', 'end list merge adjacent text']
['xmlAddNextSibling_APIName returns the new node or NULL in case of error', 'api return null case error']
['it is added into properties instead of children', 'be property instead']
['it is first destroyed', 'be first destroy']
['xmlAddPrevSibling_APIParam_1 is the child node', 'param be']
['xmlAddPrevSibling_APIParam_2 is the new node', 'param be']
['xmlAddPrevSibling_APIName returns the new node or NULL in case of error', 'api return null case error']
['it is added into properties instead of children', 'be property instead']
['it is first destroyed', 'be first destroy']
['xmlAddSibling_APIParam_1 is the child node', 'param be']
['xmlAddSibling_APIParam_2 is the new node', 'param be']
['it is first unlinked from its existing context', 'be first unlinked context']
['xmlAddSibling_APIName returns the new element or NULL in case of error', 'api return element null case error']
['Serialize text attribute values to an xml simple buffer', 'serialize text attribute value simple buffer']
['xmlAttrSerializeTxtContent_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlAttrSerializeTxtContent_APIParam_2 is the document', 'param be']
['xmlAttrSerializeTxtContent_APIParam_3 is the attribute node', 'param be attribute']
['xmlAttrSerializeTxtContent_APIParam_4 is the text content', 'param be text content']
['Function to extract the content of a buffer', 'function extract content buffer']
['it is first unlinked from its existing context', 'be first unlinked context']
['Add a new node @elem as the previous sibling of @cur merging adjacent TEXT nodes', 'as previous merge adjacent text']
['xmlBufContent_APIParam_1 is the buffer', 'param be buffer']
['xmlBufContent_APIName returns the internal content', 'api return internal content']
['Function to extract the end of the content of a buffer', 'function extract end content buffer']
['xmlBufEnd_APIParam_1 is the buffer', 'param be buffer']
['xmlBufEnd_APIName returns the end of the internal content or NULL in case of error', 'api return end internal content null case error']
['Entity references are substituted', 'reference be substitute']
['Fills up the buffer @buf with this value', 'fill buffer value']
['xmlBufGetNodeContent_APIParam_1 is a buffer xmlBufPtr', 'param be buffer']
['it is first unlinked from its existing context', 'be first unlinked context']
['Add a new element @elem to the list of siblings of @cur merging adjacent TEXT nodes', 'element list merge adjacent text']
['xmlBufGetNodeContent_APIParam_2 is the node being read', 'param be read']
['xmlBufGetNodeContent_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Dump an XML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['xmlBufNodeDump_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlBufNodeDump_APIParam_2 is the document', 'param be']
['xmlBufNodeDump_APIParam_3 is the current node', 'param be current']
['xmlBufNodeDump_APIParam_4 is the imbrication xmlBufNodeDump_APIParam_4 for indenting', 'param be param indent']
['xmlBufNodeDump_APIParam_5 is is formatting allowed', 'param be be format allow']
['that @format = 1 provide node indenting', 'format constant provide indent']
['Remove the beginning of an XML buffer', 'remove begin buffer']
['xmlBufNodeDump_APIName returns the number of bytes written to the buffer, in case of error 0be returned by xmlBufNodeDump_APIName or @buf stores the error', 'api return number byte write buffer , case error 0be return by api store error']
['xmlBufShrink_APIParam_1 is the buffer to dump', 'param be buffer']
['xmlBufShrink_APIParam_2 is the number of xmlChar to remove', 'param be number remove']
['xmlBufShrink_APIName returns the number of byte removed or 0 in case of failure', 'api return number byte remove constant case failure']
['carried directly by this node', 'carry directly by']
['NOTE that this routine behaviour differs from xmlBufferShrink_APIName as it will return 0 on error instead of -1 due to size_t being used as the return type', 'note api behaviour differ api as return constant error instead constant due param use as return type']
['Read the value of a node @cur , this can be either the text', 'read value , can be either text']
['Function to get the length of a buffer', 'function get length buffer']
['xmlBufUse_APIParam_1 is the buffer', 'param be buffer']
['xmlBufUse_APIName returns the length of data in the internal content', 'api return length datum internal content']
['Add a string range to an XML buffer', 'string range buffer']
['xmlBufferAdd_APIParam_1 is the buffer to dump', 'param be buffer']
['xmlBufferAdd_APIParam_2 is the #xmlChar string', 'param be string']
['xmlBufferAdd_APIParam_3 is the number of #xmlChar to add', 'param be number']
['the length of xmlBufferAdd_APIParam_2 is recomputed', 'length param be recompute']
['xmlBufferAdd_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant successful , positive error code number otherwise constant case internal api error']
['Add a string range to the beginning of an XML buffer', 'string range begin buffer']
['xmlBufferAddHead_APIParam_1 is the buffer', 'param be buffer']
['xmlBufferAddHead_APIParam_2 is the #xmlChar string', 'param be string']
['xmlBufferAddHead_APIParam_3 is the number of #xmlChar to add', 'param be number']
['Append a zero terminated C string to an XML buffer', 'append constant terminate string buffer']
['the length of @str is recomputed', 'length be recompute']
['xmlBufferCCat_APIParam_1 is the buffer to dump', 'param be buffer']
['xmlBufferAddHead_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant successful , positive error code number otherwise constant case internal api error']
['xmlBufferCCat_APIParam_2 is the C char string', 'param be char string']
['Append a zero terminated string to an XML buffer', 'append constant terminate string buffer']
['xmlBufferCat_APIParam_1 is the buffer to add to', 'param be buffer']
['xmlBufferCCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant successful , positive error code number otherwise constant case internal api error']
['xmlBufferCat_APIParam_2 is the #xmlChar string', 'param be string']
['Function to extract the content of a buffer', 'function extract content buffer']
['xmlBufferContent_APIParam_1 is the buffer', 'param be buffer']
['xmlBufferContent_APIName returns the internal content', 'api return internal content']
['xmlBufferCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant successful , positive error code number otherwise constant case internal api error']
['xmlBufferCreate_APIName returns the new structure', 'api return structure']
['routine to create an XML buffer', 'api create buffer']
['xmlBufferCreateSize_APIName returns the new structure', 'api return structure']
['routine to create an XML buffer', 'api create buffer']
['xmlBufferCreateSize_APIParam_1 is initial xmlBufferCreateSize_APIParam_1 of buffer', 'param be initial param buffer']
['xmlBufferCreateStatic_APIParam_1 is the memory area', 'param be memory']
['routine to create an XML buffer from an immutable memory area', 'api create buffer immutable memory']
['xmlBufferCreateStatic_APIParam_2 is the xmlBufferCreateStatic_APIParam_2 in byte', 'param be param byte']
['xmlBufferCreateStatic_APIName returns the new structure', 'api return structure']
['The area will not be modified nor copied , and is expected to be present until the end of the buffer lifetime', 'not be modify nor copy , be expect be present until end buffer lifetime']
['Remove the string contained in a buffer and gie it back to the caller', 'remove string contain buffer back caller']
['The buffer is reset to an empty content', 'buffer be reset empty content']
['xmlBufferDetach_APIParam_1 is the buffer', 'param be buffer']
['This does not work with immutable buffers as they can not be reset', 'do not work immutable buffer as can not be reset']
['xmlBufferDetach_APIName returns the previous string contained by the buffer', 'api return previous string contain by buffer']
['Dumps an XML buffer to a FILE *', 'buffer file']
['xmlBufferDump_APIParam_1 is the xmlBufferDump_APIParam_1 output', 'param be param output']
['xmlBufferDump_APIParam_2 is the buffer to dump', 'param be buffer']
['xmlBufferDump_APIName returns the number of #xmlChar written', 'api return number write']
['empty a buffer', 'empty buffer']
['xmlBufferEmpty_APIParam_1 is the buffer', 'param be buffer']
['Frees an XML buffer', 'free buffer']
['It frees both the content and the structure which encapsulate it', 'free content structure which encapsulate']
['xmlBufferFree_APIParam_1 is the buffer to free', 'param be buffer free']
['Grow the available space of an XML buffer', 'grow available space buffer']
['xmlBufferGrow_APIParam_1 is the buffer', 'param be buffer']
['xmlBufferGrow_APIParam_2 is the minimum free size to allocate', 'param be minimum free size']
['xmlBufferGrow_APIName returns the new available space or -1 in case of error', 'api return available space constant case error']
['Function to get the length of a buffer', 'function get length buffer']
['xmlBufferLength_APIParam_1 is the buffer', 'param be buffer']
['xmlBufferLength_APIName returns the length of data in the internal content', 'api return length datum internal content']
['Resize a buffer to accommodate minimum xmlBufferResize_APIParam_2 of @size', 'resize buffer accommodate minimum param size']
['xmlBufferResize_APIParam_1 is the buffer to resize', 'param be buffer resize']
['xmlBufferResize_APIParam_2 is the desired xmlBufferResize_APIParam_2', 'param be desire param']
['xmlBufferResize_APIName returns 0 in case of problems, 1 otherwise', 'api return constant case problem , constant otherwise']
['Sets the allocation xmlBufferSetAllocationScheme_APIParam_2 for this buffer', 'set allocation param buffer']
['xmlBufferSetAllocationScheme_APIParam_1 is the buffer to tune', 'param be buffer tune']
['xmlBufferSetAllocationScheme_APIParam_2 is allocation xmlBufferSetAllocationScheme_APIParam_2 to use', 'param be allocation param use']
['Remove the beginning of an XML buffer', 'remove begin buffer']
['xmlBufferShrink_APIParam_1 is the buffer to dump', 'param be buffer']
['xmlBufferShrink_APIName returns the number of #xmlChar removed, or -1 in case of failure', 'api return number remove , constant case failure']
['xmlBufferShrink_APIParam_2 is the number of xmlChar to remove', 'param be number remove']
['routine which manages and grows an output buffer', 'api which manage grow output buffer']
['This one adds xmlChars at the end of the buffer', 'one end buffer']
['xmlBufferWriteCHAR_APIParam_1 is the XML buffer', 'param be buffer']
['xmlBufferWriteCHAR_APIParam_2 is the xmlBufferWriteCHAR_APIParam_2 to add', 'param be param']
['routine which manage and grows an output buffer', 'api which manage grow output buffer']
['This one add C chars at the end of the array', 'one char end array']
['xmlBufferWriteChar_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlBufferWriteChar_APIParam_2 is the xmlBufferWriteChar_APIParam_2 to add', 'param be param']
['routine which manage and grows an output buffer', 'api which manage grow output buffer']
['xmlBufferWriteQuotedString_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlBufferWriteQuotedString_APIParam_2 is the xmlBufferWriteQuotedString_APIParam_2 to add', 'param be param']
['If xmlBuildQName_APIParam_2 is NULL or empty {}_APIName returns xmlBuildQName_APIParam_1', 'if param be null empty api return param']
['xmlBuildQName_APIParam_1 is the Name', 'param be name']
['Builds the QName @prefix', 'build prefix']
['xmlBuildQName_APIParam_2 is the xmlBuildQName_APIParam_2', 'param be param']
['This one writes a quoted or double quoted #xmlChar xmlBufferWriteQuotedString_APIParam_2 , checking first', 'one write double param , check first']
['xmlBuildQName_APIParam_3 is preallocated xmlBuildQName_APIParam_3', 'param be preallocate param']
['xmlBuildQName_APIParam_4 is preallocated xmlBuildQName_APIParam_3 length', 'param be preallocate param length']
['Finds the current number of child nodes of that element which are element nodes', 'find current number element which be element']
['xmlChildElementCount_APIParam_1 is the xmlChildElementCount_APIParam_1 node', 'param be param']
['xmlBuildQName_APIName returns the new string which must be freed by the caller if different from @memory and @ncname or NULL in case of error', 'api return stre which must be free by caller']
['xmlChildElementCount_APIName returns the count of element child or 0 if not available', 'api return count element constant if not available']
['Do a copy of the document info', 'copy info']
['xmlCopyDoc_APIParam_1 is the document', 'param be']
['@ncname in @memory , otherwise allocate a new string', 'memory , otherwise string']
['Note the handling of entities references is different than in the W3C DOM element traversal spec', 'note reference be different element spec']
['xmlCopyDoc_APIName returns a new #xmlDocPtr, or NULL in case of error', 'api return , null case error']
['Do a copy of the xmlCopyDtd_APIParam_1', 'copy param']
['xmlCopyDtd_APIParam_1 is the xmlCopyDtd_APIParam_1', 'param be param']
['xmlCopyDtd_APIName returns a new #xmlDtdPtr, or NULL in case of error', 'api return , null case error']
['xmlCopyDoc_APIParam_2 is', 'param be']
['the content tree will be copied too as well as DTD , namespaces and entities', 'content be copy as well as']
['xmlCopyNamespace_APIParam_1 is the namespace', 'param be']
['xmlCopyNamespace_APIName returns a new #xmlNsPtr, or NULL in case of error', 'api return , null case error']
['Do a copy of an namespace list', 'copy list']
['xmlCopyNamespaceList_APIParam_1 is the first namespace', 'param be first']
['xmlCopyNamespaceList_APIName returns a new #xmlNsPtr, or NULL in case of error', 'api return , null case error']
['Do a copy of the xmlCopyNode_APIParam_1', 'copy param']
['xmlCopyNode_APIParam_1 is the xmlCopyNode_APIParam_1', 'param be param']
['xmlCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error', 'api return , null case error']
['Do a recursive copy of the xmlCopyNodeList_APIParam_1 list', 'recursive copy param list']
['xmlCopyNodeList_APIParam_1 is the first xmlCopyNodeList_APIParam_1 in the list', 'param be first param list']
['xmlCopyNode_APIParam_2 is', 'param be']
['xmlCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error', 'api return , null case error']
['Do a copy of the attribute', 'copy attribute']
['Use xmlDocCopyNodeList_APIName', 'use api']
['xmlCopyProp_APIParam_1 is the element where the attribute will be grafted', 'param be element attribute be graft']
['xmlCopyProp_APIParam_2 is the attribute', 'param be attribute']
['xmlCopyProp_APIName returns a new #xmlAttrPtr, or NULL in case of error', 'api return , null case error']
['Do a copy of an attribute list', 'copy attribute list']
['xmlCopyPropList_APIParam_1 is the element where the attributes will be grafted', 'param be element attribute be graft']
['xmlCopyPropList_APIParam_2 is the first attribute', 'param be first attribute']
['xmlCopyPropList_APIName returns a new #xmlAttrPtr, or NULL in case of error', 'api return , null case error']
['Create the internal subset of a document', 'create internal']
['xmlCreateIntSubset_APIParam_1 is the document pointer', 'param be pointer']
['xmlCreateIntSubset_APIParam_2 is the DTD xmlCreateIntSubset_APIParam_2', 'param be param']
['xmlCreateIntSubset_APIParam_3 is the external ID', 'param be external -PRON- would']
['xmlCreateIntSubset_APIParam_4 is the system ID', 'param be system -PRON- would']
['xmlCreateIntSubset_APIName returns a pointer to the new DTD structure', 'api return pointer structure']
['A function called to acquire namespaces from the wrapper', 'function call acquire wrapper']
['xmlDOMWrapAcquireNsFunction_APIParam_1 is a DOM wrapper context', 'param be wrapper context']
['xmlDOMWrapAcquireNsFunction_APIParam_2 is the context xmlDOMWrapAcquireNsFunction_APIParam_2', 'param be context param']
['xmlDOMWrapAcquireNsFunction_APIParam_3 is the requested namespace name', 'param be request name']
['xmlDOMWrapAcquireNsFunction_APIParam_4 is the requested namespace prefix', 'param be request prefix']
['xmlDOMWrapAcquireNsFunction_APIName returns an xmlNsPtr or NULL in case of an error', 'api return null case error']
['xmlDOMWrapAdoptNode_APIName was not intensively tested', 'api be not intensively test']
['xmlDOMWrapAdoptNode_APIParam_1 is the optional context for custom processing', 'param be optional context custom processing']
['xmlDOMWrapAdoptNode_APIParam_2 is the optional xmlDOMWrapAdoptNode_APIParam_2', 'param be optional param']
['xmlDOMWrapAdoptNode_APIParam_3 is the xmlDOMWrapAdoptNode_APIParam_3 to start with', 'param be param start']
['Note that , , this process could break QNames in attribute values or element content', 'process could break attribute value element content']
['xmlDOMWrapAdoptNode_APIParam_4 is the destination doc', 'param be destination']
['xmlDOMWrapAdoptNode_APIParam_5 is the optional new parent of @node in @destDoc', 'param be optional']
['xmlDOMWrapAdoptNode_APIParam_6 is option flags', 'param be option flag']
['1 -RRB- What to do with XInclude ?', 'constant _ rrb _']
['Currently this returns an error for XInclude', 'currently return error']
['xmlDOMWrapCloneNode_APIParam_1 is the optional context for custom processing', 'param be optional context custom processing']
['References of out-of scope ns-decls are remapped to point to @destDoc', 'reference param be remappe point']
['This is the case', 'be case']
['xmlDOMWrapAdoptNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapAdoptNode_APIParam_3 of unsupported type was given, 2 if a xmlDOMWrapAdoptNode_APIParam_3 of not yet supported type was given and -1 on API/internal errors', 'api return constant']
['@destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed', 'ensure be wellforme by create additional param need']
['xmlDOMWrapCloneNode_APIParam_2 is the optional xmlDOMWrapCloneNode_APIParam_2', 'param be optional param']
['Note that , , this process could break QNames in attribute values or element content', 'process could break attribute value element content']
['xmlDOMWrapCloneNode_APIParam_3 is the xmlDOMWrapCloneNode_APIParam_3 to start with', 'param be param start']
['xmlDOMWrapCloneNode_APIParam_4 is the clone of the given @node', 'param be give']
['xmlDOMWrapCloneNode_APIParam_5 is the destination doc', 'param be destination']
['xmlDOMWrapCloneNode_APIParam_6 is the optional new parent of @node in @destDoc', 'param be optional']
['xmlDOMWrapCloneNode_APIParam_8 is option flags', 'param be option flag']
['1 -RRB- , nsDef entries on element-nodes are used 2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used', 'constant _ rrb _ , entry param be use constant _ rrb _']
['Frees the DOM-wrapper context', 'free param context']
['xmlDOMWrapFreeCtxt_APIParam_1 is the DOM-wrapper context', 'param be param context']
['xmlDOMWrapCloneNode_APIParam_7 is descend into child', 'param be']
['xmlDOMWrapCloneNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapCloneNode_APIParam_3 of unsupported  type was given, -1 on API/internal errors', 'api return constant']
['Allocates and initializes a new DOM-wrapper context', 'initialize param context']
['xmlDOMWrapNewCtxt_APIName returns the xmlDOMWrapCtxtPtr or NULL in case of an internal error', 'api return null case internal error']
['Ensures that ns-references point to ns-decls hold on element-nodes', 'ensure param point param hold param']
['Ensures that the tree is namespace wellformed by creating additional ns-decls where needed', 'ensure be wellforme by create additional param need']
['xmlDOMWrapReconcileNamespaces_APIName was not intensively tested', 'api be not intensively test']
['xmlDOMWrapReconcileNamespaces_APIParam_1 is DOM wrapper context , unused at the moment', 'param be wrapper context , unused moment']
['xmlDOMWrapReconcileNamespaces_APIParam_2 is the element-node', 'param be param']
['xmlDOMWrapReconcileNamespaces_APIParam_3 is option flags', 'param be option flag']
['Note that , , this process could break QNames in attribute values or element content', 'process could break attribute value element content']
['xmlDOMWrapReconcileNamespaces_APIName returns 0 if succeeded, -1 otherwise and on API/internal errors', 'api return constant']
['Unlinks the given xmlDOMWrapRemoveNode_APIParam_3 from its owner', 'unlink give param']
['xmlDOMWrapRemoveNode_APIName was not intensively tested', 'api be not intensively test']
['xmlDOMWrapRemoveNode_APIParam_1 is a DOM wrapper context', 'param be wrapper context']
['References of out-of scope ns-decls are remapped to point to @destDoc', 'reference param be remappe point']
['xmlDOMWrapRemoveNode_APIParam_2 is the xmlDOMWrapRemoveNode_APIParam_2', 'param be param']
['xmlDOMWrapRemoveNode_APIParam_3 is the xmlDOMWrapRemoveNode_APIParam_3 to be removed', 'param be param be remove']
['xmlDOMWrapRemoveNode_APIParam_4 is set of xmlDOMWrapRemoveNode_APIParam_4 , unused at the moment', 'param be set param , unused moment']
['This will substitute ns-references to node - > nsDef for ns-references to doc - > oldNs , thus ensuring the removed branch to be autark wrt ns-references', 'substitute param _ param _ , thus ensure remove be autark param']
['Do a copy of the xmlDocCopyNode_APIParam_1 to a given document', 'copy param give']
['xmlDOMWrapRemoveNode_APIName returns 0 on success, 1 if the xmlDOMWrapRemoveNode_APIParam_3 is not supported, -1 on API and internal errors', 'api return constant success , constant api internal error']
['xmlDocCopyNode_APIParam_1 is the xmlDocCopyNode_APIParam_1', 'param be param']
['xmlDocCopyNode_APIParam_2 is the document', 'param be']
['xmlDocCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error', 'api return , null case error']
['Do a recursive copy of the xmlDocCopyNodeList_APIParam_2 list', 'recursive copy param list']
['xmlDocCopyNodeList_APIParam_1 is the target document', 'param be target']
['xmlDocCopyNodeList_APIParam_2 is the first xmlDocCopyNodeList_APIParam_2 in the list', 'param be first param list']
['xmlDocCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error', 'api return , null case error']
['xmlDocCopyNode_APIParam_3 is', 'param be']
['Dump an XML document to an open FILE', 'open file']
['xmlDocDump_APIParam_1 is the FILE *', 'param be file']
['xmlDocDump_APIParam_2 is the document', 'param be']
['xmlDocDump_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpFormatMemory_APIParam_3', 'memory return be param']
['it is up to the caller to free xmlDocDumpFormatMemory_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['xmlDocDumpFormatMemory_APIParam_1 is the document', 'param be']
['xmlDocDumpFormatMemory_APIParam_2 is OUT the memory pointer', 'param be memory pointer']
['xmlDocDumpFormatMemory_APIParam_3 is OUT the memory length', 'param be memory length']
['xmlDocDumpFormatMemory_APIParam_4 is should formatting spaces been added', 'param be should format space be']
['Dump the current DOM tree into memory using the character encoding specified by the caller', 'current memory use character encoding specify by caller']
['that @format = 1 provide node indenting', 'format constant provide indent']
['xmlDocDumpFormatMemoryEnc_APIParam_1 is Document to generate XML text from', 'param be generate text']
['Note it is up to the caller of xmlDocDumpFormatMemoryEnc_APIName to free the allocated memory with xmlFree_APIName', 'note be upto caller api free allocated memory api']
['xmlDocDumpFormatMemoryEnc_APIParam_2 is Memory pointer for allocated XML text', 'param be memory pointer text']
['xmlDocDumpFormatMemoryEnc_APIParam_3 is Length of the generated XML text', 'param be length generate text']
['xmlDocDumpFormatMemoryEnc_APIParam_5 is should formatting spaces been added', 'param be should format space be']
['1 -RRB- , nsDef entries on element-nodes are used', 'constant _ rrb _ , entry param be use']
['Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpMemory_APIParam_3 in bytes', 'memory return be param byte']
['it is up to the caller to free xmlDocDumpMemory_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['that @format = 1 provide node indenting', 'format constant provide indent']
['xmlDocDumpMemory_APIParam_1 is the document', 'param be']
['2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used This is the case when you have an unlinked xmlDOMWrapAdoptNode_APIParam_3 and just want to move an unlinked xmlDOMWrapAdoptNode_APIParam_3 to the context of If @destParent is given , @destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed', 'constant _ rrb _ if no be give , _ entry be use be case - PRON - have unlinke param want unlinked param context']
['xmlDocDumpFormatMemoryEnc_APIParam_4 is Character encoding to use', 'param be character encode use']
['The resulting byte array is zero terminated', 'result byte array be constant terminate']
['xmlDocDumpMemory_APIParam_2 is OUT the memory pointer', 'param be memory pointer']
['xmlDocDumpMemory_APIParam_3 is OUT the memory length', 'param be memory length']
['Dump the current DOM tree into memory using the character encoding specified by the caller', 'current memory use character encoding specify by caller']
['Note it is up to the caller of xmlDocDumpMemoryEnc_APIName to free the allocated memory with xmlFree_APIName', 'note be upto caller api free allocated memory api']
['xmlDocDumpMemoryEnc_APIParam_1 is Document to generate XML text from', 'param be generate text']
['xmlDocDumpMemoryEnc_APIParam_2 is Memory pointer for allocated XML text', 'param be memory pointer text']
['xmlDocDumpMemoryEnc_APIParam_3 is Length of the generated XML text', 'param be length generate text']
['Dump an XML document to an open FILE', 'open file']
['xmlDocFormatDump_APIParam_1 is the FILE *', 'param be file']
['xmlDocFormatDump_APIParam_2 is the document', 'param be']
['xmlDocFormatDump_APIParam_3 is should formatting spaces been added', 'param be should format space be']
['xmlDocFormatDump_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['xmlDocDumpMemoryEnc_APIParam_4 is Character encoding to use', 'param be character encode use']
['Get the root element of the document', 'get root element']
['xmlDocGetRootElement_APIParam_1 is the document', 'param be']
['xmlDocGetRootElement_APIName returns the #xmlNodePtr for the root or NULL', 'api return root null']
['Set the xmlDocSetRootElement_APIParam_2 element of the document', 'set param element']
['xmlDocSetRootElement_APIParam_1 is the document', 'param be']
['that @format = 1 provide node indenting', 'format constant provide indent']
['xmlDocSetRootElement_APIName returns the old xmlDocSetRootElement_APIParam_2 element if any was found, NULL if xmlDocSetRootElement_APIParam_2 was NULL', 'api return old param element']
['Dump an XML/HTML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['xmlElemDump_APIParam_1 is the FILE * for the output', 'param be file output']
['xmlElemDump_APIParam_2 is the document', 'param be']
['xmlElemDump_APIParam_3 is the current node', 'param be current']
['xmlDocSetRootElement_APIParam_2 is the new document xmlDocSetRootElement_APIParam_2 element', 'param be param element']
['xmlFirstElementChild_APIParam_1 is the xmlFirstElementChild_APIParam_1 node', 'param be param']
['xmlFirstElementChild_APIName returns the first element child or NULL if not available', 'api return first element null if not available']
['Free up all the structures used by a document , tree included', 'free structure use by , include']
['xmlFreeDoc_APIParam_1 is pointer to the document', 'param be pointer']
['Free a DTD structure', 'free structure']
['xmlFreeDtd_APIParam_1 is the DTD structure to free up', 'param be structure free']
['Free a node , this is a recursive behaviour , all the children are freed too', 'free , be recursive behaviour , be free']
['This does not unlink the child from the list , use xmlUnlinkNode_APIName first', 'do not unlink list , use api first']
['xmlFreeNode_APIParam_1 is the node', 'param be']
['xmlFreeNodeList_APIParam_1 is the first node in the list', 'param be first list']
['Free up the structures associated to a namespace', 'free structure associate']
['Free a node and all its siblings , this is a recursive behaviour , all the children are freed too', 'free , be recursive behaviour , be free']
['xmlFreeNs_APIParam_1 is the namespace pointer', 'param be pointer']
['Finds the first child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec', 'find first element which be element note reference be different element spec']
['Free up all the structures associated to the chained namespaces', 'free structure associate chain']
['xmlFreeNsList_APIParam_1 is the first namespace pointer', 'param be first pointer']
['Free one attribute , all the content is freed too', 'free one attribute , content be free']
['xmlFreeProp_APIParam_1 is an attribute', 'param be attribute']
['Free a property and all its siblings , all the children are freed too', 'free property , be free']
['xmlFreePropList_APIParam_1 is the first property in the list', 'param be first property list']
['xmlGetBufferAllocationScheme_APIName returns the current allocation scheme', 'api return current allocation scheme']
['get the default compression mode used , ZLIB based', 'get default mode use , base']
['xmlGetCompressMode_APIName returns 0  to 9 (max compression', 'api return constant']
['get the compression ratio for a document , ZLIB based', 'get , base']
['xmlGetDocCompressMode_APIParam_1 is the document', 'param be']
['xmlGetDocCompressMode_APIName returns 0  to 9 (max compression', 'api return constant']
['Get the internal subset of a document', 'get internal']
['xmlGetIntSubset_APIParam_1 is the document pointer', 'param be pointer']
['xmlGetIntSubset_APIName returns a pointer to the DTD structure or NULL if not found', 'api return pointer structure null if not find']
['Search the last child of a node', 'search last']
['xmlGetLastChild_APIParam_1 is the xmlGetLastChild_APIParam_1 node', 'param be param']
['xmlGetLastChild_APIName returns the last child or NULL if none', 'api return last null']
['Get line number of @node', 'get line number']
['xmlGetLineNo_APIParam_1 is valid xmlGetLineNo_APIParam_1', 'param be valid param']
['xmlGetLineNo_APIName returns the line number if successful, -1 otherwise', 'api return line number if successful , constant otherwise']
['Search and get the value of an attribute associated to a xmlGetNoNsProp_APIParam_1 This does the entity substitution', 'search get value attribute associate param do']
['xmlGetNoNsProp_APIParam_1 is the xmlGetNoNsProp_APIParam_1', 'param be param']
['xmlGetNoNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off', 'api look attribute declaration fix default declaration value unless use have be turn']
['xmlGetNoNsProp_APIParam_2 is the attribute xmlGetNoNsProp_APIParam_2', 'param be attribute param']
['xmlGetNoNsProp_APIName is similar to xmlGetProp except it will accept only an attribute in no namespace', 'api be similar api except accept only attribute no']
['Try to override the limitation of lines being store in 16 bits ints', 'override line store constant bit int']
['xmlGetNoNsProp_APIName returns the attribute value or NULL if not found', 'api return attribute value null if not find']
['it is up to the caller to free xmlGetNoNsProp_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['Build a structure based Path for the given xmlGetNodePath_APIParam_1', 'build structure base path give param']
['xmlGetNodePath_APIParam_1 is a xmlGetNodePath_APIParam_1', 'param be param']
['xmlGetNodePath_APIName returns the new path or NULL in case of error', 'api return path null case error']
['The caller must free xmlGetNodePath_APIParam_0', 'caller must free param']
['Search all the namespace applying to a given element', 'search apply give element']
['xmlGetNsList_APIParam_1 is the document', 'param be']
['xmlGetNsList_APIParam_2 is the current xmlGetNsList_APIParam_2', 'param be current param']
['Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer tight in normal usage , and doubleit on large strings to avoid pathological performance', 'type be constant _ use exact size , keep memory usage constant _ double buffer tight normal usage , large string avoid pathological performance']
['xmlGetNsList_APIName returns an NULL terminated array of all the #xmlNsPtr found that need to be freed by the caller or NULL if no namespace if defined', 'api return null terminate array find nee be free by caller null if no']
['xmlGetNsProp_APIParam_1 is the xmlGetNsProp_APIParam_1', 'param be param']
['Search and get the value of an attribute associated to a xmlGetNsProp_APIParam_1 This attribute has to be anchored in the namespace specified', 'search get value attribute associate param attribute have be anchor specify']
['xmlGetNsProp_APIParam_2 is the attribute xmlGetNsProp_APIParam_2', 'param be attribute param']
['xmlGetNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off', 'api look attribute declaration fix default declaration value unless use have be turn']
['xmlGetNsProp_APIParam_3 is the URI of the namespace', 'param be uri']
['xmlGetNsProp_APIName returns the attribute value or NULL if not found', 'api return attribute value null if not find']
['it is up to the caller to free xmlGetNsProp_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['Search and get the value of an attribute associated to a xmlGetProp_APIParam_1 This does the entity substitution', 'search get value attribute associate param do']
['xmlGetProp_APIName acts independently of namespaces associated to the attribute', 'api act independently associate attribute']
['Use xmlGetNsProp_APIName or xmlGetNoNsProp_APIName for namespace aware processing', 'use api aware processing']
['xmlGetProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off', 'api look attribute declaration fix default declaration value unless use have be turn']
['xmlGetProp_APIParam_1 is the xmlGetProp_APIParam_1', 'param be param']
['xmlGetProp_APIParam_2 is the attribute xmlGetProp_APIParam_2', 'param be attribute param']
['it is up to the caller to free xmlGetProp_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['xmlGetProp_APIName returns the attribute value or NULL if not found', 'api return attribute value null if not find']
['Search for an attribute associated to a xmlHasNsProp_APIParam_1 This attribute has to be anchored in the namespace specified', 'search attribute associate param attribute have be anchor specify']
['Note that a namespace of NULL indicates to use the default namespace', 'null indicate use default']
['xmlHasNsProp_APIParam_1 is the xmlHasNsProp_APIParam_1', 'param be param']
['xmlHasNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off', 'api look attribute declaration fix default declaration value unless use have be turn']
['xmlHasNsProp_APIParam_2 is the attribute xmlHasNsProp_APIParam_2', 'param be attribute param']
['xmlHasNsProp_APIParam_3 is the URI of the namespace', 'param be uri']
['xmlHasProp_APIParam_1 is the xmlHasProp_APIParam_1', 'param be param']
['xmlHasNsProp_APIName returns the attribute or the attribute declaration or NULL if neither was found', 'api return attribute attribute declaration null if neither be find']
['Checks whether this xmlIsBlankNode_APIParam_1 is an empty or whitespace only text-node', 'check whether param be empty whitespace only param']
['xmlHasProp_APIName returns the attribute or the attribute declaration or NULL if neither was found', 'api return attribute attribute declaration null if neither be find']
['xmlHasProp_APIParam_2 is the attribute xmlHasProp_APIParam_2', 'param be attribute param']
['xmlIsBlankNode_APIParam_1 is the xmlIsBlankNode_APIParam_1', 'param be param']
['Search an attribute associated to a xmlHasProp_APIParam_1 xmlHasProp_APIName also looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off', 'search attribute associate param api look attribute declaration fix default declaration value unless use have be turn']
['xmlIsXHTML_APIParam_1 is the system identifier', 'param be system identifier']
['xmlIsBlankNode_APIName returns 1 yes, 0 no', 'api return constant yes , constant no']
['xmlIsXHTML_APIParam_2 is the public identifier', 'param be identifi']
['xmlIsXHTML_APIName returns 1 if true, 0 if not and -1 in case of error', 'api return constant']
['xmlLastElementChild_APIParam_1 is the xmlLastElementChild_APIParam_1 node', 'param be param']
['xmlLastElementChild_APIName returns the last element child or NULL if not available', 'api return last element null if not available']
['Creation of a new node containing a CDATA block', 'creation contain block']
['xmlNewCDataBlock_APIParam_1 is the document', 'param be']
['xmlNewCDataBlock_APIParam_2 is the CDATA block xmlNewCDataBlock_APIParam_2 xmlNewCDataBlock_APIParam_2', 'param be block param']
['xmlNewCDataBlock_APIParam_3 is the length of the block', 'param be length block']
['xmlNewCDataBlock_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new character reference node', 'creation character reference']
['xmlNewCharRef_APIParam_1 is the document', 'param be']
['xmlNewCharRef_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new child element , added at the end of @parent children list', 'creation element , end list']
['@ns and @content parameters are optional', 'content param be optional']
['Finds the last child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec', 'find last element which be element note reference be different element spec']
["xmlNewCharRef_APIParam_2 is the char ref string , starting with # or '' & #", 'param be char string , start']
['@content is supposed to be a piece of XML CDATA , so @content allows entity references', 'content be suppose be piece , content allow reference']
['xmlNewChild_APIParam_1 is the xmlNewChild_APIParam_1 node', 'param be param']
['the newly created element inherits the namespace of @parent', 'newly create element inherit']
['XML special chars must be escaped first by using xmlEncodeEntitiesReentrant_APIName , or xmlNewTextChild_APIName should be used', 'special char must be escape first by use api should be use']
['a child list containing the TEXTs and ENTITY_REFs node will be created', 'list contain text constant be create']
['xmlNewChild_APIParam_3 is the xmlNewChild_APIParam_3 of the child', 'param be param']
['xmlNewChild_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new node containing a comment', 'creation contain comment']
['xmlNewChild_APIParam_2 is a namespace', 'param be']
['xmlNewComment_APIParam_1 is the comment xmlNewComment_APIParam_1', 'param be comment param']
['xmlNewComment_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewChild_APIParam_4 is the XML xmlNewChild_APIParam_4 of the child', 'param be param']
['xmlNewDoc_APIName returns a new document', 'api return']
["xmlNewDoc_APIParam_1 is xmlChar string giving the xmlNewDoc_APIParam_1 of XML `` 1.0 ''", 'param be stre give param constant']
['Creation of a new node containing a comment within a document', 'creation contain comment within']
['xmlNewDocComment_APIParam_1 is the document', 'param be']
['xmlNewDocComment_APIParam_2 is the comment xmlNewDocComment_APIParam_2', 'param be comment param']
['xmlNewDocComment_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new Fragment node', 'creation fragment']
['xmlNewDocFragment_APIParam_1 is the document owning the fragment', 'param be own fragment']
['xmlNewDocFragment_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new node element within a document', 'creation element within']
['@ns and @content are optional', 'content be optional']
['xmlNewDocNode_APIParam_1 is the document', 'param be']
['xmlNewDocNode_APIParam_3 is the node xmlNewDocNode_APIParam_3', 'param be param']
['Use xmlNewDocRawNode_APIName', 'use api']
['xmlNewDocNode_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewDocNode_APIParam_2 is namespace', 'param be']
['Creation of a new node element within a document', 'creation element within']
['@ns and @content are optional', 'content be optional']
['xmlNewDocNodeEatName_APIParam_1 is the document', 'param be']
['xmlNewDocNode_APIParam_4 is the XML text xmlNewDocNode_APIParam_4', 'param be text param']
['@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName', 'content be suppose be piece , allow reference , but special char nee be escape first by use api']
['xmlNewDocNodeEatName_APIParam_3 is the node xmlNewDocNodeEatName_APIParam_3', 'param be param']
['Use xmlNewDocRawNode_APIName', 'use api']
['xmlNewDocNodeEatName_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewDocNodeEatName_APIParam_2 is namespace', 'param be']
['Creation of a processing instruction element', 'creation processing instruction element']
['xmlNewDocPI_APIParam_1 is the target document', 'param be target']
['xmlNewDocPI_APIParam_2 is the processing instruction xmlNewDocPI_APIParam_2', 'param be process instruction param']
['@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName', 'content be suppose be piece , allow reference , but special char nee be escape first by use api']
['xmlNewDocNodeEatName_APIParam_4 is the XML text xmlNewDocNodeEatName_APIParam_4', 'param be text param']
['xmlNewDocPI_APIParam_3 is the PI xmlNewDocPI_APIParam_3', 'param be param']
['xmlNewDocPI_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewDocProp_APIParam_1 is the document', 'param be']
['Create a new property carried by a document', 'create property carry by']
['xmlNewDocProp_APIParam_2 is the xmlNewDocProp_APIParam_2 of the attribute', 'param be param attribute']
['xmlNewDocProp_APIParam_3 is the xmlNewDocProp_APIParam_3 of the attribute', 'param be param attribute']
['xmlNewDocProp_APIName returns a pointer to the attribute', 'api return pointer attribute']
['Creation of a new node element within a document', 'creation element within']
['@ns and @content are optional', 'content be optional']
['xmlNewDocRawNode_APIParam_1 is the document', 'param be']
['xmlNewDocRawNode_APIParam_3 is the node xmlNewDocRawNode_APIParam_3', 'param be param']
['xmlNewDocRawNode_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new text node within a document', 'creation text within']
['xmlNewDocRawNode_APIParam_2 is namespace', 'param be']
['xmlNewDocText_APIParam_1 is the document', 'param be']
['xmlNewDocText_APIParam_2 is the text xmlNewDocText_APIParam_2', 'param be text param']
['xmlNewDocText_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewDocRawNode_APIParam_4 is the text xmlNewDocRawNode_APIParam_4', 'param be text param']
['Creation of a new text node with an extra xmlNewDocTextLen_APIParam_2 length parameter', 'creation text extra param length param']
['The text node pertain to a given document', 'text give']
['xmlNewDocTextLen_APIParam_1 is the document', 'param be']
['xmlNewDocTextLen_APIParam_2 is the text xmlNewDocTextLen_APIParam_2', 'param be text param']
['xmlNewDocTextLen_APIParam_3 is the text xmlNewDocTextLen_APIParam_3', 'param be text param']
['xmlNewDocTextLen_APIName returns a pointer to the new node object', 'api return pointer object']
['Creation of a new DTD for the external subset', 'creation external']
['To create an internal subset , use xmlCreateIntSubset_APIName', 'create internal , use api']
['xmlNewDtd_APIParam_1 is the document pointer', 'param be pointer']
['xmlNewDtd_APIParam_2 is the DTD xmlNewDtd_APIParam_2', 'param be param']
['xmlNewDtd_APIParam_3 is the external ID', 'param be external -PRON- would']
['xmlNewDtd_APIParam_4 is the system ID', 'param be system -PRON- would']
['xmlNewDtd_APIName returns a pointer to the new DTD structure', 'api return pointer structure']
['Creation of a Namespace , the old way using PI and without scoping DEPRECATED !!!', 'creation , old way use without deprecate']
['xmlNewGlobalNs_APIParam_1 is the document carrying the namespace', 'param be carry']
['xmlNewGlobalNs_APIParam_2 is the URI associated', 'param be uri associate']
['xmlNewGlobalNs_APIParam_3 is the xmlNewGlobalNs_APIParam_3 for the namespace', 'param be param']
['xmlNewGlobalNs_APIName returns NULL this functionality had been removed', 'api return null functionality have be remove']
['Creation of a new node element', 'creation element']
['@ns is optional', 'be optional']
['xmlNewNode_APIParam_2 is the node xmlNewNode_APIParam_2', 'param be param']
['xmlNewNode_APIName returns a pointer to the new node object', 'api return pointer object']
['Uses xmlStrdup_APIName to make copy of @name', 'us api make copy name']
['xmlNewNode_APIParam_1 is namespace', 'param be']
['Creation of a new node element', 'creation element']
['@ns is optional', 'be optional']
['xmlNewNodeEatName_APIParam_2 is the node xmlNewNodeEatName_APIParam_2', 'param be param']
['xmlNewNodeEatName_APIName returns a pointer to the new node object, with pointer @name as new node xmlNewNodeEatName_APIParam_2', 'api return pointer object , pointer name as param']
['xmlNewNodeEatName_APIParam_1 is namespace', 'param be']
['Note that for a default namespace , @prefix should be NULL', 'default , prefix should be null']
['xmlNewNs_APIParam_1 is the element carrying the namespace', 'param be element carrying']
['xmlNewNs_APIName will refuse to create a namespace with a similar xmlNewNs_APIParam_3 than an existing one present on this xmlNewNs_APIParam_1', 'api refuse create similar param one present param']
['Use xmlNewNode_APIName is needed as new node name', 'use api be need as name']
['xmlNewNs_APIParam_2 is the URI associated', 'param be uri associate']
['We use href == NULL in the case of an element creation where the namespace was not defined', 'use href null case element creation be not define']
['xmlNewNs_APIParam_3 is the xmlNewNs_APIParam_3 for the namespace', 'param be param']
['xmlNewNs_APIName returns a new namespace pointer or NULL', 'api return pointer null']
['Create a new property tagged with a namespace and carried by a xmlNewNsProp_APIParam_1', 'create property carry by param']
['xmlNewNsProp_APIParam_1 is the holding xmlNewNsProp_APIParam_1', 'param be hold param']
['xmlNewNsProp_APIParam_2 is the namespace', 'param be']
['xmlNewNsProp_APIParam_3 is the xmlNewNsProp_APIParam_3 of the attribute', 'param be param attribute']
['xmlNewNsProp_APIParam_4 is the xmlNewNsProp_APIParam_4 of the attribute', 'param be param attribute']
['xmlNewNsProp_APIName returns a pointer to the attribute', 'api return pointer attribute']
['Create a new property tagged with a namespace and carried by a xmlNewNsPropEatName_APIParam_1', 'create property carry by param']
['xmlNewNsPropEatName_APIParam_1 is the holding xmlNewNsPropEatName_APIParam_1', 'param be hold param']
['xmlNewNsPropEatName_APIParam_2 is the namespace', 'param be']
['xmlNewNsPropEatName_APIParam_3 is the xmlNewNsPropEatName_APIParam_3 of the attribute', 'param be param attribute']
['xmlNewNsPropEatName_APIParam_4 is the xmlNewNsPropEatName_APIParam_4 of the attribute', 'param be param attribute']
['xmlNewNsPropEatName_APIName returns a pointer to the attribute', 'api return pointer attribute']
['Creation of a processing instruction element', 'creation processing instruction element']
['Use xmlDocNewPI preferably to get string interning', 'use preferably get string']
['xmlNewPI_APIParam_1 is the processing instruction xmlNewPI_APIParam_1', 'param be process instruction param']
['xmlNewPI_APIParam_2 is the PI xmlNewPI_APIParam_2', 'param be param']
['xmlNewPI_APIName returns a pointer to the new node object', 'api return pointer object']
['Create a new property carried by a xmlNewProp_APIParam_1', 'create property carry by param']
['xmlNewProp_APIParam_1 is the holding xmlNewProp_APIParam_1', 'param be hold param']
['xmlNewProp_APIParam_2 is the xmlNewProp_APIParam_2 of the attribute', 'param be param attribute']
['xmlNewProp_APIParam_3 is the xmlNewProp_APIParam_3 of the attribute', 'param be param attribute']
['xmlNewProp_APIName returns a pointer to the attribute', 'api return pointer attribute']
['Creation of a new reference node', 'creation reference']
['xmlNewReference_APIParam_1 is the document', 'param be']
['xmlNewReference_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewReference_APIParam_2 is the reference xmlNewReference_APIParam_2 , or the reference string with & and', 'param be reference param , reference string']
['Creation of a new text node', 'creation text']
['xmlNewText_APIParam_1 is the text xmlNewText_APIParam_1', 'param be text param']
['xmlNewText_APIName returns a pointer to the new node object', 'api return pointer object']
['@ns and @content parameters are optional', 'content param be optional']
['Creation of a new child element , added at the end of @parent children list', 'creation element , end list']
['xmlNewTextChild_APIParam_1 is the xmlNewTextChild_APIParam_1 node', 'param be param']
['the newly created element inherits the namespace of @parent', 'newly create element inherit']
['xmlNewTextChild_APIParam_3 is the xmlNewTextChild_APIParam_3 of the child', 'param be param']
['xmlNewTextChild_APIName returns a pointer to the new node object', 'api return pointer object']
['a child TEXT node will be created containing the string @content', 'text be create contain string content']
['xmlNewTextChild_APIParam_2 is a namespace', 'param be']
['Use xmlNewChild_APIName will contain entities that need to be preserved', 'use api contain need be preserve']
['xmlNewTextLen_APIParam_1 is the text xmlNewTextLen_APIParam_1', 'param be text param']
['Creation of a new text node with an extra parameter for the xmlNewTextLen_APIParam_1 length', 'creation text extra param length']
['xmlNewTextLen_APIParam_2 is the text xmlNewTextLen_APIParam_2', 'param be text param']
['xmlNewTextLen_APIName returns a pointer to the new node object', 'api return pointer object']
['xmlNewTextChild_APIParam_4 is the text xmlNewTextChild_APIParam_4 of the child', 'param be text param']
['Finds the first closest next sibling of the xmlNextElementSibling_APIParam_1 which is an element xmlNextElementSibling_APIParam_1', 'find first close param which be element param']
['xmlNextElementSibling_APIParam_1 is the current xmlNextElementSibling_APIParam_1', 'param be current param']
['Append the extra substring to the node xmlNodeAddContent_APIParam_2', 'append extra substring param']
['xmlNextElementSibling_APIName returns the next element sibling or NULL if not available', 'api return element null if not available']
['Note the handling of entities references is different than in the W3C DOM element traversal spec', 'note reference be different element spec']
['xmlNodeAddContent_APIParam_1 is the node being modified', 'param be modify']
['xmlNodeAddContent_APIParam_2 is extra content', 'param be extra content']
['Append the extra substring to the node xmlNodeAddContentLen_APIParam_2', 'append extra substring param']
['xmlNodeAddContentLen_APIParam_1 is the node being modified', 'param be modify']
['xmlNodeAddContentLen_APIParam_2 is extra xmlNodeAddContentLen_APIParam_2', 'param be extra param']
['xmlNodeAddContentLen_APIParam_3 is the size of @content', 'param be size content']
['In contrast to xmlNodeSetContent_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported', 'api , content be suppose be raw text , unescaped special char be allow , reference be not support']
['this function , xmlNewTextChild_APIName , , such as the ampersand , greater-than or less-than signs , are automatically replaced by their XML', 'function , api , as , param sign , be automatically replace by']
['Use escaped entity representations', 'use escape representation']
['Entity references are substituted', 'reference be substitute']
['Fills up the xmlNodeBufGetContent_APIParam_1 @buffer with this value', 'fill param buffer value']
['xmlNodeBufGetContent_APIParam_1 is a xmlNodeBufGetContent_APIParam_1', 'param be param']
['xmlNodeBufGetContent_APIParam_2 is the node being read', 'param be read']
['In contrast to xmlNodeSetContentLen_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported', 'api , content be suppose be raw text , unescaped special char be allow , reference be not support']
['xmlNodeBufGetContent_APIName returns 0 in case of success and -1 in case of error', 'api return constant case success constant case error']
['Dump an XML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['xmlNodeDump_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlNodeDump_APIParam_2 is the document', 'param be']
['xmlNodeDump_APIParam_3 is the current node', 'param be current']
['xmlNodeDump_APIParam_4 is the imbrication xmlNodeDump_APIParam_4 for indenting', 'param be param indent']
['xmlNodeDump_APIParam_5 is is formatting allowed', 'param be be format allow']
['xmlNodeDump_APIName returns the number of bytes written to the buffer or -1 in case of error', 'api return number byte write buffer constant case error']
['Dump an XML node , recursive behaviour , children are printed too', 'recursive behaviour , be print']
['xmlNodeDumpOutput_APIParam_1 is the XML buffer output', 'param be buffer output']
['xmlNodeDumpOutput_APIParam_2 is the document', 'param be']
['carried directly by this node', 'carry directly by']
['Read the value of a node @cur , this can be either the text', 'read value , can be either text']
['xmlNodeDumpOutput_APIParam_3 is the current node', 'param be current']
['xmlNodeDumpOutput_APIParam_4 is the imbrication xmlNodeDumpOutput_APIParam_4 for indenting', 'param be param indent']
['xmlNodeDumpOutput_APIParam_5 is is formatting allowed', 'param be be format allow']
['that @format = 1 provide node indenting', 'format constant provide indent']
['Note , use xmlBufNodeDump_APIName instead', 'note , use api instead']
['xmlNodeDumpOutput_APIParam_6 is an optional xmlNodeDumpOutput_APIParam_6 string', 'param be optional param string']
['that @format = 1 provide node indenting', 'format constant provide indent']
['Searches for the BASE URL', 'search base']
['The code should work on both XML and HTML document', 'code should work']
['{}_APIName returns the base as defined in RFC 2396 sections 5.1.1', 'api return base as define rfc constant section constant']
['Base URI within Document Content and 5.1.2', 'base uri within content constant']
['xmlNodeGetBase_APIParam_1 is the document the node pertains to', 'param be']
['Base URI from the Encapsulating Entity However it does not return the document base , use doc->URL', 'base uri encapsulating however do not return base , use param']
['xmlNodeGetBase_APIParam_2 is the node being checked', 'param be check']
['Entity references are substituted', 'reference be substitute']
['xmlNodeGetContent_APIParam_1 is the node being read', 'param be read']
['xmlNodeGetBase_APIName returns a pointer to the base URL, or NULL if not found it is up to the caller to free xmlNodeGetBase_APIParam_0 with xmlFree_APIName', 'api return pointer base , null']
['xmlNodeGetContent_APIName returns a new #xmlChar * or NULL if no content is available', 'api return null']
['it is up to the caller to free xmlNodeGetContent_APIParam_0 with xmlFree_APIName', 'be upto caller free param api']
['Searches the language of a node , i.e', 'search language']
['xmlNodeGetLang_APIParam_1 is the node being checked', 'param be check']
['lang attribute or the one carried by the nearest ancestor', 'attribute one carry by near']
['xmlNodeGetSpacePreserve_APIParam_1 is the node being checked', 'param be check']
['Searches the space preserving behaviour of a node , i.e', 'search space preserve behaviour']
['space attribute or the one carried by the nearest ancestor', 'space attribute one carry by near']
['xmlNodeGetLang_APIName returns a pointer to the lang value, or NULL if not found it is up to the caller to free xmlNodeGetLang_APIParam_0 with xmlFree_APIName', 'api return pointer value , null']
['Is this xmlNodeIsText_APIParam_1 a Text xmlNodeIsText_APIParam_1 ?', 'be param text param']
['xmlNodeGetSpacePreserve_APIName returns -1 if xmlspace is not inherited, 0 if "default", 1 if "preserve', 'api return constant']
['xmlNodeIsText_APIParam_1 is the xmlNodeIsText_APIParam_1', 'param be param']
['xmlNodeIsText_APIName returns 1 yes, 0 no', 'api return constant yes , constant no']
['carried directly by this node', 'carry directly by']
['Read the value of a node , this can be either the text', 'read value , can be either text']
['xmlNodeListGetRawString_APIParam_1 is the document', 'param be']
['xmlNodeListGetRawString_APIParam_2 is a Node xmlNodeListGetRawString_APIParam_2', 'param be param']
['xmlNodeListGetRawString_APIParam_3 is should we replace entity contents or show their external form', 'param be should replace content external form']
['xmlNodeListGetString_APIParam_1 is the document', 'param be']
['xmlNodeListGetRawString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName', 'api return pointer string copy , caller must free api']
['xmlNodeListGetString_APIParam_2 is a Node xmlNodeListGetString_APIParam_2', 'param be param']
['Build the string equivalent to the text contained in the Node xmlNodeListGetString_APIParam_2 made of TEXTs and ENTITY_REFs', 'build stre equivalent text contain param make text constant']
['xmlNodeListGetString_APIParam_3 is should we replace entity contents or show their external form', 'param be should replace content external form']
['Builds the string equivalent to the text contained in the Node xmlNodeListGetRawString_APIParam_2 made of TEXTs and ENTITY_REFs , contrary to xmlNodeListGetString_APIName xmlNodeListGetRawString_APIName does not do any character encoding handling', 'build stre equivalent text contain param make text constant , api do not character encode handling']
['Set the base URI of a node , i.e', 'set base uri']
['xmlNodeListGetString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName', 'api return pointer string copy , caller must free api']
['base attribute', 'base attribute']
['xmlNodeSetBase_APIParam_1 is the node being changed', 'param be change']
['xmlNodeSetBase_APIParam_2 is the new base URI', 'param be base uri']
['Replace the xmlNodeSetContent_APIParam_2 of a node', 'replace param']
['xmlNodeSetContent_APIParam_1 is the node being modified', 'param be modify']
['xmlNodeSetContent_APIParam_2 is the new value of the content', 'param be value content']
['Replace the xmlNodeSetContentLen_APIParam_2 of a node', 'replace param']
['xmlNodeSetContentLen_APIParam_1 is the node being modified', 'param be modify']
['xmlNodeSetContentLen_APIParam_2 is the new value of the xmlNodeSetContentLen_APIParam_2', 'param be value param']
['xmlNodeSetContentLen_APIParam_3 is the size of @content', 'param be size content']
['@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp', 'content be suppose be piece , content allow reference , but special char nee be escape first by use api']
['Set the language of a node , i.e', 'set language']
['xmlNodeSetLang_APIParam_1 is the node being changed', 'param be change']
['xmlNodeSetLang_APIParam_2 is the language description', 'param be language description']
['Set the xmlNodeSetName_APIParam_2 of a node', 'set param']
['@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp', 'content be suppose be piece , content allow reference , but special char nee be escape first by use api']
['xmlNodeSetName_APIParam_1 is the node being changed', 'param be change']
['xmlNodeSetName_APIParam_2 is the new tag name', 'param be name']
['Set the space preserving behaviour of a node , i.e', 'set space preserve behaviour']
['space attribute', 'space attribute']
['xmlNodeSetSpacePreserve_APIParam_1 is the node being changed', 'param be change']
['xmlPreviousElementSibling_APIParam_1 is the current xmlPreviousElementSibling_APIParam_1', 'param be current param']
['Finds the first closest previous sibling of the xmlPreviousElementSibling_APIParam_1 which is an element xmlPreviousElementSibling_APIParam_1', 'find first close previous param which be element param']
['xmlPreviousElementSibling_APIName returns the previous element sibling or NULL if not available', 'api return previous element null if not available']
['xmlReconciliateNs_APIName checks that all the namespaces declared within the given xmlReconciliateNs_APIParam_2 are properly declared', 'api check declare within give param be properly declare']
['This is needed after Copy or Cut and paste operations', 'be need after copy paste operation']
['Note the handling of entities references is different than in the W3C DOM element traversal spec', 'note reference be different element spec']
['The subtree may still hold pointers to namespace declarations outside the subtree or invalid/masked', 'may still hold pointer declaration outside']
["xmlNodeSetSpacePreserve_APIParam_2 is the xmlspace value -LRB- `` 0 '' default , 1 `` preserve", 'param be value _ lrb _ constant default , constant preserve']
['xmlReconciliateNs_APIParam_1 is the document', 'param be']
['As much as possible the function try to reuse the existing namespaces found in the new environment', 'as much as possible function reuse find environment']
['xmlReconciliateNs_APIParam_2 is a node defining the subtree to reconciliate', 'param be define reconciliate']
['xmlReconciliateNs_APIName returns the number of namespace declarations created or -1 in case of error', 'api return number declaration create constant case error']
['xmlRemoveProp_APIParam_1 is an attribute', 'param be attribute']
['xmlRemoveProp_APIName returns 0 if success and -1 in case of error', 'api return constant case error']
['the new namespaces are redeclared on @tree at the top of the given subtree', 'be redeclare give']
['Unlink and free one attribute , all the content is freed too Note this does not work for namespace definition attributes', 'unlink free one attribute , content be free note do not work definition attribute']
['xmlReplaceNode_APIParam_1 is the xmlReplaceNode_APIParam_1 node', 'param be param']
['Unlink the xmlReplaceNode_APIParam_1 node from its current context , prune the new one at the same place', 'unlink param current context , prune one place']
['xmlReplaceNode_APIParam_2 is the node', 'param be']
['xmlReplaceNode_APIName returns the @old node', 'api return old']
['xmlSaveFile_APIParam_1 is the xmlSaveFile_APIParam_1', 'param be param']
['it is first unlinked from its existing context', 'be first unlinked context']
['xmlSaveFile_APIParam_2 is the document', 'param be']
['xmlSaveFile_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['Will use compression and enabled', 'use enable']
['Dump an XML document , converting it to the given xmlSaveFileEnc_APIParam_3', 'convert give param']
['xmlSaveFileEnc_APIParam_1 is the xmlSaveFileEnc_APIParam_1', 'param be param']
['xmlSaveFileEnc_APIParam_2 is the document', 'param be']
['xmlSaveFileEnc_APIParam_3 is the name of an xmlSaveFileEnc_APIParam_3', 'param be name param']
['the stdout file is used', 'stdout file be use']
['xmlSaveFileTo_APIParam_2 is the document', 'param be']
['xmlSaveFileTo_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['xmlSaveFileTo_APIParam_3 is the xmlSaveFileTo_APIParam_3', 'param be param']
['This call xmlOutputBufferClose_APIName on xmlSaveFileTo_APIParam_1 which is not available after this call', 'call api param which be not available after call']
['xmlSaveFormatFile_APIParam_1 is the xmlSaveFormatFile_APIParam_1', 'param be param']
['xmlSaveFileEnc_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['xmlSaveFileTo_APIParam_1 is an output I/O buffer', 'param be output buffer']
['Will use compression and enabled', 'use enable']
['xmlSaveFormatFile_APIParam_2 is the document', 'param be']
['the document will be indented on output', 'be indent output']
['xmlSaveFormatFile_APIParam_3 is should formatting spaces been added', 'param be should format space be']
['xmlSaveFormatFile_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['xmlSaveFormatFileEnc_APIParam_1 is the xmlSaveFormatFileEnc_APIParam_1 or URL to output', 'param be param output']
['that @format = 1 provide node indenting', 'format constant provide indent']
['xmlSaveFormatFileEnc_APIParam_2 is the document being saved', 'param be']
['the stdout file is used', 'stdout file be use']
['xmlSaveFormatFileEnc_APIParam_3 is the name of the xmlSaveFormatFileEnc_APIParam_3 to use or NULL', 'param be name param use null']
['xmlSaveFormatFileEnc_APIParam_4 is should formatting spaces be added', 'param be should format space be']
['xmlSaveFormatFileEnc_APIName returns the number of bytes written or -1 in case of error', 'api return number byte write constant case error']
['This call xmlOutputBufferClose_APIName on xmlSaveFormatFileTo_APIParam_1 which is not available after this call', 'call api param which be not available after call']
['xmlSaveFormatFileTo_APIParam_1 is an output I/O buffer', 'param be output buffer']
['xmlSaveFormatFileTo_APIParam_2 is the document', 'param be']
['that @format = 1 provide node indenting', 'format constant provide indent']
['xmlSaveFormatFileTo_APIParam_4 is should formatting spaces been added', 'param be should format space be']
['xmlSaveFormatFileTo_APIName returns the number of bytes written or -1 in case of failure', 'api return number byte write constant case failure']
['recurse on the parents until it finds the defined namespace or return NULL otherwise', 'until find define return null otherwise']
['Search a Ns registered under a given name space for a document', 'search register give name space']
['xmlSaveFormatFileTo_APIParam_3 is the xmlSaveFormatFileTo_APIParam_3', 'param be param']
['@nameSpace can be NULL , this is a search for the default namespace', 'can be null , be search default']
['We do not allow to cross entities boundaries', 'not allow cross boundary']
['A warning is generated to cover this case', 'warning be generate cover case']
['xmlSearchNs_APIParam_1 is the document', 'param be']
['xmlSearchNs_APIParam_2 is the current xmlSearchNs_APIParam_2', 'param be current param']
['xmlSearchNs_APIParam_3 is the namespace prefix', 'param be prefix']
['xmlSearchNs_APIName returns the namespace pointer or NULL', 'api return pointer null']
['Search a Ns aliasing a given URI', 'search aliase give uri']
['Recurse on the parents until it finds the defined namespace or return NULL otherwise', 'until find define return null otherwise']
['xmlSearchNsByHref_APIParam_1 is the document', 'param be']
['xmlSearchNsByHref_APIParam_2 is the current xmlSearchNsByHref_APIParam_2', 'param be current param']
['xmlSearchNsByHref_APIParam_3 is the namespace value', 'param be value']
['xmlSearchNsByHref_APIName returns the namespace pointer or NULL', 'api return pointer null']
['Set the buffer allocation method', 'set buffer allocation api']
['xmlSetBufferAllocationScheme_APIParam_1 is allocation method to use', 'param be allocation api use']
['set the default compression xmlSetCompressMode_APIParam_1 used , ZLIB based Correct values', 'set default param use , base correct value']
['xmlSetCompressMode_APIParam_1 is the compression ratio', 'param be']
['set the compression ratio for a document , ZLIB based Correct values', 'set , base correct value']
['xmlSetDocCompressMode_APIParam_1 is the document', 'param be']
['xmlSetDocCompressMode_APIParam_2 is the compression ratio', 'param be']
['update all nodes in the xmlSetListDoc_APIParam_1 to point to the right document', 'update param point']
['Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer', 'type be constant _ use exact size , keep memory usage constant _ double buffer']
['xmlSetListDoc_APIParam_1 is the first element', 'param be first element']
['xmlSetListDoc_APIParam_2 is the document', 'param be']
['Associate a namespace to a xmlSetNs_APIParam_1 , a posteriori', 'associate param']
['xmlSetNs_APIParam_1 is a xmlSetNs_APIParam_1 in the document', 'param be param']
['xmlSetNs_APIParam_2 is a namespace pointer', 'param be pointer']
['Set an attribute carried by a xmlSetNsProp_APIParam_1', 'set attribute carry by param']
['xmlSetNsProp_APIParam_1 is the xmlSetNsProp_APIParam_1', 'param be param']
['The xmlSetNsProp_APIParam_2 structure must be in scope , this is not checked', 'param structure must be , be not check']
['xmlSetNsProp_APIParam_2 is the namespace definition', 'param be definition']
['xmlSetNsProp_APIParam_3 is the attribute xmlSetNsProp_APIParam_3', 'param be attribute param']
['xmlSetNsProp_APIParam_4 is the attribute xmlSetNsProp_APIParam_4', 'param be attribute param']
['xmlSetNsProp_APIName returns the attribute pointer', 'api return attribute pointer']
['xmlSetProp_APIParam_2 is the attribute xmlSetProp_APIParam_2', 'param be attribute param']
['Set an attribute carried by a xmlSetProp_APIParam_1', 'set attribute carry by param']
['xmlSetProp_APIParam_3 is the attribute xmlSetProp_APIParam_3', 'param be attribute param']
['xmlSetProp_APIParam_1 is the xmlSetProp_APIParam_1', 'param be param']
['xmlSetProp_APIName returns the attribute pointer', 'api return attribute pointer']
['update all nodes under the xmlSetTreeDoc_APIParam_1 to point to the right document', 'update param point']
['xmlSetTreeDoc_APIParam_1 is the top element', 'param be element']
['xmlSetTreeDoc_APIParam_2 is the document', 'param be']
['parse an XML qualified xmlSplitQName2_APIParam_1 string QName', 'parse qualified param string']
['xmlSplitQName2_APIParam_1 is the full QName', 'param be full']
['the corresponding namespace-binding will be used , if in scope', 'corresponding param be use , if']
['xmlSplitQName2_APIParam_2 is a xmlChar **', 'param be']
['it is an error it there no such ns-binding for the prefix in scope', 'be error no param prefix']
['xmlSplitQName2_APIName returns NULL if the xmlSplitQName2_APIParam_1 does not have a xmlSplitQName2_APIParam_2', 'api return null']
['Otherwise, returns the local part, and xmlSplitQName2_APIParam_2 is updated to get the Prefix', 'otherwise , return local part , param be update get prefix']
['Both the return value and the xmlSplitQName2_APIParam_2 must be freed by the caller', 'return value param must be free by caller']
['parse an XML qualified xmlSplitQName3_APIParam_1 string , i', 'parse qualified param string']
['xmlSplitQName3_APIParam_1 is the full QName', 'param be full']
['xmlSplitQName3_APIParam_2 is an int *', 'param be int']
['Parse the xmlStringGetNodeList_APIParam_2 string and build the node list associated', 'parse param string build list associate']
['Should produce a flat tree with only TEXTs and ENTITY_REFs', 'should produce flat only text constant']
['xmlStringGetNodeList_APIParam_1 is the document', 'param be']
['xmlStringGetNodeList_APIParam_2 is the xmlStringGetNodeList_APIParam_2 of the attribute', 'param be param attribute']
['xmlStringGetNodeList_APIName returns a pointer to the first child', 'api return pointer first']
['Parse the xmlStringLenGetNodeList_APIParam_2 string and build the node list associated', 'parse param string build list associate']
['Should produce a flat tree with only TEXTs and ENTITY_REFs', 'should produce flat only text constant']
['xmlSplitQName3_APIName returns NULL if it is not a Qualified Name, otherwise, update xmlSplitQName3_APIParam_2 with the length in byte of the prefix and return a pointer to the start of the xmlSplitQName3_APIParam_1 without the prefix', 'api return null  , otherwise , update param length byte prefix return pointer start param without prefix']
['xmlStringLenGetNodeList_APIParam_1 is the document', 'param be']
['xmlStringLenGetNodeList_APIParam_2 is the xmlStringLenGetNodeList_APIParam_2 of the text', 'param be param text']
['xmlStringLenGetNodeList_APIParam_3 is the length of the string xmlStringLenGetNodeList_APIParam_2', 'param be length string param']
['xmlStringLenGetNodeList_APIName returns a pointer to the first child', 'api return pointer first']
['Concat the given string at the end of the existing xmlTextConcat_APIParam_1 xmlTextConcat_APIParam_2', 'give string end param']
['xmlTextConcat_APIParam_1 is the xmlTextConcat_APIParam_1', 'param be param']
['xmlTextConcat_APIParam_2 is the xmlTextConcat_APIParam_2', 'param be param']
['xmlTextConcat_APIParam_3 is @content length', 'param be content length']
['xmlTextConcat_APIName returns -1 in case of error, 0 otherwise', 'api return constant case error , constant otherwise']
['Merge two text nodes into one', 'merge two text one']
['xmlTextMerge_APIParam_1 is the xmlTextMerge_APIParam_1 text node', 'param be param text']
['xmlTextMerge_APIParam_2 is the xmlTextMerge_APIParam_2 text node being merged', 'param be param text merge']
['xmlTextMerge_APIName returns the xmlTextMerge_APIParam_1 text node augmented', 'api return param text augment']
['xmlUnlinkNode_APIParam_1 is the node', 'param be']
['Remove an attribute carried by a xmlUnsetNsProp_APIParam_1', 'remove attribute carry by param']
['Note that namespace nodes can not be unlinked as they do not have pointer to their parent', 'can not be unlinke as not have pointer']
['xmlUnsetNsProp_APIParam_1 is the xmlUnsetNsProp_APIParam_1', 'param be param']
['xmlUnsetNsProp_APIParam_2 is the namespace definition', 'param be definition']
['xmlUnsetNsProp_APIParam_3 is the attribute xmlUnsetNsProp_APIParam_3', 'param be attribute param']
['xmlUnsetNsProp_APIName returns 0 if successful, -1 if not found', 'api return constant']
['Remove an attribute carried by a xmlUnsetProp_APIParam_1', 'remove attribute carry by param']
['This handles only attributes in no namespace', 'only attribute no']
['xmlUnsetProp_APIParam_1 is the xmlUnsetProp_APIParam_1', 'param be param']
['xmlUnsetProp_APIParam_2 is the attribute xmlUnsetProp_APIParam_2', 'param be attribute param']
['xmlUnsetProp_APIName returns 0 if successful, -1 if not found', 'api return constant']
['the node is not freed', 'be not free']
['Unlink a node from it is current context , , use xmlFreeNode_APIName routine after the unlink to discard it', 'unlink be current context , use api after unlink discard']
['Check that a xmlValidateNCName_APIParam_1 conforms to the lexical xmlValidateNCName_APIParam_2 of NCName', 'check param conform lexical param']
['xmlValidateNCName_APIParam_1 is the xmlValidateNCName_APIParam_1 to check', 'param be param check']
['xmlValidateNCName_APIParam_2 allow spaces in front and end of the string', 'param allow space end string']
['Check that a xmlValidateNMToken_APIParam_1 conforms to the lexical xmlValidateNMToken_APIParam_2 of NMToken', 'check param conform lexical param']
['xmlValidateNMToken_APIParam_1 is the xmlValidateNMToken_APIParam_1 to check', 'param be param check']
['xmlValidateNMToken_APIParam_2 allow spaces in front and end of the string', 'param allow space end string']
['xmlValidateNCName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['Check that a xmlValidateName_APIParam_1 conforms to the lexical xmlValidateName_APIParam_2 of Name', 'check param conform lexical param name']
['xmlValidateName_APIParam_1 is the xmlValidateName_APIParam_1 to check', 'param be param check']
['xmlValidateName_APIParam_2 allow spaces in front and end of the string', 'param allow space end string']
['xmlValidateNMToken_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['Check that a xmlValidateQName_APIParam_1 conforms to the lexical xmlValidateQName_APIParam_2 of QName', 'check param conform lexical param']
['xmlValidateName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['xmlValidateQName_APIParam_1 is the xmlValidateQName_APIParam_1 to check', 'param be param check']
['xmlValidateQName_APIParam_2 allow spaces in front and end of the string', 'param allow space end string']
['The close operations unload the associated xmlModuleClose_APIParam_1 and free the data associated to the xmlModuleClose_APIParam_1', 'close operation unload associate param free datum associate param']
['xmlValidateQName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['xmlModuleClose_APIParam_1 is the xmlModuleClose_APIParam_1 handle', 'param be param']
['xmlModuleFree_APIParam_1 is the xmlModuleFree_APIParam_1 handle', 'param be param']
['xmlModuleFree_APIName returns 0 in case of success, -1 in case of argument error', 'api return constant case success , constant case param error']
['xmlModuleClose_APIName returns 0 in case of success, -1 in case of argument error and -2 if the xmlModuleClose_APIParam_1 could not be closed/unloaded', 'api return constant case success , constant case param error constant']
['xmlModuleOpen_APIParam_2 are not yet implemented', 'param be not yet implement']
['xmlModuleOpen_APIParam_1 is the module xmlModuleOpen_APIParam_1', 'param be module param']
['The free operations free the data associated to the xmlModuleFree_APIParam_1 but does not unload the associated shared library which may still be in use', 'free operation free datum associate param but do not unload associate library which may still be use']
['Opens a module/shared library given its xmlModuleOpen_APIParam_1 or path NOTE', 'open library give param path note']
['that due to portability issues , behaviour can only be guaranteed with @name using ASCII', 'due issue , behaviour can only be guarantee name use ascii']
['xmlModuleOpen_APIParam_2 is a set of xmlModuleOption', 'param be set']
['xmlModuleOpen_APIName returns a handle for the module or NULL in case of error', 'api return module null case error']
['We canot guarantee that an UTF-8 string would work , which is why xmlModuleOpen_APIParam_1 is a const char * and not a const xmlChar *', 'canot guarantee param string would work , which be param be const char not const']
['xmlModuleSymbol_APIParam_1 is the xmlModuleSymbol_APIParam_1', 'param be param']
['xmlModuleSymbol_APIParam_2 is the xmlModuleSymbol_APIParam_2 of the xmlModuleSymbol_APIParam_3', 'param be param']
['Lookup for a xmlModuleSymbol_APIParam_3 address in the given xmlModuleSymbol_APIParam_1 NOTE', 'lookup param address give param note']
['that due to portability issues , behaviour can only be guaranteed with @name using ASCII', 'due issue , behaviour can only be guarantee name use ascii']
['xmlModuleSymbol_APIParam_3 is the resulting xmlModuleSymbol_APIParam_3 address', 'param be result param address']
['xmlModuleSymbol_APIName returns 0 if the xmlModuleSymbol_APIParam_3 was found, or -1 in case of error', 'api return constant']
['We canot guarantee that an UTF-8 string would work , which is why xmlModuleSymbol_APIParam_2 is a const char * and not a const xmlChar *', 'canot guarantee param string would work , which be param be const char not const']
['UTF8ToHtml_APIParam_1 is a pointer to an array of bytes to store the result', 'param be pointer array byte store result']
['UTF8ToHtml_APIParam_2 is the length of @out', 'param be length']
['Take a block of UTF-8 chars UTF8ToHtml_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars UTF8ToHtml_APIParam_1', 'take block param char param convert ascii plus block char param']
['UTF8ToHtml_APIParam_3 is a pointer to an array of UTF-8 chars', 'param be pointer array param char']
['UTF8ToHtml_APIParam_4 is the length of @in', 'param be length']
['The value of @outlen after return is the number of octets consumed', 'value after return be number octet consume']
['htmlAttrAllowed_APIParam_1 is HTML element', 'param be element']
['Checks Has full knowledge of Required and Deprecated attributes', 'check have full require deprecate attribute']
['htmlAttrAllowed_APIParam_2 is HTML attribute', 'param be attribute']
['htmlAttrAllowed_APIParam_3 is whether to allow deprecated attributes', 'param be whether allow deprecate attribute']
['htmlAttrAllowed_APIName returns one of HTML_REQUIRED, HTML_VALID, HTML_DEPRECATED, HTML_INVALID', 'api return one constant']
['The HTML DTD allows a tag to implicitly close other tags', 'allow implicitly close']
['The list is kept in htmlStartClose array', 'list be keep array']
['htmlAutoCloseTag_APIParam_1 is the HTML document', 'param be']
['htmlAutoCloseTag_APIParam_2 is The tag htmlAutoCloseTag_APIParam_2', 'param be param']
['htmlAutoCloseTag_APIName checks if the element or one of The list is children would autoclose the given tag', 'api check if element one list be would give']
['UTF8ToHtml_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable', 'api return constant']
['htmlAutoCloseTag_APIParam_3 is the HTML element', 'param be element']
['Create a parser context for an HTML in-memory document', 'create parser context param']
['htmlAutoCloseTag_APIName returns 1 if autoclose, 0 otherwise', 'api return constant if , constant otherwise']
['htmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array', 'param be pointer char array']
['htmlCreateMemoryParserCtxt_APIParam_2 is the htmlCreateMemoryParserCtxt_APIParam_2 of the array', 'param be param array']
['htmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['htmlCreatePushParserCtxt_APIParam_1 is a SAX handler', 'param be handler']
['htmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks', 'param be user datum return callback']
['htmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars', 'param be pointer array char']
['htmlCreatePushParserCtxt_APIParam_4 is number of chars in the array', 'param be number char array']
['htmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI', 'param be optional file name uri']
['htmlCreatePushParserCtxt_APIParam_6 is an optional encoding', 'param be optional encoding']
['htmlCreatePushParserCtxt_APIName returns the new parser context or NULL', 'api return parser context null']
['Create a parser context for using the HTML parser in push mode The value of @filename is used for fetching external entities and error/warning reports', 'create parser context use parser mode value filename be use fetch external report']
['parse an XML in-memory document and build a tree', 'parse param build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['htmlCtxtReadDoc_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['htmlCtxtReadDoc_APIParam_3 is the base htmlCtxtReadDoc_APIParam_3 to use for the document', 'param be base param use']
['htmlCtxtReadDoc_APIParam_4 is the document htmlCtxtReadDoc_APIParam_4 , or NULL', 'param be param , null']
['htmlCtxtReadDoc_APIParam_5 is a combination of htmlParserOption', 'param be combination']
['htmlCtxtReadDoc_APIName returns the resulting document tree', 'api return result']
['parse an XML from a file descriptor and build a tree', 'parse file descriptor build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['htmlCtxtReadFd_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtReadFd_APIParam_2 is an open file descriptor', 'param be open file descriptor']
['htmlCtxtReadFd_APIParam_3 is the base htmlCtxtReadFd_APIParam_3 to use for the document', 'param be base param use']
['htmlCtxtReadFd_APIParam_4 is the document htmlCtxtReadFd_APIParam_4 , or NULL', 'param be param , null']
['htmlCtxtReadFd_APIParam_5 is a combination of htmlParserOption', 'param be combination']
['htmlCtxtReadFd_APIName returns the resulting document tree', 'api return result']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['htmlCtxtReadFile_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtReadFile_APIParam_2 is a file or URL', 'param be file']
['htmlCtxtReadFile_APIParam_3 is the document htmlCtxtReadFile_APIParam_3 , or NULL', 'param be param , null']
['htmlCtxtReadFile_APIParam_4 is a combination of htmlParserOption', 'param be combination']
['htmlCtxtReadFile_APIName returns the resulting document tree', 'api return result']
['parse an HTML document from I/O functions and source and build a tree', 'parse function source build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['htmlCtxtReadIO_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtReadIO_APIParam_2 is an I/O read function', 'param be read function']
['htmlCtxtReadIO_APIParam_3 is an I/O close function', 'param be close function']
['htmlCtxtReadIO_APIParam_4 is an I/O handler', 'param be handler']
['htmlCtxtReadIO_APIParam_5 is the base htmlCtxtReadIO_APIParam_5 to use for the document', 'param be base param use']
['htmlCtxtReadIO_APIParam_6 is the document htmlCtxtReadIO_APIParam_6 , or NULL', 'param be param , null']
['htmlCtxtReadIO_APIParam_7 is a combination of htmlParserOption', 'param be combination']
['htmlCtxtReadIO_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory document and build a tree', 'parse param build']
['This reuses the existing @ctxt parser context', 'reuse parser context']
['htmlCtxtReadMemory_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtReadMemory_APIParam_2 is a pointer to a char array', 'param be pointer char array']
['htmlCtxtReadMemory_APIParam_3 is the htmlCtxtReadMemory_APIParam_3 of the array', 'param be param array']
['htmlCtxtReadMemory_APIParam_4 is the base htmlCtxtReadMemory_APIParam_4 to use for the document', 'param be base param use']
['htmlCtxtReadMemory_APIParam_5 is the document htmlCtxtReadMemory_APIParam_5 , or NULL', 'param be param , null']
['htmlCtxtReadMemory_APIParam_6 is a combination of htmlParserOption', 'param be combination']
['htmlCtxtReadMemory_APIName returns the resulting document tree', 'api return result']
['Reset a parser context', 'reset parser context']
['htmlCtxtReset_APIParam_1 is an HTML parser context', 'param be parser context']
['Applies the htmlCtxtUseOptions_APIParam_2 to the parser context', 'apply param parser context']
['htmlCtxtUseOptions_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlCtxtUseOptions_APIParam_2 is a combination of htmlParserOption', 'param be combination']
['Checks whether an HTML element may be a direct child of a htmlElementAllowedHere_APIParam_1 element', 'check whether element may be direct param element']
['htmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented htmlCtxtUseOptions_APIParam_2 in case of error', 'api return constant case success , set unknown unimplemented param case error']
['Note - does not check for deprecated elements', 'note _ do not check deprecated element']
['htmlElementAllowedHere_APIParam_1 is HTML htmlElementAllowedHere_APIParam_1 element', 'param be param element']
['htmlElementAllowedHere_APIParam_2 is HTML element', 'param be element']
['htmlElementAllowedHere_APIName returns 1 if allowed', 'api return constant']
['0 otherwise', 'constant otherwise']
['Checks whether an HTML element may be a direct child of a htmlElementStatusHere_APIParam_1 element', 'check whether element may be direct param element']
['htmlElementStatusHere_APIParam_1 is HTML htmlElementStatusHere_APIParam_1 element', 'param be param element']
['htmlElementStatusHere_APIParam_2 is HTML element', 'param be element']
['htmlElementStatusHere_APIName returns one of HTML_VALID, HTML_DEPRECATED, HTML_INVALID', 'api return one constant']
['htmlEncodeEntities_APIParam_1 is a pointer to an array of bytes to store the result', 'param be pointer array byte store result']
['htmlEncodeEntities_APIParam_2 is the length of @out', 'param be length']
['htmlEncodeEntities_APIParam_3 is a pointer to an array of UTF-8 chars', 'param be pointer array param char']
['Take a block of UTF-8 chars htmlEncodeEntities_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars htmlEncodeEntities_APIParam_1', 'take block param char param convert ascii plus block char param']
['htmlEncodeEntities_APIParam_4 is the length of @in', 'param be length']
['htmlEncodeEntities_APIParam_5 is the quote character to escape or zero', 'param be character escape constant']
['The value of @outlen after return is the number of octets consumed', 'value after return be number octet consume']
['htmlEntityLookup_APIParam_1 is the entity htmlEntityLookup_APIParam_1', 'param be param']
['Lookup the given entity in EntitiesTable TODO', 'lookup give entitiestable']
['htmlEntityLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise', 'api return associate  , null otherwise']
['the linear scan is really ugly , an hash table is really needed', 'linear be really ugly , hash table be really need']
['htmlEntityValueLookup_APIParam_1 is the entity unicode htmlEntityValueLookup_APIParam_1', 'param be unicode param']
['Lookup the given entity in EntitiesTable TODO', 'lookup give entitiestable']
['htmlEntityValueLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise', 'api return associate  , null otherwise']
['the linear scan is really ugly , an hash table is really needed', 'linear be really ugly , hash table be really need']
['Free all the memory used by a parser context', 'free memory use by parser context']
['However the parsed document in ctxt - > myDoc is not freed', 'however parse _ be not free']
['htmlFreeParserCtxt_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlEncodeEntities_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable', 'api return constant']
['Set and return the previous value for handling HTML omitted tags', 'set return previous value omit']
['htmlHandleOmittedElem_APIParam_1 is int 0 or 1. htmlHandleOmittedElem_APIName returns the last value for 0 for no handling, 1 for auto insertion', 'param be int constant api return last value constant no handling , constant auto']
['The HTML DTD allows a tag to implicitly close other tags', 'allow implicitly close']
['The list is kept in htmlStartClose array', 'list be keep array']
['htmlIsAutoClosed_APIParam_1 is the HTML document', 'param be']
['htmlIsAutoClosed_APIName checks if a tag is autoclosed by one of a tag is child', 'api check if be by one be']
['htmlIsAutoClosed_APIParam_2 is the HTML element', 'param be element']
['htmlIsScriptAttribute_APIParam_1 is an attribute htmlIsScriptAttribute_APIParam_1', 'param be attribute param']
['htmlIsAutoClosed_APIName returns 1 if autoclosed, 0 otherwise', 'api return constant if , constant otherwise']
['htmlIsScriptAttribute_APIName returns 1 is the attribute is a script 0 otherwise', 'api return constant be attribute be script constant otherwise']
['Allocate and initialize a new parser context', 'initialize parser context']
['htmlNewParserCtxt_APIName returns the htmlParserCtxtPtr or NULL in case of allocation error', 'api return null case allocation error']
['Checks whether the tree htmlNodeStatus_APIParam_1 is valid', 'check whether param be valid']
['htmlNodeStatus_APIParam_1 is an htmlNodePtr in a tree', 'param be']
['htmlNodeStatus_APIName returns for Element nodes, a return from htmlElementAllowedHere  or htmlElementStatusHere', 'api return element , return api']
['htmlNodeStatus_APIParam_2 is whether to allow deprecated elements', 'param be whether allow deprecate element']
['htmlParseCharRef_APIParam_1 is an HTML parser context', 'param be parser context']
['for Attribute nodes, a return from htmlAttrAllowed for other nodes, HTML_NA (no checks performed', 'attribute , return api , constant check perform']
['Parse a Chunk of memory', 'parse memory']
['htmlParseCharRef_APIName returns the value parsed (as an int', 'api return value parse int']
['htmlParseChunk_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlParseChunk_APIParam_2 is an char array', 'param be char array']
['htmlParseChunk_APIParam_3 is the htmlParseChunk_APIParam_3 in byte of the htmlParseChunk_APIParam_2', 'param be param byte param']
['htmlParseChunk_APIParam_4 is last htmlParseChunk_APIParam_2 indicator', 'param be last param']
['htmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise', 'api return constant']
['parse an HTML in-memory document and build a tree', 'parse param build']
['htmlParseDoc_APIParam_1 is a pointer to an array of xmlChar', 'param be pointer array']
['htmlParseDoc_APIName returns the resulting document tree', 'api return result']
['htmlParseDoc_APIParam_2 is a free form C string describing the HTML document htmlParseDoc_APIParam_2 , or NULL', 'param be free form string describe param , null']
['htmlParseDocument_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlParseDocument_APIName returns 0, -1 in case of error', 'api return , constant case error']
['the parser context is augmented as a result of the parsing', 'parser context be augment as result parse']
['htmlParseElement_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlParseEntityRef_APIParam_1 is an HTML parser context', 'param be parser context']
['htmlParseEntityRef_APIParam_2 is location to store the entity name', 'param be location store name']
['parse an HTML file and build a tree', 'parse file build']
['htmlParseEntityRef_APIName returns the associated htmlEntityDescPtr if found, or NULL otherwise, if non-NULL *str will have to be freed by the caller', 'api return associate']
['parse an HTML element , this is highly recursive this is kept for compatibility with previous code versions element', 'parse element , be highly recursive be keep compatibility previous code version element']
['= EmptyElemTag | STag content ETag Attribute', 'content attribute']
['htmlParseFile_APIParam_1 is the htmlParseFile_APIParam_1', 'param be param']
['htmlParseFile_APIName returns the resulting document tree', 'api return result']
['htmlParseFile_APIParam_2 is a free form C string describing the HTML document htmlParseFile_APIParam_2 , or NULL', 'param be free form string describe param , null']
['parse an XML in-memory document and build a tree', 'parse param build']
['parse Reference declarations CharRef', 'parse reference declaration']
['parse an HTML ENTITY references EntityRef', 'parse reference']
['document is provided by default', 'be provide by default']
['htmlReadDoc_APIParam_1 is a pointer to a zero terminated string', 'param be pointer constant terminate string']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['htmlReadDoc_APIName returns the resulting document tree', 'api return result']
['htmlReadDoc_APIParam_3 is the document htmlReadDoc_APIParam_3 , or NULL', 'param be param , null']
['htmlReadDoc_APIParam_2 is the base htmlReadDoc_APIParam_2 to use for the document', 'param be base param use']
['htmlReadDoc_APIParam_4 is a combination of htmlParserOption', 'param be combination']
['parse an XML from a file descriptor and build a tree', 'parse file descriptor build']
['htmlReadFd_APIParam_1 is an open file descriptor', 'param be open file descriptor']
['htmlReadFd_APIParam_2 is the base htmlReadFd_APIParam_2 to use for the document', 'param be base param use']
['htmlReadFd_APIParam_3 is the document htmlReadFd_APIParam_3 , or NULL', 'param be param , null']
['htmlReadFd_APIParam_4 is a combination of htmlParserOption', 'param be combination']
['htmlReadFd_APIName returns the resulting document tree', 'api return result']
['parse an XML file from the filesystem or the network', 'parse file filesystem network']
['htmlReadFile_APIParam_1 is a file or URL', 'param be file']
['htmlReadFile_APIParam_2 is the document htmlReadFile_APIParam_2 , or NULL', 'param be param , null']
['htmlReadFile_APIParam_3 is a combination of htmlParserOption', 'param be combination']
['htmlReadFile_APIName returns the resulting document tree', 'api return result']
['parse an HTML document from I/O functions and source and build a tree', 'parse function source build']
['htmlReadIO_APIParam_1 is an I/O read function', 'param be read function']
['htmlReadIO_APIParam_2 is an I/O close function', 'param be close function']
['htmlReadIO_APIParam_3 is an I/O handler', 'param be handler']
['htmlReadIO_APIParam_4 is the base htmlReadIO_APIParam_4 to use for the document', 'param be base param use']
['htmlReadIO_APIParam_5 is the document htmlReadIO_APIParam_5 , or NULL', 'param be param , null']
['htmlReadIO_APIParam_6 is a combination of htmlParserOption', 'param be combination']
['htmlReadIO_APIName returns the resulting document tree', 'api return result']
['parse an XML in-memory document and build a tree', 'parse param build']
['htmlReadMemory_APIParam_2 is the htmlReadMemory_APIParam_2 of the array', 'param be param array']
['htmlReadMemory_APIParam_1 is a pointer to a char array', 'param be pointer char array']
['htmlReadMemory_APIParam_3 is the base htmlReadMemory_APIParam_3 to use for the document', 'param be base param use']
['htmlReadMemory_APIParam_4 is the document htmlReadMemory_APIParam_4 , or NULL', 'param be param , null']
['htmlReadMemory_APIParam_5 is a combination of htmlParserOption', 'param be combination']
['htmlReadMemory_APIName returns the resulting document tree', 'api return result']
['Parse an HTML in-memory document', 'parse param']
['If htmlSAXParseDoc_APIParam_3 is NULL, fallback to the default DOM behavior and return a tree', 'if param be null , default behavior return']
['htmlSAXParseDoc_APIParam_1 is a pointer to an array of xmlChar', 'param be pointer array']
['htmlSAXParseDoc_APIParam_2 is a free form C string describing the HTML document htmlSAXParseDoc_APIParam_2 , or NULL', 'param be free form string describe param , null']
['htmlSAXParseDoc_APIParam_3 is the SAX handler block', 'param be handler block']
['use the SAX callbacks to handle parse events', 'use callback parse event']
['parse an HTML file and build a tree', 'parse file build']
['htmlSAXParseDoc_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed', 'api return result unless be null be not well form']
['It use the given SAX function block to handle the parsing callback', 'use give function block parse callback']
['htmlSAXParseDoc_APIParam_4 is', 'param be']
['htmlSAXParseFile_APIParam_1 is the htmlSAXParseFile_APIParam_1', 'param be param']
['htmlSAXParseFile_APIParam_3 is the SAX handler block', 'param be handler block']
['htmlSAXParseFile_APIParam_2 is a free form C string describing the HTML document htmlSAXParseFile_APIParam_2 , or NULL', 'param be free form string describe param , null']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['is NULL , fallback to the default DOM tree building routines', 'be null , default api']
['htmlSAXParseFile_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed', 'api return result unless be null be not well form']
['Lookup the HTML htmlTagLookup_APIParam_1 in the ElementTable', 'lookup param elementtable']
['htmlTagLookup_APIParam_1 is The htmlTagLookup_APIParam_1 name in lowercase', 'param be param name']
['htmlTagLookup_APIName returns the related htmlElemDescPtr or NULL if not found', 'api return relate null if not find']
['htmlSAXParseFile_APIParam_4 is', 'param be']
['See xmlLinkGetData returns', 'see api return']
['xmlLinkGetData_APIParam_1 is a link', 'param be link']
['xmlLinkGetData_APIName returns a pointer to the data referenced from this link', 'api return pointer datum reference link']
['Insert xmlListAppend_APIParam_2 in the ordered list at the end for this value', 'insert param order list end value']
['xmlListAppend_APIParam_1 is a list', 'param be list']
['xmlListAppend_APIParam_2 is the xmlListAppend_APIParam_2', 'param be param']
['Remove the all data in the list', 'remove datum list']
['xmlListAppend_APIName returns 0 in case of success, 1 in case of failure', 'api return constant case success , constant case failure']
['xmlListClear_APIParam_1 is a list', 'param be list']
['Move all the element from the xmlListCopy_APIParam_2 list in the new list', 'element param list list']
['xmlListCopy_APIParam_1 is the new list', 'param be list']
['xmlListCopy_APIParam_2 is the xmlListCopy_APIParam_2 list', 'param be param list']
['Create a new list', 'create list']
['xmlListCopy_APIName returns 0 in case of success 1 in case of error', 'api return constant case success constant case error']
['xmlListCreate_APIParam_1 is an optional xmlListCreate_APIParam_1 function', 'param be optional param function']
['xmlListCreate_APIParam_2 is an optional comparison function', 'param be optional comparison function']
['xmlListCreate_APIName returns the new list or NULL in case of error', 'api return list null case error']
['Callback function used to compare 2 data', 'callback function use compare constant datum']
['xmlListDataCompare_APIParam_1 is the first data', 'param be first datum']
['xmlListDataCompare_APIParam_2 is the second data', 'param be second datum']
['xmlListDataCompare_APIName returns 0 is equality, -1 or 1 otherwise depending on the ordering', 'api return constant be equality , constant otherwise depend ordering']
['Callback function used to free data from a list', 'callback function use free data list']
['Deletes the list and its associated data', 'delete list associate datum']
['xmlListDeallocator_APIParam_1 is the data to deallocate', 'param be datum deallocate']
['xmlListDelete_APIParam_1 is a list', 'param be list']
['Duplicate the list', 'duplicate list']
['xmlListDup_APIParam_1 is the list', 'param be list']
['xmlListDup_APIName returns a new copy of the list or NULL in case of error', 'api return copy list null case error']
['Is the list empty ?', 'be list empty']
['xmlListEmpty_APIParam_1 is a list', 'param be list']
['Get the last element in the list', 'get last element list']
['xmlListEnd_APIParam_1 is a list', 'param be list']
['xmlListEnd_APIName returns the last element in the list, or NULL', 'api return last element list , null']
['xmlListEmpty_APIName returns 1 if the list is empty, 0 if not empty and -1 in case of error', 'api return constant']
['Get the first element in the list', 'get first element list']
['xmlListFront_APIParam_1 is a list', 'param be list']
['xmlListFront_APIName returns the first element in the list, or NULL', 'api return first element list , null']
['Insert xmlListInsert_APIParam_2 in the ordered list at the beginning for this value', 'insert param order list beginning value']
['xmlListInsert_APIParam_1 is a list', 'param be list']
['xmlListInsert_APIParam_2 is the xmlListInsert_APIParam_2', 'param be param']
['xmlListInsert_APIName returns 0 in case of success, 1 in case of failure', 'api return constant case success , constant case failure']
['xmlListMerge_APIParam_1 is the original list', 'param be original list']
['xmlListMerge_APIParam_2 is the new list', 'param be list']
['include all the elements of the second list in the first one and clear the second list', 'include element second list first one clear second list']
['Removes the last element in the list', 'remove last element list']
['xmlListPopBack_APIParam_1 is a list', 'param be list']
['Removes the first element in the list', 'remove first element list']
['xmlListPopFront_APIParam_1 is a list', 'param be list']
['add the new xmlListPushBack_APIParam_2 at the end of the list', 'param end list']
['xmlListPushBack_APIParam_1 is a list', 'param be list']
['xmlListPushBack_APIParam_2 is new xmlListPushBack_APIParam_2', 'param be param']
['xmlListPushBack_APIName returns 1 if successful, 0 otherwise', 'api return constant if successful , constant otherwise']
['add the new xmlListPushFront_APIParam_2 at the beginning of the list', 'param beginning list']
['xmlListPushFront_APIParam_1 is a list', 'param be list']
['xmlListPushFront_APIParam_2 is new xmlListPushFront_APIParam_2', 'param be param']
['xmlListPushFront_APIName returns 1 if successful, 0 otherwise', 'api return constant if successful , constant otherwise']
['Remove the all instance associated to xmlListRemoveAll_APIParam_2 in the list', 'remove instance associate param list']
['xmlListRemoveAll_APIParam_1 is a list', 'param be list']
['xmlListRemoveAll_APIParam_2 is list xmlListRemoveAll_APIParam_2', 'param be list param']
['xmlListRemoveAll_APIName returns the number of deallocation, or 0 if not found', 'api return number , constant']
['Remove the first instance associated to xmlListRemoveFirst_APIParam_2 in the list', 'remove first instance associate param list']
['xmlListRemoveFirst_APIParam_1 is a list', 'param be list']
['xmlListRemoveFirst_APIParam_2 is list xmlListRemoveFirst_APIParam_2', 'param be list param']
['Remove the last instance associated to xmlListRemoveLast_APIParam_2 in the list', 'remove last instance associate param list']
['xmlListRemoveFirst_APIName returns 1 if a deallocation occurred, or 0 if not found', 'api return constant']
['xmlListRemoveLast_APIParam_1 is a list', 'param be list']
['xmlListRemoveLast_APIParam_2 is list xmlListRemoveLast_APIParam_2', 'param be list param']
['Reverse the order of the elements in the list', 'reverse order element list']
['xmlListRemoveLast_APIName returns 1 if a deallocation occurred, or 0 if not found', 'api return constant']
['xmlListReverse_APIParam_1 is a list', 'param be list']
['Search the list in reverse order for an existing value of @data', 'search list reverse order value datum']
['xmlListReverseSearch_APIParam_1 is a list', 'param be list']
['xmlListReverseSearch_APIParam_2 is a search value', 'param be search value']
['xmlListReverseSearch_APIName returns the value associated to @data or NULL in case of error', 'api return value associate datum null case error']
['xmlListReverseWalk_APIParam_1 is a list', 'param be list']
['xmlListReverseWalk_APIParam_2 is a processing function', 'param be process function']
['Walk all the element of the list in reverse order and apply the xmlListReverseWalk_APIParam_2 function to it', 'walk element list reverse order apply param function']
['xmlListReverseWalk_APIParam_3 is a xmlListReverseWalk_APIParam_3 parameter passed to the xmlListReverseWalk_APIParam_2 function', 'param be param pass param function']
['Search the list for an existing value of @data', 'search list value datum']
['xmlListSearch_APIParam_1 is a list', 'param be list']
['xmlListSearch_APIParam_2 is a search value', 'param be search value']
['xmlListSearch_APIName returns the value associated to @data or NULL in case of error', 'api return value associate datum null case error']
['Get the number of elements in the list', 'get number element list']
['xmlListSize_APIParam_1 is a list', 'param be list']
['Sort all the elements in the list', 'sort element list']
['xmlListSize_APIName returns the number of elements in the list or -1 in case of error', 'api return number element list constant case error']
['xmlListSort_APIParam_1 is a list', 'param be list']
['xmlListWalk_APIParam_1 is a list', 'param be list']
['xmlListWalk_APIParam_2 is a processing function', 'param be process function']
['xmlListWalk_APIParam_3 is a xmlListWalk_APIParam_3 parameter passed to the xmlListWalk_APIParam_2 function', 'param be param pass param function']
['Walk all the element of the first from first to last and apply the xmlListWalk_APIParam_2 function to the xmlListWalk_APIParam_2 function', 'walk element first first last apply param function param function']
['xmlListWalker_APIParam_1 is the xmlListWalker_APIParam_1 found in the list', 'param be param find list']
['xmlListWalker_APIParam_2 is extra xmlListWalker_APIParam_2 provided xmlListWalker_APIParam_1 to the walker', 'param be extra param provide param']
['xmlListWalker_APIName returns 0 to stop walking the list, 1 otherwise', 'api return constant stop walk list , constant otherwise']
['Callback function used', 'callback function use']
['Create a buffered parser output', 'create buffer parser output']
['xmlAllocOutputBuffer_APIParam_1 is the encoding converter or NULL', 'param be encode null']
['xmlAllocOutputBuffer_APIName returns the new parser output or NULL', 'api return parser output null']
['Create a buffered parser input for progressive parsing', 'create buffer parser input progressive parsing']
['xmlCheckFilename_APIParam_1 is the xmlCheckFilename_APIParam_1 to check', 'param be param check']
['xmlAllocParserInputBuffer_APIName returns the new parser input or NULL', 'api return parser input null']
['xmlCheckFilename_APIName returns 1. if stat fails, returns 0', 'api return constant  , return constant']
['xmlAllocParserInputBuffer_APIParam_1 is the charset encoding', 'param be encoding']
['if stat succeeds and the file is a directory, returns 2. otherwise returns 1', 'if succeed file be directory , return constant otherwise return constant']
['xmlCheckHTTPInput_APIParam_1 is an XML parser context', 'param be parser context']
['function checks to see', 'function check see']
['xmlCheckHTTPInput_APIParam_2 is an XML parser input', 'param be parser input']
['xmlCheckHTTPInput_APIName returns the input or NULL in case of HTTP error', 'api return input null case error']
['clears the entire input callback table', 'clear entire input callback table']
['It also checks for HTTP errors in which case the input is cleanly freed up and an appropriate error is raised in context', 'check error which case input be cleanly free appropriate error be raise context']
['this includes the compiled-in I/O', 'include param']
['clears the entire output callback table', 'clear entire output callback table']
['this includes the compiled-in I/O callbacks', 'include param callback']
['Check an input in case it was created from an HTTP stream , in that case it will handle encoding and update of the base URL in case of redirection', 'check input case be create stream , case encode update base case']
['xmlFileClose_APIParam_1 is the I/O xmlFileClose_APIParam_1', 'param be param']
['xmlFileClose_APIName returns 0 or -1 in case of error', 'api return constant case error']
['input from FILE *', 'input file']
['xmlFileMatch_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlFileMatch_APIName returns 1 if matches, 0 otherwise', 'api return constant otherwise']
['xmlFileOpen_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlFileOpen_APIName returns a handler or NULL in case or failure', 'api return handler null case failure']
['Read @len bytes to @buffer from the I/O channel', 'read byte buffer']
['xmlFileRead_APIParam_1 is the I/O xmlFileRead_APIParam_1', 'param be param']
['xmlFileRead_APIParam_2 is where to drop data', 'param be datum']
['xmlFileRead_APIParam_3 is number of bytes to write', 'param be number byte write']
['xmlFileRead_APIName returns the number of bytes written or < 0 in case of failure', 'api return number byte write constant case failure']
['try xmlFileOpen_real with an unescaped version of @filename', 'param unescaped version filename']
['Wrapper around xmlFileOpen_real that', 'wrapper around param']
['Free up the memory used by a buffered parser input', 'free memory use by buffer parser input']
['xmlFreeParserInputBuffer_APIParam_1 is a buffered parser input', 'param be buffer parser input']
['xmlIOFTPClose_APIParam_1 is the I/O xmlIOFTPClose_APIParam_1', 'param be param']
['xmlIOFTPClose_APIName returns 0', 'api return constant']
['check if the URI matches an FTP one', 'check if uri match one']
['xmlIOFTPMatch_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlIOFTPMatch_APIName returns 1 if matches, 0 otherwise', 'api return constant otherwise']
['xmlIOFTPOpen_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlIOFTPOpen_APIName returns an I/O context or NULL in case of error', 'api return context null case error']
['Read @len bytes to @buffer from the I/O channel', 'read byte buffer']
['xmlIOFTPRead_APIParam_1 is the I/O xmlIOFTPRead_APIParam_1', 'param be param']
['xmlIOFTPRead_APIParam_2 is where to drop data', 'param be datum']
['xmlIOFTPRead_APIParam_3 is number of bytes to write', 'param be number byte write']
['xmlIOFTPRead_APIName returns the number of bytes written', 'api return number byte write']
['xmlIOHTTPClose_APIParam_1 is the I/O xmlIOHTTPClose_APIParam_1', 'param be param']
['xmlIOHTTPClose_APIName returns 0', 'api return constant']
['check if the URI matches an HTTP one', 'check if uri match one']
['xmlIOHTTPMatch_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlIOHTTPMatch_APIName returns 1 if matches, 0 otherwise', 'api return constant otherwise']
['xmlIOHTTPOpen_APIParam_1 is the URI for matching', 'param be uri matching']
['xmlIOHTTPOpen_APIName returns an I/O context or NULL in case of error', 'api return context null case error']
['Open a temporary buffer to collect the document for a subsequent HTTP POST request', 'open temporary buffer collect subsequent request']
['Non-static as is called from the output buffer creation routine', 'param as be call output buffer creation api']
['xmlIOHTTPOpenW_APIParam_1 is The destination URI for the document', 'param be destination uri']
['xmlIOHTTPOpenW_APIParam_2 is The xmlIOHTTPOpenW_APIParam_2 desired for the document', 'param be param desire']
['Read @len bytes to @buffer from the I/O channel', 'read byte buffer']
['xmlIOHTTPOpenW_APIName returns an I/O context or NULL in case of error', 'api return context null case error']
['xmlIOHTTPRead_APIParam_1 is the I/O xmlIOHTTPRead_APIParam_1', 'param be param']
['xmlIOHTTPRead_APIParam_2 is where to drop data', 'param be datum']
['xmlIOHTTPRead_APIName returns the number of bytes written', 'api return number byte write']
['xmlIOHTTPRead_APIParam_3 is number of bytes to write', 'param be number byte write']
['Callback used in the I/O Input API to close the resource', 'callback use input api close resource']
['xmlInputCloseCallback_APIParam_1 is an Input xmlInputCloseCallback_APIParam_1', 'param be input param']
['xmlInputCloseCallback_APIName returns 0 or -1 in case of error', 'api return constant case error']
['xmlInputMatchCallback_APIParam_1 is the xmlInputMatchCallback_APIParam_1 or URI', 'param be param uri']
['xmlInputMatchCallback_APIName returns 1 if yes and 0 if another Input module should be used', 'api return constant']
['Callback used in the I/O Input API to open the resource', 'callback use input api open resource']
['xmlInputOpenCallback_APIParam_1 is the xmlInputOpenCallback_APIParam_1 or URI', 'param be param uri']
['xmlInputOpenCallback_APIName returns an Input context or NULL in case or error', 'api return input context null case error']
['Callback used in the I/O Input API to detect', 'callback use input api detect']
['Callback used in the I/O Input API to read the resource', 'callback use input api read resource']
['xmlInputReadCallback_APIParam_1 is an Input xmlInputReadCallback_APIParam_1', 'param be input param']
['xmlInputReadCallback_APIParam_2 is the xmlInputReadCallback_APIParam_2 to store data read', 'param be param store datum read']
['xmlInputReadCallback_APIParam_3 is the length of the xmlInputReadCallback_APIParam_2 in bytes', 'param be length param byte']
['xmlInputReadCallback_APIName returns the number of bytes read or -1 in case of error', 'api return number byte read constant case error']
['xmlNoNetExternalEntityLoader_APIParam_1 is the xmlNoNetExternalEntityLoader_APIParam_1 for the entity to load', 'param be param load']
['A specific entity loader disabling network accesses , though still allowing local catalog accesses for resolution', 'specific disable network access , though still allow local access resolution']
['xmlNoNetExternalEntityLoader_APIParam_2 is the System xmlNoNetExternalEntityLoader_APIParam_2 for the entity to load', 'param be system param load']
['xmlNoNetExternalEntityLoader_APIName returns a new allocated xmlParserInputPtr, or NULL', 'api return , null']
['xmlNoNetExternalEntityLoader_APIParam_3 is the context in which the entity is called or NULL', 'param be context which be call null']
['xmlNormalizeWindowsPath_APIName is obsolete', 'api be obsolete']
['Please see xmlURIFromPath in uri.c for a better solution', 'please see uri well']
['xmlNormalizeWindowsPath_APIParam_1 is the input file xmlNormalizeWindowsPath_APIParam_1', 'param be input file param']
['xmlNormalizeWindowsPath_APIName returns a canonicalized version of the path', 'api return canonicalize version path']
['flushes and close the output I/O channel and free up all the associated resources', 'close output free associated resource']
['xmlOutputBufferClose_APIParam_1 is a buffered output', 'param be buffer output']
['xmlOutputBufferClose_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['Create a buffered output for the progressive saving to a xmlBuffer', 'create buffer output progressive saving']
['xmlOutputBufferCreateBuffer_APIParam_1 is a xmlBufferPtr', 'param be']
['xmlOutputBufferCreateBuffer_APIParam_2 is the encoding converter or NULL', 'param be encode null']
['xmlOutputBufferCreateBuffer_APIName returns the new parser output or NULL', 'api return parser output null']
['Create a buffered output for the progressive saving to a file descriptor', 'create buffer output progressive saving file descriptor']
['xmlOutputBufferCreateFd_APIParam_1 is a file descriptor number', 'param be file descriptor number']
['xmlOutputBufferCreateFd_APIParam_2 is the encoding converter or NULL', 'param be encode null']
['xmlOutputBufferCreateFd_APIName returns the new parser output or NULL', 'api return parser output null']
['xmlOutputBufferCreateFile_APIParam_1 is a FILE *', 'param be file']
['Create a buffered output for the progressive saving to a FILE * buffered C I/O', 'create buffer output progressive saving file buffer']
['xmlOutputBufferCreateFile_APIParam_2 is the encoding converter or NULL', 'param be encode null']
['xmlOutputBufferCreateFile_APIName returns the new parser output or NULL', 'api return parser output null']
['xmlOutputBufferCreateFilename_APIParam_1 is a C string containing the xmlOutputBufferCreateFilename_APIParam_1 or filename', 'param be string contain param filename']
['xmlOutputBufferCreateFilename_APIParam_2 is the encoding converter or NULL', 'param be encode null']
['xmlOutputBufferCreateFilename_APIParam_3 is the xmlOutputBufferCreateFilename_APIParam_3 ration', 'param be param']
['xmlOutputBufferCreateFilename_APIName returns the new output or NULL', 'api return output null']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['the library only support writing to a local file', 'library only support write local file']
["Create a buffered output for the progressive saving of a file '' - '", 'create buffer output progressive saving file']
['we use stdout as the output', 'use stdout as output']
['Create a buffered output for the progressive saving to an I/O handler', 'create buffer output progressive saving handler']
['xmlOutputBufferCreateIO_APIParam_1 is an I/O write function', 'param be write function']
['xmlOutputBufferCreateIO_APIParam_2 is an I/O close function', 'param be close function']
['xmlOutputBufferCreateIO_APIParam_3 is an I/O handler', 'param be handler']
['xmlOutputBufferCreateIO_APIName returns the new parser output or NULL', 'api return parser output null']
['xmlOutputBufferFlush_APIParam_1 is a buffered output', 'param be buffer output']
['xmlOutputBufferFlush_APIName returns the number of byte written or -1 in case of error', 'api return number byte write constant case error']
['xmlOutputBufferCreateIO_APIParam_4 is the charset encoding', 'param be encoding']
['Gives a pointer to the data currently held in the output buffer', 'give pointer datum currently hold output buffer']
['xmlOutputBufferGetContent_APIParam_1 is an xmlOutputBufferPtr', 'param be']
['xmlOutputBufferGetContent_APIName returns a pointer to the data or NULL in case of error', 'api return pointer datum null case error']
['Gives the length of the data currently held in the output buffer', 'give length datum currently hold output buffer']
['xmlOutputBufferGetSize_APIParam_1 is an xmlOutputBufferPtr', 'param be']
['xmlOutputBufferGetSize_APIName returns 0 in case or error or no data is held, the size otherwise', 'api return constant case error no data be hold , size otherwise']
['will store in case of partial or delayed writes', 'store case partial delay write']
['xmlOutputBufferWrite_APIParam_1 is a buffered parser output', 'param be buffer parser output']
['xmlOutputBufferWrite_APIParam_2 is the size in bytes of the array', 'param be size byte array']
['xmlOutputBufferWrite_APIParam_3 is an char array', 'param be char array']
['xmlOutputBufferWrite_APIName returns the number of chars immediately written, or -1 in case of error', 'api return number char immediately write , constant case error']
['will store in case of partial or delayed writes', 'store case partial delay write']
['Write the content of the array in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e', 'write content array output buffer api internal param buffer be lossless']
['xmlOutputBufferWriteEscape_APIParam_1 is a buffered parser output', 'param be buffer parser output']
['xmlOutputBufferWriteEscape_APIParam_2 is a zero terminated UTF-8 string', 'param be constant terminate param string']
['xmlOutputBufferWriteEscape_APIParam_3 is an optional xmlOutputBufferWriteEscape_APIParam_3 function', 'param be optional param function']
['xmlOutputBufferWriteEscape_APIName returns the number of chars immediately written, or -1 in case of error', 'api return number char immediately write , constant case error']
['will store in case of partial or delayed writes', 'store case partial delay write']
['xmlOutputBufferWriteString_APIParam_1 is a buffered parser output', 'param be buffer parser output']
['xmlOutputBufferWriteString_APIParam_2 is a zero terminated C string', 'param be constant terminate string']
['Write the content of the string in the output I/O buffer This routine escapes the caracters and handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e', 'write content string output buffer api escape internal param buffer be lossless']
['xmlOutputBufferWriteString_APIName returns the number of chars immediately written, or -1 in case of error', 'api return number char immediately write , constant case error']
['Callback used in the I/O Output API to close the resource', 'callback use output api close resource']
['xmlOutputCloseCallback_APIParam_1 is an Output xmlOutputCloseCallback_APIParam_1', 'param be output param']
['Write the content of the string in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e', 'write content string output buffer api internal param buffer be lossless']
['xmlOutputCloseCallback_APIName returns 0 or -1 in case of error', 'api return constant case error']
['xmlOutputMatchCallback_APIParam_1 is the xmlOutputMatchCallback_APIParam_1 or URI', 'param be param uri']
['xmlOutputMatchCallback_APIName returns 1 if yes and 0 if another Output module should be used', 'api return constant']
['Callback used in the I/O Output API to open the resource', 'callback use output api open resource']
['xmlOutputOpenCallback_APIParam_1 is the xmlOutputOpenCallback_APIParam_1 or URI', 'param be param uri']
['xmlOutputOpenCallback_APIName returns an Output context or NULL in case or error', 'api return output context null case error']
['Callback used in the I/O Output API to write to the resource', 'callback use output api write resource']
['Callback used in the I/O Output API to detect', 'callback use output api detect']
['xmlOutputWriteCallback_APIParam_1 is an Output xmlOutputWriteCallback_APIParam_1', 'param be output param']
['xmlOutputWriteCallback_APIParam_2 is the xmlOutputWriteCallback_APIParam_2 of data to write', 'param be param datum write']
['xmlOutputWriteCallback_APIParam_3 is the length of the xmlOutputWriteCallback_APIParam_2 in bytes', 'param be length param byte']
['xmlOutputWriteCallback_APIName returns the number of bytes written or -1 in case of error', 'api return number byte write constant case error']
['lookup the directory for that file', 'lookup directory file']
['xmlParserGetDirectory_APIParam_1 is the path to a file', 'param be path file']
['xmlParserGetDirectory_APIName returns a new allocated string containing the directory, or NULL', 'api return string contain directory , null']
['xmlParserInputBufferCreateFd_APIParam_1 is a file descriptor number', 'param be file descriptor number']
['xmlParserInputBufferCreateFd_APIName returns the new parser input or NULL', 'api return parser input null']
['Create a buffered parser input for the progressive parsing for the input from a file descriptor', 'create buffer parser input progressive parse input file descriptor']
['xmlParserInputBufferCreateFile_APIParam_1 is a FILE *', 'param be file']
['Create a buffered parser input for the progressive parsing of a FILE * buffered C I/O', 'create buffer parser input progressive parsing file buffer']
['xmlParserInputBufferCreateFd_APIParam_2 is the charset encoding', 'param be encoding']
['xmlParserInputBufferCreateFile_APIName returns the new parser input or NULL', 'api return parser input null']
['Do an encoding check if xmlParserInputBufferCreateFilename_APIParam_2 == XML_CHAR_ENCODING_NONE', 'encode check  constant']
['xmlParserInputBufferCreateFile_APIParam_2 is the charset encoding', 'param be encoding']
['xmlParserInputBufferCreateFilename_APIParam_1 is a C string containing the xmlParserInputBufferCreateFilename_APIParam_1 or filename', 'param be string contain param filename']
['xmlParserInputBufferCreateFilename_APIName returns the new parser input or NULL', 'api return parser input null']
['document is provided by default', 'be provide by default']
['Automatic support for ZLIB/Compress compressed', 'automatic support compress']
['xmlParserInputBufferCreateIO_APIParam_1 is an I/O read function', 'param be read function']
['xmlParserInputBufferCreateIO_APIParam_2 is an I/O close function', 'param be close function']
['Create a buffered parser input for the progressive parsing for the input from an I/O handler', 'create buffer parser input progressive parse input handler']
["Create a buffered parser input for the progressive parsing of a file '' - '", 'create buffer parser input progressive parsing file']
['we use stdin as the input', 'use stdin as input']
['xmlParserInputBufferCreateIO_APIName returns the new parser input or NULL', 'api return parser input null']
['xmlParserInputBufferCreateMem_APIParam_1 is the memory input', 'param be memory input']
['xmlParserInputBufferCreateIO_APIParam_3 is an I/O handler', 'param be handler']
['xmlParserInputBufferCreateMem_APIParam_2 is the length of the memory block', 'param be length memory block']
['xmlParserInputBufferCreateFilename_APIParam_2 is the charset encoding', 'param be encoding']
['xmlParserInputBufferCreateMem_APIName returns the new parser input or NULL', 'api return parser input null']
['Create a buffered parser input for the progressive parsing for the input from an immutable memory area', 'create buffer parser input progressive parse input immutable memory']
['xmlParserInputBufferCreateIO_APIParam_4 is the charset encoding', 'param be encoding']
['xmlParserInputBufferCreateMem_APIParam_3 is the charset encoding', 'param be encoding']
['xmlParserInputBufferCreateStatic_APIParam_1 is the memory input', 'param be memory input']
['xmlParserInputBufferCreateStatic_APIParam_2 is the length of the memory block', 'param be length memory block']
['xmlParserInputBufferCreateStatic_APIName returns the new parser input or NULL', 'api return parser input null']
['Create a buffered parser input for the progressive parsing for the input from a memory area', 'create buffer parser input progressive parse input memory']
['xmlParserInputBufferGrow_APIParam_1 is a buffered parser input', 'param be buffer parser input']
['xmlParserInputBufferGrow_APIParam_2 is indicative value of the amount of chars to read', 'param be indicative value amount char read']
['xmlParserInputBufferPush_APIParam_1 is a buffered parser input', 'param be buffer parser input']
['xmlParserInputBufferPush_APIParam_2 is the size xmlParserInputBufferPush_APIParam_1 bytes of the array', 'param be size param byte array']
['xmlParserInputBufferGrow_APIName returns the number of chars read and stored xmlParserInputBufferGrow_APIParam_1 the buffer, or -1 xmlParserInputBufferGrow_APIParam_1 case of error', 'api return number char read stored param buffer , constant param case error']
['xmlParserInputBufferPush_APIParam_3 is an char array', 'param be char array']
['xmlParserInputBufferCreateStatic_APIParam_3 is the charset encoding', 'param be encoding']
['xmlParserInputBufferRead_APIParam_1 is a buffered parser input', 'param be buffer parser input']
['xmlParserInputBufferPush_APIName returns the number of chars read and stored xmlParserInputBufferPush_APIParam_1 the buffer, or -1 xmlParserInputBufferPush_APIParam_1 case of error', 'api return number char read stored param buffer , constant param case error']
['xmlParserInputBufferRead_APIParam_2 is indicative value of the amount of chars to read', 'param be indicative value amount char read']
['Clear the top input callback from the input stack', 'clear input callback input stack']
['This will not copy the memory area to the buffer , but the memory is expected to be available until the end of the parsing , this is useful', 'not copy memory buffer , but memory be expect be available until end parsing , be useful']
['xmlParserInputBufferRead_APIName returns the number of chars read and stored xmlParserInputBufferRead_APIParam_1 the buffer, or -1 xmlParserInputBufferRead_APIParam_1 case of error', 'api return number char read stored param buffer , constant param case error']
['Refresh the content of the input buffer , the old data are considered consumed This routine handle the I18N transcoding to internal UTF-8', 'refresh content input buffer , old datum be consider consume api internal param']
['this includes the compiled-in I/O', 'include param']
['xmlPopInputCallbacks_APIName returns the number of input callback registered or -1 in case of error', 'api return number input callback register constant case error']
['Push the content of the arry xmlParserInputBufferPush_APIParam_1 the input buffer This routine handle the I18N transcoding to internal UTF-8 This is used', 'content arry param input buffer api internal param be use']
['Registers the default compiled-in I/O handlers', 'register default param handler']
['Registers the default compiled-in I/O handlers', 'register default param handler']
["By default , libxml submits HTTP output requests using the `` PUT '' method", 'by default , submit output request use put api']
["Calling this method changes the HTTP output method to use the `` POST '' method instead", 'call api change output api use api instead']
['Register a new set of I/O callback for handling parser input', 'register set callback parser input']
['xmlRegisterInputCallbacks_APIParam_1 is the xmlInputMatchCallback', 'param be api']
['xmlRegisterInputCallbacks_APIParam_2 is the xmlInputOpenCallback', 'param be api']
['xmlRegisterInputCallbacks_APIParam_3 is the xmlInputReadCallback', 'param be api']
['xmlRegisterInputCallbacks_APIParam_4 is the xmlInputCloseCallback', 'param be api']
['xmlRegisterInputCallbacks_APIName returns the registered handler number or -1 in case of error', 'api return register handler number constant case error']
['Register a new set of I/O callback for handling output', 'register set callback handling output']
['xmlRegisterOutputCallbacks_APIParam_1 is the xmlOutputMatchCallback', 'param be api']
['xmlRegisterOutputCallbacks_APIParam_2 is the xmlOutputOpenCallback', 'param be api']
['xmlRegisterOutputCallbacks_APIParam_3 is the xmlOutputWriteCallback', 'param be api']
['xmlRegisterOutputCallbacks_APIParam_4 is the xmlOutputCloseCallback', 'param be api']
['xmlRegisterOutputCallbacks_APIName returns the registered handler number or -1 in case of error', 'api return register handler number constant case error']
['Add an entry in the catalog , it may overwrite existing but different entries', 'entry , may overwrite but different entry']
['This routine is used', 'api be use']
['Grow up the content of the input buffer , the old data are preserved This routine handle the I18N transcoding to internal UTF-8', 'grow content input buffer , old datum be preserve api internal param']
['xmlACatalogAdd_APIParam_1 is a Catalog', 'param be']
['xmlACatalogAdd_APIParam_2 is the xmlACatalogAdd_APIParam_2 of record to add to the catalog', 'param be param record']
['xmlACatalogAdd_APIParam_3 is the system , public or prefix to match', 'param be system , prefix match']
['one should be able to remove one extra copy by copying directly onto in - > buffer or in - > raw', 'one should be able remove one extra copy by copy directly onto _ buffer _ raw']
['xmlACatalogAdd_APIParam_4 is the replacement value for the match', 'param be value match']
['xmlACatalogAdd_APIName returns 0 if successful, -1 otherwise', 'api return constant if successful , constant otherwise']
['Dump the given catalog to the given file', 'give give file']
['xmlACatalogDump_APIParam_1 is a Catalog', 'param be']
['xmlACatalogDump_APIParam_2 is the file', 'param be file']
['Remove an entry from the catalog', 'remove entry']
['xmlACatalogRemove_APIParam_1 is a Catalog', 'param be']
['xmlACatalogRemove_APIParam_2 is the xmlACatalogRemove_APIParam_2 to remove', 'param be param remove']
['xmlACatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise', 'api return number entry remove if successful , constant otherwise']
['Do a complete resolution lookup of an External Identifier', 'complete resolution lookup external identifier']
['xmlACatalogResolve_APIParam_1 is a Catalog', 'param be']
['xmlACatalogResolve_APIParam_2 is the public ID string', 'param be -PRON- would string']
['xmlACatalogResolve_APIParam_3 is the system ID string', 'param be system -PRON- would string']
['xmlACatalogResolvePublic_APIParam_1 is a Catalog', 'param be']
['xmlACatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller', 'api return uri resource null  , must be free by caller']
['Try to lookup the catalog local reference associated to a public ID in that catalog', 'lookup local reference associate -PRON- would']
['xmlACatalogResolvePublic_APIParam_2 is the public ID string', 'param be -PRON- would string']
['xmlACatalogResolvePublic_APIName returns the local resource if found or NULL otherwise, the value returned must be freed by the caller', 'api return local resource if find null otherwise , value return must be free by caller']
['Try to lookup the catalog resource for a system ID', 'lookup resource system -PRON- would']
['xmlACatalogResolveSystem_APIParam_1 is a Catalog', 'param be']
['xmlACatalogResolveSystem_APIParam_2 is the system ID string', 'param be system -PRON- would string']
['Do a complete resolution lookup of an xmlACatalogResolveURI_APIParam_2', 'complete resolution lookup param']
['xmlACatalogResolveURI_APIParam_1 is a Catalog', 'param be']
['xmlACatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller', 'api return resource  , value return must be free by caller']
['xmlACatalogResolveURI_APIParam_2 is the xmlACatalogResolveURI_APIParam_2', 'param be param']
['Add an entry in the catalog , it may overwrite existing but different entries', 'entry , may overwrite but different entry']
['xmlACatalogResolveURI_APIName returns the xmlACatalogResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller', 'api return param resource null  , must be free by caller']
['xmlCatalogAdd_APIParam_1 is the xmlCatalogAdd_APIParam_1 of record to add to the catalog', 'param be param record']
['xmlCatalogAdd_APIParam_2 is the system , public or prefix to match', 'param be system , prefix match']
['xmlCatalogAdd_APIParam_3 is the replacement value for the match', 'param be value match']
['xmlCatalogAdd_APIName returns 0 if successful, -1 otherwise', 'api return constant if successful , constant otherwise']
['Add the new entry to the catalog list', 'entry list']
['xmlCatalogAddLocal_APIParam_1 is a document list of xmlCatalogAddLocal_APIParam_1', 'param be list param']
['xmlCatalogAddLocal_APIParam_2 is the xmlCatalogAddLocal_APIParam_2 to a new local catalog', 'param be param local']
['xmlCatalogAddLocal_APIName returns the updated list', 'api return update list']
['Free up all the memory associated with catalogs', 'free memory associate']
['Convert all the SGML catalog entries as XML ones', 'convert entry as one']
['xmlCatalogConvert_APIName returns the number of entries converted if successful, -1 otherwise', 'api return number entry convert if successful , constant otherwise']
['Dump all the global catalog content to the given file', 'global content give file']
['xmlCatalogDump_APIParam_1 is the file', 'param be file']
['Free up the memory associated to the catalog list', 'free memory associate list']
['xmlCatalogFreeLocal_APIParam_1 is a document list of catalogs', 'param be list']
['Used to get the user preference w.r.t', 'use get user preference']
['to what catalogs should be accepted', 'should be accept']
['xmlCatalogGetDefaults_APIName returns the current xmlCatalogAllow value', 'api return current value']
['Try to lookup the catalog reference associated to a public ID DEPRECATED , use xmlCatalogResolvePublic_APIName', 'lookup reference associate -PRON- would deprecate , use api']
['xmlCatalogGetPublic_APIParam_1 is the public ID string', 'param be -PRON- would string']
['xmlCatalogGetPublic_APIName returns the resource if found or NULL otherwise', 'api return resource']
['Try to lookup the catalog reference associated to a system ID DEPRECATED , use xmlCatalogResolveSystem_APIName', 'lookup reference associate system -PRON- would deprecate , use api']
['xmlCatalogGetSystem_APIParam_1 is the system ID string', 'param be system -PRON- would string']
['xmlCatalogGetSystem_APIName returns the resource if found or NULL otherwise', 'api return resource']
['xmlCatalogIsEmpty_APIParam_1 is should this create an SGML catalog', 'param be should create']
['Check is a catalog is empty', 'check be be empty']
['Do a complete resolution lookup of an External Identifier using a document private catalog list', 'complete resolution lookup external identifier use private list']
['xmlCatalogLocalResolve_APIParam_1 is a document list of xmlCatalogLocalResolve_APIParam_1', 'param be list param']
['xmlCatalogIsEmpty_APIName returns 1 if the catalog is empty, 0 if not, amd -1 in case of error', 'api return constant']
['xmlCatalogLocalResolve_APIParam_2 is the public ID string', 'param be -PRON- would string']
['xmlCatalogLocalResolve_APIParam_3 is the system ID string', 'param be system -PRON- would string']
['xmlCatalogLocalResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller', 'api return uri resource null  , must be free by caller']
['Do a complete resolution lookup of an xmlCatalogLocalResolveURI_APIParam_2 using a document private catalog list', 'complete resolution lookup param use private list']
['xmlCatalogLocalResolveURI_APIParam_1 is a document list of xmlCatalogLocalResolveURI_APIParam_1', 'param be list param']
['xmlCatalogLocalResolveURI_APIParam_2 is the xmlCatalogLocalResolveURI_APIParam_2', 'param be param']
['Remove an entry from the catalog', 'remove entry']
['xmlCatalogLocalResolveURI_APIName returns the xmlCatalogLocalResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller', 'api return param resource null  , must be free by caller']
['xmlCatalogRemove_APIParam_1 is the xmlCatalogRemove_APIParam_1 to remove', 'param be param remove']
['xmlCatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise', 'api return number entry remove if successful , constant otherwise']
['Do a complete resolution lookup of an External Identifier', 'complete resolution lookup external identifier']
['xmlCatalogResolve_APIParam_1 is the public ID string', 'param be -PRON- would string']
['xmlCatalogResolve_APIParam_2 is the system ID string', 'param be system -PRON- would string']
['Try to lookup the catalog reference associated to a public ID', 'lookup reference associate -PRON- would']
['xmlCatalogResolvePublic_APIParam_1 is the public ID string', 'param be -PRON- would string']
['Try to lookup the catalog resource for a system ID', 'lookup resource system -PRON- would']
['xmlCatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller', 'api return uri resource null  , must be free by caller']
['xmlCatalogResolvePublic_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller', 'api return resource  , value return must be free by caller']
['Do a complete resolution lookup of an xmlCatalogResolveURI_APIParam_1', 'complete resolution lookup param']
['xmlCatalogResolveSystem_APIParam_1 is the system ID string', 'param be system -PRON- would string']
['xmlCatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller', 'api return resource  , value return must be free by caller']
['xmlCatalogResolveURI_APIParam_1 is the xmlCatalogResolveURI_APIParam_1', 'param be param']
['xmlCatalogResolveURI_APIName returns the xmlCatalogResolveURI_APIParam_1 of the resource or NULL if not found, it must be freed by the caller', 'api return param resource null  , must be free by caller']
['Used to set the debug xmlCatalogSetDebug_APIParam_1 for catalog operation , 0 disable debugging , 1 enable it', 'use set debug param operation , constant disable debugging , constant enable']
['xmlCatalogSetDebug_APIParam_1 is the debug xmlCatalogSetDebug_APIParam_1 of catalogs required', 'param be debug param require']
['xmlCatalogSetDebug_APIName returns the previous value of the catalog debugging level', 'api return previous value debug level']
['Allows to set the preference between public and system for deletion in XML Catalog resolution', 'allow set preference system resolution']
['section 4.1.1 of the spec Values accepted are XML_CATA_PREFER_PUBLIC or XML_CATA_PREFER_SYSTEM', 'section constant spec value accept be constant']
['xmlCatalogSetDefaultPrefer_APIParam_1 is the default preference for delegation', 'param be default preference']
['xmlCatalogSetDefaultPrefer_APIName returns the previous value of the default preference for delegation', 'api return previous value default preference']
['Used to set the user preference w.r.t', 'use set user preference']
['to what catalogs should be accepted', 'should be accept']
['xmlCatalogSetDefaults_APIParam_1 is what catalogs should be accepted', 'param be should be accept']
['Convert all the SGML catalog entries as XML ones', 'convert entry as one']
['xmlConvertSGMLCatalog_APIParam_1 is the catalog', 'param be']
['xmlConvertSGMLCatalog_APIName returns the number of entries converted if successful, -1 otherwise', 'api return number entry convert if successful , constant otherwise']
['Free the memory allocated to a Catalog', 'free memory']
['xmlFreeCatalog_APIParam_1 is a Catalog', 'param be']
['xmlInitializeCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup', 'api be not thread safe , initialization should preferably be do']
['Load the catalog and build the associated data structures', 'load build associate datum structure']
['On the other hand XML Catalogs are not handled recursively', 'hand be not recursively']
['xmlLoadACatalog_APIParam_1 is a file path', 'param be file path']
['This can be either an XML Catalog or an SGML Catalog It will recurse in SGML CATALOG entries', 'can be either entry']
['xmlLoadACatalog_APIName returns the catalog parsed or NULL in case of error', 'api return parse null case error']
['Load the catalog and makes the catalog definitions effective for the default external entity loader', 'load make definition effective default external']
['xmlLoadCatalog_APIParam_1 is a file path', 'param be file path']
['xmlLoadCatalog_APIName returns 0 in case of success -1 in case of error', 'api return constant case success constant case error']
['xmlLoadCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup', 'api be not thread safe , initialization should preferably be do']
['Load the catalogs and makes their definitions effective for the default external entity loader', 'load make definition effective default external']
['xmlLoadCatalogs_APIName is not thread safe , catalog initialization should preferably be done once at startup', 'api be not thread safe , initialization should preferably be do']
['xmlLoadCatalogs_APIParam_1 is a list of directories separated by a colon or a space', 'param be list directory separate by colon space']
['Load an SGML super catalog', 'load super']
['It will not expand CATALOG or DELEGATE references', 'not expand reference']
['xmlLoadSGMLSuperCatalog_APIParam_1 is a file path', 'param be file path']
['xmlLoadSGMLSuperCatalog_APIName returns the catalog parsed or NULL in case of error', 'api return parse null case error']
['This is only needed for manipulating SGML Super Catalogs like adding and removing CATALOG or DELEGATE entries', 'be only need manipulate super like remove entry']
['xmlNewCatalog_APIParam_1 is should this create an SGML catalog', 'param be should create']
['xmlNewCatalog_APIName returns the xmlCatalogPtr or NULL in case of error', 'api return null case error']
['parse an XML file and build a tree', 'parse file build']
['it is like xmlParseFile_APIName except it bypass all catalog lookups', 'be like api except bypass lookup']
['xmlParseCatalogFile_APIParam_1 is the xmlParseCatalogFile_APIParam_1', 'param be param']
['xmlParseCatalogFile_APIName returns the resulting document tree or NULL in case of error', 'api return result null case error']
['Checks and computes the values of facets', 'check value']
['xmlSchemaCheckFacet_APIParam_1 is the xmlSchemaCheckFacet_APIParam_1', 'param be param']
['xmlSchemaCheckFacet_APIParam_2 is the schema type definition', 'param be type definition']
['xmlSchemaCheckFacet_APIParam_3 is the schema parser context or NULL', 'param be parser context null']
['xmlSchemaCheckFacet_APIParam_4 is the optional xmlSchemaCheckFacet_APIParam_4 of the type', 'param be optional param type']
['Cleanup the default XML Schemas type library', 'cleanup default type library']
['Removes and normalize white spaces in the string', 'remove normalize white space stre']
['xmlSchemaCollapseString_APIParam_1 is a xmlSchemaCollapseString_APIParam_1', 'param be param']
['xmlSchemaCheckFacet_APIName returns 0 if valid, a positive error code if not valid and -1 in case of an internal or API error', 'api return constant  if not valid constant case internal api error']
['xmlSchemaCollapseString_APIName returns the new string or NULL if no change was required', 'api return string null']
['Compare 2 values', 'compare constant value']
['xmlSchemaCompareValues_APIParam_1 is a first value', 'param be first value']
['xmlSchemaCompareValues_APIParam_2 is a second value', 'param be second value']
['Compare 2 values', 'compare constant value']
['xmlSchemaCompareValuesWhtsp_APIParam_1 is a first value', 'param be first value']
['xmlSchemaCompareValuesWhtsp_APIParam_2 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_1', 'param be whitespace value param']
['xmlSchemaCompareValuesWhtsp_APIParam_3 is a second value', 'param be second value']
['xmlSchemaCompareValuesWhtsp_APIParam_4 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_3', 'param be whitespace value param']
['Copies the precomputed value', 'copy precompute value']
['This duplicates any string within', 'duplicate stre within']
['xmlSchemaCopyValue_APIParam_1 is the precomputed value to be copied', 'param be precompute value be copy']
['Deallocate a Schema Facet structure', 'deallocate structure']
['xmlSchemaCompareValues_APIName returns -1 if xmlSchemaCompareValues_APIParam_1 < xmlSchemaCompareValues_APIParam_2, 0 if xmlSchemaCompareValues_APIParam_1 == xmlSchemaCompareValues_APIParam_2, 1 if xmlSchemaCompareValues_APIParam_1 > xmlSchemaCompareValues_APIParam_2, 2 if xmlSchemaCompareValues_APIParam_1 <> xmlSchemaCompareValues_APIParam_2, and -2 in case of error', 'api return constant case error']
['xmlSchemaCopyValue_APIName returns the copy or NULL if a copy for a data-type is not implemented', 'api return copy null']
['xmlSchemaFreeFacet_APIParam_1 is a schema xmlSchemaFreeFacet_APIParam_1 structure', 'param be param structure']
['Cleanup the default XML Schemas type library', 'cleanup default type library']
['xmlSchemaFreeValue_APIParam_1 is the xmlSchemaFreeValue_APIParam_1 to free', 'param be param free']
['Lookup function', 'lookup function']
['xmlSchemaCompareValuesWhtsp_APIName returns -1 if xmlSchemaCompareValuesWhtsp_APIParam_1 < xmlSchemaCompareValuesWhtsp_APIParam_3, 0 if xmlSchemaCompareValuesWhtsp_APIParam_1 == xmlSchemaCompareValuesWhtsp_APIParam_3, 1 if xmlSchemaCompareValuesWhtsp_APIParam_1 > xmlSchemaCompareValuesWhtsp_APIParam_3, 2 if xmlSchemaCompareValuesWhtsp_APIParam_1 <> xmlSchemaCompareValuesWhtsp_APIParam_3, and -2 in case of error', 'api return constant case error']
['xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 is the built-in simple xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1', 'param be param simple param']
['Gives you the xmlSchemaGetBuiltInType_APIParam_1 struct for a built-in xmlSchemaGetBuiltInType_APIParam_1 by its xmlSchemaGetBuiltInType_APIParam_1 id', 'give -PRON- param struct param by param -PRON- would']
['xmlSchemaGetBuiltInType_APIParam_1 is the xmlSchemaGetBuiltInType_APIParam_1 of the built in xmlSchemaGetBuiltInType_APIParam_1', 'param be param build param']
['xmlSchemaGetBuiltInType_APIName returns the xmlSchemaGetBuiltInType_APIParam_1 if found, NULL otherwise', 'api return param  , null otherwise']
['Get the canonical lexical representation of the value', 'get canonical lexical representation value']
['xmlSchemaGetBuiltInListSimpleTypeItemType_APIName returns the item xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 of @type as defined by the built-in datatype hierarchy of XML Schema Part 2 Datatypes, or NULL in case of an error', 'api return param type as define by param part constant , null case error']
['The caller has to FREE xmlSchemaGetCanonValue_APIParam_0', 'caller have free param']
["Some value types are not supported yet , resulting in a @retValue of '' ??? ''", 'value type be not support yet , result']
['This will be fixed in XML Schema 1.1', 'be fix constant']
['xmlSchemaGetCanonValue_APIParam_2 is xmlSchemaGetCanonValue_APIParam_0', 'param be param']
['XML Schema 1.0 does not define canonical representations for', 'constant do not define canonical representation']
['The caller has to free xmlSchemaGetCanonValueWhtsp_APIParam_0', 'caller have free param']
['Get the canonical representation of the value', 'get canonical representation value']
['xmlSchemaGetCanonValueWhtsp_APIParam_1 is the precomputed value', 'param be precompute value']
['xmlSchemaGetCanonValueWhtsp_APIParam_3 is the whitespace type of the value', 'param be whitespace type value']
['xmlSchemaGetCanonValue_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors', 'api return constant']
['xmlSchemaGetCanonValueWhtsp_APIParam_2 is xmlSchemaGetCanonValueWhtsp_APIParam_0', 'param be param']
['Extract the value of a xmlSchemaGetFacetValueAsULong_APIParam_1', 'extract value param']
['xmlSchemaGetFacetValueAsULong_APIParam_1 is an schemas type xmlSchemaGetFacetValueAsULong_APIParam_1', 'param be type param']
['xmlSchemaGetFacetValueAsULong_APIName returns the value as a long', 'api return value as long']
['xmlSchemaGetCanonValueWhtsp_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors', 'api return constant']
['Lookup a type in the default XML Schemas type library', 'lookup type default type library']
['xmlSchemaGetPredefinedType_APIName returns the type if found, NULL otherwise', 'api return type  , null otherwise']
['Accessor for the type of a value', 'type value']
['xmlSchemaGetPredefinedType_APIParam_1 is the type xmlSchemaGetPredefinedType_APIParam_1', 'param be type param']
['xmlSchemaGetValType_APIParam_1 is a schemas value', 'param be value']
['xmlSchemaGetValType_APIName returns the xmlSchemaValType of the value', 'api return value']
['Initialize the default XML Schemas type library', 'initialize default type library']
['xmlSchemaIsBuiltInTypeFacet_APIParam_1 is the built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1', 'param be param']
['xmlSchemaIsBuiltInTypeFacet_APIParam_2 is the facet xmlSchemaIsBuiltInTypeFacet_APIParam_1', 'param be param']
['xmlSchemaNewFacet_APIName returns the newly allocated structure or NULL in case or error', 'api return newly structure null case error']
["xmlSchemaGetPredefinedType_APIParam_2 is the URI of the namespace usually `` http / / www.w3.org/2001/XMLSchema ''", 'param be uri usually']
['xmlSchemaIsBuiltInTypeFacet_APIName returns 1 if the facet can be used with the given built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1, 0 otherwise and -1 in case the xmlSchemaIsBuiltInTypeFacet_APIParam_1 is not a built-in type', 'api return constant']
['The given values are consumed and freed with the struct', 'give value be consume free struct']
['xmlSchemaNewNOTATIONValue_APIParam_1 is the notation xmlSchemaNewNOTATIONValue_APIParam_1', 'param be param']
['xmlSchemaNewNOTATIONValue_APIParam_2 is the notation namespace xmlSchemaNewNOTATIONValue_APIParam_1 or NULL', 'param be param null']
['xmlSchemaNewNOTATIONValue_APIName returns a pointer to the new value or NULL in case of error', 'api return pointer value null case error']
['The given values are consumed and freed with the struct', 'give value be consume free struct']
['xmlSchemaNewQNameValue_APIParam_1 is the namespace name', 'param be name']
['xmlSchemaNewQNameValue_APIParam_2 is the local name', 'param be local name']
['xmlSchemaNewQNameValue_APIName returns a pointer to the new value or NULL in case of an error', 'api return pointer value null case error']
['Allocate a new simple xmlSchemaNewStringValue_APIParam_1 xmlSchemaNewStringValue_APIParam_2', 'simple param']
['The xmlSchemaNewStringValue_APIParam_1 can be of XML_SCHEMAS_STRING', 'param can be constant']
['This one is intended to be expanded for other string based types', 'one be intend be expand string base type']
['We need this for anySimpleType as well', 'need as well']
['The given xmlSchemaNewStringValue_APIParam_2 is consumed and freed with the struct', 'give param be consume free struct']
['xmlSchemaNewStringValue_APIParam_1 is the xmlSchemaNewStringValue_APIParam_2 xmlSchemaNewStringValue_APIParam_1', 'param be param']
['xmlSchemaNewStringValue_APIParam_2 is the xmlSchemaNewStringValue_APIParam_2', 'param be param']
['xmlSchemaNewStringValue_APIName returns a pointer to the new xmlSchemaNewStringValue_APIParam_2 or NULL in case of error', 'api return pointer param null case error']
['if true a xmlSchemaValPredefTypeNode_APIParam_2 is computed and returned in @val', 'if constant param be return']
['Check that a xmlSchemaValPredefTypeNode_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNode_APIParam_1', 'check param conform lexical space predefine param']
['xmlSchemaValPredefTypeNode_APIParam_1 is the predefined xmlSchemaValPredefTypeNode_APIParam_1', 'param be predefined param']
['xmlSchemaValPredefTypeNode_APIParam_2 is the xmlSchemaValPredefTypeNode_APIParam_2 to check', 'param be param check']
['xmlSchemaValPredefTypeNode_APIParam_3 is the return computed xmlSchemaValPredefTypeNode_APIParam_2', 'param be return param']
['xmlSchemaValPredefTypeNode_APIParam_4 is the xmlSchemaValPredefTypeNode_APIParam_4 containing the xmlSchemaValPredefTypeNode_APIParam_2', 'param be param contain param']
['if true a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is computed and returned in @val', 'if constant param be return']
['Check that a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1', 'check param conform lexical space predefine param']
['This one does apply any normalization to the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2', 'one do apply param']
['xmlSchemaValPredefTypeNode_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['xmlSchemaValPredefTypeNodeNoNorm_APIParam_1 is the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1', 'param be predefined param']
['xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 to check', 'param be param check']
['xmlSchemaValPredefTypeNodeNoNorm_APIParam_3 is the return computed xmlSchemaValPredefTypeNodeNoNorm_APIParam_2', 'param be return param']
['xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 containing the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2', 'param be param contain param']
['Check a xmlSchemaValidateFacet_APIParam_3 against a xmlSchemaValidateFacet_APIParam_2 condition', 'check param against param condition']
['xmlSchemaValidateFacet_APIParam_1 is the xmlSchemaValidateFacet_APIParam_1 type', 'param be param type']
['xmlSchemaValidateFacet_APIParam_2 is the xmlSchemaValidateFacet_APIParam_2 to check', 'param be param check']
['xmlSchemaValPredefTypeNodeNoNorm_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['xmlSchemaValidateFacet_APIParam_3 is the lexical repr of the xmlSchemaValidateFacet_APIParam_3 to validate', 'param be lexical param validate']
['xmlSchemaValidateFacet_APIParam_4 is the precomputed xmlSchemaValidateFacet_APIParam_3', 'param be precompute param']
['Check a xmlSchemaValidateFacetWhtsp_APIParam_4 against a xmlSchemaValidateFacetWhtsp_APIParam_1 condition', 'check param against param condition']
['This takes xmlSchemaValidateFacetWhtsp_APIParam_4 normalization according to the specified whitespace types into account', 'take param accord specify whitespace type']
['xmlSchemaValidateFacetWhtsp_APIParam_1 is the xmlSchemaValidateFacetWhtsp_APIParam_1 to check', 'param be param check']
['xmlSchemaValidateFacetWhtsp_APIParam_2 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_1 xmlSchemaValidateFacetWhtsp_APIParam_4', 'param be whitespace type param']
['xmlSchemaValidateFacet_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant']
['xmlSchemaValidateFacetWhtsp_APIParam_3 is the built-in type of the xmlSchemaValidateFacetWhtsp_APIParam_4', 'param be param type param']
['xmlSchemaValidateFacetWhtsp_APIParam_4 is the lexical repr of the xmlSchemaValidateFacetWhtsp_APIParam_4 to validate', 'param be lexical param validate']
['xmlSchemaValidateFacetWhtsp_APIParam_5 is the precomputed xmlSchemaValidateFacetWhtsp_APIParam_4', 'param be precompute param']
['xmlSchemaValidateFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_4', 'param be whitespace type param']
['xmlSchemaValidateLengthFacet_APIParam_1 is the built-in xmlSchemaValidateLengthFacet_APIParam_1', 'param be param']
['Note that @value needs to be the * normalized * xmlSchemaValidateFacetWhtsp_APIParam_4', 'value need be normalize param']
['xmlSchemaValidateLengthFacet_APIParam_2 is the xmlSchemaValidateLengthFacet_APIParam_2 to check', 'param be param check']
["Checka a xmlSchemaValidateLengthFacet_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacet_APIParam_2", 'checka param against length , param']
['sets @length to the computed xmlSchemaValidateLengthFacet_APIParam_5 of @value', 'set length param value']
['xmlSchemaValidateFacetWhtsp_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_2 is the built-in type', 'param be param type']
['xmlSchemaValidateLengthFacet_APIParam_3 is the lexical repr', 'param be lexical']
['of the xmlSchemaValidateLengthFacet_APIParam_3 to be validated', 'param be validate']
['xmlSchemaValidateLengthFacet_APIName returns 0 if the xmlSchemaValidateLengthFacet_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error', 'api return constant']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is the lexical repr', 'param be lexical']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_1 is the xmlSchemaValidateLengthFacetWhtsp_APIParam_1 to check', 'param be param check']
['xmlSchemaValidateLengthFacet_APIParam_5 is the actual xmlSchemaValidateLengthFacet_APIParam_5 of the xmlSchemaValidateLengthFacet_APIParam_3', 'param be actual param']
['of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 to be validated', 'param be validate']
['sets @length to the computed xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of @value', 'set length param value']
['xmlSchemaValidateLengthFacet_APIParam_4 is the precomputed xmlSchemaValidateLengthFacet_APIParam_3', 'param be precompute param']
["Checka a xmlSchemaValidateLengthFacetWhtsp_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacetWhtsp_APIParam_1", 'checka param against length , param']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_4 is the precomputed xmlSchemaValidateLengthFacetWhtsp_APIParam_3', 'param be precompute param']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_5 is the actual xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3', 'param be actual param']
['xmlSchemaValidateLengthFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3', 'param be whitespace type param']
['Checks the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 of a list simple type against a xmlSchemaValidateListSimpleTypeFacet_APIParam_1', 'check param list simple type against param']
['xmlSchemaValidateListSimpleTypeFacet_APIParam_1 is the xmlSchemaValidateListSimpleTypeFacet_APIParam_1 to check', 'param be param check']
['xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is the lexical repr of the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 to validate', 'param be lexical param validate']
['xmlSchemaValidateLengthFacetWhtsp_APIName returns 0 if the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error', 'api return constant']
['xmlSchemaValidateListSimpleTypeFacet_APIParam_3 is the number of list items', 'param be number list']
['xmlSchemaValidateListSimpleTypeFacet_APIParam_4 is the resulting expected number of list items', 'param be result expect number list']
['xmlSchemaValidateListSimpleTypeFacet_APIName returns 0 if the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is valid, a positive error code number otherwise and -1 in case of an internal error', 'api return constant']
['if true a xmlSchemaValidatePredefinedType_APIParam_2 is computed and returned in @val', 'if constant param be return']
['xmlSchemaValidatePredefinedType_APIParam_1 is the predefined xmlSchemaValidatePredefinedType_APIParam_1', 'param be predefined param']
['Check that a xmlSchemaValidatePredefinedType_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValidatePredefinedType_APIParam_1', 'check param conform lexical space predefine param']
['xmlSchemaValidatePredefinedType_APIParam_2 is the xmlSchemaValidatePredefinedType_APIParam_2 to check', 'param be param check']
['xmlSchemaValidatePredefinedType_APIParam_3 is the return computed xmlSchemaValidatePredefinedType_APIParam_2', 'param be return param']
['Appends a next sibling to a list of computed values', 'append list value']
['xmlSchemaValueAppend_APIParam_1 is the value', 'param be value']
['xmlSchemaValidatePredefinedType_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error', 'api return constant  otherwise constant case internal api error']
['xmlSchemaValueAppend_APIParam_2 is the value to be appended', 'param be value be append']
['xmlSchemaValueAppend_APIName returns 0 if succeeded and -1 on API errors', 'api return constant']
['Accessor for the boolean value of a computed value', 'value value']
['xmlSchemaValueGetAsBoolean_APIParam_1 is the value', 'param be value']
['Accessor for the string value of a computed value', 'string value value']
['xmlSchemaValueGetAsBoolean_APIName returns 1 if true and 0 if false, or in case of an error', 'api return constant if constant']
['xmlSchemaValueGetAsString_APIParam_1 is the value', 'param be value']
['xmlSchemaValueGetAsString_APIName returns the string value or NULL if there was none, or on API errors', 'api return stre value null']
['Accessor for the next sibling of a list of computed values', 'list value']
['xmlSchemaValueGetNext_APIName returns the next value or NULL if there was none, or on API errors', 'api return value null']
['xmlSchemaValueGetNext_APIParam_1 is the value', 'param be value']
['Replaces 0xd , 0x9 and 0xa with a space', 'replace 0xd , space']
['xmlSchemaWhiteSpaceReplace_APIParam_1 is a xmlSchemaWhiteSpaceReplace_APIParam_1', 'param be param']
['xmlSchemaWhiteSpaceReplace_APIName returns the new string or NULL if no change was required', 'api return string null']
