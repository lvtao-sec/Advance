Compile the automata into a Reg Exp ready for being executed
The automata should be free after this point
xmlAutomataCompile_APIParam_1 is an automata
xmlAutomataCompile_APIName returns the compiled regexp or NULL in case of error
Initial state lookup
xmlAutomataGetInitState_APIParam_1 is an automata
xmlAutomataGetInitState_APIName returns the initial state of the automata
xmlAutomataIsDeterminist_APIParam_1 is an automata
xmlAutomataIsDeterminist_APIName returns 1 if true, 0 if not, and -1 in case of error
xmlAutomataNewAllTrans_APIParam_1 is an automata
Checks
xmlAutomataNewAllTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewAllTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewAllTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewCountTrans_APIParam_1 is an automata
allowed only
That transition is an epsilon transition
xmlAutomataNewCountTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewCountTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewAllTrans_APIParam_4 allow xmlAutomataNewAllTrans_APIParam_3 transition
xmlAutomataNewCountTrans_APIParam_4 is the input string associated xmlAutomataNewCountTrans_APIParam_3 that transition
xmlAutomataNewCountTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewCountTrans_APIParam_4
this creates first a new target state in the automata and adds a an ALL transition xmlAutomataNewAllTrans_APIParam_2 the @from state xmlAutomataNewAllTrans_APIParam_3 the target state
xmlAutomataNewCountTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewCountTrans_APIParam_4
xmlAutomataNewCountTrans_APIParam_7 is xmlAutomataNewCountTrans_APIParam_7 associated xmlAutomataNewCountTrans_APIParam_3 the transition
xmlAutomataNewCountTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewCountTrans2_APIParam_1 is an automata
xmlAutomataNewCountTrans2_APIParam_2 is the starting point of the transition
xmlAutomataNewCountTrans2_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCountTrans2_APIParam_4 is the input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition
xmlAutomataNewCountTrans2_APIParam_5 is the second input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition
xmlAutomataNewCountTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewCountTrans2_APIParam_4
xmlAutomataNewCountTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewCountTrans2_APIParam_4
xmlAutomataNewCountTrans2_APIParam_8 is xmlAutomataNewCountTrans2_APIParam_8 associated xmlAutomataNewCountTrans2_APIParam_3 the transition
xmlAutomataNewCountTrans2_APIName returns the target state or NULL in case of error
xmlAutomataNewCountedTrans_APIParam_1 is an automata
xmlAutomataNewCountedTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewCountedTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCountedTrans_APIParam_4 is the xmlAutomataNewCountedTrans_APIParam_4 associated xmlAutomataNewCountedTrans_APIParam_3 that transition
xmlAutomataNewCountedTrans_APIName returns the target state or NULL in case of error
Create a new counter
this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans_APIParam_2 the @from state xmlAutomataNewCountTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max
xmlAutomataNewCounter_APIParam_1 is an automata
xmlAutomataNewCounter_APIParam_2 is the minimal value on the counter
xmlAutomataNewCounter_APIParam_3 is the maximal value on the counter
xmlAutomataNewCounter_APIName returns the counter number or -1 in case of error
xmlAutomataNewCounterTrans_APIParam_1 is an automata
xmlAutomataNewCounterTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewCounterTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCounterTrans_APIParam_4 is the xmlAutomataNewCounterTrans_APIParam_4 associated xmlAutomataNewCounterTrans_APIParam_3 that transition
xmlAutomataNewCounterTrans_APIName returns the target state or NULL in case of error
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCountedTrans_APIParam_2 the @from state xmlAutomataNewCountedTrans_APIParam_3 the target state which will increment the xmlAutomataNewCountedTrans_APIParam_4 provided
this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans2_APIParam_2 the @from state xmlAutomataNewCountTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max
xmlAutomataNewEpsilon_APIParam_1 is an automata
xmlAutomataNewEpsilon_APIParam_2 is the starting point of the transition
xmlAutomataNewEpsilon_APIName returns the target state or NULL in case of error
xmlAutomataNewEpsilon_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewNegTrans_APIParam_1 is an automata
xmlAutomataNewNegTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewNegTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewNegTrans_APIParam_4 is the first input string associated xmlAutomataNewNegTrans_APIParam_3 that transition
xmlAutomataNewNegTrans_APIParam_5 is the second input string associated xmlAutomataNewNegTrans_APIParam_3 that transition
xmlAutomataNewNegTrans_APIName returns the target state or NULL in case of error
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewEpsilon_APIParam_2 the @from state xmlAutomataNewEpsilon_APIParam_3 the target state
xmlAutomataNewOnceTrans_APIParam_1 is an automata
xmlAutomataNewOnceTrans_APIParam_2 is the starting point of the transition
xmlAutomataNewOnceTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewNegTrans_APIParam_6 is xmlAutomataNewNegTrans_APIParam_6 passed xmlAutomataNewNegTrans_APIParam_3 the callback function
xmlAutomataNewOnceTrans_APIParam_4 is the input string associated xmlAutomataNewOnceTrans_APIParam_3 that transition
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCounterTrans_APIParam_2 the @from state xmlAutomataNewCounterTrans_APIParam_3 the target state which will be allowed only if the xmlAutomataNewCounterTrans_APIParam_4 is within the right range
xmlAutomataNewOnceTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewOnceTrans_APIParam_4
xmlAutomataNewOnceTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewOnceTrans_APIParam_4
xmlAutomataNewOnceTrans_APIParam_7 is xmlAutomataNewOnceTrans_APIParam_7 associated xmlAutomataNewOnceTrans_APIParam_3 the transition
xmlAutomataNewOnceTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewOnceTrans2_APIParam_1 is an automata
xmlAutomataNewOnceTrans2_APIParam_2 is the starting point of the transition
xmlAutomataNewOnceTrans2_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewOnceTrans2_APIParam_4 is the input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition
xmlAutomataNewOnceTrans2_APIParam_5 is the second input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition
xmlAutomataNewOnceTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4
xmlAutomataNewOnceTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4
xmlAutomataNewOnceTrans2_APIParam_8 is xmlAutomataNewOnceTrans2_APIParam_8 associated xmlAutomataNewOnceTrans2_APIParam_3 the transition
xmlAutomataNewOnceTrans2_APIName returns the target state or NULL in case of error
Create a new disconnected state in the automata
xmlAutomataNewState_APIParam_1 is an automata
xmlAutomataNewState_APIName returns the new state or NULL in case of error
xmlAutomataNewTransition_APIParam_1 is an automata
xmlAutomataNewTransition_APIParam_2 is the starting point of the transition
xmlAutomataNewTransition_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewTransition_APIParam_4 is the input string associated xmlAutomataNewTransition_APIParam_3 that transition
xmlAutomataNewTransition_APIName returns the target state or NULL in case of error
xmlAutomataNewTransition2_APIParam_1 is an automata
xmlAutomataNewTransition_APIParam_5 is xmlAutomataNewTransition_APIParam_5 passed xmlAutomataNewTransition_APIParam_3 the callback function
xmlAutomataNewTransition2_APIParam_2 is the starting point of the transition
xmlAutomataNewTransition2_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewTransition2_APIParam_4 is the first input string associated xmlAutomataNewTransition2_APIParam_3 that transition
xmlAutomataNewTransition2_APIParam_5 is the second input string associated xmlAutomataNewTransition2_APIParam_3 that transition
this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition_APIParam_2 the @from state xmlAutomataNewTransition_APIParam_3 the target state activated by the value of @token
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans_APIParam_2 the @from state xmlAutomataNewOnceTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max , moreover that transition can only be crossed once
this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition2_APIParam_2 the @from state xmlAutomataNewTransition2_APIParam_3 the target state activated by the value of @token
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans2_APIParam_2 the @from state xmlAutomataNewOnceTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max , moreover that transition can only be crossed once
this creates first a new target state in the automata and adds a transition xmlAutomataNewNegTrans_APIParam_2 the @from state xmlAutomataNewNegTrans_APIParam_3 the target state activated by any value except Note that if @token2 is not NULL , will not match xmlAutomataNewNegTrans_APIParam_3 follow # the semantic of XSD ## other
xmlAutomataNewTransition2_APIName returns the target state or NULL in case of error
Makes that xmlAutomataSetFinalState_APIParam_2 a final xmlAutomataSetFinalState_APIParam_2
xmlAutomataSetFinalState_APIParam_1 is an automata
xmlAutomataSetFinalState_APIParam_2 is a xmlAutomataSetFinalState_APIParam_2 in this automata
xmlAutomataSetFinalState_APIName returns 0 or -1 in case of error
xmlAutomataNewTransition2_APIParam_6 is xmlAutomataNewTransition2_APIParam_6 passed xmlAutomataNewTransition2_APIParam_3 the callback function
Free an automata
xmlFreeAutomata_APIParam_1 is an automata
Create a new automata
xmlNewAutomata_APIName returns the new object or NULL in case of failure
Daniel Veillard
xmlCleanupThreads_APIName is used to to cleanup all the thread related data of the libxml2 library once processing has ended
xmlFreeMutex_APIName is used to reclaim resources associated with a libxml2 token struct
xmlFreeMutex_APIParam_1 is the simple mutex
In case of doubt abstain from calling xmlCleanupThreads_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind
xmlRFreeMutex_APIName is used to reclaim resources associated with a reentrant mutex
xmlFreeRMutex_APIParam_1 is the reentrant mutex
may crash the application if another thread or a plugin is still using libxml2
xmlGetGlobalState_APIName returns the thread global state or NULL in case of error
xmlGetGlobalState_APIName is called to retrieve the global state for a thread
xmlGetThreadId_APIName returns the current thread ID number
xmlInitThreads_APIName is used to to initialize all the thread related data of the libxml2 library
it is sometimes very hard to guess
some libraries or plugins may use it without notice
xmlIsMainThread_APIName check whether the current thread is the main thread
xmlIsMainThread_APIName returns 1 if the current thread is the main thread, 0 otherwise
xmlLockLibrary_APIName is used to take out a re-entrant lock on the libxml2 library
xmlMutexLock_APIName is used to lock a libxml2 token
xmlMutexLock_APIParam_1 is the simple mutex
xmlGetThreadId_APIName find the current thread ID number Note that this is likely to be broken on some platforms using pthreads as the specification does not mandate pthread_t to be an integer type
xmlMutexUnlock_APIName is used to unlock a libxml2 token
xmlMutexUnlock_APIParam_1 is the simple mutex
xmlNewMutex_APIName returns a new simple mutex pointer or NULL in case of error
xmlNewMutex_APIName is used to allocate a libxml2 token struct for use in synchronizing access to data
xmlNewRMutex_APIName returns the new reentrant mutex pointer or NULL in case of error
xmlRNewMutex_APIName is used to allocate a reentrant mutex for use in synchronizing access to data
xmlRMutexLock_APIName is used to lock a libxml2 token_r
xmlRMutexLock_APIParam_1 is the reentrant mutex
token_r is a re-entrant lock and thus useful for synchronizing access to data structures that may be manipulated in a recursive fashion
xmlRMutexUnlock_APIName is used to unlock a libxml2 token_r
xmlRMutexUnlock_APIParam_1 is the reentrant mutex
xmlUnlockLibrary_APIName is used to release a re-entrant lock on the libxml2 library
Daniel Veillard
Create a parser context for a file content
htmlCreateFileParserCtxt_APIParam_1 is the htmlCreateFileParserCtxt_APIParam_1
htmlCreateFileParserCtxt_APIName returns the new parser context or NULL
htmlCreateFileParserCtxt_APIParam_2 is a free form C string describing the HTML document htmlCreateFileParserCtxt_APIParam_2 , or NULL
Initialize the htmlStartCloseIndex for fast lookup of closing tags names
This is not reentrant
Call xmlInitParser_APIName once before processing in case of use in multithreaded programs
Pops the top parser input from the input stack
inputPop_APIParam_1 is an XML parser context
inputPop_APIName returns the input just removed
Pushes a new parser input on top of the input stack
inputPush_APIParam_1 is an XML parser context
inputPush_APIParam_2 is the parser input
inputPush_APIName returns -1 in case of error, the index in the stack otherwise
Pops the top element name from the name stack
namePop_APIParam_1 is an XML parser context
namePop_APIName returns the name just removed
document is provided by default
Automatic support for ZLIB/Compress compressed
Pushes a new element name on top of the name stack
namePush_APIParam_1 is an XML parser context
namePush_APIParam_2 is the element name
namePush_APIName returns -1 in case of error, the index in the stack otherwise
Pops the top element node from the node stack
nodePop_APIParam_1 is an XML parser context
nodePop_APIName returns the node just removed
Pushes a new element node on top of the node stack
nodePush_APIParam_1 is an XML parser context
nodePush_APIParam_2 is the element node
nodePush_APIName returns -1 in case of error, the index in the stack otherwise
xmlCheckLanguageID_APIParam_1 is pointer to the string value
xmlCheckLanguageID_APIName returns 1 if correct 0 otherwise
Checks that the value conforms to the LanguageID production
append the char value in the array
this is somewhat deprecated , those productions were removed from the XML Second edition
xmlCopyChar_APIParam_1 is Ignored , compatibility
append the char value in the array
xmlCopyCharMultiByte_APIName returns the number of xmlChar written
xmlCreateFileParserCtxt_APIParam_1 is the xmlCreateFileParserCtxt_APIParam_1
xmlCreateEntityParserCtxt_APIParam_1 is the entity xmlCreateEntityParserCtxt_APIParam_1
xmlCopyChar_APIParam_3 is the char value
xmlCreateEntityParserCtxt_APIParam_2 is the entity PUBLIC xmlCreateEntityParserCtxt_APIParam_2
xmlCopyCharMultiByte_APIParam_2 is the char value
xmlCreateFileParserCtxt_APIName returns the new parser context or NULL
xmlCreateEntityParserCtxt_APIName returns the new parser context or NULL
xmlCopyChar_APIName returns the number of xmlChar written
xmlCopyCharMultiByte_APIParam_1 is pointer to an array of xmlChar
Create a parser context for a file content
xmlCopyChar_APIParam_2 is pointer to an array of xmlChar
xmlCreateEntityParserCtxt_APIParam_3 is a possible xmlCreateEntityParserCtxt_APIParam_3 for the target URI
Create a parser context for an XML in-memory document
xmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array
xmlCreateMemoryParserCtxt_APIParam_2 is the xmlCreateMemoryParserCtxt_APIParam_2 of the array
xmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL
Create a parser context for a file or URL content
xmlCreateURLParserCtxt_APIParam_1 is the xmlCreateURLParserCtxt_APIParam_1 or URL
xmlCreateURLParserCtxt_APIParam_2 is a combination of xmlParserOption
= Langcode * Langcode
= ISO639Code | IanaCode | UserCode ISO639Code
= IanaCode
= ' - ' + UserCode
= ' - ' + Subcode
= + The current REC reference the sucessors of RFC 1766 , currently 5646 http
document is provided by default
Automatic support for ZLIB/Compress compressed
/ / www.rfc-editor.org/rfc/rfc5646.txt langtag = language * * language = 2 * 3ALPHA
shortest ISO 639 code
sometimes followed by
extended language subtags / 4ALPHA
or reserved for future use / 5 * 8ALPHA
or registered language subtag extlang = 3ALPHA
selected ISO 639 codes * 2
permanently reserved script = 4ALPHA
ISO 15924 code region = 2ALPHA
ISO 3166-1 code / 3DIGIT
UN M. 49 code variant = 5 * 8alphanum
registered variants / extension = singleton 1 * -RRB-
Single alphanumerics
document is provided by default
Automatic support for ZLIB/Compress compressed
`` x '' reserved for private use singleton = DIGIT
document is provided by default
Create a parser context for an external entity Automatic support for ZLIB/Compress compressed
0 - 9 / % x41-57
A - W / % x59-5A
Y - Z / % x61-77
a - w / % x79-7A
y - z it sounds right to still allow Irregular i-xxx IANA and user codes too The parser below does not try to cope with extension or privateuse that could be added but that not interoperable anyway
xmlCreateURLParserCtxt_APIName returns the new parser context or NULL
xmlCurrentChar_APIParam_1 is the XML parser context
xmlCurrentChar_APIParam_2 is pointer to the length of the char read
xmlCurrentChar_APIName returns the current char value and its length
This behavior can conveniently be produced by normalizing all line breaks to #xA on input , before parsing . -RRB-
xmlDecodeEntities_APIName is deprecated , we now always process entities content through xmlStringDecodeEntities TODO
The current char value , this may actually span multiple bytes in the input buffer
remove it in next major release
xmlDecodeEntities_APIParam_1 is the parser context
xmlDecodeEntities_APIParam_2 is the xmlDecodeEntities_APIParam_2 to decode -LRB- in bytes !
xmlDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF
-RRB- , -1 for no size limit
xmlDecodeEntities_APIName returns A newly allocated string with the substitution done
The caller must deallocate it
xmlDecodeEntities_APIParam_4 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
xmlEntityReferenceFunc_APIParam_1 is the entity
xmlDecodeEntities_APIParam_5 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
= EntityRef | CharRef PEReference
xmlDecodeEntities_APIParam_6 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
xmlEntityReferenceFunc_APIParam_2 is the fist node in the chunk
= ' % ' Name '
xmlEntityReferenceFunc_APIParam_3 is the last nod in the chunk
Handle a redefinition of attribute error
xmlErrMemory_APIParam_1 is an XML parser context
Implement the end of line normalization
xmlErrMemory_APIParam_2 is xmlErrMemory_APIParam_2 informations
Free up an xmlFreeInputStream_APIParam_1 stream
xmlFreeInputStream_APIParam_1 is an xmlParserInputPtr
Callback function used inherited from an entity replacement
to be removed at some point
xmlHandleEntity_APIParam_1 is an XML parser context
xmlHandleEntity_APIParam_2 is an XML xmlHandleEntity_APIParam_2 pointer
xmlIsLetter_APIParam_1 is an unicode character
= BaseChar | Ideographic
xmlIsLetter_APIName returns 0 if not, non-zero otherwise
parse an XML namespace name
not on raw input
xmlNamespaceParseNCName_APIParam_1 is an XML parser context
xmlNamespaceParseNCName_APIName returns the namespace name or NULL
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
2.11 End-of-Line Handling Wherever an external parsed entity or the literal entity value of an internal parsed entity contains either the literal two-character sequence '' #xD #xA '' or a standalone literal #xD , an XML processor must pass to the application the single character #xA
not on raw input
xmlNamespaceParseNSDef_APIParam_1 is an XML parser context
parse a namespace prefix declaration TODO
| ' - ' | '_' | CombiningChar | Extender
= * NCNameChar
xmlNamespaceParseNSDef_APIName returns the namespace name
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
= Letter | Digit | ' . '
not on raw input
parse an XML qualified name QName
= ?
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
= PrefixDef Eq SystemLiteral PrefixDef
= ` xmlns ' ?
xmlNamespaceParseQName_APIParam_1 is an XML parser context
xmlNamespaceParseQName_APIParam_2 is a xmlChar **
LocalPart Prefix
= NCName LocalPart
= NCName
xmlNamespaceParseQName_APIName returns the local part, and xmlNamespaceParseQName_APIParam_2 is updated to get the Prefix if any
Create a new input stream based on an xmlEntityPtr
xmlNewEntityInputStream_APIParam_1 is an XML parser context
xmlNewEntityInputStream_APIParam_2 is an Entity pointer
xmlNewEntityInputStream_APIName returns the new input stream or NULL
Create a new input stream based on a file or an URL
xmlNewInputFromFile_APIParam_1 is an XML parser context
xmlNewInputFromFile_APIParam_2 is the xmlNewInputFromFile_APIParam_2 to use as entity
xmlNewInputFromFile_APIName returns the new input stream or NULL in case of error
Create a new input stream structure
xmlNewInputStream_APIParam_1 is an XML parser context
xmlNewInputStream_APIName returns the new input stream or NULL
Create a new input stream based on a memory xmlNewStringInputStream_APIParam_2
xmlNewStringInputStream_APIParam_1 is an XML parser context
xmlNewStringInputStream_APIParam_2 is an memory xmlNewStringInputStream_APIParam_2
xmlNewStringInputStream_APIName returns the new input stream
Skip to the next char input char
xmlNextChar_APIParam_1 is the XML parser context
xmlParseAttValue_APIParam_1 is an XML parser context
xmlParseAttValue_APIName returns the AttValue parsed or NULL
The value has to be freed by the caller
The attribute must have been declared
the xmlParseAttribute_APIParam_2 must be of the type declared for it
parse an attribute Attribute
The replacement text of any entity referred to directly or indirectly in an attribute xmlParseAttribute_APIParam_2 must not contain a <
= S ?
= Name Eq AttValue Attribute values can not contain direct or indirect entity references to external entities
' = ' S ?
is handled independently as a namespace definition
With namespace
= QName Eq AttValue Also the case QName == xmlns
xmlParseAttribute_APIParam_1 is an XML parser context
xmlParseAttribute_APIName returns the attribute name, and the xmlParseAttribute_APIParam_2 in *value
xmlParseAttribute_APIParam_2 is a xmlChar ** used to store the xmlParseAttribute_APIParam_2 of the attribute
xmlParseAttributeListDecl_APIParam_1 is an XML parser context
' > ' AttDef
= S Name S AttType S DefaultDecl
No element type may have more than one ID attribute specified
All attributes should be treated by a non-validating parser declared CDATA
An ID attribute must have a declared default of #IMPLIED or #REQUIRED
IDREF values must match the value of some ID attribute
parse the Attribute list def for an element AttlistDecl
xmlParseAttributeType_APIName returns the attribute type
= ' < !
Parse escaped pure raw content
xmlParseAttributeType_APIParam_1 is an XML parser context
Values of type NMTOKEN must match the Nmtoken production
values of type NMTOKENS must match Nmtokens
A name must not appear more than once in an XML document as a value of this type
Values of type ENTITY must match the Name production , values of type ENTITIES must match Names
i.e. , ID values must uniquely identify the elements which bear them
parse the Attribute list def for an element AttType
Values of type IDREF must match the Name production , and values of type IDREFS must match Names
each Entity Name must match the name of an unparsed entity declared in the DTD
parse a value for an attribute Note
= StringType | TokenizedType | EnumeratedType StringType
= ` CDATA ' TokenizedType
each IDREF Name must match the value of an ID attribute on some element in the XML document
the parser will not do substitution of entities here , this will be handled later in xmlStringGetNodeList AttValue
= ` ID ' | ` IDREF ' | ` IDREFS ' | ` ENTITY ' | ` ENTITIES ' | ` NMTOKEN ' | ` NMTOKENS ' Validity constraints for attribute values syntax are checked in xmlValidateAttributeValue_APIName Values of type ID must match the Name production
xmlParseAttributeType_APIParam_2 is the enumeration xmlParseAttributeType_APIParam_2 built
= ' '' ' * ' '' ' | '' ' '' * '' ' '' 3.3.3 Attribute-Value Normalization
Before the value of an attribute is passed to the application or checked for validity , the XML processor must normalize it as follows
appending them to the normalized value
- a character reference is processed by appending the referenced character to the attribute value - an entity reference is processed by recursively processing the replacement text of the entity - a whitespace character is processed by appending #x20 to the normalized value , except that only a single #x20 is appended for a '' #xD #xA '' sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity - other characters are processed by , the XML processor must further process the normalized attribute value by discarding any leading and trailing space characters , and by replacing sequences of space characters by a single space character
xmlParseCDSect_APIParam_1 is an XML parser context
parse a CharData section
= CDStart CData CDEnd CDStart
= ' < !
= * -
xmlParseCharData_APIParam_1 is an XML parser context
= -RRB- CDEnd
xmlParseCharData_APIParam_2 is int indicating
= ' -RSB- -RSB- > '
xmlParseCharRef_APIParam_1 is an XML parser context
xmlParseCharRef_APIName returns the value parsed , 0 in case of error
xmlParseComment_APIParam_1 is an XML parser context
Skip an XML comment <!-- .... --> The spec says that `` For compatibility , the string '' -- '' must not occur within comments . ''
Parse a content
= *
xmlParseContent_APIParam_1 is an XML parser context
Parse an attribute default declaration DefaultDecl
The declared default xmlParseDefaultDecl_APIParam_2 must meet the lexical constraints of the declared attribute type c.f
handled in xmlParseAttValue_APIName
= ' #REQUIRED ' | ' #IMPLIED ' | ?
xmlParseDefaultDecl_APIParam_1 is an XML parser context
xmlParseDefaultDecl_APIName returns XML_ATTRIBUTE_NONE, XML_ATTRIBUTE_REQUIRED, XML_ATTRIBUTE_IMPLIED or XML_ATTRIBUTE_FIXED
xmlParseDefaultDecl_APIParam_2 Receive a possible fixed default xmlParseDefaultDecl_APIParam_2 for the attribute
parse a DOCTYPE declaration doctypedecl
= ' < !
xmlParseDocTypeDecl_APIParam_1 is an XML parser context
instances of that attribute must match the default xmlParseDefaultDecl_APIParam_2
xmlParseElement_APIParam_1 is an XML parser context
= -LRB- ' ? '
marks an end of section
parse an XML element , this is highly recursive element
cp -LRB- S ?
| ' * ' | ' + ' -RRB- ?
= EmptyElemTag | STag content ETag The Name in an element end-tag must match the element type in the start-tag
= ' -LRB- ' S ?
' | ' S ?
| ' * ' | ' + ' -RRB- ?
cp -LRB- S ?
cp -RRB- * S ? ' -RRB- '
= ' -LRB- ' S ?
' , ' S ?
cp -RRB- * S ? ' -RRB- '
xmlParseElementChildrenContentDecl_APIParam_1 is an XML parser context
parse the declaration for a Mixed Element content The leading ' -LRB- ' ? '
applies to and TODO Parameter-entity replacement text must be properly nested with parenthesized groups
xmlParseElementChildrenContentDecl_APIName returns the tree of xmlElementContentPtr describing the element hierarchy
xmlParseElementChildrenContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks
xmlParseElementContentDecl_APIParam_1 is an XML parser context
xmlParseElementContentDecl_APIParam_2 is the xmlParseElementContentDecl_APIParam_2 of the element being defined
xmlParseElementContentDecl_APIName returns the type of element content XML_ELEMENT_TYPE_xxx
parse an Element declaration
= ' < !
' > ' The Name in the document type declaration must match the element type of the root element
xmlParseElementDecl_APIParam_1 is an XML parser context
xmlParseElementDecl_APIName returns the type of the element, or -1 in case of error
parse the declaration for an Element content either Mixed or Children , the cases EMPTY and ANY are handled directly in xmlParseElementDecl contentspec
= 'EM PTY ' | ` ANY ' | Mixed | children
' #PCDATA ' -LRB- S ?
' | ' S ?
Name -RRB- * S ?
' > ' No element type may be declared more than once
' #PCDATA ' S ? ' -RRB- '
xmlParseElementMixedContentDecl_APIParam_1 is an XML parser context
' -RRB- * ' | ' -LRB- ' S ?
will be stored
xmlParseElementContentDecl_APIParam_3 is the Element Content pointer
applies to too The same name must not appear more than once in a single mixed-content declaration
xmlParseElementMixedContentDecl_APIName returns the list of the xmlElementContentPtr describing the element choices
xmlParseElementMixedContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks
parse the XML encoding name EncName
= *
xmlParseEncName_APIParam_1 is an XML parser context
xmlParseEncName_APIName returns the encoding name value or NULL
xmlParseEncodingDecl_APIParam_1 is an XML parser context
parse the XML encoding declaration EncodingDecl
xmlParseEncodingDecl_APIName returns the encoding value or NULL
= S ` encoding ' Eq this setups the conversion filters
xmlParseEndTag_APIParam_1 is an XML parser context
' > ' EntityDef
= EntityValue |
xmlParseEntityDecl_APIParam_1 is an XML parser context
parse an end of tag ETag
parse Reference declarations CharRef
That is to say
= ' & # ' + '
= ' < / ' Name S ?
' > ' With namespace ETag
= EntityValue | ExternalID NDataDecl
' | ' & # x ' + '
= ' < / ' QName S ?
= S ` NDATA ' S Name The Name must match the declared name of a notation
The declaration of a parameter entity must precede any reference to it
' > ' PEDecl
' Characters referred to using character references must match the production for Char
its replacement text should not be empty
For interoperability , , and neither the first nor last non-blank character of the replacement text should be a connector
An entity reference must not contain the name of an unparsed entity
xmlParseEntityRef_APIParam_1 is an XML parser context
parse < !
xmlParseEntityRef_APIName returns the xmlEntityPtr if found, or NULL otherwise
= GEDecl | PEDecl GEDecl
Similarly , the declaration of a general entity must precede any reference to it which appears in a default value in an attribute-list declaration
= ' < !
= ' < !
xmlParseEntityValue_APIParam_1 is an XML parser context
xmlParseEntityValue_APIName returns the EntityValue parsed with reference substituted or NULL
parse an Enumerated attribute type
Name -LRB- S ?
' | ' S ?
Name -RRB- * S ?
= NotationType | Enumeration NotationType
parse a value for ENTITY declarations EntityValue
AttValue -RRB- , the attribute must be specified for all elements of the type in the attribute-list declaration
The right angle bracket may be represented using the string '' & gt
= ` NOTATION ' S ' -LRB- ' S ?
parse ENTITY references declarations EntityRef
= ' & ' Name '
'' , and must , for compatibility , be escaped using '' & gt
= ' '' ' * ' '' ' | '' ' '' * '' ' ''
parse the declaration for a Mixed Element content The leading ' -LRB- ' and spaces have been skipped in xmlParseElementContentDecl Mixed
= ' -LRB- ' S ?
xmlParseEntityValue_APIParam_2 is a copy of the original entity value
a non-validating processor is not obligated to read and process their declarations
Note that
is a well-formedness constraint standalone =
for such documents , the rule that an entity must be declared ` yes '
'' or a character reference
' In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' '' , the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities
amp , lt , gt , apos , quot
xmlParseEnumeratedType_APIParam_1 is an XML parser context
xmlParseEnumeratedType_APIName returns XML_ATTRIBUTE_ENUMERATION or XML_ATTRIBUTE_NOTATION
parse an Enumeration attribute type
Nmtoken -LRB- S ?
xmlParseEnumeratedType_APIParam_2 is the enumeration xmlParseEnumeratedType_APIParam_2 built
= ' -LRB- ' S ?
' | ' S ?
Nmtoken -RRB- * S ? ' -RRB- '
Values of this type must match one of the Nmtoken tokens in the declaration
xmlParseEnumerationType_APIParam_1 is an XML parser context
xmlParseEnumerationType_APIName returns the enumeration attribute tree built while parsing
xmlParseExternalID_APIParam_1 is an XML parser context
xmlParseExternalID_APIParam_2 is a xmlChar ** receiving PubidLiteral
xmlParseExternalID_APIParam_3 is indicate
parse Markup declarations from an external subset extSubset
= textDecl ?
extSubsetDecl extSubsetDecl
= *
xmlParseExternalSubset_APIParam_1 is an XML parser context
xmlParseExternalID_APIName returns the function returns SystemLiteral and in the second case xmlParseExternalID_APIParam_2 receives PubidLiteral, is xmlParseExternalID_APIParam_3 is off it is possible to return NULL and have xmlParseExternalID_APIParam_2 set
xmlParseExternalSubset_APIParam_2 is the external identifier
xmlParseExternalSubset_APIParam_3 is the system identifier -LRB- or URL
Parse an External ID or a Public ID NOTE
Productions and interact badly since can generate ` PUBLIC ' S PubidLiteral S SystemLiteral ExternalID
parse Markup declarations markupdecl
= ` SYSTEM ' S SystemLiteral | ` PUBLIC ' S PubidLiteral S SystemLiteral PublicID
= ` PUBLIC ' S PubidLiteral
xmlParseMarkupDecl_APIParam_1 is an XML parser context
= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment Parameter-entity replacement text must be properly nested with markup declarations
In the internal DTD subset , parameter-entity references can occur only where markup declarations can occur , not within markup declarations
parse an XML Misc * optional field
= Comment | PI | S. xmlParseMisc_APIParam_1 is an XML parser context
parse an XML name
xmlParseName_APIParam_1 is an XML parser context
xmlParseName_APIName returns the Name parsed or NULL
= Letter | Digit | ' . '
parse specific PI ' < ?
xmlParseNamespace_APIParam_1 is an XML parser context
parse an XML Nmtoken
xmlParseNmtoken_APIParam_1 is an XML parser context
xmlParseNmtoken_APIName returns the Nmtoken parsed or NULL
= + Nmtokens
= Nmtoken *
xmlParseNotationDecl_APIParam_1 is an XML parser context
parse an Notation attribute type
parse a notation declaration NotationDecl
= ' < !
Name -LRB- S ?
' | ' S ?
' > ' Hence there is actually 3 choices
xmlParseNotationType_APIParam_1 is an XML parser context
Name -RRB- * S ? ' -RRB- '
xmlParseNotationType_APIName returns the notation attribute tree built while parsing
` PUBLIC ' S PubidLiteral ` PUBLIC ' S PubidLiteral S SystemLiteral and ` SYSTEM ' S SystemLiteral See the NOTE on xmlParseExternalID_APIName
Values of this type must match one of the notation names included in the declaration
all notation names in the declaration must be declared
The declaration of a parameter entity must precede any reference to it
parse PEReference declarations The entity content is handled directly by pushing it is content as a new input stream
misleading but this is handled
xmlParsePEReference_APIParam_1 is an XML parser context
That is to say
In a document with an external subset or external parameter entities with `` standalone = ` no ' ''
parse an XML Processing Instruction
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
PITarget -RRB- -RRB- ?
| ' - ' | '_' | '
= ' < ? '
' | CombiningChar | Extender Name
= * Names
= Name *
' ? > '
xmlParsePI_APIParam_1 is an XML parser context
parse the name of a PI PITarget
xmlParsePITarget_APIParam_1 is an XML parser context
= Name - -RRB-
xmlParsePITarget_APIName returns the PITarget name or NULL
xmlParsePubidLiteral_APIParam_1 is an XML parser context
xmlParsePubidLiteral_APIName returns the PubidLiteral parsed or NULL
xmlParseQuotedString_APIParam_1 is an XML parser context
xmlParseQuotedString_APIName returns the string parser or NULL
Parse and return a string between quotes or doublequotes TODO
Deprecated , to be removed at next drop of binary compatibility
the leading ` NOTATION ' S part has already being parsed ... NotationType
= EntityRef | CharRef
xmlParseReference_APIParam_1 is an XML parser context
xmlParseSDDecl_APIParam_1 is an XML parser context
= ` NOTATION ' S ' -LRB- ' S ?
parse a start of tag either for rule element or EmptyElement
In both case we do not parse the tag closing chars
support is still here
This is what the older xml-name Working Draft specified , a bunch of other stuff may still rely on it , so
- -LRB- TODO
remove from library To be removed at next drop of binary compatibility
' > ' No attribute name may appear more than once in the same start-tag or empty-element tag
= ' < ' Name * S ?
= ' % ' Name '
' / > ' No attribute name may appear more than once in the same start-tag or empty-element tag
= ' < ' Name * S ?
xmlParseStartTag_APIParam_1 is an XML parser context
xmlParseStartTag_APIName returns the element name parsed
parse an XML Literal SystemLiteral
= |

With namespace
xmlParseSystemLiteral_APIParam_1 is an XML parser context
= ' < ' QName * S ?
xmlParseSystemLiteral_APIName returns the SystemLiteral parsed or NULL
xmlParseSDDecl_APIName returns 1 if standalone="yes" 0 if standalone="no" -2 if standalone attribute is missing or invalid (A standalone value of -2 means that the XML declaration was found, but no value was specified for the standalone attribute
' > ' EmptyElement
' A parsed entity must not contain a recursive reference to itself , either directly or indirectly
parse an XML declaration header for external entities TextDecl
= ' < ?
EncodingDecl S ?
= ' < ' QName * S ?
xmlParseTextDecl_APIParam_1 is an XML parser context
parse an XML public literal PubidLiteral
parse the XML version
= S ` version ' Eq Eq
= S ?
parse the XML standalone declaration SDDecl
parse and handle entity references in content , depending on the SAX interface , this may end-up in a call to character_APIName
= ' '' ' PubidChar * ' '' ' | '' ' '' * '' ' ''
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''
The standalone document declaration must have the value `` no ''
= S tandalone ' Eq '' ' '' -RRB- | ' '' ' -RRB- -RRB- TODO of
- attributes with default values , , or - attributes with values subject to normalization , where the attribute appears in the document with a value which will change as a result of normalization , or - element types with element content , if white space occurs directly within any instance of those types
xmlParseVersionInfo_APIParam_1 is an XML parser context
xmlParseVersionInfo_APIName returns the version string, e.g
parse the XML version value
+ In practice allow
= ' 1 . '
xmlParseVersionNum_APIParam_1 is an XML parser context
xmlParseVersionNum_APIName returns the string giving the XML version number, or NULL
parse an XML declaration header XMLDecl
= ' < ?
xmlParseXMLDecl_APIParam_1 is an XML parser context
The declaration of a parameter entity must precede any reference to it
misleading but this is handled
In a document with an external subset or external parameter entities with `` standalone = ` no ' ''
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
A PEReference may have been detected in the current input stream the handling is done accordingly to http
xmlParserHandlePEReference_APIParam_1 is the parser context
/ / www.w3.org/TR/REC-xml#entproc i.e
- Included in literal in entity values - Included as Parameter Entity reference within DTDs
Remove , now deprecated ... the test is done directly in the content parsing routines
xmlParserHandleReference_APIParam_1 is the parser context
xmlParserInputShrink_APIName removes used input for the parser
xmlParserInputShrink_APIParam_1 is an XML parser input
xmlPopInput_APIParam_1 is an XML parser context
the current input pointed by ctxt->input came to an end pop it and return the next char
xmlPopInput_APIName returns the current xmlChar in the parser context
xmlPushInput_APIParam_1 is an XML parser context
switch to a new xmlPushInput_APIParam_2 stream which is stacked on top of the previous one
xmlPushInput_APIParam_2 is an XML parser xmlPushInput_APIParam_2 fragment
xmlPushInput_APIName returns -1 in case of error or the index in the xmlPushInput_APIParam_2 stack
parse an XML name but without consuming the input flow Needed for rollback cases
xmlScanName_APIParam_1 is an XML parser context
xmlScanName_APIName returns the Name parsed or NULL
seems deprecated now , only used in the default part of xmlParserHandleReference NameChar
Used only
= Letter | Digit | ' . '
xmlSetEntityReferenceFunc_APIParam_1 is A valid function
skip all blanks character found at that point in the input streams
xmlSkipBlankChars_APIParam_1 is the XML parser context
xmlSkipBlankChars_APIName returns the number of space chars skipped
parse an UTF8 encoded XML qualified xmlSplitQName_APIParam_2 string QName
= ?
= ' % ' Name '
xmlSplitQName_APIParam_1 is an XML parser context
xmlSplitQName_APIParam_2 is an XML parser context
xmlSplitQName_APIParam_3 is a xmlChar **
LocalPart Prefix
= NCName LocalPart
= NCName
xmlSplitQName_APIName returns the local part, and xmlSplitQName_APIParam_3 is updated to get the Prefix if any
xmlStringCurrentChar_APIParam_1 is the XML parser context
Set the function to call call back
xmlStringCurrentChar_APIParam_2 is pointer to the beginning of the char
xmlStringCurrentChar_APIParam_3 is pointer to the length of the char read
xmlStringCurrentChar_APIName returns the current char value and its length
It pops up finished entities in the process
Takes a entity string content and process to do the adequate substitutions
xmlStringDecodeEntities_APIParam_1 is the parser context
' A parsed entity must not contain a recursive reference to itself , either directly or indirectly
xmlStringDecodeEntities_APIParam_2 is the input string
xmlStringLenDecodeEntities_APIParam_2 is the input string
The caller must deallocate it
xmlStringLenDecodeEntities_APIParam_1 is the parser context
xmlStringLenDecodeEntities_APIParam_3 is the string length
xmlStringDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF
xmlStringLenDecodeEntities_APIParam_4 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF
xmlStringDecodeEntities_APIName returns A newly allocated string with the substitution done
The current char value , this may actually span multiple bytes in the input buffer
xmlStringLenDecodeEntities_APIName returns A newly allocated string with the substitution done
Takes a entity string content and process to do the adequate substitutions
The caller must deallocate it
| ' - ' | '_' | '
xmlSwitchEncoding_APIParam_1 is the parser context
' | CombiningChar | Extender Name
xmlSwitchEncoding_APIParam_2 is the encoding value
= * Names
xmlStringDecodeEntities_APIParam_4 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
= Name *
xmlSwitchEncoding_APIName returns 0 in case of success, -1 otherwise
xmlSwitchInputEncoding_APIParam_1 is the parser context
xmlStringDecodeEntities_APIParam_5 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
= EntityRef | CharRef PEReference
xmlSwitchInputEncoding_APIParam_2 is the xmlSwitchInputEncoding_APIParam_2 stream
xmlStringLenDecodeEntities_APIParam_7 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
= ' % ' Name '
xmlStringLenDecodeEntities_APIParam_6 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
xmlSwitchInputEncoding_APIParam_3 is the encoding xmlSwitchInputEncoding_APIParam_3
xmlSwitchInputEncoding_APIName returns 0 in case of success, -1 otherwise
xmlStringLenDecodeEntities_APIParam_5 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
xmlStringDecodeEntities_APIParam_6 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
= EntityRef | CharRef PEReference
= ' % ' Name '
xmlSwitchToEncoding_APIParam_1 is the parser context
xmlSwitchToEncoding_APIParam_2 is the encoding xmlSwitchToEncoding_APIParam_2
xmlSwitchToEncoding_APIName returns 0 in case of success, -1 otherwise
the input functions
change
Daniel Veillard
xmlAddAttributeDecl_APIParam_1 is the validation context
Register a new attribute declaration Note that @tree becomes the ownership of the DTD
xmlAddAttributeDecl_APIParam_2 is pointer to the DTD
the xmlSwitchInputEncoding_APIParam_2 functions
change
xmlAddAttributeDecl_APIParam_3 is the element xmlAddAttributeDecl_APIParam_4
xmlAddAttributeDecl_APIParam_4 is the attribute xmlAddAttributeDecl_APIParam_4
xmlAddAttributeDecl_APIParam_5 is the attribute namespace prefix
xmlAddAttributeDecl_APIParam_6 is the attribute xmlAddAttributeDecl_APIParam_6
An entity reference must not contain the name of an unparsed entity CharRef
= EntityRef | CharRef EntityRef
= ' & # ' + '
= ' & ' Name '
the input functions
change
' | ' & # x ' + '
' the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities
amp , lt , gt , apos , quot
' A PEReference may have been detected in the current input stream the handling is done accordingly to http
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''
xmlAddAttributeDecl_APIParam_7 is the attribute default xmlAddAttributeDecl_APIParam_6
xmlAddAttributeDecl_APIParam_8 is the attribute default value
xmlAddAttributeDecl_APIName returns NULL if not new, otherwise the attribute decl
Register a new element declaration
xmlAddElementDecl_APIParam_1 is the validation context
xmlAddElementDecl_APIParam_2 is pointer to the DTD
xmlAddAttributeDecl_APIParam_9 is
xmlAddElementDecl_APIParam_3 is the entity xmlAddElementDecl_APIParam_3
xmlAddElementDecl_APIParam_4 is the element xmlAddElementDecl_APIParam_4
xmlAddElementDecl_APIParam_5 is the element xmlAddElementDecl_APIParam_5 tree or NULL
xmlAddElementDecl_APIName returns NULL if not, otherwise the entity
Register a new id declaration
xmlAddID_APIParam_1 is the validation context
xmlAddID_APIParam_2 is pointer to the document
xmlAddID_APIParam_3 is the xmlAddID_APIParam_3 name
xmlAddID_APIParam_4 is the attribute holding the ID
xmlAddID_APIName returns NULL if not, otherwise the new xmlIDPtr
Register a new notation declaration
xmlAddNotationDecl_APIParam_1 is the validation context
xmlAddNotationDecl_APIParam_2 is pointer to the DTD
xmlAddNotationDecl_APIParam_3 is the entity xmlAddNotationDecl_APIParam_3
xmlAddNotationDecl_APIParam_4 is the public identifier or NULL
xmlAddNotationDecl_APIParam_5 is the system identifier or NULL
xmlAddNotationDecl_APIName returns NULL if not, otherwise the entity
Register a new ref declaration
xmlAddRef_APIParam_1 is the validation context
xmlAddRef_APIParam_2 is pointer to the document
xmlAddRef_APIParam_3 is the xmlAddRef_APIParam_3 name
xmlAddRef_APIParam_4 is the attribute holding the Ref
xmlAddRef_APIName returns NULL if not, otherwise the new xmlRefPtr
Build a copy of an attribute xmlCopyAttributeTable_APIParam_1
xmlCopyAttributeTable_APIParam_1 is An attribute xmlCopyAttributeTable_APIParam_1
xmlCopyAttributeTable_APIName returns the new xmlAttributeTablePtr or NULL in case of error
Build a copy of an element content description
xmlCopyDocElementContent_APIParam_1 is the document owning the element declaration
xmlCopyDocElementContent_APIParam_2 is An element content pointer
xmlCopyDocElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error
Build a copy of an element content description
Deprecated , use xmlCopyDocElementContent instead
xmlCopyElementContent_APIParam_1 is An element content pointer
xmlCopyElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error
Build a copy of an element xmlCopyElementTable_APIParam_1
xmlCopyElementTable_APIParam_1 is An element xmlCopyElementTable_APIParam_1
xmlCopyElementTable_APIName returns the new xmlElementTablePtr or NULL in case of error
Copy an enumeration attribute node
xmlCopyEnumeration_APIParam_1 is the tree to copy
xmlCopyEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error
Build a copy of a notation xmlCopyNotationTable_APIParam_1
xmlCopyNotationTable_APIParam_1 is A notation xmlCopyNotationTable_APIParam_1
xmlCopyNotationTable_APIName returns the new xmlNotationTablePtr or NULL in case of error
create and initialize an enumeration attribute node
xmlCreateEnumeration_APIParam_1 is the enumeration xmlCreateEnumeration_APIParam_1 or NULL
xmlCreateEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error
This will dump the content of the attribute declaration as an XML DTD definition
xmlDumpAttributeDecl_APIParam_1 is the XML buffer output
xmlDumpAttributeDecl_APIParam_2 is An attribute declaration
This will dump the content of the attribute xmlDumpAttributeTable_APIParam_2 as an XML DTD definition
xmlDumpAttributeTable_APIParam_1 is the XML buffer output
xmlDumpAttributeTable_APIParam_2 is An attribute table
This will dump the content of the element declaration as an XML DTD definition
xmlDumpElementDecl_APIParam_1 is the XML buffer output
xmlDumpElementDecl_APIParam_2 is An element table
xmlDumpElementTable_APIParam_1 is the XML buffer output
This will dump the content of the element xmlDumpElementTable_APIParam_2 as an XML DTD definition
xmlDumpElementTable_APIParam_2 is An element table
This will dump the content the notation declaration as an XML DTD definition
xmlDumpNotationDecl_APIParam_1 is the XML buffer output
xmlDumpNotationDecl_APIParam_2 is A notation declaration
This will dump the content of the notation xmlDumpNotationTable_APIParam_2 as an XML DTD definition
xmlDumpNotationTable_APIParam_1 is the XML buffer output
xmlDumpNotationTable_APIParam_2 is A notation table
Deallocate the memory used by an entities hash xmlFreeAttributeTable_APIParam_1
xmlFreeAttributeTable_APIParam_1 is An attribute table
Free an element content structure
The whole subtree is removed
xmlFreeDocElementContent_APIParam_1 is the document owning the element declaration
xmlFreeDocElementContent_APIParam_2 is the element content tree to free
Free an element content structure
The whole subtree is removed
Deprecated , use xmlFreeDocElementContent instead
xmlFreeElementContent_APIParam_1 is the element content tree to free
Deallocate the memory used by an element hash xmlFreeElementTable_APIParam_1
xmlFreeElementTable_APIParam_1 is An element table
free an enumeration attribute node
xmlFreeEnumeration_APIParam_1 is the tree to free
Deallocate the memory used by an ID hash xmlFreeIDTable_APIParam_1
xmlFreeIDTable_APIParam_1 is An id table
Deallocate the memory used by an entities hash xmlFreeNotationTable_APIParam_1
xmlFreeNotationTable_APIParam_1 is An notation table
Deallocate the memory used by an Ref hash xmlFreeRefTable_APIParam_1
xmlFreeRefTable_APIParam_1 is An ref table
Free a validation context structure
xmlFreeValidCtxt_APIParam_1 is the validation context to free
Search the DTD for the description of this attribute on this element
xmlGetDtdAttrDesc_APIParam_1 is a pointer to the DtD to search
xmlGetDtdAttrDesc_APIParam_2 is the element xmlGetDtdAttrDesc_APIParam_3
xmlGetDtdAttrDesc_APIParam_3 is the attribute xmlGetDtdAttrDesc_APIParam_3
xmlGetDtdAttrDesc_APIName returns the xmlAttributePtr if found or NULL
Search the DTD for the description of this element
xmlGetDtdElementDesc_APIParam_1 is a pointer to the DtD to search
xmlGetDtdElementDesc_APIParam_2 is the element xmlGetDtdElementDesc_APIParam_2
xmlGetDtdElementDesc_APIName returns the xmlElementPtr if found or NULL
Search the DTD for the description of this notation
xmlGetDtdNotationDesc_APIParam_1 is a pointer to the DtD to search
xmlGetDtdNotationDesc_APIParam_2 is the notation xmlGetDtdNotationDesc_APIParam_2
xmlGetDtdNotationDesc_APIName returns the xmlNotationPtr if found or NULL
Search the DTD for the description of this qualified attribute on this element
xmlGetDtdQAttrDesc_APIParam_1 is a pointer to the DtD to search
xmlGetDtdQAttrDesc_APIParam_2 is the element xmlGetDtdQAttrDesc_APIParam_3
xmlGetDtdQAttrDesc_APIParam_3 is the attribute xmlGetDtdQAttrDesc_APIParam_3
xmlGetDtdQAttrDesc_APIParam_4 is the attribute namespace xmlGetDtdQAttrDesc_APIParam_4
xmlGetDtdQAttrDesc_APIName returns the xmlAttributePtr if found or NULL
Search the DTD for the description of this element
xmlGetDtdQElementDesc_APIParam_1 is a pointer to the DtD to search
xmlGetDtdQElementDesc_APIParam_2 is the element xmlGetDtdQElementDesc_APIParam_2
xmlGetDtdQElementDesc_APIParam_3 is the element namespace xmlGetDtdQElementDesc_APIParam_3
xmlGetDtdQElementDesc_APIName returns the xmlElementPtr if found or NULL
Search the attribute declaring the given xmlGetID_APIParam_2
xmlGetID_APIParam_1 is pointer to the document
xmlGetID_APIParam_2 is the xmlGetID_APIParam_2 value
xmlGetID_APIName returns NULL if not found, otherwise the xmlAttrPtr defining the ID
Find the set of references for the supplied xmlGetRefs_APIParam_2
xmlGetRefs_APIParam_1 is pointer to the document
xmlGetRefs_APIParam_2 is the xmlGetRefs_APIParam_2 value
xmlGetRefs_APIName returns NULL if not found, otherwise node set for the ID
Determine whether an attribute is of type ID
xmlIsID_APIParam_1 is the document
xmlIsID_APIParam_2 is the element carrying the attribute
In the case of HTML documents parsed with the HTML parser , ID detection is done systematically
xmlIsID_APIParam_3 is the attribute
xmlIsID_APIName returns 0 or 1 depending on the lookup result
In case we have DTD this is done
xmlIsMixedElement_APIParam_1 is the document
Search in the DtDs
xmlIsMixedElement_APIParam_2 is the element xmlIsMixedElement_APIParam_2
Determine whether an attribute is of type Ref
xmlIsMixedElement_APIName returns 0 if no, 1 if yes, and -1 if no element description is available
xmlIsRef_APIParam_1 is the document
In case we have DTD this is simple , otherwise we use an heuristic
xmlIsRef_APIParam_2 is the element carrying the attribute
name Ref
xmlIsRef_APIParam_3 is the attribute
xmlIsRef_APIName returns 0 or 1 depending on the lookup result
Allocate an element content structure for the document
xmlNewDocElementContent_APIParam_1 is the document
xmlNewDocElementContent_APIParam_2 is the subelement xmlNewDocElementContent_APIParam_2 or NULL
xmlNewDocElementContent_APIParam_3 is the xmlNewDocElementContent_APIParam_3 of element content decl
xmlNewDocElementContent_APIName returns NULL if not, otherwise the new element content structure
Allocate an element content structure
Deprecated in favor of xmlNewDocElementContent
xmlNewElementContent_APIParam_1 is the subelement xmlNewElementContent_APIParam_1 or NULL
xmlNewElementContent_APIParam_2 is the xmlNewElementContent_APIParam_2 of element content decl
xmlNewElementContent_APIName returns NULL if not, otherwise the new element content structure
Allocate a validation context structure
xmlNewValidCtxt_APIName returns NULL if not, otherwise the new validation context structure
Remove the given attribute from the ID table maintained internally
xmlRemoveID_APIParam_1 is the document
xmlRemoveID_APIParam_2 is the attribute
xmlRemoveID_APIName returns -1 if the lookup failed and 0 otherwise
Remove the given attribute from the Ref table maintained internally
xmlRemoveRef_APIParam_1 is the document
xmlRemoveRef_APIParam_2 is the attribute
xmlRemoveRef_APIName returns -1 if the lookup failed and 0 otherwise
xmlSnprintfElementContent_APIParam_1 is an output buffer
xmlSnprintfElementContent_APIParam_2 is the buffer xmlSnprintfElementContent_APIParam_2
This will dump the xmlSnprintfElementContent_APIParam_3 of the element xmlSnprintfElementContent_APIParam_3 definition Intended just for the debug routine
xmlSnprintfElementContent_APIParam_3 is An element table
Deprecated , unsafe , use xmlSnprintfElementContent
xmlSprintfElementContent_APIParam_1 is an output buffer
xmlSprintfElementContent_APIParam_2 is An element table
Build the automata associated to the content model of this element
xmlValidBuildContentModel_APIParam_1 is a validation context
xmlValidBuildContentModel_APIParam_2 is an element declaration node
xmlValidBuildContentModel_APIName returns 1 in case of success, 0 in case of error
xmlValidCtxtNormalizeAttributeValue_APIParam_1 is the validation context or NULL
Also check VC
xmlValidCtxtNormalizeAttributeValue_APIParam_2 is the document
Standalone Document Declaration in P32 , and update ctxt - > valid accordingly
xmlValidCtxtNormalizeAttributeValue_APIParam_3 is the parent
xmlValidCtxtNormalizeAttributeValue_APIParam_4 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_4
xmlValidCtxtNormalizeAttributeValue_APIParam_5 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5
xmlValidCtxtNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidCtxtNormalizeAttributeValue_APIParam_0 value
Build/extend a list of potential children allowed by the content tree
xmlValidGetPotentialChildren_APIParam_1 is an element content tree
xmlSnprintfElementContent_APIParam_4 is 1
xmlValidGetPotentialChildren_APIParam_2 is an array to store the list of child xmlValidGetPotentialChildren_APIParam_2
xmlValidGetPotentialChildren_APIParam_3 is a pointer to the number of element in the list
xmlValidGetPotentialChildren_APIParam_4 is the size of the array
xmlValidGetPotentialChildren_APIName returns the number of element in the list, or -1 in case of error
xmlSprintfElementContent_APIParam_3 is 1
xmlValidGetValidElements_APIParam_1 is an element to insert after
xmlValidGetValidElements_APIName returns the list of authorized children to insert within an existing tree while respecting the validity constraints forced by the Dtd
xmlValidGetValidElements_APIParam_2 is an element to insert xmlValidGetValidElements_APIParam_2
xmlValidGetValidElements_APIParam_3 is an array to store the list of child xmlValidGetValidElements_APIParam_3
Does the validation related extra step of the normalization of attribute values
xmlValidGetValidElements_APIParam_4 is the size of the array
xmlValidGetValidElements_APIName returns the number of element in the list, or -1 in case of error
If the function returns the value @max the caller is invited to grow the receiving array and retry
xmlValidNormalizeAttributeValue_APIParam_1 is the document
xmlValidNormalizeAttributeValue_APIParam_2 is the parent
xmlValidNormalizeAttributeValue_APIParam_3 is the attribute xmlValidNormalizeAttributeValue_APIParam_3
xmlValidNormalizeAttributeValue_APIParam_4 is the attribute xmlValidNormalizeAttributeValue_APIParam_4
Does the validation related extra step of the normalization of attribute values
The insertion point is defined using @prev and @next in the following ways
to insert before ` node '
xmlValidGetValidElements -LRB- node - > prev , node , ... to insert xmlValidGetValidElements_APIParam_2 ` node '
xmlValidGetValidElements -LRB- node , node - > next , ... to replace ` node '
xmlValidGetValidElements -LRB- node - > prev , node - > next , ... to prepend a child to ` node '
xmlValidGetValidElements -LRB- NULL , node - > childs , to append a child to ` node '
xmlValidGetValidElements -LRB- node - > last , NULL , ... pointers to the element xmlValidGetValidElements_APIParam_3 are inserted at the beginning of the array and do not need to be freed
the XML processor must further process the normalized attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character
the XML processor must further process the normalized attribute xmlValidNormalizeAttributeValue_APIParam_4 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character
xmlValidNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidNormalizeAttributeValue_APIParam_0 value
xmlValidateAttributeDecl_APIParam_1 is the validation context
xmlValidateAttributeDecl_APIParam_2 is a document instance
xmlValidateAttributeDecl_APIParam_3 is an attribute definition
xmlValidateAttributeDecl_APIName returns 1 if valid or 0 otherwise
Try to validate a single attribute definition basically it does the following checks as described by the XML-1 .0 recommendation
- - - The ID/IDREF uniqueness and matching are done separately
Validate that the given attribute xmlValidateAttributeValue_APIParam_2 match the proper production Values of xmlValidateAttributeValue_APIParam_1 ID must match the Name production
Values of xmlValidateAttributeValue_APIParam_1 IDREF must match the Name production , and values of xmlValidateAttributeValue_APIParam_1 IDREFS must match Names
xmlValidateAttributeValue_APIParam_1 is an attribute xmlValidateAttributeValue_APIParam_1
Values of xmlValidateAttributeValue_APIParam_1 ENTITY must match the Name production , values of xmlValidateAttributeValue_APIParam_1 ENTITIES must match Names
Values of xmlValidateAttributeValue_APIParam_1 NMTOKEN must match the Nmtoken production
values of xmlValidateAttributeValue_APIParam_1 NMTOKENS must match Nmtokens
xmlValidateAttributeValue_APIParam_2 is an attribute xmlValidateAttributeValue_APIParam_2
xmlValidateAttributeValue_APIName returns 1 if valid or 0 otherwise
validates the internal and external subset and validate the document tree
xmlValidateDocument_APIParam_1 is the validation context
Try to validate the document instance basically the document instance does the all the checks described by the XML Rec i.e
xmlValidateDocument_APIParam_2 is a document instance
xmlValidateDocument_APIName returns 1 if valid or 0 otherwise
xmlValidateDocumentFinal_APIParam_1 is the validation context
xmlValidateDocumentFinal_APIParam_2 is a document instance
xmlValidateDocumentFinal_APIName returns 1 if valid or 0 otherwise
Try to validate the document against the xmlValidateDtd_APIParam_3 instance Basically it does check all the definitions in the DtD
xmlValidateDtd_APIParam_1 is the validation context
Note the the internal subset is de-coupled -LRB- i.e
xmlValidateDtd_APIParam_2 is a document instance
xmlValidateDtd_APIParam_3 is a xmlValidateDtd_APIParam_3 instance
xmlValidateDtd_APIName returns 1 if valid or 0 otherwise
xmlValidateDtdFinal_APIParam_1 is the validation context
Does the final step for the document validation once all the incremental validation steps have been completed basically it does the following checks described by the XML Rec Check all the IDREF/IDREFS attributes definition for validity
xmlValidateDtdFinal_APIParam_2 is a document instance
- check that NOTATION type attributes default or possible values matches one of the defined notations
xmlValidateDtdFinal_APIName returns 1 if valid or 0 if invalid and -1 if not well-formed
Try to validate the subtree under an element
xmlValidateElement_APIParam_1 is the validation context
xmlValidateElement_APIParam_2 is a document instance
xmlValidateElement_APIParam_3 is an element instance
xmlValidateElement_APIName returns 1 if valid or 0 otherwise
xmlValidateElementDecl_APIParam_1 is the validation context
could give problems
not used -RRB- , which
xmlValidateElementDecl_APIParam_2 is a document instance
xmlValidateElementDecl_APIParam_3 is an element definition
xmlValidateElementDecl_APIName returns 1 if valid or 0 otherwise
Try to validate a single element definition basically it does the following checks as described by the XML-1 .0 recommendation
- - -
Validate that the given xmlValidateNameValue_APIParam_1 match Name production
xmlValidateNameValue_APIParam_1 is an Name xmlValidateNameValue_APIParam_1
xmlValidateNameValue_APIName returns 1 if valid or 0 otherwise
Validate that the given xmlValidateNamesValue_APIParam_1 match Names production
xmlValidateNamesValue_APIParam_1 is an Names xmlValidateNamesValue_APIParam_1
xmlValidateNamesValue_APIName returns 1 if valid or 0 otherwise
Validate that the given xmlValidateNmtokenValue_APIParam_1 match Nmtoken production
Does the final step for the dtds validation once all the subsets have been parsed basically the dtds validation does the following checks described by the XML Rec - check that ENTITY and ENTITIES type attributes default or possible values matches one of the defined entities
xmlValidateNmtokenValue_APIParam_1 is an Nmtoken xmlValidateNmtokenValue_APIParam_1
xmlValidateNmtokenValue_APIName returns 1 if valid or 0 otherwise
Validate that the given xmlValidateNmtokensValue_APIParam_1 match Nmtokens production
xmlValidateNmtokensValue_APIParam_1 is an Nmtokens xmlValidateNmtokensValue_APIParam_1
xmlValidateNmtokensValue_APIName returns 1 if valid or 0 otherwise
xmlValidateNotationDecl_APIParam_1 is the validation context
xmlValidateNotationDecl_APIParam_2 is a document instance
xmlValidateNotationDecl_APIParam_3 is a notation definition
xmlValidateNotationDecl_APIName returns 1 if valid or 0 otherwise
Validate that the given name match a notation declaration
-
xmlValidateNotationUse_APIParam_1 is the validation context
Try to validate a single notation definition basically it does the following checks as described by the XML-1 .0 recommendation
xmlValidateNotationUse_APIParam_2 is the document
xmlValidateNotationUse_APIParam_3 is the notation name to check
- it seems that no validity constraint exists on notation declarations But xmlValidateNotationDecl_APIName get called anyway
xmlValidateNotationUse_APIName returns 1 if valid or 0 otherwise
xmlValidateOneAttribute_APIParam_1 is the validation context
xmlValidateOneAttribute_APIParam_2 is a document instance
xmlValidateOneAttribute_APIParam_3 is an element instance
xmlValidateOneAttribute_APIParam_4 is an attribute instance
xmlValidateOneAttribute_APIParam_5 is the attribute xmlValidateOneAttribute_APIParam_5
xmlValidateOneAttribute_APIName returns 1 if valid or 0 otherwise
Try to validate a single attribute for an element basically it does the following checks as described by the XML-1 .0 recommendation
The ID/IDREF checkings are done separately
xmlValidateOneElement_APIParam_1 is the validation context
xmlValidateOneElement_APIParam_2 is a document instance
xmlValidateOneElement_APIParam_3 is an element instance
xmlValidateOneElement_APIName returns 1 if valid or 0 otherwise
xmlValidateOneNamespace_APIParam_1 is the validation context
xmlValidateOneNamespace_APIParam_2 is a document instance
Try to validate a single element and it is attributes , basically it does the following checks as described by the XML-1 .0 recommendation
xmlValidateOneNamespace_APIParam_3 is an element instance
xmlValidateOneNamespace_APIParam_4 is the namespace xmlValidateOneNamespace_APIParam_4
- - - - - - - - The ID/IDREF uniqueness and matching are done separately
xmlValidateOneNamespace_APIParam_5 is an namespace declaration instance
- - call xmlValidateOneAttribute_APIName for each attribute present
xmlValidateOneNamespace_APIParam_6 is the attribute xmlValidateOneNamespace_APIParam_6
xmlValidateOneNamespace_APIName returns 1 if valid or 0 otherwise
Pop the element end from the validation stack
Try to validate a single namespace declaration for an element basically it does the following checks as described by the XML-1 .0 recommendation
xmlValidatePopElement_APIParam_1 is the validation context
xmlValidatePopElement_APIParam_2 is a document instance
xmlValidatePopElement_APIParam_3 is an element instance
xmlValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise
xmlValidatePopElement_APIParam_4 is the qualified name as appearing in the serialization
check the CData parsed for validation in the current stack
xmlValidatePushCData_APIParam_1 is the validation context
xmlValidatePushCData_APIParam_2 is some character xmlValidatePushCData_APIParam_2 read
xmlValidatePushCData_APIParam_3 is the length of the xmlValidatePushCData_APIParam_2
xmlValidatePushCData_APIName returns 1 if no validation problem was found or 0 otherwise
- - - - - - - - The ID/IDREF uniqueness and matching are done separately
Push a new element start on the validation stack
xmlValidatePushElement_APIParam_1 is the validation context
xmlValidatePushElement_APIParam_2 is a document instance
xmlValidatePushElement_APIParam_3 is an element instance
xmlValidatePushElement_APIParam_4 is the qualified name as appearing in the serialization
xmlValidatePushElement_APIName returns 1 if no validation problem was found or 0 otherwise
xmlValidateRoot_APIParam_1 is the validation context
xmlValidateRoot_APIParam_2 is a document instance
xmlValidateRoot_APIName returns 1 if valid or 0 otherwise
This is a message oriented function similar to an * printf function
Try to validate a the root element basically it does the following check as described by the XML-1 .0 recommendation
xmlValidityErrorFunc_APIParam_2 is xmlValidityErrorFunc_APIParam_3 string to format * printf like vararg xmlValidityErrorFunc_APIParam_3 remaining arguments to xmlValidityErrorFunc_APIParam_3 format
Callback called
- it does not try to recurse or apply other check to the element
This is a message oriented function similar to an * printf function
Daniel Veillard
xmlValidityErrorFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityErrorFunc_APIParam_3 comes from ctxt - > userData
ctxt - > userData xmlValidityErrorFunc_APIParam_3 be changed by xmlValidityErrorFunc_APIParam_3 user
xmlValidityWarningFunc_APIParam_2 is xmlValidityWarningFunc_APIParam_3 string to format * printf like vararg xmlValidityWarningFunc_APIParam_3 remaining arguments to xmlValidityWarningFunc_APIParam_3 format
Debugging facility provides the number of allocated nodes over lifetime
Callback called
xmlExpCtxtNbCons_APIParam_1 is an expression context
xmlValidityWarningFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityWarningFunc_APIParam_3 comes from ctxt - > userData
xmlExpCtxtNbCons_APIName returns the number of nodes ever allocated or -1 in case of error
ctxt - > userData xmlValidityWarningFunc_APIParam_3 be changed by xmlValidityWarningFunc_APIParam_3 user
Debugging facility provides the number of allocated nodes at a that point
xmlExpCtxtNbNodes_APIParam_1 is an expression context
xmlExpCtxtNbNodes_APIName returns the number of nodes in use or -1 in case of error
Serialize the expression as compiled to the buffer
xmlExpDump_APIParam_1 is a buffer to receive the output
xmlExpDump_APIParam_2 is the compiled expression
xmlExpExpDerive_APIParam_1 is the expressions context
xmlExpExpDerive_APIParam_2 is the englobing expression
xmlExpExpDerive_APIParam_3 is the subexpression
Dereference the expression
xmlExpExpDerive_APIName returns the resulting expression or NULL in case of internal error, the result must be freed
xmlExpFree_APIParam_1 is the expression context
xmlExpFree_APIParam_2 is the expression
Free an expression context
xmlExpFreeCtxt_APIParam_1 is an expression context
Find all the strings used in @exp and store them in @list
xmlExpGetLanguage_APIParam_1 is the expression context
xmlExpGetLanguage_APIParam_2 is the expression
Evaluates the expression resulting from @exp consuming a xmlExpExpDerive_APIParam_3 expression @sub Based on algebraic derivation and sometimes direct Brzozowski derivation it usually tatkes less than linear time and can handle expressions generating infinite languages
xmlExpGetLanguage_APIParam_3 is where to store the tokens
xmlExpGetLanguage_APIParam_4 is the allocated length of @list
xmlExpGetLanguage_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings
for  | c it will return the list
Find all the strings that appears at the start of the languages accepted by @exp and store them in @list
xmlExpGetStart_APIParam_1 is the expression context
xmlExpGetStart_APIParam_2 is the expression
xmlExpGetStart_APIParam_3 is where to store the tokens
xmlExpGetStart_APIParam_4 is the allocated length of @list
xmlExpGetStart_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings
xmlExpIsNillable_APIParam_1 is the expression
xmlExpIsNillable_APIName returns 1 if nillable, 0 if not and -1 in case of error
Indicate the maximum number of input a expression can accept
xmlExpMaxToken_APIParam_1 is a compiled expression
xmlExpMaxToken_APIName returns the maximum length or -1 in case of error
Get the atom associated to this xmlExpNewAtom_APIParam_2 from that context
xmlExpNewAtom_APIParam_1 is the expression context
xmlExpNewAtom_APIParam_2 is the atom xmlExpNewAtom_APIParam_2
xmlExpNewAtom_APIParam_3 is the atom xmlExpNewAtom_APIParam_2 length in byte
xmlExpNewAtom_APIName returns the node or NULL in case of error
Creates a new context for manipulating expressions
xmlExpNewCtxt_APIParam_1 is the maximum number of nodes
xmlExpNewCtxt_APIParam_2 is optional dictionary to use internally
xmlExpNewCtxt_APIName returns the context or NULL in case of error
Finds nillable , i.e
xmlExpNewOr_APIParam_1 is the expression context

xmlExpNewOr_APIParam_2 is xmlExpNewOr_APIParam_2 expression
xmlExpNewOr_APIParam_3 is xmlExpNewOr_APIParam_3 expression
xmlExpNewOr_APIName returns the node or NULL in case of error
xmlExpNewRange_APIParam_1 is the expression context
xmlExpNewRange_APIParam_2 is the expression to be repeated
xmlExpNewRange_APIParam_3 is the lower bound for the repetition
xmlExpNewRange_APIParam_4 is the upper bound for the repetition , -1 means infinite
xmlExpNewRange_APIName returns the node or NULL in case of error
xmlExpNewSeq_APIParam_1 is the expression context
xmlExpNewSeq_APIParam_2 is xmlExpNewSeq_APIParam_2 expression
xmlExpNewSeq_APIParam_3 is xmlExpNewSeq_APIParam_3 expression
xmlExpNewSeq_APIName returns the node or NULL in case of error
xmlExpParse_APIParam_1 is the expressions context
xmlExpParse_APIParam_2 is the 0 terminated string
xmlExpParse_APIName returns a new expression or NULL in case of failure
Increase the reference count of the expression
Get the atom associated to the choice @left | @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure
xmlExpRef_APIParam_1 is the expression
Minimal parser for regexps , it understand the following constructs - string terminals - choice operator | - sequence operator , - subexpressions - usual cardinality operators + * and ?
xmlExpStringDerive_APIParam_1 is the expression context
Do one step of Brzozowski derivation of the expression @exp with respect to the input string
Get the atom associated to the range -LCB- @min , @max -RCB- Note that @subset is consumed in the operation , to keep an handle on @subset use xmlExpRef_APIName and use xmlExpFree_APIName to release @subset , this is true even in case of failure
xmlExpStringDerive_APIParam_2 is the expression
xmlExpStringDerive_APIParam_3 is the string
xmlExpStringDerive_APIName returns the resulting expression or NULL in case of internal error
Check whether @exp accepts all the languages accexpted by @sub the input being a subexpression
xmlExpSubsume_APIParam_1 is the expressions context
xmlExpSubsume_APIParam_2 is the englobing expression
xmlExpSubsume_APIParam_3 is the subexpression
xmlExpSubsume_APIName returns 1 if true 0 if false and -1 in case of failure
Get the atom associated to the sequence @left , @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure
- finite sequences -LCB- min , max -RCB- - infinite sequences -LCB- min , * -RCB- There is minimal checkings made especially no checking on strings values
Callback function
xmlExpStringDerive_APIParam_4 is the string xmlExpStringDerive_APIParam_4 in bytes
xmlRegExecCallbacks_APIParam_1 is the regular expression context
xmlRegExecCallbacks_APIParam_2 is the current xmlRegExecCallbacks_APIParam_2 string
xmlRegExecCallbacks_APIParam_3 is transition data
xmlRegExecCallbacks_APIParam_4 is input data
The xmlRegExecErrInfo_APIParam_2 xmlRegExecErrInfo_APIParam_5
xmlRegExecErrInfo_APIParam_2 is return value for the error xmlRegExecErrInfo_APIParam_2
xmlRegExecErrInfo_APIParam_1 is a regexp execution context generating an error
xmlRegExecErrInfo_APIParam_3 is pointer to the number of accepted xmlRegExecErrInfo_APIParam_5 IN/OUT
xmlRegExecErrInfo_APIParam_4 is return number of negative transitions
xmlRegExecErrInfo_APIParam_5 is pointer to the array of acceptable xmlRegExecErrInfo_APIParam_5
xmlRegExecErrInfo_APIParam_6 is return value if this was a xmlRegExecErrInfo_APIParam_6 state
xmlRegExecErrInfo_APIName returns will be freed with the @exec context and do not need to be deallocated
xmlRegExecErrInfo returns 0 in case of success or -1 in case of error
The string xmlRegExecNextValues_APIParam_4
xmlRegExecNextValues_APIParam_1 is a regexp execution context
xmlRegExecNextValues_APIParam_2 is pointer to the number of accepted xmlRegExecNextValues_APIParam_4 IN/OUT
xmlRegExecNextValues_APIParam_3 is return number of negative transitions
xmlRegExecNextValues_APIParam_4 is pointer to the array of acceptable xmlRegExecNextValues_APIParam_4
xmlRegExecNextValues_APIParam_5 is return value if this was a xmlRegExecNextValues_APIParam_5 state
xmlRegExecNextValues_APIName returns will be freed with the @exec context and do not need to be deallocated
xmlRegExecNextValues returns 0 in case of success or -1 in case of error
Push one input token in the execution context
xmlRegExecPushString_APIParam_1 is a regexp execution context or NULL to indicate the end
xmlRegExecPushString_APIParam_2 is a string token input
Extract informations from the regexp execution, the parameter @values must point to an array of @nbval string pointers on return xmlRegExecNextValues_APIParam_2 will contain the number of possible strings in that state and the @values array will be updated with them
Extract error informations from the regexp execution, the parameter @string will be updated with the value pushed and not accepted, the parameter @values must point to an array of @nbval xmlRegExecErrInfo_APIParam_2 pointers on return xmlRegExecErrInfo_APIParam_3 will contain the number of possible strings in that state and the @values array will be updated with them
xmlRegExecPushString_APIParam_3 is xmlRegExecPushString_APIParam_3 associated to the token to reuse in callbacks
Push one input token in the execution context
xmlRegExecPushString_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString_APIParam_2 in case of error
xmlRegExecPushString2_APIParam_1 is a regexp execution context or NULL to indicate the end
xmlRegExecPushString2_APIParam_2 is the first string token input
xmlRegExecPushString2_APIParam_3 is the second string token input
xmlRegExecPushString2_APIParam_4 is xmlRegExecPushString2_APIParam_4 associated to the token to reuse in callbacks
Free the structures associated to a regular expression evaulation context
xmlRegFreeExecCtxt_APIParam_1 is a regular expression evaulation context
xmlRegExecPushString2_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString2_APIParam_2 in case of error
Free a xmlRegFreeRegexp_APIParam_1
xmlRegFreeRegexp_APIParam_1 is the regexp
Build a context used for progressive evaluation of a regexp
xmlRegNewExecCtxt_APIParam_1 is a precompiled regular expression
xmlRegNewExecCtxt_APIParam_2 is a xmlRegNewExecCtxt_APIParam_2 function used for handling progresses in the automata matching phase
xmlRegNewExecCtxt_APIParam_3 is the context xmlRegNewExecCtxt_APIParam_3 associated to the xmlRegNewExecCtxt_APIParam_2 in this context
xmlRegNewExecCtxt_APIName returns the new context
xmlRegexpCompile_APIParam_1 is a regular expression string
xmlRegexpCompile_APIName returns the compiled expression or NULL in case of error
xmlRegexpExec_APIParam_1 is the compiled regular expression
Parses a regular expression conforming to XML Schemas Part 2 Datatype Appendix F and builds an automata suitable for testing strings against that regular expression
xmlRegexpExec_APIParam_2 is the value to check against the regular expression
xmlRegexpExec_APIName returns 1 if it matches, 0 if not and a negative value in case of error
xmlRegexpIsDeterminist_APIParam_1 is the compiled regular expression
Print the content of the compiled regular expression
xmlRegexpIsDeterminist_APIName returns 1 if it yes, 0 if not and a negative value in case of error
xmlRegexpPrint_APIParam_1 is the file for the xmlRegexpPrint_APIParam_1 debug
xmlRegexpPrint_APIParam_2 is the compiled xmlRegexpPrint_APIParam_2
Daniel Veillard
Additional cleanup for multi-threading
Registers a callback for node destruction
xmlDeregisterNodeDefault_APIParam_1 is function pointer to the new DeregisterNodeFunc
xmlDeregisterNodeDefault_APIName returns the previous value of the deregistration function
Signature for the deregistration callback of a discarded xmlDeregisterNodeFunc_APIParam_1
xmlDeregisterNodeFunc_APIParam_1 is the current node
Check
Additional initialisation for multi-threading
Check
xmlInitializeGlobalState_APIName initialize a global state with all the default values of the library
xmlInitializeGlobalState_APIParam_1 is a pointer to a newly allocated global state
Registers a callback for URI output file handling
xmlOutputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new OutputBufferCreateFilenameFunc
xmlOutputBufferCreateFilenameDefault_APIName returns the old value of the registration function
xmlOutputBufferCreateFilenameFunc_APIParam_1 is the xmlOutputBufferCreateFilenameFunc_APIParam_1 to write to
xmlOutputBufferCreateFilenameFunc_APIParam_2 is
Signature for the function doing the lookup for a suitable output method corresponding to an xmlOutputBufferCreateFilenameFunc_APIParam_1
xmlOutputBufferCreateFilenameFunc_APIParam_3 is
xmlOutputBufferCreateFilenameFunc_APIName returns the new xmlOutputBufferPtr in case of success or NULL if no method was found
Registers a callback for URI input file handling
xmlParserInputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new ParserInputBufferCreateFilenameFunc
xmlParserInputBufferCreateFilenameDefault_APIName returns the old value of the registration function
Signature for the function doing the lookup for a suitable input method corresponding to an xmlParserInputBufferCreateFilenameFunc_APIParam_1
xmlParserInputBufferCreateFilenameFunc_APIParam_1 is the xmlParserInputBufferCreateFilenameFunc_APIParam_1 to read from
xmlParserInputBufferCreateFilenameFunc_APIParam_2 is the requested source encoding
xmlParserInputBufferCreateFilenameFunc_APIName returns the new xmlParserInputBufferPtr in case of success or NULL if no method was found
Registers a callback for node creation
xmlRegisterNodeDefault_APIParam_1 is function pointer to the new RegisterNodeFunc
xmlRegisterNodeDefault_APIName returns the old value of the registration function
Signature for the registration callback of a created xmlRegisterNodeFunc_APIParam_1
xmlRegisterNodeFunc_APIParam_1 is the current node
Daniel Veillard
An axis traversal function
xmlXPathAxisFunc_APIParam_1 is the XPath interpreter context
xmlXPathAxisFunc_APIParam_2 is the previous node being explored on that axis
Converts a boolean to its number value
xmlXPathAxisFunc_APIName returns the next node in that axis or NULL if at the end of the axis
To traverse an axis, the engine calls the first time with xmlXPathAxisFunc_APIParam_2 == NULL and repeat until the function returns NULL indicating the end of the axis traversal
xmlXPathCastBooleanToNumber_APIParam_1 is a boolean
xmlXPathCastBooleanToNumber_APIName returns the number value
Converts a boolean to its string value
xmlXPathCastBooleanToString_APIParam_1 is a boolean
xmlXPathCastBooleanToString_APIName returns a newly allocated string
Converts a node-set to its boolean value
xmlXPathCastNodeSetToBoolean_APIParam_1 is a node-set
xmlXPathCastNodeSetToBoolean_APIName returns the boolean value
Converts a node-set to its number value
xmlXPathCastNodeSetToNumber_APIParam_1 is a node-set
xmlXPathCastNodeSetToNumber_APIName returns the number value
Converts a node-set to its string value
xmlXPathCastNodeSetToString_APIParam_1 is a node-set
xmlXPathCastNodeSetToString_APIName returns a newly allocated string
Converts a xmlXPathCastNodeToNumber_APIParam_1 to its number value
xmlXPathCastNodeToNumber_APIParam_1 is a xmlXPathCastNodeToNumber_APIParam_1
xmlXPathCastNodeToNumber_APIName returns the number value
Converts a xmlXPathCastNodeToString_APIParam_1 to its string value
xmlXPathCastNodeToString_APIParam_1 is a xmlXPathCastNodeToString_APIParam_1
xmlXPathCastNodeToString_APIName returns a newly allocated string
Converts a number to its boolean value
xmlXPathCastNumberToBoolean_APIParam_1 is a number
xmlXPathCastNumberToBoolean_APIName returns the boolean value
Converts a number to its string value
xmlXPathCastNumberToString_APIParam_1 is a number
xmlXPathCastNumberToString_APIName returns a newly allocated string
Converts a string to its boolean value
xmlXPathCastStringToBoolean_APIParam_1 is a string
xmlXPathCastStringToBoolean_APIName returns the boolean value
Converts a string to its number value
xmlXPathCastStringToNumber_APIParam_1 is a string
xmlXPathCastStringToNumber_APIName returns the number value
Converts an XPath object to its boolean value
xmlXPathCastToBoolean_APIParam_1 is an XPath object
xmlXPathCastToBoolean_APIName returns the boolean value
Converts an XPath object to its number value
xmlXPathCastToNumber_APIParam_1 is an XPath object
xmlXPathCastToNumber_APIName returns the number value
Converts an existing object to its string_APIName equivalent
xmlXPathCastToString_APIParam_1 is an XPath object
xmlXPathCastToString_APIName returns the allocated string value of the object, NULL in case of error
it is up to the caller to free the string memory with xmlFree_APIName
Compare two nodes w.r.t document order
xmlXPathCmpNodes_APIParam_1 is the first node
xmlXPathCmpNodes_APIParam_2 is the second node
Compile an XPath expression
xmlXPathCompile_APIParam_1 is the XPath expression
xmlXPathCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL
the caller has to free the object
xmlXPathCmpNodes_APIName returns -2 in case of error 1 if first point < second point, 0 if it is the same node, -1 otherwise
Evaluate the Precompiled XPath expression in the given context
xmlXPathCompiledEval_APIParam_1 is the compiled XPath expression
xmlXPathCompiledEval_APIParam_2 is the XPath context
xmlXPathCompiledEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
the caller has to free the object
Applies the XPath boolean_APIName function on the result of the given compiled expression
xmlXPathCompiledEvalToBoolean_APIParam_1 is the compiled XPath expression
xmlXPathCompiledEvalToBoolean_APIParam_2 is the XPath context
Creates/frees an object cache on the XPath context
xmlXPathCompiledEvalToBoolean_APIName returns 1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors
Use < 0 for the default number
Other values for @options have currently no effect
xmlXPathContextSetCache_APIParam_1 is the XPath context
xmlXPathContextSetCache_APIParam_2 is enables/disables the cache
xmlXPathContextSetCache_APIParam_3 is a xmlXPathContextSetCache_APIParam_3 with semantics dependant on @options
xmlXPathContextSetCache_APIParam_4 is xmlXPathContextSetCache_APIParam_4
xmlXPathContextSetCache_APIName returns 0 if the setting succeeded, and -1 on API or internal errors
Converts an existing object to its boolean_APIName equivalent
xmlXPathConvertBoolean_APIParam_1 is an XPath object
This will set the XPath object caching
xmlXPathConvertBoolean_APIName returns the new object, the old one is freed (or the operation is done directly on @val
This will set the maximum number of XPath objects to be cached per slot There are 5 slots for
xmlXPathConvertFunc_APIParam_1 is an XPath object
node-set , string , number , boolean , and misc objects
xmlXPathConvertFunc_APIParam_2 is the number of the target xmlXPathConvertFunc_APIParam_2
A conversion function is associated to a xmlXPathConvertFunc_APIParam_2 and used to cast the new xmlXPathConvertFunc_APIParam_2 to primitive values
xmlXPathConvertFunc_APIName returns -1 in case of error, 0 otherwise
will be cached internally to be reused
Converts an existing object to its number_APIName equivalent
xmlXPathConvertNumber_APIParam_1 is an XPath object
Converts an existing object to its string_APIName equivalent
xmlXPathConvertNumber_APIName returns the new object, the old one is freed (or the operation is done directly on @val
xmlXPathConvertString_APIParam_1 is an XPath object
Compile an XPath expression
xmlXPathConvertString_APIName returns the new object, the old one is freed (or the operation is done directly on @val
xmlXPathCtxtCompile_APIParam_1 is an XPath context
xmlXPathCtxtCompile_APIParam_2 is the XPath expression
xmlXPathCtxtCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL
the caller has to free the object
Evaluate the XPath Location Path in the given context
xmlXPathEval_APIParam_1 is the XPath expression
xmlXPathEval_APIParam_2 is the XPath context
xmlXPathEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
the caller has to free the object
Alias for xmlXPathEval_APIName
xmlXPathEvalExpression_APIParam_1 is the XPath expression
xmlXPathEvalExpression_APIParam_2 is the XPath context
xmlXPathEvalExpression_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
the caller has to free the object
An XPath evaluation function , the parameters are on the XPath context stack
xmlXPathEvalFunc_APIParam_1 is an XPath parser context
xmlXPathEvalFunc_APIParam_2 is the number of arguments passed to the function
Evaluate a predicate result for the current node
A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean
xmlXPathEvalPredicate_APIParam_1 is the XPath context
xmlXPathEvalPredicate_APIParam_2 is the Predicate Expression evaluation result
xmlXPathEvalPredicate_APIName returns 1 if predicate is true, 0 otherwise
Free up the memory allocated by @comp
xmlXPathFreeCompExpr_APIParam_1 is an XPATH comp
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
the result will be converted as if by a call to the boolean function
Free up an xmlXPathContext
xmlXPathFreeContext_APIParam_1 is the context to free
Free the NodeSet compound
xmlXPathFreeNodeSet_APIParam_1 is the xmlNodeSetPtr to free
xmlXPathFreeNodeSetList_APIParam_1 is an existing NodeSetList object
Free up an xmlXPathObjectPtr object
Free up the xmlXPathObjectPtr @obj but do not deallocate the objects in the list contrary to xmlXPathFreeObject_APIName
xmlXPathFreeObject_APIParam_1 is the object to free
Prototype for callbacks used to plug function lookup in the XPath engine
xmlXPathFuncLookupFunc_APIParam_1 is an XPath context
xmlXPathFuncLookupFunc_APIParam_2 is xmlXPathFuncLookupFunc_APIParam_2 of the function
xmlXPathFuncLookupFunc_APIParam_3 is the namespace xmlXPathFuncLookupFunc_APIParam_2 hosting this function
xmlXPathFuncLookupFunc_APIName returns the XPath function or NULL if not found
An XPath function
xmlXPathFunction_APIParam_1 is the XPath interprestation context
xmlXPathFunction_APIParam_2 is the number of arguments
The arguments are popped out from the context stack and the result is pushed on the stack
Initialize the XPath environment
Based on trio code http
Provides a portable isinf_APIName function to detect
xmlXPathIsInf_APIParam_1 is a double value
Provides a portable isnan_APIName function to detect
Based on trio code http
xmlXPathIsNaN_APIParam_1 is a double value
xmlXPathIsNaN_APIName returns 1 if the value is a NaN, 0 otherwise
Create a new xmlXPathContext
xmlXPathNewContext_APIParam_1 is the XML document
xmlXPathNewContext_APIName returns the xmlXPathContext just allocated
The caller will need to free it
xmlXPathIsInf_APIName returns 1 vi the value is +Infinite, -1 if -Infinite, 0 otherwise
Evaluate the XPath Location Path in the given context
The xmlXPathNodeEval_APIParam_1 ` node ' is set as the context xmlXPathNodeEval_APIParam_1
The context xmlXPathNodeEval_APIParam_1 is not restored
xmlXPathNodeEval_APIParam_1 is the xmlXPathNodeEval_APIParam_1 to to use as the context xmlXPathNodeEval_APIParam_1
xmlXPathNodeEval_APIParam_2 is the XPath expression
xmlXPathNodeEval_APIParam_3 is the XPath context
xmlXPathNodeEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
the caller has to free the object
Create a new xmlNodeSetPtr of type double and of value @val
xmlXPathNodeSetCreate_APIParam_1 is an initial xmlNodePtr , or NULL
xmlXPathNodeSetCreate_APIName returns the newly created object
allocate a new copy of a given object
xmlXPathObjectCopy_APIParam_1 is the original object
xmlXPathObjectCopy_APIName returns the newly created object
Call this routine to speed up XPath computation on static documents
xmlXPathOrderDocElems_APIParam_1 is an input document
Sets ` node ' as the context xmlXPathSetContextNode_APIParam_1
xmlXPathOrderDocElems_APIName returns the number of elements found in the document or -1 in case of error
The xmlXPathSetContextNode_APIParam_1 must be in the same document as that associated with the context
xmlXPathSetContextNode_APIParam_1 is the xmlXPathSetContextNode_APIParam_1 to to use as the context xmlXPathSetContextNode_APIParam_1
xmlXPathSetContextNode_APIParam_2 is the XPath context
xmlXPathSetContextNode_APIName returns -1 in case of error or 0 if successful
Prototype for callbacks used to plug variable lookup in the XPath engine
xmlXPathVariableLookupFunc_APIParam_1 is an XPath context
xmlXPathVariableLookupFunc_APIParam_2 is xmlXPathVariableLookupFunc_APIParam_2 of the variable
xmlXPathVariableLookupFunc_APIParam_3 is the namespace xmlXPathVariableLookupFunc_APIParam_2 hosting this variable
xmlXPathVariableLookupFunc_APIName returns the XPath object value or NULL if not found
Daniel Veillard
Deallocate all the resources associated to the xmlFreeTextWriter_APIParam_1
xmlFreeTextWriter_APIParam_1 is the xmlTextWriterPtr
xmlNewTextWriter_APIParam_1 is an xmlOutputBufferPtr
Create a new xmlNewTextWriter_APIName structure using an xmlOutputBufferPtr NOTE
xmlNewTextWriter_APIName returns the new xmlTextWriterPtr or NULL in case of error
Create a new xmlNewTextWriter structure with @ * doc as output
xmlNewTextWriterDoc_APIParam_1 is address of a xmlDocPtr to hold the new XML document tree
xmlNewTextWriterDoc_APIParam_2 is compress the output ?
xmlNewTextWriterDoc_APIName returns the new xmlTextWriterPtr or NULL in case of error
Create a new xmlNewTextWriter structure with @uri as output
xmlNewTextWriterFilename_APIParam_1 is the URI of the resource for the output
xmlNewTextWriterFilename_APIParam_2 is compress the output ?
xmlNewTextWriterFilename_APIName returns the new xmlTextWriterPtr or NULL in case of error
This stamps all the element nodes with the document order Like for line information , the order is kept in the element - > content field , the value stored is actually - the node number to be able to differentiate from line numbers
Create a new xmlNewTextWriter structure with @buf as output TODO
handle xmlNewTextWriterMemory_APIParam_2
xmlNewTextWriterMemory_APIParam_1 is xmlBufferPtr
xmlNewTextWriterMemory_APIParam_2 is compress the output ?
xmlNewTextWriterMemory_APIName returns the new xmlTextWriterPtr or NULL in case of error
handle xmlNewTextWriterPushParser_APIParam_2
Create a new xmlNewTextWriter structure with @ctxt as output NOTE
the @out parameter will be deallocated
xmlNewTextWriterPushParser_APIParam_1 is xmlParserCtxtPtr to hold the new XML document tree
xmlNewTextWriterPushParser_APIParam_2 is compress the output ?
xmlNewTextWriterPushParser_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterTree_APIParam_1 is xmlDocPtr
xmlNewTextWriterTree_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlTextWriterEndAttribute_APIName returns the bytes written  or -1 in case of error
the @ctxt context will be freed with the resulting writer
xmlTextWriterEndCDATA_APIName returns the bytes written  or -1 in case of error
Create a new xmlNewTextWriter structure with @doc as output starting at @node
xmlTextWriterEndComment_APIName returns the bytes written  or -1 in case of error
xmlNewTextWriterTree_APIParam_2 is xmlNodePtr or NULL for doc - > children
xmlNewTextWriterTree_APIParam_3 is compress the output ?
xmlTextWriterEndDTD_APIName returns the bytes written  or -1 in case of error
End the current xml element
xmlTextWriterEndAttribute_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndDTDAttlist_APIName returns the bytes written  or -1 in case of error
End an xml CDATA section
xmlTextWriterEndCDATA_APIParam_1 is the xmlTextWriterPtr
End the current xml coment
xmlTextWriterEndDTD_APIParam_1 is the xmlTextWriterPtr
End an xml DTD
xmlTextWriterEndComment_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndDTDAttlist_APIParam_1 is the xmlTextWriterPtr
End an xml DTD attribute list
End an xml DTD element
xmlTextWriterEndDTDElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndDTDElement_APIName returns the bytes written  or -1 in case of error
End an xml DTD entity
xmlTextWriterEndDTDEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndDTDEntity_APIName returns the bytes written  or -1 in case of error
End an xml document
All open elements are closed , and the content is flushed to the output
xmlTextWriterEndDocument_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndDocument_APIName returns the bytes written or -1 in case of error
End the current xml element
xmlTextWriterEndElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndElement_APIName returns the bytes written  or -1 in case of error
End the current xml PI
xmlTextWriterEndPI_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterEndPI_APIName returns the bytes written  or -1 in case of error
Flush the output buffer
xmlTextWriterFlush_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterFlush_APIName returns the bytes written  or -1 in case of error
End the current xml element
Writes an end tag
xmlTextWriterFullEndElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterSetIndent_APIName returns -1 on error or 0 otherwise
xmlTextWriterSetIndentString_APIName returns -1 on error or 0 otherwise
xmlTextWriterFullEndElement_APIParam_1 is the xmlTextWriterPtr
Set indentation output
xmlTextWriterSetQuoteChar_APIName returns -1 on error or 0 otherwise
xmlTextWriterSetIndent_APIParam_2 = 0 do not indentation
xmlTextWriterSetIndent_APIParam_2 > 0 do indentation
xmlTextWriterSetIndent_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterSetIndent_APIParam_2 do indentation ?
xmlTextWriterStartAttribute_APIName returns the bytes written  or -1 in case of error
Set string indentation
xmlTextWriterStartAttributeNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterSetQuoteChar_APIParam_2 is the quote character
Set the character used for quoting attributes
xmlTextWriterStartCDATA_APIName returns the bytes written  or -1 in case of error
Start an xml attribute
xmlTextWriterSetQuoteChar_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterSetIndentString_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartAttribute_APIParam_2 is element xmlTextWriterStartAttribute_APIParam_2
xmlTextWriterStartComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartAttribute_APIParam_1 is the xmlTextWriterPtr
Start an xml attribute with namespace support
xmlTextWriterStartAttributeNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterSetIndentString_APIParam_2 is the xmlChar string
xmlTextWriterStartAttributeNS_APIParam_3 is element local xmlTextWriterStartAttributeNS_APIParam_3
xmlTextWriterStartAttributeNS_APIParam_4 is namespace URI or NULL
xmlTextWriterStartAttributeNS_APIParam_2 is namespace xmlTextWriterStartAttributeNS_APIParam_2 or NULL
xmlTextWriterStartDTD_APIName returns the bytes written  or -1 in case of error
Start an xml CDATA section
xmlTextWriterStartCDATA_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDTD_APIParam_1 is the xmlTextWriterPtr
Start an xml DTD
xmlTextWriterStartDTD_APIParam_2 is the xmlTextWriterStartDTD_APIParam_2 of the DTD
xmlTextWriterStartComment_APIParam_1 is the xmlTextWriterPtr
Start an xml DTD ATTLIST
xmlTextWriterStartDTDAttlist_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartDTD_APIParam_4 is the system identifier , which is the URI of the DTD
Start an xml comment
xmlTextWriterStartDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier
xmlTextWriterStartDTDAttlist_APIParam_2 is the xmlTextWriterStartDTDAttlist_APIParam_2 of the DTD ATTLIST
xmlTextWriterStartDTDElement_APIParam_1 is the xmlTextWriterPtr
Start an xml DTD element
xmlTextWriterStartDTDElement_APIParam_2 is the xmlTextWriterStartDTDElement_APIParam_2 of the DTD element
xmlTextWriterStartDTDEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartDTDElement_APIName returns the bytes written  or -1 in case of error
Start an xml DTD ATTLIST
xmlTextWriterStartDTDEntity_APIParam_3 is the xmlTextWriterStartDTDEntity_APIParam_3 of the DTD ATTLIST
xmlTextWriterStartDTDEntity_APIName returns the bytes written  or -1 in case of error
Start a new xml document
xmlTextWriterStartDocument_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartDocument_APIParam_2 is the xml xmlTextWriterStartDocument_APIParam_2 or NULL for default
xmlTextWriterStartDTDEntity_APIParam_2 is TRUE
FALSE if not
xmlTextWriterStartDocument_APIParam_3 is the xmlTextWriterStartDocument_APIParam_3 or NULL for default
xmlTextWriterStartDocument_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDocument_APIParam_4 is `` yes '' or `` no '' or NULL for default
Start an xml element
xmlTextWriterStartElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartElement_APIParam_2 is element xmlTextWriterStartElement_APIParam_2
xmlTextWriterStartElement_APIName returns the bytes written  or -1 in case of error
Start an xml element with namespace support
xmlTextWriterStartElementNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartElementNS_APIParam_2 is namespace xmlTextWriterStartElementNS_APIParam_2 or NULL
xmlTextWriterStartElementNS_APIParam_3 is element local xmlTextWriterStartElementNS_APIParam_3
xmlTextWriterStartElementNS_APIParam_4 is namespace URI or NULL
xmlTextWriterStartElementNS_APIName returns the bytes written  or -1 in case of error
Start an xml PI
xmlTextWriterStartPI_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterStartPI_APIParam_2 is PI xmlTextWriterStartPI_APIParam_2
xmlTextWriterStartPI_APIName returns the bytes written  or -1 in case of error
Write an xml attribute
xmlTextWriterWriteAttribute_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteAttribute_APIParam_2 is attribute xmlTextWriterWriteAttribute_APIParam_2
xmlTextWriterWriteAttribute_APIParam_3 is attribute xmlTextWriterWriteAttribute_APIParam_3
xmlTextWriterWriteAttribute_APIName returns the bytes written  or -1 in case of error
Write an xml attribute
xmlTextWriterWriteAttributeNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteAttributeNS_APIParam_2 is namespace xmlTextWriterWriteAttributeNS_APIParam_2
xmlTextWriterWriteAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteAttributeNS_APIParam_3
xmlTextWriterWriteAttributeNS_APIParam_4 is namespace URI
xmlTextWriterWriteAttributeNS_APIParam_5 is attribute xmlTextWriterWriteAttributeNS_APIParam_5
xmlTextWriterWriteAttributeNS_APIName returns the bytes written  or -1 in case of error
Write an base64 encoded xml text
xmlTextWriterWriteBase64_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteBase64_APIParam_2 is binary xmlTextWriterWriteBase64_APIParam_2
xmlTextWriterWriteBase64_APIParam_3 is the position within the xmlTextWriterWriteBase64_APIParam_2 of the first byte to encode
xmlTextWriterWriteBase64_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteBase64_APIParam_4 is the number of bytes to encode
Write a BinHex encoded xml text
xmlTextWriterWriteBinHex_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteBinHex_APIParam_2 is binary xmlTextWriterWriteBinHex_APIParam_2
xmlTextWriterWriteBinHex_APIParam_3 is the position within the xmlTextWriterWriteBinHex_APIParam_2 of the first byte to encode
xmlTextWriterWriteBinHex_APIParam_4 is the number of bytes to encode
xmlTextWriterWriteBinHex_APIName returns the bytes written  or -1 in case of error
Write an xml CDATA
xmlTextWriterWriteCDATA_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteCDATA_APIParam_2 is CDATA xmlTextWriterWriteCDATA_APIParam_2
xmlTextWriterWriteCDATA_APIName returns the bytes written  or -1 in case of error
Write an xml comment
xmlTextWriterWriteComment_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteComment_APIParam_2 is comment string
xmlTextWriterWriteComment_APIName returns the bytes written  or -1 in case of error
Write a DTD
xmlTextWriterWriteDTD_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTD_APIParam_2 is the xmlTextWriterWriteDTD_APIParam_2 of the DTD
xmlTextWriterWriteDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteDTD_APIParam_4 is the system identifier , which is the URI of the DTD
xmlTextWriterWriteDTD_APIParam_5 is string content of the DTD
xmlTextWriterWriteDTD_APIName returns the bytes written  or -1 in case of error
Write a DTD ATTLIST
xmlTextWriterWriteDTDAttlist_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDAttlist_APIParam_2 is the xmlTextWriterWriteDTDAttlist_APIParam_2 of the DTD ATTLIST
xmlTextWriterWriteDTDAttlist_APIParam_3 is xmlTextWriterWriteDTDAttlist_APIParam_3 of the ATTLIST
xmlTextWriterWriteDTDAttlist_APIName returns the bytes written  or -1 in case of error
Write a DTD element
xmlTextWriterWriteDTDElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDElement_APIParam_2 is the xmlTextWriterWriteDTDElement_APIParam_2 of the DTD element
xmlTextWriterWriteDTDElement_APIParam_3 is xmlTextWriterWriteDTDElement_APIParam_3 of the element
xmlTextWriterWriteDTDElement_APIName returns the bytes written  or -1 in case of error
Write a DTD entity
xmlTextWriterWriteDTDEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDEntity_APIParam_3 is the xmlTextWriterWriteDTDEntity_APIParam_3 of the DTD entity
xmlTextWriterWriteDTDEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteDTDEntity_APIParam_5 is the system identifier , which is the URI of the DTD
xmlTextWriterWriteDTDEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDEntity_APIParam_3
xmlTextWriterWriteDTDEntity_APIParam_2 is TRUE
FALSE if not
xmlTextWriterWriteDTDEntity_APIParam_7 is xmlTextWriterWriteDTDEntity_APIParam_7 of the entity
xmlTextWriterWriteDTDEntity_APIName returns the bytes written  or -1 in case of error
Write a DTD external entity
The entity must have been started with xmlTextWriterStartDTDEntity
xmlTextWriterWriteDTDExternalEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDExternalEntity_APIParam_3 is the xmlTextWriterWriteDTDExternalEntity_APIParam_3 of the DTD entity
xmlTextWriterWriteDTDExternalEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteDTDExternalEntity_APIParam_5 is the system identifier , which is the URI of the DTD
xmlTextWriterWriteDTDExternalEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDExternalEntity_APIParam_3
xmlTextWriterWriteDTDExternalEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDExternalEntity_APIParam_2 is TRUE
FALSE if not
Write the contents of a DTD external entity
xmlTextWriterWriteDTDExternalEntityContents_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDExternalEntityContents_APIParam_2 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteDTDExternalEntityContents_APIParam_3 is the system identifier , which is the URI of the DTD
xmlTextWriterWriteDTDExternalEntityContents_APIParam_4 is the xml notation name
xmlTextWriterWriteDTDExternalEntityContents_APIName returns the bytes written  or -1 in case of error
Write a DTD internal entity
xmlTextWriterWriteDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteDTDInternalEntity_APIParam_3 of the DTD entity
xmlTextWriterWriteDTDInternalEntity_APIParam_4 is xmlTextWriterWriteDTDInternalEntity_APIParam_4 of the entity
xmlTextWriterWriteDTDInternalEntity_APIName returns the bytes written  or -1 in case of error
Write a DTD entity
xmlTextWriterWriteDTDNotation_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteDTDNotation_APIParam_2 is the xmlTextWriterWriteDTDNotation_APIParam_2 of the xml notation
xmlTextWriterWriteDTDInternalEntity_APIParam_2 is TRUE
FALSE if not
xmlTextWriterWriteDTDNotation_APIParam_3 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteDTDNotation_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDNotation_APIParam_4 is the system identifier , which is the URI of the DTD
Write an xml element
xmlTextWriterWriteElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteElement_APIParam_2 is element xmlTextWriterWriteElement_APIParam_2
xmlTextWriterWriteElement_APIParam_3 is element xmlTextWriterWriteElement_APIParam_3
xmlTextWriterWriteElement_APIName returns the bytes written  or -1 in case of error
Write an xml element with namespace support
xmlTextWriterWriteElementNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteElementNS_APIParam_2 is namespace xmlTextWriterWriteElementNS_APIParam_2
xmlTextWriterWriteElementNS_APIParam_3 is element local xmlTextWriterWriteElementNS_APIParam_3
xmlTextWriterWriteElementNS_APIParam_4 is namespace URI
xmlTextWriterWriteElementNS_APIParam_5 is element xmlTextWriterWriteElementNS_APIParam_5
xmlTextWriterWriteElementNS_APIName returns the bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatAttribute_APIParam_4 attribute
xmlTextWriterWriteFormatAttribute_APIParam_1 is xmlTextWriterWriteFormatAttribute_APIParam_4 xmlTextWriterPtr
xmlTextWriterWriteFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteFormatAttribute_APIParam_2
xmlTextWriterWriteFormatAttribute_APIName returns xmlTextWriterWriteFormatAttribute_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatAttribute_APIParam_3 is xmlTextWriterWriteFormatAttribute_APIParam_3 string xmlTextWriterWriteFormatAttribute_APIParam_4 extra parameters xmlTextWriterWriteFormatAttribute_APIParam_4 the xmlTextWriterWriteFormatAttribute_APIParam_3
Write a formatted xmlTextWriterWriteFormatAttributeNS_APIParam_6 attribute.with namespace support
xmlTextWriterWriteFormatAttributeNS_APIParam_1 is xmlTextWriterWriteFormatAttributeNS_APIParam_6 xmlTextWriterPtr
xmlTextWriterWriteFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_2
xmlTextWriterWriteFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteFormatAttributeNS_APIParam_3
xmlTextWriterWriteFormatAttributeNS_APIParam_4 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_6
xmlTextWriterWriteFormatAttributeNS_APIParam_5 is xmlTextWriterWriteFormatAttributeNS_APIParam_5 string xmlTextWriterWriteFormatAttributeNS_APIParam_6 extra parameters xmlTextWriterWriteFormatAttributeNS_APIParam_6 the xmlTextWriterWriteFormatAttributeNS_APIParam_5
xmlTextWriterWriteFormatAttributeNS_APIName returns xmlTextWriterWriteFormatAttributeNS_APIParam_6 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatCDATA_APIParam_3 CDATA
xmlTextWriterWriteFormatCDATA_APIParam_1 is xmlTextWriterWriteFormatCDATA_APIParam_3 xmlTextWriterPtr
xmlTextWriterWriteFormatCDATA_APIParam_2 is xmlTextWriterWriteFormatCDATA_APIParam_2 string xmlTextWriterWriteFormatCDATA_APIParam_3 extra parameters xmlTextWriterWriteFormatCDATA_APIParam_3 the xmlTextWriterWriteFormatCDATA_APIParam_2
xmlTextWriterWriteFormatCDATA_APIName returns xmlTextWriterWriteFormatCDATA_APIParam_3 bytes written  or -1 in case of error
Write an xmlTextWriterWriteFormatComment_APIParam_3 comment
xmlTextWriterWriteFormatComment_APIParam_1 is xmlTextWriterWriteFormatComment_APIParam_3 xmlTextWriterPtr
xmlTextWriterWriteFormatComment_APIName returns xmlTextWriterWriteFormatComment_APIParam_3 bytes written  or -1 in case of error
xmlTextWriterWriteFormatComment_APIParam_2 is xmlTextWriterWriteFormatComment_APIParam_2 string xmlTextWriterWriteFormatComment_APIParam_3 extra parameters xmlTextWriterWriteFormatComment_APIParam_3 the xmlTextWriterWriteFormatComment_APIParam_2
Write a xmlTextWriterWriteFormatDTD_APIParam_6 with a formatted markup declarations part
xmlTextWriterWriteFormatDTD_APIParam_1 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterPtr
xmlTextWriterWriteFormatDTD_APIParam_2 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_2 of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6
xmlTextWriterWriteFormatDTD_APIParam_3 is xmlTextWriterWriteFormatDTD_APIParam_6 public identifier , which is an alternative to xmlTextWriterWriteFormatDTD_APIParam_6 system identifier
xmlTextWriterWriteFormatDTD_APIParam_4 is xmlTextWriterWriteFormatDTD_APIParam_6 system identifier , which is xmlTextWriterWriteFormatDTD_APIParam_6 URI of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6
xmlTextWriterWriteFormatDTD_APIParam_5 is xmlTextWriterWriteFormatDTD_APIParam_5 string xmlTextWriterWriteFormatDTD_APIParam_6 extra parameters xmlTextWriterWriteFormatDTD_APIParam_6 the xmlTextWriterWriteFormatDTD_APIParam_5
xmlTextWriterWriteFormatDTD_APIName returns xmlTextWriterWriteFormatDTD_APIParam_6 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatDTDAttlist_APIParam_4 ATTLIST
xmlTextWriterWriteFormatDTDAttlist_APIParam_1 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterPtr
xmlTextWriterWriteFormatDTDAttlist_APIParam_2 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterWriteFormatDTDAttlist_APIParam_2 of xmlTextWriterWriteFormatDTDAttlist_APIParam_4 DTD ATTLIST
xmlTextWriterWriteFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteFormatDTDAttlist_APIParam_3 string xmlTextWriterWriteFormatDTDAttlist_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDAttlist_APIParam_4 the xmlTextWriterWriteFormatDTDAttlist_APIParam_3
xmlTextWriterWriteFormatDTDAttlist_APIName returns xmlTextWriterWriteFormatDTDAttlist_APIParam_4 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatDTDElement_APIParam_4 element
xmlTextWriterWriteFormatDTDElement_APIParam_1 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterPtr
xmlTextWriterWriteFormatDTDElement_APIParam_2 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterWriteFormatDTDElement_APIParam_2 of xmlTextWriterWriteFormatDTDElement_APIParam_4 DTD element
xmlTextWriterWriteFormatDTDElement_APIParam_3 is xmlTextWriterWriteFormatDTDElement_APIParam_3 string xmlTextWriterWriteFormatDTDElement_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDElement_APIParam_4 the xmlTextWriterWriteFormatDTDElement_APIParam_3
xmlTextWriterWriteFormatDTDElement_APIName returns xmlTextWriterWriteFormatDTDElement_APIParam_4 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 internal entity
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_1 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterPtr
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 of xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 DTD entity
xmlTextWriterWriteFormatDTDInternalEntity_APIName returns xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 bytes written  or -1 in case of error
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 string xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 extra parameters xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 the xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4
Write a formatted xmlTextWriterWriteFormatElement_APIParam_4 element
xmlTextWriterWriteFormatElement_APIParam_1 is xmlTextWriterWriteFormatElement_APIParam_4 xmlTextWriterPtr
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_2 is TRUE
xmlTextWriterWriteFormatElement_APIParam_2 is element xmlTextWriterWriteFormatElement_APIParam_2
xmlTextWriterWriteFormatElement_APIName returns xmlTextWriterWriteFormatElement_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatElement_APIParam_3 is xmlTextWriterWriteFormatElement_APIParam_3 string xmlTextWriterWriteFormatElement_APIParam_4 extra parameters xmlTextWriterWriteFormatElement_APIParam_4 the xmlTextWriterWriteFormatElement_APIParam_3
Write a formatted xmlTextWriterWriteFormatElementNS_APIParam_6 element with namespace support
xmlTextWriterWriteFormatElementNS_APIParam_1 is xmlTextWriterWriteFormatElementNS_APIParam_6 xmlTextWriterPtr
xmlTextWriterWriteFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteFormatElementNS_APIParam_2
xmlTextWriterWriteFormatElementNS_APIParam_3 is element local xmlTextWriterWriteFormatElementNS_APIParam_3
xmlTextWriterWriteFormatElementNS_APIParam_4 is namespace xmlTextWriterWriteFormatElementNS_APIParam_6
xmlTextWriterWriteFormatElementNS_APIParam_5 is xmlTextWriterWriteFormatElementNS_APIParam_5 string xmlTextWriterWriteFormatElementNS_APIParam_6 extra parameters xmlTextWriterWriteFormatElementNS_APIParam_6 the xmlTextWriterWriteFormatElementNS_APIParam_5
xmlTextWriterWriteFormatElementNS_APIName returns xmlTextWriterWriteFormatElementNS_APIParam_6 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterWriteFormatPI_APIParam_1 is xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterPtr
xmlTextWriterWriteFormatPI_APIParam_2 is PI xmlTextWriterWriteFormatPI_APIParam_2
xmlTextWriterWriteFormatPI_APIParam_3 is xmlTextWriterWriteFormatPI_APIParam_3 string xmlTextWriterWriteFormatPI_APIParam_4 extra parameters xmlTextWriterWriteFormatPI_APIParam_4 the xmlTextWriterWriteFormatPI_APIParam_3
xmlTextWriterWriteFormatPI_APIName returns xmlTextWriterWriteFormatPI_APIParam_4 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatRaw_APIParam_3 xml text
xmlTextWriterWriteFormatRaw_APIParam_1 is xmlTextWriterWriteFormatRaw_APIParam_3 xmlTextWriterPtr
xmlTextWriterWriteFormatRaw_APIParam_2 is xmlTextWriterWriteFormatRaw_APIParam_2 string xmlTextWriterWriteFormatRaw_APIParam_3 extra parameters xmlTextWriterWriteFormatRaw_APIParam_3 the xmlTextWriterWriteFormatRaw_APIParam_2
xmlTextWriterWriteFormatRaw_APIName returns xmlTextWriterWriteFormatRaw_APIParam_3 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatString_APIParam_3 text
xmlTextWriterWriteFormatString_APIParam_1 is xmlTextWriterWriteFormatString_APIParam_3 xmlTextWriterPtr
xmlTextWriterWriteFormatString_APIParam_2 is xmlTextWriterWriteFormatString_APIParam_2 string xmlTextWriterWriteFormatString_APIParam_3 extra parameters xmlTextWriterWriteFormatString_APIParam_3 the xmlTextWriterWriteFormatString_APIParam_2
xmlTextWriterWriteFormatString_APIName returns xmlTextWriterWriteFormatString_APIParam_3 bytes written  or -1 in case of error
Write an xml PI
xmlTextWriterWritePI_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWritePI_APIParam_2 is PI xmlTextWriterWritePI_APIParam_2
xmlTextWriterWritePI_APIParam_3 is PI xmlTextWriterWritePI_APIParam_3
xmlTextWriterWritePI_APIName returns the bytes written  or -1 in case of error
Write a raw xml text
xmlTextWriterWriteRaw_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteRaw_APIParam_2 is text string
xmlTextWriterWriteRaw_APIName returns the bytes written  or -1 in case of error
Write an xml text
what about entities and special chars ??
xmlTextWriterWriteRawLen_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteRawLen_APIParam_2 is text string
xmlTextWriterWriteRawLen_APIParam_3 is length of the text string
xmlTextWriterWriteRawLen_APIName returns the bytes written  or -1 in case of error
Write an xml text
xmlTextWriterWriteString_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteString_APIParam_2 is text string
xmlTextWriterWriteString_APIName returns the bytes written  or -1 in case of error
Write a formatted xml attribute
xmlTextWriterWriteVFormatAttribute_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteVFormatAttribute_APIParam_2
xmlTextWriterWriteVFormatAttribute_APIParam_3 is xmlTextWriterWriteVFormatAttribute_APIParam_3 string
xmlTextWriterWriteVFormatAttribute_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatAttribute_APIParam_4 is pointer to the first member of the variable argument list
Write a formatted xml attribute.with namespace support
xmlTextWriterWriteVFormatAttributeNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteVFormatAttributeNS_APIParam_2
xmlTextWriterWriteVFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteVFormatAttributeNS_APIParam_3
xmlTextWriterWriteVFormatAttributeNS_APIParam_4 is namespace URI
xmlTextWriterWriteVFormatAttributeNS_APIParam_5 is xmlTextWriterWriteVFormatAttributeNS_APIParam_5 string
xmlTextWriterWriteVFormatAttributeNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatAttributeNS_APIParam_6 is pointer to the first member of the variable argument list
Write a formatted xml CDATA
xmlTextWriterWriteVFormatCDATA_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatCDATA_APIParam_2 is xmlTextWriterWriteVFormatCDATA_APIParam_2 string
xmlTextWriterWriteVFormatCDATA_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatCDATA_APIParam_3 is pointer to the first member of the variable argument list
Write an xml comment
xmlTextWriterWriteVFormatComment_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatComment_APIParam_2 is xmlTextWriterWriteVFormatComment_APIParam_2 string
xmlTextWriterWriteVFormatComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatComment_APIParam_3 is pointer to the first member of the variable argument list
Write a DTD with a formatted markup declarations part
xmlTextWriterWriteVFormatDTD_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatDTD_APIParam_2 is the xmlTextWriterWriteVFormatDTD_APIParam_2 of the DTD
xmlTextWriterWriteVFormatDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier
xmlTextWriterWriteVFormatDTD_APIParam_4 is the system identifier , which is the URI of the DTD
xmlTextWriterWriteVFormatDTD_APIParam_5 is xmlTextWriterWriteVFormatDTD_APIParam_5 string
xmlTextWriterWriteVFormatDTD_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTD_APIParam_6 is pointer to the first member of the variable argument list
Write a formatted DTD ATTLIST
xmlTextWriterWriteVFormatDTDAttlist_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 is the xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 of the DTD ATTLIST
xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 string
xmlTextWriterWriteVFormatDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDAttlist_APIParam_4 is pointer to the first member of the variable argument list
Write a formatted DTD element
xmlTextWriterWriteVFormatDTDElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatDTDElement_APIParam_2 is the xmlTextWriterWriteVFormatDTDElement_APIParam_2 of the DTD element
xmlTextWriterWriteVFormatDTDElement_APIParam_3 is xmlTextWriterWriteVFormatDTDElement_APIParam_3 string
xmlTextWriterWriteVFormatDTDElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDElement_APIParam_4 is pointer to the first member of the variable argument list
Write a formatted DTD internal entity
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 of the DTD entity
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 string
xmlTextWriterWriteVFormatDTDInternalEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_5 is pointer to the first member of the variable argument list
Write a formatted xml element
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_2 is TRUE
FALSE if not
xmlTextWriterWriteVFormatElement_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatElement_APIParam_2 is element xmlTextWriterWriteVFormatElement_APIParam_2
xmlTextWriterWriteVFormatElement_APIParam_3 is xmlTextWriterWriteVFormatElement_APIParam_3 string
xmlTextWriterWriteVFormatElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatElement_APIParam_4 is pointer to the first member of the variable argument list
Write a formatted xml element with namespace support
xmlTextWriterWriteVFormatElementNS_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteVFormatElementNS_APIParam_2
xmlTextWriterWriteVFormatElementNS_APIParam_3 is element local xmlTextWriterWriteVFormatElementNS_APIParam_3
xmlTextWriterWriteVFormatElementNS_APIParam_4 is namespace URI
xmlTextWriterWriteVFormatElementNS_APIParam_5 is xmlTextWriterWriteVFormatElementNS_APIParam_5 string
xmlTextWriterWriteVFormatElementNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatElementNS_APIParam_6 is pointer to the first member of the variable argument list
Write a formatted xml PI
xmlTextWriterWriteVFormatPI_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatPI_APIParam_2 is PI xmlTextWriterWriteVFormatPI_APIParam_2
xmlTextWriterWriteVFormatPI_APIParam_3 is xmlTextWriterWriteVFormatPI_APIParam_3 string
xmlTextWriterWriteVFormatPI_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatPI_APIParam_4 is pointer to the first member of the variable argument list
Write a formatted raw xml text
xmlTextWriterWriteVFormatRaw_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatRaw_APIParam_2 is xmlTextWriterWriteVFormatRaw_APIParam_2 string
xmlTextWriterWriteVFormatRaw_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatRaw_APIParam_3 is pointer to the first member of the variable argument list
Write a formatted xml text
xmlTextWriterWriteVFormatString_APIParam_1 is the xmlTextWriterPtr
xmlTextWriterWriteVFormatString_APIParam_2 is xmlTextWriterWriteVFormatString_APIParam_2 string
xmlTextWriterWriteVFormatString_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatString_APIParam_3 is pointer to the first member of the variable argument list
Daniel Veillard
Does a binary search of the range table to determine if char is valid
xmlCharInRange_APIParam_1 is character to be validated
xmlCharInRange_APIParam_2 is pointer to range to be used to validate
xmlCharInRange_APIName returns true if character valid, false otherwise
xmlIsBaseChar_APIName is DEPRECATED
Use xmlIsBaseChar_ch or xmlIsBaseCharQ instead
xmlIsBaseChar_APIParam_1 is character to validate
xmlIsBaseChar_APIName returns true if argument valid, false otherwise
xmlIsBlank_APIName is DEPRECATED
Use xmlIsBlank_ch or xmlIsBlankQ instead
xmlIsBlank_APIParam_1 is character to validate
xmlIsBlank_APIName returns true if argument valid, false otherwise
xmlIsChar_APIName is DEPRECATED
Use xmlIsChar_ch or xmlIsCharQ instead
xmlIsChar_APIParam_1 is character to validate
xmlIsChar_APIName returns true if argument valid, false otherwise
xmlIsCombining_APIName is DEPRECATED
Use xmlIsCombiningQ instead
xmlIsCombining_APIParam_1 is character to validate
xmlIsCombining_APIName returns true if argument valid, false otherwise
xmlIsDigit_APIName is DEPRECATED
Use xmlIsDigit_ch or xmlIsDigitQ instead
xmlIsDigit_APIParam_1 is character to validate
xmlIsDigit_APIName returns true if argument valid, false otherwise
xmlIsExtender_APIName is DEPRECATED
Use xmlIsExtender_ch or xmlIsExtenderQ instead
xmlIsExtender_APIParam_1 is character to validate
xmlIsExtender_APIName returns true if argument valid, false otherwise
xmlIsIdeographic_APIName is DEPRECATED
Use xmlIsIdeographicQ instead
xmlIsIdeographic_APIParam_1 is character to validate
xmlIsIdeographic_APIName returns true if argument valid, false otherwise
This function is DEPRECATED
Use xmlIsPubidChar_ch or xmlIsPubidCharQ instead
xmlIsPubidChar_APIParam_1 is character to validate
xmlIsPubidChar_APIName returns true if argument valid, false otherwise
Daniel Veillard
Close a document saving context , i.e
make sure that all bytes have been output and free the associated data
xmlSaveClose_APIParam_1 is a document saving context
xmlSaveClose_APIName returns the number of byte written or -1 in case of error
xmlSaveDoc_APIParam_1 is a document saving context
xmlSaveDoc_APIParam_2 is a document
xmlSaveDoc_APIName returns the number of byte written or -1 in case of error
Flush a document saving context , i.e
Save a full document to a saving context TODO
The function is not fully implemented yet as The function does not return the byte count but 0 instead
make sure that all bytes have been output
xmlSaveFlush_APIParam_1 is a document saving context
xmlSaveFlush_APIName returns the number of byte written or -1 in case of error
Set a custom escaping function to be used for text in attribute content
xmlSaveSetAttrEscape_APIParam_1 is a document saving context
xmlSaveSetAttrEscape_APIParam_2 is the escaping function
xmlSaveSetAttrEscape_APIName returns 0 if successful or -1 in case of error
Set a custom escaping function to be used for text in element content
xmlSaveSetEscape_APIParam_1 is a document saving context
xmlSaveSetEscape_APIParam_2 is the escaping function
xmlSaveSetEscape_APIName returns 0 if successful or -1 in case of error
xmlSaveToBuffer_APIParam_1 is a xmlSaveToBuffer_APIParam_1
Create a document saving context serializing to a xmlSaveToBuffer_APIParam_1 with the xmlSaveToBuffer_APIParam_2 and the xmlSaveToBuffer_APIParam_3 given
xmlSaveToBuffer_APIParam_2 is the xmlSaveToBuffer_APIParam_2 name to use or NULL
xmlSaveToBuffer_APIParam_3 is a set of xmlSaveOptions
xmlSaveToBuffer_APIName returns a new serialization context or NULL in case of error
xmlSaveToFd_APIParam_1 is a file descriptor number
xmlSaveToFd_APIParam_2 is the xmlSaveToFd_APIParam_2 name to use or NULL
Create a document saving context serializing to a file descriptor with the xmlSaveToFd_APIParam_2 and the xmlSaveToFd_APIParam_3 given
xmlSaveToFd_APIParam_3 is a set of xmlSaveOptions
xmlSaveToFd_APIName returns a new serialization context or NULL in case of error
xmlSaveToFilename_APIParam_1 is a file name or an URL
xmlSaveToFilename_APIParam_2 is the xmlSaveToFilename_APIParam_2 name to use or NULL
Create a document saving context serializing to a xmlSaveToFilename_APIParam_1 or possibly to an URL with the xmlSaveToFilename_APIParam_2 and the xmlSaveToFilename_APIParam_3 given
xmlSaveToFilename_APIParam_3 is a set of xmlSaveOptions
xmlSaveToFilename_APIName returns a new serialization context or NULL in case of error
xmlSaveToIO_APIParam_1 is an I/O write function
xmlSaveToIO_APIParam_2 is an I/O close function
Create a document saving context serializing to a file descriptor with the xmlSaveToIO_APIParam_4 and the xmlSaveToIO_APIParam_5 given
xmlSaveToIO_APIParam_3 is an I/O handler
xmlSaveToIO_APIParam_4 is the xmlSaveToIO_APIParam_4 name to use or NULL
xmlSaveToIO_APIParam_5 is a set of xmlSaveOptions
xmlSaveToIO_APIName returns a new serialization context or NULL in case of error
xmlSaveTree_APIParam_1 is a document saving context
xmlSaveTree_APIName returns the number of byte written or -1 in case of error
xmlSaveTree_APIParam_2 is the top xmlSaveTree_APIParam_2 of the subtree to save
Daniel Veillard
Register a new entity for this document
Save a subtree starting at the xmlSaveTree_APIParam_2 parameter to a saving context TODO
The function is not fully implemented yet as it does not return the byte count but 0 instead
xmlAddDocEntity_APIParam_1 is the document
xmlAddDocEntity_APIParam_2 is the entity xmlAddDocEntity_APIParam_2
xmlAddDocEntity_APIParam_3 is the entity xmlAddDocEntity_APIParam_3 XML_xxx_yyy_ENTITY
xmlAddDocEntity_APIParam_6 is the entity xmlAddDocEntity_APIParam_6
xmlAddDocEntity_APIName returns a pointer to the entity or NULL in case of error
Register a new entity for this document DTD external subset
xmlAddDtdEntity_APIParam_1 is the document
xmlAddDtdEntity_APIParam_2 is the entity xmlAddDtdEntity_APIParam_2
xmlAddDocEntity_APIParam_5 is the entity system ID
xmlAddDocEntity_APIParam_4 is the entity external ID
xmlAddDtdEntity_APIParam_3 is the entity xmlAddDtdEntity_APIParam_3 XML_xxx_yyy_ENTITY
xmlAddDtdEntity_APIParam_6 is the entity xmlAddDtdEntity_APIParam_6
xmlAddDtdEntity_APIName returns a pointer to the entity or NULL in case of error
Cleanup up the predefined entities table
xmlAddDtdEntity_APIParam_4 is the entity external ID
Deprecated call
xmlAddDtdEntity_APIParam_5 is the entity system ID
Build a copy of an entity xmlCopyEntitiesTable_APIParam_1
xmlCopyEntitiesTable_APIParam_1 is An entity xmlCopyEntitiesTable_APIParam_1
xmlCopyEntitiesTable_APIName returns the new xmlEntitiesTablePtr or NULL in case of error
create and initialize an empty entities hash table
This really does not make sense and should be deprecated
xmlCreateEntitiesTable_APIName returns the xmlEntitiesTablePtr just created or NULL in case of error
This will dump the content of the entity xmlDumpEntitiesTable_APIParam_2 as an XML DTD definition
xmlDumpEntitiesTable_APIParam_1 is An XML buffer
xmlDumpEntitiesTable_APIParam_2 is An entity table
xmlDumpEntityDecl_APIParam_1 is An XML buffer
This will dump the content of the entity table as an XML DTD definition
xmlDumpEntityDecl_APIParam_2 is An entity table
xmlEncodeEntities_APIParam_1 is the document containing the string
remove xmlEncodeEntities , once we are not afraid of breaking binary compatibility People must migrate their code to xmlEncodeEntitiesReentrant !
xmlEncodeEntities_APIParam_2 is A string to convert to XML
xmlEncodeEntities_APIName returns NULL
This routine will issue a warning
Contrary to xmlEncodeEntities , this routine is reentrant , and result must be deallocated
xmlEncodeEntitiesReentrant_APIParam_1 is the document containing the string
xmlEncodeEntitiesReentrant_APIParam_2 is A string to convert to XML
xmlEncodeEntitiesReentrant_APIName returns A newly allocated string with the substitution done
Do a global encoding of a string , replacing the predefined entities and non ASCII values with their entities and CharRef counterparts
xmlEncodeSpecialChars_APIParam_1 is the document containing the string
xmlEncodeSpecialChars_APIParam_2 is A string to convert to XML
xmlEncodeSpecialChars_APIName returns A newly allocated string with the substitution done
Do a global encoding of a string , replacing the predefined entities this routine is reentrant , and result must be deallocated
Deallocate the memory used by an entities hash xmlFreeEntitiesTable_APIParam_1
xmlFreeEntitiesTable_APIParam_1 is An entity table
Do an entity lookup in the document entity hash table and
xmlGetDocEntity_APIParam_1 is the document referencing the entity
xmlGetDocEntity_APIParam_2 is the entity xmlGetDocEntity_APIParam_2
xmlGetDocEntity_APIName returns the corresponding entity, otherwise a lookup is done in the predefined entities too
xmlGetDocEntity returns A pointer to the entity structure or NULL if not found
Do an entity lookup in the DTD entity hash table and
xmlGetDtdEntity_APIParam_1 is the document referencing the entity
xmlGetDtdEntity_APIParam_2 is the entity xmlGetDtdEntity_APIParam_2
xmlGetDtdEntity_APIName returns the corresponding entity, if found
xmlGetDtdEntity returns A pointer to the entity structure or NULL if not found
Note the first argument is the document node , not the DTD node
Do an entity lookup in the internal and external subsets and
xmlGetParameterEntity_APIParam_1 is the document referencing the entity
xmlGetParameterEntity_APIParam_2 is the entity xmlGetParameterEntity_APIParam_2
xmlGetParameterEntity_APIName returns the corresponding parameter entity, if found
xmlGetParameterEntity returns A pointer to the entity structure or NULL if not found
Check whether this xmlGetPredefinedEntity_APIParam_1 is an predefined entity
xmlGetPredefinedEntity_APIParam_1 is the entity xmlGetPredefinedEntity_APIParam_1
xmlGetPredefinedEntity_APIName returns NULL if not, otherwise the entity
Set up the predefined entities
Deprecated call
xmlNewEntity_APIParam_1 is the document
xmlNewEntity_APIParam_2 is the entity xmlNewEntity_APIParam_2
xmlNewEntity_APIParam_3 is the entity xmlNewEntity_APIParam_3 XML_xxx_yyy_ENTITY
xmlNewEntity_APIParam_6 is the entity xmlNewEntity_APIParam_6
Daniel Veillard
xmlNewEntity_APIName returns a pointer to the entity or NULL in case of error
xmlNewEntity_APIParam_4 is the entity external ID
xmlNewEntity_APIParam_5 is the entity system ID
Build a node list tree copy of the XPointer result
This will drop Attributes and Namespace declarations
xmlXPtrBuildNodeList_APIParam_1 is the XPointer result from the evaluation
xmlXPtrBuildNodeList_APIName returns an xmlNodePtr list or NULL
the caller has to free the node tree
Evaluate the XPath Location Path in the given context
xmlXPtrEval_APIParam_1 is the XPointer expression
xmlXPtrEval_APIParam_2 is the XPointer context
xmlXPtrEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
the caller has to free the object
Create a new entity, this differs from xmlAddDocEntity_APIName that if the document is NULL or has no internal subset defined, an unlinked entity structure will be returned, it is the responsability of the caller to link it to the document later or free it when not needed anymore
xmlXPtrEvalRangePredicate_APIParam_1 is the XPointer Parser context
Free the LocationSet compound
= PredicateExpr
xmlXPtrFreeLocationSet_APIParam_1 is the xmlLocationSetPtr to free
= Expr Evaluate a predicate as in xmlXPathEvalPredicate_APIName but for a Location Set instead of a node set
xmlXPtrLocationSetAdd_APIParam_1 is the initial range set
xmlXPtrLocationSetAdd_APIParam_2 is a new xmlXPathObjectPtr
Create a new xmlLocationSetPtr of type double and of value @val
xmlXPtrLocationSetCreate_APIParam_1 is an initial xmlXPathObjectPtr , or NULL
xmlXPtrLocationSetCreate_APIName returns the newly created object
Removes an xmlXPathObjectPtr from an existing LocationSet
add a new xmlXPathObjectPtr to an existing LocationSet
is freed
xmlXPtrLocationSetDel_APIParam_1 is the initial range set
xmlXPtrLocationSetDel_APIParam_2 is an xmlXPathObjectPtr
Merges two rangesets , all ranges from @val2 are added to @val1
xmlXPtrLocationSetMerge_APIParam_1 is the first LocationSet
xmlXPtrLocationSetMerge_APIParam_2 is the second LocationSet
xmlXPtrLocationSetMerge_APIName returns xmlXPtrLocationSetMerge_APIParam_1 once extended or NULL in case of error
Removes an entry from an existing LocationSet list
xmlXPtrLocationSetRemove_APIParam_1 is the initial range set
xmlXPtrLocationSetRemove_APIParam_2 is the index to remove
Create a new xmlXPathObjectPtr of type range using a single nodes
xmlXPtrNewCollapsedRange_APIParam_1 is the starting and ending node
xmlXPtrNewCollapsedRange_APIName returns the newly created object
Create a new XPointer context
xmlXPtrNewContext_APIParam_1 is the XML document
xmlXPtrNewContext_APIName returns the xmlXPathContext just allocated
xmlXPtrNewContext_APIParam_2 is the node that directly contains the XPointer being evaluated or NULL
xmlXPtrNewLocationSetNodeSet_APIParam_1 is a node xmlXPtrNewLocationSetNodeSet_APIParam_1
xmlXPtrNewContext_APIParam_3 is the element from which a user or program initiated traversal of the link , or NULL
xmlXPtrNewLocationSetNodeSet_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type LocationSet and initialize it with all the nodes from @set
xmlXPtrNewLocationSetNodes_APIParam_1 is the xmlXPtrNewLocationSetNodes_APIParam_1 NodePtr value
xmlXPtrNewLocationSetNodes_APIParam_2 is the xmlXPtrNewLocationSetNodes_APIParam_2 NodePtr value or NULL
xmlXPtrNewLocationSetNodes_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type LocationSet and initialize it with the single range made of the two nodes @start and @end
Create a new xmlXPathObjectPtr of type range
xmlXPtrNewRange_APIParam_1 is the starting node
xmlXPtrNewRange_APIParam_2 is the xmlXPtrNewRange_APIParam_1 index
xmlXPtrNewRange_APIParam_3 is the ending point
xmlXPtrNewRange_APIParam_4 is the ending index
xmlXPtrNewRange_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type range from a not to an object
xmlXPtrNewRangeNodeObject_APIParam_1 is the starting node
xmlXPtrNewRangeNodeObject_APIParam_2 is the ending object
xmlXPtrNewRangeNodeObject_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type range from a node to a point
xmlXPtrNewRangeNodePoint_APIParam_1 is the starting node
xmlXPtrNewRangeNodePoint_APIParam_2 is the ending point
xmlXPtrNewRangeNodePoint_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type range using 2 nodes
xmlXPtrNewRangeNodes_APIParam_1 is the starting node
xmlXPtrNewRangeNodes_APIParam_2 is the ending node
xmlXPtrNewRangeNodes_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type range from a point to a node
xmlXPtrNewRangePointNode_APIParam_1 is the starting point
xmlXPtrNewRangePointNode_APIParam_2 is the ending node
xmlXPtrNewRangePointNode_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type range using 2 Points
xmlXPtrNewRangePoints_APIParam_1 is the starting point
xmlXPtrNewRangePoints_APIParam_2 is the ending point
xmlXPtrNewRangePoints_APIName returns the newly created object
Implement the range-to_APIName XPointer function Obsolete
xmlXPtrRangeToFunction_APIParam_1 is the XPointer Parser context
xmlXPtrRangeToFunction_APIParam_2 is the number of args
range-to is not a real function but a special type of location step which is handled in xpath.c
Wrap the LocationSet @val in a new xmlXPathObjectPtr
xmlXPtrWrapLocationSet_APIParam_1 is the LocationSet value
xmlXPtrWrapLocationSet_APIName returns the newly created object
Daniel Veillard
Expresses the xmlBuildRelativeURI_APIParam_1 of the reference in terms relative to the xmlBuildRelativeURI_APIParam_2
xmlBuildRelativeURI_APIParam_1 is the xmlBuildRelativeURI_APIParam_1 reference under consideration
xmlBuildRelativeURI_APIParam_2 is the xmlBuildRelativeURI_APIParam_2 value
xmlBuildRelativeURI_APIName returns a new xmlBuildRelativeURI_APIParam_1 string  or NULL in case error
This is processed according to section 5.2 of the RFC 2396 5.2
Resolving Relative References to Absolute Form
xmlBuildURI_APIParam_1 is the xmlBuildURI_APIParam_1 instance found in the document
xmlBuildURI_APIParam_2 is the xmlBuildURI_APIParam_2 value
Some examples of this operation include
Computes he final xmlBuildURI_APIParam_1 of the reference done by checking that the given xmlBuildURI_APIParam_1 is valid , and building the final xmlBuildURI_APIParam_1 using the xmlBuildURI_APIParam_2 xmlBuildURI_APIParam_1
xmlBuildRelativeURI_APIParam_2 = `` http
//site1.com/docs/book1.html" xmlBuildRelativeURI_APIParam_1 input xmlBuildRelativeURI_APIParam_1 returned docs/pic1.gif pic1.gif docs/img/pic1.gif img/pic1.gif img/pic1.gif ../img/pic1.gif http
/ / site1.com/docs/pic1.gif pic1.gif http
/ / site2.com/docs/pic1.gif http
//site2.com/docs/pic1.gif xmlBuildRelativeURI_APIParam_2 = "docs/book1.html" xmlBuildRelativeURI_APIParam_1 input xmlBuildRelativeURI_APIParam_1 returned docs/pic1.gif pic1.gif docs/img/pic1.gif img/pic1.gif img/pic1.gif ../img/pic1.gif http
/ / site1.com/docs/pic1.gif http
/ / site1.com/docs/pic1.gif Note
it may be worthwhile to first convert it into a `` nice '' one by calling xmlBuildURI before calling this routine , since this routine assumes xmlBuildRelativeURI_APIParam_1 has already been through some validation
xmlBuildURI_APIName returns a new xmlBuildURI_APIParam_1 string  or NULL in case of error
Constructs a canonic xmlCanonicPath_APIParam_1 from the specified xmlCanonicPath_APIParam_1
xmlCanonicPath_APIParam_1 is the resource locator in a filesystem notation
xmlCanonicPath_APIName returns a new canonic xmlCanonicPath_APIParam_1, or a duplicate of the xmlCanonicPath_APIParam_1 parameter if the construction fails
The caller is responsible for freeing the memory occupied by xmlCanonicPath_APIParam_0
Simply creates an empty xmlURI
If there is insufficient memory available, or the argument is NULL, the function returns NULL
xmlCreateURI_APIName returns the new structure or NULL in case of error
Free up the xmlURI struct
xmlFreeURI_APIParam_1 is pointer to an xmlURI
Normalization occurs directly on the string , no new allocation is done
xmlNormalizeURIPath_APIParam_1 is pointer to the xmlNormalizeURIPath_APIParam_1 string
xmlNormalizeURIPath_APIName returns 0 or an error code
Applies the 5 normalization steps to a xmlNormalizeURIPath_APIParam_1 string -- that is , RFC 2396 Section 5.2 , steps 6.c through 6
Parse an URI based on RFC 3986 URI-reference =
xmlParseURI_APIParam_1 is the URI string to analyze
xmlParseURI_APIName returns a newly built xmlURIPtr or NULL in case of error
Parse an URI but allows to keep intact the original fragments
URI-reference = URI / relative-ref
xmlParseURIRaw_APIParam_1 is the URI string to analyze
xmlParseURIRaw_APIName returns a newly built xmlURIPtr or NULL in case of error
xmlParseURIReference_APIParam_1 is pointer to an URI structure
xmlParseURIReference_APIParam_2 is the string to analyze
xmlParseURIRaw_APIParam_2 is
xmlParseURIReference_APIName returns 0 or the error code
Constructs an URI expressing the existing xmlPathToURI_APIParam_1
Parse an URI reference string based on RFC 3986 and fills in the appropriate fields of the @uri structure URI-reference = URI / relative-ref
xmlPathToURI_APIParam_1 is the resource locator in a filesystem notation
xmlPathToURI_APIName returns a new URI, or a duplicate of the xmlPathToURI_APIParam_1 parameter if the construction fails
The caller is responsible for freeing the memory occupied by xmlPathToURI_APIParam_0
Prints the URI in the xmlPrintURI_APIParam_1 @stream
If there is insufficient memory available, or the argument is NULL, the function returns NULL
xmlPrintURI_APIParam_1 is a FILE * for the output
xmlPrintURI_APIParam_2 is pointer to an xmlURI
Save the URI as an escaped string
xmlSaveUri_APIParam_1 is pointer to an xmlURI
xmlSaveUri_APIName returns a new string (to be deallocated by caller
Escaping routine , does not do validity checks !
xmlURIEscape_APIParam_1 is the string of the URI to escape
- Carl Douglas
xmlURIEscape_APIName returns an copy of the string, but escaped 25 May 2001 Uses xmlParseURI and xmlURIEscapeStr to try to escape correctly according to RFC2396
It will try to escape the chars needing this , but this is heuristic based it is impossible to be sure
xmlURIEscapeStr_APIParam_1 is string to escape
xmlURIEscapeStr_APIParam_2 is exception xmlURIEscapeStr_APIParam_2 string of chars not to escape
This routine escapes a string to hex , ignoring reserved characters and the characters in the exception xmlURIEscapeStr_APIParam_2
xmlURIEscapeStr_APIName returns a new escaped string or NULL in case of error
Unescaping routine , but does not check that the string is an URI
xmlURIUnescapeString_APIParam_1 is the string to unescape
xmlURIUnescapeString_APIParam_2 is the length in bytes to unescape
xmlURIUnescapeString_APIParam_3 is optional destination buffer
Daniel Veillard
xmlURIUnescapeString_APIName returns a copy of the string, but unescaped, will return NULL only in case of error
Deallocate a Schema Type structure
xmlSchemaFreeType_APIParam_1 is a schema xmlSchemaFreeType_APIParam_1 structure
The output is a direct unsigned char translation of % XX values Note that the length of the result can only be smaller or same size as the input string
Deallocates a xmlSchemaFreeWildcard_APIParam_1 structure
xmlSchemaFreeWildcard_APIParam_1 is a xmlSchemaFreeWildcard_APIParam_1 structure
Daniel Veillard
Add the @userdata to the hash @table
This can later be retrieved by using the @name
Duplicate names generate errors
xmlHashAddEntry_APIParam_1 is the hash xmlHashAddEntry_APIParam_1
xmlHashAddEntry_APIParam_2 is the xmlHashAddEntry_APIParam_2 of the xmlHashAddEntry_APIParam_3
xmlHashAddEntry_APIParam_3 is a pointer to the xmlHashAddEntry_APIParam_3
xmlHashAddEntry_APIName returns 0 the addition succeeded and -1 in case of error
Add the @userdata to the hash @table
This can later be retrieved by using the tuple
Duplicate tuples generate errors
xmlHashAddEntry2_APIParam_1 is the hash xmlHashAddEntry2_APIParam_1
xmlHashAddEntry2_APIParam_2 is the xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4
xmlHashAddEntry2_APIParam_3 is a second xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4
xmlHashAddEntry2_APIParam_4 is a pointer to the xmlHashAddEntry2_APIParam_4
xmlHashAddEntry2_APIName returns 0 the addition succeeded and -1 in case of error
Add the @userdata to the hash @table
This can later be retrieved by using the tuple
Duplicate entries generate errors
xmlHashAddEntry3_APIParam_1 is the hash xmlHashAddEntry3_APIParam_1
xmlHashAddEntry3_APIParam_2 is the xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5
xmlHashAddEntry3_APIParam_3 is a second xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5
xmlHashAddEntry3_APIParam_4 is a third xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5
xmlHashAddEntry3_APIParam_5 is a pointer to the xmlHashAddEntry3_APIParam_5
xmlHashAddEntry3_APIName returns 0 the addition succeeded and -1 in case of error
Callback to copy data from a hash
xmlHashCopier_APIParam_1 is the data in the hash
xmlHashCopier_APIParam_2 is the xmlHashCopier_APIParam_2 associated
xmlHashCopier_APIName returns a copy of the data or NULL in case of error
Scan the hash @table and applied @f to each value
xmlHashCopy_APIParam_1 is the hash xmlHashCopy_APIParam_1
xmlHashCopy_APIParam_2 is the copier function for items in the hash
xmlHashCopy_APIName returns the new xmlHashCopy_APIParam_1 or NULL in case of error
Create a new xmlHashTablePtr
xmlHashCreate_APIParam_1 is the xmlHashCreate_APIParam_1 of the hash table
xmlHashCreate_APIName returns the newly created object, or NULL if an error occurred
Create a new xmlHashTablePtr which will use @dict as the internal dictionary
xmlHashCreateDict_APIParam_1 is the xmlHashCreateDict_APIParam_1 of the hash table
xmlHashCreateDict_APIParam_2 is a dictionary to use for the hash
xmlHashCreateDict_APIName returns the newly created object, or NULL if an error occurred
Callback to free data from a hash
xmlHashDeallocator_APIParam_1 is the data in the hash
xmlHashDeallocator_APIParam_2 is the xmlHashDeallocator_APIParam_2 associated
Free the hash @table and its contents
xmlHashFree_APIParam_1 is the hash xmlHashFree_APIParam_1
xmlHashFree_APIParam_2 is the deallocator function for items in the hash
Find the userdata specified by the @name
xmlHashLookup_APIParam_1 is the hash xmlHashLookup_APIParam_1
The userdata is deallocated with @f
xmlHashLookup_APIParam_2 is the xmlHashLookup_APIParam_2 of the userdata
xmlHashLookup_APIName returns the pointer to the userdata
Find the userdata specified by the tuple
xmlHashLookup2_APIParam_1 is the hash xmlHashLookup2_APIParam_1
xmlHashLookup2_APIParam_2 is the xmlHashLookup2_APIParam_2 of the userdata
xmlHashLookup2_APIParam_3 is a second xmlHashLookup2_APIParam_2 of the userdata
xmlHashLookup2_APIName returns the pointer to the userdata
Find the userdata specified by the tuple
xmlHashLookup3_APIParam_1 is the hash xmlHashLookup3_APIParam_1
xmlHashLookup3_APIParam_2 is the xmlHashLookup3_APIParam_2 of the userdata
xmlHashLookup3_APIParam_3 is a second xmlHashLookup3_APIParam_2 of the userdata
xmlHashLookup3_APIParam_4 is a third xmlHashLookup3_APIParam_2 of the userdata
xmlHashLookup3_APIName returns the a pointer to the userdata
Find the userdata specified by the QName @prefix
xmlHashQLookup_APIParam_1 is the hash xmlHashQLookup_APIParam_1
xmlHashQLookup_APIParam_2 is the xmlHashQLookup_APIParam_2 of the userdata
xmlHashQLookup_APIParam_3 is the xmlHashQLookup_APIParam_3 of the userdata
xmlHashQLookup_APIName returns the pointer to the userdata
Find the userdata specified by the QNames tuple
xmlHashQLookup2_APIParam_1 is the hash xmlHashQLookup2_APIParam_1
xmlHashQLookup2_APIParam_2 is the xmlHashQLookup2_APIParam_2 of the userdata
xmlHashQLookup2_APIParam_3 is the xmlHashQLookup2_APIParam_3 of the userdata
xmlHashQLookup2_APIParam_4 is the second xmlHashQLookup2_APIParam_2 of the userdata
xmlHashQLookup2_APIParam_5 is a second xmlHashQLookup2_APIParam_3 of the userdata
xmlHashQLookup2_APIName returns the pointer to the userdata
Find the userdata specified by the tuple
xmlHashQLookup3_APIParam_1 is the hash xmlHashQLookup3_APIParam_1
xmlHashQLookup3_APIParam_2 is the xmlHashQLookup3_APIParam_2 of the userdata
xmlHashQLookup3_APIParam_3 is the xmlHashQLookup3_APIParam_3 of the userdata
xmlHashQLookup3_APIParam_4 is the second xmlHashQLookup3_APIParam_2 of the userdata
xmlHashQLookup3_APIParam_5 is a second xmlHashQLookup3_APIParam_3 of the userdata
xmlHashQLookup3_APIParam_6 is the third xmlHashQLookup3_APIParam_2 of the userdata
xmlHashQLookup3_APIParam_7 is a third xmlHashQLookup3_APIParam_3 of the userdata
xmlHashQLookup3_APIName returns the a pointer to the userdata
Find the userdata specified by the @name and remove the @name from the hash @table
Existing userdata for this tuple will be removed and freed with @f
xmlHashRemoveEntry_APIParam_2 is the xmlHashRemoveEntry_APIParam_2 of the userdata
xmlHashRemoveEntry_APIParam_3 is the deallocator function for removed item
xmlHashRemoveEntry_APIName returns 0 if the removal succeeded and -1 in case of error or not found
Find the userdata specified by the tuple and remove it from the hash @table
Existing userdata for this tuple will be removed and freed with @f
xmlHashRemoveEntry2_APIParam_2 is the xmlHashRemoveEntry2_APIParam_2 of the userdata
xmlHashRemoveEntry2_APIParam_3 is a second xmlHashRemoveEntry2_APIParam_2 of the userdata
xmlHashRemoveEntry2_APIParam_4 is the deallocator function for removed item
xmlHashRemoveEntry2_APIName returns 0 if the removal succeeded and -1 in case of error or not found
Find the userdata specified by the tuple and remove it from the hash @table
Existing userdata for this tuple will be removed and freed with @f
xmlHashRemoveEntry3_APIParam_2 is the xmlHashRemoveEntry3_APIParam_2 of the userdata
xmlHashRemoveEntry3_APIParam_3 is a second xmlHashRemoveEntry3_APIParam_2 of the userdata
xmlHashRemoveEntry3_APIParam_4 is a third xmlHashRemoveEntry3_APIParam_2 of the userdata
xmlHashRemoveEntry3_APIParam_5 is the deallocator function for removed item
xmlHashRemoveEntry3_APIName returns 0 if the removal succeeded and -1 in case of error or not found
Scan the hash @table and applied @f to each value
xmlHashScan_APIParam_1 is the hash xmlHashScan_APIParam_1
xmlHashScan_APIParam_2 is the scanner function for items in the hash
xmlHashScan_APIParam_3 is extra xmlHashScan_APIParam_3 passed to f
Scan the hash @table and applied @f to each value matching tuple
xmlHashScan3_APIParam_1 is the hash xmlHashScan3_APIParam_1
xmlHashScan3_APIParam_2 is the xmlHashScan3_APIParam_2 of the userdata or NULL
xmlHashScan3_APIParam_3 is a second xmlHashScan3_APIParam_2 of the userdata or NULL
xmlHashScan3_APIParam_4 is a third xmlHashScan3_APIParam_2 of the userdata or NULL
the comparison is considered to match
xmlHashScan3_APIParam_5 is the scanner function for items in the hash
xmlHashScan3_APIParam_6 is extra xmlHashScan3_APIParam_6 passed to f
Scan the hash @table and applied @f to each value
xmlHashScanFull_APIParam_1 is the hash xmlHashScanFull_APIParam_1
xmlHashScanFull_APIParam_2 is the scanner function for items in the hash
xmlHashScanFull_APIParam_3 is extra xmlHashScanFull_APIParam_3 passed to f
Scan the hash @table and applied @f to each value matching tuple
xmlHashScanFull3_APIParam_1 is the hash xmlHashScanFull3_APIParam_1
xmlHashScanFull3_APIParam_2 is the xmlHashScanFull3_APIParam_2 of the userdata or NULL
xmlHashScanFull3_APIParam_3 is a second xmlHashScanFull3_APIParam_2 of the userdata or NULL
xmlHashScanFull3_APIParam_4 is a third xmlHashScanFull3_APIParam_2 of the userdata or NULL
the comparison is considered to match
xmlHashScanFull3_APIParam_5 is the scanner function for items in the hash
xmlHashScanFull3_APIParam_6 is extra xmlHashScanFull3_APIParam_6 passed to f
xmlHashScanner_APIParam_1 is the xmlHashScanner_APIParam_2 in the hash
xmlHashScanner_APIParam_2 is extra scannner xmlHashScanner_APIParam_2
xmlHashScanner_APIParam_3 is the xmlHashScanner_APIParam_3 associated
Callback
xmlHashScannerFull_APIParam_1 is the xmlHashScannerFull_APIParam_2 in the hash
xmlHashScannerFull_APIParam_2 is extra scannner xmlHashScannerFull_APIParam_2
xmlHashScannerFull_APIParam_3 is the xmlHashScannerFull_APIParam_3 associated
xmlHashScannerFull_APIParam_4 is the second xmlHashScannerFull_APIParam_3 associated
xmlHashScannerFull_APIParam_5 is the third xmlHashScannerFull_APIParam_3 associated
Callback
Query the number of elements installed in the hash @table
xmlHashSize_APIParam_1 is the hash xmlHashSize_APIParam_1
xmlHashSize_APIName returns the number of elements in the hash xmlHashSize_APIParam_1 or -1 in case of error
Add the @userdata to the hash @table
This can later be retrieved by using the @name
xmlHashUpdateEntry_APIParam_1 is the hash xmlHashUpdateEntry_APIParam_1
xmlHashUpdateEntry_APIParam_2 is the xmlHashUpdateEntry_APIParam_2 of the xmlHashUpdateEntry_APIParam_3
xmlHashUpdateEntry_APIParam_3 is a pointer to the xmlHashUpdateEntry_APIParam_3
xmlHashUpdateEntry_APIParam_4 is the deallocator function for replaced item
Existing entry for this @name will be removed and freed with @f
xmlHashUpdateEntry_APIName returns 0 the addition succeeded and -1 in case of error
Add the @userdata to the hash @table
This can later be retrieved by using the tuple
xmlHashUpdateEntry2_APIParam_1 is the hash xmlHashUpdateEntry2_APIParam_1
xmlHashUpdateEntry2_APIParam_2 is the xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4
xmlHashUpdateEntry2_APIParam_3 is a second xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4
xmlHashUpdateEntry2_APIParam_4 is a pointer to the xmlHashUpdateEntry2_APIParam_4
Existing entry for this tuple will be removed and freed with @f
xmlHashUpdateEntry2_APIParam_5 is the deallocator function for replaced item
xmlHashUpdateEntry2_APIName returns 0 the addition succeeded and -1 in case of error
Add the @userdata to the hash @table
This can later be retrieved by using the tuple
xmlHashUpdateEntry3_APIParam_1 is the hash xmlHashUpdateEntry3_APIParam_1
xmlHashUpdateEntry3_APIParam_2 is the xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5
xmlHashUpdateEntry3_APIParam_3 is a second xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5
xmlHashUpdateEntry3_APIParam_4 is a third xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5
Existing entry for this tuple will be removed and freed with @f
xmlHashUpdateEntry3_APIParam_5 is a pointer to the xmlHashUpdateEntry3_APIParam_5
xmlHashUpdateEntry3_APIParam_6 is the deallocator function for replaced item
xmlHashUpdateEntry3_APIName returns 0 the addition succeeded and -1 in case of error
Daniel Veillard
Dump a Schema structure
xmlSchemaDump_APIParam_1 is the file xmlSchemaDump_APIParam_1
xmlSchemaDump_APIParam_2 is a xmlSchemaDump_APIParam_2 structure
Deallocate a Schema structure
xmlSchemaFree_APIParam_1 is a xmlSchemaFree_APIParam_1 structure
Free the resources associated to the schema parser context
xmlSchemaFreeParserCtxt_APIParam_1 is the schema parser context
Free the resources associated to the schema validation context
xmlSchemaFreeValidCtxt_APIParam_1 is the schema validation context
Get the callback information used to handle errors for a parser context
xmlSchemaGetParserErrors_APIParam_1 is a XMl-Schema parser context
xmlSchemaGetParserErrors_APIParam_2 is the error callback result
xmlSchemaGetParserErrors_APIParam_3 is the warning callback result
xmlSchemaGetParserErrors_APIParam_4 is contextual data for the callbacks result
xmlSchemaGetParserErrors_APIName returns -1 in case of failure, 0 otherwise
Get the error and warning callback informations
xmlSchemaGetValidErrors_APIParam_1 is a XML-Schema validation context
xmlSchemaGetValidErrors_APIParam_2 is the error function result
xmlSchemaGetValidErrors_APIParam_3 is the warning function result
xmlSchemaGetValidErrors_APIParam_4 is the functions context result
xmlSchemaGetValidErrors_APIName returns -1 in case of error and 0 otherwise
xmlSchemaIsValid_APIParam_1 is the schema validation context
Create an XML Schemas parse context for that document
xmlSchemaIsValid_APIName returns 1 if valid so far, 0 if errors were detected, and -1 in case of internal error
Check
xmlSchemaNewDocParserCtxt_APIParam_1 is a preparsed document tree
xmlSchemaNewDocParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML Schemas parse context for that memory xmlSchemaNewMemParserCtxt_APIParam_1 expected to contain an XML Schemas file
The document may be modified
xmlSchemaNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas
xmlSchemaNewMemParserCtxt_APIParam_2 is the xmlSchemaNewMemParserCtxt_APIParam_2 of the array
xmlSchemaNewMemParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML Schemas parse context for that file/resource expected to contain an XML Schemas file
xmlSchemaNewParserCtxt_APIParam_1 is the location of the schema
xmlSchemaNewParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML Schemas validation context based on the given xmlSchemaNewValidCtxt_APIParam_1
xmlSchemaNewValidCtxt_APIParam_1 is a precompiled XML Schemas
xmlSchemaNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlSchemaParse_APIParam_1 is a schema validation context
xmlSchemaParse_APIName returns the internal XML Schema structure built from the resource or NULL in case of error
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances
Plug a SAX based validation layer in a SAX parsing event flow
xmlSchemaSAXPlug_APIParam_1 is a schema validation context
xmlSchemaSAXPlug_APIParam_2 is a pointer to the original xmlSAXHandlerPtr
The original @saxptr and @dataptr data are replaced by new pointers but the calls to the original will be maintained
xmlSchemaSAXPlug_APIName returns a pointer to a data structure needed to unplug the validation layer or NULL in case of errors
xmlSchemaSAXPlug_APIParam_3 is a pointer to the original SAX user data pointer
Unplug a SAX based validation layer in a SAX parsing event flow
The original pointers used in the call are restored
xmlSchemaSAXUnplug_APIParam_1 is a data structure returned by xmlSchemaSAXPlug
xmlSchemaSAXUnplug_APIName returns 0 in case of success and -1 in case of failure
Set the callback functions used to handle errors for a validation context
xmlSchemaSetParserErrors_APIParam_1 is a schema validation context
xmlSchemaSetParserErrors_APIParam_2 is the error callback
xmlSchemaSetParserErrors_APIParam_3 is the warning callback
xmlSchemaSetParserErrors_APIParam_4 is contextual data for the callbacks
Set the structured error callback
xmlSchemaSetParserStructuredErrors_APIParam_1 is a schema parser context
xmlSchemaSetParserStructuredErrors_APIParam_2 is the structured error function
xmlSchemaSetParserStructuredErrors_APIParam_3 is the functions context
Set the error and warning callback informations
xmlSchemaSetValidErrors_APIParam_1 is a schema validation context
xmlSchemaSetValidErrors_APIParam_2 is the error function
xmlSchemaSetValidErrors_APIParam_3 is the warning function
xmlSchemaSetValidErrors_APIParam_4 is the functions context
xmlSchemaSetValidOptions_APIParam_1 is a schema validation context
xmlSchemaSetValidOptions_APIParam_2 is a combination of xmlSchemaValidOption
Set the structured error callback
xmlSchemaSetValidOptions_APIName returns 0 in case of success, -1 in case of an API error
to be used
Sets the xmlSchemaSetValidOptions_APIParam_2
xmlSchemaSetValidStructuredErrors_APIParam_1 is a schema validation context
xmlSchemaSetValidStructuredErrors_APIParam_2 is the structured error function
xmlSchemaSetValidStructuredErrors_APIParam_3 is the functions context
Get the validation context options
xmlSchemaValidCtxtGetOptions_APIParam_1 is a schema validation context
xmlSchemaValidCtxtGetOptions_APIName returns the option combination or -1 on error
allow access to the parser context of the schema validation context
xmlSchemaValidCtxtGetParserCtxt_APIParam_1 is a schema validation context
xmlSchemaValidCtxtGetParserCtxt_APIName returns the parser context of the schema validation context or NULL in case of error
Validate a document tree in memory
xmlSchemaValidateDoc_APIParam_1 is a schema validation context
xmlSchemaValidateDoc_APIParam_2 is a parsed document tree
xmlSchemaValidateFile_APIParam_1 is a schema validation context
xmlSchemaValidateDoc_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
Do a schemas validation of the given resource , a schemas validation of the given resource will use the SAX streamable validation internally
xmlSchemaValidateFile_APIParam_2 is the URI of the instance
xmlSchemaValidateFile_APIParam_3 is a future set of xmlSchemaValidateFile_APIParam_3 , currently unused
Validate a branch of a tree , starting with the given @elem
xmlSchemaValidateOneElement_APIParam_1 is a schema validation context
xmlSchemaValidateOneElement_APIParam_2 is an element node
xmlSchemaValidateFile_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of an internal or API error
xmlSchemaValidateSetFilename_APIParam_1 is the schema validation context
xmlSchemaValidateSetFilename_APIParam_2 is the file name
xmlSchemaValidateOneElement_APIName returns 0 if the element and its subtree is valid, a positive error code number otherwise and -1 in case of an internal or API error
xmlSchemaValidateSetLocator_APIParam_1 is a schema validation context
xmlSchemaValidateSetLocator_APIParam_2 is the locator function pointer
Workaround to provide file error reporting information
xmlSchemaValidateSetLocator_APIParam_3 is the locator context
xmlSchemaValidateStream_APIParam_1 is a schema validation context
xmlSchemaValidateStream_APIParam_2 is the xmlSchemaValidateStream_APIParam_2 to use for reading the data
xmlSchemaValidateStream_APIParam_3 is an optional encoding information
xmlSchemaValidateStream_APIParam_4 is a SAX handler for the resulting events
xmlSchemaValidateStream_APIParam_5 is the context to provide to the SAX handler
Allows to set a locator function to the validation context , which will be used to provide file and line information
Signature of an error callback from an xmlSchemaValidityErrorFunc_APIParam_3 validation
xmlSchemaValidityErrorFunc_APIParam_1 is xmlSchemaValidityErrorFunc_APIParam_3 validation context
xmlSchemaValidityErrorFunc_APIParam_2 is xmlSchemaValidityErrorFunc_APIParam_3 message xmlSchemaValidityErrorFunc_APIParam_3 extra arguments
xmlSchemaValidateStream_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
A schemas validation locator , a callback called by the validator
xmlSchemaValidityLocatorFunc_APIParam_1 is user provided context
xmlSchemaValidityLocatorFunc_APIParam_2be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_2 information
xmlSchemaValidityLocatorFunc_APIParam_3be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_3 information
Validate an xmlSchemaValidateStream_APIParam_2 based on a flow of SAX event from the parser and forward the events to the @sax handler with the provided @user_data the user provided @sax handler must be a SAX2 one
xmlSchemaValidityLocatorFunc_APIName returns 0 in case of success and -1 in case of error
Signature of a warning callback from an xmlSchemaValidityWarningFunc_APIParam_3 validation
xmlSchemaValidityWarningFunc_APIParam_1 is xmlSchemaValidityWarningFunc_APIParam_3 validation context
This is used
xmlSchemaValidityWarningFunc_APIParam_2 is xmlSchemaValidityWarningFunc_APIParam_3 message xmlSchemaValidityWarningFunc_APIParam_3 extra arguments
Daniel Veillard
UTF8Toisolat1_APIParam_1 is a pointer to an array of bytes to store the result
UTF8Toisolat1_APIParam_2 is the length of @out
Take a block of UTF-8 chars UTF8Toisolat1_APIParam_3 and try to convert it to an ISO Latin 1 block of chars UTF8Toisolat1_APIParam_1
UTF8Toisolat1_APIParam_3 is a pointer to an array of UTF-8 chars
UTF8Toisolat1_APIParam_4 is the length of @in
The value of @outlen after return is the number of octets consumed
isolat1ToUTF8_APIParam_1 is a pointer to an array of bytes to store the result
isolat1ToUTF8_APIParam_2 is the length of @out
Take a block of ISO Latin 1 chars isolat1ToUTF8_APIParam_3 and try to convert it to an UTF-8 block of chars isolat1ToUTF8_APIParam_1
isolat1ToUTF8_APIParam_3 is a pointer to an array of ISO Latin 1 chars
isolat1ToUTF8_APIParam_4 is the length of @in
The value of @outlen after return is the number of octets consumed
UTF8Toisolat1_APIName returns the number of bytes written if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable
Registers an xmlAddEncodingAlias_APIParam_2 @alias for an encoding named @name
Existing xmlAddEncodingAlias_APIParam_2 will be overwritten
xmlAddEncodingAlias_APIParam_1 is the encoding xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format
xmlAddEncodingAlias_APIParam_2 is the xmlAddEncodingAlias_APIParam_2 xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format
isolat1ToUTF8_APIName returns the number of bytes written if success, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable
xmlAddEncodingAlias_APIName returns 0 in case of success, -1 in case of error
Generic front-end for encoding xmlCharEncCloseFunc_APIParam_1 close function
xmlCharEncCloseFunc_APIParam_1 is char enconding transformation data structure
xmlCharEncCloseFunc_APIName returns 0 if success, or -1 in case of error
limit itself to 45 chars
xmlCharEncFirstLine_APIParam_1 is char enconding transformation data structure
Front-end for the encoding xmlCharEncFirstLine_APIParam_1 input function , but handle only the very first line , i.e
xmlCharEncFirstLine_APIParam_2 is an xmlBuffer for the output
xmlCharEncFirstLine_APIParam_3 is an xmlBuffer for the input
Generic front-end for the encoding xmlCharEncInFunc_APIParam_1 input function
xmlCharEncFirstLine_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or
xmlCharEncInFunc_APIParam_1 is char encoding transformation data structure
xmlCharEncInFunc_APIParam_2 is an xmlBuffer for the output
xmlCharEncInFunc_APIParam_3 is an xmlBuffer for the input
xmlCharEncInFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or
xmlCharEncOutFunc_APIParam_1 is char enconding transformation data structure
xmlCharEncOutFunc_APIParam_2 is an xmlBuffer for the output
xmlCharEncOutFunc_APIParam_3 is an xmlBuffer for the input
xmlCharEncOutFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or
In case of UTF8 sequence conversion errors for the given encoder , the content will be automatically remapped to a CharRef sequence
Generic front-end for the encoding xmlCharEncOutFunc_APIParam_1 output function a first call with @in == NULL has to be made firs to initiate the output xmlCharEncOutFunc_APIParam_3 case of non-stateless encoding needing to initiate their state or the output
The value of @outlen after return is the number of octets consumed
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
xmlCharEncodingInputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed
xmlCharEncodingInputFunc_APIParam_2 is the length of @out
xmlCharEncodingOutputFunc_APIParam_2 is the length of @out
xmlCharEncodingInputFunc_APIParam_4 is the length of @in
xmlCharEncodingInputFunc_APIParam_3 is a pointer to an array of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding
xmlCharEncodingOutputFunc_APIParam_4 is the length of @in
xmlCharEncodingOutputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed
xmlCharEncodingOutputFunc_APIParam_1 is a pointer to an array of bytes to store the result
xmlCharEncodingOutputFunc_APIParam_3 is a pointer to an array of UTF-8 chars
Take a block of UTF-8 chars xmlCharEncodingOutputFunc_APIParam_3 and try to convert it to another encoding
xmlCharEncodingInputFunc_APIParam_1 is a pointer to an array of bytes to store the UTF-8 result
a first call designed to produce heading info is called with xmlCharEncodingOutputFunc_APIParam_3 = NULL
The value of @outlen after return is the number of octets produced
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
Take a block of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding and try to convert a block of chars to an UTF-8 block of chars xmlCharEncodingInputFunc_APIParam_1
Unregisters all aliases
this should also initialize the encoder state
Unregisters an encoding xmlDelEncodingAlias_APIParam_1 @alias
Cleanup the memory allocated for the char encoding support , it unregisters all the encoding handlers and the aliases
xmlDelEncodingAlias_APIParam_1 is the xmlDelEncodingAlias_APIParam_1 name as parsed , in UTF-8 format
xmlDelEncodingAlias_APIName returns 0 in case of success, -1 in case of error
xmlDetectCharEncoding_APIParam_2 is pointer to the length of the buffer
xmlDetectCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values
xmlDetectCharEncoding_APIParam_1 is a pointer to the first bytes of the XML entity , must be at least 2 bytes long
Search in the registered set the handler able to read/write that encoding
Guess the encoding of the entity using the first bytes of the entity content according to the non-normative appendix F of the XML-1 .0 recommendation
xmlFindCharEncodingHandler_APIParam_1 is a string describing the char encoding
xmlFindCharEncodingHandler_APIName returns the handler or NULL if not found
Search in the registered set the handler able to read/write that encoding
xmlGetCharEncodingHandler_APIParam_1 is an xmlCharEncoding value
xmlGetCharEncodingHandler_APIName returns the handler or NULL if not found
The `` canonical '' name for XML encoding
/ / www.w3.org/TR/REC-xml#charencoding Section 4.3.3 Character Encoding in Entities
xmlGetCharEncodingName_APIParam_1 is the encoding
xmlGetCharEncodingName_APIName returns the canonical name for the given encoding
Lookup an encoding name for the given xmlGetEncodingAlias_APIParam_1
xmlGetEncodingAlias_APIName returns NULL if not found, otherwise the original name
xmlGetEncodingAlias_APIParam_1 is the xmlGetEncodingAlias_APIParam_1 name as parsed , in UTF-8 format
Initialize the char encoding support , the char encoding support registers the default encoding supported
Create and registers an xmlCharEncodingHandler
xmlNewCharEncodingHandler_APIParam_1 is the encoding xmlNewCharEncodingHandler_APIParam_1 , in UTF-8 format
xmlNewCharEncodingHandler_APIParam_2 is the xmlCharEncodingInputFunc to read that encoding
xmlNewCharEncodingHandler_APIParam_3 is the xmlCharEncodingOutputFunc to write that encoding
xmlNewCharEncodingHandler_APIName returns the xmlCharEncodingHandlerPtr created (or NULL in case of error
xmlInitCharEncodingHandlers_APIName usually does not need to be called in normal processing
Compare the string to the encoding schemes already known
Note that the comparison is case insensitive accordingly to the section 4.3.3 Character Encoding in Entities
xmlParseCharEncoding_APIParam_1 is the encoding xmlParseCharEncoding_APIParam_1 as parsed , in UTF-8 format
xmlParseCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values or XML_CHAR_ENCODING_NONE if not recognized
Register the char encoding xmlRegisterCharEncodingHandler_APIParam_1 , surprising , is not it ?
xmlRegisterCharEncodingHandler_APIParam_1 is the xmlCharEncodingHandlerPtr xmlRegisterCharEncodingHandler_APIParam_1 block
Daniel Veillard
Set or reset the default initGenericErrorDefaultFunc_APIParam_1 for generic errors to the builtin error function
initGenericErrorDefaultFunc_APIParam_1 is the handler
Save the original error xmlCopyError_APIParam_2 the new place
xmlCopyError_APIParam_1 is a source error
xmlCopyError_APIParam_2 is a target error
xmlCopyError_APIName returns 0 in case of success and -1 in case of error
Get the last parsing error registered
xmlCtxtGetLastError_APIParam_1 is an XML parser context
xmlCtxtGetLastError_APIName returns NULL if no error occurred or a pointer to the error
Cleanup the last global error registered
For parsing error this does not change the well-formedness result
xmlCtxtResetLastError_APIParam_1 is an XML parser context
xmlGenericErrorFunc_APIParam_1 is a parsing context
xmlGenericErrorFunc_APIParam_2 is xmlGenericErrorFunc_APIParam_3 message xmlGenericErrorFunc_APIParam_3 the extra arguments of xmlGenericErrorFunc_APIParam_3 varags to format xmlGenericErrorFunc_APIParam_3 message
Get the last global error registered
xmlGetLastError_APIName returns NULL if no error occurred or a pointer to the error
Signature of xmlGenericErrorFunc_APIParam_3 function to xmlGenericErrorFunc_APIParam_3
Display xmlParserError_APIParam_3 format an error messages , gives file , line , position xmlParserError_APIParam_3 extra parameters
xmlParserError_APIParam_1 is an xmlParserError_APIParam_3 parser context
This is per thread
xmlParserError_APIParam_2 is xmlParserError_APIParam_3 message to display/transmit xmlParserError_APIParam_3 extra parameters xmlParserError_APIParam_3 the message display
Displays current context within the xmlParserPrintFileContext_APIParam_1 content for error tracking
xmlParserPrintFileContext_APIParam_1 is an xmlParserInputPtr input
Displays the associated file and line informations for the current xmlParserPrintFileInfo_APIParam_1
xmlParserPrintFileInfo_APIParam_1 is an xmlParserInputPtr input
xmlParserValidityError_APIParam_1 is an xmlParserValidityError_APIParam_3 parser context
Display xmlParserValidityError_APIParam_3 format an validity error messages , gives file , line , position xmlParserValidityError_APIParam_3 extra parameters
xmlParserValidityError_APIParam_2 is xmlParserValidityError_APIParam_3 message to display/transmit xmlParserValidityError_APIParam_3 extra parameters xmlParserValidityError_APIParam_3 the message display
xmlParserValidityWarning_APIParam_1 is an xmlParserValidityWarning_APIParam_3 parser context
Display xmlParserValidityWarning_APIParam_3 format a validity warning messages , gives file , line , position xmlParserValidityWarning_APIParam_3 extra parameters
xmlParserValidityWarning_APIParam_2 is xmlParserValidityWarning_APIParam_3 message to display/transmit xmlParserValidityWarning_APIParam_3 extra parameters xmlParserValidityWarning_APIParam_3 the message display
xmlParserWarning_APIParam_1 is an xmlParserWarning_APIParam_3 parser context
Display xmlParserWarning_APIParam_3 format a warning messages , gives file , line , position xmlParserWarning_APIParam_3 extra parameters
xmlParserWarning_APIParam_2 is xmlParserWarning_APIParam_3 message to display/transmit xmlParserWarning_APIParam_3 extra parameters xmlParserWarning_APIParam_3 the message display
Cleanup the error
xmlResetError_APIParam_1 is pointer to the error
Cleanup the last global error registered
For parsing error this does not change the well-formedness result
Function to reset the xmlSetGenericErrorFunc_APIParam_2 and the error context for out of context error messages
For multi-threaded applications , this must be set separately for each thread
xmlSetGenericErrorFunc_APIParam_1 is the new error handling context
xmlSetGenericErrorFunc_APIParam_2 is the new xmlSetGenericErrorFunc_APIParam_2 function
@handler will be called for subsequent error messages
This simply means that
Function to reset the xmlSetStructuredErrorFunc_APIParam_2 and the error context for out of context structured error messages
xmlSetStructuredErrorFunc_APIParam_1 is the new error handling context
xmlSetStructuredErrorFunc_APIParam_2 is the new xmlSetStructuredErrorFunc_APIParam_2 function
And @ctx will be passed as first argument to @handler One can simply force messages to be emitted to another FILE * than stderr by setting @ctx to this file handle and @handler to NULL
xmlStructuredErrorFunc_APIParam_1 is user provided data for the xmlStructuredErrorFunc_APIParam_2 callback
And @ctx will be passed as first argument to @handler For multi-threaded applications , this must be set separately for each thread
@handler will be called for subsequent error messages
This simply means that
xmlStructuredErrorFunc_APIParam_2 is the xmlStructuredErrorFunc_APIParam_2 being raised
Daniel Veillard
Dump an HTML document
htmlDocContentDumpFormatOutput_APIParam_1 is the HTML buffer output
htmlDocContentDumpFormatOutput_APIParam_2 is the document
htmlDocContentDumpFormatOutput_APIParam_3 is the htmlDocContentDumpFormatOutput_APIParam_3 string
Signature of the function to use handles the new xmlStructuredErrorFunc_APIParam_2 reporting mechanism
htmlDocContentDumpFormatOutput_APIParam_4 is should formatting spaces been added
Dump an HTML document
Formating return/spaces are added
htmlDocContentDumpOutput_APIParam_1 is the HTML buffer output
htmlDocContentDumpOutput_APIParam_2 is the document
htmlDocContentDumpOutput_APIParam_3 is the htmlDocContentDumpOutput_APIParam_3 string
Dump an HTML document to an open FILE
htmlDocDump_APIParam_1 is the FILE *
htmlDocDump_APIParam_2 is the document
htmlDocDump_APIName returns the number of byte written or -1 in case of failure
Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemory_APIParam_3
it is up to the caller to free htmlDocDumpMemory_APIParam_0
htmlDocDumpMemory_APIParam_1 is the document
htmlDocDumpMemory_APIParam_2 is OUT the memory pointer
htmlDocDumpMemory_APIParam_3 is OUT the memory length
Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemoryFormat_APIParam_3
it is up to the caller to free htmlDocDumpMemoryFormat_APIParam_0
htmlDocDumpMemoryFormat_APIParam_1 is the document
htmlDocDumpMemoryFormat_APIParam_2 is OUT the memory pointer
htmlDocDumpMemoryFormat_APIParam_3 is OUT the memory length
htmlDocDumpMemoryFormat_APIParam_4 is should formatting spaces been added
Encoding definition lookup in the Meta tags
htmlGetMetaEncoding_APIParam_1 is the document
htmlGetMetaEncoding_APIName returns the current encoding as flagged in the HTML source
htmlIsBooleanAttr_APIParam_1 is the htmlIsBooleanAttr_APIParam_1 of the attribute to check
htmlIsBooleanAttr_APIName returns false if the attribute is not boolean, true otherwise
Creates a new HTML document
htmlNewDoc_APIParam_1 is htmlNewDoc_APIParam_1 for the dtd , or NULL
Determine
htmlNewDoc_APIName returns a new document
htmlNewDoc_APIParam_2 is the external ID of the DTD , or NULL
htmlNewDocNoDtD_APIParam_1 is htmlNewDocNoDtD_APIParam_1 for the dtd , or NULL
htmlNewDocNoDtD_APIParam_2 is the external ID of the DTD , or NULL
htmlNewDocNoDtD_APIName returns a new document, do not initialize the DTD if not provided
htmlNodeDump_APIParam_1 is the HTML buffer output
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added
Creates a new HTML document without a DTD node
htmlNodeDump_APIParam_2 is the document
htmlNodeDump_APIParam_3 is the current node
htmlNodeDump_APIName returns the number of byte written or -1 in case of error
htmlNodeDumpFile_APIParam_1 is the FILE pointer
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added
htmlNodeDumpFile_APIParam_2 is the document
htmlNodeDumpFile_APIParam_3 is the current node
Dump an HTML node , recursive behaviour , children are printed too
htmlNodeDumpFileFormat_APIParam_1 is the FILE pointer
htmlNodeDumpFileFormat_APIParam_2 is the document
htmlNodeDumpFileFormat_APIParam_3 is the current node
htmlNodeDumpFileFormat_APIParam_4 is the document htmlNodeDumpFileFormat_APIParam_4

htmlNodeDumpFileFormat_APIParam_5 is should formatting spaces been added
htmlNodeDumpFileFormat_APIName returns the number of byte written or -1 in case of failure
Dump an HTML node , recursive behaviour , children are printed too
htmlNodeDumpFormatOutput_APIParam_1 is the HTML buffer output
htmlNodeDumpFormatOutput_APIParam_2 is the document
htmlNodeDumpFormatOutput_APIParam_3 is the current node
htmlNodeDumpFormatOutput_APIParam_4 is the htmlNodeDumpFormatOutput_APIParam_4 string
htmlNodeDumpFormatOutput_APIParam_5 is should formatting spaces been added
htmlNodeDumpOutput_APIParam_1 is the HTML buffer output
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns/spaces are added
htmlNodeDumpOutput_APIParam_2 is the document
htmlNodeDumpOutput_APIParam_3 is the current node
htmlNodeDumpOutput_APIParam_4 is the htmlNodeDumpOutput_APIParam_4 string
Dump an HTML document to a file
htmlSaveFile_APIParam_1 is the htmlSaveFile_APIParam_1
htmlSaveFile_APIParam_2 is the document
htmlSaveFile_APIName returns the number of byte written or -1 in case of failure
htmlSaveFileEnc_APIParam_1 is the htmlSaveFileEnc_APIParam_1
Dump an HTML document to a file using a given htmlSaveFileEnc_APIParam_3 and formatting returns/spaces are added
htmlSaveFileEnc_APIParam_2 is the document
htmlSaveFileEnc_APIParam_3 is the document htmlSaveFileEnc_APIParam_3
htmlSaveFileEnc_APIName returns the number of byte written or -1 in case of failure
Dump an HTML document to a file using a given htmlSaveFileFormat_APIParam_3
htmlSaveFileFormat_APIParam_1 is the htmlSaveFileFormat_APIParam_1
the stdout file is used
htmlSaveFileFormat_APIParam_2 is the document
htmlSaveFileFormat_APIParam_3 is the document htmlSaveFileFormat_APIParam_3
htmlSaveFileFormat_APIParam_4 is should formatting spaces been added
htmlSaveFileFormat_APIName returns the number of byte written or -1 in case of failure
htmlSetMetaEncoding_APIParam_1 is the document
htmlSetMetaEncoding_APIParam_2 is the htmlSetMetaEncoding_APIParam_2 string
Sets the current htmlSetMetaEncoding_APIParam_2 in the Meta tags NOTE
Daniel Veillard
this will not change the document content htmlSetMetaEncoding_APIParam_2 , just the META flag associated
htmlSetMetaEncoding_APIName returns 0 in case of success and -1 in case of error
A callback for the xmlNanoFTPGet command
ftpDataCallback_APIParam_1 is the user provided context
ftpDataCallback_APIParam_2 is the ftpDataCallback_APIParam_2 received
ftpDataCallback_APIParam_3 is ftpDataCallback_APIParam_3 size in bytes
A callback for the xmlNanoFTPList command
Note that only one of ftpListCallback_APIParam_8 and ftpListCallback_APIParam_10
minute are specified
ftpListCallback_APIParam_1 is user provided data for the callback
ftpListCallback_APIParam_2 is the file name
ftpListCallback_APIParam_3 is the attribute string
ftpListCallback_APIParam_4 is the ftpListCallback_APIParam_4 string
ftpListCallback_APIParam_5 is the ftpListCallback_APIParam_5 string
ftpListCallback_APIParam_6 is the file ftpListCallback_APIParam_6
ftpListCallback_APIParam_7 is the link count
ftpListCallback_APIParam_8 is the ftpListCallback_APIParam_8
ftpListCallback_APIParam_9 is the ftpListCallback_APIParam_9
ftpListCallback_APIParam_10 is the ftpListCallback_APIParam_10
ftpListCallback_APIParam_11 is the ftpListCallback_APIParam_11
ftpListCallback_APIParam_12 is the minute
xmlNanoFTPCheckResponse_APIParam_1 is an FTP context
xmlNanoFTPCheckResponse_APIName returns the code number, or 0
Cleanup the FTP protocol layer
This cleanup proxy informations
Close the connection and both control and transport
Check
xmlNanoFTPClose_APIParam_1 is an FTP context
xmlNanoFTPClose_APIName returns -1 incase of error, 0 otherwise
Close the data connection from the server
xmlNanoFTPCloseConnection_APIParam_1 is an FTP context
xmlNanoFTPCloseConnection_APIName returns -1 incase of error, 0 otherwise
Tries to open a control connection
xmlNanoFTPConnect_APIParam_1 is an FTP context
xmlNanoFTPConnect_APIName returns -1 in case of error, 0 otherwise
Tries to open a control connection to the given server/port
xmlNanoFTPConnectTo_APIParam_1 is an FTP xmlNanoFTPConnectTo_APIParam_1 name
xmlNanoFTPConnectTo_APIParam_2 is the xmlNanoFTPConnectTo_APIParam_2
xmlNanoFTPConnectTo_APIName returns an fTP context or NULL if xmlNanoFTPConnectTo_APIName failed
Tries to change the remote xmlNanoFTPCwd_APIParam_2
xmlNanoFTPCwd_APIParam_1 is an FTP context
xmlNanoFTPCwd_APIParam_2 is a xmlNanoFTPCwd_APIParam_2 on the server
xmlNanoFTPCwd_APIName returns -1 incase of error, 1 if CWD worked, 0 if CWD failed
Tries to delete an item from server
xmlNanoFTPDele_APIParam_1 is an FTP context
xmlNanoFTPDele_APIParam_2 is a xmlNanoFTPDele_APIParam_2 or directory on the server
xmlNanoFTPDele_APIName returns -1 incase of error, 1 if DELE worked, 0 if it failed
Frees the context after closing the connection
xmlNanoFTPFreeCtxt_APIParam_1 is an FTP context
Fetch the given file from the server
All data are passed back in the callbacks
The last xmlNanoFTPGet_APIParam_2 has a size of 0 block
xmlNanoFTPGet_APIParam_1 is an FTP context
xmlNanoFTPGet_APIParam_2 is the user xmlNanoFTPGet_APIParam_2
xmlNanoFTPGet_APIParam_3 is the user xmlNanoFTPGet_APIParam_2 data
xmlNanoFTPGet_APIParam_4 is the file to retrieve
xmlNanoFTPGet_APIName returns -1 incase of error, 0 otherwise
Try to open a data connection to the server
Currently only passive mode is supported
xmlNanoFTPGetConnection_APIParam_1 is an FTP context
xmlNanoFTPGetConnection_APIName returns -1 incase of error, 0 otherwise
Get the response from the FTP server after a command
xmlNanoFTPGetResponse_APIParam_1 is an FTP context
xmlNanoFTPGetResponse_APIName returns the code number
Initiate fetch of the given file from the server
xmlNanoFTPGetSocket_APIParam_1 is an FTP context
xmlNanoFTPGetSocket_APIParam_2 is the file to retrieve
Initialize the FTP protocol layer
xmlNanoFTPGetSocket_APIName returns the socket for the data connection, or <0 in case of error
Currently it just checks for proxy informations , and get the hostname
Do a listing on the server
All files info are passed back in the callbacks
xmlNanoFTPList_APIParam_1 is an FTP context
xmlNanoFTPList_APIParam_2 is the user xmlNanoFTPList_APIParam_2
xmlNanoFTPList_APIParam_3 is the user xmlNanoFTPList_APIParam_2 data
xmlNanoFTPList_APIParam_4 is optional files to list
xmlNanoFTPList_APIName returns -1 incase of error, 0 otherwise
Allocate and initialize a new FTP context
xmlNanoFTPNewCtxt_APIParam_1 is The xmlNanoFTPNewCtxt_APIParam_1 used to initialize the context
xmlNanoFTPNewCtxt_APIName returns an FTP context or NULL in case of error
xmlNanoFTPOpen_APIParam_1 is the xmlNanoFTPOpen_APIParam_1 to the resource
xmlNanoFTPOpen_APIName returns an FTP context, or NULL
Start to fetch the given ftp
/ / resource
Setup the FTP proxy informations
This can also be done by using ftp_proxy ftp_proxy_user and ftp_proxy_password environment variables
xmlNanoFTPProxy_APIParam_1 is the proxy xmlNanoFTPProxy_APIParam_1 name
xmlNanoFTPProxy_APIParam_2 is the proxy xmlNanoFTPProxy_APIParam_2
xmlNanoFTPProxy_APIParam_3 is the proxy xmlNanoFTPProxy_APIParam_3 name
xmlNanoFTPProxy_APIParam_4 is the proxy password
xmlNanoFTPProxy_APIParam_5 is the xmlNanoFTPProxy_APIParam_5 of proxy 1 for using SITE , 2 for USER a@b
Send a QUIT command to the server
xmlNanoFTPQuit_APIParam_1 is an FTP context
xmlNanoFTPQuit_APIName returns -1 in case of error, 0 otherwise
This is a blocking call
xmlNanoFTPRead_APIParam_1 is the FTP context
xmlNanoFTPRead_APIName tries to read @len bytes from the existing FTP connection and saves them in @dest
xmlNanoFTPRead_APIParam_2 is a buffer
xmlNanoFTPRead_APIParam_3 is the buffer length
xmlNanoFTPRead_APIName returns the number of byte read
0 is an indication of an end of connection
-1 indicates a parameter error
xmlNanoFTPScanProxy_APIParam_1 is The proxy xmlNanoFTPScanProxy_APIParam_1 used to initialize the proxy context
Initialize the FTP Proxy context by parsing the xmlNanoFTPScanProxy_APIParam_1 and finding the protocol host port it indicates
Update an FTP context by parsing the xmlNanoFTPUpdateURL_APIParam_2 and finding new path it indicates
It indicates a new connection has to be established
xmlNanoFTPUpdateURL_APIParam_1 is an FTP context
xmlNanoFTPUpdateURL_APIParam_2 is The xmlNanoFTPUpdateURL_APIParam_2 used to update the context
xmlNanoFTPUpdateURL_APIName returns 0 if Ok, -1 in case of error
Daniel Veillard
Cleanup the default Schemas type library associated to RelaxNG
Dump a RelaxNG structure back
the error is raised
xmlRelaxNGDump_APIParam_1 is the file xmlRelaxNGDump_APIParam_1
xmlRelaxNGDump_APIParam_2 is a xmlRelaxNGDump_APIParam_2 structure
Dump the transformed RelaxNG tree
xmlRelaxNGDumpTree_APIParam_1 is the file xmlRelaxNGDumpTree_APIParam_1
xmlRelaxNGDumpTree_APIParam_2 is a xmlRelaxNGDumpTree_APIParam_2 structure
Deallocate a RelaxNG structure
xmlRelaxNGFree_APIParam_1 is a xmlRelaxNGFree_APIParam_1 structure
Free the resources associated to the schema parser context
xmlRelaxNGFreeParserCtxt_APIParam_1 is the schema parser context
Free the resources associated to the schema validation context
xmlRelaxNGFreeValidCtxt_APIParam_1 is the schema validation context
Get the callback information used to handle errors for a validation context
xmlRelaxNGGetParserErrors_APIParam_1 is a Relax-NG validation context
xmlRelaxNGGetParserErrors_APIParam_2 is the error callback result
xmlRelaxNGGetParserErrors_APIParam_3 is the warning callback result
Should be like ftp
/ / myproxy / or ftp
xmlRelaxNGGetParserErrors_APIParam_4 is contextual data for the callbacks result
xmlRelaxNGGetParserErrors_APIName returns -1 in case of failure, 0 otherwise
3128 / A NULL xmlNanoFTPScanProxy_APIParam_1 cleans up proxy informations
Get the error and warning callback informations
xmlRelaxNGGetValidErrors_APIParam_1 is a Relax-NG validation context
xmlRelaxNGGetValidErrors_APIParam_2 is the error function result
xmlRelaxNGGetValidErrors_APIParam_3 is the warning function result
xmlRelaxNGGetValidErrors_APIParam_4 is the functions context result
xmlRelaxNGGetValidErrors_APIName returns -1 in case of error and 0 otherwise
Initilize the default type libraries
xmlRelaxNGInitTypes_APIName returns 0 in case of success and -1 in case of error
Create an XML RelaxNGs parser context for that document
xmlRelaxNGNewDocParserCtxt_APIParam_1 is a preparsed document tree
the @doc parameter is duplicated internally
xmlRelaxNGNewDocParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML RelaxNGs parse context for that memory xmlRelaxNGNewMemParserCtxt_APIParam_1 expected to contain an XML RelaxNGs file
xmlRelaxNGNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas
xmlRelaxNGNewMemParserCtxt_APIParam_2 is the xmlRelaxNGNewMemParserCtxt_APIParam_2 of the array
xmlRelaxNGNewMemParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML RelaxNGs parse context for that file/resource expected to contain an XML RelaxNGs file
xmlRelaxNGNewParserCtxt_APIParam_1 is the location of the schema
xmlRelaxNGNewParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML RelaxNGs validation context based on the given xmlRelaxNGNewValidCtxt_APIParam_1
xmlRelaxNGNewValidCtxt_APIParam_1 is a precompiled XML RelaxNGs
xmlRelaxNGNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlRelaxNGParse_APIParam_1 is a Relax-NG parser context
xmlRelaxNGParse_APIName returns the internal XML RelaxNG structure built from the resource or NULL in case of error
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances
Set the callback functions used to handle errors for a validation context
xmlRelaxNGSetParserErrors_APIParam_1 is a Relax-NG validation context
xmlRelaxNGSetParserErrors_APIParam_2 is the error callback
xmlRelaxNGSetParserErrors_APIParam_3 is the warning callback
xmlRelaxNGSetParserErrors_APIParam_4 is contextual data for the callbacks
Set the callback functions used to handle errors for a parsing context
xmlRelaxNGSetParserStructuredErrors_APIParam_1 is a Relax-NG parser context
xmlRelaxNGSetParserStructuredErrors_APIParam_2 is the error callback
xmlRelaxNGSetParserStructuredErrors_APIParam_3 is contextual data for the callbacks
Set the error and warning callback informations
xmlRelaxNGSetValidErrors_APIParam_1 is a Relax-NG validation context
xmlRelaxNGSetValidErrors_APIParam_2 is the error function
xmlRelaxNGSetValidErrors_APIParam_3 is the warning function
xmlRelaxNGSetValidErrors_APIParam_4 is the functions context
Set the structured error callback
xmlRelaxNGSetValidStructuredErrors_APIParam_1 is a Relax-NG validation context
xmlRelaxNGSetValidStructuredErrors_APIParam_2 is the structured error function
xmlRelaxNGSetValidStructuredErrors_APIParam_3 is the functions context
Validate a document tree in memory
xmlRelaxNGValidateDoc_APIParam_1 is a Relax-NG validation context
xmlRelaxNGValidateDoc_APIParam_2 is a parsed document tree
Validate a full subtree when xmlRelaxNGValidatePushElement_APIName returned 0 and the content of the node has been expanded
xmlRelaxNGValidateFullElement_APIParam_1 is the validation context
xmlRelaxNGValidateDoc_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of internal or API error
xmlRelaxNGValidateFullElement_APIParam_2 is a document instance
xmlRelaxNGValidateFullElement_APIParam_3 is an element instance
xmlRelaxNGValidateFullElement_APIName returns 1 if no validation problem was found or -1 in case of error
Pop the element end from the RelaxNG validation stack
xmlRelaxNGValidatePopElement_APIParam_1 is the RelaxNG validation context
xmlRelaxNGValidatePopElement_APIParam_2 is a document instance
xmlRelaxNGValidatePopElement_APIParam_3 is an element instance
xmlRelaxNGValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise
check the CData parsed for validation in the current stack
xmlRelaxNGValidatePushCData_APIParam_1 is the RelaxNG validation context
xmlRelaxNGValidatePushCData_APIParam_2 is some character xmlRelaxNGValidatePushCData_APIParam_2 read
xmlRelaxNGValidatePushCData_APIParam_3 is the length of the xmlRelaxNGValidatePushCData_APIParam_2
xmlRelaxNGValidatePushCData_APIName returns 1 if no validation problem was found or -1 otherwise
Push a new element start on the RelaxNG validation stack
xmlRelaxNGValidatePushElement_APIParam_1 is the validation context
xmlRelaxNGValidatePushElement_APIParam_2 is a document instance
xmlRelaxNGValidatePushElement_APIParam_3 is an element instance
Signature of an error callback from a Relax-NG validation
xmlRelaxNGValidityErrorFunc_APIParam_1 is xmlRelaxNGValidityErrorFunc_APIParam_3 validation context
xmlRelaxNGValidatePushElement_APIName returns 1 if no validation problem was found or 0 if validating the element requires a full node, and -1 in case of error
xmlRelaxNGValidityErrorFunc_APIParam_2 is xmlRelaxNGValidityErrorFunc_APIParam_3 message xmlRelaxNGValidityErrorFunc_APIParam_3 extra arguments
Signature of a warning callback from a Relax-NG validation
xmlRelaxNGValidityWarningFunc_APIParam_1 is xmlRelaxNGValidityWarningFunc_APIParam_3 validation context
xmlRelaxNGValidityWarningFunc_APIParam_2 is xmlRelaxNGValidityWarningFunc_APIParam_3 message xmlRelaxNGValidityWarningFunc_APIParam_3 extra arguments
xmlRelaxParserSetFlag_APIParam_1 is a RelaxNG parser context
xmlRelaxParserSetFlag_APIParam_2 is a set of xmlRelaxParserSetFlag_APIParam_2 values
Semi private function used to pass informations to a parser context which are a combination of xmlRelaxNGParserFlag
xmlRelaxParserSetFlag_APIName returns 0 if success and -1 in case of error
Daniel Veillard
Dumps the canonized image of given XML document into memory
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''
xmlC14NDocDumpMemory_APIParam_1 is the XML document for canonization
xmlC14NDocDumpMemory_APIParam_3 is the c14n xmlC14NDocDumpMemory_APIParam_3
xmlC14NDocDumpMemory_APIParam_5 include comments in the result or not
xmlC14NDocDumpMemory_APIName returns the number of bytes written on success or a negative value on fail
Dumps the canonized image of given XML document into the file
xmlC14NDocDumpMemory_APIParam_2 is the xmlC14NDocDumpMemory_APIParam_2 set to be included in the canonized image or NULL
xmlC14NDocDumpMemory_APIParam_6 is the memory pointer for allocated canonical XML text
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''
xmlC14NDocSave_APIParam_1 is the XML document for canonization
the caller of xmlC14NDocDumpMemory_APIName is responsible for calling xmlFree_APIName to free allocated memory
xmlC14NDocSave_APIParam_3 is the c14n xmlC14NDocSave_APIParam_3
xmlC14NDocDumpMemory_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSave_APIParam_5 include comments in the result or not
xmlC14NDocSave_APIParam_6 is the xmlC14NDocSave_APIParam_6 to store canonical XML image
xmlC14NDocSave_APIName returns the number of bytes written success or a negative value on fail
xmlC14NDocSave_APIParam_7 is the xmlC14NDocSave_APIParam_7 level -1 - libxml default , 0 - uncompressed , > 0 - xmlC14NDocSave_APIParam_7 level
xmlC14NDocSave_APIParam_2 is the xmlC14NDocSave_APIParam_2 set to be included in the canonized image or NULL
Dumps the canonized image of given XML document into the provided buffer
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''
xmlC14NDocSaveTo_APIParam_1 is the XML document for canonization
xmlC14NDocSave_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSaveTo_APIParam_3 is the c14n xmlC14NDocSaveTo_APIParam_3
xmlC14NDocSaveTo_APIParam_2 is the xmlC14NDocSaveTo_APIParam_2 set to be included in the canonized image or NULL
xmlC14NDocSaveTo_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSaveTo_APIParam_5 include comments in the result or not
xmlC14NDocSaveTo_APIName returns non-negative value on success or a negative value on fail
xmlC14NDocSaveTo_APIParam_6 is the output buffer to store canonical XML
this buffer MUST have encoder == NULL
Dumps the canonized image of given XML document into the provided buffer
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''
xmlC14NExecute_APIParam_1 is the XML document for canonization
xmlC14NExecute_APIParam_2 is the function to use to determine is node visible or not
xmlC14NExecute_APIParam_3 is the first parameter for @is_visible_callback function
xmlC14NExecute_APIParam_4 is the c14n xmlC14NExecute_APIParam_4
xmlC14NExecute_APIParam_6 include comments in the result or not
xmlC14NExecute_APIName returns non-negative value on success or a negative value on fail
Signature for a C14N callback on visible nodes
xmlC14NExecute_APIParam_7 is the output buffer to store canonical XML
this buffer MUST have encoder == NULL
xmlC14NIsVisibleCallback_APIParam_1 is user data
xmlC14NIsVisibleCallback_APIParam_2 is the curent xmlC14NIsVisibleCallback_APIParam_2
xmlC14NIsVisibleCallback_APIParam_3 is the xmlC14NIsVisibleCallback_APIParam_3 xmlC14NIsVisibleCallback_APIParam_2
xmlC14NExecute_APIParam_5 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NIsVisibleCallback_APIName returns 1 if the xmlC14NIsVisibleCallback_APIParam_2 should be included
Daniel Veillard
Deallocate all the resources associated to the xmlFreeTextReader_APIParam_1
xmlFreeTextReader_APIParam_1 is the xmlTextReaderPtr
Create an xmlTextReader structure fed with @input
xmlNewTextReader_APIParam_1 is the xmlParserInputBufferPtr used to read data
xmlNewTextReader_APIName returns the new xmlTextReaderPtr or NULL in case of error
Create an xmlTextReader structure fed with the resource at @URI
xmlNewTextReaderFilename_APIParam_1 is the xmlNewTextReaderFilename_APIParam_1 of the resource to process
xmlNewTextReaderFilename_APIName returns the new xmlTextReaderPtr or NULL in case of error
xmlNewTextReader_APIParam_2 is the xmlNewTextReader_APIParam_2 information for the source
Create an xmltextReader for an XML in-memory document
The parsing flags @options are a combination of xmlParserOption
xmlReaderForDoc_APIParam_1 is a pointer to a zero terminated string
xmlReaderForDoc_APIParam_2 is the base xmlReaderForDoc_APIParam_2 to use for the document
xmlReaderForDoc_APIParam_3 is the document xmlReaderForDoc_APIParam_3 , or NULL
xmlReaderForDoc_APIParam_4 is a combination of xmlParserOption
xmlReaderForDoc_APIName returns the new reader or NULL in case of error
Create an xmltextReader for an XML from a file descriptor
The parsing flags @options are a combination of xmlParserOption
xmlReaderForFd_APIParam_1 is an open file descriptor
xmlReaderForFd_APIParam_2 is the base xmlReaderForFd_APIParam_2 to use for the document
xmlReaderForFd_APIParam_3 is the document xmlReaderForFd_APIParam_3 , or NULL
xmlReaderForFd_APIParam_4 is a combination of xmlParserOption
xmlReaderForFd_APIName returns the new reader or NULL in case of error
the file descriptor will not be closed
NOTE that or reset
parse an XML file from the filesystem or the network
The parsing flags @options are a combination of xmlParserOption
xmlReaderForFile_APIParam_1 is a file or URL
xmlReaderForFile_APIParam_2 is the document xmlReaderForFile_APIParam_2 , or NULL
xmlReaderForFile_APIParam_3 is a combination of xmlParserOption
xmlReaderForFile_APIName returns the new reader or NULL in case of error
Create an xmltextReader for an XML document from I/O functions and source
The parsing flags @options are a combination of xmlParserOption
xmlReaderForIO_APIParam_1 is an I/O read function
xmlReaderForIO_APIParam_2 is an I/O close function
xmlReaderForIO_APIParam_3 is an I/O handler
xmlReaderForIO_APIParam_4 is the base xmlReaderForIO_APIParam_4 to use for the document
xmlReaderForIO_APIParam_5 is the document xmlReaderForIO_APIParam_5 , or NULL
xmlReaderForIO_APIParam_6 is a combination of xmlParserOption
xmlReaderForIO_APIName returns the new reader or NULL in case of error
Create an xmltextReader for an XML in-memory document
The parsing flags @options are a combination of xmlParserOption
xmlReaderForMemory_APIParam_1 is a pointer to a char array
xmlReaderForMemory_APIParam_2 is the xmlReaderForMemory_APIParam_2 of the array
xmlReaderForMemory_APIParam_3 is the base xmlReaderForMemory_APIParam_3 to use for the document
xmlReaderForMemory_APIParam_4 is the document xmlReaderForMemory_APIParam_4 , or NULL
xmlReaderForMemory_APIParam_5 is a combination of xmlParserOption
xmlReaderForMemory_APIName returns the new reader or NULL in case of error
Setup an xmltextReader to parse an XML in-memory document
The parsing flags @options are a combination of xmlParserOption
This reuses the existing @reader xmlTextReader
xmlReaderNewDoc_APIParam_1 is an XML xmlReaderNewDoc_APIParam_1
xmlReaderNewDoc_APIParam_2 is a pointer to a zero terminated string
xmlReaderNewDoc_APIParam_3 is the base xmlReaderNewDoc_APIParam_3 to use for the document
xmlReaderNewDoc_APIParam_4 is the document xmlReaderNewDoc_APIParam_4 , or NULL
xmlReaderNewDoc_APIParam_5 is a combination of xmlParserOption
xmlReaderNewDoc_APIName returns 0 in case of success and -1 in case of error
Setup an xmltextReader to parse an XML from a file descriptor
The parsing flags @options are a combination of xmlParserOption
This reuses the existing @reader xmlTextReader
xmlReaderNewFd_APIParam_1 is an XML xmlReaderNewFd_APIParam_1
xmlReaderNewFd_APIParam_2 is an open file descriptor
xmlReaderNewFd_APIParam_3 is the base xmlReaderNewFd_APIParam_3 to use for the document
the file descriptor will not be closed
NOTE that or reset
xmlReaderNewFd_APIParam_4 is the document xmlReaderNewFd_APIParam_4 , or NULL
xmlReaderNewFd_APIParam_5 is a combination of xmlParserOption
xmlReaderNewFd_APIName returns 0 in case of success and -1 in case of error
parse an XML file from the filesystem or the network
The parsing flags @options are a combination of xmlParserOption
This reuses the existing @reader xmlTextReader
xmlReaderNewFile_APIParam_1 is an XML xmlReaderNewFile_APIParam_1
xmlReaderNewFile_APIParam_2 is a file or URL
xmlReaderNewFile_APIParam_3 is the document xmlReaderNewFile_APIParam_3 , or NULL
xmlReaderNewFile_APIParam_4 is a combination of xmlParserOption
xmlReaderNewFile_APIName returns 0 in case of success and -1 in case of error
Setup an xmltextReader to parse an XML document from I/O functions and source
The parsing flags @options are a combination of xmlParserOption
This reuses the existing @reader xmlTextReader
xmlReaderNewIO_APIParam_1 is an XML xmlReaderNewIO_APIParam_1
xmlReaderNewIO_APIParam_2 is an I/O read function
xmlReaderNewIO_APIParam_3 is an I/O close function
xmlReaderNewIO_APIParam_4 is an I/O handler
xmlReaderNewIO_APIParam_5 is the base xmlReaderNewIO_APIParam_5 to use for the document
xmlReaderNewIO_APIParam_6 is the document xmlReaderNewIO_APIParam_6 , or NULL
xmlReaderNewIO_APIParam_7 is a combination of xmlParserOption
xmlReaderNewIO_APIName returns 0 in case of success and -1 in case of error
Setup an xmltextReader to parse an XML in-memory document
The parsing flags @options are a combination of xmlParserOption
This reuses the existing @reader xmlTextReader
xmlReaderNewMemory_APIParam_1 is an XML xmlReaderNewMemory_APIParam_1
xmlReaderNewMemory_APIParam_2 is a pointer to a char array
xmlReaderNewMemory_APIParam_3 is the xmlReaderNewMemory_APIParam_3 of the array
xmlReaderNewMemory_APIParam_4 is the base xmlReaderNewMemory_APIParam_4 to use for the document
xmlReaderNewMemory_APIParam_5 is the document xmlReaderNewMemory_APIParam_5 , or NULL
xmlReaderNewMemory_APIParam_6 is a combination of xmlParserOption
xmlReaderNewMemory_APIName returns 0 in case of success and -1 in case of error
Setup an xmltextReader to parse a preparsed XML document
This reuses the existing @reader xmlTextReader
xmlReaderNewWalker_APIParam_1 is an XML xmlReaderNewWalker_APIParam_1
xmlReaderNewWalker_APIParam_2 is a preparsed document
xmlReaderNewWalker_APIName returns 0 in case of success and -1 in case of error
Create an xmltextReader for a preparsed document
xmlReaderWalker_APIParam_1 is a preparsed document
xmlReaderWalker_APIName returns the new reader or NULL in case of error
Provides the number of attributes of the current node
xmlTextReaderAttributeCount_APIParam_1 is the xmlTextReaderPtr used
The base URI of the node
xmlTextReaderAttributeCount_APIName returns 0 i no attributes, -1 in case of error or the attribute count
xmlTextReaderBaseUri_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderBaseUri_APIName returns the base URI or NULL if not available, if non NULL it need to be freed by the caller
See xmlBytesConsumed_APIName for more information
xmlTextReaderByteConsumed_APIName provides the current index of the parser used by the xmlTextReaderByteConsumed_APIParam_1 , relative to the start of the current entity
xmlTextReaderByteConsumed_APIParam_1 is an XML xmlTextReaderByteConsumed_APIParam_1
xmlTextReaderByteConsumed_APIName actually just wraps a call to xmlBytesConsumed_APIName for the parser context associated with the xmlTextReaderByteConsumed_APIParam_1
xmlTextReaderClose_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed
xmlTextReaderClose_APIName returns 0 or -1 in case of error
This method releases any resources allocated by the current instance changes the state to Closed and close any underlying input
The base URI of the node
xmlTextReaderConstBaseUri_APIParam_1 is the xmlTextReaderPtr used
Determine the encoding of the document being read
xmlTextReaderConstBaseUri_APIName returns the base URI or NULL if not available, the string will be deallocated with the reader
xmlTextReaderConstEncoding_APIParam_1 is the xmlTextReaderPtr used
The string is deallocated with the reader
xmlTextReaderConstEncoding_APIName returns a string containing the encoding of the document or NULL in case of error
The local name of the node
xmlTextReaderConstLocalName_APIParam_1 is the xmlTextReaderPtr used
The qualified name of the node , equal to Prefix
xmlTextReaderConstLocalName_APIName returns the local name or NULL if not available, the string will be deallocated with the reader
xmlTextReaderConstName_APIParam_1 is the xmlTextReaderPtr used
The URI defining the namespace associated with the node
xmlTextReaderConstName_APIName returns the local name or NULL if not available, the string is deallocated with the reader
xmlTextReaderConstNamespaceUri_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderConstNamespaceUri_APIName returns the namespace URI or NULL if not available, the string will be deallocated with the reader
A shorthand reference to the namespace associated with the node
xmlTextReaderConstPrefix_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderConstPrefix_APIName returns the prefix or NULL if not available, the string is deallocated with the reader
xmlTextReaderConstString_APIParam_1 is the xmlTextReaderPtr used
Get an interned string from the xmlTextReaderConstString_APIParam_1 , allows to speedup string name comparisons
xmlTextReaderConstString_APIParam_2 is the string to intern
xmlTextReaderConstString_APIName returns an interned copy of the string or NULL in case of error
The string will be deallocated with the reader
xmlTextReaderConstValue_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderConstValue_APIName returns the string or NULL if not available
The result will be deallocated on the next Read_APIName operation
The xml
lang scope within which the node resides
Provides the text value of the node
xmlTextReaderConstXmlLang_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderConstXmlLang_APIName returns the xmllang value or NULL if none exists
Determine the XML version of the document being read
xmlTextReaderConstXmlVersion_APIParam_1 is the xmlTextReaderPtr used
The string is deallocated with the reader
xmlTextReaderConstXmlVersion_APIName returns a string containing the XML version of the document or NULL in case of error
xmlTextReaderCurrentDoc_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderCurrentDoc_APIName returns the xmlDocPtr or NULL in case of error
Hacking interface allowing to get the xmlDocPtr correponding to the current document being accessed by the xmlTextReader
This is dangerous
Hacking interface allowing to get the xmlNodePtr correponding to the current node being accessed by the xmlTextReader
xmlTextReaderCurrentNode_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderCurrentNode_APIName returns the xmlNodePtr or NULL in case of error
The depth of the node in the tree
xmlTextReaderDepth_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderDepth_APIName returns the depth or -1 in case of error
as a result of this call , the xmlTextReaderCurrentDoc_APIParam_1 will not destroy the associated XML document and calling xmlFreeDoc_APIName on the result is needed once the xmlTextReaderCurrentDoc_APIParam_1 parsing has finished
Signature of an error callback from a reader parser
xmlTextReaderErrorFunc_APIParam_1 is the user argument
xmlTextReaderErrorFunc_APIParam_2 is the message
xmlTextReaderErrorFunc_APIParam_3 is the xmlTextReaderErrorFunc_APIParam_3 of the error
xmlTextReaderErrorFunc_APIParam_4 is a xmlTextReaderErrorFunc_APIParam_4 indicating where the error occurred
Reads the contents of the current node and the full subtree
It makes the subtree available until the next xmlTextReaderRead_APIName call
xmlTextReaderExpand_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderExpand_APIName returns a node pointer valid until the next xmlTextReaderRead_APIName call or NULL in case of error
Provides the value of the attribute with the specified qualified xmlTextReaderGetAttribute_APIParam_2
xmlTextReaderGetAttribute_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderGetAttribute_APIParam_2 is the qualified xmlTextReaderGetAttribute_APIParam_2 of the attribute
The string must be deallocated by the caller
xmlTextReaderGetAttribute_APIName returns a string containing the value of the specified attribute, or NULL in case of error
xmlTextReaderGetAttributeNo_APIParam_1 is the xmlTextReaderPtr used
Provides the value of the attribute with the specified index relative to the containing element
xmlTextReaderGetAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element
The string must be deallocated by the caller
xmlTextReaderGetAttributeNo_APIName returns a string containing the value of the specified attribute, or NULL in case of error
Provides the value of the specified attribute
xmlTextReaderGetAttributeNs_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderGetAttributeNs_APIParam_2 is the local name of the attribute
xmlTextReaderGetAttributeNs_APIParam_3 is the namespace URI of the attribute
The string must be deallocated by the caller
xmlTextReaderGetAttributeNs_APIName returns a string containing the value of the specified attribute, or NULL in case of error
Retrieve the error callback function and user argument
xmlTextReaderGetErrorHandler_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderGetErrorHandler_APIParam_2 is the callback function or NULL is no callback has been registered
xmlTextReaderGetErrorHandler_APIParam_3 is a user argument
Provide the column number of the current parsing point
xmlTextReaderGetParserColumnNumber_APIParam_1 is the user data
xmlTextReaderGetParserColumnNumber_APIName returns an int or 0 if not available
Provide the line number of the current parsing point
xmlTextReaderGetParserLineNumber_APIParam_1 is the user data
xmlTextReaderGetParserLineNumber_APIName returns an int or 0 if not available
Read the parser internal property
xmlTextReaderGetParserProp_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderGetParserProp_APIParam_2 is the xmlParserProperties to get
xmlTextReaderGetParserProp_APIName returns the value, usually 0 or 1, or -1 in case of error
Method to get the remainder of the buffered XML
Best would be to rewrite it differently
xmlTextReaderGetRemainder_APIParam_1 is the xmlTextReaderPtr used
this method stops the parser, set its state to End Of File and return the input stream with what is left that the parser did not use
xmlTextReaderGetRemainder_APIName returns the xmlParserInputBufferPtr attached to the XML or NULL in case of error
Whether the node has attributes
The implementation is not good , the parser certainly procgressed past what left in reader - > input , and there is an allocation problem
xmlTextReaderHasAttributes_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderHasAttributes_APIName returns 1 if true, 0 if false, and -1 in case or error
Whether the node can have a text value
xmlTextReaderHasValue_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderHasValue_APIName returns 1 if true, 0 if false, and -1 in case or error
xmlTextReaderIsDefault_APIParam_1 is the xmlTextReaderPtr used
Whether an Attribute node was generated from the default value defined in the DTD or schema
xmlTextReaderIsDefault_APIName returns 0 if not defaulted, 1 if defaulted, and -1 in case of error
xmlTextReaderIsEmptyElement_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderIsEmptyElement_APIName returns 1 if empty, 0 if not and -1 in case of error
Determine whether the current node is a namespace declaration rather than a regular attribute
xmlTextReaderIsNamespaceDecl_APIParam_1 is the xmlTextReaderPtr used
Check
Retrieve the validity status from the parser context
xmlTextReaderIsValid_APIParam_1 is the xmlTextReaderPtr used
The local name of the node
xmlTextReaderIsValid_APIName returns the flag value 1 if valid, 0 if no, and -1 in case of error
xmlTextReaderLocalName_APIParam_1 is the xmlTextReaderPtr used
Obtain the base URI for the given xmlTextReaderLocatorBaseURI_APIParam_1
xmlTextReaderIsNamespaceDecl_APIName returns 1 if the current node is a namespace declaration, 0 if the current node is a regular attribute or other type of node, or -1 in case of error
xmlTextReaderLocalName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderLocatorBaseURI_APIParam_1 is the xmlTextReaderLocatorPtr used
Obtain the line number for the given xmlTextReaderLocatorLineNumber_APIParam_1
xmlTextReaderLocatorLineNumber_APIParam_1 is the xmlTextReaderLocatorPtr used
xmlTextReaderLocatorBaseURI_APIName returns the base URI or NULL in case of error, if non NULL it need to be freed by the caller
xmlTextReaderLocatorLineNumber_APIName returns the line number or -1 in case of error
Resolves a namespace xmlTextReaderLookupNamespace_APIParam_2 in the scope of the current element
xmlTextReaderLookupNamespace_APIParam_1 is the xmlTextReaderPtr used
To return the default namespace, specify NULL
xmlTextReaderLookupNamespace_APIParam_2 is the xmlTextReaderLookupNamespace_APIParam_2 whose namespace URI is to be resolved
The string must be deallocated by the caller
xmlTextReaderLookupNamespace_APIName returns a string containing the namespace URI to which the xmlTextReaderLookupNamespace_APIParam_2 maps or NULL in case of error
xmlTextReaderMoveToAttribute_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderMoveToAttribute_APIParam_2 is the qualified xmlTextReaderMoveToAttribute_APIParam_2 of the attribute
Moves the position of the current instance to the attribute with the specified qualified xmlTextReaderMoveToAttribute_APIParam_2
xmlTextReaderMoveToAttributeNo_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderMoveToAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToAttributeNo_APIName returns 1 in case of success, -1 in case of error, 0 if not found
Moves the position of the current instance to the attribute with the specified index relative to the containing element
xmlTextReaderMoveToAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element
xmlTextReaderMoveToAttributeNs_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderMoveToAttributeNs_APIParam_2 is the local name of the attribute
Moves the position of the current instance to the attribute with the specified local name and namespace URI
xmlTextReaderMoveToAttributeNs_APIParam_3 is the namespace URI of the attribute
xmlTextReaderMoveToAttributeNs_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToElement_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderMoveToElement_APIName returns 1 in case of success, -1 in case of error, 0 if not moved
Moves the position of the current instance to the node that contains the current Attribute node
xmlTextReaderMoveToFirstAttribute_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderMoveToNextAttribute_APIParam_1 is the xmlTextReaderPtr used
Moves the position of the current instance to the first attribute associated with the current node
xmlTextReaderMoveToFirstAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
Moves the position of the current instance to the next attribute associated with the current node
The qualified name of the node , equal to Prefix
xmlTextReaderMoveToNextAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderName_APIParam_1 is the xmlTextReaderPtr used
The URI defining the namespace associated with the node
xmlTextReaderNamespaceUri_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderNext_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderNamespaceUri_APIName returns the namespace URI or NULL if not available, if non NULL it need to be freed by the caller
Currently implemented only for Readers built on a document
xmlTextReaderNext_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
Skip to the node following the current one in document order
xmlTextReaderNextSibling_APIParam_1 is the xmlTextReaderPtr used
Get the node type of the current node Reference
xmlTextReaderNodeType_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderNextSibling_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
Skip to the node following the current one in document order
xmlTextReaderNodeType_APIName returns the xmlNodeType of the current node or -1 in case of error
The value indicating
xmlTextReaderNormalization_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderNormalization_APIName returns 1 or -1 in case of error
The broken bahaviour of accepting out of range character entities like & # 0
Since attribute value and end of line normalizations are a MUST in the XML specification only the value true is accepted
is of course not supported either
A shorthand reference to the namespace associated with the node
xmlTextReaderPrefix_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderPrefix_APIName returns the prefix or NULL if not available, if non NULL it need to be freed by the caller
This tells the XML Reader to preserve the current node
xmlTextReaderPreserve_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderPreserve_APIName returns the xmlNodePtr or NULL in case of error
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
xmlTextReaderPreservePattern_APIParam_1 is the xmlTextReaderPtr used
This tells the XML Reader to preserve all nodes matched by the xmlTextReaderPreservePattern_APIParam_2
xmlTextReaderPreservePattern_APIParam_2 is an XPath subset xmlTextReaderPreservePattern_APIParam_2
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
xmlTextReaderPreservePattern_APIName returns a non-negative number in case of success and -1 in case of error
xmlTextReaderPreservePattern_APIParam_3 is the prefix definitions , array of or NULL
The quotation mark character used to enclose the value of an attribute
xmlTextReaderQuoteChar_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderQuoteChar_APIName returns " or ' and -1 in case of error
xmlTextReaderRead_APIParam_1 is the xmlTextReaderPtr used
Parses an attribute value into one or more Text and EntityReference nodes
Moves the position of the current instance to the next node in the stream , exposing its properties
xmlTextReaderReadAttributeValue_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderRead_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
Reads the contents of the current node , including child nodes and markup
xmlTextReaderReadInnerXml_APIParam_1 is the xmlTextReaderPtr used
The string must be deallocated by the caller
Reads the contents of the current node , including child nodes and markup
xmlTextReaderReadOuterXml_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderReadAttributeValue_APIName returns 1 in case of success, 0 if the xmlTextReaderReadAttributeValue_APIParam_1 was not positionned on an ttribute node or all the attribute values have been read, or -1 in case of error
xmlTextReaderReadInnerXml_APIName returns a string containing the XML content, or NULL if the current node is neither an element nor attribute, or has no child nodes
The string must be deallocated by the caller
Gets the read state of the xmlTextReaderReadState_APIParam_1
xmlTextReaderReadOuterXml_APIName returns a string containing the node and any XML content, or NULL if the current node cannot be serialized
xmlTextReaderReadState_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderReadState_APIName returns the state value, or -1 in case of error
Reads the contents of an element or a text node as a string
xmlTextReaderReadString_APIParam_1 is the xmlTextReaderPtr used
The string must be deallocated by the caller
Use RelaxNG to validate the document as it is processed
Activation is only possible before the first Read_APIName
xmlTextReaderReadString_APIName returns a string containing the contents of the Element or Text node, or NULL if the xmlTextReaderReadString_APIParam_1 is positioned on any other type of node
xmlTextReaderRelaxNGSetSchema_APIParam_1 is the xmlTextReaderPtr used
@ The @schema should not be freed until the xmlTextReaderRelaxNGSetSchema_APIParam_1 is deallocated or its use has been deactivated
xmlTextReaderRelaxNGSetSchema_APIParam_2 is a precompiled RelaxNG xmlTextReaderRelaxNGSetSchema_APIParam_2
xmlTextReaderRelaxNGSetSchema_APIName returns 0 in case the RelaxNG validation could be activated and -1 in case of error
RelaxNG validation is desactivated
Use RelaxNG schema to validate the document as the document is processed
Activation is only possible before the first Read_APIName
xmlTextReaderRelaxNGValidate_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderRelaxNGValidate_APIParam_2 is the path to a RelaxNG schema or NULL
xmlTextReaderRelaxNGValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
RelaxNG schema validation is deactivated
Use RelaxNG schema context to validate the document as the document is processed
Activation is only possible before the first Read_APIName
xmlTextReaderRelaxNGValidateCtxt_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderRelaxNGValidateCtxt_APIParam_2 is the RelaxNG schema validation context or NULL
xmlTextReaderRelaxNGValidateCtxt_APIParam_3 is xmlTextReaderRelaxNGValidateCtxt_APIParam_3
xmlTextReaderRelaxNGValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
RelaxNG schema validation is deactivated
Use W3C XSD schema to validate the document as the document is processed
Activation is only possible before the first Read_APIName
xmlTextReaderSchemaValidate_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderSchemaValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
xmlTextReaderSchemaValidate_APIParam_2 is the path to a W3C XSD schema or NULL
XML Schema validation is deactivated
Use W3C XSD schema context to validate the document as the document is processed
Activation is only possible before the first Read_APIName
xmlTextReaderSchemaValidateCtxt_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderSchemaValidateCtxt_APIParam_2 is the XML Schema validation context or NULL
xmlTextReaderSchemaValidateCtxt_APIParam_3 is xmlTextReaderSchemaValidateCtxt_APIParam_3
xmlTextReaderSchemaValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
Register a callback function that will be called on error and warnings
XML Schema validation is deactivated
xmlTextReaderSetErrorHandler_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderSetErrorHandler_APIParam_2 is the callback function to call on error and warnings
xmlTextReaderSetErrorHandler_APIParam_3 is a user argument to pass to the callback function
the default error and warning handlers are restored
Change the parser processing behaviour by changing some of its internal properties
Note that some properties can only be changed before any read has been done
xmlTextReaderSetParserProp_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderSetParserProp_APIParam_2 is the xmlParserProperties to set
xmlTextReaderSetParserProp_APIParam_3 is usually 0 or 1 to activate it
xmlTextReaderSetParserProp_APIName returns 0 if the call was successful, or -1 in case of error
Use XSD Schema to validate the document as it is processed
Activation is only possible before the first Read_APIName
xmlTextReaderSetSchema_APIParam_1 is the xmlTextReaderPtr used
@ The @schema should not be freed until the xmlTextReaderSetSchema_APIParam_1 is deallocated or its use has been deactivated
xmlTextReaderSetSchema_APIParam_2 is a precompiled Schema xmlTextReaderSetSchema_APIParam_2
xmlTextReaderSetSchema_APIName returns 0 in case the Schema validation could be activated and -1 in case of error
Schema validation is desactivated
Register a callback function that will be called on error and warnings
xmlTextReaderSetStructuredErrorHandler_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderSetStructuredErrorHandler_APIParam_2 is the callback function to call on error and warnings
xmlTextReaderSetStructuredErrorHandler_APIParam_3 is a user argument to pass to the callback function
Setup an XML xmlTextReaderSetup_APIParam_1 with new xmlTextReaderSetup_APIParam_5
the default error and warning handlers are restored
xmlTextReaderSetup_APIParam_1 is an XML xmlTextReaderSetup_APIParam_1
xmlTextReaderSetup_APIParam_2 is xmlParserInputBufferPtr used to feed the xmlTextReaderSetup_APIParam_1 , will be destroyed with it
xmlTextReaderSetup_APIParam_3 is the base xmlTextReaderSetup_APIParam_3 to use for the document
xmlTextReaderSetup_APIParam_4 is the document xmlTextReaderSetup_APIParam_4 , or NULL
xmlTextReaderSetup_APIParam_5 is a combination of xmlParserOption
xmlTextReaderSetup_APIName returns 0 in case of success and -1 in case of error
Determine the standalone status of the document being read
xmlTextReaderStandalone_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderValue_APIParam_1 is the xmlTextReaderPtr used
xmlTextReaderValue_APIName returns the string or NULL if not available
The result must be deallocated with xmlFree_APIName
The xml
lang scope within which the node resides
Provides the text value of the node
xmlTextReaderXmlLang_APIParam_1 is the xmlTextReaderPtr used
Daniel Veillard
Get the authentication header of an HTTP context
xmlTextReaderStandalone_APIName returns 1 if the document was declared to be standalone, 0 if it was declared to be not standalone, or -1 if the document did not specify its standalone status or in case of error
xmlTextReaderXmlLang_APIName returns the xmllang value or NULL if none exists., if non NULL it need to be freed by the caller
xmlNanoHTTPAuthHeader_APIParam_1 is the HTTP context
xmlNanoHTTPAuthHeader_APIName returns the stashed value of the WWW-Authenticate or Proxy-Authenticate header
Cleanup the HTTP protocol layer
xmlNanoHTTPClose_APIParam_1 is the HTTP context
Provides the specified content length from the HTTP header
xmlNanoHTTPClose_APIName closes an HTTP context , xmlNanoHTTPClose_APIName ends up the connection and free all data related to This function
xmlNanoHTTPContentLength_APIParam_1 is the HTTP context
xmlNanoHTTPContentLength_APIName returns the specified content length from the HTTP header
xmlNanoHTTPEncoding_APIParam_1 is the HTTP context
xmlNanoHTTPEncoding_APIName returns the specified encoding or NULL if not available
Note that a value of -1 indicates that the content length element was not included in the response header
xmlNanoHTTPFetch_APIParam_1 is The xmlNanoHTTPFetch_APIParam_1 to load
encoding
Provides the specified
xmlNanoHTTPFetch_APIParam_2 is the xmlNanoHTTPFetch_APIParam_2 where the content should be saved
xmlNanoHTTPFetch_APIName try to fetch the indicated resource via HTTP GET and save it is content in the file
xmlNanoHTTPFetch_APIParam_3 is if available the Content-Type information will be returned at that location
xmlNanoHTTPFetch_APIName returns -1 in case of failure, 0 incase of success
Initialize the HTTP protocol layer
Currently the HTTP protocol layer just checks for proxy informations
xmlNanoHTTPMethod_APIParam_1 is The xmlNanoHTTPMethod_APIParam_1 to load
xmlNanoHTTPMethod_APIParam_2 is the HTTP xmlNanoHTTPMethod_APIParam_2 to use
The xmlNanoHTTPFetch_APIParam_3 , must be freed by the caller
xmlNanoHTTPMethod_APIParam_4 is the Content-Type information IN and OUT
xmlNanoHTTPMethod_APIParam_5 is the extra xmlNanoHTTPMethod_APIParam_5
xmlNanoHTTPMethod_APIParam_6 is xmlNanoHTTPMethod_APIParam_3 length
xmlNanoHTTPMethod_APIParam_3 is the xmlNanoHTTPMethod_APIParam_3 string
xmlNanoHTTPMethod_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPMethod_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethod_APIParam_5 and the xmlNanoHTTPMethod_APIParam_3 buffer for the request content
xmlNanoHTTPMethodRedir_APIParam_1 is The xmlNanoHTTPMethodRedir_APIParam_1 to load
xmlNanoHTTPMethodRedir_APIParam_2 is the HTTP xmlNanoHTTPMethodRedir_APIParam_2 to use
The xmlNanoHTTPMethod_APIParam_4 , must be freed by the caller
xmlNanoHTTPMethodRedir_APIParam_4 is the Content-Type information IN and OUT
xmlNanoHTTPMethodRedir_APIParam_5 is the redirected xmlNanoHTTPMethodRedir_APIParam_1 OUT
xmlNanoHTTPMethodRedir_APIParam_3 is the xmlNanoHTTPMethodRedir_APIParam_3 string
xmlNanoHTTPMethodRedir_APIParam_6 is the extra xmlNanoHTTPMethodRedir_APIParam_6
xmlNanoHTTPMethodRedir_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethodRedir_APIParam_6 and the xmlNanoHTTPMethodRedir_APIParam_3 buffer for the request content
xmlNanoHTTPMethodRedir_APIParam_7 is xmlNanoHTTPMethodRedir_APIParam_3 length
xmlNanoHTTPMethodRedir_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPMimeType_APIParam_1 is the HTTP context
xmlNanoHTTPMimeType_APIName returns the specified Mime-Type or NULL if not available
xmlNanoHTTPOpen_APIName try to open a connection to the indicated resource via HTTP GET
The xmlNanoHTTPMethodRedir_APIParam_4 , or xmlNanoHTTPMethodRedir_APIParam_5 , must be freed by the caller
xmlNanoHTTPOpen_APIParam_1 is The xmlNanoHTTPOpen_APIParam_1 to load
xmlNanoHTTPOpen_APIParam_2 is if available the Content-Type information will be returned at that location
Provides the specified Mime-Type
xmlNanoHTTPOpen_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPOpenRedir_APIName try to open a connection to the indicated resource via HTTP GET
xmlNanoHTTPOpenRedir_APIParam_1 is The xmlNanoHTTPOpenRedir_APIParam_1 to load
xmlNanoHTTPOpenRedir_APIParam_2 is if available the Content-Type information will be returned at that location
xmlNanoHTTPOpenRedir_APIParam_3 is if available the redirected xmlNanoHTTPOpenRedir_APIParam_1 will be returned
xmlNanoHTTPOpenRedir_APIName returns NULL in case of failure, otherwise a request handler
The xmlNanoHTTPOpen_APIParam_2 , must be freed by the caller
This is a blocking call
xmlNanoHTTPRead_APIParam_1 is the HTTP context
xmlNanoHTTPRead_APIName tries to read @len bytes from the existing HTTP connection and saves them in @dest
xmlNanoHTTPRead_APIParam_2 is a buffer
The xmlNanoHTTPOpenRedir_APIParam_2 , must be freed by the caller
xmlNanoHTTPRead_APIParam_3 is the buffer length
xmlNanoHTTPRead_APIName returns the number of byte read
0 is an indication of an end of connection
-1 indicates a parameter error
xmlNanoHTTPRedir_APIParam_1 is the HTTP context
xmlNanoHTTPRedir_APIName returns the specified redirection URL or NULL if not redirected
Get the latest HTTP return code received
xmlNanoHTTPReturnCode_APIParam_1 is the HTTP context
xmlNanoHTTPReturnCode_APIName returns the HTTP return code for the request
Provides the specified redirection URL from the HTTP header
xmlNanoHTTPSave_APIParam_1 is the HTTP context
xmlNanoHTTPSave_APIParam_2 is the xmlNanoHTTPSave_APIParam_2 where the content should be saved
xmlNanoHTTPSave_APIName returns -1 in case of failure, 0 incase of success
xmlNanoHTTPSave_APIName saves the output of the HTTP transaction to a file xmlNanoHTTPSave_APIName closes and free the context at the end
Should be like http
Initialize the HTTP Proxy context by parsing the xmlNanoHTTPScanProxy_APIParam_1 and finding the protocol host port it indicates
/ / myproxy / or http
xmlNanoHTTPScanProxy_APIParam_1 is The proxy xmlNanoHTTPScanProxy_APIParam_1 used to initialize the proxy context
3128 / A NULL xmlNanoHTTPScanProxy_APIParam_1 cleans up proxy informations
Daniel Veillard
Deallocate a Schematron structure
xmlSchematronFree_APIParam_1 is a xmlSchematronFree_APIParam_1 structure
Free the resources associated to the schema parser context
xmlSchematronFreeParserCtxt_APIParam_1 is the schema parser context
Free the resources associated to the schema validation context
xmlSchematronFreeValidCtxt_APIParam_1 is the schema validation context
Create an XML Schematrons parse context for that document
xmlSchematronNewDocParserCtxt_APIParam_1 is a preparsed document tree
xmlSchematronNewDocParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML Schematrons parse context for that memory xmlSchematronNewMemParserCtxt_APIParam_1 expected to contain an XML Schematrons file
The document may be modified
xmlSchematronNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas
xmlSchematronNewMemParserCtxt_APIParam_2 is the xmlSchematronNewMemParserCtxt_APIParam_2 of the array
xmlSchematronNewMemParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchematronNewParserCtxt_APIParam_1 is the location of the schema
xmlSchematronNewParserCtxt_APIName returns the parser context or NULL in case of error
Create an XML Schematrons parse context for that file/resource expected to contain an XML Schematrons file
Create an XML Schematrons validation context based on the given xmlSchematronNewValidCtxt_APIParam_1
xmlSchematronNewValidCtxt_APIParam_1 is a precompiled XML Schematrons
xmlSchematronNewValidCtxt_APIParam_2 is a set of xmlSchematronValidOptions
xmlSchematronNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlSchematronParse_APIParam_1 is a schema validation context
Set the structured error callback
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances
xmlSchematronParse_APIName returns the internal XML Schematron structure built from the resource or NULL in case of error
xmlSchematronSetValidStructuredErrors_APIParam_1 is a Schematron validation context
xmlSchematronSetValidStructuredErrors_APIParam_2 is the structured error function
xmlSchematronSetValidStructuredErrors_APIParam_3 is the functions context
Validate a tree xmlSchematronValidateDoc_APIParam_2 against the schematron
xmlSchematronValidateDoc_APIParam_1 is the schema validation context
xmlSchematronValidateDoc_APIParam_2 is the document instace tree
Signature of an error callback from a Schematron validation
xmlSchematronValidityErrorFunc_APIParam_1 is xmlSchematronValidityErrorFunc_APIParam_3 validation context
xmlSchematronValidateDoc_APIName returns 0 in case of success, -1 in case of internal error and an error count otherwise
xmlSchematronValidityErrorFunc_APIParam_2 is xmlSchematronValidityErrorFunc_APIParam_3 message xmlSchematronValidityErrorFunc_APIParam_3 extra arguments
Signature of a warning callback from a Schematron validation
xmlSchematronValidityWarningFunc_APIParam_1 is xmlSchematronValidityWarningFunc_APIParam_3 validation context
xmlSchematronValidityWarningFunc_APIParam_2 is xmlSchematronValidityWarningFunc_APIParam_3 message xmlSchematronValidityWarningFunc_APIParam_3 extra arguments
Daniel Veillard
Free the dictionary mutex
Do not call unless sure the library is not in use anymore
Create a new dictionary
xmlDictCreate_APIName returns the newly created dictionary, or NULL if an error occurred
Create a new dictionary , inheriting strings from the read-only dictionary @sub
xmlDictCreateSub_APIParam_1 is an existing dictionary
xmlDictCreateSub_APIName returns the newly created dictionary, or NULL if an error occurred
xmlDictExists_APIParam_1 is the dictionary
xmlDictExists_APIParam_2 is the xmlDictExists_APIParam_2 of the userdata
Check
xmlDictExists_APIName returns the internal copy of the xmlDictExists_APIParam_2 or NULL if not found
Free the hash @dict and its contents
are created in the new dictionary
On lookup , strings are first searched in the new dictionary , in @sub , and
xmlDictExists_APIParam_3 is the length of the xmlDictExists_APIParam_2
xmlDictFree_APIParam_1 is the dictionary
xmlDictGetUsage_APIName returns the amount of strings allocated
The userdata is deallocated with @f
Get how much memory is used by a dictionary for strings Added in 2.9.0
xmlDictLookup_APIParam_1 is the dictionary
xmlDictLookup_APIParam_2 is the xmlDictLookup_APIParam_2 of the userdata
xmlDictLookup_APIName returns the internal copy of the xmlDictLookup_APIParam_2 or NULL in case of internal error
Add the @name to the dictionary @dict
check if a string is owned by the disctionary
xmlDictOwns_APIParam_1 is the dictionary
xmlDictOwns_APIParam_2 is the string
xmlDictLookup_APIParam_3 is the length of the xmlDictLookup_APIParam_2
Add the QName @prefix
xmlDictQLookup_APIParam_1 is the dictionary
xmlDictOwns_APIName returns 1 if true, 0 if false and -1 in case of error -1 in case of error
xmlDictQLookup_APIParam_2 is the xmlDictQLookup_APIParam_2
xmlDictQLookup_APIParam_3 is the xmlDictQLookup_APIParam_3
xmlDictQLookup_APIName returns the internal copy of the QName or NULL in case of internal error
@name to the hash @dict
Increment the reference counter of a dictionary
xmlDictReference_APIParam_1 is the dictionary
xmlDictReference_APIName returns 0 in case of success and -1 in case of error
Set a size xmlDictSetLimit_APIParam_2 for the dictionary Added in 2.9.0
xmlDictSetLimit_APIParam_2 is the xmlDictSetLimit_APIParam_2 in bytes
xmlDictSetLimit_APIName returns the previous xmlDictSetLimit_APIParam_2 of the dictionary or 0
Query the number of elements installed in the hash @dict
xmlDictSize_APIParam_1 is the dictionary
Do the dictionary mutex initialization
xmlDictSize_APIName returns the number of elements in the dictionary or -1 in case of error
this function is deprecated
Daniel Veillard
xmlInitializeDict_APIName returns 0 if initialization was already done, and 1 if that call led to the initialization
Pops the top XPath object from the value stack
valuePop_APIParam_1 is an XPath evaluation context
valuePop_APIName returns the XPath object just removed
Pushes a new XPath object on top of the valuePush_APIParam_2 stack
valuePush_APIParam_1 is an XPath evaluation context
valuePush_APIParam_2 is the XPath object
valuePush_APIName returns the number of items on the valuePush_APIParam_2 stack
xmlXPathAddValues_APIParam_1 is the XPath Parser context
Implement the add operation on XPath objects
xmlXPathBooleanFunction_APIParam_1 is the XPath Parser context
xmlXPathBooleanFunction_APIParam_2 is the number of arguments
xmlXPathCeilingFunction_APIParam_1 is the XPath Parser context
xmlXPathCeilingFunction_APIParam_2 is the number of arguments
Implement the ceiling_APIName XPath function number ceiling The ceiling function returns the smallest  number that is not less than the argument and that is an integer
The numeric operators convert The numeric operators operands to numbers by calling the number function
xmlXPathCompareValues_APIParam_1 is the XPath Parser context
Implement the compare operation on XPath objects
xmlXPathCompareValues_APIParam_2 is less than or greater than
xmlXPathCompareValues_APIParam_3 is is the comparison xmlXPathCompareValues_APIParam_3
The < comparison will be true if the first number is less than the second number
@arg1 < @arg2 -LRB- 1 , 1 , ... @arg1 < = @arg2 -LRB- 1 , 0 , ... @arg1 > @arg2 -LRB- 0 , 1 , ... @arg1 > = @arg2 -LRB- 0 , 0
The < = comparison will be true if the first number is less than or equal to the second number
xmlXPathCompareValues_APIName returns 1 if the comparison succeeded, 0 if it failed
xmlXPathConcatFunction_APIParam_1 is the XPath Parser context
The < = comparison will be true if the first number is greater than the second number
Implement the concat_APIName XPath function string concat The concat function returns the concatenation of The concat function arguments
xmlXPathConcatFunction_APIParam_2 is the number of arguments
xmlXPathContainsFunction_APIParam_1 is the XPath Parser context
xmlXPathContainsFunction_APIParam_2 is the number of arguments
Implement the contains_APIName XPath function boolean contains The contains function returns true if the first argument string contains the second argument string, and otherwise returns false
The < = comparison will be true if the first number is greater than or equal to the second number
Implement the boolean_APIName XPath function boolean boolean The boolean function converts its argument to a boolean as follows
the objects are compared by converted both objects to numbers and comparing the numbers according to IEEE 754
- a number is true
Implement the count_APIName XPath function number count
xmlXPathCountFunction_APIParam_1 is the XPath Parser context
xmlXPathCountFunction_APIParam_2 is the number of arguments
Dumps the tree of the compiled XPath expression
xmlXPathDebugDumpCompExpr_APIParam_1 is the FILE * for the xmlXPathDebugDumpCompExpr_APIParam_1
xmlXPathDebugDumpCompExpr_APIParam_2 is the precompiled XPath expression
xmlXPathDebugDumpCompExpr_APIParam_3 is the indentation level
Dump the content of the object for debugging purposes
xmlXPathDebugDumpObject_APIParam_1 is the FILE * to dump the xmlXPathDebugDumpObject_APIParam_1
xmlXPathDebugDumpObject_APIParam_2 is the object to inspect
xmlXPathDebugDumpObject_APIParam_3 is indentation level
Implements the EXSLT - Sets difference_APIName function
node-set set
difference
xmlXPathDifference_APIParam_1 is a node-set
xmlXPathDifference_APIParam_2 is a node-set
xmlXPathDifference_APIName returns the difference between the two node sets, or xmlXPathDifference_APIParam_1 if xmlXPathDifference_APIParam_2 is empty
xmlXPathDistinct_APIParam_1 is a node-set
Implements the EXSLT - Sets distinct_APIName function
node-set set
xmlXPathDistinct_APIName returns a subset of the xmlXPathDistinct_APIParam_1 contained in @nodes, or @nodes if it is empty
distinct @nodes is sorted by document order , #exslSetsDistinctSorted is called with the sorted node-set
Implements the EXSLT - Sets distinct_APIName function
node-set set
distinct
xmlXPathDistinctSorted_APIParam_1 is a node-set , sorted by document order
xmlXPathDistinctSorted_APIName returns a subset of the xmlXPathDistinctSorted_APIParam_1 contained in @nodes, or @nodes if it is empty
xmlXPathDivValues_APIParam_1 is the XPath Parser context
Implement the equal operation on XPath objects content
@arg1 == @arg2
xmlXPathEqualValues_APIParam_1 is the XPath Parser context
xmlXPathEqualValues_APIName returns 0 or 1 depending on the results of the test
Implement the div operation on XPath objects @arg1 / @arg2
Handle an XPath xmlXPathErr_APIParam_2
xmlXPathErr_APIParam_1 is a XPath parser context
xmlXPathErr_APIParam_2 is the xmlXPathErr_APIParam_2 code
xmlXPathEvalExpr_APIParam_1 is the XPath Parser context
The numeric operators convert The numeric operators operands to numbers by calling the number function
Evaluate a predicate result for the current node
Parse and evaluate an XPath expression in the given context , push the result on the context stack
A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean
xmlXPathEvaluatePredicateResult_APIParam_1 is the XPath Parser context
xmlXPathEvaluatePredicateResult_APIParam_2 is the Predicate Expression evaluation result
xmlXPathEvaluatePredicateResult_APIName returns 1 if predicate is true, 0 otherwise
Implement the false_APIName XPath function boolean false_APIName
xmlXPathFalseFunction_APIParam_1 is the XPath Parser context
xmlXPathFalseFunction_APIParam_2 is the number of arguments
xmlXPathFloorFunction_APIParam_1 is the XPath Parser context
xmlXPathFloorFunction_APIParam_2 is the number of arguments
Free up an xmlXPathParserContext
xmlXPathFreeParserContext_APIParam_1 is the context to free
Implement the floor_APIName XPath function number floor The floor function returns the largest  number that is not greater than the argument and that is an integer
Search in the Function array of the context for the given function
xmlXPathFunctionLookup_APIParam_1 is the XPath context
xmlXPathFunctionLookup_APIParam_2 is the function xmlXPathFunctionLookup_APIParam_2
xmlXPathFunctionLookup_APIName returns the xmlXPathFunction or NULL if not found
Search in the Function array of the context for the given function
xmlXPathFunctionLookupNS_APIParam_1 is the XPath context
xmlXPathFunctionLookupNS_APIParam_2 is the function xmlXPathFunctionLookupNS_APIParam_2
xmlXPathFunctionLookupNS_APIParam_3 is the function namespace URI
xmlXPathFunctionLookupNS_APIName returns the xmlXPathFunction or NULL if not found
Implements the EXSLT - Sets has-same-nodes function
boolean set
xmlXPathHasSameNodes_APIParam_1 is a node-set
xmlXPathHasSameNodes_APIParam_2 is a node-set
xmlXPathHasSameNodes_APIName returns true  if @nodes1 shares any node with @nodes2, false  otherwise
xmlXPathIdFunction_APIParam_1 is the XPath Parser context
Implement the id_APIName XPath function node-set id The id function selects elements by their unique ID
xmlXPathIdFunction_APIParam_2 is the number of arguments
Implements the EXSLT - Sets intersection_APIName function
node-set set
intersection
xmlXPathIntersection_APIParam_1 is a node-set
xmlXPathIntersection_APIParam_2 is a node-set
Is the xmlXPathIsNodeType_APIParam_1 given a NodeType one
xmlXPathIntersection_APIName returns a node set comprising the nodes that are within both the node sets passed as arguments
xmlXPathIsNodeType_APIParam_1 is a xmlXPathIsNodeType_APIParam_1 string
xmlXPathIsNodeType_APIName returns 1 if true 0 otherwise
xmlXPathLangFunction_APIParam_1 is the XPath Parser context
xmlXPathLangFunction_APIParam_2 is the number of arguments
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
xmlXPathLastFunction_APIParam_1 is the XPath Parser context
xmlXPathLastFunction_APIParam_2 is the number of arguments

Implement the last_APIName XPath function number last_APIName The last function returns the number of nodes in the context node list
the result will be converted as if by a call to the boolean function
the result is the union of the result of applying id to the string value of each of the nodes in the argument node-set
xmlXPathLeading_APIParam_1 is a node-set
xmlXPathLeading_APIParam_2 is a node-set
Implements the EXSLT - Sets leading_APIName function
node-set set
Implements the EXSLT - Sets leading_APIName function
node-set set
leading
leading @nodes1 and @nodes2 are sorted by document order , #exslSetsLeadingSorted is called
= ` comment ' | ` text ' | ` processing-instruction ' | ` node '
Implement the lang_APIName XPath function boolean lang The lang function returns true or false depending on  or is a sublanguage of the language specified by the argument string
xmlXPathLeadingSorted_APIParam_1 is a node-set , sorted by document order
xmlXPathLeadingSorted_APIParam_2 is a node-set , sorted by document order
Implement the local-name_APIName XPath function string local-name
xmlXPathLeading_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
If the node-set is empty or the first node has no name, an empty stringbe returned by xmlXPathLocalNameFunction_APIName
xmlXPathLocalNameFunction_APIParam_1 is the XPath Parser context
The local-name function returns a string containing the local part of the name of the node in the argument node-set that is first in document order
xmlXPathLocalNameFunction_APIParam_2 is the number of arguments
xmlXPathLeadingSorted_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2

xmlXPathModValues_APIParam_1 is the XPath Parser context
xmlXPathMultValues_APIParam_1 is the XPath Parser context
Implement the mod operation on XPath objects
Implement the namespace-uri_APIName XPath function string namespace-uri
Implement the multiply operation on XPath objects
The namespace-uri function returns a string containing the namespace URI of the expanded name of the node in the argument node-set that is first in document order
If the node-set is empty, the first node has no name, or the expanded name has no namespace URI, an empty stringbe returned by xmlXPathNamespaceURIFunction_APIName
@arg2 The numeric operators convert The numeric operators operands to numbers by calling the number function
@arg1 /
The language of the context node is determined by the value of the xml
the argument is converted to a string as if by a call to the string function

the string is split into a whitespace-separated list of tokens
The numeric operators convert The numeric operators operands to numbers by calling the number function
lang attribute on the context node , or , has no xml
the result is a node-set containing the elements in the same document as the context node that have a unique ID equal to any of the tokens in the list
lang attribute , by the value of the xml
lang attribute on the nearest ancestor of the context node that has an xml
lang attribute
xmlXPathNamespaceURIFunction_APIParam_1 is the XPath Parser context
xmlXPathNamespaceURIFunction_APIParam_2 is the number of arguments
Create a new xmlXPathObjectPtr of type boolean and of value @val
xmlXPathNewBoolean_APIParam_1 is the boolean value
xmlXPathNewBoolean_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type string and of value @val
xmlXPathNewCString_APIParam_1 is the char * value
xmlXPathNewCString_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type double and of value @val
xmlXPathNewFloat_APIParam_1 is the double value
xmlXPathNewFloat_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the single Node @val
xmlXPathNewNodeSet_APIParam_1 is the NodePtr value
xmlXPathNewNodeSet_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the Nodeset @val
xmlXPathNewNodeSetList_APIParam_1 is an existing NodeSet
xmlXPathNewNodeSetList_APIName returns the newly created object
Create a new xmlXPathParserContext
xmlXPathNewParserContext_APIParam_1 is the XPath expression
xmlXPathNewParserContext_APIParam_2 is the XPath context
xmlXPathNewParserContext_APIName returns the xmlXPathParserContext just allocated
Create a new xmlXPathObjectPtr of type string and of value @val
xmlXPathNewString_APIParam_1 is the xmlChar * value
xmlXPathNewString_APIName returns the newly created object
xmlXPathNewValueTree_APIParam_1 is the NodePtr value
xmlXPathNewValueTree_APIName returns the newly created object
Create a new xmlXPathObjectPtr of type Value Tree and initialize it with the tree root @val
xmlXPathNextAncestor_APIParam_1 is the XPath Parser context
xmlXPathNextAncestor_APIParam_2 is the current node in the traversal
xmlXPathNextAncestor_APIName returns the next element following that axis
xmlXPathNextAncestorOrSelf_APIParam_1 is the XPath Parser context
xmlXPathNextAncestorOrSelf_APIParam_2 is the current node in the traversal
xmlXPathNextAncestorOrSelf_APIName returns the next element following that axis
Traversal function for the `` attribute '' direction TODO
support DTD inherited default attributes
xmlXPathNextAttribute_APIParam_1 is the XPath Parser context
xmlXPathNextAttribute_APIName returns the next element following that axis
xmlXPathNextAttribute_APIParam_2 is the current attribute in the traversal
xmlXPathNextChild_APIParam_1 is the XPath Parser context
xmlXPathNextChild_APIParam_2 is the current node in the traversal
xmlXPathNextChild_APIName returns the next element following that axis
Traversal function for the `` child '' direction The child axis contains the children of the context node in document order
xmlXPathNextDescendant_APIParam_1 is the XPath Parser context
xmlXPathNextDescendant_APIParam_2 is the current node in the traversal
xmlXPathNextDescendant_APIName returns the next element following that axis
xmlXPathNextDescendantOrSelf_APIParam_1 is the XPath Parser context
xmlXPathNextDescendantOrSelf_APIParam_2 is the current node in the traversal
xmlXPathNextDescendantOrSelf_APIName returns the next element following that axis
xmlXPathNextFollowing_APIParam_1 is the XPath Parser context
Traversal function for the `` descendant '' direction the descendant axis contains the descendants of the context node in document order
xmlXPathNextFollowing_APIParam_2 is the current node in the traversal
xmlXPathNextFollowing_APIName returns the next element following that axis
a descendant is a child or a child of a child and so on
xmlXPathNextFollowingSibling_APIParam_1 is the XPath Parser context
Traversal function for the `` ancestor-or-self '' direction he ancestor-or-self axis contains the context node and ancestors of the context node in reverse document order
xmlXPathNextFollowingSibling_APIParam_2 is the current node in the traversal
xmlXPathNextFollowingSibling_APIName returns the next element following that axis
Traversal function for the `` following-sibling '' direction The following-sibling axis contains the following siblings of the context node in document order
thus the context node is the first node on the axis , and the context node parent the second
parent here is defined the same as with the parent axis
xmlXPathNextNamespace_APIParam_1 is the XPath Parser context
xmlXPathNextNamespace_APIParam_2 is the current attribute in the traversal
xmlXPathNextNamespace_APIName returns the next element following that axis
xmlXPathNextParent_APIParam_1 is the XPath Parser context
xmlXPathNextParent_APIParam_2 is the current node in the traversal
xmlXPathNextParent_APIName returns the next element following that axis
xmlXPathNextPreceding_APIParam_1 is the XPath Parser context
xmlXPathNextPreceding_APIParam_2 is the current node in the traversal
xmlXPathNextPreceding_APIName returns the next element following that axis
Traversal function for the `` parent '' direction The parent axis contains the parent of the context node
xmlXPathNextPrecedingSibling_APIParam_1 is the XPath Parser context
Traversal function for the `` ancestor '' direction the ancestor axis contains the ancestors of the context node
Traversal function for the `` descendant-or-self '' direction the descendant-or-self axis contains the context node and the descendants of the context node in document order
xmlXPathNextPrecedingSibling_APIParam_2 is the current node in the traversal
xmlXPathNextPrecedingSibling_APIName returns the next element following that axis
the ancestors of the context node consist of the parent of context node and the parent parent and so on
Traversal function for the `` following '' direction The following axis contains all nodes in the same document as the context node that are after the context node in document order , excluding any descendants and excluding attribute nodes and namespace nodes
the nodes are ordered in document order
the nodes are ordered in reverse document order
xmlXPathNextSelf_APIParam_1 is the XPath Parser context
thus the context node is the first node on the axis , and the first child of the context node is the second node on the axis
xmlXPathNextSelf_APIParam_2 is the current node in the traversal
Traversal function for the `` self '' direction The self axis contains just the context node itself
thus the parent is the first node on the axis , and the parent parent is the second node on the axis
xmlXPathNextSelf_APIName returns the next element following that axis
Traversal function for the `` namespace '' direction the namespace axis contains the namespace nodes of the context node
xmlXPathNodeLeading_APIParam_1 is a node-set
the order of nodes on this axis is implementation-defined
xmlXPathNodeLeading_APIParam_2 is a xmlXPathNodeLeading_APIParam_2
Implements the EXSLT - Sets leading_APIName function
node-set set
the axis will be empty unless the context node is an element We keep the XML namespace node at the end of the list
leading @nodes is sorted by document order , #exslSetsNodeLeadingSorted is called
Implements the EXSLT - Sets leading_APIName function
node-set set
leading
xmlXPathNodeLeadingSorted_APIParam_1 is a node-set , sorted by document order
xmlXPathNodeLeadingSorted_APIParam_2 is a xmlXPathNodeLeadingSorted_APIParam_2
Traversal function for the `` preceding-sibling '' direction The preceding-sibling axis contains the preceding siblings of the context node in reverse document order
xmlXPathNodeLeading_APIName returns the xmlXPathNodeLeading_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
the first preceding sibling is first on the axis
the sibling preceding that node is the second on the axis and so on
add a new xmlNodePtr to an existing NodeSet
xmlXPathNodeSetAdd_APIParam_1 is the initial node set
xmlXPathNodeSetAdd_APIParam_2 is a new xmlNodePtr
xmlXPathNodeLeadingSorted_APIName returns the xmlXPathNodeLeadingSorted_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
Traversal function for the `` preceding '' direction the preceding axis contains all nodes in the same document as the context node that are before the context node in document order , excluding any ancestors and excluding attribute nodes and namespace nodes
the nodes are ordered in reverse document order
xmlXPathNodeSetAdd_APIName returns 0 in case of success, and -1 in case of error
add a new namespace xmlXPathNodeSetAddNs_APIParam_2 to an existing NodeSet
xmlXPathNodeSetAddNs_APIParam_1 is the initial xmlXPathNodeSetAddNs_APIParam_2 set
xmlXPathNodeSetAddNs_APIParam_2 is the hosting xmlXPathNodeSetAddNs_APIParam_2
xmlXPathNodeSetAddNs_APIParam_3 is a the namespace xmlXPathNodeSetAddNs_APIParam_2
xmlXPathNodeSetAddNs_APIName returns 0 in case of success and -1 in case of error
xmlXPathNodeSetAddUnique_APIParam_1 is the initial node set
xmlXPathNodeSetAddUnique_APIParam_2 is a new xmlNodePtr
xmlXPathNodeSetAddUnique_APIName returns 0 in case of success and -1 in case of failure
checks whether @cur contains @val
add a new xmlNodePtr to an existing NodeSet , optimized version
xmlXPathNodeSetContains_APIParam_1 is the node-set
xmlXPathNodeSetContains_APIParam_2 is the node
xmlXPathNodeSetContains_APIName returns true  if @cur contains @val, false  otherwise
Removes an xmlNodePtr from an existing NodeSet
xmlXPathNodeSetDel_APIParam_1 is the initial node set
xmlXPathNodeSetDel_APIParam_2 is an xmlNodePtr
Namespace nodes in libxml do not match the XPath semantic
xmlXPathNodeSetFreeNs_APIParam_1 is the XPath namespace node found in a nodeset
xmlXPathNodeSetMerge_APIParam_1 is the first NodeSet or NULL
In a node set the namespace nodes are duplicated and the next pointer is set to the parent node in the XPath semantic
Check
xmlXPathNodeSetMerge_APIParam_2 is the second NodeSet
xmlXPathNodeSetMerge_APIName returns @val1 once extended or NULL in case of error
Removes an entry from an existing NodeSet list
xmlXPathNodeSetRemove_APIParam_1 is the initial node set
xmlXPathNodeSetRemove_APIParam_2 is the index to remove
Sort the node xmlXPathNodeSetSort_APIParam_1 in document order
xmlXPathNodeSetSort_APIParam_1 is the node set
a new set is created and copied from @val2
Merges two nodesets , all nodes from @val2 are added to @val1
xmlXPathNodeTrailing_APIParam_1 is a node-set
Implements the EXSLT - Sets trailing_APIName function
node-set set
xmlXPathNodeTrailing_APIParam_2 is a xmlXPathNodeTrailing_APIParam_2
trailing @nodes is sorted by document order , #xmlXPathNodeTrailingSorted is called
Implements the EXSLT - Sets trailing_APIName function
node-set set
trailing
xmlXPathNodeTrailingSorted_APIParam_1 is a node-set , sorted by document order
xmlXPathNodeTrailingSorted_APIParam_2 is a xmlXPathNodeTrailingSorted_APIParam_2
xmlXPathNodeTrailing_APIName returns the xmlXPathNodeTrailing_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
Implement the normalize-space_APIName XPath function string normalize-space
Whitespace characters are the same allowed by the S production in XML
xmlXPathNodeTrailingSorted_APIName returns the xmlXPathNodeTrailingSorted_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
The normalize-space function returns the argument string with white space normalized by stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space
xmlXPathNormalizeFunction_APIParam_1 is the XPath Parser context
xmlXPathNormalizeFunction_APIParam_2 is the number of arguments
Implement the equal operation on XPath objects content
@arg1 == @arg2
xmlXPathNotEqualValues_APIParam_1 is the XPath Parser context
xmlXPathNotEqualValues_APIName returns 0 or 1 depending on the results of the test
xmlXPathNotFunction_APIParam_1 is the XPath Parser context
xmlXPathNotFunction_APIParam_2 is the number of arguments
Implement the not_APIName XPath function boolean not The not function returns true if its argument is false, and false otherwise
xmlXPathNsLookup_APIParam_1 is the XPath context
the argument defaults to the context node converted to a string , the value of the context node
xmlXPathNsLookup_APIParam_2 is the namespace xmlXPathNsLookup_APIParam_2 value
xmlXPathNsLookup_APIName returns the value or NULL if not found
Search in the namespace declaration array of the context for the given namespace name associated to the given xmlXPathNsLookup_APIParam_2
Implement the number_APIName XPath function number number
xmlXPathNumberFunction_APIParam_1 is the XPath Parser context
xmlXPathNumberFunction_APIParam_2 is the number of arguments
parse an XML namespace non qualified name
xmlXPathParseNCName_APIParam_1 is the XPath Parser context
xmlXPathParseNCName_APIName returns the namespace name or NULL
parse an XML name NameChar
xmlXPathParseName_APIParam_1 is the XPath Parser context
xmlXPathParseName_APIName returns the namespace name or NULL
= Letter | Digit | ' . '
| ' - ' | '_' | CombiningChar | Extender
= * NCNameChar
= Letter | Digit | ' . '
Check error with #xmlXPathCheckError
xmlXPathPopBoolean_APIParam_1 is an XPath parser context
xmlXPathPopBoolean_APIName returns the boolean
handling conversion
Pops a boolean from the stack
Check error with #xmlXPathCheckError
xmlXPathPopExternal_APIParam_1 is an XPath parser context
xmlXPathPopExternal_APIName returns the object
handling conversion
Pops an external object from the stack
Check error with #xmlXPathCheckError
xmlXPathPopNodeSet_APIParam_1 is an XPath parser context
xmlXPathPopNodeSet_APIName returns the node-set
| ' - ' | '_' | '
handling conversion
Pops a node-set from the stack
' | CombiningChar | Extender Name
Check error with #xmlXPathCheckError
= *
xmlXPathPopNumber_APIParam_1 is an XPath parser context
xmlXPathPopNumber_APIName returns the number
handling conversion
Pops a number from the stack
Check error with #xmlXPathCheckError
xmlXPathPopString_APIParam_1 is an XPath parser context
xmlXPathPopString_APIName returns the string
handling conversion
Pops a string from the stack
The first position is 1 , and so the last position will be equal to last_APIName
xmlXPathPositionFunction_APIParam_1 is the XPath Parser context
Implement the position_APIName XPath function number position_APIName The position function returns the position of the context node in the context node list
xmlXPathPositionFunction_APIParam_2 is the number of arguments
Registers all default XPath functions in this context
xmlXPathRegisterAllFunctions_APIParam_1 is the XPath context
Register a new function
xmlXPathRegisterFunc_APIParam_1 is the XPath context
xmlXPathRegisterFunc_APIParam_2 is the function xmlXPathRegisterFunc_APIParam_2
xmlXPathRegisterFunc_APIParam_3 is the function implementation or NULL
xmlXPathRegisterFunc_APIName returns 0 in case of success, -1 in case of error
it unregisters the function
Registers an external mechanism to do function lookup
xmlXPathRegisterFuncLookup_APIParam_1 is the XPath context
xmlXPathRegisterFuncLookup_APIParam_2 is the lookup function
xmlXPathRegisterFuncLookup_APIParam_3 is the lookup data
Register a new function
xmlXPathRegisterFuncNS_APIParam_1 is the XPath context
xmlXPathRegisterFuncNS_APIParam_2 is the function xmlXPathRegisterFuncNS_APIParam_2
xmlXPathRegisterFuncNS_APIParam_3 is the function namespace URI
xmlXPathRegisterFuncNS_APIParam_4 is the function implementation or NULL
it unregisters the function
xmlXPathRegisterFuncNS_APIName returns 0 in case of success, -1 in case of error
Register a new namespace
xmlXPathRegisterNs_APIParam_1 is the XPath context
it unregisters the namespace
xmlXPathRegisterNs_APIParam_2 is the namespace xmlXPathRegisterNs_APIParam_2 can not be NULL or empty string
xmlXPathRegisterNs_APIParam_3 is the namespace name
xmlXPathRegisterNs_APIName returns 0 in case of success, -1 in case of error
Register a new variable xmlXPathRegisterVariable_APIParam_3
xmlXPathRegisterVariable_APIParam_1 is the XPath context
xmlXPathRegisterVariable_APIParam_2 is the variable xmlXPathRegisterVariable_APIParam_2
xmlXPathRegisterVariable_APIParam_3 is the variable xmlXPathRegisterVariable_APIParam_3 or NULL
xmlXPathRegisterVariable_APIName returns 0 in case of success, -1 in case of error
it unregisters the variable
register an external mechanism to do variable lookup
xmlXPathRegisterVariableLookup_APIParam_1 is the XPath context
xmlXPathRegisterVariableLookup_APIParam_2 is the lookup function
xmlXPathRegisterVariableLookup_APIParam_3 is the lookup data
Register a new variable xmlXPathRegisterVariableNS_APIParam_4
xmlXPathRegisterVariableNS_APIParam_1 is the XPath context
xmlXPathRegisterVariableNS_APIParam_2 is the variable xmlXPathRegisterVariableNS_APIParam_2
xmlXPathRegisterVariableNS_APIParam_3 is the variable namespace URI
xmlXPathRegisterVariableNS_APIParam_4 is the variable xmlXPathRegisterVariableNS_APIParam_4 or NULL
xmlXPathRegisterVariableNS_APIName returns 0 in case of success, -1 in case of error
it unregisters the variable
Cleanup the XPath context data associated to registered functions
xmlXPathRegisteredFuncsCleanup_APIParam_1 is the XPath context
Cleanup the XPath context data associated to registered variables
xmlXPathRegisteredNsCleanup_APIParam_1 is the XPath context
Cleanup the XPath context data associated to registered variables
xmlXPathRegisteredVariablesCleanup_APIParam_1 is the XPath context
Initialize the context to the root of the document
xmlXPathRoot_APIParam_1 is the XPath Parser context
xmlXPathRoundFunction_APIParam_1 is the XPath Parser context
If there are two such numbers, the one that is closest to positive infinitybe returned by xmlXPathRoundFunction_APIName
Implement the round_APIName XPath function number round The round function returns the number that is closest to the argument and that is an integer
xmlXPathRoundFunction_APIParam_2 is the number of arguments
xmlXPathStartsWithFunction_APIParam_1 is the XPath Parser context
xmlXPathStartsWithFunction_APIParam_2 is the number of arguments
= Number ?
Implement the starts-with_APIName XPath function boolean starts-with The starts-with function returns true if the first argument string starts with the second argument string, and otherwise returns false
= Digits -LRB- ' . '
| ' . '
xmlXPathStringEvalNumber_APIParam_1 is A string to scan
xmlXPathStringEvalNumber_APIName returns the double value
Implement the string_APIName XPath function string string
If the node-set is empty, an empty stringbe returned by xmlXPathStringFunction_APIName
- The boolean false value is converted to the string false
The boolean true value is converted to the string true
xmlXPathStringFunction_APIParam_1 is the XPath Parser context
xmlXPathStringFunction_APIParam_2 is the number of arguments
The string function converts an object to a string as follows
- A node-set is converted to a string by returning the value of the node in the node-set that is first in document order
Implement the string-length_APIName XPath function number string-length
The string-length returns the number of characters in the string
xmlXPathStringLengthFunction_APIParam_1 is the XPath Parser context
xmlXPathStringLengthFunction_APIParam_2 is the number of arguments
xmlXPathSubValues_APIParam_1 is the XPath Parser context
is omitted , it defaults to a node-set with the context node as its only member
substring-after returns 04/01, and substring-after returns 99/04/01
Implement the subtraction operation on XPath objects
xmlXPathSubstringAfterFunction_APIParam_1 is the XPath Parser context
xmlXPathSubstringAfterFunction_APIParam_2 is the number of arguments
substring-before returns 1999. xmlXPathSubstringBeforeFunction_APIParam_1 is the XPath Parser context
xmlXPathSubstringBeforeFunction_APIParam_2 is the number of arguments
Implement the substring_APIName XPath function string substring
substring returns "234"
substring returns "2345"
The substring function returns the substring of the first argument starting at the position specified in the second argument with length specified in the third argument
The numeric operators convert The numeric operators operands to numbers by calling the number function
the argument defaults to the context node converted to a string , the value of the context node
If the third argument is not specified, {}_APIName returns the substring starting at the position specified in the second argument and continuing to the end of the string
xmlXPathSubstringFunction_APIParam_1 is the XPath Parser context
xmlXPathSubstringFunction_APIParam_2 is the number of arguments
xmlXPathSumFunction_APIParam_1 is the XPath Parser context
xmlXPathSumFunction_APIParam_2 is the number of arguments
Implement the sum_APIName XPath function number sum The sum function returns the sum of the values of the nodes in the argument node-set
More precisely , each character in the string is considered to have a numeric position
xmlXPathTrailing_APIParam_1 is a node-set
xmlXPathTrailing_APIParam_2 is a node-set
the position of the first character is 1 , the position of the second character is 2 and so on
Implements the EXSLT - Sets trailing_APIName function
node-set set
Implement the substring-after_APIName XPath function string substring-after The substring-after function returns the substring of the first argument string that follows the first occurrence of the second argument string in the first argument string, or the empty stringi if the first argument string does not contain the second argument string
trailing @nodes1 and @nodes2 are sorted by document order , #xmlXPathTrailingSorted is called
Implements the EXSLT - Sets trailing_APIName function
node-set set
trailing
xmlXPathTrailingSorted_APIParam_1 is a node-set , sorted by document order
Implement the substring-before_APIName XPath function string substring-before The substring-before function returns the substring of the first argument string that precedes the first occurrence of the second argument string in the first argument string, or the empty string if the first argument string does not contain the second argument string
xmlXPathTrailingSorted_APIParam_2 is a node-set , sorted by document order
translate returns the string BAr
xmlXPathTrailing_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
Digits Digits
translate
= + Compile a Number in the string In complement of the Number expression , xmlXPathStringEvalNumber_APIName also handles negative values
xmlXPathTranslateFunction_APIParam_1 is the XPath Parser context
' - ' Number
xmlXPathTranslateFunction_APIParam_2 is the number of arguments
xmlXPathTrailingSorted_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
Implement the true_APIName XPath function boolean true_APIName
xmlXPathTrueFunction_APIParam_1 is the XPath Parser context
xmlXPathTrueFunction_APIParam_2 is the number of arguments
Implement the translate_APIName XPath function string translate The translate function returns the first argument string with occurrences of characters in the second argument string replaced by the character at the corresponding position in the third argument string
xmlXPathValueFlipSign_APIParam_1 is the XPath Parser context
Search in the Variable array of the context for the given variable value
xmlXPathVariableLookup_APIParam_1 is the XPath context
xmlXPathSubstringFunction_APIParam_0 contains those characters and , , less than the sum of the second and third arguments
the comparisons and addition used for the above follow the standard IEEE 754 rules
xmlXPathVariableLookup_APIParam_2 is the variable xmlXPathVariableLookup_APIParam_2
xmlXPathVariableLookup_APIName returns a copy of the value or NULL if not found
- substring returns "234" - substring returns "12" - substring returns "" - substring returns "" - substring returns "12345" - substring returns ""
Implement the unary - operation on an XPath object The numeric operators convert The numeric operators operands to numbers by calling the number function
occurrences of that character in the first argument string are removed
A number is converted to a string as follows + NaN is converted to the string NaN + positive zero is converted to the string 0 + negative zero is converted to the string 0 + positive infinity is converted to the string Infinity + negative infinity is converted to the string - Infinity + , the number is represented in decimal form as a Number with no decimal point and no leading zeros , preceded by a minus sign if the number is negative + otherwise , the number is represented in decimal form as a Number including a decimal point with at least one digit before the decimal point and at least one digit after the decimal point , preceded by a minus sign if the number is negative
-
there must be no leading zeros before the decimal point apart possibly from the one required digit immediately before the decimal point
beyond the one required digit after the decimal point there must be as many , but only as many , more digits as are needed to uniquely distinguish the number from all other IEEE 754 numeric values
Search in the Variable array of the context for the given variable value
xmlXPathVariableLookupNS_APIParam_1 is the XPath context
xmlXPathVariableLookupNS_APIParam_2 is the variable xmlXPathVariableLookupNS_APIParam_2
xmlXPathVariableLookupNS_APIParam_3 is the variable namespace URI
xmlXPathVariableLookupNS_APIName returns the a copy of the value or NULL if not found
Wraps a string into an XPath object
xmlXPathWrapCString_APIParam_1 is the char * value
xmlXPathWrapCString_APIName returns the newly created object
Wraps the @val data into an XPath object
xmlXPathWrapExternal_APIParam_1 is the user data
xmlXPathWrapExternal_APIName returns the newly created object
Wrap the Nodeset @val in a new xmlXPathObjectPtr
xmlXPathWrapNodeSet_APIParam_1 is the NodePtr value
xmlXPathWrapNodeSet_APIName returns the newly created object
Wraps the @val string into an XPath object
xmlXPathWrapString_APIParam_1 is the xmlChar * value
xmlXPathWrapString_APIName returns the newly created object
Formats an error message
xmlXPatherror_APIParam_1 is the XPath Parser context
xmlXPatherror_APIParam_2 is the xmlXPatherror_APIParam_2 name
xmlXPatherror_APIParam_3 is the xmlXPatherror_APIParam_3 number
xmlXPatherror_APIParam_4 is the error number
Daniel Veillard
Free up the memory allocated by @comp
xmlFreePattern_APIParam_1 is an XSLT comp
Free up the memory allocated by all the elements of @comp
xmlFreePatternList_APIParam_1 is an XSLT xmlFreePatternList_APIParam_1 list
Free the xmlFreeStreamCtxt_APIParam_1 context
xmlFreeStreamCtxt_APIParam_1 is the xmlFreeStreamCtxt_APIParam_1 context
xmlPatternFromRoot_APIParam_1 is the precompiled pattern
xmlPatternFromRoot_APIName returns 1 if true, 0 if false and -1 in case of error
Get a streaming context for that pattern Use xmlFreeStreamCtxt to free the context
xmlPatternGetStreamCtxt_APIParam_1 is the precompiled pattern
xmlPatternGetStreamCtxt_APIName returns a pointer to the context or NULL in case of failure
Check
Test whether the xmlPatternMatch_APIParam_2 matches the pattern
xmlPatternMatch_APIParam_1 is the precompiled pattern
xmlPatternMatch_APIParam_2 is a xmlPatternMatch_APIParam_2
Check the maximum depth reachable by a pattern
xmlPatternMatch_APIName returns 1 if it matches, 0 if it does not and -1 in case of failure
xmlPatternMaxDepth_APIParam_1 is the precompiled pattern
are part of the set
xmlPatternMaxDepth_APIName returns -2 if no limit , otherwise the depth, and -1 in case of error
Check the minimum depth reachable by a pattern , 0 mean the / or
xmlPatternMinDepth_APIParam_1 is the precompiled pattern
xmlPatternMinDepth_APIName returns -1 in case of error otherwise the depth
xmlPatternGetStreamCtxt_APIName should work
xmlPatternStreamable_APIParam_1 is the precompiled pattern
Compile a xmlPatterncompile_APIParam_1
xmlPatternStreamable_APIName returns 1 if streamable, 0 if not and -1 in case of error
Check
xmlPatterncompile_APIParam_1 is the xmlPatterncompile_APIParam_1 to compile
xmlPatterncompile_APIParam_2 is an optional dictionary for interned strings
xmlPatterncompile_APIParam_3 is compilation xmlPatterncompile_APIParam_3 , see xmlPatternFlags
xmlPatterncompile_APIParam_4 is the prefix definitions , array of or NULL
xmlPatterncompile_APIName returns the compiled form of the xmlPatterncompile_APIParam_1 or NULL in case of error
push one level from the xmlStreamPop_APIParam_1
xmlStreamPop_APIParam_1 is the xmlStreamPop_APIParam_1 context
xmlStreamPop_APIName returns -1 in case of error, 0 otherwise
Push new data onto the xmlStreamPush_APIParam_1
the root of the document
This can also act as a reset
xmlStreamPush_APIParam_1 is the xmlStreamPush_APIParam_1 context
Both @name and @ns being NULL means the / i.e
xmlStreamPush_APIParam_2 is the current xmlStreamPush_APIParam_2
xmlStreamPush_APIParam_3 is the namespace xmlStreamPush_APIParam_2
strings for xmlStreamPush_APIParam_2 and xmlStreamPush_APIParam_3 will be expected to come from the dictionary
Push new attribute data onto the xmlStreamPushAttr_APIParam_1
xmlStreamPush_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPush_APIParam_1 is a match and 0 otherwise
Otherwise the function will act
the root of the document
This can also act as a reset
xmlStreamPushAttr_APIParam_1 is the xmlStreamPushAttr_APIParam_1 context
Both @name and @ns being NULL means the / i.e
xmlStreamPushAttr_APIParam_2 is the current xmlStreamPushAttr_APIParam_2
xmlStreamPushAttr_APIParam_3 is the namespace xmlStreamPushAttr_APIParam_2
strings for xmlStreamPushAttr_APIParam_2 and xmlStreamPushAttr_APIParam_3 will be expected to come from the dictionary
Push new data onto the xmlStreamPushNode_APIParam_1
xmlStreamPushAttr_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushAttr_APIParam_1 is a match and 0 otherwise
Otherwise the function will act
the root of the document
This can also act as a reset
xmlStreamPushNode_APIParam_1 is the xmlStreamPushNode_APIParam_1 context
Both @name and @ns being NULL means the / i.e
xmlStreamPushNode_APIParam_2 is the current xmlStreamPushNode_APIParam_2
Different from xmlStreamPush_APIName xmlStreamPushNode_APIName can be fed with nodes of type
xmlStreamPushNode_APIParam_3 is the namespace xmlStreamPushNode_APIParam_2
element - , attribute - , text - , cdata-section - , comment - and processing-instruction-node
xmlStreamPushNode_APIParam_4 is the type of the node being pushed
xmlStreamPushNode_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushNode_APIParam_1 is a match and 0 otherwise
strings for xmlStreamPushNode_APIParam_2 and xmlStreamPushNode_APIParam_3 will be expected to come from the dictionary
xmlStreamWantsAnyNode_APIParam_1 is the stream context
-1 on API errors
xmlStreamWantsAnyNode_APIName returns 1 in case of need of nodes of the above described types, 0 otherwise
Daniel Veillard
element-nodes and attribute-nodes need to be pushed
This is the prototype for a extended link detection callback
xlinkExtendedLinkFunk_APIParam_1 is user data pointer
Query
xlinkExtendedLinkFunk_APIParam_2 is the xlinkExtendedLinkFunk_APIParam_2 carrying the link
xlinkExtendedLinkFunk_APIParam_3 is the number of locators detected on the link
xlinkExtendedLinkFunk_APIParam_4 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_4
xlinkExtendedLinkFunk_APIParam_5 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_5
xlinkExtendedLinkFunk_APIParam_6 is the number of arcs detected on the link
xlinkExtendedLinkFunk_APIParam_7 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of source xlinkExtendedLinkFunk_APIParam_5 found on the arcs
xlinkExtendedLinkFunk_APIParam_8 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of target xlinkExtendedLinkFunk_APIParam_5 found on the arcs
xlinkExtendedLinkFunk_APIParam_9 is array of values for the xlinkExtendedLinkFunk_APIParam_9 attributes found on the arcs
xlinkExtendedLinkFunk_APIParam_10 is array of values for the xlinkExtendedLinkFunk_APIParam_10 attributes found on the arcs
xlinkExtendedLinkFunk_APIParam_11 is the number of xlinkExtendedLinkFunk_APIParam_12 detected on the link
xlinkExtendedLinkFunk_APIParam_12 is
xlinkExtendedLinkFunk_APIParam_13 is array of xmllang values for the titles
This is the prototype for a extended link set detection callback
xlinkExtendedLinkSetFunk_APIParam_1 is user data pointer
xlinkExtendedLinkSetFunk_APIParam_2 is the xlinkExtendedLinkSetFunk_APIParam_2 carrying the link
xlinkExtendedLinkSetFunk_APIParam_3 is the number of locators detected on the link
xlinkExtendedLinkSetFunk_APIParam_4 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_4
xlinkExtendedLinkSetFunk_APIParam_5 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_5
xlinkExtendedLinkSetFunk_APIParam_6 is the number of xlinkExtendedLinkSetFunk_APIParam_7 detected on the link
xlinkExtendedLinkSetFunk_APIParam_7 is
xlinkExtendedLinkSetFunk_APIParam_8 is array of xmllang values for the titles
Get the default xlink detection routine
xlinkGetDefaultDetect_APIName returns the current function or NULL
Get the default xlink handler
xlinkGetDefaultHandler_APIName returns the current xlinkHandlerPtr value
Check whether the given xlinkIsLink_APIParam_2 carries the attributes needed to be a link element HTML DtDs -RRB-
xlinkIsLink_APIParam_1 is the document containing the xlinkIsLink_APIParam_2
xlinkIsLink_APIParam_2 is the xlinkIsLink_APIParam_2 pointer itself
This routine do not try to do full checking of the link validity but tries to detect and return the appropriate link type
xlinkIsLink_APIName returns the xlinkType of the xlinkIsLink_APIParam_2 (XLINK_TYPE_NONE if there is no link detected
This is the prototype for the link detection routine
It calls the default link detection callbacks upon link detection
xlinkNodeDetectFunc_APIParam_1 is user data pointer
xlinkNodeDetectFunc_APIParam_2 is the xlinkNodeDetectFunc_APIParam_2 to check
Set the default xlink detection routine
xlinkSetDefaultDetect_APIParam_1 is pointer to the new detection routine
Set the default xlink handlers
xlinkSetDefaultHandler_APIParam_1 is the new value for the xlink xlinkSetDefaultHandler_APIParam_1 block
This is the prototype for a simple link detection callback
xlinkSimpleLinkFunk_APIParam_1 is user data pointer
xlinkSimpleLinkFunk_APIParam_2 is the xlinkSimpleLinkFunk_APIParam_2 carrying the link
xlinkSimpleLinkFunk_APIParam_3 is the target of the link
xlinkSimpleLinkFunk_APIParam_4 is the xlinkSimpleLinkFunk_APIParam_4 string
xlinkSimpleLinkFunk_APIParam_5 is the link xlinkSimpleLinkFunk_APIParam_5
Daniel Veillard
Initialize the default SAX handler
Initialize the default SAX handler
Initialize the default SAX2 handler
An attribute definition has been parsed
xmlSAX2AttributeDecl_APIParam_1 is the user data
xmlSAX2AttributeDecl_APIParam_2 is the name of the element
xmlSAX2AttributeDecl_APIParam_3 is the attribute name
xmlSAX2AttributeDecl_APIParam_4 is the attribute xmlSAX2AttributeDecl_APIParam_4
xmlSAX2AttributeDecl_APIParam_5 is the xmlSAX2AttributeDecl_APIParam_4 of default value
xmlSAX2AttributeDecl_APIParam_6 is the attribute default value
xmlSAX2AttributeDecl_APIParam_7 is the xmlSAX2AttributeDecl_APIParam_7 of enumerated value set
xmlSAX2CDataBlock_APIParam_1 is the user data
xmlSAX2CDataBlock_APIParam_2 is The pcdata content
xmlSAX2CDataBlock_APIParam_3 is the block length
receiving some chars from the parser
called
xmlSAX2Characters_APIParam_1 is the user data
xmlSAX2Characters_APIParam_2 is a xmlChar string
xmlSAX2Characters_APIParam_3 is the number of xmlChar
A xmlSAX2Comment_APIName has been parsed
xmlSAX2Comment_APIParam_1 is the user data
xmlSAX2Comment_APIParam_2 is the xmlSAX2Comment_APIName content
An element definition has been parsed
xmlSAX2ElementDecl_APIParam_1 is the user data
xmlSAX2ElementDecl_APIParam_2 is the element xmlSAX2ElementDecl_APIParam_2
xmlSAX2ElementDecl_APIParam_3 is the element xmlSAX2ElementDecl_APIParam_3
xmlSAX2ElementDecl_APIParam_4 is the element value tree
xmlSAX2EndDocument_APIParam_1 is the user data -LRB- XML parser context
xmlSAX2EndElement_APIParam_1 is the user data
xmlSAX2EndElement_APIParam_2 is The element name
called
It provides the namespace informations for the element
called
xmlSAX2EndElementNs_APIParam_1 is the user data
xmlSAX2EndElementNs_APIParam_2 is the local name of the element
SAX2 callback
An entity definition has been parsed
xmlSAX2EntityDecl_APIParam_1 is the user data
xmlSAX2EntityDecl_APIParam_2 is the entity xmlSAX2EntityDecl_APIParam_2
xmlSAX2EndElementNs_APIParam_3 is the element namespace xmlSAX2EndElementNs_APIParam_3
xmlSAX2EntityDecl_APIParam_3 is the entity xmlSAX2EntityDecl_APIParam_3
xmlSAX2EndElementNs_APIParam_4 is the element namespace name
xmlSAX2EntityDecl_APIParam_4 is The public ID of the entity
xmlSAX2EntityDecl_APIParam_5 is The system ID of the entity
xmlSAX2EntityDecl_APIParam_6 is the entity value -LRB- without processing
Callback on external subset declaration
xmlSAX2ExternalSubset_APIParam_1 is the user data
xmlSAX2ExternalSubset_APIParam_2 is the root element xmlSAX2ExternalSubset_APIParam_2
xmlSAX2ExternalSubset_APIParam_3 is the external ID
filename or URL
xmlSAX2ExternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g
Provide the column number of the current parsing point
xmlSAX2GetColumnNumber_APIParam_1 is the user data
xmlSAX2GetColumnNumber_APIName returns an int
Get an entity by xmlSAX2GetEntity_APIParam_2
xmlSAX2GetEntity_APIParam_1 is the user data
xmlSAX2GetEntity_APIParam_2 is The entity xmlSAX2GetEntity_APIParam_2
xmlSAX2GetEntity_APIName returns the xmlEntityPtr if found
Provide the line number of the current parsing point
xmlSAX2GetLineNumber_APIParam_1 is the user data
xmlSAX2GetLineNumber_APIName returns an int
Get a parameter entity by xmlSAX2GetParameterEntity_APIParam_2
xmlSAX2GetParameterEntity_APIParam_1 is the user data
xmlSAX2GetParameterEntity_APIParam_2 is The entity xmlSAX2GetParameterEntity_APIParam_2
xmlSAX2GetParameterEntity_APIName returns the xmlEntityPtr if found
Provides the public ID e.g
xmlSAX2GetPublicId_APIParam_1 is the user data
xmlSAX2GetPublicId_APIName returns a xmlChar
Provides the system ID , basically URL or filename e.g
xmlSAX2GetSystemId_APIParam_1 is the user data
xmlSAX2GetSystemId_APIName returns a xmlChar
Does this document has an external subset
xmlSAX2HasExternalSubset_APIParam_1 is the user data
xmlSAX2HasExternalSubset_APIName returns 1 if true
Does this document has an internal subset
'' - / / SGMLSOURCE / / DTD DEMO / / EN ''
xmlSAX2HasInternalSubset_APIParam_1 is the user data
xmlSAX2HasInternalSubset_APIName returns 1 if true
receiving some ignorable whitespaces from the parser
by default the DOM building will use xmlSAX2Characters
xmlSAX2IgnorableWhitespace_APIParam_1 is the user data
xmlSAX2IgnorableWhitespace_APIParam_2 is a xmlChar string
xmlSAX2IgnorableWhitespace_APIParam_3 is the number of xmlChar
Initialize the default XML SAX2 handler
xmlSAX2InitDefaultSAXHandler_APIParam_1 is the SAX handler
Initialize the default DocBook SAX2 handler
xmlSAX2InitDocbDefaultSAXHandler_APIParam_1 is the SAX handler
Initialize the default HTML SAX2 handler
xmlSAX2InitHtmlDefaultSAXHandler_APIParam_1 is the SAX handler
xmlSAX2InitDefaultSAXHandler_APIParam_2 is flag
Callback on internal subset declaration
xmlSAX2InternalSubset_APIParam_1 is the user data
xmlSAX2InternalSubset_APIParam_2 is the root element xmlSAX2InternalSubset_APIParam_2
xmlSAX2InternalSubset_APIParam_3 is the external ID
filename or URL
xmlSAX2InternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g
Is this document tagged standalone ?
xmlSAX2IsStandalone_APIParam_1 is the user data
xmlSAX2IsStandalone_APIName returns 1 if true
xmlSAX2NotationDecl_APIParam_1 is the user data
xmlSAX2NotationDecl_APIParam_2 is The xmlSAX2NotationDecl_APIParam_2 of the notation
xmlSAX2NotationDecl_APIParam_3 is The public ID of the entity
xmlSAX2NotationDecl_APIParam_4 is The system ID of the entity
What to do

A processing instruction has been parsed
xmlSAX2ProcessingInstruction_APIParam_1 is the user xmlSAX2ProcessingInstruction_APIParam_3
xmlSAX2ProcessingInstruction_APIParam_2 is the xmlSAX2ProcessingInstruction_APIParam_2 name
xmlSAX2ProcessingInstruction_APIParam_3 is the PI data
xmlSAX2Reference_APIParam_1 is the user data
xmlSAX2Reference_APIParam_2 is The entity name
xmlSAX2ResolveEntity_APIParam_1 is the user data
called
xmlSAX2ResolveEntity_APIParam_2 is The public ID of the entity
xmlSAX2ResolveEntity_APIParam_3 is The system ID of the entity
xmlSAX2ResolveEntity_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour
xmlSAX2SetDocumentLocator_APIParam_1 is the user data
xmlSAX2SetDocumentLocator_APIParam_2 is A SAX Locator
The entity loader , to control the loading of external entities , the application can either
Receive the document locator at startup , actually xmlDefaultSAXLocator Everything is available on the context , so this is useless in our case
xmlSAX2StartDocument_APIParam_1 is the user data -LRB- XML parser context
xmlSAX2StartElement_APIParam_1 is the user data
- override this xmlSAX2ResolveEntity_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine
xmlSAX2StartElement_APIParam_2 is The element name , including namespace prefix
called
xmlSAX2StartElement_APIParam_3 is An array of name/value attributes pairs , NULL terminated
called
xmlSAX2StartElementNs_APIParam_1 is the user data
xmlSAX2StartElementNs_APIParam_2 is the local name of the element
It provides the namespace informations for the element , as well as the new namespace declarations on the element
SAX2 callback
xmlSAX2StartElementNs_APIParam_5 is number of namespace definitions on that node
xmlSAX2StartElementNs_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions
xmlSAX2StartElementNs_APIParam_3 is the element namespace xmlSAX2StartElementNs_APIParam_3
xmlSAX2StartElementNs_APIParam_7 is the number of xmlSAX2StartElementNs_APIParam_9 on that node
xmlSAX2StartElementNs_APIParam_4 is the element namespace name
xmlSAX2StartElementNs_APIParam_8 is the number of defaulted xmlSAX2StartElementNs_APIParam_9
xmlSAX2StartElementNs_APIParam_9 is pointer to the array of attribute values
xmlSAX2UnparsedEntityDecl_APIParam_1 is the user data
xmlSAX2UnparsedEntityDecl_APIParam_2 is The xmlSAX2UnparsedEntityDecl_APIParam_2 of the entity
xmlSAX2UnparsedEntityDecl_APIParam_3 is The public ID of the entity
xmlSAX2UnparsedEntityDecl_APIParam_4 is The system ID of the entity
What to do

xmlSAX2UnparsedEntityDecl_APIParam_5 is the xmlSAX2UnparsedEntityDecl_APIParam_2 of the notation
Set the default xmlSAXDefaultVersion_APIParam_1 of SAX used globally by the library
Initialize the default XML SAX handler according to the xmlSAXVersion_APIParam_2
xmlSAXDefaultVersion_APIParam_1 is the xmlSAXDefaultVersion_APIParam_1, 1 or 2. xmlSAXDefaultVersion_APIName returns the previous value in case of success and -1 in case of error
Note that it is generally a better coding style to use xmlSAXVersion_APIName to set up the xmlSAXDefaultVersion_APIParam_1 explicitly for a given parsing context
xmlSAXVersion_APIParam_1 is the SAX handler
By default , the default is set to 2
Daniel Veillard
xmlSAXVersion_APIParam_2 is the xmlSAXVersion_APIParam_2, 1 or 2. xmlSAXVersion_APIName returns 0 in case of success and -1 in case of error
Free up all the memory allocated by the library for its own use
This should not be called by user level code
Signature for a free_APIName implementation
xmlFreeFunc_APIParam_1 is an already allocated block of memory
of areas useful for garbage collected memory allocators
xmlGcMemGet_APIParam_1 is place to save the free_APIName function in use
xmlGcMemGet_APIParam_2 is place to save the malloc_APIName function in use
xmlGcMemGet_APIParam_3 is place to save the atomic malloc_APIName function in use
Provides the memory access functions set currently in use The xmlGcMemGet_APIParam_3 is specialized for atomic block allocations -LRB- i.e
xmlGcMemGet_APIParam_4 is place to save the realloc_APIName function in use
xmlGcMemGet_APIParam_5 is place to save the strdup_APIName function in use
xmlGcMemGet_APIName returns 0 on success
xmlGcMemSetup_APIParam_1 is the free_APIName function to use
Override the default memory access functions with a new set This has to be called before any other libxml routines !
xmlGcMemSetup_APIParam_2 is the malloc_APIName function to use
The xmlGcMemSetup_APIParam_3 is specialized for atomic block allocations -LRB- i.e
Should this be blocked
of areas useful for garbage collected memory allocators ?
xmlGcMemSetup_APIParam_3 is the malloc_APIName function to use for atomic allocations
xmlGcMemSetup_APIParam_4 is the realloc_APIName function to use
xmlGcMemSetup_APIParam_5 is the strdup_APIName function to use
xmlGcMemSetup_APIName returns 0 on success
Initialize the memory layer
xmlInitMemory_APIName returns 0 on success
a malloc_APIName equivalent , with logging of the allocation info
xmlMallocAtomicLoc_APIParam_1 is an unsigned int specifying the xmlMallocAtomicLoc_APIParam_1 in byte to allocate
xmlMallocAtomicLoc_APIParam_2 is the xmlMallocAtomicLoc_APIParam_2 name or NULL
xmlMallocAtomicLoc_APIParam_3 is the xmlMallocAtomicLoc_APIParam_3 number
xmlMallocAtomicLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
Signature for a malloc_APIName implementation
xmlMallocFunc_APIParam_1 is the xmlMallocFunc_APIParam_1 requested in bytes
xmlMallocFunc_APIName returns a pointer to the newly allocated block or NULL in case of error
a malloc_APIName equivalent , with logging of the allocation info
xmlMallocLoc_APIParam_1 is an int specifying the xmlMallocLoc_APIParam_1 in byte to allocate
xmlMallocLoc_APIParam_2 is the xmlMallocLoc_APIParam_2 name or NULL
xmlMallocLoc_APIParam_3 is the xmlMallocLoc_APIParam_3 number
Provides the number of memory areas currently allocated
xmlMallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMemBlocks_APIName returns an int representing the number of blocks
show in-extenso the memory blocks allocated
xmlMemDisplayLast_APIParam_2 is the amount of memory to dump
the last xmlMemDisplayLast_APIParam_2 of memory allocated and not freed , useful for dumping the memory left allocated between two places at runtime
a free_APIName equivalent , with error checking
xmlMemFree_APIParam_1 is the memory block pointer
xmlMemDisplay_APIParam_1 is a FILE descriptor used as the output file
Provides the memory access functions set currently in use
xmlMemGet_APIParam_1 is place to save the free_APIName function in use
xmlMemGet_APIParam_2 is place to save the malloc_APIName function in use
xmlMemDisplayLast_APIParam_1 is a FILE descriptor used as the output file
xmlMemGet_APIParam_3 is place to save the realloc_APIName function in use
xmlMemGet_APIName returns 0 on success
xmlMemGet_APIParam_4 is place to save the strdup_APIName function in use
a malloc_APIName equivalent , with logging of the allocation info
xmlMemMalloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMemMalloc_APIParam_1 is an int specifying the xmlMemMalloc_APIParam_1 in byte to allocate
a realloc_APIName equivalent , with logging of the allocation info
xmlMemRealloc_APIParam_1 is the initial memory block pointer
xmlMemRealloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMemRealloc_APIParam_2 is an int specifying the xmlMemRealloc_APIParam_2 in byte to allocate
xmlMemSetup_APIParam_1 is the free_APIName function to use
Override the default memory access functions with a new set This has to be called before any other libxml routines !
xmlMemSetup_APIParam_2 is the malloc_APIName function to use
xmlMemSetup_APIParam_3 is the realloc_APIName function to use
Should this be blocked ?
xmlMemSetup_APIParam_4 is the strdup_APIName function to use
xmlMemSetup_APIName returns 0 on success
xmlMemShow_APIParam_1 is a FILE descriptor used as the output file
xmlMemShow_APIParam_2 is number of entries to dump
show a show display of the memory allocated , and dump the @nr last allocated areas which were not freed
a strdup_APIName equivalent , with logging of the allocation info
xmlMemStrdupLoc_APIParam_1 is the initial string pointer
xmlMemStrdupLoc_APIParam_2 is the xmlMemStrdupLoc_APIParam_2 name or NULL
xmlMemStrdupLoc_APIParam_3 is the xmlMemStrdupLoc_APIParam_3 number
xmlMemStrdupLoc_APIName returns a pointer to the new string or NULL if allocation error occurred
Provides the amount of memory currently allocated
xmlMemUsed_APIName returns an int representing the amount of memory allocated
Dump in-extenso the memory blocks allocated to the file
a strdup_APIName equivalent , with logging of the allocation info
xmlMemoryStrdup_APIParam_1 is the initial string pointer
xmlMemoryStrdup_APIName returns a pointer to the new string or NULL if allocation error occurred
Signature for a realloc_APIName implementation
xmlReallocFunc_APIParam_1 is an already allocated block of memory
xmlReallocFunc_APIParam_2 is the new xmlReallocFunc_APIParam_2 requested in bytes
xmlReallocFunc_APIName returns a pointer to the newly reallocated block or NULL in case of error
a realloc_APIName equivalent , with logging of the allocation info
xmlReallocLoc_APIParam_1 is the initial memory block pointer
xmlReallocLoc_APIParam_2 is an int specifying the xmlReallocLoc_APIParam_2 in byte to allocate
xmlReallocLoc_APIParam_3 is the xmlReallocLoc_APIParam_3 name or NULL
xmlReallocLoc_APIParam_4 is the xmlReallocLoc_APIParam_4 number
xmlReallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
Signature for an strdup_APIName implementation
xmlStrdupFunc_APIParam_1 is a zero terminated string
xmlStrdupFunc_APIName returns the copy of the string or NULL in case of error
Daniel Veillard
Convenient way to turn bool into text
xmlBoolToText_APIParam_1 is a bool to turn into text
xmlBoolToText_APIName returns a pointer to either "True" or "False
Check the document for potential content problems , and xmlDebugCheckDocument_APIParam_1 the errors to @output
xmlDebugCheckDocument_APIParam_1 is the FILE * for the xmlDebugCheckDocument_APIParam_1
xmlDebugCheckDocument_APIParam_2 is the document
xmlDebugCheckDocument_APIName returns the number of errors found
Dumps debug information for the attribute
xmlDebugDumpAttr_APIParam_1 is the FILE * for the xmlDebugDumpAttr_APIParam_1
xmlDebugDumpAttr_APIParam_2 is the attribute
xmlDebugDumpAttr_APIParam_3 is the indentation level
Dumps debug information for the attribute list
xmlDebugDumpAttrList_APIParam_1 is the FILE * for the xmlDebugDumpAttrList_APIParam_1
xmlDebugDumpAttrList_APIParam_2 is the attribute list
xmlDebugDumpAttrList_APIParam_3 is the indentation level
Dumps debug information for the DTD
xmlDebugDumpDTD_APIParam_1 is the FILE * for the xmlDebugDumpDTD_APIParam_1
xmlDebugDumpDTD_APIParam_2 is the DTD
Dumps debug information for the document , it is recursive
xmlDebugDumpDocument_APIParam_1 is the FILE * for the xmlDebugDumpDocument_APIParam_1
xmlDebugDumpDocument_APIParam_2 is the document
Dumps debug information cncerning the document , not recursive
xmlDebugDumpDocumentHead_APIParam_1 is the FILE * for the xmlDebugDumpDocumentHead_APIParam_1
xmlDebugDumpDocumentHead_APIParam_2 is the document
Dumps debug information for all the entities in use by the document
xmlDebugDumpEntities_APIParam_1 is the FILE * for the xmlDebugDumpEntities_APIParam_1
xmlDebugDumpEntities_APIParam_2 is the document
Dumps debug information for the element xmlDebugDumpNode_APIParam_2 , it is recursive
xmlDebugDumpNode_APIParam_1 is the FILE * for the xmlDebugDumpNode_APIParam_1
xmlDebugDumpNode_APIParam_2 is the xmlDebugDumpNode_APIParam_2
xmlDebugDumpNode_APIParam_3 is the indentation level
Dumps debug information for the list of element xmlDebugDumpNodeList_APIParam_2 , it is recursive
xmlDebugDumpNodeList_APIParam_1 is the FILE * for the xmlDebugDumpNodeList_APIParam_1
xmlDebugDumpNodeList_APIParam_2 is the xmlDebugDumpNodeList_APIParam_2 list
xmlDebugDumpNodeList_APIParam_3 is the indentation level
Dumps debug information for the element xmlDebugDumpOneNode_APIParam_2 , it is not recursive
xmlDebugDumpOneNode_APIParam_1 is the FILE * for the xmlDebugDumpOneNode_APIParam_1
xmlDebugDumpOneNode_APIParam_2 is the xmlDebugDumpOneNode_APIParam_2
xmlDebugDumpOneNode_APIParam_3 is the indentation level
xmlDebugDumpString_APIParam_1 is the FILE * for the xmlDebugDumpString_APIParam_1
xmlDebugDumpString_APIParam_2 is the string
Count the children of @node
xmlLsCountNode_APIParam_1 is the xmlLsCountNode_APIParam_1 to count
xmlLsCountNode_APIName returns the number of children of @node
shorten it
Dumps informations about the string
Dump to @output the type and name of @node
xmlLsOneNode_APIParam_1 is the FILE * for the xmlLsOneNode_APIParam_1
xmlLsOneNode_APIParam_2 is the xmlLsOneNode_APIParam_2 to dump
xmlShell_APIParam_1 is the initial document
xmlShell_APIParam_2 is the xmlShell_APIParam_4 buffer
xmlShell_APIParam_3 is the line reading function
Implements the XML shell This allow to load , validate , view , modify and save a document using a environment similar to a UNIX commandline
Implements the XML shell function `` base '' dumps the current XML base of the xmlShellBase_APIParam_3
xmlShellBase_APIParam_1 is the shell context
xmlShellBase_APIParam_2 is unused
xmlShellBase_APIParam_3 is a xmlShellBase_APIParam_3
xmlShellBase_APIParam_4 is unused
xmlShell_APIParam_4 is the xmlShell_APIParam_4 FILE * , defaults to stdout
xmlShellBase_APIName returns 0
Implements the XML shell function `` cat '' dumps the serialization xmlShellCat_APIParam_3 content
xmlShellCat_APIParam_1 is the shell context
xmlShellCat_APIParam_2 is unused
xmlShellCat_APIParam_3 is a xmlShellCat_APIParam_3
xmlShellCat_APIParam_4 is unused
xmlShellCat_APIName returns 0
This is a generic signature for the XML shell functions
xmlShellCmd_APIParam_1 is a shell context
xmlShellCmd_APIParam_2 is a string argument
xmlShellCmd_APIParam_3 is a first xmlShellCmd_APIParam_3
xmlShellCmd_APIParam_4 is a second xmlShellCmd_APIParam_3
xmlShellCmd_APIName returns an int, negative returns indicating errors
Implements the XML shell function `` dir '' dumps informations about the xmlShellDir_APIParam_3
xmlShellDir_APIParam_1 is the shell context
xmlShellDir_APIParam_2 is unused
xmlShellDir_APIParam_3 is a xmlShellDir_APIParam_3
xmlShellDir_APIParam_4 is unused
xmlShellDir_APIName returns 0
xmlShellDu_APIParam_1 is the shell context
xmlShellDu_APIParam_2 is unused
xmlShellDu_APIParam_3 is a node defining a subtree
xmlShellDu_APIParam_4 is unused
xmlShellDu_APIName returns 0 or -1 in case of error
xmlShellList_APIParam_1 is the shell context
xmlShellList_APIParam_2 is unused
Implements the XML shell function `` ls '' Does an Unix like listing of the given xmlShellList_APIParam_3
xmlShellList_APIParam_3 is a xmlShellList_APIParam_3
xmlShellList_APIParam_4 is unused
xmlShellList_APIName returns 0
xmlShellLoad_APIParam_1 is the shell context
the command works on the current node
Implements the XML shell function `` du '' show the structure of the subtree under node @tree
xmlShellLoad_APIParam_2 is the file name
Implements the XML shell function `` load '' loads a new document specified by the xmlShellLoad_APIParam_2
xmlShellLoad_APIParam_3 is unused
xmlShellLoad_APIParam_4 is unused
xmlShellLoad_APIName returns 0 or -1 if loading failed
Print xmlShellPrintNode_APIParam_1 to the output FILE
xmlShellPrintNode_APIParam_1 is a non-null xmlShellPrintNode_APIParam_1 to print to the output FILE
Print the xpath error to libxml default error channel
xmlShellPrintXPathError_APIParam_1 is valid xpath error id
xmlShellPrintXPathError_APIParam_2 is the argument that cause xpath to fail
Prints result to the output FILE
xmlShellPrintXPathResult_APIParam_1 is a valid result generated by an xpath evaluation
The output is compatible with XPath commands
xmlShellPwd_APIParam_1 is the shell context
xmlShellPwd_APIParam_2 is the output xmlShellPwd_APIParam_2
xmlShellPwd_APIParam_3 is a xmlShellPwd_APIParam_3
xmlShellPwd_APIParam_4 is unused
xmlShellPwd_APIName returns 0 or -1 in case of error
This is a generic signature for the XML shell input function
xmlShellReadlineFunc_APIParam_1 is a string xmlShellReadlineFunc_APIParam_1
xmlShellReadlineFunc_APIName returns a string which will be freed by the Shell
xmlShellSave_APIParam_1 is the shell context
xmlShellSave_APIParam_2 is the file name
Implements the XML shell function `` save '' Write the current document to the xmlShellSave_APIParam_2 , or it is original name
xmlShellSave_APIParam_3 is unused
xmlShellSave_APIParam_4 is unused
xmlShellSave_APIName returns 0 or -1 in case of error
Implements the XML shell function `` pwd '' Show the full path from the root to the xmlShellPwd_APIParam_3
xmlShellValidate_APIParam_1 is the shell context
xmlShellValidate_APIParam_2 is the DTD URI
xmlShellValidate_APIParam_3 is unused
xmlShellValidate_APIParam_4 is unused
xmlShellValidate_APIName returns 0 or -1 in case of error
xmlShellWrite_APIParam_1 is the shell context
xmlShellWrite_APIParam_2 is the file name
xmlShellWrite_APIParam_3 is a xmlShellWrite_APIParam_3 in the tree
xmlShellWrite_APIParam_4 is unused
xmlShellWrite_APIName returns 0 or -1 in case of error
the validation is done against the given DTD
Implements the XML shell function `` validate '' Validate the document
Daniel Veillard
Implements the XML shell function `` write '' Write the current xmlShellWrite_APIParam_3 to the xmlShellWrite_APIParam_2 , it saves the serialization of the subtree under the @node specified
a strdup for char to xmlChar
xmlCharStrdup_APIParam_1 is the input char *
xmlCharStrdup_APIName returns a new xmlChar * or NULL
a strndup for char to xmlChar
xmlCharStrndup_APIParam_1 is the input char *
xmlCharStrndup_APIParam_2 is the xmlCharStrndup_APIParam_2 of @cur
xmlCharStrndup_APIName returns a new xmlChar * or NULL
Checks @utf for being valid UTF-8
@utf is assumed to be null-terminated
xmlCheckUTF8_APIName is not super-strict , as it will allow longer UTF-8 sequences than necessary
xmlCheckUTF8_APIParam_1 is Pointer to putative UTF-8 encoded string
xmlCheckUTF8_APIName returns value true if @utf is valid
Also note , this routine checks for the 4-byte maximum size , but does not check for 0x10ffff maximum value
Read the first UTF8 character from @utf
producing these sequences
Note that Java is capable of
xmlGetUTF8Char_APIParam_1 is a sequence of UTF-8 encoded bytes
xmlGetUTF8Char_APIParam_2 is a pointer to the minimum number of bytes present in the sequence
This is used to assure the next character is completely contained within the sequence
Should be a bit more readable and faster than xmlStrcmp_APIName
xmlStrEqual_APIParam_1 is the first xmlChar *
xmlGetUTF8Char_APIName returns the char value or -1 in case of error, and sets *len to the actual number of bytes consumed (0 in case of error
xmlStrEqual_APIParam_2 is the second xmlChar *
xmlStrEqual_APIName returns 1 if they are equal, 0 if they are different
Check have same content
Formats @msg xmlStrPrintf_APIParam_4 places result into @buf
xmlStrPrintf_APIParam_1 is xmlStrPrintf_APIParam_4 result buffer
xmlStrPrintf_APIParam_2 is xmlStrPrintf_APIParam_4 result buffer length
xmlStrPrintf_APIParam_3 is xmlStrPrintf_APIParam_4 message with printf formatting
xmlStrPrintf_APIParam_4 extra parameters xmlStrPrintf_APIParam_4 the message
xmlStrPrintf_APIName returns xmlStrPrintf_APIParam_4 number of characters written to @buf or -1 if an error occurs
xmlStrQEqual_APIParam_1 is the prefix of the QName
xmlStrQEqual_APIParam_2 is the localname of the QName
xmlStrQEqual_APIParam_3 is the second xmlChar *
xmlStrQEqual_APIName returns 1 if they are equal, 0 if they are different
Check
Formats @msg and places result into @buf
xmlStrVPrintf_APIParam_1 is the result buffer
xmlStrVPrintf_APIParam_2 is the result buffer length
xmlStrVPrintf_APIParam_3 is the message with printf formatting
xmlStrVPrintf_APIParam_4 is extra parameters for the message
xmlStrVPrintf_APIName returns the number of characters written to @buf or -1 if an error occurs
a strcasecmp for xmlChar
xmlStrcasecmp_APIParam_1 is the first xmlChar *
xmlStrcasecmp_APIParam_2 is the second xmlChar *
xmlStrcasecmp_APIName returns the integer result of the comparison
a case-ignoring strstr for xmlChar
xmlStrcasestr_APIParam_1 is the xmlChar * array
xmlStrcasestr_APIParam_2 is the xmlChar to search
xmlStrcasestr_APIName returns the xmlChar * for the first occurrence or NULL
a strcat for array of xmlChar
xmlStrcat_APIParam_1 is the original xmlChar * array
xmlStrcat_APIParam_2 is the xmlChar * array added
xmlStrcat_APIName returns a new xmlChar * containing the concatenated string
The original @cur is reallocated and should not be freed
a strchr for xmlChar
we assume a termination mark of ' 0 '
xmlStrchr_APIParam_1 is the xmlChar * array
xmlStrchr_APIParam_2 is the xmlChar to search
xmlStrchr_APIName returns the xmlChar * for the first occurrence or NULL
a strcmp for xmlChar
xmlStrcmp_APIParam_1 is the first xmlChar *
xmlStrcmp_APIParam_2 is the second xmlChar *
xmlStrcmp_APIName returns the integer result of the comparison
a strdup for array of xmlChar
xmlStrdup_APIParam_1 is the input xmlChar *
xmlStrdup_APIName returns a new xmlChar * or NULL
length of a xmlChar string
xmlStrlen_APIParam_1 is the xmlChar * array
xmlStrlen_APIName returns the number of xmlChar contained in the ARRAY
we assume a termination mark of ' 0 '
a strncasecmp for xmlChar
xmlStrncasecmp_APIParam_1 is the first xmlChar *
xmlStrncasecmp_APIParam_2 is the second xmlChar *
xmlStrncasecmp_APIParam_3 is the max comparison length
xmlStrncasecmp_APIName returns the integer result of the comparison
xmlStrncat_APIParam_1 is the original xmlChar * array
Note that if @len < 0 this is an API error and NULL will be returned
a strncat for array of xmlChar , it will extend @cur with the xmlStrncat_APIParam_3 first bytes of @add
xmlStrncat_APIParam_2 is the xmlChar * array added
xmlStrncat_APIParam_3 is the length of @add
same as xmlStrncat , but creates a new string
xmlStrncat_APIName returns a new xmlChar *, the original @cur is reallocated and should not be freed
The original two strings are not freed
xmlStrncatNew_APIParam_1 is first xmlChar string
xmlStrncatNew_APIParam_2 is second xmlChar string
xmlStrncatNew_APIParam_3 is the xmlStrncatNew_APIParam_3 of @str2 or < 0. xmlStrncatNew_APIName returns a new xmlChar * or NULL
a strncmp for xmlChar
the length will be calculated automatically
xmlStrncmp_APIParam_1 is the first xmlChar *
xmlStrncmp_APIParam_2 is the second xmlChar *
xmlStrncmp_APIParam_3 is the max comparison length
xmlStrncmp_APIName returns the integer result of the comparison
a strndup for array of xmlChar
xmlStrndup_APIParam_1 is the input xmlChar *
xmlStrndup_APIParam_2 is the xmlStrndup_APIParam_2 of @cur
xmlStrndup_APIName returns a new xmlChar * or NULL
a strstr for xmlChar
xmlStrstr_APIParam_1 is the xmlChar * array
xmlStrstr_APIParam_2 is the xmlChar to search
xmlStrstr_APIName returns the xmlChar * for the first occurrence or NULL
Extract a substring of a given string
xmlStrsub_APIParam_1 is the xmlChar * array
xmlStrsub_APIParam_2 is the index of the first char
xmlStrsub_APIParam_3 is the length of the substring
xmlStrsub_APIName returns the xmlChar * for the first occurrence or NULL
compares the two UCS4 values
xmlUTF8Charcmp_APIParam_1 is pointer to first UTF8 char
xmlUTF8Charcmp_APIParam_2 is pointer to second UTF8 char
xmlUTF8Charcmp_APIName returns result of the compare as with xmlStrncmp
calculates the internal size of a UTF8 character
xmlUTF8Size_APIParam_1 is pointer to the UTF8 character
xmlUTF8Size_APIName returns the numbers of bytes in the character, -1 on format error
xmlUTF8Strlen_APIParam_1 is a sequence of UTF-8 encoded bytes
xmlUTF8Strlen_APIName returns the number of characters in the string or -1 in case of error
compute the length of an UTF8 string , it does not do a full UTF8 checking of the content of the string
a function to provide the relative location of a UTF8 char
xmlUTF8Strloc_APIParam_1 is the input UTF8 *
xmlUTF8Strloc_APIParam_2 is the UTF8 character to be found
xmlUTF8Strloc_APIName returns the relative character position of the desired char or -1 if not found
a strndup for array of UTF8
xmlUTF8Strndup_APIParam_1 is the input UTF8 *
xmlUTF8Strndup_APIParam_2 is the xmlUTF8Strndup_APIParam_2 of @utf
xmlUTF8Strndup_APIName returns a new UTF8 * or NULL
a function to provide the equivalent of fetching a character from a string array
xmlUTF8Strpos_APIParam_1 is the input UTF8 *
xmlUTF8Strpos_APIParam_2 is the position of the desired UTF8 char
xmlUTF8Strpos_APIName returns a pointer to the UTF8 character or NULL
xmlUTF8Strsize_APIParam_1 is a sequence of UTF-8 encoded bytes
xmlUTF8Strsize_APIParam_2 is the number of characters in the array
xmlUTF8Strsize_APIName returns the storage size of the first willen' characters of ARRAY
xmlUTF8Strsub_APIParam_1 is a sequence of UTF-8 encoded bytes
Create a substring from a given UTF-8 string Note
positions are given in units of UTF-8 chars
xmlUTF8Strsub_APIParam_2 is relative pos of first char
storage size of an UTF8 string the behaviour is not guaranteed
xmlUTF8Strsub_APIParam_3 is total number to copy
xmlUTF8Strsub_APIName returns a pointer to a newly created string or NULL if any problem
Daniel Veillard
An attribute definition has been parsed
attributeDeclSAXFunc_APIParam_1 is the user data
attributeDeclSAXFunc_APIParam_2 is the name of the element
attributeDeclSAXFunc_APIParam_3 is the attribute name
attributeDeclSAXFunc_APIParam_4 is the attribute attributeDeclSAXFunc_APIParam_4
attributeDeclSAXFunc_APIParam_5 is the attributeDeclSAXFunc_APIParam_4 of default value
attributeDeclSAXFunc_APIParam_6 is the attribute default value
attributeDeclSAXFunc_APIParam_7 is the attributeDeclSAXFunc_APIParam_7 of enumerated value set
Handle an attribute that has been read by the parser
attributeSAXFunc_APIParam_1 is the user data
attributeSAXFunc_APIParam_2 is The attribute attributeSAXFunc_APIParam_2 , including namespace prefix
attributeSAXFunc_APIParam_3 is The attribute value
The default handling is to convert the attribute into an DOM subtree and past it in a new xmlAttr element added to the element
cdataBlockSAXFunc_APIParam_1 is the user data
cdataBlockSAXFunc_APIParam_2 is The pcdata content
cdataBlockSAXFunc_APIParam_3 is the block length
Receiving some chars from the parser
Called
charactersSAXFunc_APIParam_1 is the user data
charactersSAXFunc_APIParam_2 is a xmlChar string
charactersSAXFunc_APIParam_3 is the number of xmlChar
A comment has been parsed
commentSAXFunc_APIParam_1 is the user data
commentSAXFunc_APIParam_2 is the comment content
An element definition has been parsed
elementDeclSAXFunc_APIParam_1 is the user data
elementDeclSAXFunc_APIParam_2 is the element elementDeclSAXFunc_APIParam_2
elementDeclSAXFunc_APIParam_3 is the element elementDeclSAXFunc_APIParam_3
elementDeclSAXFunc_APIParam_4 is the element value tree
endDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context
It provides the namespace informations for the element
endElementNsSAX2Func_APIParam_1 is the user data
Called
endElementNsSAX2Func_APIParam_2 is the local name of the element
SAX2 callback
endElementSAXFunc_APIParam_1 is the user data
endElementSAXFunc_APIParam_2 is The element name
endElementNsSAX2Func_APIParam_3 is the element namespace endElementNsSAX2Func_APIParam_3
An entity definition has been parsed
endElementNsSAX2Func_APIParam_4 is the element namespace name
entityDeclSAXFunc_APIParam_1 is the user data
entityDeclSAXFunc_APIParam_2 is the entity entityDeclSAXFunc_APIParam_2
Called
entityDeclSAXFunc_APIParam_3 is the entity entityDeclSAXFunc_APIParam_3
entityDeclSAXFunc_APIParam_4 is The public ID of the entity
entityDeclSAXFunc_APIParam_5 is The system ID of the entity
entityDeclSAXFunc_APIParam_6 is the entity value -LRB- without processing
Display errorSAXFunc_APIParam_3 format an error messages , callback
errorSAXFunc_APIParam_1 is an errorSAXFunc_APIParam_3 parser context
errorSAXFunc_APIParam_2 is errorSAXFunc_APIParam_3 message to display/transmit errorSAXFunc_APIParam_3 extra parameters errorSAXFunc_APIParam_3 the message display
Callback on external subset declaration
externalSubsetSAXFunc_APIParam_1 is the user data
externalSubsetSAXFunc_APIParam_2 is the root element externalSubsetSAXFunc_APIParam_2
externalSubsetSAXFunc_APIParam_3 is the external ID
filename or URL
externalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g
Display fatalErrorSAXFunc_APIParam_3 format fatal error messages , callback
fatalErrorSAXFunc_APIParam_1 is an fatalErrorSAXFunc_APIParam_3 parser context
so fatalErrorSAXFunc_APIParam_3 fatalError_APIName fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 not used , error_APIName fatalErrorSAXFunc_APIParam_3 all fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 errors
fatalErrorSAXFunc_APIParam_2 is fatalErrorSAXFunc_APIParam_3 message to display/transmit fatalErrorSAXFunc_APIParam_3 extra parameters fatalErrorSAXFunc_APIParam_3 the message display
Get an entity by getEntitySAXFunc_APIParam_2
getEntitySAXFunc_APIParam_1 is the user data
getEntitySAXFunc_APIParam_2 is The entity getEntitySAXFunc_APIParam_2
getEntitySAXFunc_APIName returns the xmlEntityPtr if found
Get a parameter entity by getParameterEntitySAXFunc_APIParam_2
getParameterEntitySAXFunc_APIParam_1 is the user data
getParameterEntitySAXFunc_APIParam_2 is The entity getParameterEntitySAXFunc_APIParam_2
getParameterEntitySAXFunc_APIName returns the xmlEntityPtr if found
Does this document has an external subset ?
hasExternalSubsetSAXFunc_APIParam_1 is the user data
hasExternalSubsetSAXFunc_APIName returns 1 if true
Does this document has an internal subset
hasInternalSubsetSAXFunc_APIParam_1 is the user data
hasInternalSubsetSAXFunc_APIName returns 1 if true
Receiving some ignorable whitespaces from the parser
by default the DOM building will use characters
ignorableWhitespaceSAXFunc_APIParam_1 is the user data
ignorableWhitespaceSAXFunc_APIParam_2 is a xmlChar string
ignorableWhitespaceSAXFunc_APIParam_3 is the number of xmlChar
Callback on internal subset declaration
internalSubsetSAXFunc_APIParam_1 is the user data
internalSubsetSAXFunc_APIParam_2 is the root element internalSubsetSAXFunc_APIParam_2
internalSubsetSAXFunc_APIParam_3 is the external ID
filename or URL
internalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g
Is this document tagged standalone ?
isStandaloneSAXFunc_APIParam_1 is the user data
isStandaloneSAXFunc_APIName returns 1 if true
notationDeclSAXFunc_APIParam_1 is the user data
notationDeclSAXFunc_APIParam_2 is The notationDeclSAXFunc_APIParam_2 of the notation
notationDeclSAXFunc_APIParam_3 is The public ID of the entity
notationDeclSAXFunc_APIParam_4 is The system ID of the entity
A processing instruction has been parsed
What to do

processingInstructionSAXFunc_APIParam_1 is the user processingInstructionSAXFunc_APIParam_3
processingInstructionSAXFunc_APIParam_2 is the processingInstructionSAXFunc_APIParam_2 name
processingInstructionSAXFunc_APIParam_3 is the PI data
referenceSAXFunc_APIParam_1 is the user data
referenceSAXFunc_APIParam_2 is The entity name
resolveEntitySAXFunc_APIParam_1 is the user data
resolveEntitySAXFunc_APIParam_2 is The public ID of the entity
Called
resolveEntitySAXFunc_APIParam_3 is The system ID of the entity
resolveEntitySAXFunc_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour
Receive the document locator at startup , actually xmlDefaultSAXLocator
Everything is available on the context , so this is useless in our case
setDocumentLocatorSAXFunc_APIParam_1 is the user data
setDocumentLocatorSAXFunc_APIParam_2 is A SAX Locator
The entity loader , to control the loading of external entities , the application can either
startDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context
startElementNsSAX2Func_APIParam_1 is the user data
Called
- override this resolveEntity_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine
startElementNsSAX2Func_APIParam_2 is the local name of the element
It provides the namespace informations for the element , as well as the new namespace declarations on the element
SAX2 callback
startElementNsSAX2Func_APIParam_5 is number of namespace definitions on that node
startElementNsSAX2Func_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions
startElementNsSAX2Func_APIParam_3 is the element namespace startElementNsSAX2Func_APIParam_3
startElementNsSAX2Func_APIParam_7 is the number of startElementNsSAX2Func_APIParam_9 on that node
startElementNsSAX2Func_APIParam_8 is the number of defaulted startElementNsSAX2Func_APIParam_9
startElementNsSAX2Func_APIParam_4 is the element namespace name
The defaulted ones are at the end of the array
startElementNsSAX2Func_APIParam_9 is pointer to the array of attribute values
startElementSAXFunc_APIParam_1 is the user data
startElementSAXFunc_APIParam_2 is The element startElementSAXFunc_APIParam_2 , including namespace prefix
startElementSAXFunc_APIParam_3 is An array of name/value attributes pairs , NULL terminated
Called
unparsedEntityDeclSAXFunc_APIParam_1 is the user data
unparsedEntityDeclSAXFunc_APIParam_2 is The unparsedEntityDeclSAXFunc_APIParam_2 of the entity
unparsedEntityDeclSAXFunc_APIParam_3 is The public ID of the entity
unparsedEntityDeclSAXFunc_APIParam_4 is The system ID of the entity
What to do

unparsedEntityDeclSAXFunc_APIParam_5 is the unparsedEntityDeclSAXFunc_APIParam_2 of the notation
Display warningSAXFunc_APIParam_3 format a warning messages , callback
warningSAXFunc_APIParam_1 is an warningSAXFunc_APIParam_3 parser context
warningSAXFunc_APIParam_2 is warningSAXFunc_APIParam_3 message to display/transmit warningSAXFunc_APIParam_3 extra parameters warningSAXFunc_APIParam_3 the message display
xmlByteConsumed_APIParam_1 is an XML parser context
xmlByteConsumed_APIName provides the current index of the parser relative to the start of the current entity
xmlCleanupParser_APIName name is somewhat misleading
xmlByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed
It does not clean up parser state , it cleans up memory allocated by the library itself
It is a cleanup function for the XML library
It tries to reclaim all related global memory allocated for the library processing
xmlByteConsumed_APIName is computed in bytes from the beginning starting at zero and finishing at the size in byte of the file
It does not deallocate any document related memory
The function is of constant cost
-- Clear node info sequence
xmlClearNodeInfoSeq_APIParam_1 is a node info sequence pointer
In case of doubt abstain from calling xmlCleanupParser_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind
One should call xmlCleanupParser_APIName only
Clear and reinitialize a parser context
may crash the application if another thread or a plugin is still using libxml2
it is sometimes very hard to guess
some libraries or plugins may use it without notice
xmlClearParserCtxt_APIParam_1 is an XML parser context
Creates a parser context for an XML in-memory document
xmlCreateDocParserCtxt_APIParam_1 is a pointer to an array of xmlChar
xmlCreateDocParserCtxt_APIName returns the new parser context or NULL
Create a parser context for using the XML parser with an existing I/O stream
xmlCreateIOParserCtxt_APIParam_1 is a SAX handler
xmlCreateIOParserCtxt_APIParam_2 is The user data returned on SAX callbacks
xmlCreateIOParserCtxt_APIParam_3 is an I/O read function
xmlCreateIOParserCtxt_APIParam_4 is an I/O close function
xmlCreateIOParserCtxt_APIParam_5 is an I/O handler
xmlCreateIOParserCtxt_APIName returns the new parser context or NULL
Create a parser context for using the XML parser in push mode
xmlCreateIOParserCtxt_APIParam_6 is the charset encoding
xmlCreatePushParserCtxt_APIParam_1 is a SAX handler
xmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks
The remaining characters will be parsed so The remaining characters do not need to be fed in again through xmlParseChunk
the data is used to detect the encoding
xmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars
xmlCreatePushParserCtxt_APIParam_4 is number of chars in the array
To allow content encoding detection , @size should be > = 4 The value of @filename is used for fetching external entities and error/warning reports
xmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI
xmlCreatePushParserCtxt_APIName returns the new parser context or NULL
parse an XML in-memory document and build a tree
This reuses the existing @ctxt parser context
xmlCtxtReadDoc_APIParam_1 is an XML parser context
xmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string
xmlCtxtReadDoc_APIParam_3 is the base xmlCtxtReadDoc_APIParam_3 to use for the document
xmlCtxtReadDoc_APIParam_4 is the document xmlCtxtReadDoc_APIParam_4 , or NULL
xmlCtxtReadDoc_APIParam_5 is a combination of xmlParserOption
xmlCtxtReadDoc_APIName returns the resulting document tree
parse an XML from a file descriptor and build a tree
xmlCtxtReadFd_APIParam_1 is an XML parser context
xmlCtxtReadFd_APIParam_2 is an open file descriptor
xmlCtxtReadFd_APIParam_3 is the base xmlCtxtReadFd_APIParam_3 to use for the document
xmlCtxtReadFd_APIParam_4 is the document xmlCtxtReadFd_APIParam_4 , or NULL
xmlCtxtReadFd_APIParam_5 is a combination of xmlParserOption
xmlCtxtReadFd_APIName returns the resulting document tree
parse an XML file from the filesystem or the network
the file descriptor will not be closed or reset
This reuses the existing @ctxt parser context NOTE that
This reuses the existing @ctxt parser context
xmlCtxtReadFile_APIParam_1 is an XML parser context
xmlCtxtReadFile_APIParam_2 is a file or URL
xmlCtxtReadFile_APIParam_3 is the document xmlCtxtReadFile_APIParam_3 , or NULL
xmlCtxtReadFile_APIParam_4 is a combination of xmlParserOption
xmlCtxtReadFile_APIName returns the resulting document tree
parse an XML document from I/O functions and source and build a tree
This reuses the existing @ctxt parser context
xmlCtxtReadIO_APIParam_1 is an XML parser context
xmlCtxtReadIO_APIParam_2 is an I/O read function
xmlCtxtReadIO_APIParam_3 is an I/O close function
xmlCtxtReadIO_APIParam_4 is an I/O handler
xmlCtxtReadIO_APIParam_5 is the base xmlCtxtReadIO_APIParam_5 to use for the document
xmlCtxtReadIO_APIParam_6 is the document xmlCtxtReadIO_APIParam_6 , or NULL
xmlCtxtReadIO_APIParam_7 is a combination of xmlParserOption
xmlCtxtReadIO_APIName returns the resulting document tree
parse an XML in-memory document and build a tree
This reuses the existing @ctxt parser context
xmlCtxtReadMemory_APIParam_1 is an XML parser context
xmlCtxtReadMemory_APIParam_2 is a pointer to a char array
xmlCtxtReadMemory_APIParam_3 is the xmlCtxtReadMemory_APIParam_3 of the array
xmlCtxtReadMemory_APIParam_4 is the base xmlCtxtReadMemory_APIParam_4 to use for the document
xmlCtxtReadMemory_APIParam_5 is the document xmlCtxtReadMemory_APIParam_5 , or NULL
xmlCtxtReadMemory_APIParam_6 is a combination of xmlParserOption
xmlCtxtReadMemory_APIName returns the resulting document tree
Reset a parser context
xmlCtxtReset_APIParam_1 is an XML parser context
Reset a push parser context
xmlCtxtResetPush_APIParam_1 is an XML parser context
xmlCtxtResetPush_APIParam_2 is a pointer to an array of chars
xmlCtxtResetPush_APIParam_3 is number of chars in the array
xmlCtxtResetPush_APIParam_4 is an optional file name or URI
xmlCtxtResetPush_APIParam_5 is the document xmlCtxtResetPush_APIParam_5 , or NULL
xmlCtxtResetPush_APIName returns 0 in case of success and 1 in case of error
Applies the xmlCtxtUseOptions_APIParam_2 to the parser context
xmlCtxtUseOptions_APIParam_1 is an XML parser context
xmlCtxtUseOptions_APIParam_2 is a combination of xmlParserOption
External entity loaders types
xmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented xmlCtxtUseOptions_APIParam_2 in case of error
xmlExternalEntityLoader_APIParam_1 is The System xmlExternalEntityLoader_APIParam_2 of the resource requested
xmlExternalEntityLoader_APIParam_2 is The Public xmlExternalEntityLoader_APIParam_2 of the resource requested
xmlExternalEntityLoader_APIParam_3 is the XML parser xmlExternalEntityLoader_APIParam_3
xmlExternalEntityLoader_APIName returns the entity input parser
Free all the memory used by a parser context
However the parsed document in ctxt - > myDoc is not freed
xmlFreeParserCtxt_APIParam_1 is an XML parser context
xmlGetExternalEntityLoader_APIName returns the xmlExternalEntityLoader function pointer
Get the default external entity resolver function for the application
Read the current value of one feature of this parser instance
xmlGetFeature_APIParam_1 is an XML/HTML parser context
xmlGetFeature_APIParam_2 is the feature xmlGetFeature_APIParam_2
xmlGetFeature_APIParam_3 is location to store the xmlGetFeature_APIParam_3
xmlGetFeature_APIName returns -1 in case or error, 0 otherwise
Copy at most * @len feature names into the @result array
xmlGetFeaturesList_APIParam_1 is the length of the features name array
xmlGetFeaturesList_APIParam_2 is an array of string to be filled with the features name
xmlHasFeature_APIParam_1 is the xmlHasFeature_APIParam_1 to be examined
xmlHasFeature_APIName returns a non-zero value if the xmlHasFeature_APIParam_1 exist, otherwise zero
xmlGetFeaturesList_APIName returns -1 in case or error, or the total number of features, xmlGetFeaturesList_APIParam_1 is updated with the number of strings copied, strings must not be deallocated
xmlHasFeature returns zero  if the xmlHasFeature_APIParam_1 does not exist or an unknown unknown xmlHasFeature_APIParam_1 is requested, non-zero otherwise
Examines
Load and parse a DTD
xmlIOParseDTD_APIParam_1 is the SAX handler block or NULL
xmlIOParseDTD_APIParam_2 is an Input Buffer
xmlIOParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
@input will be freed by the function in any case
-- Initialize node info sequence
xmlInitNodeInfoSeq_APIParam_1 is a node info sequence pointer
xmlIOParseDTD_APIParam_3 is the charset encoding
Initialization function for the XML parser
This is not reentrant
Call once before processing in case of use in multithreaded programs
Initialize a parser context
xmlInitParserCtxt_APIParam_1 is an XML parser context
xmlInitParserCtxt_APIName returns 0 in case of success and -1 in case of error
Set and return the previous value for default blanks text nodes support
The 1.x version of the parser used an heuristic to try to detect ignorable white spaces
xmlKeepBlanksDefault_APIParam_1 is int 0 or 1. xmlKeepBlanksDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
Upgrade of 1.X code should be done by using xmlIsBlankNode_APIName commodity function to detect the `` empty '' nodes generated
Set and return the previous value for enabling line numbers in elements contents
This may break on old application and is turned off by default
This value also affect autogeneration of indentation
xmlLineNumbersDefault_APIParam_1 is int 0 or 1. xmlLineNumbersDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
were not generated
As a result the SAX callback was generating xmlSAX2IgnorableWhitespace_APIName callbacks instead of characters_APIName one , and
xmlLoadExternalEntity_APIParam_1 is the xmlLoadExternalEntity_APIParam_1 for the entity to load
Load an external entity , note that the use of xmlLoadExternalEntity_APIName for unparsed entities may generate problems
xmlLoadExternalEntity_APIParam_2 is the Public xmlLoadExternalEntity_APIParam_2 for the entity to load
xmlLoadExternalEntity_APIParam_3 is the context in which the entity is called or NULL
xmlLoadExternalEntity_APIName returns the xmlParserInputPtr or NULL
xmlKeepBlanksDefault_APIName is provided as a way to force the standard behavior on 1.X libs and to switch back to the old mode for compatibility
xmlNewIOInputStream_APIParam_1 is an XML parser context
xmlNewIOInputStream_APIParam_2 is an I/O Input
Create a new xmlNewIOInputStream_APIParam_2 stream structure encapsulating the @input into a stream suitable for the parser
ignorableWhitespace_APIName are only generated and
The 2.x and later version will switch to the XML standard way and
xmlNewIOInputStream_APIName returns the new xmlNewIOInputStream_APIParam_2 stream or NULL
Allocate and initialize a new parser context
xmlNewParserCtxt_APIName returns the xmlParserCtxtPtr or NULL
xmlNewIOInputStream_APIParam_3 is the charset encoding
xmlParseBalancedChunkMemory_APIParam_1 is the document the chunk pertains to
xmlParseBalancedChunkMemory_APIParam_2 is the SAX handler bloc
xmlParseBalancedChunkMemory_APIParam_3 is The user data returned on SAX callbacks
xmlParseBalancedChunkMemory_APIParam_6 is the return value for the set of parsed nodes
xmlParseBalancedChunkMemory_APIParam_4 is Used for loop detection , use 0
xmlParseBalancedChunkMemoryRecover_APIParam_1 is the document the chunk pertains to
xmlParseBalancedChunkMemory_APIName returns 0 if the chunk is well balanced, -1 in case of args problem and the parser error code otherwise
xmlParseBalancedChunkMemoryRecover_APIParam_2 is the SAX handler bloc
xmlParseBalancedChunkMemoryRecover_APIParam_3 is The user data returned on SAX callbacks
Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar
= *
xmlParseBalancedChunkMemoryRecover_APIParam_6 is the return value for the set of parsed nodes
xmlParseBalancedChunkMemoryRecover_APIParam_4 is Used for loop detection , use 0
xmlParseBalancedChunkMemoryRecover_APIParam_7 is return nodes
Parse a Chunk of memory
xmlParseChunk_APIParam_1 is an XML parser context
xmlParseChunk_APIParam_2 is an char array
xmlParseChunk_APIParam_3 is the xmlParseChunk_APIParam_3 in byte of the xmlParseChunk_APIParam_2
xmlParseChunk_APIParam_4 is last xmlParseChunk_APIParam_2 indicator
xmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise
Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar
= *
= TextDecl ?
xmlParseCtxtExternalEntity_APIParam_1 is the existing parsing context
xmlParseCtxtExternalEntity_APIParam_2 is the xmlParseCtxtExternalEntity_APIParam_2 for the entity to load
xmlParseCtxtExternalEntity_APIParam_3 is the System xmlParseCtxtExternalEntity_APIParam_3 for the entity to load
xmlParseCtxtExternalEntity_APIParam_4 is the return value for the set of parsed nodes
Load and parse an external subset
xmlParseCtxtExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise
An external general parsed entity is well-formed
Parse an external general entity within an existing parsing context
xmlParseDTD_APIParam_1 is a NAME * containing the External ID of the DTD
xmlParseDTD_APIParam_2 is a NAME * containing the URL to the DTD
xmlParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
parse an XML in-memory document and build a tree
xmlParseDoc_APIParam_1 is a pointer to an array of xmlChar
xmlParseBalancedChunkMemoryRecover_APIName returns 0 if the chunk is well balanced , -1 in case of args problem and the parser error code otherwise In case xmlParseBalancedChunkMemoryRecover_APIParam_7 is set to 1 , the nodelist will not be empty  , assuming the parsing succeeded to some extent
xmlParseDoc_APIName returns the resulting document tree
parse an XML document
Misc * ?
xmlParseDocument_APIParam_1 is an XML parser context
xmlParseDocument_APIName returns 0, -1 in case of error
the parser context is augmented as a result of the parsing
= prolog element Misc * prolog
= XMLDecl ?
parse an XML external entity out of context and build a tree
= TextDecl ?
content This correspond to a `` Well Balanced '' chunk
xmlParseEntity_APIParam_1 is the xmlParseEntity_APIParam_1
xmlParseEntity_APIName returns the resulting document tree
= TextDecl ?
xmlParseExtParsedEnt_APIParam_1 is an XML parser context
xmlParseExtParsedEnt_APIName returns 0, -1 in case of error
the parser context is augmented as a result of the parsing
= TextDecl ?
An external general parsed entity is well-formed
parse a general parsed entity
xmlParseExternalEntity_APIParam_1 is the document the chunk pertains to
xmlParseExternalEntity_APIParam_2 is the SAX handler bloc
xmlParseExternalEntity_APIParam_3 is The user data returned on SAX callbacks
xmlParseExternalEntity_APIParam_4 is Used for loop detection , use 0
An external general parsed entity is well-formed
Parse an external general entity
xmlParseExternalEntity_APIParam_7 is the return value for the set of parsed nodes
xmlParseExternalEntity_APIParam_6 is the System xmlParseExternalEntity_APIParam_6 for the entity to load
parse an XML file and build a tree
xmlParseExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise
document is provided by default
Automatic support for ZLIB/Compress compressed
xmlParseFile_APIParam_1 is the xmlParseFile_APIParam_1
xmlParseFile_APIName returns the resulting document tree if the file was wellformed, NULL otherwise
xmlParseInNodeContext_APIParam_1 is the context xmlParseInNodeContext_APIParam_1
Parse a well-balanced chunk of an XML document within the context of the given xmlParseInNodeContext_APIParam_1
xmlParseInNodeContext_APIParam_2 is the input string
xmlParseInNodeContext_APIParam_3 is the input string length in bytes
xmlParseInNodeContext_APIParam_4 is a combination of xmlParserOption
xmlParseInNodeContext_APIParam_5 is the return value for the set of parsed nodes
The allowed sequence for the xmlParseInNodeContext_APIParam_2 is a Well Balanced Chunk defined by the content production in the XML grammar
= *
xmlParseInNodeContext_APIName returns XML_ERR_OK if the chunk is well balanced, and the parser error code otherwise
parse an XML in-memory block and build a tree
xmlParseMemory_APIParam_1 is an pointer to a char array
xmlParseMemory_APIParam_2 is the xmlParseMemory_APIParam_2 of the array
xmlParseMemory_APIName returns the resulting document tree
Insert node xmlParserAddNodeInfo_APIParam_2 record into the sorted sequence
xmlParserAddNodeInfo_APIParam_1 is an XML parser context
xmlParserAddNodeInfo_APIParam_2 is a node xmlParserAddNodeInfo_APIParam_2 sequence pointer
Find the parser xmlParserFindNodeInfo_APIParam_2 info struct for a given xmlParserFindNodeInfo_APIParam_2
xmlParserFindNodeInfo_APIParam_1 is an XML parser context
xmlParserFindNodeInfo_APIParam_2 is an XML xmlParserFindNodeInfo_APIParam_2 within the tree
xmlParserFindNodeInfo_APIName returns an xmlParserNodeInfo block pointer or NULL
xmlParserFindNodeInfoIndex_APIParam_1 is a xmlParserFindNodeInfoIndex_APIParam_2 info sequence pointer
xmlParserFindNodeInfoIndex_APIParam_2 is an XML xmlParserFindNodeInfoIndex_APIParam_2 pointer
xmlParserFindNodeInfoIndex_APIName returns a long indicating the position of the record
Find the index that the info record for the given xmlParserFindNodeInfoIndex_APIParam_2 is or should be at in a sorted sequence
Callback for freeing some parser input allocations
xmlParserInputDeallocate_APIParam_1 is the string to deallocate
xmlParserInputGrow_APIName increase the input for the parser
xmlParserInputGrow_APIName tries to preserve pointers to the input buffer , and keep already read data
xmlParserInputGrow_APIParam_1 is an XML parser input
xmlParserInputGrow_APIParam_2 is an indicative size for the lookahead
xmlParserInputRead_APIName was internal and is deprecated
xmlParserInputGrow_APIName returns the amount of char read, or -1 xmlParserInputGrow_APIParam_1 case of error, 0 indicate the end of this entity
xmlParserInputRead_APIParam_1 is an XML parser input
xmlParserInputRead_APIParam_2 is an indicative size for the lookahead
xmlParserInputRead_APIName returns -1 as this is an error to use it
Set and return the previous value for enabling pedantic warnings
xmlPedanticParserDefault_APIParam_1 is int 0 or 1. xmlPedanticParserDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
parse an XML in-memory document and build a tree
xmlReadDoc_APIParam_1 is a pointer to a zero terminated string
xmlReadDoc_APIParam_2 is the base xmlReadDoc_APIParam_2 to use for the document
xmlReadDoc_APIParam_3 is the document xmlReadDoc_APIParam_3 , or NULL
xmlReadDoc_APIParam_4 is a combination of xmlParserOption
xmlReadDoc_APIName returns the resulting document tree
parse an XML from a file descriptor and build a tree
xmlReadFd_APIParam_1 is an open file descriptor
xmlReadFd_APIParam_2 is the base xmlReadFd_APIParam_2 to use for the document
xmlReadFd_APIParam_3 is the document xmlReadFd_APIParam_3 , or NULL
xmlReadFd_APIParam_4 is a combination of xmlParserOption
xmlReadFd_APIName returns the resulting document tree
the file descriptor will not be closed
NOTE that or reset
parse an XML file from the filesystem or the network
xmlReadFile_APIParam_1 is a file or URL
xmlReadFile_APIParam_2 is the document xmlReadFile_APIParam_2 , or NULL
xmlReadFile_APIParam_3 is a combination of xmlParserOption
xmlReadFile_APIName returns the resulting document tree
parse an XML document from I/O functions and source and build a tree
xmlReadIO_APIParam_1 is an I/O read function
xmlReadIO_APIParam_2 is an I/O close function
xmlReadIO_APIParam_3 is an I/O handler
xmlReadIO_APIParam_4 is the base xmlReadIO_APIParam_4 to use for the document
xmlReadIO_APIParam_5 is the document xmlReadIO_APIParam_5 , or NULL
xmlReadIO_APIParam_6 is a combination of xmlParserOption
xmlReadIO_APIName returns the resulting document tree
parse an XML in-memory document and build a tree
xmlReadMemory_APIParam_1 is a pointer to a char array
xmlReadMemory_APIParam_2 is the xmlReadMemory_APIParam_2 of the array
xmlReadMemory_APIParam_3 is the base xmlReadMemory_APIParam_3 to use for the document
xmlReadMemory_APIParam_4 is the document xmlReadMemory_APIParam_4 , or NULL
xmlReadMemory_APIParam_5 is a combination of xmlParserOption
xmlReadMemory_APIName returns the resulting document tree
parse an XML in-memory document and build a tree
xmlRecoverDoc_APIParam_1 is a pointer to an array of xmlChar
xmlRecoverDoc_APIName returns the resulting document tree or NULL in case of failure
In the case the document is not Well Formed , a attempt to build a tree is tried anyway
parse an XML file and build a tree
xmlRecoverFile_APIParam_1 is the xmlRecoverFile_APIParam_1
xmlRecoverFile_APIName returns the resulting document tree or NULL in case of failure
In the case the document is not Well Formed , it attempts to build a tree anyway
parse an XML in-memory block and build a tree
document is provided by default
Automatic support for ZLIB/Compress compressed
xmlRecoverMemory_APIParam_1 is an pointer to a char array
xmlRecoverMemory_APIParam_2 is the xmlRecoverMemory_APIParam_2 of the array
xmlRecoverMemory_APIName returns the resulting document tree or NULL in case of error
In the case the document is not Well Formed , an attempt to build a tree is tried anyway
Load and parse an external subset
xmlSAXParseDTD_APIParam_1 is the SAX handler block
xmlSAXParseDTD_APIParam_2 is a NAME * containing the External ID of the DTD
xmlSAXParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
xmlSAXParseDTD_APIParam_3 is a NAME * containing the URL to the DTD
parse an XML in-memory document and build a tree
an XML in-memory document use the given SAX function block to handle the parsing callback
xmlSAXParseDoc_APIParam_1 is the SAX handler block
xmlSAXParseDoc_APIParam_2 is a pointer to an array of xmlChar
xmlSAXParseDoc_APIParam_3 is work in xmlSAXParseDoc_APIParam_3 mode , i.e
tries to read no Well Formed documents
xmlSAXParseDoc_APIName returns the resulting document tree
is NULL , fallback to the default DOM tree building routines
parse an XML external entity out of context and build a tree
It use the given SAX function block to handle the parsing callback
is NULL , fallback to the default DOM tree building routines
= TextDecl ?
content This correspond to a `` Well Balanced '' chunk
xmlSAXParseEntity_APIParam_1 is the SAX handler block
xmlSAXParseEntity_APIParam_2 is the xmlSAXParseEntity_APIParam_2
xmlSAXParseEntity_APIName returns the resulting document tree
parse an XML file and build a tree
It use the given SAX function block to handle the parsing callback
xmlSAXParseFile_APIParam_1 is the SAX handler block
xmlSAXParseFile_APIParam_2 is the xmlSAXParseFile_APIParam_2
xmlSAXParseFile_APIParam_3 is work in xmlSAXParseFile_APIParam_3 mode , i.e
document is provided by default
Automatic support for ZLIB/Compress compressed
tries to read no Well Formed documents
xmlSAXParseFile_APIName returns the resulting document tree
is NULL , fallback to the default DOM tree building routines
parse an XML file and build a tree
It use the given SAX function block to handle the parsing callback
xmlSAXParseFileWithData_APIParam_1 is the SAX handler block
xmlSAXParseFileWithData_APIParam_2 is the xmlSAXParseFileWithData_APIParam_2
document is provided by default
Automatic support for ZLIB/Compress compressed
xmlSAXParseFileWithData_APIParam_3 is work in xmlSAXParseFileWithData_APIParam_3 mode , i.e
is NULL , fallback to the default DOM tree building routines
tries to read no Well Formed documents
User xmlSAXParseFileWithData_APIParam_4 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml
xmlSAXParseFileWithData_APIParam_4 is the userdata
xmlSAXParseFileWithData_APIName returns the resulting document tree
parse an XML in-memory block and use the given SAX function block to handle the parsing callback
xmlSAXParseMemory_APIParam_1 is the SAX handler block
xmlSAXParseMemory_APIParam_2 is an pointer to a char array
xmlSAXParseMemory_APIParam_3 is the xmlSAXParseMemory_APIParam_3 of the array
xmlSAXParseMemory_APIParam_4 is work in xmlSAXParseMemory_APIParam_4 mode , i.e
is NULL , fallback to the default DOM tree building routines
tries to read not Well Formed documents
xmlSAXParseMemory_APIName returns the resulting document tree
parse an XML in-memory block and use the given SAX function block to handle the parsing callback
xmlSAXParseMemoryWithData_APIParam_1 is the SAX handler block
xmlSAXParseMemoryWithData_APIParam_2 is an pointer to a char array
xmlSAXParseMemoryWithData_APIParam_3 is the xmlSAXParseMemoryWithData_APIParam_3 of the array
is NULL , fallback to the default DOM tree building routines
xmlSAXParseMemoryWithData_APIParam_4 is work in xmlSAXParseMemoryWithData_APIParam_4 mode , i.e
User xmlSAXParseMemoryWithData_APIParam_5 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml
tries to read no Well Formed documents
xmlSAXParseMemoryWithData_APIParam_5 is the userdata
xmlSAXParseMemoryWithData_APIName returns the resulting document tree
parse an XML file and call the given SAX handler routines
Automatic support for ZLIB/Compress compressed document is provided
xmlSAXUserParseFile_APIParam_1 is a SAX handler
xmlSAXUserParseFile_APIParam_2 is The user data returned on SAX callbacks
xmlSAXUserParseFile_APIParam_3 is a file name
xmlSAXUserParseFile_APIName returns 0 in case of success or a error number otherwise
A better SAX parsing routine
parse an XML in-memory xmlSAXUserParseMemory_APIParam_3 and call the given SAX handler routines
xmlSAXUserParseMemory_APIParam_1 is a SAX handler
xmlSAXUserParseMemory_APIParam_2 is The user data returned on SAX callbacks
xmlSAXUserParseMemory_APIParam_3 is an in-memory XML document input
xmlSAXUserParseMemory_APIParam_4 is the length of the XML document in bytes
xmlSAXUserParseMemory_APIName returns 0 in case of success or a error number otherwise
Changes the defaultexternal entity resolver function for the application
xmlSetExternalEntityLoader_APIParam_1 is the new entity resolver function
Change the current xmlSetFeature_APIParam_3 of one feature of this parser instance
xmlSetFeature_APIParam_1 is an XML/HTML parser context
xmlSetFeature_APIParam_2 is the feature xmlSetFeature_APIParam_2
xmlSetFeature_APIParam_3 is pointer to the location of the new xmlSetFeature_APIParam_3
xmlSetFeature_APIName returns -1 in case or error, 0 otherwise
The xmlSetupParserForBuffer_APIParam_2 parameter must not be NULL , but the xmlSetupParserForBuffer_APIParam_3 parameter can be
Setup the parser context to parse a new xmlSetupParserForBuffer_APIParam_2
Clears any prior contents from the parser context
xmlSetupParserForBuffer_APIParam_1 is an XML parser context
xmlSetupParserForBuffer_APIParam_2 is a xmlChar * xmlSetupParserForBuffer_APIParam_2
xmlSetupParserForBuffer_APIParam_3 is a file name
Blocks further parser processing
xmlStopParser_APIParam_1 is an XML parser context
Set and return the previous value for default entity support
Daniel Veillard
Initially the parser always keep entity references instead of substituting entity values in the output
xmlSubstituteEntitiesDefault_APIParam_1 is int 0 or 1. xmlSubstituteEntitiesDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
Free an XInclude context
xmlXIncludeFreeContext_APIParam_1 is the XInclude context
Creates a new XInclude context
This function has to be used to change the default parser behavior SAX::substituteEntities_APIName has to be used for changing that on a file by file basis
xmlXIncludeNewContext_APIParam_1 is an XML Document
xmlXIncludeNewContext_APIName returns the new set
Implement the XInclude substitution on the XML document @doc
xmlXIncludeProcess_APIParam_1 is an XML document
Implement the XInclude substitution on the XML document @doc
xmlXIncludeProcess_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessFlags_APIParam_1 is an XML document
xmlXIncludeProcessFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes
Implement the XInclude substitution on the XML document @doc
xmlXIncludeProcessFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessFlagsData_APIParam_1 is an XML document
xmlXIncludeProcessFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes
xmlXIncludeProcessFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessFlagsData_APIParam_3 is application xmlXIncludeProcessFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context
xmlXIncludeProcessNode_APIParam_1 is an existing XInclude context
xmlXIncludeProcessNode_APIParam_2 is a xmlXIncludeProcessNode_APIParam_2 in an XML document
Implement the XInclude substitution for the given subtree reusing the informations and data coming from the given context
Implement the XInclude substitution for the given subtree
xmlXIncludeProcessNode_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTree_APIParam_1 is a node in an XML document
Implement the XInclude substitution for the given subtree
xmlXIncludeProcessTree_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTreeFlags_APIParam_1 is a node in an XML document
xmlXIncludeProcessTreeFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes
Implement the XInclude substitution on the XML node @tree
xmlXIncludeProcessTreeFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTreeFlagsData_APIParam_1 is an XML node
xmlXIncludeProcessTreeFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes
Set the xmlXIncludeSetFlags_APIParam_2 used for further processing of XML resources
xmlXIncludeProcessTreeFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTreeFlagsData_APIParam_3 is application xmlXIncludeProcessTreeFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context
xmlXIncludeSetFlags_APIParam_1 is an XInclude processing context
xmlXIncludeSetFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes
Daniel Veillard
xmlXIncludeSetFlags_APIName returns 0 in case of success and -1 in case of error
xmlAddChild_APIParam_1 is the xmlAddChild_APIParam_1 node
xmlAddChild_APIParam_2 is the child node
xmlAddChild_APIName returns the child or NULL in case of error
xmlAddChildList_APIParam_1 is the xmlAddChildList_APIParam_1 node
it is first destroyed
xmlAddChildList_APIParam_2 is the first node in the list
xmlAddChildList_APIName returns the last child or NULL in case of error
Add a list of node at the end of the child list of the xmlAddChildList_APIParam_1 merging adjacent TEXT nodes
As a result of text merging @elem may be freed
xmlAddNextSibling_APIParam_1 is the child node
xmlAddNextSibling_APIParam_2 is the new node
it is added into properties instead of children
Add a new node to @parent , at the end of the child list merging adjacent TEXT nodes
xmlAddNextSibling_APIName returns the new node or NULL in case of error
it is added into properties instead of children
it is first destroyed
xmlAddPrevSibling_APIParam_1 is the child node
xmlAddPrevSibling_APIParam_2 is the new node
xmlAddPrevSibling_APIName returns the new node or NULL in case of error
it is added into properties instead of children
it is first destroyed
xmlAddSibling_APIParam_1 is the child node
xmlAddSibling_APIParam_2 is the new node
it is first unlinked from its existing context
Add a new node @elem as the next sibling of @cur
xmlAddSibling_APIName returns the new element or NULL in case of error
Serialize text attribute values to an xml simple buffer
xmlAttrSerializeTxtContent_APIParam_1 is the XML buffer output
xmlAttrSerializeTxtContent_APIParam_2 is the document
xmlAttrSerializeTxtContent_APIParam_3 is the attribute node
xmlAttrSerializeTxtContent_APIParam_4 is the text content
Function to extract the content of a buffer
it is first unlinked from its existing context
Add a new node @elem as the previous sibling of @cur merging adjacent TEXT nodes
xmlBufContent_APIParam_1 is the buffer
xmlBufContent_APIName returns the internal content
Function to extract the end of the content of a buffer
xmlBufEnd_APIParam_1 is the buffer
xmlBufEnd_APIName returns the end of the internal content or NULL in case of error
Entity references are substituted
Fills up the buffer @buf with this value
xmlBufGetNodeContent_APIParam_1 is a buffer xmlBufPtr
it is first unlinked from its existing context
Add a new element @elem to the list of siblings of @cur merging adjacent TEXT nodes
xmlBufGetNodeContent_APIParam_2 is the node being read
xmlBufGetNodeContent_APIName returns 0 in case of success and -1 in case of error
Dump an XML node , recursive behaviour , children are printed too
xmlBufNodeDump_APIParam_1 is the XML buffer output
xmlBufNodeDump_APIParam_2 is the document
xmlBufNodeDump_APIParam_3 is the current node
xmlBufNodeDump_APIParam_4 is the imbrication xmlBufNodeDump_APIParam_4 for indenting
xmlBufNodeDump_APIParam_5 is is formatting allowed
that @format = 1 provide node indenting
Note
Remove the beginning of an XML buffer
xmlBufNodeDump_APIName returns the number of bytes written to the buffer, in case of error 0be returned by xmlBufNodeDump_APIName or @buf stores the error
xmlBufShrink_APIParam_1 is the buffer to dump
xmlBufShrink_APIParam_2 is the number of xmlChar to remove
xmlBufShrink_APIName returns the number of byte removed or 0 in case of failure
NOTE that this routine behaviour differs from xmlBufferShrink_APIName as it will return 0 on error instead of -1 due to size_t being used as the return type
carried directly by this node
Read the value of a node @cur , this can be either the text
Function to get the length of a buffer
xmlBufUse_APIParam_1 is the buffer
xmlBufUse_APIName returns the length of data in the internal content
Add a string range to an XML buffer
xmlBufferAdd_APIParam_1 is the buffer to dump
xmlBufferAdd_APIParam_2 is the #xmlChar string
xmlBufferAdd_APIParam_3 is the number of #xmlChar to add
xmlBufferAdd_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
the length of xmlBufferAdd_APIParam_2 is recomputed
Add a string range to the beginning of an XML buffer
xmlBufferAddHead_APIParam_1 is the buffer
xmlBufferAddHead_APIParam_2 is the #xmlChar string
xmlBufferAddHead_APIParam_3 is the number of #xmlChar to add
Append a zero terminated C string to an XML buffer
xmlBufferAddHead_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
the length of @str is recomputed
xmlBufferCCat_APIParam_1 is the buffer to dump
xmlBufferCCat_APIParam_2 is the C char string
Append a zero terminated string to an XML buffer
xmlBufferCCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
xmlBufferCat_APIParam_1 is the buffer to add to
xmlBufferCat_APIParam_2 is the #xmlChar string
Function to extract the content of a buffer
xmlBufferContent_APIParam_1 is the buffer
xmlBufferCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
xmlBufferContent_APIName returns the internal content
routine to create an XML buffer
xmlBufferCreate_APIName returns the new structure
routine to create an XML buffer
xmlBufferCreateSize_APIParam_1 is initial xmlBufferCreateSize_APIParam_1 of buffer
xmlBufferCreateSize_APIName returns the new structure
routine to create an XML buffer from an immutable memory area
xmlBufferCreateStatic_APIParam_1 is the memory area
xmlBufferCreateStatic_APIParam_2 is the xmlBufferCreateStatic_APIParam_2 in byte
xmlBufferCreateStatic_APIName returns the new structure
The area will not be modified nor copied , and is expected to be present until the end of the buffer lifetime
Remove the string contained in a buffer and gie it back to the caller
The buffer is reset to an empty content
This does not work with immutable buffers as they can not be reset
xmlBufferDetach_APIParam_1 is the buffer
xmlBufferDetach_APIName returns the previous string contained by the buffer
Dumps an XML buffer to a FILE *
xmlBufferDump_APIParam_1 is the xmlBufferDump_APIParam_1 output
xmlBufferDump_APIParam_2 is the buffer to dump
xmlBufferDump_APIName returns the number of #xmlChar written
empty a buffer
xmlBufferEmpty_APIParam_1 is the buffer
Frees an XML buffer
It frees both the content and the structure which encapsulate it
xmlBufferFree_APIParam_1 is the buffer to free
Grow the available space of an XML buffer
xmlBufferGrow_APIParam_1 is the buffer
xmlBufferGrow_APIParam_2 is the minimum free size to allocate
xmlBufferGrow_APIName returns the new available space or -1 in case of error
Function to get the length of a buffer
xmlBufferLength_APIParam_1 is the buffer
xmlBufferLength_APIName returns the length of data in the internal content
Resize a buffer to accommodate minimum xmlBufferResize_APIParam_2 of @size
xmlBufferResize_APIParam_1 is the buffer to resize
xmlBufferResize_APIParam_2 is the desired xmlBufferResize_APIParam_2
xmlBufferResize_APIName returns 0 in case of problems, 1 otherwise
Sets the allocation xmlBufferSetAllocationScheme_APIParam_2 for this buffer
xmlBufferSetAllocationScheme_APIParam_1 is the buffer to tune
xmlBufferSetAllocationScheme_APIParam_2 is allocation xmlBufferSetAllocationScheme_APIParam_2 to use
Remove the beginning of an XML buffer
xmlBufferShrink_APIParam_1 is the buffer to dump
xmlBufferShrink_APIName returns the number of #xmlChar removed, or -1 in case of failure
xmlBufferShrink_APIParam_2 is the number of xmlChar to remove
routine which manages and grows an output buffer
This one adds xmlChars at the end of the buffer
xmlBufferWriteCHAR_APIParam_1 is the XML buffer
xmlBufferWriteCHAR_APIParam_2 is the xmlBufferWriteCHAR_APIParam_2 to add
routine which manage and grows an output buffer
This one add C chars at the end of the array
xmlBufferWriteChar_APIParam_1 is the XML buffer output
xmlBufferWriteChar_APIParam_2 is the xmlBufferWriteChar_APIParam_2 to add
routine which manage and grows an output buffer
xmlBufferWriteQuotedString_APIParam_1 is the XML buffer output
xmlBufferWriteQuotedString_APIParam_2 is the xmlBufferWriteQuotedString_APIParam_2 to add
If xmlBuildQName_APIParam_2 is NULL or empty {}_APIName returns xmlBuildQName_APIParam_1
xmlBuildQName_APIParam_1 is the Name
Builds the QName @prefix
xmlBuildQName_APIParam_2 is the xmlBuildQName_APIParam_2
This one writes a quoted or double quoted #xmlChar xmlBufferWriteQuotedString_APIParam_2 , checking first
xmlBuildQName_APIParam_3 is preallocated xmlBuildQName_APIParam_3
xmlBuildQName_APIParam_4 is preallocated xmlBuildQName_APIParam_3 length
xmlBuildQName_APIName returns the new string which must be freed by the caller if different from @memory and @ncname or NULL in case of error
Finds the current number of child nodes of that element which are element nodes
xmlChildElementCount_APIParam_1 is the xmlChildElementCount_APIParam_1 node
xmlChildElementCount_APIName returns the count of element child or 0 if not available
@ncname in @memory , otherwise allocate a new string
Do a copy of the document info
xmlCopyDoc_APIParam_1 is the document
Note the handling of entities references is different than in the W3C DOM element traversal spec
xmlCopyDoc_APIName returns a new #xmlDocPtr, or NULL in case of error
Do a copy of the xmlCopyDtd_APIParam_1
xmlCopyDtd_APIParam_1 is the xmlCopyDtd_APIParam_1
xmlCopyDtd_APIName returns a new #xmlDtdPtr, or NULL in case of error
xmlCopyDoc_APIParam_2 is
the content tree will be copied too as well as DTD , namespaces and entities
Do a copy of the namespace
xmlCopyNamespace_APIParam_1 is the namespace
xmlCopyNamespace_APIName returns a new #xmlNsPtr, or NULL in case of error
Do a copy of an namespace list
xmlCopyNamespaceList_APIParam_1 is the first namespace
xmlCopyNamespaceList_APIName returns a new #xmlNsPtr, or NULL in case of error
Do a copy of the xmlCopyNode_APIParam_1
xmlCopyNode_APIParam_1 is the xmlCopyNode_APIParam_1
xmlCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error
Do a recursive copy of the xmlCopyNodeList_APIParam_1 list
xmlCopyNodeList_APIParam_1 is the first xmlCopyNodeList_APIParam_1 in the list
xmlCopyNode_APIParam_2 is
xmlCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error
Do a copy of the attribute
Use xmlDocCopyNodeList_APIName
xmlCopyProp_APIParam_1 is the element where the attribute will be grafted
xmlCopyProp_APIParam_2 is the attribute
xmlCopyProp_APIName returns a new #xmlAttrPtr, or NULL in case of error
Do a copy of an attribute list
xmlCopyPropList_APIParam_1 is the element where the attributes will be grafted
xmlCopyPropList_APIParam_2 is the first attribute
xmlCopyPropList_APIName returns a new #xmlAttrPtr, or NULL in case of error
Create the internal subset of a document
xmlCreateIntSubset_APIParam_1 is the document pointer
xmlCreateIntSubset_APIParam_2 is the DTD xmlCreateIntSubset_APIParam_2
xmlCreateIntSubset_APIParam_3 is the external ID
xmlCreateIntSubset_APIParam_4 is the system ID
xmlCreateIntSubset_APIName returns a pointer to the new DTD structure
A function called to acquire namespaces from the wrapper
xmlDOMWrapAcquireNsFunction_APIParam_1 is a DOM wrapper context
xmlDOMWrapAcquireNsFunction_APIParam_2 is the context xmlDOMWrapAcquireNsFunction_APIParam_2
xmlDOMWrapAcquireNsFunction_APIParam_3 is the requested namespace name
xmlDOMWrapAcquireNsFunction_APIParam_4 is the requested namespace prefix
xmlDOMWrapAcquireNsFunction_APIName returns an xmlNsPtr or NULL in case of an error
xmlDOMWrapAdoptNode_APIName was not intensively tested
xmlDOMWrapAdoptNode_APIParam_1 is the optional context for custom processing
xmlDOMWrapAdoptNode_APIParam_2 is the optional xmlDOMWrapAdoptNode_APIParam_2
xmlDOMWrapAdoptNode_APIParam_3 is the xmlDOMWrapAdoptNode_APIParam_3 to start with
Note that , , this process could break QNames in attribute values or element content
xmlDOMWrapAdoptNode_APIParam_4 is the destination doc
xmlDOMWrapAdoptNode_APIParam_5 is the optional new parent of @node in @destDoc
xmlDOMWrapAdoptNode_APIParam_6 is option flags
1 -RRB- What to do with XInclude ?
Currently this returns an error for XInclude
xmlDOMWrapCloneNode_APIParam_1 is the optional context for custom processing
References of out-of scope ns-decls are remapped to point to @destDoc
This is the case
xmlDOMWrapAdoptNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapAdoptNode_APIParam_3 of unsupported type was given, 2 if a xmlDOMWrapAdoptNode_APIParam_3 of not yet supported type was given and -1 on API/internal errors
@destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed
xmlDOMWrapCloneNode_APIParam_2 is the optional xmlDOMWrapCloneNode_APIParam_2
Note that , , this process could break QNames in attribute values or element content
xmlDOMWrapCloneNode_APIParam_3 is the xmlDOMWrapCloneNode_APIParam_3 to start with
xmlDOMWrapCloneNode_APIParam_4 is the clone of the given @node
xmlDOMWrapCloneNode_APIParam_5 is the destination doc
xmlDOMWrapCloneNode_APIParam_6 is the optional new parent of @node in @destDoc
1 -RRB- , nsDef entries on element-nodes are used 2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used
xmlDOMWrapCloneNode_APIParam_8 is option flags
Frees the DOM-wrapper context
xmlDOMWrapFreeCtxt_APIParam_1 is the DOM-wrapper context
xmlDOMWrapCloneNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapCloneNode_APIParam_3 of unsupported  type was given, -1 on API/internal errors
xmlDOMWrapCloneNode_APIParam_7 is descend into child
Allocates and initializes a new DOM-wrapper context
xmlDOMWrapNewCtxt_APIName returns the xmlDOMWrapCtxtPtr or NULL in case of an internal error
Ensures that ns-references point to ns-decls hold on element-nodes
Ensures that the tree is namespace wellformed by creating additional ns-decls where needed
xmlDOMWrapReconcileNamespaces_APIName was not intensively tested
xmlDOMWrapReconcileNamespaces_APIParam_1 is DOM wrapper context , unused at the moment
xmlDOMWrapReconcileNamespaces_APIParam_2 is the element-node
Note that , , this process could break QNames in attribute values or element content
xmlDOMWrapReconcileNamespaces_APIParam_3 is option flags
xmlDOMWrapReconcileNamespaces_APIName returns 0 if succeeded, -1 otherwise and on API/internal errors
Unlinks the given xmlDOMWrapRemoveNode_APIParam_3 from its owner
xmlDOMWrapRemoveNode_APIName was not intensively tested
xmlDOMWrapRemoveNode_APIParam_1 is a DOM wrapper context
References of out-of scope ns-decls are remapped to point to @destDoc
xmlDOMWrapRemoveNode_APIParam_2 is the xmlDOMWrapRemoveNode_APIParam_2
xmlDOMWrapRemoveNode_APIParam_3 is the xmlDOMWrapRemoveNode_APIParam_3 to be removed
xmlDOMWrapRemoveNode_APIParam_4 is set of xmlDOMWrapRemoveNode_APIParam_4 , unused at the moment
This will substitute ns-references to node - > nsDef for ns-references to doc - > oldNs , thus ensuring the removed branch to be autark wrt ns-references
xmlDOMWrapRemoveNode_APIName returns 0 on success, 1 if the xmlDOMWrapRemoveNode_APIParam_3 is not supported, -1 on API and internal errors
Do a copy of the xmlDocCopyNode_APIParam_1 to a given document
xmlDocCopyNode_APIParam_1 is the xmlDocCopyNode_APIParam_1
xmlDocCopyNode_APIParam_2 is the document
xmlDocCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error
Do a recursive copy of the xmlDocCopyNodeList_APIParam_2 list
xmlDocCopyNodeList_APIParam_1 is the target document
xmlDocCopyNodeList_APIParam_2 is the first xmlDocCopyNodeList_APIParam_2 in the list
xmlDocCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error
xmlDocCopyNode_APIParam_3 is
Dump an XML document to an open FILE
xmlDocDump_APIParam_1 is the FILE *
xmlDocDump_APIParam_2 is the document
xmlDocDump_APIName returns the number of bytes written or -1 in case of failure
Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpFormatMemory_APIParam_3
it is up to the caller to free xmlDocDumpFormatMemory_APIParam_0 with xmlFree_APIName
xmlDocDumpFormatMemory_APIParam_1 is the document
xmlDocDumpFormatMemory_APIParam_2 is OUT the memory pointer
xmlDocDumpFormatMemory_APIParam_3 is OUT the memory length
xmlDocDumpFormatMemory_APIParam_4 is should formatting spaces been added
Dump the current DOM tree into memory using the character encoding specified by the caller
that @format = 1 provide node indenting
Note
xmlDocDumpFormatMemoryEnc_APIParam_1 is Document to generate XML text from
Note it is up to the caller of xmlDocDumpFormatMemoryEnc_APIName to free the allocated memory with xmlFree_APIName
xmlDocDumpFormatMemoryEnc_APIParam_2 is Memory pointer for allocated XML text
xmlDocDumpFormatMemoryEnc_APIParam_3 is Length of the generated XML text
xmlDocDumpFormatMemoryEnc_APIParam_5 is should formatting spaces been added
1 -RRB- , nsDef entries on element-nodes are used
2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used This is the case when you have an unlinked xmlDOMWrapAdoptNode_APIParam_3 and just want to move an unlinked xmlDOMWrapAdoptNode_APIParam_3 to the context of If @destParent is given , @destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed
Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpMemory_APIParam_3 in bytes
it is up to the caller to free xmlDocDumpMemory_APIParam_0 with xmlFree_APIName
that @format = 1 provide node indenting
Note
xmlDocDumpMemory_APIParam_1 is the document
xmlDocDumpFormatMemoryEnc_APIParam_4 is Character encoding to use
The resulting byte array is zero terminated
xmlDocDumpMemory_APIParam_2 is OUT the memory pointer
xmlDocDumpMemory_APIParam_3 is OUT the memory length
Dump the current DOM tree into memory using the character encoding specified by the caller
Note it is up to the caller of xmlDocDumpMemoryEnc_APIName to free the allocated memory with xmlFree_APIName
xmlDocDumpMemoryEnc_APIParam_1 is Document to generate XML text from
xmlDocDumpMemoryEnc_APIParam_2 is Memory pointer for allocated XML text
xmlDocDumpMemoryEnc_APIParam_3 is Length of the generated XML text
Dump an XML document to an open FILE
xmlDocFormatDump_APIParam_1 is the FILE *
xmlDocFormatDump_APIParam_2 is the document
xmlDocFormatDump_APIParam_3 is should formatting spaces been added
xmlDocFormatDump_APIName returns the number of bytes written or -1 in case of failure
xmlDocDumpMemoryEnc_APIParam_4 is Character encoding to use
Get the root element of the document
xmlDocGetRootElement_APIParam_1 is the document
xmlDocGetRootElement_APIName returns the #xmlNodePtr for the root or NULL
Set the xmlDocSetRootElement_APIParam_2 element of the document
xmlDocSetRootElement_APIParam_1 is the document
xmlDocSetRootElement_APIName returns the old xmlDocSetRootElement_APIParam_2 element if any was found, NULL if xmlDocSetRootElement_APIParam_2 was NULL
that @format = 1 provide node indenting
Note
Dump an XML/HTML node , recursive behaviour , children are printed too
xmlElemDump_APIParam_1 is the FILE * for the output
xmlElemDump_APIParam_2 is the document
xmlElemDump_APIParam_3 is the current node
xmlDocSetRootElement_APIParam_2 is the new document xmlDocSetRootElement_APIParam_2 element
xmlFirstElementChild_APIParam_1 is the xmlFirstElementChild_APIParam_1 node
xmlFirstElementChild_APIName returns the first element child or NULL if not available
Free up all the structures used by a document , tree included
xmlFreeDoc_APIParam_1 is pointer to the document
Free a DTD structure
xmlFreeDtd_APIParam_1 is the DTD structure to free up
Free a node , this is a recursive behaviour , all the children are freed too
This does not unlink the child from the list , use xmlUnlinkNode_APIName first
xmlFreeNode_APIParam_1 is the node
xmlFreeNodeList_APIParam_1 is the first node in the list
Free up the structures associated to a namespace
Free a node and all its siblings , this is a recursive behaviour , all the children are freed too
xmlFreeNs_APIParam_1 is the namespace pointer
Finds the first child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec
Free up all the structures associated to the chained namespaces
xmlFreeNsList_APIParam_1 is the first namespace pointer
Free one attribute , all the content is freed too
xmlFreeProp_APIParam_1 is an attribute
Free a property and all its siblings , all the children are freed too
xmlFreePropList_APIParam_1 is the first property in the list
xmlGetBufferAllocationScheme_APIName returns the current allocation scheme
get the default compression mode used , ZLIB based
xmlGetCompressMode_APIName returns 0  to 9 (max compression
get the compression ratio for a document , ZLIB based
xmlGetDocCompressMode_APIParam_1 is the document
xmlGetDocCompressMode_APIName returns 0  to 9 (max compression
Get the internal subset of a document
xmlGetIntSubset_APIParam_1 is the document pointer
xmlGetIntSubset_APIName returns a pointer to the DTD structure or NULL if not found
Search the last child of a node
xmlGetLastChild_APIParam_1 is the xmlGetLastChild_APIParam_1 node
xmlGetLastChild_APIName returns the last child or NULL if none
Get line number of @node
xmlGetLineNo_APIParam_1 is valid xmlGetLineNo_APIParam_1
xmlGetLineNo_APIName returns the line number if successful, -1 otherwise
Search and get the value of an attribute associated to a xmlGetNoNsProp_APIParam_1 This does the entity substitution
xmlGetNoNsProp_APIParam_1 is the xmlGetNoNsProp_APIParam_1
xmlGetNoNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off
xmlGetNoNsProp_APIParam_2 is the attribute xmlGetNoNsProp_APIParam_2
xmlGetNoNsProp_APIName is similar to xmlGetProp except it will accept only an attribute in no namespace
Try to override the limitation of lines being store in 16 bits ints
xmlGetNoNsProp_APIName returns the attribute value or NULL if not found
it is up to the caller to free xmlGetNoNsProp_APIParam_0 with xmlFree_APIName
Build a structure based Path for the given xmlGetNodePath_APIParam_1
xmlGetNodePath_APIParam_1 is a xmlGetNodePath_APIParam_1
xmlGetNodePath_APIName returns the new path or NULL in case of error
The caller must free xmlGetNodePath_APIParam_0
Search all the namespace applying to a given element
xmlGetNsList_APIParam_1 is the document
Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer tight in normal usage , and doubleit on large strings to avoid pathological performance
xmlGetNsList_APIParam_2 is the current xmlGetNsList_APIParam_2
This does the entity substitution
xmlGetNsList_APIName returns an NULL terminated array of all the #xmlNsPtr found that need to be freed by the caller or NULL if no namespace if defined
xmlGetNsProp_APIParam_1 is the xmlGetNsProp_APIParam_1
Search and get the value of an attribute associated to a xmlGetNsProp_APIParam_1 This attribute has to be anchored in the namespace specified
xmlGetNsProp_APIParam_2 is the attribute xmlGetNsProp_APIParam_2
xmlGetNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off
xmlGetNsProp_APIParam_3 is the URI of the namespace
xmlGetNsProp_APIName returns the attribute value or NULL if not found
it is up to the caller to free xmlGetNsProp_APIParam_0 with xmlFree_APIName
Search and get the value of an attribute associated to a xmlGetProp_APIParam_1 This does the entity substitution
xmlGetProp_APIName acts independently of namespaces associated to the attribute
Use xmlGetNsProp_APIName or xmlGetNoNsProp_APIName for namespace aware processing
xmlGetProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off
xmlGetProp_APIParam_1 is the xmlGetProp_APIParam_1
xmlGetProp_APIParam_2 is the attribute xmlGetProp_APIParam_2
xmlGetProp_APIName returns the attribute value or NULL if not found
it is up to the caller to free xmlGetProp_APIParam_0 with xmlFree_APIName
This does the entity substitution
Search for an attribute associated to a xmlHasNsProp_APIParam_1 This attribute has to be anchored in the namespace specified
Note that a namespace of NULL indicates to use the default namespace
xmlHasNsProp_APIParam_1 is the xmlHasNsProp_APIParam_1
xmlHasNsProp_APIName looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off
xmlHasNsProp_APIParam_2 is the attribute xmlHasNsProp_APIParam_2
xmlHasNsProp_APIParam_3 is the URI of the namespace
xmlHasNsProp_APIName returns the attribute or the attribute declaration or NULL if neither was found
xmlHasProp_APIParam_1 is the xmlHasProp_APIParam_1
xmlHasProp_APIParam_2 is the attribute xmlHasProp_APIParam_2
xmlHasProp_APIName returns the attribute or the attribute declaration or NULL if neither was found
Checks whether this xmlIsBlankNode_APIParam_1 is an empty or whitespace only text-node
xmlIsBlankNode_APIParam_1 is the xmlIsBlankNode_APIParam_1
Search an attribute associated to a xmlHasProp_APIParam_1 xmlHasProp_APIName also looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off
xmlIsBlankNode_APIName returns 1 yes, 0 no
xmlIsXHTML_APIParam_1 is the system identifier
xmlIsXHTML_APIParam_2 is the public identifier
xmlIsXHTML_APIName returns 1 if true, 0 if not and -1 in case of error
xmlLastElementChild_APIParam_1 is the xmlLastElementChild_APIParam_1 node
xmlLastElementChild_APIName returns the last element child or NULL if not available
Try to find
Creation of a new node containing a CDATA block
xmlNewCDataBlock_APIParam_1 is the document
xmlNewCDataBlock_APIParam_2 is the CDATA block xmlNewCDataBlock_APIParam_2 xmlNewCDataBlock_APIParam_2
xmlNewCDataBlock_APIParam_3 is the length of the block
xmlNewCDataBlock_APIName returns a pointer to the new node object
Creation of a new character reference node
xmlNewCharRef_APIParam_1 is the document
xmlNewCharRef_APIName returns a pointer to the new node object
Creation of a new child element , added at the end of @parent children list
@ns and @content parameters are optional
Finds the last child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec
xmlNewCharRef_APIParam_2 is the char ref string , starting with # or '' & #
@content is supposed to be a piece of XML CDATA , so @content allows entity references
xmlNewChild_APIParam_1 is the xmlNewChild_APIParam_1 node
the newly created element inherits the namespace of @parent
XML special chars must be escaped first by using xmlEncodeEntitiesReentrant_APIName , or xmlNewTextChild_APIName should be used
a child list containing the TEXTs and ENTITY_REFs node will be created
xmlNewChild_APIParam_3 is the xmlNewChild_APIParam_3 of the child
xmlNewChild_APIName returns a pointer to the new node object
Creation of a new node containing a comment
xmlNewChild_APIParam_2 is a namespace
xmlNewComment_APIParam_1 is the comment xmlNewComment_APIParam_1
xmlNewComment_APIName returns a pointer to the new node object
xmlNewChild_APIParam_4 is the XML xmlNewChild_APIParam_4 of the child
Creates a new XML document
xmlNewDoc_APIName returns a new document
xmlNewDoc_APIParam_1 is xmlChar string giving the xmlNewDoc_APIParam_1 of XML `` 1.0 ''
Creation of a new node containing a comment within a document
xmlNewDocComment_APIParam_1 is the document
xmlNewDocComment_APIParam_2 is the comment xmlNewDocComment_APIParam_2
xmlNewDocComment_APIName returns a pointer to the new node object
Creation of a new Fragment node
xmlNewDocFragment_APIParam_1 is the document owning the fragment
xmlNewDocFragment_APIName returns a pointer to the new node object
Creation of a new node element within a document
@ns and @content are optional
xmlNewDocNode_APIParam_1 is the document
xmlNewDocNode_APIParam_3 is the node xmlNewDocNode_APIParam_3
Use xmlNewDocRawNode_APIName
xmlNewDocNode_APIName returns a pointer to the new node object
xmlNewDocNode_APIParam_2 is namespace
Creation of a new node element within a document
@ns and @content are optional
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
xmlNewDocNode_APIParam_4 is the XML text xmlNewDocNode_APIParam_4
xmlNewDocNodeEatName_APIParam_1 is the document
xmlNewDocNodeEatName_APIParam_3 is the node xmlNewDocNodeEatName_APIParam_3
Use xmlNewDocRawNode_APIName
xmlNewDocNodeEatName_APIName returns a pointer to the new node object
xmlNewDocNodeEatName_APIParam_2 is namespace
Creation of a processing instruction element
xmlNewDocPI_APIParam_1 is the target document
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
xmlNewDocPI_APIParam_2 is the processing instruction xmlNewDocPI_APIParam_2
xmlNewDocNodeEatName_APIParam_4 is the XML text xmlNewDocNodeEatName_APIParam_4
xmlNewDocPI_APIParam_3 is the PI xmlNewDocPI_APIParam_3
xmlNewDocPI_APIName returns a pointer to the new node object
Create a new property carried by a document
xmlNewDocProp_APIParam_1 is the document
xmlNewDocProp_APIParam_2 is the xmlNewDocProp_APIParam_2 of the attribute
xmlNewDocProp_APIParam_3 is the xmlNewDocProp_APIParam_3 of the attribute
xmlNewDocProp_APIName returns a pointer to the attribute
Creation of a new node element within a document
@ns and @content are optional
xmlNewDocRawNode_APIParam_1 is the document
xmlNewDocRawNode_APIParam_3 is the node xmlNewDocRawNode_APIParam_3
xmlNewDocRawNode_APIName returns a pointer to the new node object
Creation of a new text node within a document
xmlNewDocRawNode_APIParam_2 is namespace
xmlNewDocText_APIParam_1 is the document
xmlNewDocText_APIParam_2 is the text xmlNewDocText_APIParam_2
xmlNewDocText_APIName returns a pointer to the new node object
xmlNewDocRawNode_APIParam_4 is the text xmlNewDocRawNode_APIParam_4
Creation of a new text node with an extra xmlNewDocTextLen_APIParam_2 length parameter
The text node pertain to a given document
xmlNewDocTextLen_APIParam_1 is the document
xmlNewDocTextLen_APIParam_2 is the text xmlNewDocTextLen_APIParam_2
xmlNewDocTextLen_APIParam_3 is the text xmlNewDocTextLen_APIParam_3
xmlNewDocTextLen_APIName returns a pointer to the new node object
Creation of a new DTD for the external subset
To create an internal subset , use xmlCreateIntSubset_APIName
xmlNewDtd_APIParam_1 is the document pointer
xmlNewDtd_APIParam_2 is the DTD xmlNewDtd_APIParam_2
xmlNewDtd_APIParam_3 is the external ID
xmlNewDtd_APIParam_4 is the system ID
xmlNewDtd_APIName returns a pointer to the new DTD structure
Creation of a Namespace , the old way using PI and without scoping DEPRECATED !!!
xmlNewGlobalNs_APIParam_1 is the document carrying the namespace
xmlNewGlobalNs_APIParam_2 is the URI associated
xmlNewGlobalNs_APIParam_3 is the xmlNewGlobalNs_APIParam_3 for the namespace
xmlNewGlobalNs_APIName returns NULL this functionality had been removed
Creation of a new node element
@ns is optional
xmlNewNode_APIParam_2 is the node xmlNewNode_APIParam_2
xmlNewNode_APIName returns a pointer to the new node object
Uses xmlStrdup_APIName to make copy of @name
xmlNewNode_APIParam_1 is namespace
Creation of a new node element
@ns is optional
xmlNewNodeEatName_APIParam_2 is the node xmlNewNodeEatName_APIParam_2
xmlNewNodeEatName_APIName returns a pointer to the new node object, with pointer @name as new node xmlNewNodeEatName_APIParam_2
Creation of a new Namespace
xmlNewNodeEatName_APIParam_1 is namespace
Note that for a default namespace , @prefix should be NULL
xmlNewNs_APIParam_1 is the element carrying the namespace
xmlNewNs_APIName will refuse to create a namespace with a similar xmlNewNs_APIParam_3 than an existing one present on this xmlNewNs_APIParam_1
Use xmlNewNode_APIName is needed as new node name
xmlNewNs_APIParam_2 is the URI associated
We use href == NULL in the case of an element creation where the namespace was not defined
xmlNewNs_APIParam_3 is the xmlNewNs_APIParam_3 for the namespace
xmlNewNs_APIName returns a new namespace pointer or NULL
Create a new property tagged with a namespace and carried by a xmlNewNsProp_APIParam_1
xmlNewNsProp_APIParam_1 is the holding xmlNewNsProp_APIParam_1
xmlNewNsProp_APIParam_2 is the namespace
xmlNewNsProp_APIParam_3 is the xmlNewNsProp_APIParam_3 of the attribute
xmlNewNsProp_APIParam_4 is the xmlNewNsProp_APIParam_4 of the attribute
xmlNewNsProp_APIName returns a pointer to the attribute
Create a new property tagged with a namespace and carried by a xmlNewNsPropEatName_APIParam_1
xmlNewNsPropEatName_APIParam_1 is the holding xmlNewNsPropEatName_APIParam_1
xmlNewNsPropEatName_APIParam_2 is the namespace
xmlNewNsPropEatName_APIParam_3 is the xmlNewNsPropEatName_APIParam_3 of the attribute
xmlNewNsPropEatName_APIParam_4 is the xmlNewNsPropEatName_APIParam_4 of the attribute
xmlNewNsPropEatName_APIName returns a pointer to the attribute
Creation of a processing instruction element
Use xmlDocNewPI preferably to get string interning
xmlNewPI_APIParam_1 is the processing instruction xmlNewPI_APIParam_1
xmlNewPI_APIParam_2 is the PI xmlNewPI_APIParam_2
xmlNewPI_APIName returns a pointer to the new node object
Create a new property carried by a xmlNewProp_APIParam_1
xmlNewProp_APIParam_1 is the holding xmlNewProp_APIParam_1
xmlNewProp_APIParam_2 is the xmlNewProp_APIParam_2 of the attribute
xmlNewProp_APIParam_3 is the xmlNewProp_APIParam_3 of the attribute
xmlNewProp_APIName returns a pointer to the attribute
Creation of a new reference node
xmlNewReference_APIParam_1 is the document
xmlNewReference_APIName returns a pointer to the new node object
xmlNewReference_APIParam_2 is the reference xmlNewReference_APIParam_2 , or the reference string with & and
Creation of a new text node
xmlNewText_APIParam_1 is the text xmlNewText_APIParam_1
xmlNewText_APIName returns a pointer to the new node object
@ns and @content parameters are optional
Creation of a new child element , added at the end of @parent children list
xmlNewTextChild_APIParam_1 is the xmlNewTextChild_APIParam_1 node
the newly created element inherits the namespace of @parent
xmlNewTextChild_APIParam_3 is the xmlNewTextChild_APIParam_3 of the child
xmlNewTextChild_APIName returns a pointer to the new node object
a child TEXT node will be created containing the string @content
xmlNewTextChild_APIParam_2 is a namespace
Use xmlNewChild_APIName will contain entities that need to be preserved
xmlNewTextLen_APIParam_1 is the text xmlNewTextLen_APIParam_1
Creation of a new text node with an extra parameter for the xmlNewTextLen_APIParam_1 length
xmlNewTextLen_APIParam_2 is the text xmlNewTextLen_APIParam_2
xmlNewTextLen_APIName returns a pointer to the new node object
xmlNewTextChild_APIParam_4 is the text xmlNewTextChild_APIParam_4 of the child
Finds the first closest next sibling of the xmlNextElementSibling_APIParam_1 which is an element xmlNextElementSibling_APIParam_1
xmlNextElementSibling_APIParam_1 is the current xmlNextElementSibling_APIParam_1
xmlNextElementSibling_APIName returns the next element sibling or NULL if not available
Append the extra substring to the node xmlNodeAddContent_APIParam_2
Note the handling of entities references is different than in the W3C DOM element traversal spec
xmlNodeAddContent_APIParam_1 is the node being modified
xmlNodeAddContent_APIParam_2 is extra content
Append the extra substring to the node xmlNodeAddContentLen_APIParam_2
xmlNodeAddContentLen_APIParam_1 is the node being modified
xmlNodeAddContentLen_APIParam_2 is extra xmlNodeAddContentLen_APIParam_2
In contrast to xmlNodeSetContent_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported
xmlNodeAddContentLen_APIParam_3 is the size of @content
this function , xmlNewTextChild_APIName , , such as the ampersand , greater-than or less-than signs , are automatically replaced by their XML
Use escaped entity representations
Entity references are substituted
Fills up the xmlNodeBufGetContent_APIParam_1 @buffer with this value
xmlNodeBufGetContent_APIParam_1 is a xmlNodeBufGetContent_APIParam_1
In contrast to xmlNodeSetContentLen_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported
xmlNodeBufGetContent_APIParam_2 is the node being read
xmlNodeBufGetContent_APIName returns 0 in case of success and -1 in case of error
Dump an XML node , recursive behaviour , children are printed too
xmlNodeDump_APIParam_1 is the XML buffer output
xmlNodeDump_APIParam_2 is the document
xmlNodeDump_APIParam_3 is the current node
xmlNodeDump_APIParam_4 is the imbrication xmlNodeDump_APIParam_4 for indenting
xmlNodeDump_APIParam_5 is is formatting allowed
xmlNodeDump_APIName returns the number of bytes written to the buffer or -1 in case of error
Dump an XML node , recursive behaviour , children are printed too
xmlNodeDumpOutput_APIParam_1 is the XML buffer output
xmlNodeDumpOutput_APIParam_2 is the document
carried directly by this node
Read the value of a node @cur , this can be either the text
xmlNodeDumpOutput_APIParam_3 is the current node
xmlNodeDumpOutput_APIParam_4 is the imbrication xmlNodeDumpOutput_APIParam_4 for indenting
xmlNodeDumpOutput_APIParam_5 is is formatting allowed
that @format = 1 provide node indenting
Note , use xmlBufNodeDump_APIName instead
xmlNodeDumpOutput_APIParam_6 is an optional xmlNodeDumpOutput_APIParam_6 string
that @format = 1 provide node indenting
Note
Searches for the BASE URL
{}_APIName returns the base as defined in RFC 2396 sections 5.1.1
The code should work on both XML and HTML document
Base URI within Document Content and 5.1.2
xmlNodeGetBase_APIParam_1 is the document the node pertains to
Base URI from the Encapsulating Entity However it does not return the document base , use doc->URL
xmlNodeGetBase_APIParam_2 is the node being checked
Entity references are substituted
xmlNodeGetBase_APIName returns a pointer to the base URL, or NULL if not found it is up to the caller to free xmlNodeGetBase_APIParam_0 with xmlFree_APIName
xmlNodeGetContent_APIParam_1 is the node being read
xmlNodeGetContent_APIName returns a new #xmlChar * or NULL if no content is available
it is up to the caller to free xmlNodeGetContent_APIParam_0 with xmlFree_APIName
Searches the language of a node , i.e
xmlNodeGetLang_APIParam_1 is the node being checked
the values of the xml
lang attribute or the one carried by the nearest ancestor
Searches the space preserving behaviour of a node , i.e
xmlNodeGetSpacePreserve_APIParam_1 is the node being checked
the values of the xml
xmlNodeGetLang_APIName returns a pointer to the lang value, or NULL if not found it is up to the caller to free xmlNodeGetLang_APIParam_0 with xmlFree_APIName
space attribute or the one carried by the nearest ancestor
xmlNodeGetSpacePreserve_APIName returns -1 if xmlspace is not inherited, 0 if "default", 1 if "preserve
Is this xmlNodeIsText_APIParam_1 a Text xmlNodeIsText_APIParam_1 ?
xmlNodeIsText_APIParam_1 is the xmlNodeIsText_APIParam_1
xmlNodeIsText_APIName returns 1 yes, 0 no
carried directly by this node
Read the value of a node , this can be either the text
xmlNodeListGetRawString_APIParam_1 is the document
xmlNodeListGetRawString_APIParam_2 is a Node xmlNodeListGetRawString_APIParam_2
xmlNodeListGetRawString_APIParam_3 is should we replace entity contents or show their external form
xmlNodeListGetRawString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName
xmlNodeListGetString_APIParam_1 is the document
xmlNodeListGetString_APIParam_2 is a Node xmlNodeListGetString_APIParam_2
Build the string equivalent to the text contained in the Node xmlNodeListGetString_APIParam_2 made of TEXTs and ENTITY_REFs
Builds the string equivalent to the text contained in the Node xmlNodeListGetRawString_APIParam_2 made of TEXTs and ENTITY_REFs , contrary to xmlNodeListGetString_APIName xmlNodeListGetRawString_APIName does not do any character encoding handling
xmlNodeListGetString_APIParam_3 is should we replace entity contents or show their external form
Set the base URI of a node , i.e
xmlNodeListGetString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName
the value of the xml
base attribute
xmlNodeSetBase_APIParam_1 is the node being changed
xmlNodeSetBase_APIParam_2 is the new base URI
Replace the xmlNodeSetContent_APIParam_2 of a node
xmlNodeSetContent_APIParam_1 is the node being modified
xmlNodeSetContent_APIParam_2 is the new value of the content
Replace the xmlNodeSetContentLen_APIParam_2 of a node
xmlNodeSetContentLen_APIParam_1 is the node being modified
xmlNodeSetContentLen_APIParam_2 is the new value of the xmlNodeSetContentLen_APIParam_2
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
xmlNodeSetContentLen_APIParam_3 is the size of @content
Set the language of a node , i.e
the values of the xml
lang attribute
xmlNodeSetLang_APIParam_1 is the node being changed
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
xmlNodeSetLang_APIParam_2 is the language description
Set the xmlNodeSetName_APIParam_2 of a node
xmlNodeSetName_APIParam_1 is the node being changed
xmlNodeSetName_APIParam_2 is the new tag name
Set the space preserving behaviour of a node , i.e
the value of the xml
space attribute
xmlNodeSetSpacePreserve_APIParam_1 is the node being changed
Finds the first closest previous sibling of the xmlPreviousElementSibling_APIParam_1 which is an element xmlPreviousElementSibling_APIParam_1
xmlPreviousElementSibling_APIParam_1 is the current xmlPreviousElementSibling_APIParam_1
xmlPreviousElementSibling_APIName returns the previous element sibling or NULL if not available
xmlReconciliateNs_APIName checks that all the namespaces declared within the given xmlReconciliateNs_APIParam_2 are properly declared
This is needed after Copy or Cut and paste operations
Note the handling of entities references is different than in the W3C DOM element traversal spec
The subtree may still hold pointers to namespace declarations outside the subtree or invalid/masked
xmlNodeSetSpacePreserve_APIParam_2 is the xmlspace value -LRB- `` 0 '' default , 1 `` preserve
xmlReconciliateNs_APIParam_1 is the document
As much as possible the function try to reuse the existing namespaces found in the new environment
xmlReconciliateNs_APIParam_2 is a node defining the subtree to reconciliate
xmlReconciliateNs_APIName returns the number of namespace declarations created or -1 in case of error
xmlRemoveProp_APIParam_1 is an attribute
xmlRemoveProp_APIName returns 0 if success and -1 in case of error
the new namespaces are redeclared on @tree at the top of the given subtree
Unlink and free one attribute , all the content is freed too Note this does not work for namespace definition attributes
xmlReplaceNode_APIParam_1 is the xmlReplaceNode_APIParam_1 node
Unlink the xmlReplaceNode_APIParam_1 node from its current context , prune the new one at the same place
xmlReplaceNode_APIParam_2 is the node
xmlReplaceNode_APIName returns the @old node
Dump an XML document to a file
xmlSaveFile_APIParam_1 is the xmlSaveFile_APIParam_1
it is first unlinked from its existing context
xmlSaveFile_APIParam_2 is the document
xmlSaveFile_APIName returns the number of bytes written or -1 in case of failure
Will use compression and enabled
Dump an XML document , converting it to the given xmlSaveFileEnc_APIParam_3
xmlSaveFileEnc_APIParam_1 is the xmlSaveFileEnc_APIParam_1
xmlSaveFileEnc_APIParam_2 is the document
xmlSaveFileEnc_APIParam_3 is the name of an xmlSaveFileEnc_APIParam_3
xmlSaveFileEnc_APIName returns the number of bytes written or -1 in case of failure
Dump an XML document to an I/O buffer
the stdout file is used
Warning !
This call xmlOutputBufferClose_APIName on xmlSaveFileTo_APIParam_1 which is not available after this call
xmlSaveFileTo_APIParam_1 is an output I/O buffer
xmlSaveFileTo_APIParam_2 is the document
xmlSaveFileTo_APIName returns the number of bytes written or -1 in case of failure
Dump an XML document to a file
xmlSaveFileTo_APIParam_3 is the xmlSaveFileTo_APIParam_3
xmlSaveFormatFile_APIParam_1 is the xmlSaveFormatFile_APIParam_1
Will use compression and enabled
xmlSaveFormatFile_APIParam_2 is the document
the document will be indented on output
xmlSaveFormatFile_APIParam_3 is should formatting spaces been added
xmlSaveFormatFile_APIName returns the number of bytes written or -1 in case of failure
Dump an XML document to a file or an URL
xmlSaveFormatFileEnc_APIParam_1 is the xmlSaveFormatFileEnc_APIParam_1 or URL to output
that @format = 1 provide node indenting
Note
xmlSaveFormatFileEnc_APIParam_2 is the document being saved
the stdout file is used
xmlSaveFormatFileEnc_APIParam_3 is the name of the xmlSaveFormatFileEnc_APIParam_3 to use or NULL
xmlSaveFormatFileEnc_APIParam_4 is should formatting spaces be added
xmlSaveFormatFileEnc_APIName returns the number of bytes written or -1 in case of error
Dump an XML document to an I/O buffer
Warning !
This call xmlOutputBufferClose_APIName on xmlSaveFormatFileTo_APIParam_1 which is not available after this call
xmlSaveFormatFileTo_APIParam_1 is an output I/O buffer
xmlSaveFormatFileTo_APIParam_2 is the document
that @format = 1 provide node indenting
Note
xmlSaveFormatFileTo_APIParam_4 is should formatting spaces been added
xmlSaveFormatFileTo_APIName returns the number of bytes written or -1 in case of failure
recurse on the parents until it finds the defined namespace or return NULL otherwise
Search a Ns registered under a given name space for a document
xmlSaveFormatFileTo_APIParam_3 is the xmlSaveFormatFileTo_APIParam_3
@nameSpace can be NULL , this is a search for the default namespace
We do not allow to cross entities boundaries
A warning is generated to cover this case
xmlSearchNs_APIParam_1 is the document
xmlSearchNs_APIParam_2 is the current xmlSearchNs_APIParam_2
xmlSearchNs_APIParam_3 is the namespace prefix
xmlSearchNs_APIName returns the namespace pointer or NULL
Search a Ns aliasing a given URI
Recurse on the parents until it finds the defined namespace or return NULL otherwise
xmlSearchNsByHref_APIParam_1 is the document
xmlSearchNsByHref_APIParam_2 is the current xmlSearchNsByHref_APIParam_2
xmlSearchNsByHref_APIParam_3 is the namespace value
xmlSearchNsByHref_APIName returns the namespace pointer or NULL
Set the buffer allocation method
xmlSetBufferAllocationScheme_APIParam_1 is allocation method to use
set the default compression xmlSetCompressMode_APIParam_1 used , ZLIB based Correct values
0 to 9
xmlSetCompressMode_APIParam_1 is the compression ratio
set the compression ratio for a document , ZLIB based Correct values
0 to 9
xmlSetDocCompressMode_APIParam_1 is the document
xmlSetDocCompressMode_APIParam_2 is the compression ratio
Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer
update all nodes in the xmlSetListDoc_APIParam_1 to point to the right document
xmlSetListDoc_APIParam_1 is the first element
xmlSetListDoc_APIParam_2 is the document
Associate a namespace to a xmlSetNs_APIParam_1 , a posteriori
xmlSetNs_APIParam_1 is a xmlSetNs_APIParam_1 in the document
xmlSetNs_APIParam_2 is a namespace pointer
Set an attribute carried by a xmlSetNsProp_APIParam_1
The xmlSetNsProp_APIParam_2 structure must be in scope , this is not checked
xmlSetNsProp_APIParam_1 is the xmlSetNsProp_APIParam_1
xmlSetNsProp_APIParam_2 is the namespace definition
xmlSetNsProp_APIParam_3 is the attribute xmlSetNsProp_APIParam_3
xmlSetNsProp_APIParam_4 is the attribute xmlSetNsProp_APIParam_4
xmlSetNsProp_APIName returns the attribute pointer
Set an attribute carried by a xmlSetProp_APIParam_1
xmlSetProp_APIParam_1 is the xmlSetProp_APIParam_1
xmlSetProp_APIParam_2 is the attribute xmlSetProp_APIParam_2
xmlSetProp_APIParam_3 is the attribute xmlSetProp_APIParam_3
xmlSetProp_APIName returns the attribute pointer
update all nodes under the xmlSetTreeDoc_APIParam_1 to point to the right document
xmlSetTreeDoc_APIParam_1 is the top element
xmlSetTreeDoc_APIParam_2 is the document
parse an XML qualified xmlSplitQName2_APIParam_1 string QName
= ?
xmlSplitQName2_APIParam_1 is the full QName
the corresponding namespace-binding will be used , if in scope
xmlSplitQName2_APIParam_2 is a xmlChar **
it is an error it there no such ns-binding for the prefix in scope
xmlSplitQName2_APIName returns NULL if the xmlSplitQName2_APIParam_1 does not have a xmlSplitQName2_APIParam_2
LocalPart Prefix
= NCName LocalPart
= NCName
Otherwise, returns the local part, and xmlSplitQName2_APIParam_2 is updated to get the Prefix
Both the return value and the xmlSplitQName2_APIParam_2 must be freed by the caller
parse an XML qualified xmlSplitQName3_APIParam_1 string , i
xmlSplitQName3_APIParam_1 is the full QName
xmlSplitQName3_APIParam_2 is an int *
Parse the xmlStringGetNodeList_APIParam_2 string and build the node list associated
Should produce a flat tree with only TEXTs and ENTITY_REFs
xmlStringGetNodeList_APIParam_1 is the document
xmlStringGetNodeList_APIParam_2 is the xmlStringGetNodeList_APIParam_2 of the attribute
xmlStringGetNodeList_APIName returns a pointer to the first child
Parse the xmlStringLenGetNodeList_APIParam_2 string and build the node list associated
xmlSplitQName3_APIName returns NULL if it is not a Qualified Name, otherwise, update xmlSplitQName3_APIParam_2 with the length in byte of the prefix and return a pointer to the start of the xmlSplitQName3_APIParam_1 without the prefix
Should produce a flat tree with only TEXTs and ENTITY_REFs
xmlStringLenGetNodeList_APIParam_1 is the document
xmlStringLenGetNodeList_APIParam_2 is the xmlStringLenGetNodeList_APIParam_2 of the text
xmlStringLenGetNodeList_APIParam_3 is the length of the string xmlStringLenGetNodeList_APIParam_2
xmlStringLenGetNodeList_APIName returns a pointer to the first child
Concat the given string at the end of the existing xmlTextConcat_APIParam_1 xmlTextConcat_APIParam_2
xmlTextConcat_APIParam_1 is the xmlTextConcat_APIParam_1
xmlTextConcat_APIParam_2 is the xmlTextConcat_APIParam_2
xmlTextConcat_APIParam_3 is @content length
xmlTextConcat_APIName returns -1 in case of error, 0 otherwise
Merge two text nodes into one
xmlTextMerge_APIParam_1 is the xmlTextMerge_APIParam_1 text node
xmlTextMerge_APIParam_2 is the xmlTextMerge_APIParam_2 text node being merged
xmlTextMerge_APIName returns the xmlTextMerge_APIParam_1 text node augmented
xmlUnlinkNode_APIParam_1 is the node
Remove an attribute carried by a xmlUnsetNsProp_APIParam_1
Note that namespace nodes can not be unlinked as they do not have pointer to their parent
xmlUnsetNsProp_APIParam_1 is the xmlUnsetNsProp_APIParam_1
xmlUnsetNsProp_APIParam_2 is the namespace definition
xmlUnsetNsProp_APIParam_3 is the attribute xmlUnsetNsProp_APIParam_3
xmlUnsetNsProp_APIName returns 0 if successful, -1 if not found
Remove an attribute carried by a xmlUnsetProp_APIParam_1
This handles only attributes in no namespace
xmlUnsetProp_APIParam_1 is the xmlUnsetProp_APIParam_1
xmlUnsetProp_APIParam_2 is the attribute xmlUnsetProp_APIParam_2
xmlUnsetProp_APIName returns 0 if successful, -1 if not found
the node is not freed
Unlink a node from it is current context , , use xmlFreeNode_APIName routine after the unlink to discard it
Check that a xmlValidateNCName_APIParam_1 conforms to the lexical xmlValidateNCName_APIParam_2 of NCName
xmlValidateNCName_APIParam_1 is the xmlValidateNCName_APIParam_1 to check
xmlValidateNCName_APIParam_2 allow spaces in front and end of the string
Check that a xmlValidateNMToken_APIParam_1 conforms to the lexical xmlValidateNMToken_APIParam_2 of NMToken
xmlValidateNMToken_APIParam_1 is the xmlValidateNMToken_APIParam_1 to check
xmlValidateNCName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlValidateNMToken_APIParam_2 allow spaces in front and end of the string
Check that a xmlValidateName_APIParam_1 conforms to the lexical xmlValidateName_APIParam_2 of Name
xmlValidateName_APIParam_1 is the xmlValidateName_APIParam_1 to check
xmlValidateNMToken_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlValidateName_APIParam_2 allow spaces in front and end of the string
xmlValidateName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
Check that a xmlValidateQName_APIParam_1 conforms to the lexical xmlValidateQName_APIParam_2 of QName
xmlValidateQName_APIParam_1 is the xmlValidateQName_APIParam_1 to check
xmlValidateQName_APIParam_2 allow spaces in front and end of the string
Daniel Veillard
xmlValidateQName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
The close operations unload the associated xmlModuleClose_APIParam_1 and free the data associated to the xmlModuleClose_APIParam_1
xmlModuleClose_APIParam_1 is the xmlModuleClose_APIParam_1 handle
xmlModuleFree_APIParam_1 is the xmlModuleFree_APIParam_1 handle
xmlModuleClose_APIName returns 0 in case of success, -1 in case of argument error and -2 if the xmlModuleClose_APIParam_1 could not be closed/unloaded
xmlModuleFree_APIName returns 0 in case of success, -1 in case of argument error
xmlModuleOpen_APIParam_2 are not yet implemented
The free operations free the data associated to the xmlModuleFree_APIParam_1 but does not unload the associated shared library which may still be in use
xmlModuleOpen_APIParam_1 is the module xmlModuleOpen_APIParam_1
Opens a module/shared library given its xmlModuleOpen_APIParam_1 or path NOTE
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
xmlModuleOpen_APIParam_2 is a set of xmlModuleOption
xmlModuleOpen_APIName returns a handle for the module or NULL in case of error
We canot guarantee that an UTF-8 string would work , which is why xmlModuleOpen_APIParam_1 is a const char * and not a const xmlChar *
xmlModuleSymbol_APIParam_1 is the xmlModuleSymbol_APIParam_1
xmlModuleSymbol_APIParam_2 is the xmlModuleSymbol_APIParam_2 of the xmlModuleSymbol_APIParam_3
Lookup for a xmlModuleSymbol_APIParam_3 address in the given xmlModuleSymbol_APIParam_1 NOTE
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
xmlModuleSymbol_APIParam_3 is the resulting xmlModuleSymbol_APIParam_3 address
Daniel Veillard
xmlModuleSymbol_APIName returns 0 if the xmlModuleSymbol_APIParam_3 was found, or -1 in case of error
We canot guarantee that an UTF-8 string would work , which is why xmlModuleSymbol_APIParam_2 is a const char * and not a const xmlChar *
UTF8ToHtml_APIParam_1 is a pointer to an array of bytes to store the result
UTF8ToHtml_APIParam_2 is the length of @out
Take a block of UTF-8 chars UTF8ToHtml_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars UTF8ToHtml_APIParam_1
UTF8ToHtml_APIParam_3 is a pointer to an array of UTF-8 chars
UTF8ToHtml_APIParam_4 is the length of @in
The value of @outlen after return is the number of octets consumed
htmlAttrAllowed_APIParam_1 is HTML element
Checks Has full knowledge of Required and Deprecated attributes
htmlAttrAllowed_APIParam_2 is HTML attribute
htmlAttrAllowed_APIParam_3 is whether to allow deprecated attributes
htmlAttrAllowed_APIName returns one of HTML_REQUIRED, HTML_VALID, HTML_DEPRECATED, HTML_INVALID
The HTML DTD allows a tag to implicitly close other tags
UTF8ToHtml_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable
The list is kept in htmlStartClose array
htmlAutoCloseTag_APIParam_1 is the HTML document
htmlAutoCloseTag_APIParam_2 is The tag htmlAutoCloseTag_APIParam_2
htmlAutoCloseTag_APIName checks if the element or one of The list is children would autoclose the given tag
htmlAutoCloseTag_APIParam_3 is the HTML element
htmlAutoCloseTag_APIName returns 1 if autoclose, 0 otherwise
Create a parser context for an HTML in-memory document
htmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array
htmlCreateMemoryParserCtxt_APIParam_2 is the htmlCreateMemoryParserCtxt_APIParam_2 of the array
htmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL
htmlCreatePushParserCtxt_APIParam_1 is a SAX handler
htmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks
htmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars
htmlCreatePushParserCtxt_APIParam_4 is number of chars in the array
htmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI
htmlCreatePushParserCtxt_APIParam_6 is an optional encoding
Create a parser context for using the HTML parser in push mode The value of @filename is used for fetching external entities and error/warning reports
htmlCreatePushParserCtxt_APIName returns the new parser context or NULL
parse an XML in-memory document and build a tree
This reuses the existing @ctxt parser context
htmlCtxtReadDoc_APIParam_1 is an HTML parser context
htmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string
htmlCtxtReadDoc_APIParam_3 is the base htmlCtxtReadDoc_APIParam_3 to use for the document
htmlCtxtReadDoc_APIParam_4 is the document htmlCtxtReadDoc_APIParam_4 , or NULL
htmlCtxtReadDoc_APIParam_5 is a combination of htmlParserOption
htmlCtxtReadDoc_APIName returns the resulting document tree
parse an XML from a file descriptor and build a tree
This reuses the existing @ctxt parser context
htmlCtxtReadFd_APIParam_1 is an HTML parser context
htmlCtxtReadFd_APIParam_2 is an open file descriptor
htmlCtxtReadFd_APIParam_3 is the base htmlCtxtReadFd_APIParam_3 to use for the document
htmlCtxtReadFd_APIParam_4 is the document htmlCtxtReadFd_APIParam_4 , or NULL
htmlCtxtReadFd_APIParam_5 is a combination of htmlParserOption
htmlCtxtReadFd_APIName returns the resulting document tree
parse an XML file from the filesystem or the network
This reuses the existing @ctxt parser context
htmlCtxtReadFile_APIParam_1 is an HTML parser context
htmlCtxtReadFile_APIParam_2 is a file or URL
htmlCtxtReadFile_APIParam_3 is the document htmlCtxtReadFile_APIParam_3 , or NULL
htmlCtxtReadFile_APIParam_4 is a combination of htmlParserOption
htmlCtxtReadFile_APIName returns the resulting document tree
parse an HTML document from I/O functions and source and build a tree
This reuses the existing @ctxt parser context
htmlCtxtReadIO_APIParam_1 is an HTML parser context
htmlCtxtReadIO_APIParam_2 is an I/O read function
htmlCtxtReadIO_APIParam_3 is an I/O close function
htmlCtxtReadIO_APIParam_4 is an I/O handler
htmlCtxtReadIO_APIParam_5 is the base htmlCtxtReadIO_APIParam_5 to use for the document
htmlCtxtReadIO_APIParam_6 is the document htmlCtxtReadIO_APIParam_6 , or NULL
htmlCtxtReadIO_APIParam_7 is a combination of htmlParserOption
htmlCtxtReadIO_APIName returns the resulting document tree
parse an XML in-memory document and build a tree
This reuses the existing @ctxt parser context
htmlCtxtReadMemory_APIParam_1 is an HTML parser context
htmlCtxtReadMemory_APIParam_2 is a pointer to a char array
htmlCtxtReadMemory_APIParam_3 is the htmlCtxtReadMemory_APIParam_3 of the array
htmlCtxtReadMemory_APIParam_4 is the base htmlCtxtReadMemory_APIParam_4 to use for the document
htmlCtxtReadMemory_APIParam_5 is the document htmlCtxtReadMemory_APIParam_5 , or NULL
htmlCtxtReadMemory_APIParam_6 is a combination of htmlParserOption
htmlCtxtReadMemory_APIName returns the resulting document tree
Reset a parser context
htmlCtxtReset_APIParam_1 is an HTML parser context
Applies the htmlCtxtUseOptions_APIParam_2 to the parser context
htmlCtxtUseOptions_APIParam_1 is an HTML parser context
htmlCtxtUseOptions_APIParam_2 is a combination of htmlParserOption
Checks whether an HTML element may be a direct child of a htmlElementAllowedHere_APIParam_1 element
htmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented htmlCtxtUseOptions_APIParam_2 in case of error
Note - does not check for deprecated elements
htmlElementAllowedHere_APIParam_1 is HTML htmlElementAllowedHere_APIParam_1 element
htmlElementAllowedHere_APIParam_2 is HTML element
htmlElementAllowedHere_APIName returns 1 if allowed
0 otherwise
Checks whether an HTML element may be a direct child of a htmlElementStatusHere_APIParam_1 element
htmlElementStatusHere_APIParam_1 is HTML htmlElementStatusHere_APIParam_1 element
htmlElementStatusHere_APIParam_2 is HTML element
htmlElementStatusHere_APIName returns one of HTML_VALID, HTML_DEPRECATED, HTML_INVALID
htmlEncodeEntities_APIParam_1 is a pointer to an array of bytes to store the result
htmlEncodeEntities_APIParam_2 is the length of @out
htmlEncodeEntities_APIParam_3 is a pointer to an array of UTF-8 chars
Take a block of UTF-8 chars htmlEncodeEntities_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars htmlEncodeEntities_APIParam_1
htmlEncodeEntities_APIParam_4 is the length of @in
htmlEncodeEntities_APIParam_5 is the quote character to escape or zero
The value of @outlen after return is the number of octets consumed
htmlEntityLookup_APIParam_1 is the entity htmlEntityLookup_APIParam_1
Lookup the given entity in EntitiesTable TODO
htmlEntityLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise
the linear scan is really ugly , an hash table is really needed
htmlEntityValueLookup_APIParam_1 is the entity unicode htmlEntityValueLookup_APIParam_1
Lookup the given entity in EntitiesTable TODO
htmlEntityValueLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise
the linear scan is really ugly , an hash table is really needed
htmlEncodeEntities_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable
Free all the memory used by a parser context
However the parsed document in ctxt - > myDoc is not freed
htmlFreeParserCtxt_APIParam_1 is an HTML parser context
Set and return the previous value for handling HTML omitted tags
htmlHandleOmittedElem_APIParam_1 is int 0 or 1. htmlHandleOmittedElem_APIName returns the last value for 0 for no handling, 1 for auto insertion
The HTML DTD allows a tag to implicitly close other tags
The list is kept in htmlStartClose array
htmlIsAutoClosed_APIParam_1 is the HTML document
htmlIsAutoClosed_APIName checks if a tag is autoclosed by one of a tag is child
htmlIsAutoClosed_APIParam_2 is the HTML element
htmlIsAutoClosed_APIName returns 1 if autoclosed, 0 otherwise
htmlIsScriptAttribute_APIParam_1 is an attribute htmlIsScriptAttribute_APIParam_1
htmlIsScriptAttribute_APIName returns 1 is the attribute is a script 0 otherwise
Allocate and initialize a new parser context
htmlNewParserCtxt_APIName returns the htmlParserCtxtPtr or NULL in case of allocation error
Check
Checks whether the tree htmlNodeStatus_APIParam_1 is valid
Experimental
htmlNodeStatus_APIParam_1 is an htmlNodePtr in a tree
htmlNodeStatus_APIParam_2 is whether to allow deprecated elements
htmlNodeStatus_APIName returns for Element nodes, a return from htmlElementAllowedHere  or htmlElementStatusHere
for Attribute nodes, a return from htmlAttrAllowed for other nodes, HTML_NA (no checks performed
htmlParseCharRef_APIParam_1 is an HTML parser context
Parse a Chunk of memory
htmlParseCharRef_APIName returns the value parsed (as an int
htmlParseChunk_APIParam_1 is an HTML parser context
htmlParseChunk_APIParam_2 is an char array
htmlParseChunk_APIParam_3 is the htmlParseChunk_APIParam_3 in byte of the htmlParseChunk_APIParam_2
htmlParseChunk_APIParam_4 is last htmlParseChunk_APIParam_2 indicator
htmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise
parse an HTML in-memory document and build a tree
htmlParseDoc_APIParam_1 is a pointer to an array of xmlChar
htmlParseDoc_APIName returns the resulting document tree
htmlParseDoc_APIParam_2 is a free form C string describing the HTML document htmlParseDoc_APIParam_2 , or NULL
parse an HTML document
htmlParseDocument_APIParam_1 is an HTML parser context
htmlParseDocument_APIName returns 0, -1 in case of error
the parser context is augmented as a result of the parsing
htmlParseElement_APIParam_1 is an HTML parser context
htmlParseEntityRef_APIParam_1 is an HTML parser context
htmlParseEntityRef_APIParam_2 is location to store the entity name
parse an HTML file and build a tree
htmlParseEntityRef_APIName returns the associated htmlEntityDescPtr if found, or NULL otherwise, if non-NULL *str will have to be freed by the caller
parse an HTML element , this is highly recursive this is kept for compatibility with previous code versions element
= EmptyElemTag | STag content ETag Attribute
= Name Eq AttValue
htmlParseFile_APIParam_1 is the htmlParseFile_APIParam_1
htmlParseFile_APIName returns the resulting document tree
htmlParseFile_APIParam_2 is a free form C string describing the HTML document htmlParseFile_APIParam_2 , or NULL
parse an XML in-memory document and build a tree
parse Reference declarations CharRef
document is provided by default
Automatic support for ZLIB/Compress compressed
parse an HTML ENTITY references EntityRef
= ' & # ' + '
= ' & ' Name '
htmlReadDoc_APIParam_1 is a pointer to a zero terminated string
htmlReadDoc_APIParam_2 is the base htmlReadDoc_APIParam_2 to use for the document
' | ' & # x ' + '
htmlReadDoc_APIParam_3 is the document htmlReadDoc_APIParam_3 , or NULL
htmlReadDoc_APIParam_4 is a combination of htmlParserOption
htmlReadDoc_APIName returns the resulting document tree
parse an XML from a file descriptor and build a tree
htmlReadFd_APIParam_1 is an open file descriptor
htmlReadFd_APIParam_2 is the base htmlReadFd_APIParam_2 to use for the document
htmlReadFd_APIParam_3 is the document htmlReadFd_APIParam_3 , or NULL
htmlReadFd_APIParam_4 is a combination of htmlParserOption
htmlReadFd_APIName returns the resulting document tree
parse an XML file from the filesystem or the network
htmlReadFile_APIParam_1 is a file or URL
htmlReadFile_APIParam_2 is the document htmlReadFile_APIParam_2 , or NULL
htmlReadFile_APIParam_3 is a combination of htmlParserOption
htmlReadFile_APIName returns the resulting document tree
parse an HTML document from I/O functions and source and build a tree
htmlReadIO_APIParam_1 is an I/O read function
htmlReadIO_APIParam_2 is an I/O close function
htmlReadIO_APIParam_3 is an I/O handler
htmlReadIO_APIParam_4 is the base htmlReadIO_APIParam_4 to use for the document
htmlReadIO_APIParam_5 is the document htmlReadIO_APIParam_5 , or NULL
htmlReadIO_APIParam_6 is a combination of htmlParserOption
htmlReadIO_APIName returns the resulting document tree
parse an XML in-memory document and build a tree
htmlReadMemory_APIParam_1 is a pointer to a char array
htmlReadMemory_APIParam_2 is the htmlReadMemory_APIParam_2 of the array
htmlReadMemory_APIParam_3 is the base htmlReadMemory_APIParam_3 to use for the document
htmlReadMemory_APIParam_4 is the document htmlReadMemory_APIParam_4 , or NULL
htmlReadMemory_APIParam_5 is a combination of htmlParserOption
htmlReadMemory_APIName returns the resulting document tree
Parse an HTML in-memory document
If htmlSAXParseDoc_APIParam_3 is NULL, fallback to the default DOM behavior and return a tree
htmlSAXParseDoc_APIParam_1 is a pointer to an array of xmlChar
htmlSAXParseDoc_APIParam_2 is a free form C string describing the HTML document htmlSAXParseDoc_APIParam_2 , or NULL
htmlSAXParseDoc_APIParam_3 is the SAX handler block
use the SAX callbacks to handle parse events
parse an HTML file and build a tree
htmlSAXParseDoc_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed
It use the given SAX function block to handle the parsing callback
htmlSAXParseDoc_APIParam_4 is
htmlSAXParseFile_APIParam_1 is the htmlSAXParseFile_APIParam_1
htmlSAXParseFile_APIParam_2 is a free form C string describing the HTML document htmlSAXParseFile_APIParam_2 , or NULL
htmlSAXParseFile_APIParam_3 is the SAX handler block
document is provided by default
Automatic support for ZLIB/Compress compressed
htmlSAXParseFile_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed
is NULL , fallback to the default DOM tree building routines
Lookup the HTML htmlTagLookup_APIParam_1 in the ElementTable
htmlTagLookup_APIParam_1 is The htmlTagLookup_APIParam_1 name in lowercase
htmlTagLookup_APIName returns the related htmlElemDescPtr or NULL if not found
Daniel Veillard
htmlSAXParseFile_APIParam_4 is
See xmlLinkGetData returns
xmlLinkGetData_APIParam_1 is a link
xmlLinkGetData_APIName returns a pointer to the data referenced from this link
Insert xmlListAppend_APIParam_2 in the ordered list at the end for this value
xmlListAppend_APIParam_1 is a list
xmlListAppend_APIParam_2 is the xmlListAppend_APIParam_2
xmlListAppend_APIName returns 0 in case of success, 1 in case of failure
Remove the all data in the list
xmlListClear_APIParam_1 is a list
Move all the element from the xmlListCopy_APIParam_2 list in the new list
xmlListCopy_APIParam_1 is the new list
xmlListCopy_APIParam_2 is the xmlListCopy_APIParam_2 list
xmlListCopy_APIName returns 0 in case of success 1 in case of error
Create a new list
xmlListCreate_APIParam_1 is an optional xmlListCreate_APIParam_1 function
xmlListCreate_APIParam_2 is an optional comparison function
xmlListCreate_APIName returns the new list or NULL in case of error
Callback function used to compare 2 data
xmlListDataCompare_APIParam_1 is the first data
xmlListDataCompare_APIParam_2 is the second data
xmlListDataCompare_APIName returns 0 is equality, -1 or 1 otherwise depending on the ordering
Callback function used to free data from a list
xmlListDeallocator_APIParam_1 is the data to deallocate
Deletes the list and its associated data
xmlListDelete_APIParam_1 is a list
Duplicate the list
xmlListDup_APIParam_1 is the list
xmlListDup_APIName returns a new copy of the list or NULL in case of error
Is the list empty ?
xmlListEmpty_APIParam_1 is a list
Get the last element in the list
xmlListEnd_APIParam_1 is a list
xmlListEmpty_APIName returns 1 if the list is empty, 0 if not empty and -1 in case of error
xmlListEnd_APIName returns the last element in the list, or NULL
Get the first element in the list
xmlListFront_APIParam_1 is a list
xmlListFront_APIName returns the first element in the list, or NULL
Insert xmlListInsert_APIParam_2 in the ordered list at the beginning for this value
xmlListInsert_APIParam_1 is a list
xmlListInsert_APIParam_2 is the xmlListInsert_APIParam_2
xmlListInsert_APIName returns 0 in case of success, 1 in case of failure
xmlListMerge_APIParam_1 is the original list
xmlListMerge_APIParam_2 is the new list
include all the elements of the second list in the first one and clear the second list
Removes the last element in the list
xmlListPopBack_APIParam_1 is a list
Removes the first element in the list
xmlListPopFront_APIParam_1 is a list
add the new xmlListPushBack_APIParam_2 at the end of the list
xmlListPushBack_APIParam_1 is a list
xmlListPushBack_APIParam_2 is new xmlListPushBack_APIParam_2
xmlListPushBack_APIName returns 1 if successful, 0 otherwise
add the new xmlListPushFront_APIParam_2 at the beginning of the list
xmlListPushFront_APIParam_1 is a list
xmlListPushFront_APIParam_2 is new xmlListPushFront_APIParam_2
xmlListPushFront_APIName returns 1 if successful, 0 otherwise
Remove the all instance associated to xmlListRemoveAll_APIParam_2 in the list
xmlListRemoveAll_APIParam_1 is a list
xmlListRemoveAll_APIParam_2 is list xmlListRemoveAll_APIParam_2
xmlListRemoveAll_APIName returns the number of deallocation, or 0 if not found
Remove the first instance associated to xmlListRemoveFirst_APIParam_2 in the list
xmlListRemoveFirst_APIParam_1 is a list
xmlListRemoveFirst_APIParam_2 is list xmlListRemoveFirst_APIParam_2
xmlListRemoveFirst_APIName returns 1 if a deallocation occurred, or 0 if not found
Remove the last instance associated to xmlListRemoveLast_APIParam_2 in the list
xmlListRemoveLast_APIParam_1 is a list
xmlListRemoveLast_APIParam_2 is list xmlListRemoveLast_APIParam_2
xmlListRemoveLast_APIName returns 1 if a deallocation occurred, or 0 if not found
Reverse the order of the elements in the list
xmlListReverse_APIParam_1 is a list
Search the list in reverse order for an existing value of @data
xmlListReverseSearch_APIParam_1 is a list
xmlListReverseSearch_APIParam_2 is a search value
xmlListReverseSearch_APIName returns the value associated to @data or NULL in case of error
xmlListReverseWalk_APIParam_1 is a list
xmlListReverseWalk_APIParam_2 is a processing function
Walk all the element of the list in reverse order and apply the xmlListReverseWalk_APIParam_2 function to it
xmlListReverseWalk_APIParam_3 is a xmlListReverseWalk_APIParam_3 parameter passed to the xmlListReverseWalk_APIParam_2 function
Search the list for an existing value of @data
xmlListSearch_APIParam_1 is a list
xmlListSearch_APIParam_2 is a search value
xmlListSearch_APIName returns the value associated to @data or NULL in case of error
Get the number of elements in the list
xmlListSize_APIParam_1 is a list
Sort all the elements in the list
xmlListSize_APIName returns the number of elements in the list or -1 in case of error
xmlListSort_APIParam_1 is a list
xmlListWalk_APIParam_1 is a list
xmlListWalk_APIParam_2 is a processing function
xmlListWalk_APIParam_3 is a xmlListWalk_APIParam_3 parameter passed to the xmlListWalk_APIParam_2 function
Walk all the element of the first from first to last and apply the xmlListWalk_APIParam_2 function to the xmlListWalk_APIParam_2 function
xmlListWalker_APIParam_1 is the xmlListWalker_APIParam_1 found in the list
xmlListWalker_APIParam_2 is extra xmlListWalker_APIParam_2 provided xmlListWalker_APIParam_1 to the walker
xmlListWalker_APIName returns 0 to stop walking the list, 1 otherwise
Daniel Veillard
Callback function used
Create a buffered parser output
xmlAllocOutputBuffer_APIParam_1 is the encoding converter or NULL
xmlAllocOutputBuffer_APIName returns the new parser output or NULL
Create a buffered parser input for progressive parsing
xmlAllocParserInputBuffer_APIName returns the new parser input or NULL
xmlCheckFilename_APIParam_1 is the xmlCheckFilename_APIParam_1 to check
xmlCheckFilename_APIName returns 1. if stat fails, returns 0
xmlAllocParserInputBuffer_APIParam_1 is the charset encoding
if stat succeeds and the file is a directory, returns 2. otherwise returns 1
function checks to see
xmlCheckHTTPInput_APIParam_1 is an XML parser context

xmlCheckHTTPInput_APIParam_2 is an XML parser input
xmlCheckHTTPInput_APIName returns the input or NULL in case of HTTP error
It also checks for HTTP errors in which case the input is cleanly freed up and an appropriate error is raised in context
clears the entire input callback table
this includes the compiled-in I/O
clears the entire output callback table
this includes the compiled-in I/O callbacks
Check an input in case it was created from an HTTP stream , in that case it will handle encoding and update of the base URL in case of redirection
Close an I/O channel
xmlFileClose_APIParam_1 is the I/O xmlFileClose_APIParam_1
xmlFileClose_APIName returns 0 or -1 in case of error
input from FILE *
xmlFileMatch_APIParam_1 is the URI for matching
xmlFileMatch_APIName returns 1 if matches, 0 otherwise
xmlFileOpen_APIParam_1 is the URI for matching
xmlFileOpen_APIName returns a handler or NULL in case or failure
Read @len bytes to @buffer from the I/O channel
xmlFileRead_APIParam_1 is the I/O xmlFileRead_APIParam_1
xmlFileRead_APIParam_2 is where to drop data
xmlFileRead_APIParam_3 is number of bytes to write
xmlFileRead_APIName returns the number of bytes written or < 0 in case of failure
try xmlFileOpen_real with an unescaped version of @filename
Wrapper around xmlFileOpen_real that
Free up the memory used by a buffered parser input
xmlFreeParserInputBuffer_APIParam_1 is a buffered parser input
Close an FTP I/O channel
xmlIOFTPClose_APIParam_1 is the I/O xmlIOFTPClose_APIParam_1
xmlIOFTPClose_APIName returns 0
check if the URI matches an FTP one
xmlIOFTPMatch_APIParam_1 is the URI for matching
xmlIOFTPMatch_APIName returns 1 if matches, 0 otherwise
open an FTP I/O channel
xmlIOFTPOpen_APIParam_1 is the URI for matching
xmlIOFTPOpen_APIName returns an I/O context or NULL in case of error
Read @len bytes to @buffer from the I/O channel
xmlIOFTPRead_APIParam_1 is the I/O xmlIOFTPRead_APIParam_1
xmlIOFTPRead_APIParam_2 is where to drop data
xmlIOFTPRead_APIParam_3 is number of bytes to write
xmlIOFTPRead_APIName returns the number of bytes written
Close an HTTP I/O channel
xmlIOHTTPClose_APIParam_1 is the I/O xmlIOHTTPClose_APIParam_1
xmlIOHTTPClose_APIName returns 0
check if the URI matches an HTTP one
xmlIOHTTPMatch_APIParam_1 is the URI for matching
xmlIOHTTPMatch_APIName returns 1 if matches, 0 otherwise
open an HTTP I/O channel
xmlIOHTTPOpen_APIParam_1 is the URI for matching
xmlIOHTTPOpen_APIName returns an I/O context or NULL in case of error
Open a temporary buffer to collect the document for a subsequent HTTP POST request
Non-static as is called from the output buffer creation routine
xmlIOHTTPOpenW_APIParam_1 is The destination URI for the document
xmlIOHTTPOpenW_APIParam_2 is The xmlIOHTTPOpenW_APIParam_2 desired for the document
xmlIOHTTPOpenW_APIName returns an I/O context or NULL in case of error
Read @len bytes to @buffer from the I/O channel
xmlIOHTTPRead_APIParam_1 is the I/O xmlIOHTTPRead_APIParam_1
xmlIOHTTPRead_APIParam_2 is where to drop data
xmlIOHTTPRead_APIParam_3 is number of bytes to write
xmlIOHTTPRead_APIName returns the number of bytes written
Callback used in the I/O Input API to close the resource
xmlInputCloseCallback_APIParam_1 is an Input xmlInputCloseCallback_APIParam_1
xmlInputCloseCallback_APIName returns 0 or -1 in case of error
xmlInputMatchCallback_APIParam_1 is the xmlInputMatchCallback_APIParam_1 or URI
xmlInputMatchCallback_APIName returns 1 if yes and 0 if another Input module should be used
Callback used in the I/O Input API to open the resource
xmlInputOpenCallback_APIParam_1 is the xmlInputOpenCallback_APIParam_1 or URI
xmlInputOpenCallback_APIName returns an Input context or NULL in case or error
Callback used in the I/O Input API to detect
Callback used in the I/O Input API to read the resource
xmlInputReadCallback_APIParam_1 is an Input xmlInputReadCallback_APIParam_1
xmlInputReadCallback_APIParam_2 is the xmlInputReadCallback_APIParam_2 to store data read
xmlInputReadCallback_APIParam_3 is the length of the xmlInputReadCallback_APIParam_2 in bytes
xmlInputReadCallback_APIName returns the number of bytes read or -1 in case of error
A specific entity loader disabling network accesses , though still allowing local catalog accesses for resolution
xmlNoNetExternalEntityLoader_APIParam_1 is the xmlNoNetExternalEntityLoader_APIParam_1 for the entity to load
xmlNoNetExternalEntityLoader_APIParam_2 is the System xmlNoNetExternalEntityLoader_APIParam_2 for the entity to load
xmlNoNetExternalEntityLoader_APIName returns a new allocated xmlParserInputPtr, or NULL
xmlNoNetExternalEntityLoader_APIParam_3 is the context in which the entity is called or NULL
xmlNormalizeWindowsPath_APIName is obsolete
Please see xmlURIFromPath in uri.c for a better solution
xmlNormalizeWindowsPath_APIParam_1 is the input file xmlNormalizeWindowsPath_APIParam_1
xmlNormalizeWindowsPath_APIName returns a canonicalized version of the path
flushes and close the output I/O channel and free up all the associated resources
xmlOutputBufferClose_APIParam_1 is a buffered output
xmlOutputBufferClose_APIName returns the number of byte written or -1 in case of error
Create a buffered output for the progressive saving to a xmlBuffer
xmlOutputBufferCreateBuffer_APIParam_1 is a xmlBufferPtr
xmlOutputBufferCreateBuffer_APIParam_2 is the encoding converter or NULL
xmlOutputBufferCreateBuffer_APIName returns the new parser output or NULL
Create a buffered output for the progressive saving to a file descriptor
xmlOutputBufferCreateFd_APIParam_1 is a file descriptor number
xmlOutputBufferCreateFd_APIParam_2 is the encoding converter or NULL
xmlOutputBufferCreateFd_APIName returns the new parser output or NULL
xmlOutputBufferCreateFile_APIParam_1 is a FILE *
Create a buffered output for the progressive saving to a FILE * buffered C I/O
xmlOutputBufferCreateFile_APIParam_2 is the encoding converter or NULL
xmlOutputBufferCreateFile_APIName returns the new parser output or NULL
xmlOutputBufferCreateFilename_APIParam_1 is a C string containing the xmlOutputBufferCreateFilename_APIParam_1 or filename
xmlOutputBufferCreateFilename_APIParam_2 is the encoding converter or NULL
xmlOutputBufferCreateFilename_APIParam_3 is the xmlOutputBufferCreateFilename_APIParam_3 ration
xmlOutputBufferCreateFilename_APIName returns the new output or NULL
document is provided by default
Automatic support for ZLIB/Compress compressed
the library only support writing to a local file
Create a buffered output for the progressive saving of a file '' - '
we use stdout as the output
Create a buffered output for the progressive saving to an I/O handler
xmlOutputBufferCreateIO_APIParam_1 is an I/O write function
xmlOutputBufferCreateIO_APIParam_2 is an I/O close function
xmlOutputBufferCreateIO_APIParam_3 is an I/O handler
xmlOutputBufferCreateIO_APIName returns the new parser output or NULL
flushes the output I/O channel
xmlOutputBufferFlush_APIParam_1 is a buffered output
xmlOutputBufferFlush_APIName returns the number of byte written or -1 in case of error
xmlOutputBufferCreateIO_APIParam_4 is the charset encoding
Gives a pointer to the data currently held in the output buffer
xmlOutputBufferGetContent_APIParam_1 is an xmlOutputBufferPtr
xmlOutputBufferGetContent_APIName returns a pointer to the data or NULL in case of error
Gives the length of the data currently held in the output buffer
xmlOutputBufferGetSize_APIParam_1 is an xmlOutputBufferPtr
xmlOutputBufferGetSize_APIName returns 0 in case or error or no data is held, the size otherwise
will store in case of partial or delayed writes
xmlOutputBufferWrite_APIParam_1 is a buffered parser output
xmlOutputBufferWrite_APIParam_2 is the size in bytes of the array
xmlOutputBufferWrite_APIParam_3 is an char array
xmlOutputBufferWrite_APIName returns the number of chars immediately written, or -1 in case of error
Write the content of the array in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e
will store in case of partial or delayed writes
xmlOutputBufferWriteEscape_APIParam_1 is a buffered parser output
xmlOutputBufferWriteEscape_APIParam_2 is a zero terminated UTF-8 string
xmlOutputBufferWriteEscape_APIParam_3 is an optional xmlOutputBufferWriteEscape_APIParam_3 function
xmlOutputBufferWriteEscape_APIName returns the number of chars immediately written, or -1 in case of error
will store in case of partial or delayed writes
xmlOutputBufferWriteString_APIParam_1 is a buffered parser output
xmlOutputBufferWriteString_APIParam_2 is a zero terminated C string
Write the content of the string in the output I/O buffer This routine escapes the caracters and handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e
xmlOutputBufferWriteString_APIName returns the number of chars immediately written, or -1 in case of error
Callback used in the I/O Output API to close the resource
Write the content of the string in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e
xmlOutputCloseCallback_APIParam_1 is an Output xmlOutputCloseCallback_APIParam_1
xmlOutputCloseCallback_APIName returns 0 or -1 in case of error
xmlOutputMatchCallback_APIParam_1 is the xmlOutputMatchCallback_APIParam_1 or URI
xmlOutputMatchCallback_APIName returns 1 if yes and 0 if another Output module should be used
Callback used in the I/O Output API to open the resource
xmlOutputOpenCallback_APIParam_1 is the xmlOutputOpenCallback_APIParam_1 or URI
xmlOutputOpenCallback_APIName returns an Output context or NULL in case or error
Callback used in the I/O Output API to write to the resource
Callback used in the I/O Output API to detect
xmlOutputWriteCallback_APIParam_1 is an Output xmlOutputWriteCallback_APIParam_1
xmlOutputWriteCallback_APIParam_2 is the xmlOutputWriteCallback_APIParam_2 of data to write
xmlOutputWriteCallback_APIParam_3 is the length of the xmlOutputWriteCallback_APIParam_2 in bytes
xmlOutputWriteCallback_APIName returns the number of bytes written or -1 in case of error
lookup the directory for that file
xmlParserGetDirectory_APIParam_1 is the path to a file
xmlParserGetDirectory_APIName returns a new allocated string containing the directory, or NULL
xmlParserInputBufferCreateFd_APIParam_1 is a file descriptor number
xmlParserInputBufferCreateFd_APIName returns the new parser input or NULL
Create a buffered parser input for the progressive parsing for the input from a file descriptor
xmlParserInputBufferCreateFile_APIParam_1 is a FILE *
Create a buffered parser input for the progressive parsing of a FILE * buffered C I/O
xmlParserInputBufferCreateFd_APIParam_2 is the charset encoding
xmlParserInputBufferCreateFile_APIName returns the new parser input or NULL
Do an encoding check if xmlParserInputBufferCreateFilename_APIParam_2 == XML_CHAR_ENCODING_NONE
xmlParserInputBufferCreateFile_APIParam_2 is the charset encoding
xmlParserInputBufferCreateFilename_APIParam_1 is a C string containing the xmlParserInputBufferCreateFilename_APIParam_1 or filename
xmlParserInputBufferCreateFilename_APIName returns the new parser input or NULL
document is provided by default
Automatic support for ZLIB/Compress compressed
xmlParserInputBufferCreateIO_APIParam_1 is an I/O read function
xmlParserInputBufferCreateIO_APIParam_2 is an I/O close function
Create a buffered parser input for the progressive parsing for the input from an I/O handler
Create a buffered parser input for the progressive parsing of a file '' - '
we use stdin as the input
xmlParserInputBufferCreateFilename_APIParam_2 is the charset encoding
xmlParserInputBufferCreateIO_APIParam_3 is an I/O handler
xmlParserInputBufferCreateIO_APIName returns the new parser input or NULL
xmlParserInputBufferCreateMem_APIParam_1 is the memory input
xmlParserInputBufferCreateMem_APIParam_2 is the length of the memory block
xmlParserInputBufferCreateIO_APIParam_4 is the charset encoding
Create a buffered parser input for the progressive parsing for the input from a memory area
xmlParserInputBufferCreateMem_APIName returns the new parser input or NULL
xmlParserInputBufferCreateStatic_APIParam_1 is the memory input
Create a buffered parser input for the progressive parsing for the input from an immutable memory area
xmlParserInputBufferCreateMem_APIParam_3 is the charset encoding
xmlParserInputBufferCreateStatic_APIParam_2 is the length of the memory block
xmlParserInputBufferCreateStatic_APIName returns the new parser input or NULL
xmlParserInputBufferGrow_APIParam_1 is a buffered parser input
xmlParserInputBufferGrow_APIParam_2 is indicative value of the amount of chars to read
xmlParserInputBufferGrow_APIName returns the number of chars read and stored xmlParserInputBufferGrow_APIParam_1 the buffer, or -1 xmlParserInputBufferGrow_APIParam_1 case of error
xmlParserInputBufferCreateStatic_APIParam_3 is the charset encoding
xmlParserInputBufferPush_APIParam_1 is a buffered parser input
xmlParserInputBufferPush_APIParam_2 is the size xmlParserInputBufferPush_APIParam_1 bytes of the array
xmlParserInputBufferPush_APIParam_3 is an char array
xmlParserInputBufferRead_APIParam_1 is a buffered parser input
xmlParserInputBufferPush_APIName returns the number of chars read and stored xmlParserInputBufferPush_APIParam_1 the buffer, or -1 xmlParserInputBufferPush_APIParam_1 case of error
xmlParserInputBufferRead_APIParam_2 is indicative value of the amount of chars to read
Clear the top input callback from the input stack
This will not copy the memory area to the buffer , but the memory is expected to be available until the end of the parsing , this is useful
xmlParserInputBufferRead_APIName returns the number of chars read and stored xmlParserInputBufferRead_APIParam_1 the buffer, or -1 xmlParserInputBufferRead_APIParam_1 case of error
Refresh the content of the input buffer , the old data are considered consumed This routine handle the I18N transcoding to internal UTF-8
this includes the compiled-in I/O
xmlPopInputCallbacks_APIName returns the number of input callback registered or -1 in case of error
Push the content of the arry xmlParserInputBufferPush_APIParam_1 the input buffer This routine handle the I18N transcoding to internal UTF-8 This is used
Registers the default compiled-in I/O handlers
Registers the default compiled-in I/O handlers
By default , libxml submits HTTP output requests using the `` PUT '' method
Calling this method changes the HTTP output method to use the `` POST '' method instead
Register a new set of I/O callback for handling parser input
xmlRegisterInputCallbacks_APIParam_1 is the xmlInputMatchCallback
xmlRegisterInputCallbacks_APIParam_2 is the xmlInputOpenCallback
xmlRegisterInputCallbacks_APIParam_3 is the xmlInputReadCallback
xmlRegisterInputCallbacks_APIParam_4 is the xmlInputCloseCallback
xmlRegisterInputCallbacks_APIName returns the registered handler number or -1 in case of error
Register a new set of I/O callback for handling output
xmlRegisterOutputCallbacks_APIParam_1 is the xmlOutputMatchCallback
xmlRegisterOutputCallbacks_APIParam_2 is the xmlOutputOpenCallback
xmlRegisterOutputCallbacks_APIParam_3 is the xmlOutputWriteCallback
xmlRegisterOutputCallbacks_APIParam_4 is the xmlOutputCloseCallback
xmlRegisterOutputCallbacks_APIName returns the registered handler number or -1 in case of error
Daniel Veillard
Add an entry in the catalog , it may overwrite existing but different entries
This routine is used
Grow up the content of the input buffer , the old data are preserved This routine handle the I18N transcoding to internal UTF-8
xmlACatalogAdd_APIParam_1 is a Catalog
xmlACatalogAdd_APIParam_2 is the xmlACatalogAdd_APIParam_2 of record to add to the catalog
one should be able to remove one extra copy by copying directly onto in - > buffer or in - > raw
xmlACatalogAdd_APIParam_3 is the system , public or prefix to match
xmlACatalogAdd_APIParam_4 is the replacement value for the match
xmlACatalogAdd_APIName returns 0 if successful, -1 otherwise
Dump the given catalog to the given file
xmlACatalogDump_APIParam_1 is a Catalog
xmlACatalogDump_APIParam_2 is the file
Remove an entry from the catalog
xmlACatalogRemove_APIParam_1 is a Catalog
xmlACatalogRemove_APIParam_2 is the xmlACatalogRemove_APIParam_2 to remove
xmlACatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise
Do a complete resolution lookup of an External Identifier
xmlACatalogResolve_APIParam_1 is a Catalog
xmlACatalogResolve_APIParam_2 is the public ID string
xmlACatalogResolve_APIParam_3 is the system ID string
xmlACatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
xmlACatalogResolvePublic_APIParam_1 is a Catalog
Try to lookup the catalog local reference associated to a public ID in that catalog
xmlACatalogResolvePublic_APIParam_2 is the public ID string
xmlACatalogResolvePublic_APIName returns the local resource if found or NULL otherwise, the value returned must be freed by the caller
Try to lookup the catalog resource for a system ID
xmlACatalogResolveSystem_APIParam_1 is a Catalog
xmlACatalogResolveSystem_APIParam_2 is the system ID string
Do a complete resolution lookup of an xmlACatalogResolveURI_APIParam_2
xmlACatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlACatalogResolveURI_APIParam_1 is a Catalog
xmlACatalogResolveURI_APIParam_2 is the xmlACatalogResolveURI_APIParam_2
xmlACatalogResolveURI_APIName returns the xmlACatalogResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller
Add an entry in the catalog , it may overwrite existing but different entries
xmlCatalogAdd_APIParam_1 is the xmlCatalogAdd_APIParam_1 of record to add to the catalog
xmlCatalogAdd_APIParam_2 is the system , public or prefix to match
xmlCatalogAdd_APIParam_3 is the replacement value for the match
xmlCatalogAdd_APIName returns 0 if successful, -1 otherwise
Add the new entry to the catalog list
xmlCatalogAddLocal_APIParam_1 is a document list of xmlCatalogAddLocal_APIParam_1
xmlCatalogAddLocal_APIParam_2 is the xmlCatalogAddLocal_APIParam_2 to a new local catalog
xmlCatalogAddLocal_APIName returns the updated list
Free up all the memory associated with catalogs
Convert all the SGML catalog entries as XML ones
xmlCatalogConvert_APIName returns the number of entries converted if successful, -1 otherwise
Dump all the global catalog content to the given file
xmlCatalogDump_APIParam_1 is the file
Free up the memory associated to the catalog list
xmlCatalogFreeLocal_APIParam_1 is a document list of catalogs
Used to get the user preference w.r.t
to what catalogs should be accepted
xmlCatalogGetDefaults_APIName returns the current xmlCatalogAllow value
Try to lookup the catalog reference associated to a public ID DEPRECATED , use xmlCatalogResolvePublic_APIName
xmlCatalogGetPublic_APIParam_1 is the public ID string
xmlCatalogGetPublic_APIName returns the resource if found or NULL otherwise
Try to lookup the catalog reference associated to a system ID DEPRECATED , use xmlCatalogResolveSystem_APIName
xmlCatalogGetSystem_APIParam_1 is the system ID string
xmlCatalogGetSystem_APIName returns the resource if found or NULL otherwise
Check is a catalog is empty
xmlCatalogIsEmpty_APIParam_1 is should this create an SGML catalog
xmlCatalogIsEmpty_APIName returns 1 if the catalog is empty, 0 if not, amd -1 in case of error
Do a complete resolution lookup of an External Identifier using a document private catalog list
xmlCatalogLocalResolve_APIParam_1 is a document list of xmlCatalogLocalResolve_APIParam_1
xmlCatalogLocalResolve_APIParam_2 is the public ID string
xmlCatalogLocalResolve_APIParam_3 is the system ID string
xmlCatalogLocalResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
Do a complete resolution lookup of an xmlCatalogLocalResolveURI_APIParam_2 using a document private catalog list
xmlCatalogLocalResolveURI_APIParam_1 is a document list of xmlCatalogLocalResolveURI_APIParam_1
xmlCatalogLocalResolveURI_APIParam_2 is the xmlCatalogLocalResolveURI_APIParam_2
Remove an entry from the catalog
xmlCatalogLocalResolveURI_APIName returns the xmlCatalogLocalResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller
xmlCatalogRemove_APIParam_1 is the xmlCatalogRemove_APIParam_1 to remove
xmlCatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise
Do a complete resolution lookup of an External Identifier
xmlCatalogResolve_APIParam_1 is the public ID string
xmlCatalogResolve_APIParam_2 is the system ID string
Try to lookup the catalog reference associated to a public ID
xmlCatalogResolvePublic_APIParam_1 is the public ID string
xmlCatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
Try to lookup the catalog resource for a system ID
xmlCatalogResolvePublic_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlCatalogResolveSystem_APIParam_1 is the system ID string
Do a complete resolution lookup of an xmlCatalogResolveURI_APIParam_1
xmlCatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlCatalogResolveURI_APIParam_1 is the xmlCatalogResolveURI_APIParam_1
xmlCatalogResolveURI_APIName returns the xmlCatalogResolveURI_APIParam_1 of the resource or NULL if not found, it must be freed by the caller
Used to set the debug xmlCatalogSetDebug_APIParam_1 for catalog operation , 0 disable debugging , 1 enable it
xmlCatalogSetDebug_APIParam_1 is the debug xmlCatalogSetDebug_APIParam_1 of catalogs required
xmlCatalogSetDebug_APIName returns the previous value of the catalog debugging level
Allows to set the preference between public and system for deletion in XML Catalog resolution
section 4.1.1 of the spec Values accepted are XML_CATA_PREFER_PUBLIC or XML_CATA_PREFER_SYSTEM
xmlCatalogSetDefaultPrefer_APIParam_1 is the default preference for delegation
xmlCatalogSetDefaultPrefer_APIName returns the previous value of the default preference for delegation
Used to set the user preference w.r.t
to what catalogs should be accepted
xmlCatalogSetDefaults_APIParam_1 is what catalogs should be accepted
Convert all the SGML catalog entries as XML ones
xmlConvertSGMLCatalog_APIParam_1 is the catalog
xmlConvertSGMLCatalog_APIName returns the number of entries converted if successful, -1 otherwise
Free the memory allocated to a Catalog
xmlFreeCatalog_APIParam_1 is a Catalog
Do the catalog initialization
xmlInitializeCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup
Load the catalog and build the associated data structures
On the other hand XML Catalogs are not handled recursively
xmlLoadACatalog_APIParam_1 is a file path
This can be either an XML Catalog or an SGML Catalog It will recurse in SGML CATALOG entries
xmlLoadACatalog_APIName returns the catalog parsed or NULL in case of error
Load the catalog and makes the catalog definitions effective for the default external entity loader
the catalog will recurse in SGML CATALOG entries
xmlLoadCatalog_APIParam_1 is a file path
xmlLoadCatalog_APIName returns 0 in case of success -1 in case of error
xmlLoadCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup
Load the catalogs and makes their definitions effective for the default external entity loader
xmlLoadCatalogs_APIName is not thread safe , catalog initialization should preferably be done once at startup
xmlLoadCatalogs_APIParam_1 is a list of directories separated by a colon or a space
Load an SGML super catalog
It will not expand CATALOG or DELEGATE references
xmlLoadSGMLSuperCatalog_APIParam_1 is a file path
xmlLoadSGMLSuperCatalog_APIName returns the catalog parsed or NULL in case of error
This is only needed for manipulating SGML Super Catalogs like adding and removing CATALOG or DELEGATE entries
create a new Catalog
xmlNewCatalog_APIParam_1 is should this create an SGML catalog
xmlNewCatalog_APIName returns the xmlCatalogPtr or NULL in case of error
parse an XML file and build a tree
it is like xmlParseFile_APIName except it bypass all catalog lookups
xmlParseCatalogFile_APIParam_1 is the xmlParseCatalogFile_APIParam_1
xmlParseCatalogFile_APIName returns the resulting document tree or NULL in case of error
Daniel Veillard
Checks and computes the values of facets
xmlSchemaCheckFacet_APIParam_1 is the xmlSchemaCheckFacet_APIParam_1
xmlSchemaCheckFacet_APIParam_2 is the schema type definition
xmlSchemaCheckFacet_APIParam_3 is the schema parser context or NULL
xmlSchemaCheckFacet_APIParam_4 is the optional xmlSchemaCheckFacet_APIParam_4 of the type
Cleanup the default XML Schemas type library
Removes and normalize white spaces in the string
xmlSchemaCollapseString_APIParam_1 is a xmlSchemaCollapseString_APIParam_1
xmlSchemaCheckFacet_APIName returns 0 if valid, a positive error code if not valid and -1 in case of an internal or API error
xmlSchemaCollapseString_APIName returns the new string or NULL if no change was required
Compare 2 values
xmlSchemaCompareValues_APIParam_1 is a first value
xmlSchemaCompareValues_APIParam_2 is a second value
Compare 2 values
xmlSchemaCompareValuesWhtsp_APIParam_1 is a first value
xmlSchemaCompareValuesWhtsp_APIParam_2 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_1
xmlSchemaCompareValuesWhtsp_APIParam_3 is a second value
xmlSchemaCompareValuesWhtsp_APIParam_4 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_3
Copies the precomputed value
xmlSchemaCompareValues_APIName returns -1 if xmlSchemaCompareValues_APIParam_1 < xmlSchemaCompareValues_APIParam_2, 0 if xmlSchemaCompareValues_APIParam_1 == xmlSchemaCompareValues_APIParam_2, 1 if xmlSchemaCompareValues_APIParam_1 > xmlSchemaCompareValues_APIParam_2, 2 if xmlSchemaCompareValues_APIParam_1 <> xmlSchemaCompareValues_APIParam_2, and -2 in case of error
This duplicates any string within
xmlSchemaCopyValue_APIParam_1 is the precomputed value to be copied
Deallocate a Schema Facet structure
xmlSchemaCopyValue_APIName returns the copy or NULL if a copy for a data-type is not implemented
xmlSchemaFreeFacet_APIParam_1 is a schema xmlSchemaFreeFacet_APIParam_1 structure
xmlSchemaCompareValuesWhtsp_APIName returns -1 if xmlSchemaCompareValuesWhtsp_APIParam_1 < xmlSchemaCompareValuesWhtsp_APIParam_3, 0 if xmlSchemaCompareValuesWhtsp_APIParam_1 == xmlSchemaCompareValuesWhtsp_APIParam_3, 1 if xmlSchemaCompareValuesWhtsp_APIParam_1 > xmlSchemaCompareValuesWhtsp_APIParam_3, 2 if xmlSchemaCompareValuesWhtsp_APIParam_1 <> xmlSchemaCompareValuesWhtsp_APIParam_3, and -2 in case of error
Cleanup the default XML Schemas type library
xmlSchemaFreeValue_APIParam_1 is the xmlSchemaFreeValue_APIParam_1 to free
Lookup function
xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 is the built-in simple xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1
Gives you the xmlSchemaGetBuiltInType_APIParam_1 struct for a built-in xmlSchemaGetBuiltInType_APIParam_1 by its xmlSchemaGetBuiltInType_APIParam_1 id
xmlSchemaGetBuiltInType_APIParam_1 is the xmlSchemaGetBuiltInType_APIParam_1 of the built in xmlSchemaGetBuiltInType_APIParam_1
xmlSchemaGetBuiltInType_APIName returns the xmlSchemaGetBuiltInType_APIParam_1 if found, NULL otherwise
xmlSchemaGetBuiltInListSimpleTypeItemType_APIName returns the item xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 of @type as defined by the built-in datatype hierarchy of XML Schema Part 2 Datatypes, or NULL in case of an error
Get the canonical lexical representation of the value
The caller has to FREE xmlSchemaGetCanonValue_APIParam_0
Some value types are not supported yet , resulting in a @retValue of '' ??? ''
This will be fixed in XML Schema 1.1
xmlSchemaGetCanonValue_APIParam_2 is xmlSchemaGetCanonValue_APIParam_0
XML Schema 1.0 does not define canonical representations for
duration , gYearMonth , gYear , gMonthDay , gMonth , gDay , anyURI , QName , NOTATION
Get the canonical representation of the value
The caller has to free xmlSchemaGetCanonValueWhtsp_APIParam_0
xmlSchemaGetCanonValueWhtsp_APIParam_1 is the precomputed value
xmlSchemaGetCanonValue_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors
xmlSchemaGetCanonValueWhtsp_APIParam_2 is xmlSchemaGetCanonValueWhtsp_APIParam_0
xmlSchemaGetCanonValueWhtsp_APIParam_3 is the whitespace type of the value
Extract the value of a xmlSchemaGetFacetValueAsULong_APIParam_1
xmlSchemaGetFacetValueAsULong_APIParam_1 is an schemas type xmlSchemaGetFacetValueAsULong_APIParam_1
xmlSchemaGetCanonValueWhtsp_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors
xmlSchemaGetFacetValueAsULong_APIName returns the value as a long
Lookup a type in the default XML Schemas type library
xmlSchemaGetPredefinedType_APIParam_1 is the type xmlSchemaGetPredefinedType_APIParam_1
xmlSchemaGetPredefinedType_APIName returns the type if found, NULL otherwise
Accessor for the type of a value
xmlSchemaGetValType_APIParam_1 is a schemas value
xmlSchemaGetValType_APIName returns the xmlSchemaValType of the value
Initialize the default XML Schemas type library
xmlSchemaIsBuiltInTypeFacet_APIParam_1 is the built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1
xmlSchemaIsBuiltInTypeFacet_APIParam_2 is the facet xmlSchemaIsBuiltInTypeFacet_APIParam_1
Allocate a new Facet structure
xmlSchemaNewFacet_APIName returns the newly allocated structure or NULL in case or error
Evaluates
Allocate a new NOTATION value
xmlSchemaIsBuiltInTypeFacet_APIName returns 1 if the facet can be used with the given built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1, 0 otherwise and -1 in case the xmlSchemaIsBuiltInTypeFacet_APIParam_1 is not a built-in type
xmlSchemaGetPredefinedType_APIParam_2 is the URI of the namespace usually `` http / / www.w3.org/2001/XMLSchema ''
The given values are consumed and freed with the struct
xmlSchemaNewNOTATIONValue_APIParam_1 is the notation xmlSchemaNewNOTATIONValue_APIParam_1
xmlSchemaNewNOTATIONValue_APIParam_2 is the notation namespace xmlSchemaNewNOTATIONValue_APIParam_1 or NULL
xmlSchemaNewNOTATIONValue_APIName returns a pointer to the new value or NULL in case of error
Allocate a new QName value
The given values are consumed and freed with the struct
xmlSchemaNewQNameValue_APIParam_1 is the namespace name
xmlSchemaNewQNameValue_APIParam_2 is the local name
xmlSchemaNewQNameValue_APIName returns a pointer to the new value or NULL in case of an error
Allocate a new simple xmlSchemaNewStringValue_APIParam_1 xmlSchemaNewStringValue_APIParam_2
The xmlSchemaNewStringValue_APIParam_1 can be of XML_SCHEMAS_STRING
This one is intended to be expanded for other string based types
We need this for anySimpleType as well
The given xmlSchemaNewStringValue_APIParam_2 is consumed and freed with the struct
xmlSchemaNewStringValue_APIParam_1 is the xmlSchemaNewStringValue_APIParam_2 xmlSchemaNewStringValue_APIParam_1
xmlSchemaNewStringValue_APIParam_2 is the xmlSchemaNewStringValue_APIParam_2
xmlSchemaNewStringValue_APIName returns a pointer to the new xmlSchemaNewStringValue_APIParam_2 or NULL in case of error
if true a xmlSchemaValPredefTypeNode_APIParam_2 is computed and returned in @val
Check that a xmlSchemaValPredefTypeNode_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNode_APIParam_1
xmlSchemaValPredefTypeNode_APIParam_1 is the predefined xmlSchemaValPredefTypeNode_APIParam_1
xmlSchemaValPredefTypeNode_APIParam_2 is the xmlSchemaValPredefTypeNode_APIParam_2 to check
xmlSchemaValPredefTypeNode_APIParam_3 is the return computed xmlSchemaValPredefTypeNode_APIParam_2
xmlSchemaValPredefTypeNode_APIParam_4 is the xmlSchemaValPredefTypeNode_APIParam_4 containing the xmlSchemaValPredefTypeNode_APIParam_2
if true a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is computed and returned in @val
Check that a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1
xmlSchemaValPredefTypeNode_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
This one does apply any normalization to the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2
xmlSchemaValPredefTypeNodeNoNorm_APIParam_1 is the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1
xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 to check
xmlSchemaValPredefTypeNodeNoNorm_APIParam_3 is the return computed xmlSchemaValPredefTypeNodeNoNorm_APIParam_2
xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 containing the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2
Check a xmlSchemaValidateFacet_APIParam_3 against a xmlSchemaValidateFacet_APIParam_2 condition
xmlSchemaValidateFacet_APIParam_1 is the xmlSchemaValidateFacet_APIParam_1 type
xmlSchemaValPredefTypeNodeNoNorm_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidateFacet_APIParam_2 is the xmlSchemaValidateFacet_APIParam_2 to check
xmlSchemaValidateFacet_APIParam_3 is the lexical repr of the xmlSchemaValidateFacet_APIParam_3 to validate
xmlSchemaValidateFacet_APIParam_4 is the precomputed xmlSchemaValidateFacet_APIParam_3
Check a xmlSchemaValidateFacetWhtsp_APIParam_4 against a xmlSchemaValidateFacetWhtsp_APIParam_1 condition
This takes xmlSchemaValidateFacetWhtsp_APIParam_4 normalization according to the specified whitespace types into account
xmlSchemaValidateFacet_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidateFacetWhtsp_APIParam_1 is the xmlSchemaValidateFacetWhtsp_APIParam_1 to check
xmlSchemaValidateFacetWhtsp_APIParam_2 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_1 xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValidateFacetWhtsp_APIParam_3 is the built-in type of the xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValidateFacetWhtsp_APIParam_4 is the lexical repr of the xmlSchemaValidateFacetWhtsp_APIParam_4 to validate
xmlSchemaValidateFacetWhtsp_APIParam_5 is the precomputed xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValidateFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValidateLengthFacet_APIParam_1 is the built-in xmlSchemaValidateLengthFacet_APIParam_1
Note that @value needs to be the * normalized * xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValidateLengthFacet_APIParam_2 is the xmlSchemaValidateLengthFacet_APIParam_2 to check
xmlSchemaValidateFacetWhtsp_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
Checka a xmlSchemaValidateLengthFacet_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacet_APIParam_2
sets @length to the computed xmlSchemaValidateLengthFacet_APIParam_5 of @value
xmlSchemaValidateLengthFacet_APIParam_3 is the lexical repr
of the xmlSchemaValidateLengthFacet_APIParam_3 to be validated
xmlSchemaValidateLengthFacet_APIParam_4 is the precomputed xmlSchemaValidateLengthFacet_APIParam_3
xmlSchemaValidateLengthFacet_APIParam_5 is the actual xmlSchemaValidateLengthFacet_APIParam_5 of the xmlSchemaValidateLengthFacet_APIParam_3
xmlSchemaValidateLengthFacetWhtsp_APIParam_1 is the xmlSchemaValidateLengthFacetWhtsp_APIParam_1 to check
xmlSchemaValidateLengthFacetWhtsp_APIParam_2 is the built-in type
xmlSchemaValidateLengthFacet_APIName returns 0 if the xmlSchemaValidateLengthFacet_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error
Checka a xmlSchemaValidateLengthFacetWhtsp_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacetWhtsp_APIParam_1
xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is the lexical repr
sets @length to the computed xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of @value
of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 to be validated
xmlSchemaValidateLengthFacetWhtsp_APIParam_4 is the precomputed xmlSchemaValidateLengthFacetWhtsp_APIParam_3
xmlSchemaValidateLengthFacetWhtsp_APIParam_5 is the actual xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3
xmlSchemaValidateLengthFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3
Checks the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 of a list simple type against a xmlSchemaValidateListSimpleTypeFacet_APIParam_1
xmlSchemaValidateListSimpleTypeFacet_APIParam_1 is the xmlSchemaValidateListSimpleTypeFacet_APIParam_1 to check
xmlSchemaValidateLengthFacetWhtsp_APIName returns 0 if the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error
xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is the lexical repr of the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 to validate
xmlSchemaValidateListSimpleTypeFacet_APIParam_3 is the number of list items
xmlSchemaValidateListSimpleTypeFacet_APIParam_4 is the resulting expected number of list items
xmlSchemaValidateListSimpleTypeFacet_APIName returns 0 if the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is valid, a positive error code number otherwise and -1 in case of an internal error
Check that a xmlSchemaValidatePredefinedType_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValidatePredefinedType_APIParam_1
if true a xmlSchemaValidatePredefinedType_APIParam_2 is computed and returned in @val
xmlSchemaValidatePredefinedType_APIParam_1 is the predefined xmlSchemaValidatePredefinedType_APIParam_1
xmlSchemaValidatePredefinedType_APIParam_2 is the xmlSchemaValidatePredefinedType_APIParam_2 to check
xmlSchemaValidatePredefinedType_APIParam_3 is the return computed xmlSchemaValidatePredefinedType_APIParam_2
Appends a next sibling to a list of computed values
xmlSchemaValueAppend_APIParam_1 is the value
xmlSchemaValidatePredefinedType_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValueAppend_APIParam_2 is the value to be appended
xmlSchemaValueAppend_APIName returns 0 if succeeded and -1 on API errors
Accessor for the boolean value of a computed value
xmlSchemaValueGetAsBoolean_APIParam_1 is the value
xmlSchemaValueGetAsBoolean_APIName returns 1 if true and 0 if false, or in case of an error
Accessor for the string value of a computed value
xmlSchemaValueGetAsString_APIParam_1 is the value
xmlSchemaValueGetAsString_APIName returns the string value or NULL if there was none, or on API errors
Accessor for the next sibling of a list of computed values
xmlSchemaValueGetNext_APIParam_1 is the value
xmlSchemaValueGetNext_APIName returns the next value or NULL if there was none, or on API errors
Replaces 0xd , 0x9 and 0xa with a space
xmlSchemaWhiteSpaceReplace_APIParam_1 is a xmlSchemaWhiteSpaceReplace_APIParam_1
Daniel Veillard
xmlSchemaWhiteSpaceReplace_APIName returns the new string or NULL if no change was required
