Compile the automata into a Reg Exp ready for being executed||||null
The automata should be free after this point||||null
xmlAutomataCompile_APIParam_1 is an automata||||null
xmlAutomataCompile_APIName returns the compiled regexp or NULL in case of error||||null
Initial state lookup||||null
xmlAutomataGetInitState_APIName returns the initial state of the automata||||null
xmlAutomataGetInitState_APIParam_1 is an automata||||null
xmlAutomataIsDeterminist_APIParam_1 is an automata||||null
xmlAutomataIsDeterminist_APIName returns 1 if true, 0 if not, and -1 in case of error||||null
xmlAutomataNewAllTrans_APIParam_1 is an automata||||null
xmlAutomataNewAllTrans_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewAllTrans_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewAllTrans_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewCountTrans_APIParam_1 is an automata||||null
Checks||||if an automata is determinist
xmlAutomataNewCountTrans_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewAllTrans_APIParam_4 allow xmlAutomataNewAllTrans_APIParam_3 transition||||if not all all transitions have been activated
xmlAutomataNewCountTrans_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewCountTrans_APIParam_4 is the input string associated xmlAutomataNewCountTrans_APIParam_3 that transition||||null
allowed only||||when all transitions xmlAutomataNewAllTrans_APIParam_2 the @from node have been activated
That transition is an epsilon transition||||null
xmlAutomataNewCountTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewCountTrans_APIParam_4||||null
xmlAutomataNewCountTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewCountTrans_APIParam_4||||null
xmlAutomataNewCountTrans_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewCountTrans_APIParam_7 is xmlAutomataNewCountTrans_APIParam_7 associated xmlAutomataNewCountTrans_APIParam_3 the transition||||null
xmlAutomataNewCountTrans2_APIParam_1 is an automata||||null
xmlAutomataNewCountTrans2_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewCountTrans2_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewCountTrans2_APIParam_4 is the input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition||||null
xmlAutomataNewCountTrans2_APIParam_5 is the second input string associated xmlAutomataNewCountTrans2_APIParam_3 that transition||||null
xmlAutomataNewCountTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewCountTrans2_APIParam_4||||null
xmlAutomataNewCountTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewCountTrans2_APIParam_4||||null
this creates first a new target state in the automata and adds a an ALL transition xmlAutomataNewAllTrans_APIParam_2 the @from state xmlAutomataNewAllTrans_APIParam_3 the target state||||If @to is NULL
xmlAutomataNewCountTrans2_APIParam_8 is xmlAutomataNewCountTrans2_APIParam_8 associated xmlAutomataNewCountTrans2_APIParam_3 the transition||||null
xmlAutomataNewCountTrans2_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewCountedTrans_APIParam_1 is an automata||||null
xmlAutomataNewCountedTrans_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewCountedTrans_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewCountedTrans_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewCountedTrans_APIParam_4 is the xmlAutomataNewCountedTrans_APIParam_4 associated xmlAutomataNewCountedTrans_APIParam_3 that transition||||null
Create a new counter||||null
xmlAutomataNewCounter_APIParam_1 is an automata||||null
xmlAutomataNewCounter_APIParam_2 is the minimal value on the counter||||null
xmlAutomataNewCounter_APIName returns the counter number or -1 in case of error||||null
xmlAutomataNewCounter_APIParam_3 is the maximal value on the counter||||null
xmlAutomataNewCounterTrans_APIParam_1 is an automata||||null
xmlAutomataNewCounterTrans_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewCounterTrans_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewCounterTrans_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewCounterTrans_APIParam_4 is the xmlAutomataNewCounterTrans_APIParam_4 associated xmlAutomataNewCounterTrans_APIParam_3 that transition||||null
xmlAutomataNewEpsilon_APIParam_1 is an automata||||null
xmlAutomataNewEpsilon_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewEpsilon_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewEpsilon_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewNegTrans_APIParam_1 is an automata||||null
xmlAutomataNewNegTrans_APIParam_2 is the starting point of the transition||||null
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCountedTrans_APIParam_2 the @from state xmlAutomataNewCountedTrans_APIParam_3 the target state which will increment the xmlAutomataNewCountedTrans_APIParam_4 provided||||If @to is NULL
xmlAutomataNewNegTrans_APIParam_3 is the target point of the transition or NULL||||null
this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans_APIParam_2 the @from state xmlAutomataNewCountTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max||||If @to is NULL
xmlAutomataNewNegTrans_APIParam_4 is the first input string associated xmlAutomataNewNegTrans_APIParam_3 that transition||||null
xmlAutomataNewNegTrans_APIParam_5 is the second input string associated xmlAutomataNewNegTrans_APIParam_3 that transition||||null
xmlAutomataNewNegTrans_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewOnceTrans_APIParam_1 is an automata||||null
xmlAutomataNewOnceTrans_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewOnceTrans_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewOnceTrans_APIParam_4 is the input string associated xmlAutomataNewOnceTrans_APIParam_3 that transition||||null
xmlAutomataNewOnceTrans_APIParam_5 is the minimum successive occurences of xmlAutomataNewOnceTrans_APIParam_4||||null
xmlAutomataNewOnceTrans_APIParam_6 is the maximum successive occurences of xmlAutomataNewOnceTrans_APIParam_4||||null
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewEpsilon_APIParam_2 the @from state xmlAutomataNewEpsilon_APIParam_3 the target state||||If @to is NULL
xmlAutomataNewOnceTrans_APIName returns the target state or NULL in case of error||||null
this creates first a new target state in the automata and adds a transition xmlAutomataNewCountTrans2_APIParam_2 the @from state xmlAutomataNewCountTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max||||If @to is NULL
xmlAutomataNewOnceTrans_APIParam_7 is xmlAutomataNewOnceTrans_APIParam_7 associated xmlAutomataNewOnceTrans_APIParam_3 the transition||||null
xmlAutomataNewNegTrans_APIParam_6 is xmlAutomataNewNegTrans_APIParam_6 passed xmlAutomataNewNegTrans_APIParam_3 the callback function||||if the transition is activated
xmlAutomataNewOnceTrans2_APIParam_1 is an automata||||null
xmlAutomataNewOnceTrans2_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewOnceTrans2_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewOnceTrans2_APIParam_4 is the input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition||||null
xmlAutomataNewOnceTrans2_APIParam_5 is the second input string associated xmlAutomataNewOnceTrans2_APIParam_3 that transition||||null
xmlAutomataNewOnceTrans2_APIParam_6 is the minimum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4||||null
xmlAutomataNewOnceTrans2_APIParam_7 is the maximum successive occurences of xmlAutomataNewOnceTrans2_APIParam_4||||null
xmlAutomataNewOnceTrans2_APIParam_8 is xmlAutomataNewOnceTrans2_APIParam_8 associated xmlAutomataNewOnceTrans2_APIParam_3 the transition||||null
xmlAutomataNewOnceTrans2_APIName returns the target state or NULL in case of error||||null
Create a new disconnected state in the automata||||null
xmlAutomataNewState_APIParam_1 is an automata||||null
xmlAutomataNewState_APIName returns the new state or NULL in case of error||||null
xmlAutomataNewTransition_APIParam_1 is an automata||||null
xmlAutomataNewTransition_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewTransition_APIParam_3 is the target point of the transition or NULL||||null
this creates first a new target state in the automata and adds an epsilon transition xmlAutomataNewCounterTrans_APIParam_2 the @from state xmlAutomataNewCounterTrans_APIParam_3 the target state which will be allowed only if the xmlAutomataNewCounterTrans_APIParam_4 is within the right range||||If @to is NULL
xmlAutomataNewTransition_APIParam_4 is the input string associated xmlAutomataNewTransition_APIParam_3 that transition||||null
xmlAutomataNewTransition_APIName returns the target state or NULL in case of error||||null
xmlAutomataNewTransition2_APIParam_1 is an automata||||null
xmlAutomataNewTransition2_APIParam_2 is the starting point of the transition||||null
xmlAutomataNewTransition2_APIParam_3 is the target point of the transition or NULL||||null
xmlAutomataNewTransition2_APIParam_4 is the first input string associated xmlAutomataNewTransition2_APIParam_3 that transition||||null
xmlAutomataNewTransition2_APIParam_5 is the second input string associated xmlAutomataNewTransition2_APIParam_3 that transition||||null
xmlAutomataNewTransition_APIParam_5 is xmlAutomataNewTransition_APIParam_5 passed xmlAutomataNewTransition_APIParam_3 the callback function||||if the transition is activated
this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition_APIParam_2 the @from state xmlAutomataNewTransition_APIParam_3 the target state activated by the value of @token||||If @to is NULL
this creates first a new target state in the automata and adds a transition xmlAutomataNewTransition2_APIParam_2 the @from state xmlAutomataNewTransition2_APIParam_3 the target state activated by the value of @token||||If @to is NULL
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans_APIParam_2 the @from state xmlAutomataNewOnceTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max , moreover that transition can only be crossed once||||If @to is NULL
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans2_APIParam_2 the @from state xmlAutomataNewOnceTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max , moreover that transition can only be crossed once||||If @to is NULL
this creates first a new target state in the automata and adds a transition xmlAutomataNewNegTrans_APIParam_2 the @from state xmlAutomataNewNegTrans_APIParam_3 the target state activated by any value except Note that if @token2 is not NULL , will not match xmlAutomataNewNegTrans_APIParam_3 follow # the semantic of XSD ## other||||If @to is NULL
xmlAutomataNewTransition2_APIName returns the target state or NULL in case of error||||null
Makes that xmlAutomataSetFinalState_APIParam_2 a final xmlAutomataSetFinalState_APIParam_2||||null
xmlAutomataSetFinalState_APIParam_1 is an automata||||null
xmlAutomataSetFinalState_APIParam_2 is a xmlAutomataSetFinalState_APIParam_2 in this automata||||null
xmlAutomataNewTransition2_APIParam_6 is xmlAutomataNewTransition2_APIParam_6 passed xmlAutomataNewTransition2_APIParam_3 the callback function||||if the transition is activated
Free an automata||||null
xmlAutomataSetFinalState_APIName returns 0 or -1 in case of error||||null
xmlFreeAutomata_APIParam_1 is an automata||||null
Create a new automata||||null
Daniel Veillard||||null
xmlNewAutomata_APINamereturns the new object or NULL in case of failure||||null
xmlCleanupThreads_APIName_APIName is used to to cleanup all the thread related data of the libxml2 library once processing has ended||||null
xmlFreeMutex_APIName_APIName is used to reclaim resources associated with a libxml2 token struct||||null
xmlFreeMutex_APIParam_1 is the simple mutex||||null
In case of doubt abstain from calling xmlCleanupThreads_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind||||null
xmlRFreeMutex_APIName is used to reclaim resources associated with a reentrant mutex||||null
xmlFreeRMutex_APIParam_1 is the reentrant mutex||||null
xmlGetGlobalState_APIName returns the thread global state or NULL in case of error||||null
xmlGetGlobalState_APIName_APIName is called to retrieve the global state for a thread||||null
xmlGetThreadId_APIName returns the current thread ID number||||null
xmlInitThreads_APIName_APIName is used to to initialize all the thread related data of the libxml2 library||||null
may crash the application if another thread or a plugin is still using libxml2||||if your application is multithreaded or has plugin support calling this
xmlLockLibrary_APIName_APIName is used to take out a re-entrant lock on the libxml2 library||||null
xmlMutexLock_APIName_APIName is used to lock a libxml2 token||||null
xmlMutexLock_APIParam_1 is the simple mutex||||null
xmlMutexUnlock_APIName_APIName is used to unlock a libxml2 token||||null
xmlMutexUnlock_APIParam_1 is the simple mutex||||null
xmlNewMutex_APIName_APIName returns a new simple mutex pointer or NULL in case of error||||null
xmlNewRMutex_APIName returns the new reentrant mutex pointer or NULL in case of error||||null
xmlNewMutex_APIName_APIName is used to allocate a libxml2 token struct for use in synchronizing access to data||||null
it is sometimes very hard to guess||||if libxml2 is in use in the application
some libraries or plugins may use it without notice||||null
xmlRNewMutex_APIName is used to allocate a reentrant mutex for use in synchronizing access to data||||null
xmlRMutexLock_APIName_APIName is used to lock a libxml2 token_r||||null
xmlRMutexLock_APIParam_1 is the reentrant mutex||||null
xmlGetThreadId_APIName_APIName find the current thread ID number Note that this is likely to be broken on some platforms using pthreads as the specification does not mandate pthread_t to be an integer type||||null
xmlRMutexUnlock_APIName_APIName is used to unlock a libxml2 token_r||||null
xmlRMutexUnlock_APIParam_1 is the reentrant mutex||||null
Daniel Veillard||||null
token_r is a re-entrant lock and thus useful for synchronizing access to data structures that may be manipulated in a recursive fashion||||null
xmlUnlockLibrary_APIName is used to release a re-entrant lock on the libxml2 library||||null
Create a parser context for a file content||||null
htmlCreateFileParserCtxt_APIParam_1 is the htmlCreateFileParserCtxt_APIParam_1||||null
htmlCreateFileParserCtxt_APIName returns the new parser context or NULL||||null
This is not reentrant||||null
Initialize the htmlStartCloseIndex for fast lookup of closing tags names||||null
htmlCreateFileParserCtxt_APIParam_2 is a free form C string describing the HTML document htmlCreateFileParserCtxt_APIParam_2 , or NULL||||null
Pops the top parser input from the input stack||||null
Call xmlInitParser_APIName once before processing in case of use in multithreaded programs||||null
inputPop_APIName returns the input just removed||||null
inputPop_APIParam_1 is an XML parser context||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
inputPush_APIParam_1 is an XML parser context||||null
Pushes a new parser input on top of the input stack||||null
inputPush_APIParam_2 is the parser input||||null
Pops the top element name from the name stack||||null
namePop_APIName returns the name just removed||||null
namePop_APIParam_1 is an XML parser context||||null
namePush_APIParam_1 is an XML parser context||||null
namePush_APIParam_2 is the element name||||null
Pushes a new element name on top of the name stack||||null
Pops the top element node from the node stack||||null
nodePop_APIParam_1 is an XML parser context||||null
nodePop_APIName returns the node just removed||||null
nodePush_APIParam_1 is an XML parser context||||null
Pushes a new element node on top of the node stack||||null
nodePush_APIParam_2 is the element node||||null
xmlCheckLanguageID_APIParam_1 is pointer to the string value||||null
xmlCopyChar_APIParam_1 is Ignored , compatibility||||null
append the char value in the array||||null
xmlCopyChar_APIParam_2 is pointer to an array of xmlChar||||null
xmlCopyChar_APIParam_3 is the char value||||null
xmlCopyChar_APIName returns the number of xmlChar written||||null
Checks that the value conforms to the LanguageID production||||null
xmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL||||null
this is somewhat deprecated , those productions were removed from the XML Second edition||||null
append the char value in the array||||null
xmlCreateEntityParserCtxt_APIName returns the new parser context or NULL||||null
xmlCopyCharMultiByte_APIParam_2 is the char value||||null
xmlCreateFileParserCtxt_APIParam_1 is the xmlCreateFileParserCtxt_APIParam_1||||null
xmlCreateEntityParserCtxt_APIParam_2 is the entity PUBLIC xmlCreateEntityParserCtxt_APIParam_2||||null
xmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array||||null
xmlCreateMemoryParserCtxt_APIParam_2 is the xmlCreateMemoryParserCtxt_APIParam_2 of the array||||null
xmlCopyCharMultiByte_APIParam_1 is pointer to an array of xmlChar||||null
xmlCreateEntityParserCtxt_APIParam_3 is a possible xmlCreateEntityParserCtxt_APIParam_3 for the target URI||||null
xmlCreateURLParserCtxt_APIParam_1 is the xmlCreateURLParserCtxt_APIParam_1 or URL||||null
xmlCreateFileParserCtxt_APIName returns the new parser context or NULL||||null
xmlCreateEntityParserCtxt_APIParam_1 is the entity xmlCreateEntityParserCtxt_APIParam_1||||null
xmlCopyCharMultiByte_APIName returns the number of xmlChar written||||null
Create a parser context for a file content||||null
Create a parser context for a file or URL content||||null
Create a parser context for an XML in-memory document||||null
xmlCreateURLParserCtxt_APIParam_2 is a combination of xmlParserOption||||null
xmlCreateURLParserCtxt_APIName returns the new parser context or NULL||||null
xmlCurrentChar_APIParam_1 is the XML parser context||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
xmlCurrentChar_APIParam_2 is pointer to the length of the char read||||null
xmlCurrentChar_APIName returns the current char value and its length||||null
document is provided by default||||if found at compile-time and for file accesses
Automatic support for ZLIB/Compress compressed||||null
xmlDecodeEntities_APIParam_1 is the parser context||||null
This behavior can conveniently be produced by normalizing all line breaks to #xA on input , before parsing . -RRB-||||null
The current char value , this may actually span multiple bytes in the input buffer||||if using UTF-8
document is provided by default||||if found at compile-time
Create a parser context for an external entity Automatic support for ZLIB/Compress compressed||||null
xmlDecodeEntities_APIName is deprecated , we now always process entities content through xmlStringDecodeEntities TODO||||null
xmlDecodeEntities_APIParam_2 is the xmlDecodeEntities_APIParam_2 to decode -LRB- in bytes !||||null
remove it in next major release||||null
xmlDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF||||null
-RRB- , -1 for no size limit||||null
xmlErrMemory_APIParam_2 is xmlErrMemory_APIParam_2 informations||||null
xmlEntityReferenceFunc_APIParam_1 is the entity||||null
Free up an xmlFreeInputStream_APIParam_1 stream||||null
xmlErrMemory_APIParam_1 is an XML parser context||||null
xmlFreeInputStream_APIParam_1 is an xmlParserInputPtr||||null
xmlDecodeEntities_APIParam_4 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
Handle a redefinition of attribute error||||null
xmlDecodeEntities_APIParam_6 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
xmlDecodeEntities_APIParam_5 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
xmlIsLetter_APIParam_1 is an unicode character||||null
xmlEntityReferenceFunc_APIParam_3 is the last nod in the chunk||||null
xmlHandleEntity_APIParam_1 is an XML parser context||||null
xmlDecodeEntities_APIName returns A newly allocated string with the substitution done||||null
to be removed at some point||||null
The caller must deallocate it||||null
xmlHandleEntity_APIParam_2 is an XML xmlHandleEntity_APIParam_2 pointer||||null
xmlEntityReferenceFunc_APIParam_2 is the fist node in the chunk||||null
parse an XML namespace name||||null
= BaseChar | Ideographic||||null
not on raw input||||null
xmlNamespaceParseNCName_APIName returns the namespace name or NULL||||null
xmlNamespaceParseNCName_APIParam_1 is an XML parser context||||null
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e||||null
= EntityRef | CharRef PEReference||||null
not on raw input||||null
= ' % ' Name '||||null
xmlNamespaceParseNSDef_APIParam_1 is an XML parser context||||null
parse a namespace prefix declaration TODO||||null
Implement the end of line normalization||||null
xmlNamespaceParseNSDef_APIName returns the namespace name||||null
| ' - ' | '_' | CombiningChar | Extender||||null
not on raw input||||null
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e||||null
Callback function used inherited from an entity replacement||||when one needs to be able to track back the provenance of a chunk of nodes
parse an XML qualified name QName||||null
= ?||||null
xmlNamespaceParseQName_APIParam_1 is an XML parser context||||null
= * NCNameChar||||null
xmlNamespaceParseQName_APIParam_2 is a xmlChar **||||null
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e||||null
xmlNamespaceParseQName_APIName returns the local part, and xmlNamespaceParseQName_APIParam_2 is updated to get the Prefix if any||||null
= PrefixDef Eq SystemLiteral PrefixDef||||null
= ` xmlns ' ?||||null
Create a new input stream based on an xmlEntityPtr||||null
= Letter | Digit | ' . '||||null
xmlNewEntityInputStream_APIParam_1 is an XML parser context||||null
xmlNewEntityInputStream_APIParam_2 is an Entity pointer||||null
xmlNewEntityInputStream_APIName returns the new input stream or NULL||||null
LocalPart Prefix||||null
= NCName LocalPart||||null
= NCName||||null
xmlNewInputFromFile_APIParam_1 is an XML parser context||||null
Create a new input stream based on a file or an URL||||null
xmlNewInputFromFile_APIParam_2 is the xmlNewInputFromFile_APIParam_2 to use as entity||||null
xmlNewInputFromFile_APIName returns the new input stream or NULL in case of error||||null
Create a new input stream structure||||null
xmlNewInputStream_APIName returns the new input stream or NULL||||null
xmlNewInputStream_APIParam_1 is an XML parser context||||null
Create a new input stream based on a memory xmlNewStringInputStream_APIParam_2||||null
xmlNewStringInputStream_APIParam_1 is an XML parser context||||null
xmlNewStringInputStream_APIName returns the new input stream||||null
xmlNewStringInputStream_APIParam_2 is an memory xmlNewStringInputStream_APIParam_2||||null
Skip to the next char input char||||null
xmlNextChar_APIParam_1 is the XML parser context||||null
xmlParseAttValue_APIName returns the AttValue parsed or NULL||||null
xmlParseAttValue_APIParam_1 is an XML parser context||||null
2.11 End-of-Line Handling Wherever an external parsed entity or the literal entity value of an internal parsed entity contains either the literal two-character sequence '' #xD #xA '' or a standalone literal #xD , an XML processor must pass to the application the single character #xA||||null
The value has to be freed by the caller||||null
= S ?||||null
The attribute must have been declared||||null
the xmlParseAttribute_APIParam_2 must be of the type declared for it||||null
parse an attribute Attribute||||null
' = ' S ?||||null
is handled independently as a namespace definition||||null
xmlParseAttribute_APIParam_1 is an XML parser context||||null
With namespace||||null
= Name Eq AttValue Attribute values can not contain direct or indirect entity references to external entities||||null
xmlParseAttribute_APIName returns the attribute name, and the xmlParseAttribute_APIParam_2 in *value||||null
= QName Eq AttValue Also the case QName == xmlns||||null
All attributes should be treated by a non-validating parser declared CDATA||||as if
xmlParseAttribute_APIParam_2 is a xmlChar ** used to store the xmlParseAttribute_APIParam_2 of the attribute||||null
xmlParseAttributeType_APIName returns the attribute type||||null
xmlParseAttributeListDecl_APIParam_1 is an XML parser context||||null
The replacement text of any entity referred to directly or indirectly in an attribute xmlParseAttribute_APIParam_2 must not contain a <||||null
Parse escaped pure raw content||||null
xmlParseAttributeType_APIParam_1 is an XML parser context||||null
IDREF values must match the value of some ID attribute||||null
No element type may have more than one ID attribute specified||||null
An ID attribute must have a declared default of #IMPLIED or #REQUIRED||||null
Values of type NMTOKEN must match the Nmtoken production||||null
values of type NMTOKENS must match Nmtokens||||null
' > ' AttDef||||null
= S Name S AttType S DefaultDecl||||null
Values of type ENTITY must match the Name production , values of type ENTITIES must match Names||||null
parse the Attribute list def for an element AttlistDecl||||null
xmlParseAttributeType_APIParam_2 is the enumeration xmlParseAttributeType_APIParam_2 built||||while parsing
A name must not appear more than once in an XML document as a value of this type||||null
= ' < !||||null
parse the Attribute list def for an element AttType||||null
parse a CharData section||||null
each Entity Name must match the name of an unparsed entity declared in the DTD||||null
xmlParseComment_APIParam_1 is an XML parser context||||null
i.e. , ID values must uniquely identify the elements which bear them||||null
Values of type IDREF must match the Name production , and values of type IDREFS must match Names||||null
= StringType | TokenizedType | EnumeratedType StringType||||null
xmlParseContent_APIParam_1 is an XML parser context||||null
= ` CDATA ' TokenizedType||||null
xmlParseCharRef_APIParam_1 is an XML parser context||||null
handled in xmlParseAttValue_APIName||||null
each IDREF Name must match the value of an ID attribute on some element in the XML document||||null
xmlParseCDSect_APIParam_1 is an XML parser context||||null
Parse a content||||null
= *||||null
xmlParseCharData_APIParam_1 is an XML parser context||||null
Parse an attribute default declaration DefaultDecl||||null
= ` ID ' | ` IDREF ' | ` IDREFS ' | ` ENTITY ' | ` ENTITIES ' | ` NMTOKEN ' | ` NMTOKENS ' Validity constraints for attribute values syntax are checked in xmlValidateAttributeValue_APIName Values of type ID must match the Name production||||null
= ' #REQUIRED ' | ' #IMPLIED ' | ?||||null
xmlParseCharRef_APIName returns the value parsed , 0 in case of error||||null
xmlParseDefaultDecl_APIParam_1 is an XML parser context||||null
xmlParseCharData_APIParam_2 is int indicating||||null
= * -||||null
The declared default xmlParseDefaultDecl_APIParam_2 must meet the lexical constraints of the declared attribute type c.f||||null
xmlParseDefaultDecl_APIName returns XML_ATTRIBUTE_NONE, XML_ATTRIBUTE_REQUIRED, XML_ATTRIBUTE_IMPLIED or XML_ATTRIBUTE_FIXED||||null
xmlParseDefaultDecl_APIParam_2 Receive a possible fixed default xmlParseDefaultDecl_APIParam_2 for the attribute||||null
Skip an XML comment <!-- .... --> The spec says that `` For compatibility , the string '' -- '' must not occur within comments . ''||||null
xmlParseDocTypeDecl_APIParam_1 is an XML parser context||||null
= CDStart CData CDEnd CDStart||||null
xmlParseElement_APIParam_1 is an XML parser context||||null
= ' < !||||null
parse a DOCTYPE declaration doctypedecl||||null
= -RRB- CDEnd||||null
= ' < !||||null
= -LRB- ' ? '||||null
parse an XML element , this is highly recursive element||||null
= ' -RSB- -RSB- > '||||null
cp -LRB- S ?||||null
= EmptyElemTag | STag content ETag The Name in an element end-tag must match the element type in the start-tag||||null
' | ' S ?||||null
| ' * ' | ' + ' -RRB- ?||||null
instances of that attribute must match the default xmlParseDefaultDecl_APIParam_2||||xmlValidateAttributeDecl_APIName if an attribute has a default xmlParseDefaultDecl_APIParam_2 declared with the #FIXED keyword
= ' -LRB- ' S ?||||null
cp -LRB- S ?||||null
| ' * ' | ' + ' -RRB- ?||||null
= ' -LRB- ' S ?||||null
' , ' S ?||||null
cp -RRB- * S ? ' -RRB- '||||null
applies to and TODO Parameter-entity replacement text must be properly nested with parenthesized groups||||null
xmlParseElementChildrenContentDecl_APIParam_1 is an XML parser context||||null
cp -RRB- * S ? ' -RRB- '||||null
xmlParseElementChildrenContentDecl_APIName returns the tree of xmlElementContentPtr describing the element hierarchy||||null
xmlParseElementChildrenContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks||||null
xmlParseElementContentDecl_APIParam_1 is an XML parser context||||null
xmlParseElementContentDecl_APIParam_2 is the xmlParseElementContentDecl_APIParam_2 of the element being defined||||null
xmlParseElementContentDecl_APIName returns the type of element content XML_ELEMENT_TYPE_xxx||||null
parse an Element declaration||||null
xmlParseElementDecl_APIName returns the type of the element, or -1 in case of error||||null
= ' < !||||null
xmlParseElementDecl_APIParam_1 is an XML parser context||||null
' #PCDATA ' -LRB- S ?||||null
' | ' S ?||||null
will be stored||||here if any
Name -RRB- * S ?||||null
xmlParseElementContentDecl_APIParam_3 is the Element Content pointer||||null
parse the declaration for a Mixed Element content The leading ' -LRB- ' ? '||||null
xmlParseElementMixedContentDecl_APIParam_1 is an XML parser context||||null
parse the declaration for an Element content either Mixed or Children , the cases EMPTY and ANY are handled directly in xmlParseElementDecl contentspec||||null
= 'EM PTY ' | ` ANY ' | Mixed | children||||null
marks an end of section||||if we are within a CDATA section ' -RSB- -RSB- > '
applies to too The same name must not appear more than once in a single mixed-content declaration||||null
' #PCDATA ' S ? ' -RRB- '||||null
xmlParseElementMixedContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks||||null
parse the XML encoding name EncName||||null
xmlParseElementMixedContentDecl_APIName returns the list of the xmlElementContentPtr describing the element choices||||null
= *||||null
xmlParseEncName_APIName returns the encoding name value or NULL||||null
xmlParseEncName_APIParam_1 is an XML parser context||||null
' > ' No element type may be declared more than once||||null
xmlParseEncodingDecl_APIParam_1 is an XML parser context||||null
' -RRB- * ' | ' -LRB- ' S ?||||null
xmlParseEncodingDecl_APIName returns the encoding value or NULL||||null
parse the XML encoding declaration EncodingDecl||||null
= S ` encoding ' Eq this setups the conversion filters||||null
' > ' The Name in the document type declaration must match the element type of the root element||||null
xmlParseEndTag_APIParam_1 is an XML parser context||||null
xmlParseEntityDecl_APIParam_1 is an XML parser context||||null
' > ' EntityDef||||null
= EntityValue |||||null
= EntityValue | ExternalID NDataDecl||||null
parse an end of tag ETag||||null
The declaration of a parameter entity must precede any reference to it||||null
= S ` NDATA ' S Name The Name must match the declared name of a notation||||null
An entity reference must not contain the name of an unparsed entity||||null
xmlParseEntityRef_APIParam_1 is an XML parser context||||null
= ' < / ' Name S ?||||null
' > ' With namespace ETag||||null
' > ' PEDecl||||null
its replacement text should not be empty||||if a parameter-entity reference appears in a choice , seq , or Mixed construct
For interoperability , , and neither the first nor last non-blank character of the replacement text should be a connector||||null
xmlParseEntityValue_APIParam_1 is an XML parser context||||null
That is to say||||if either of the opening or closing parentheses in a choice , seq , or Mixed construct is contained in the replacement text for a parameter entity , both must be contained in the same replacement text
= ' < / ' QName S ?||||null
parse an Enumerated attribute type||||null
xmlParseEntityValue_APIName returns the EntityValue parsed with reference substituted or NULL||||null
Similarly , the declaration of a general entity must precede any reference to it which appears in a default value in an attribute-list declaration||||null
parse < !||||null
= GEDecl | PEDecl GEDecl||||null
Name -LRB- S ?||||null
' | ' S ?||||null
= ' < !||||null
= ' < !||||null
Name -RRB- * S ?||||null
= NotationType | Enumeration NotationType||||null
xmlParseEntityValue_APIParam_2 is a copy of the original entity value||||if non-NULL store
parse a value for ENTITY declarations EntityValue||||null
parse Reference declarations CharRef||||null
The right angle bracket may be represented using the string '' & gt||||null
= ' & # ' + '||||null
= ` NOTATION ' S ' -LRB- ' S ?||||null
xmlParseEnumeratedType_APIParam_1 is an XML parser context||||null
xmlParseEnumeratedType_APIName returns XML_ATTRIBUTE_ENUMERATION or XML_ATTRIBUTE_NOTATION||||null
parse an Enumeration attribute type||||null
Nmtoken -LRB- S ?||||null
' | ' & # x ' + '||||null
' | ' S ?||||null
' Characters referred to using character references must match the production for Char||||null
xmlParseEnumerationType_APIParam_1 is an XML parser context||||null
= ' -LRB- ' S ?||||null
xmlParseEnumerationType_APIName returns the enumeration attribute tree built while parsing||||null
Values of this type must match one of the Nmtoken tokens in the declaration||||null
xmlParseEnumeratedType_APIParam_2 is the enumeration xmlParseEnumeratedType_APIParam_2 built||||while parsing
a non-validating processor is not obligated to read and process their declarations||||if entities are declared in the external subset or in external parameter entities
Note that||||null
'' , and must , for compatibility , be escaped using '' & gt||||null
Nmtoken -RRB- * S ? ' -RRB- '||||null
is a well-formedness constraint standalone =||||only if
for such documents , the rule that an entity must be declared ` yes '||||null
= ' '' ' * ' '' ' | '' ' '' * '' ' ''||||null
parse the declaration for a Mixed Element content The leading ' -LRB- ' and spaces have been skipped in xmlParseElementContentDecl Mixed||||null
= ' -LRB- ' S ?||||null
AttValue -RRB- , the attribute must be specified for all elements of the type in the attribute-list declaration||||if the default declaration is the keyword #REQUIRED
'' or a character reference||||when it appears in the string '' -RSB- -RSB- > '' in content , when that string is not marking the end of a CDATA section
xmlParseExternalID_APIParam_1 is an XML parser context||||null
xmlParseExternalID_APIParam_2 is a xmlChar ** receiving PubidLiteral||||null
xmlParseExternalID_APIParam_3 is indicate||||null
parse Markup declarations from an external subset extSubset||||null
= textDecl ?||||null
xmlParseExternalSubset_APIParam_1 is an XML parser context||||null
extSubsetDecl extSubsetDecl||||null
= *||||null
xmlParseExternalSubset_APIParam_2 is the external identifier||||null
xmlParseExternalID_APIName returns the function returns SystemLiteral and in the second case xmlParseExternalID_APIParam_2 receives PubidLiteral, is xmlParseExternalID_APIParam_3 is off it is possible to return NULL and have xmlParseExternalID_APIParam_2 set||||null
xmlParseExternalSubset_APIParam_3 is the system identifier -LRB- or URL||||null
xmlParseMarkupDecl_APIParam_1 is an XML parser context||||null
parse an XML Misc * optional field||||null
parse an XML name||||null
parse Markup declarations markupdecl||||null
In the internal DTD subset , parameter-entity references can occur only where markup declarations can occur , not within markup declarations||||null
xmlParseName_APIParam_1 is an XML parser context||||null
= Comment | PI | S. xmlParseMisc_APIParam_1 is an XML parser context||||null
xmlParseName_APIName returns the Name parsed or NULL||||null
= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment Parameter-entity replacement text must be properly nested with markup declarations||||null
parse specific PI ' < ?||||null
xmlParseNamespace_APIParam_1 is an XML parser context||||null
parse an XML Nmtoken||||null
xmlParseNmtoken_APIParam_1 is an XML parser context||||null
xmlParseNmtoken_APIName returns the Nmtoken parsed or NULL||||null
xmlParseNotationDecl_APIParam_1 is an XML parser context||||null
= Letter | Digit | ' . '||||null
parse an Notation attribute type||||null
= + Nmtokens||||null
= Nmtoken *||||null
Name -LRB- S ?||||null
parse a notation declaration NotationDecl||||null
= ' < !||||null
' | ' S ?||||null
xmlParseNotationType_APIParam_1 is an XML parser context||||null
xmlParseNotationType_APIName returns the notation attribute tree built while parsing||||null
' > ' Hence there is actually 3 choices||||null
Name -RRB- * S ? ' -RRB- '||||null
misleading but this is handled||||null
The declaration of a parameter entity must precede any reference to it||||null
Values of this type must match one of the notation names included in the declaration||||null
parse PEReference declarations The entity content is handled directly by pushing it is content as a new input stream||||null
all notation names in the declaration must be declared||||null
xmlParsePEReference_APIParam_1 is an XML parser context||||null
That is to say||||if either the first character or the last character of a markup declaration is contained in the replacement text for a parameter-entity reference , both must be contained in the same replacement text
parse an XML Processing Instruction||||null
` PUBLIC ' S PubidLiteral ` PUBLIC ' S PubidLiteral S SystemLiteral and ` SYSTEM ' S SystemLiteral See the NOTE on xmlParseExternalID_APIName||||null
PITarget -RRB- -RRB- ?||||null
In a document with an external subset or external parameter entities with `` standalone = ` no ' ''||||null
= ' < ? '||||null
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD||||null
xmlParsePI_APIParam_1 is an XML parser context||||null
' ? > '||||null
parse the name of a PI PITarget||||null
xmlParsePITarget_APIName returns the PITarget name or NULL||||null
xmlParsePITarget_APIParam_1 is an XML parser context||||null
= Name - -RRB-||||null
xmlParsePubidLiteral_APIName returns the PubidLiteral parsed or NULL||||null
xmlParsePubidLiteral_APIParam_1 is an XML parser context||||null
Parse and return a string between quotes or doublequotes TODO||||null
xmlParseQuotedString_APIParam_1 is an XML parser context||||null
xmlParseQuotedString_APIName returns the string parser or NULL||||null
Deprecated , to be removed at next drop of binary compatibility||||null
= EntityRef | CharRef||||null
xmlParseReference_APIParam_1 is an XML parser context||||null
xmlParseSDDecl_APIParam_1 is an XML parser context||||null
parse a start of tag either for rule element or EmptyElement||||null
In both case we do not parse the tag closing chars||||null
| ' - ' | '_' | '||||null
||||if the parser was asked to switch to that mode
' | CombiningChar | Extender Name||||null
= * Names||||null
' > ' No attribute name may appear more than once in the same start-tag or empty-element tag||||null
= Name *||||null
support is still here||||as if it was declared on the root of the Tree
This is what the older xml-name Working Draft specified , a bunch of other stuff may still rely on it , so||||null
' / > ' No attribute name may appear more than once in the same start-tag or empty-element tag||||null
- -LRB- TODO||||null
xmlParseStartTag_APIName returns the element name parsed||||null
xmlParseStartTag_APIParam_1 is an XML parser context||||null
remove from library To be removed at next drop of binary compatibility||||null
= ' < ' Name * S ?||||null
parse an XML Literal SystemLiteral||||null
= |||||null
xmlParseSystemLiteral_APIName returns the SystemLiteral parsed or NULL||||null
xmlParseSystemLiteral_APIParam_1 is an XML parser context||||null
= ' < ' Name * S ?||||null
With namespace||||null
' > ' EmptyElement||||null
EncodingDecl S ?||||null
parse an XML declaration header for external entities TextDecl||||null
= ' < ' QName * S ?||||null
= ' < ?||||null
xmlParseSDDecl_APIName returns 1 if standalone="yes" 0 if standalone="no" -2 if standalone attribute is missing or invalid (A standalone value of -2 means that the XML declaration was found, but no value was specified for the standalone attribute||||null
xmlParseTextDecl_APIParam_1 is an XML parser context||||null
= ' < ' QName * S ?||||null
parse the XML version||||null
parse and handle entity references in content , depending on the SAX interface , this may end-up in a call to character_APIName||||if this is a CharRef , a predefined entity , if there is no reference_APIName callback
the leading ` NOTATION ' S part has already being parsed ... NotationType||||null
parse an XML public literal PubidLiteral||||null
= ' % ' Name '||||null
= S ` version ' Eq Eq||||null
= S ?||||null
xmlParseVersionInfo_APIName returns the version string, e.g||||null
xmlParseVersionInfo_APIParam_1 is an XML parser context||||null
= ` NOTATION ' S ' -LRB- ' S ?||||null
parse the XML version value||||null
+ In practice allow||||null
xmlParseVersionNum_APIParam_1 is an XML parser context||||null
xmlParseVersionNum_APIName returns the string giving the XML version number, or NULL||||null
= ' 1 . '||||null
parse an XML declaration header XMLDecl||||null
= ' < ?||||null
xmlParseXMLDecl_APIParam_1 is an XML parser context||||null
= ' '' ' PubidChar * ' '' ' | '' ' '' * '' ' ''||||null
' A parsed entity must not contain a recursive reference to itself , either directly or indirectly||||null
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''||||null
The declaration of a parameter entity must precede any reference to it||||null
misleading but this is handled||||null
xmlParserHandlePEReference_APIParam_1 is the parser context||||null
In a document with an external subset or external parameter entities with `` standalone = ` no ' ''||||null
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD||||null
- Included in literal in entity values - Included as Parameter Entity reference within DTDs||||null
A PEReference may have been detected in the current input stream the handling is done accordingly to http||||null
xmlParserHandleReference_APIParam_1 is the parser context||||null
Remove , now deprecated ... the test is done directly in the content parsing routines||||null
/ / www.w3.org/TR/REC-xml#entproc i.e||||null
xmlParserInputShrink_APIName removes used input for the parser||||null
xmlParserInputShrink_APIParam_1 is an XML parser input||||null
xmlPopInput_APIName returns the current xmlChar in the parser context||||null
xmlPopInput_APIParam_1 is an XML parser context||||null
the current input pointed by ctxt->input came to an end pop it and return the next char||||null
xmlPushInput_APIParam_1 is an XML parser context||||null
xmlPushInput_APIParam_2 is an XML parser xmlPushInput_APIParam_2 fragment||||null
xmlPushInput_APIName returns -1 in case of error or the index in the xmlPushInput_APIParam_2 stack||||null
switch to a new xmlPushInput_APIParam_2 stream which is stacked on top of the previous one||||null
xmlScanName_APIName returns the Name parsed or NULL||||null
xmlScanName_APIParam_1 is an XML parser context||||null
parse an XML name but without consuming the input flow Needed for rollback cases||||null
xmlSetEntityReferenceFunc_APIParam_1 is A valid function||||null
seems deprecated now , only used in the default part of xmlParserHandleReference NameChar||||null
xmlSkipBlankChars_APIParam_1 is the XML parser context||||null
skip all blanks character found at that point in the input streams||||null
Used only||||when parsing entities references
xmlSkipBlankChars_APIName returns the number of space chars skipped||||null
= Letter | Digit | ' . '||||null
parse an UTF8 encoded XML qualified xmlSplitQName_APIParam_2 string QName||||null
= ?||||null
xmlSplitQName_APIParam_1 is an XML parser context||||null
xmlSplitQName_APIParam_2 is an XML parser context||||null
Set the function to call call back||||when a xml reference has been made
xmlSplitQName_APIName returns the local part, and xmlSplitQName_APIParam_3 is updated to get the Prefix if any||||null
xmlSplitQName_APIParam_3 is a xmlChar **||||null
xmlStringCurrentChar_APIParam_1 is the XML parser context||||null
It pops up finished entities in the process||||if allowable at that point
LocalPart Prefix||||null
xmlStringCurrentChar_APIParam_2 is pointer to the beginning of the char||||null
= NCName LocalPart||||null
= NCName||||null
xmlStringCurrentChar_APIName returns the current char value and its length||||null
xmlStringCurrentChar_APIParam_3 is pointer to the length of the char read||||null
xmlStringDecodeEntities_APIParam_1 is the parser context||||null
Takes a entity string content and process to do the adequate substitutions||||null
xmlStringDecodeEntities_APIParam_2 is the input string||||null
xmlStringDecodeEntities_APIParam_3 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF||||null
The current char value , this may actually span multiple bytes in the input buffer||||if using UTF-8
xmlStringDecodeEntities_APIName returns A newly allocated string with the substitution done||||null
The caller must deallocate it||||null
Takes a entity string content and process to do the adequate substitutions||||null
xmlStringLenDecodeEntities_APIParam_1 is the parser context||||null
xmlStringDecodeEntities_APIParam_4 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
xmlStringLenDecodeEntities_APIParam_2 is the input string||||null
xmlStringLenDecodeEntities_APIParam_3 is the string length||||null
xmlStringDecodeEntities_APIParam_6 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
xmlStringDecodeEntities_APIParam_5 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0||||if none
xmlStringLenDecodeEntities_APIParam_4 is combination of XML_SUBSTITUTE_REF and XML_SUBSTITUTE_PEREF||||null
xmlStringLenDecodeEntities_APIName returns A newly allocated string with the substitution done||||null
= EntityRef | CharRef PEReference||||null
The caller must deallocate it||||null
= ' % ' Name '||||null
xmlSwitchEncoding_APIParam_1 is the parser context||||null
xmlStringLenDecodeEntities_APIParam_6 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0||||if none
= ' % ' Name '||||null
xmlStringLenDecodeEntities_APIParam_5 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0||||if none
xmlSwitchEncoding_APIParam_2 is the encoding value||||null
xmlSwitchInputEncoding_APIParam_1 is the parser context||||null
xmlStringLenDecodeEntities_APIParam_7 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0||||if none
| ' - ' | '_' | '||||null
xmlSwitchInputEncoding_APIParam_2 is the xmlSwitchInputEncoding_APIParam_2 stream||||null
xmlSwitchInputEncoding_APIParam_3 is the encoding xmlSwitchInputEncoding_APIParam_3||||null
' | CombiningChar | Extender Name||||null
xmlSwitchToEncoding_APIParam_1 is the parser context||||null
= * Names||||null
= Name *||||null
= EntityRef | CharRef PEReference||||null
the input functions||||when discovering the character encoding of a given entity
change||||null
xmlSwitchToEncoding_APIParam_2 is the encoding xmlSwitchToEncoding_APIParam_2||||null
= ' % ' Name '||||null
Daniel Veillard||||null
the xmlSwitchInputEncoding_APIParam_2 functions||||when discovering the character encoding of a given entity
change||||null
xmlAddAttributeDecl_APIParam_1 is the validation context||||null
xmlAddAttributeDecl_APIParam_2 is pointer to the DTD||||null
Register a new attribute declaration Note that @tree becomes the ownership of the DTD||||null
xmlAddAttributeDecl_APIParam_3 is the element xmlAddAttributeDecl_APIParam_4||||null
xmlAddAttributeDecl_APIParam_4 is the attribute xmlAddAttributeDecl_APIParam_4||||null
xmlAddAttributeDecl_APIParam_5 is the attribute namespace prefix||||null
xmlAddAttributeDecl_APIParam_6 is the attribute xmlAddAttributeDecl_APIParam_6||||null
the input functions||||when discovering the character encoding of a given entity
change||||null
An entity reference must not contain the name of an unparsed entity CharRef||||null
= EntityRef | CharRef EntityRef||||null
' A parsed entity must not contain a recursive reference to itself , either directly or indirectly||||null
xmlAddAttributeDecl_APIParam_7 is the attribute default xmlAddAttributeDecl_APIParam_6||||null
= ' & # ' + '||||null
= ' & ' Name '||||null
xmlAddAttributeDecl_APIParam_8 is the attribute default value||||null
Register a new element declaration||||null
xmlAddElementDecl_APIParam_1 is the validation context||||null
xmlAddElementDecl_APIParam_2 is pointer to the DTD||||null
' | ' & # x ' + '||||null
xmlAddElementDecl_APIParam_3 is the entity xmlAddElementDecl_APIParam_3||||null
xmlAddElementDecl_APIParam_4 is the element xmlAddElementDecl_APIParam_4||||null
' the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities||||null
xmlAddElementDecl_APIParam_5 is the element xmlAddElementDecl_APIParam_5 tree or NULL||||null
amp , lt , gt , apos , quot||||null
Register a new id declaration||||null
xmlAddID_APIParam_1 is the validation context||||null
xmlAddAttributeDecl_APIParam_9 is||||if xmlAddAttributeDecl_APIParam_9 is an enumeration , the associated list
xmlAddID_APIParam_2 is pointer to the document||||null
xmlAddID_APIParam_3 is the xmlAddID_APIParam_3 name||||null
xmlAddID_APIParam_4 is the attribute holding the ID||||null
Register a new notation declaration||||null
xmlAddNotationDecl_APIParam_1 is the validation context||||null
xmlAddNotationDecl_APIParam_2 is pointer to the DTD||||null
' A PEReference may have been detected in the current input stream the handling is done accordingly to http||||null
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with `` standalone = ` yes ' ''||||null
xmlAddNotationDecl_APIParam_3 is the entity xmlAddNotationDecl_APIParam_3||||null
xmlAddNotationDecl_APIParam_4 is the public identifier or NULL||||null
xmlAddNotationDecl_APIParam_5 is the system identifier or NULL||||null
Register a new ref declaration||||null
xmlAddRef_APIParam_1 is the validation context||||null
xmlAddRef_APIParam_2 is pointer to the document||||null
xmlAddRef_APIParam_3 is the xmlAddRef_APIParam_3 name||||null
xmlAddRef_APIParam_4 is the attribute holding the Ref||||null
Build a copy of an attribute xmlCopyAttributeTable_APIParam_1||||null
xmlCopyAttributeTable_APIParam_1 is An attribute xmlCopyAttributeTable_APIParam_1||||null
xmlCopyAttributeTable_APIName returns the new xmlAttributeTablePtr or NULL in case of error||||null
Build a copy of an element content description||||null
xmlCopyDocElementContent_APIParam_1 is the document owning the element declaration||||null
xmlCopyDocElementContent_APIParam_2 is An element content pointer||||null
xmlCopyDocElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error||||null
Build a copy of an element content description||||null
Deprecated , use xmlCopyDocElementContent instead||||null
xmlCopyElementContent_APIParam_1 is An element content pointer||||null
xmlCopyElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error||||null
Build a copy of an element xmlCopyElementTable_APIParam_1||||null
xmlCopyElementTable_APIParam_1 is An element xmlCopyElementTable_APIParam_1||||null
xmlCopyElementTable_APIName returns the new xmlElementTablePtr or NULL in case of error||||null
Copy an enumeration attribute node||||null
xmlCopyEnumeration_APIParam_1 is the tree to copy||||null
Build a copy of a notation xmlCopyNotationTable_APIParam_1||||null
xmlCopyEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error||||null
xmlCopyNotationTable_APIName returns the new xmlNotationTablePtr or NULL in case of error||||null
xmlCopyNotationTable_APIParam_1 is A notation xmlCopyNotationTable_APIParam_1||||null
create and initialize an enumeration attribute node||||null
xmlCreateEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error||||null
xmlCreateEnumeration_APIParam_1 is the enumeration xmlCreateEnumeration_APIParam_1 or NULL||||null
xmlDumpAttributeDecl_APIParam_1 is the XML buffer output||||null
xmlDumpAttributeDecl_APIParam_2 is An attribute declaration||||null
xmlDumpAttributeTable_APIParam_1 is the XML buffer output||||null
This will dump the content of the attribute declaration as an XML DTD definition||||null
xmlDumpAttributeTable_APIParam_2 is An attribute table||||null
xmlDumpElementDecl_APIParam_1 is the XML buffer output||||null
This will dump the content of the attribute xmlDumpAttributeTable_APIParam_2 as an XML DTD definition||||null
xmlDumpElementDecl_APIParam_2 is An element table||||null
This will dump the content of the element declaration as an XML DTD definition||||null
xmlDumpElementTable_APIParam_1 is the XML buffer output||||null
xmlDumpElementTable_APIParam_2 is An element table||||null
xmlDumpNotationDecl_APIParam_1 is the XML buffer output||||null
This will dump the content of the element xmlDumpElementTable_APIParam_2 as an XML DTD definition||||null
xmlDumpNotationDecl_APIParam_2 is A notation declaration||||null
This will dump the content the notation declaration as an XML DTD definition||||null
xmlDumpNotationTable_APIParam_1 is the XML buffer output||||null
xmlDumpNotationTable_APIParam_2 is A notation table||||null
Deallocate the memory used by an entities hash xmlFreeAttributeTable_APIParam_1||||null
This will dump the content of the notation xmlDumpNotationTable_APIParam_2 as an XML DTD definition||||null
xmlFreeAttributeTable_APIParam_1 is An attribute table||||null
Free an element content structure||||null
The whole subtree is removed||||null
xmlFreeDocElementContent_APIParam_1 is the document owning the element declaration||||null
xmlFreeDocElementContent_APIParam_2 is the element content tree to free||||null
Free an element content structure||||null
The whole subtree is removed||||null
Deprecated , use xmlFreeDocElementContent instead||||null
xmlFreeElementContent_APIParam_1 is the element content tree to free||||null
Deallocate the memory used by an element hash xmlFreeElementTable_APIParam_1||||null
xmlFreeElementTable_APIParam_1 is An element table||||null
free an enumeration attribute node||||null
xmlFreeEnumeration_APIParam_1 is the tree to free||||null
Deallocate the memory used by an ID hash xmlFreeIDTable_APIParam_1||||null
xmlFreeIDTable_APIParam_1 is An id table||||null
Deallocate the memory used by an entities hash xmlFreeNotationTable_APIParam_1||||null
xmlFreeNotationTable_APIParam_1 is An notation table||||null
xmlFreeRefTable_APIParam_1 is An ref table||||null
Deallocate the memory used by an Ref hash xmlFreeRefTable_APIParam_1||||null
Free a validation context structure||||null
xmlFreeValidCtxt_APIParam_1 is the validation context to free||||null
Search the DTD for the description of this attribute on this element||||null
xmlGetDtdAttrDesc_APIParam_1 is a pointer to the DtD to search||||null
xmlGetDtdAttrDesc_APIParam_2 is the element xmlGetDtdAttrDesc_APIParam_3||||null
xmlGetDtdAttrDesc_APIName returns the xmlAttributePtr if found or NULL||||null
xmlGetDtdAttrDesc_APIParam_3 is the attribute xmlGetDtdAttrDesc_APIParam_3||||null
Search the DTD for the description of this element||||null
xmlGetDtdElementDesc_APIParam_1 is a pointer to the DtD to search||||null
xmlGetDtdElementDesc_APIParam_2 is the element xmlGetDtdElementDesc_APIParam_2||||null
xmlGetDtdElementDesc_APIName returns the xmlElementPtr if found or NULL||||null
Search the DTD for the description of this notation||||null
xmlGetDtdNotationDesc_APIParam_1 is a pointer to the DtD to search||||null
xmlGetDtdNotationDesc_APIName returns the xmlNotationPtr if found or NULL||||null
xmlGetDtdNotationDesc_APIParam_2 is the notation xmlGetDtdNotationDesc_APIParam_2||||null
xmlGetDtdQAttrDesc_APIParam_1 is a pointer to the DtD to search||||null
xmlGetDtdQAttrDesc_APIParam_2 is the element xmlGetDtdQAttrDesc_APIParam_3||||null
xmlGetDtdQAttrDesc_APIParam_3 is the attribute xmlGetDtdQAttrDesc_APIParam_3||||null
Search the DTD for the description of this qualified attribute on this element||||null
xmlGetDtdQAttrDesc_APIName returns the xmlAttributePtr if found or NULL||||null
xmlGetDtdQAttrDesc_APIParam_4 is the attribute namespace xmlGetDtdQAttrDesc_APIParam_4||||null
Search the DTD for the description of this element||||null
xmlGetDtdQElementDesc_APIParam_1 is a pointer to the DtD to search||||null
xmlGetDtdQElementDesc_APIParam_2 is the element xmlGetDtdQElementDesc_APIParam_2||||null
xmlGetDtdQElementDesc_APIName returns the xmlElementPtr if found or NULL||||null
xmlGetDtdQElementDesc_APIParam_3 is the element namespace xmlGetDtdQElementDesc_APIParam_3||||null
Search the attribute declaring the given xmlGetID_APIParam_2||||null
xmlGetID_APIParam_1 is pointer to the document||||null
xmlGetID_APIParam_2 is the xmlGetID_APIParam_2 value||||null
Find the set of references for the supplied xmlGetRefs_APIParam_2||||null
xmlGetRefs_APIParam_1 is pointer to the document||||null
xmlGetRefs_APIParam_2 is the xmlGetRefs_APIParam_2 value||||null
xmlIsID_APIParam_1 is the document||||null
xmlIsID_APIParam_2 is the element carrying the attribute||||null
xmlIsID_APIParam_3 is the attribute||||null
xmlIsID_APIName returns 0 or 1 depending on the lookup result||||null
In the case of HTML documents parsed with the HTML parser , ID detection is done systematically||||null
In case we have DTD this is done||||if DTD loading has been requested
xmlIsMixedElement_APIParam_1 is the document||||null
xmlIsMixedElement_APIParam_2 is the element xmlIsMixedElement_APIParam_2||||null
Search in the DtDs||||null
xmlIsRef_APIParam_1 is the document||||null
xmlIsMixedElement_APIName returns 0 if no, 1 if yes, and -1 if no element description is available||||null
xmlIsRef_APIParam_2 is the element carrying the attribute||||null
xmlIsRef_APIParam_3 is the attribute||||null
xmlIsRef_APIName returns 0 or 1 depending on the lookup result||||null
Allocate an element content structure for the document||||null
xmlNewDocElementContent_APIParam_1 is the document||||null
xmlNewDocElementContent_APIParam_2 is the subelement xmlNewDocElementContent_APIParam_2 or NULL||||null
xmlNewDocElementContent_APIParam_3 is the xmlNewDocElementContent_APIParam_3 of element content decl||||null
Allocate an element content structure||||null
Deprecated in favor of xmlNewDocElementContent||||null
xmlNewElementContent_APIParam_1 is the subelement xmlNewElementContent_APIParam_1 or NULL||||null
xmlNewElementContent_APIParam_2 is the xmlNewElementContent_APIParam_2 of element content decl||||null
Allocate a validation context structure||||null
Remove the given attribute from the ID table maintained internally||||null
xmlRemoveID_APIParam_1 is the document||||null
xmlRemoveID_APIParam_2 is the attribute||||null
Remove the given attribute from the Ref table maintained internally||||null
xmlRemoveRef_APIParam_1 is the document||||null
xmlRemoveRef_APIParam_2 is the attribute||||null
xmlSnprintfElementContent_APIParam_1 is an output buffer||||null
xmlSnprintfElementContent_APIParam_2 is the buffer xmlSnprintfElementContent_APIParam_2||||null
xmlSnprintfElementContent_APIParam_3 is An element table||||null
Deprecated , unsafe , use xmlSnprintfElementContent||||null
This will dump the xmlSnprintfElementContent_APIParam_3 of the element xmlSnprintfElementContent_APIParam_3 definition Intended just for the debug routine||||null
xmlSprintfElementContent_APIParam_1 is an output buffer||||null
xmlSprintfElementContent_APIParam_2 is An element table||||null
xmlValidBuildContentModel_APIParam_1 is a validation context||||null
Build the automata associated to the content model of this element||||null
xmlValidBuildContentModel_APIName returns 1 in case of success, 0 in case of error||||null
xmlValidBuildContentModel_APIParam_2 is an element declaration node||||null
xmlValidCtxtNormalizeAttributeValue_APIParam_1 is the validation context or NULL||||null
xmlValidCtxtNormalizeAttributeValue_APIParam_2 is the document||||null
Also check VC||||null
xmlValidCtxtNormalizeAttributeValue_APIParam_3 is the parent||||null
xmlValidCtxtNormalizeAttributeValue_APIParam_4 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_4||||null
Standalone Document Declaration in P32 , and update ctxt - > valid accordingly||||null
xmlValidCtxtNormalizeAttributeValue_APIParam_5 is the attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5||||null
xmlValidGetPotentialChildren_APIParam_1 is an element content tree||||null
Build/extend a list of potential children allowed by the content tree||||null
xmlValidGetPotentialChildren_APIParam_2 is an array to store the list of child xmlValidGetPotentialChildren_APIParam_2||||null
xmlValidGetPotentialChildren_APIParam_4 is the size of the array||||null
xmlValidGetPotentialChildren_APIName returns the number of element in the list, or -1 in case of error||||null
xmlValidGetPotentialChildren_APIParam_3 is a pointer to the number of element in the list||||null
xmlValidGetValidElements_APIParam_1 is an element to insert after||||null
xmlValidGetValidElements_APIName returns the list of authorized children to insert within an existing tree while respecting the validity constraints forced by the Dtd||||null
xmlValidGetValidElements_APIParam_2 is an element to insert xmlValidGetValidElements_APIParam_2||||null
xmlValidGetValidElements_APIParam_3 is an array to store the list of child xmlValidGetValidElements_APIParam_3||||null
xmlValidGetValidElements_APIParam_4 is the size of the array||||null
xmlValidNormalizeAttributeValue_APIParam_1 is the document||||null
Does the validation related extra step of the normalization of attribute values||||null
xmlValidGetValidElements_APIName returns the number of element in the list, or -1 in case of error||||null
If the function returns the value @max the caller is invited to grow the receiving array and retry||||null
xmlValidNormalizeAttributeValue_APIParam_2 is the parent||||null
xmlValidNormalizeAttributeValue_APIParam_3 is the attribute xmlValidNormalizeAttributeValue_APIParam_3||||null
xmlValidNormalizeAttributeValue_APIParam_4 is the attribute xmlValidNormalizeAttributeValue_APIParam_4||||null
Does the validation related extra step of the normalization of attribute values||||null
xmlValidateAttributeDecl_APIParam_1 is the validation context||||null
The insertion point is defined using @prev and @next in the following ways||||null
to insert before ` node '||||null
xmlValidateAttributeDecl_APIParam_2 is a document instance||||null
xmlValidateAttributeDecl_APIParam_3 is an attribute definition||||null
xmlValidGetValidElements_APIName -LRB- node - > prev , node , ... to insert xmlValidGetValidElements_APIParam_2 ` node '||||null
xmlValidGetValidElements_APIName -LRB- node , node - > next , ... to replace ` node '||||null
xmlValidateDtd_APIParam_2 is a document instance||||null
Validate that the given attribute xmlValidateAttributeValue_APIParam_2 match the proper production Values of xmlValidateAttributeValue_APIParam_1 ID must match the Name production||||null
xmlValidateDtd_APIParam_3 is a xmlValidateDtd_APIParam_3 instance||||null
Try to validate a single attribute definition basically it does the following checks as described by the XML-1 .0 recommendation||||null
xmlValidGetValidElements_APIName -LRB- node - > prev , node - > next , ... to prepend a child to ` node '||||null
xmlValidateDtd_APIParam_1 is the validation context||||null
- - - The ID/IDREF uniqueness and matching are done separately||||null
xmlValidateDocument_APIParam_1 is the validation context||||null
xmlValidGetValidElements_APIName -LRB- NULL , node - > childs , to append a child to ` node '||||null
xmlValidateDocumentFinal_APIParam_2 is a document instance||||null
xmlValidateAttributeValue_APIParam_1 is an attribute xmlValidateAttributeValue_APIParam_1||||null
xmlValidateDocument_APIParam_2 is a document instance||||null
Values of xmlValidateAttributeValue_APIParam_1 IDREF must match the Name production , and values of xmlValidateAttributeValue_APIParam_1 IDREFS must match Names||||null
the XML processor must further process the normalized attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character||||If the declared xmlValidCtxtNormalizeAttributeValue_APIParam_5 is not CDATA
xmlValidateDocumentFinal_APIParam_1 is the validation context||||null
xmlValidateDtdFinal_APIParam_1 is the validation context||||null
xmlValidGetValidElements_APIName -LRB- node - > last , NULL , ... pointers to the element xmlValidGetValidElements_APIParam_3 are inserted at the beginning of the array and do not need to be freed||||null
xmlValidateAttributeValue_APIParam_2 is an attribute xmlValidateAttributeValue_APIParam_2||||null
validates the internal and external subset and validate the document tree||||null
Values of xmlValidateAttributeValue_APIParam_1 ENTITY must match the Name production , values of xmlValidateAttributeValue_APIParam_1 ENTITIES must match Names||||null
Values of xmlValidateAttributeValue_APIParam_1 NMTOKEN must match the Nmtoken production||||null
values of xmlValidateAttributeValue_APIParam_1 NMTOKENS must match Nmtokens||||null
the XML processor must further process the normalized attribute xmlValidNormalizeAttributeValue_APIParam_4 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character||||If the declared xmlValidNormalizeAttributeValue_APIParam_4 is not CDATA
- check that NOTATION type attributes default or possible values matches one of the defined notations||||null
xmlValidateDtdFinal_APIParam_2 is a document instance||||null
Try to validate the document against the xmlValidateDtd_APIParam_3 instance Basically it does check all the definitions in the DtD||||null
xmlValidateDtdFinal_APIName returns 1 if valid or 0 if invalid and -1 if not well-formed||||null
Try to validate the subtree under an element||||null
xmlValidateElement_APIParam_1 is the validation context||||null
Try to validate the document instance basically the document instance does the all the checks described by the XML Rec i.e||||null
xmlValidateElement_APIParam_2 is a document instance||||null
Note the the internal subset is de-coupled -LRB- i.e||||null
xmlValidateElement_APIParam_3 is an element instance||||null
xmlValidateElementDecl_APIParam_1 is the validation context||||null
xmlValidateElementDecl_APIParam_2 is a document instance||||null
xmlValidateElementDecl_APIParam_3 is an element definition||||null
Validate that the given xmlValidateNameValue_APIParam_1 match Name production||||null
Try to validate a single element definition basically it does the following checks as described by the XML-1 .0 recommendation||||null
- - -||||null
Does the final step for the document validation once all the incremental validation steps have been completed basically it does the following checks described by the XML Rec Check all the IDREF/IDREFS attributes definition for validity||||null
xmlValidateNameValue_APIParam_1 is an Name xmlValidateNameValue_APIParam_1||||null
Validate that the given xmlValidateNamesValue_APIParam_1 match Names production||||null
xmlValidateNamesValue_APIParam_1 is an Names xmlValidateNamesValue_APIParam_1||||null
Validate that the given xmlValidateNmtokenValue_APIParam_1 match Nmtoken production||||null
xmlValidateNmtokenValue_APIParam_1 is an Nmtoken xmlValidateNmtokenValue_APIParam_1||||null
Validate that the given xmlValidateNmtokensValue_APIParam_1 match Nmtokens production||||null
xmlValidateNmtokensValue_APIParam_1 is an Nmtokens xmlValidateNmtokensValue_APIParam_1||||null
xmlValidateNotationDecl_APIParam_1 is the validation context||||null
xmlValidateNotationDecl_APIParam_2 is a document instance||||null
xmlValidateNotationDecl_APIParam_3 is a notation definition||||null
Validate that the given name match a notation declaration||||null
-||||null
xmlValidateNotationUse_APIParam_1 is the validation context||||null
xmlValidateNotationUse_APIParam_2 is the document||||null
xmlValidateNotationUse_APIParam_3 is the notation name to check||||null
xmlValidateOneAttribute_APIParam_1 is the validation context||||null
xmlValidateOneAttribute_APIParam_2 is a document instance||||null
Try to validate a single notation definition basically it does the following checks as described by the XML-1 .0 recommendation||||null
xmlValidateOneAttribute_APIParam_3 is an element instance||||null
xmlValidateOneAttribute_APIParam_4 is an attribute instance||||null
xmlValidateOneAttribute_APIParam_5 is the attribute xmlValidateOneAttribute_APIParam_5||||null
- it seems that no validity constraint exists on notation declarations But xmlValidateNotationDecl_APIName get called anyway||||null
The ID/IDREF checkings are done separately||||null
Does the final step for the dtds validation once all the subsets have been parsed basically the dtds validation does the following checks described by the XML Rec - check that ENTITY and ENTITIES type attributes default or possible values matches one of the defined entities||||null
xmlValidateOneElement_APIParam_1 is the validation context||||null
xmlValidateOneElement_APIParam_2 is a document instance||||null
xmlValidateOneElement_APIParam_3 is an element instance||||null
xmlValidateOneNamespace_APIParam_1 is the validation context||||null
xmlValidateOneNamespace_APIParam_2 is a document instance||||null
xmlValidateOneNamespace_APIParam_3 is an element instance||||null
could give problems||||if ID or IDREF is present
not used -RRB- , which||||null
xmlValidateOneNamespace_APIParam_4 is the namespace xmlValidateOneNamespace_APIParam_4||||null
Try to validate a single attribute for an element basically it does the following checks as described by the XML-1 .0 recommendation||||null
xmlValidateOneNamespace_APIParam_5 is an namespace declaration instance||||null
xmlValidateOneNamespace_APIParam_6 is the attribute xmlValidateOneNamespace_APIParam_6||||null
Pop the element end from the validation stack||||null
xmlValidatePopElement_APIParam_1 is the validation context||||null
xmlValidatePopElement_APIParam_2 is a document instance||||null
xmlValidatePopElement_APIParam_3 is an element instance||||null
Try to validate a single element and it is attributes , basically it does the following checks as described by the XML-1 .0 recommendation||||null
xmlValidatePopElement_APIParam_4 is the qualified name as appearing in the serialization||||null
check the CData parsed for validation in the current stack||||null
xmlValidatePushCData_APIParam_1 is the validation context||||null
xmlValidatePushCData_APIParam_2 is some character xmlValidatePushCData_APIParam_2 read||||null
Try to validate a single namespace declaration for an element basically it does the following checks as described by the XML-1 .0 recommendation||||null
xmlValidatePushCData_APIParam_3 is the length of the xmlValidatePushCData_APIParam_2||||null
- - call xmlValidateOneAttribute_APIName for each attribute present||||null
Push a new element start on the validation stack||||null
xmlValidatePushElement_APIParam_1 is the validation context||||null
xmlValidatePushElement_APIParam_2 is a document instance||||null
xmlValidatePushElement_APIParam_3 is an element instance||||null
xmlValidatePushElement_APIParam_4 is the qualified name as appearing in the serialization||||null
xmlValidateRoot_APIParam_1 is the validation context||||null
xmlValidateRoot_APIParam_2 is a document instance||||null
- - - - - - - - The ID/IDREF uniqueness and matching are done separately||||null
This is a message oriented function similar to an * printf function||||null
xmlValidityErrorFunc_APIParam_2 is xmlValidityErrorFunc_APIParam_3 string to format * printf like vararg xmlValidityErrorFunc_APIParam_3 remaining arguments to xmlValidityErrorFunc_APIParam_3 format||||null
This is a message oriented function similar to an * printf function||||null
Daniel Veillard||||null
Try to validate a the root element basically it does the following check as described by the XML-1 .0 recommendation||||null
Callback called||||when a validity error is found
xmlValidityWarningFunc_APIParam_2 is xmlValidityWarningFunc_APIParam_3 string to format * printf like vararg xmlValidityWarningFunc_APIParam_3 remaining arguments to xmlValidityWarningFunc_APIParam_3 format||||null
Debugging facility provides the number of allocated nodes over lifetime||||null
- it does not try to recurse or apply other check to the element||||null
xmlExpCtxtNbCons_APIParam_1 is an expression context||||null
Callback called||||when a validity warning is found
xmlExpCtxtNbCons_APIName returns the number of nodes ever allocated or -1 in case of error||||null
- - - - - - - - The ID/IDREF uniqueness and matching are done separately||||null
xmlValidityErrorFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityErrorFunc_APIParam_3 comes from ctxt - > userData||||null
xmlExpCtxtNbNodes_APIParam_1 is an expression context||||null
ctxt - > userData xmlValidityErrorFunc_APIParam_3 be changed by xmlValidityErrorFunc_APIParam_3 user||||null
xmlValidityWarningFunc_APIParam_1 is usually an xmlValidCtxtPtr to a validity error context , xmlValidityWarningFunc_APIParam_3 comes from ctxt - > userData||||null
Debugging facility provides the number of allocated nodes at a that point||||null
Serialize the expression as compiled to the buffer||||null
xmlExpCtxtNbNodes_APIName returns the number of nodes in use or -1 in case of error||||null
ctxt - > userData xmlValidityWarningFunc_APIParam_3 be changed by xmlValidityWarningFunc_APIParam_3 user||||null
xmlExpDump_APIParam_1 is a buffer to receive the output||||null
xmlExpDump_APIParam_2 is the compiled expression||||null
xmlExpExpDerive_APIParam_1 is the expressions context||||null
xmlExpExpDerive_APIParam_2 is the englobing expression||||null
xmlExpExpDerive_APIParam_3 is the subexpression||||null
Dereference the expression||||null
xmlExpFree_APIParam_1 is the expression context||||null
xmlExpFree_APIParam_2 is the expression||||null
xmlExpExpDerive_APIName returns the resulting expression or NULL in case of internal error, the result must be freed||||null
Free an expression context||||null
xmlExpFreeCtxt_APIParam_1 is an expression context||||null
xmlExpGetLanguage_APIParam_1 is the expression context||||null
xmlExpGetLanguage_APIParam_2 is the expression||||null
Find all the strings used in @exp and store them in @list||||null
xmlExpGetLanguage_APIParam_3 is where to store the tokens||||null
xmlExpGetLanguage_APIParam_4 is the allocated length of @list||||null
for  | c it will return the list||||null
xmlExpGetStart_APIParam_1 is the expression context||||null
xmlExpGetStart_APIParam_2 is the expression||||null
xmlExpGetLanguage_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings||||null
Evaluates the expression resulting from @exp consuming a xmlExpExpDerive_APIParam_3 expression @sub Based on algebraic derivation and sometimes direct Brzozowski derivation it usually tatkes less than linear time and can handle expressions generating infinite languages||||null
xmlExpGetStart_APIParam_3 is where to store the tokens||||null
xmlExpGetStart_APIParam_4 is the allocated length of @list||||null
Find all the strings that appears at the start of the languages accepted by @exp and store them in @list||||null
xmlExpIsNillable_APIParam_1 is the expression||||null
xmlExpGetStart_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings||||null
xmlExpMaxToken_APIParam_1 is a compiled expression||||null
xmlExpIsNillable_APIName returns 1 if nillable, 0 if not and -1 in case of error||||null
Indicate the maximum number of input a expression can accept||||null
Finds nillable , i.e||||if the expression is
||||if it accepts the empty sequqnce
xmlExpMaxToken_APIName returns the maximum length or -1 in case of error||||null
xmlExpNewAtom_APIParam_1 is the expression context||||null
xmlExpNewAtom_APIParam_2 is the atom xmlExpNewAtom_APIParam_2||||null
Get the atom associated to this xmlExpNewAtom_APIParam_2 from that context||||null
xmlExpNewAtom_APIName returns the node or NULL in case of error||||null
xmlExpNewAtom_APIParam_3 is the atom xmlExpNewAtom_APIParam_2 length in byte||||null
Creates a new context for manipulating expressions||||null
xmlExpNewCtxt_APIParam_1 is the maximum number of nodes||||null
xmlExpNewCtxt_APIName returns the context or NULL in case of error||||null
xmlExpNewCtxt_APIParam_2 is optional dictionary to use internally||||null
xmlExpNewOr_APIParam_1 is the expression context||||null
xmlExpNewOr_APIParam_2 is xmlExpNewOr_APIParam_2 expression||||null
xmlExpNewOr_APIParam_3 is xmlExpNewOr_APIParam_3 expression||||null
xmlExpNewOr_APIName returns the node or NULL in case of error||||null
xmlExpNewRange_APIParam_1 is the expression context||||null
xmlExpNewRange_APIParam_2 is the expression to be repeated||||null
xmlExpNewRange_APIParam_3 is the lower bound for the repetition||||null
xmlExpNewRange_APIName returns the node or NULL in case of error||||null
xmlExpNewRange_APIParam_4 is the upper bound for the repetition , -1 means infinite||||null
xmlExpNewSeq_APIParam_1 is the expression context||||null
xmlExpNewSeq_APIParam_2 is xmlExpNewSeq_APIParam_2 expression||||null
xmlExpNewSeq_APIName returns the node or NULL in case of error||||null
xmlExpNewSeq_APIParam_3 is xmlExpNewSeq_APIParam_3 expression||||null
xmlExpParse_APIParam_1 is the expressions context||||null
xmlExpParse_APIParam_2 is the 0 terminated string||||null
xmlExpParse_APIName returns a new expression or NULL in case of failure||||null
Increase the reference count of the expression||||null
xmlExpRef_APIParam_1 is the expression||||null
xmlExpStringDerive_APIParam_1 is the expression context||||null
xmlExpStringDerive_APIParam_2 is the expression||||null
xmlExpStringDerive_APIParam_3 is the string||||null
Do one step of Brzozowski derivation of the expression @exp with respect to the input string||||null
xmlExpStringDerive_APIName returns the resulting expression or NULL in case of internal error||||null
xmlExpSubsume_APIParam_1 is the expressions context||||null
Minimal parser for regexps , it understand the following constructs - string terminals - choice operator | - sequence operator , - subexpressions - usual cardinality operators + * and ?||||null
xmlExpSubsume_APIParam_2 is the englobing expression||||null
xmlExpSubsume_APIParam_3 is the subexpression||||null
xmlExpSubsume_APIName returns 1 if true 0 if false and -1 in case of failure||||null
Get the atom associated to the range -LCB- @min , @max -RCB- Note that @subset is consumed in the operation , to keep an handle on @subset use xmlExpRef_APIName and use xmlExpFree_APIName to release @subset , this is true even in case of failure||||null
Get the atom associated to the choice @left | @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure||||null
xmlExpStringDerive_APIParam_4 is the string xmlExpStringDerive_APIParam_4 in bytes||||if available
xmlRegExecCallbacks_APIParam_1 is the regular expression context||||null
xmlRegExecCallbacks_APIParam_2 is the current xmlRegExecCallbacks_APIParam_2 string||||null
xmlRegExecCallbacks_APIParam_3 is transition data||||null
Callback function||||when doing a transition in the automata
xmlRegExecCallbacks_APIParam_4 is input data||||null
The xmlRegExecErrInfo_APIParam_2 xmlRegExecErrInfo_APIParam_5||||null
xmlRegExecErrInfo_APIParam_2 is return value for the error xmlRegExecErrInfo_APIParam_2||||null
xmlRegExecErrInfo_APIParam_1 is a regexp execution context generating an error||||null
xmlRegExecErrInfo_APIParam_4 is return number of negative transitions||||null
xmlRegExecErrInfo_APIParam_3 is pointer to the number of accepted xmlRegExecErrInfo_APIParam_5 IN/OUT||||null
xmlRegExecErrInfo_APIParam_6 is return value if this was a xmlRegExecErrInfo_APIParam_6 state||||null
xmlRegExecErrInfo_APIName returns will be freed with the @exec context and do not need to be deallocated||||null
xmlRegExecErrInfo_APIParam_5 is pointer to the array of acceptable xmlRegExecErrInfo_APIParam_5||||null
xmlRegExecErrInfo returns 0 in case of success or -1 in case of error||||null
The string xmlRegExecNextValues_APIParam_4||||null
xmlRegExecNextValues_APIParam_1 is a regexp execution context||||null
Get the atom associated to the sequence @left , @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure||||null
xmlRegExecNextValues_APIParam_3 is return number of negative transitions||||null
xmlRegExecNextValues_APIParam_2 is pointer to the number of accepted xmlRegExecNextValues_APIParam_4 IN/OUT||||null
xmlRegExecNextValues_APIParam_5 is return value if this was a xmlRegExecNextValues_APIParam_5 state||||null
xmlRegExecNextValues_APIParam_4 is pointer to the array of acceptable xmlRegExecNextValues_APIParam_4||||null
xmlRegExecNextValues returns 0 in case of success or -1 in case of error||||null
xmlRegExecNextValues_APIName returns will be freed with the @exec context and do not need to be deallocated||||null
Push one input token in the execution context||||null
xmlRegExecPushString_APIParam_1 is a regexp execution context or NULL to indicate the end||||null
xmlRegExecPushString_APIParam_2 is a string token input||||null
xmlRegExecPushString_APIParam_3 is xmlRegExecPushString_APIParam_3 associated to the token to reuse in callbacks||||null
Push one input token in the execution context||||null
xmlRegExecPushString2_APIParam_2 is the first string token input||||null
xmlRegExecPushString2_APIParam_1 is a regexp execution context or NULL to indicate the end||||null
xmlRegExecPushString2_APIParam_3 is the second string token input||||null
xmlRegExecPushString_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString_APIParam_2 in case of error||||null
xmlRegExecPushString2_APIParam_4 is xmlRegExecPushString2_APIParam_4 associated to the token to reuse in callbacks||||null
Extract informations from the regexp execution, the parameter @values must point to an array of @nbval string pointers on return xmlRegExecNextValues_APIParam_2 will contain the number of possible strings in that state and the @values array will be updated with them||||null
Free the structures associated to a regular expression evaulation context||||null
xmlRegFreeExecCtxt_APIParam_1 is a regular expression evaulation context||||null
Free a xmlRegFreeRegexp_APIParam_1||||null
xmlRegFreeRegexp_APIParam_1 is the regexp||||null
Extract error informations from the regexp execution, the parameter @string will be updated with the value pushed and not accepted, the parameter @values must point to an array of @nbval xmlRegExecErrInfo_APIParam_2 pointers on return xmlRegExecErrInfo_APIParam_3 will contain the number of possible strings in that state and the @values array will be updated with them||||null
Build a context used for progressive evaluation of a regexp||||null
xmlRegNewExecCtxt_APIParam_1 is a precompiled regular expression||||null
xmlRegExecPushString2_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString2_APIParam_2 in case of error||||null
xmlRegNewExecCtxt_APIName returns the new context||||null
xmlRegNewExecCtxt_APIParam_2 is a xmlRegNewExecCtxt_APIParam_2 function used for handling progresses in the automata matching phase||||null
xmlRegexpCompile_APIParam_1 is a regular expression string||||null
xmlRegexpCompile_APIName returns the compiled expression or NULL in case of error||||null
xmlRegNewExecCtxt_APIParam_3 is the context xmlRegNewExecCtxt_APIParam_3 associated to the xmlRegNewExecCtxt_APIParam_2 in this context||||null
xmlRegexpExec_APIParam_1 is the compiled regular expression||||null
xmlRegexpExec_APIParam_2 is the value to check against the regular expression||||null
xmlRegexpIsDeterminist_APIParam_1 is the compiled regular expression||||null
xmlRegexpExec_APIName returns 1 if it matches, 0 if not and a negative value in case of error||||null
Check||||if the regular expression generates the value
Parses a regular expression conforming to XML Schemas Part 2 Datatype Appendix F and builds an automata suitable for testing strings against that regular expression||||null
Print the content of the compiled regular expression||||null
xmlRegexpPrint_APIParam_1 is the file for the xmlRegexpPrint_APIParam_1 debug||||null
xmlRegexpPrint_APIParam_2 is the compiled xmlRegexpPrint_APIParam_2||||null
Daniel Veillard||||null
Check||||if the regular expression is determinist
xmlRegexpIsDeterminist_APIName returns 1 if it yes, 0 if not and a negative value in case of error||||null
- finite sequences -LCB- min , max -RCB- - infinite sequences -LCB- min , * -RCB- There is minimal checkings made especially no checking on strings values||||null
Additional cleanup for multi-threading||||null
Registers a callback for node destruction||||null
xmlDeregisterNodeDefault_APIParam_1 is function pointer to the new DeregisterNodeFunc||||null
xmlDeregisterNodeDefault_APIName returns the previous value of the deregistration function||||null
Signature for the deregistration callback of a discarded xmlDeregisterNodeFunc_APIParam_1||||null
xmlDeregisterNodeFunc_APIParam_1 is the current node||||null
Additional initialisation for multi-threading||||null
xmlInitializeGlobalState_APIParam_1 is a pointer to a newly allocated global state||||null
Registers a callback for URI output file handling||||null
xmlInitializeGlobalState_APIName_APIName initialize a global state with all the default values of the library||||null
xmlOutputBufferCreateFilenameDefault_APIName returns the old value of the registration function||||null
xmlOutputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new OutputBufferCreateFilenameFunc||||null
xmlOutputBufferCreateFilenameFunc_APIParam_1 is the xmlOutputBufferCreateFilenameFunc_APIParam_1 to write to||||null
xmlOutputBufferCreateFilenameFunc_APIParam_2 is||||null
xmlOutputBufferCreateFilenameFunc_APIParam_3 is||||null
xmlOutputBufferCreateFilenameFunc_APIName returns the new xmlOutputBufferPtr in case of success or NULL if no method was found||||null
Signature for the function doing the lookup for a suitable output method corresponding to an xmlOutputBufferCreateFilenameFunc_APIParam_1||||null
Registers a callback for URI input file handling||||null
xmlParserInputBufferCreateFilenameDefault_APIName returns the old value of the registration function||||null
xmlParserInputBufferCreateFilenameDefault_APIParam_1 is function pointer to the new ParserInputBufferCreateFilenameFunc||||null
xmlParserInputBufferCreateFilenameFunc_APIParam_1 is the xmlParserInputBufferCreateFilenameFunc_APIParam_1 to read from||||null
xmlParserInputBufferCreateFilenameFunc_APIParam_2 is the requested source encoding||||null
Registers a callback for node creation||||null
xmlParserInputBufferCreateFilenameFunc_APIName returns the new xmlParserInputBufferPtr in case of success or NULL if no method was found||||null
xmlRegisterNodeDefault_APIParam_1 is function pointer to the new RegisterNodeFunc||||null
Signature for the function doing the lookup for a suitable input method corresponding to an xmlParserInputBufferCreateFilenameFunc_APIParam_1||||null
xmlRegisterNodeDefault_APIName returns the old value of the registration function||||null
Signature for the registration callback of a created xmlRegisterNodeFunc_APIParam_1||||null
xmlRegisterNodeFunc_APIParam_1 is the current node||||null
Daniel Veillard||||null
An axis traversal function||||null
xmlXPathAxisFunc_APIParam_1 is the XPath interpreter context||||null
xmlXPathAxisFunc_APIParam_2 is the previous node being explored on that axis||||null
Converts a boolean to its number value||||null
xmlXPathCastBooleanToNumber_APIName returns the number value||||null
xmlXPathCastBooleanToNumber_APIParam_1 is a boolean||||null
xmlXPathAxisFunc_APIName returns the next node in that axis or NULL if at the end of the axis||||null
Converts a boolean to its string value||||null
To traverse an axis, the engine calls the first time with xmlXPathAxisFunc_APIParam_2 == NULL and repeat until the function returns NULL indicating the end of the axis traversal||||null
xmlXPathCastBooleanToString_APIParam_1 is a boolean||||null
xmlXPathCastBooleanToString_APIName returns a newly allocated string||||null
Converts a node-set to its boolean value||||null
xmlXPathCastNodeSetToBoolean_APIParam_1 is a node-set||||null
xmlXPathCastNodeSetToBoolean_APIName returns the boolean value||||null
Converts a node-set to its number value||||null
xmlXPathCastNodeSetToNumber_APIParam_1 is a node-set||||null
xmlXPathCastNodeSetToNumber_APIName returns the number value||||null
Converts a node-set to its string value||||null
xmlXPathCastNodeSetToString_APIParam_1 is a node-set||||null
xmlXPathCastNodeSetToString_APIName returns a newly allocated string||||null
Converts a xmlXPathCastNodeToNumber_APIParam_1 to its number value||||null
xmlXPathCastNodeToNumber_APIName returns the number value||||null
xmlXPathCastNodeToNumber_APIParam_1 is a xmlXPathCastNodeToNumber_APIParam_1||||null
Converts a xmlXPathCastNodeToString_APIParam_1 to its string value||||null
xmlXPathCastNodeToString_APIParam_1 is a xmlXPathCastNodeToString_APIParam_1||||null
xmlXPathCastNodeToString_APIName returns a newly allocated string||||null
Converts a number to its boolean value||||null
xmlXPathCastNumberToBoolean_APIParam_1 is a number||||null
xmlXPathCastNumberToBoolean_APIName returns the boolean value||||null
Converts a number to its string value||||null
xmlXPathCastNumberToString_APIName returns a newly allocated string||||null
xmlXPathCastNumberToString_APIParam_1 is a number||||null
Converts a string to its boolean value||||null
xmlXPathCastStringToBoolean_APIName returns the boolean value||||null
xmlXPathCastStringToBoolean_APIParam_1 is a string||||null
Converts a string to its number value||||null
xmlXPathCastStringToNumber_APIName returns the number value||||null
xmlXPathCastStringToNumber_APIParam_1 is a string||||null
Converts an XPath object to its boolean value||||null
xmlXPathCastToBoolean_APIName returns the boolean value||||null
xmlXPathCastToBoolean_APIParam_1 is an XPath object||||null
Converts an XPath object to its number value||||null
xmlXPathCastToNumber_APIParam_1 is an XPath object||||null
xmlXPathCastToNumber_APIName returns the number value||||null
Converts an existing object to its string_APIName equivalent||||null
xmlXPathCastToString_APIParam_1 is an XPath object||||null
Compare two nodes w.r.t document order||||null
it is up to the caller to free the string memory with xmlFree||||null
xmlXPathCastToString_APIName returns the allocated string value of the object, NULL in case of error||||null
xmlXPathCmpNodes_APIParam_1 is the first node||||null
xmlXPathCmpNodes_APIParam_2 is the second node||||null
Compile an XPath expression||||null
xmlXPathCompile_APIParam_1 is the XPath expression||||null
xmlXPathCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL||||null
the caller has to free the object||||null
Evaluate the Precompiled XPath expression in the given context||||null
xmlXPathCompiledEval_APIParam_1 is the compiled XPath expression||||null
xmlXPathCompiledEval_APIParam_2 is the XPath context||||null
xmlXPathCompiledEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL||||null
the caller has to free the object||||null
xmlXPathCompiledEvalToBoolean_APIParam_1 is the compiled XPath expression||||null
Applies the XPath boolean_APIName function on the result of the given compiled expression||||null
xmlXPathCompiledEvalToBoolean_APIParam_2 is the XPath context||||null
Creates/frees an object cache on the XPath context||||null
xmlXPathCompiledEvalToBoolean_APIName returns 1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors||||null
Use < 0 for the default number||||null
Other values for @options have currently no effect||||null
xmlXPathContextSetCache_APIParam_1 is the XPath context||||null
xmlXPathContextSetCache_APIParam_2 is enables/disables the cache||||null
will be cached internally to be reused||||If activates XPath objects
xmlXPathContextSetCache_APIParam_3 is a xmlXPathContextSetCache_APIParam_3 with semantics dependant on @options||||null
xmlXPathContextSetCache_APIParam_4 is xmlXPathContextSetCache_APIParam_4||||null
xmlXPathContextSetCache_APIName returns 0 if the setting succeeded, and -1 on API or internal errors||||null
Converts an existing object to its boolean_APIName equivalent||||null
xmlXPathConvertBoolean_APIParam_1 is an XPath object||||null
xmlXPathConvertFunc_APIParam_1 is an XPath object||||null
xmlXPathConvertBoolean_APIName returns the new object, the old one is freed (or the operation is done directly on @val||||null
xmlXPathConvertFunc_APIParam_2 is the number of the target xmlXPathConvertFunc_APIParam_2||||null
A conversion function is associated to a xmlXPathConvertFunc_APIParam_2 and used to cast the new xmlXPathConvertFunc_APIParam_2 to primitive values||||null
Converts an existing object to its number_APIName equivalent||||null
xmlXPathConvertNumber_APIParam_1 is an XPath object||||null
Converts an existing object to its string_APIName equivalent||||null
xmlXPathConvertNumber_APIName returns the new object, the old one is freed (or the operation is done directly on @val||||null
xmlXPathConvertString_APIParam_1 is an XPath object||||null
This will set the XPath object caching||||null
Compile an XPath expression||||null
xmlXPathCtxtCompile_APIParam_1 is an XPath context||||null
xmlXPathConvertString_APIName returns the new object, the old one is freed (or the operation is done directly on @val||||null
xmlXPathCtxtCompile_APIParam_2 is the XPath expression||||null
xmlXPathCtxtCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL||||null
This will set the maximum number of XPath objects to be cached per slot There are 5 slots for||||null
node-set , string , number , boolean , and misc objects||||null
the caller has to free the object||||null
Evaluate the XPath Location Path in the given context||||null
xmlXPathEval_APIParam_1 is the XPath expression||||null
xmlXPathEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL||||null
xmlXPathEval_APIParam_2 is the XPath context||||null
the caller has to free the object||||null
Alias for xmlXPathEval_APIName||||null
xmlXPathEvalExpression_APIParam_1 is the XPath expression||||null
xmlXPathEvalExpression_APIParam_2 is the XPath context||||null
xmlXPathEvalExpression_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL||||null
the caller has to free the object||||null
xmlXPathEvalFunc_APIParam_1 is an XPath parser context||||null
An XPath evaluation function , the parameters are on the XPath context stack||||null
xmlXPathEvalFunc_APIParam_2 is the number of arguments passed to the function||||null
Evaluate a predicate result for the current node||||null
xmlXPathEvalPredicate_APIParam_1 is the XPath context||||null
A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean||||null
xmlXPathEvalPredicate_APIParam_2 is the Predicate Expression evaluation result||||null
Free up the memory allocated by @comp||||null
xmlXPathFreeCompExpr_APIParam_1 is an XPATH comp||||null
Free up an xmlXPathContext||||null
xmlXPathFreeContext_APIParam_1 is the context to free||||null
Free the NodeSet compound||||null
xmlXPathFreeNodeSet_APIParam_1 is the xmlNodeSetPtr to free||||null
xmlXPathFreeNodeSetList_APIParam_1 is an existing NodeSetList object||||null
Free up an xmlXPathObjectPtr object||||null
xmlXPathFreeObject_APIParam_1 is the object to free||||null
Free up the xmlXPathObjectPtr @obj but do not deallocate the objects in the list contrary to xmlXPathFreeObject_APIName||||null
xmlXPathFuncLookupFunc_APIParam_1 is an XPath context||||null
Prototype for callbacks used to plug function lookup in the XPath engine||||null
xmlXPathFuncLookupFunc_APIParam_2 is xmlXPathFuncLookupFunc_APIParam_2 of the function||||null
xmlXPathFuncLookupFunc_APIName returns the XPath function or NULL if not found||||null
xmlXPathFuncLookupFunc_APIParam_3 is the namespace xmlXPathFuncLookupFunc_APIParam_2 hosting this function||||null
An XPath function||||null
xmlXPathFunction_APIParam_1 is the XPath interprestation context||||null
xmlXPathFunction_APIParam_2 is the number of arguments||||null
Initialize the XPath environment||||null
Based on trio code http||||null
The arguments are popped out from the context stack and the result is pushed on the stack||||null
xmlXPathIsInf_APIParam_1 is a double value||||null
Provides a portable isinf_APIName function to detect||||null
Based on trio code http||||null
Provides a portable isnan_APIName function to detect||||null
xmlXPathIsNaN_APIParam_1 is a double value||||null
Create a new xmlXPathContext||||null
xmlXPathNewContext_APIName returns the xmlXPathContext just allocated||||null
xmlXPathNewContext_APIParam_1 is the XML document||||null
The caller will need to free it||||null
Evaluate the XPath Location Path in the given context||||null
The xmlXPathNodeEval_APIParam_1 ` node ' is set as the context xmlXPathNodeEval_APIParam_1||||null
The context xmlXPathNodeEval_APIParam_1 is not restored||||null
xmlXPathNodeEval_APIParam_2 is the XPath expression||||null
xmlXPathNodeEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL||||null
xmlXPathNodeEval_APIParam_3 is the XPath context||||null
xmlXPathNodeEval_APIParam_1 is the xmlXPathNodeEval_APIParam_1 to to use as the context xmlXPathNodeEval_APIParam_1||||null
the caller has to free the object||||null
xmlXPathNodeSetCreate_APIParam_1 is an initial xmlNodePtr , or NULL||||null
xmlXPathNodeSetCreate_APIName returns the newly created object||||null
Create a new xmlNodeSetPtr of type double and of value @val||||null
allocate a new copy of a given object||||null
xmlXPathObjectCopy_APIName returns the newly created object||||null
xmlXPathObjectCopy_APIParam_1 is the original object||||null
xmlXPathOrderDocElems_APIParam_1 is an input document||||null
Call this routine to speed up XPath computation on static documents||||null
xmlXPathOrderDocElems_APIName returns the number of elements found in the document or -1 in case of error||||null
Sets ` node ' as the context xmlXPathSetContextNode_APIParam_1||||null
xmlXPathSetContextNode_APIParam_1 is the xmlXPathSetContextNode_APIParam_1 to to use as the context xmlXPathSetContextNode_APIParam_1||||null
xmlXPathSetContextNode_APIName returns -1 in case of error or 0 if successful||||null
xmlXPathSetContextNode_APIParam_2 is the XPath context||||null
The xmlXPathSetContextNode_APIParam_1 must be in the same document as that associated with the context||||null
Prototype for callbacks used to plug variable lookup in the XPath engine||||null
xmlXPathVariableLookupFunc_APIParam_1 is an XPath context||||null
xmlXPathVariableLookupFunc_APIParam_2 is xmlXPathVariableLookupFunc_APIParam_2 of the variable||||null
Daniel Veillard||||null
xmlXPathVariableLookupFunc_APIParam_3 is the namespace xmlXPathVariableLookupFunc_APIParam_2 hosting this variable||||null
xmlXPathVariableLookupFunc_APINamereturns the XPath object value or NULL if not found||||null
Deallocate all the resources associated to the xmlFreeTextWriter_APIParam_1||||null
xmlFreeTextWriter_APIParam_1 is the xmlTextWriterPtr||||null
xmlNewTextWriter_APIParam_1 is an xmlOutputBufferPtr||||null
xmlNewTextWriter_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
Create a new xmlNewTextWriter structure with @ * doc as output||||null
Create a new xmlNewTextWriter_APIName structure using an xmlOutputBufferPtr NOTE||||null
xmlNewTextWriterDoc_APIParam_2 is compress the output ?||||null
xmlNewTextWriterDoc_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
xmlNewTextWriterDoc_APIParam_1 is address of a xmlDocPtr to hold the new XML document tree||||null
xmlNewTextWriterFilename_APIParam_2 is compress the output ?||||null
Create a new xmlNewTextWriter structure with @uri as output||||null
xmlNewTextWriterFilename_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
xmlNewTextWriterFilename_APIParam_1 is the URI of the resource for the output||||null
xmlNewTextWriterMemory_APIParam_1 is xmlBufferPtr||||null
xmlNewTextWriterMemory_APIParam_2 is compress the output ?||||null
xmlNewTextWriterMemory_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
the @out parameter will be deallocated||||when the writer is closed
Create a new xmlNewTextWriter structure with @buf as output TODO||||null
handle xmlNewTextWriterMemory_APIParam_2||||null
handle xmlNewTextWriterPushParser_APIParam_2||||null
xmlNewTextWriterPushParser_APIParam_1 is xmlParserCtxtPtr to hold the new XML document tree||||null
xmlNewTextWriterPushParser_APIParam_2 is compress the output ?||||null
Create a new xmlNewTextWriter structure with @ctxt as output NOTE||||null
xmlNewTextWriterPushParser_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
the @ctxt context will be freed with the resulting writer||||null
xmlNewTextWriterTree_APIParam_1 is xmlDocPtr||||null
xmlNewTextWriterTree_APIParam_2 is xmlNodePtr or NULL for doc - > children||||null
Create a new xmlNewTextWriter structure with @doc as output starting at @node||||null
xmlNewTextWriterTree_APIParam_3 is compress the output ?||||null
xmlNewTextWriterTree_APIName returns the new xmlTextWriterPtr or NULL in case of error||||null
End the current xml element||||null
xmlTextWriterEndAttribute_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterEndAttribute_APIName returns the bytes written  or -1 in case of error||||null
End an xml CDATA section||||null
xmlTextWriterEndCDATA_APIParam_1 is the xmlTextWriterPtr||||null
End the current xml coment||||null
xmlTextWriterEndCDATA_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterEndComment_APIParam_1 is the xmlTextWriterPtr||||null
End an xml DTD||||null
xmlTextWriterEndComment_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterEndDTD_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterEndDTD_APIName returns the bytes written  or -1 in case of error||||null
End an xml DTD attribute list||||null
xmlTextWriterEndDTDAttlist_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterEndDTDAttlist_APIName returns the bytes written  or -1 in case of error||||null
End an xml DTD element||||null
xmlTextWriterEndDTDElement_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterEndDTDElement_APIParam_1 is the xmlTextWriterPtr||||null
This stamps all the element nodes with the document order Like for line information , the order is kept in the element - > content field , the value stored is actually - the node number to be able to differentiate from line numbers||||null
End an xml DTD entity||||null
xmlTextWriterEndDTDEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterEndDTDEntity_APIName returns the bytes written  or -1 in case of error||||null
End an xml document||||null
xmlTextWriterEndDocument_APIParam_1 is the xmlTextWriterPtr||||null
End the current xml element||||null
xmlTextWriterEndDocument_APIName returns the bytes written or -1 in case of error||||null
All open elements are closed , and the content is flushed to the output||||null
xmlTextWriterEndElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterEndElement_APIName returns the bytes written  or -1 in case of error||||null
End the current xml PI||||null
xmlTextWriterEndPI_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterEndPI_APIParam_1 is the xmlTextWriterPtr||||null
Flush the output buffer||||null
xmlTextWriterFlush_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterFlush_APIParam_1 is the xmlTextWriterPtr||||null
End the current xml element||||null
Writes an end tag||||null
xmlTextWriterFullEndElement_APIParam_1 is the xmlTextWriterPtr||||null
Set indentation output||||null
xmlTextWriterFullEndElement_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterSetIndent_APIParam_2 = 0 do not indentation||||null
xmlTextWriterSetIndent_APIParam_2 > 0 do indentation||||null
xmlTextWriterSetIndent_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterSetIndent_APIParam_2 do indentation ?||||null
Set string indentation||||null
xmlTextWriterSetIndentString_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterSetIndentString_APIParam_2 is the xmlChar string||||null
Set the character used for quoting attributes||||null
xmlTextWriterSetQuoteChar_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterSetQuoteChar_APIParam_2 is the quote character||||null
Start an xml attribute||||null
xmlTextWriterStartAttribute_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartAttribute_APIParam_2 is element xmlTextWriterStartAttribute_APIParam_2||||null
xmlTextWriterStartAttribute_APIName returns the bytes written  or -1 in case of error||||null
Start an xml attribute with namespace support||||null
xmlTextWriterStartAttributeNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartAttributeNS_APIParam_2 is namespace xmlTextWriterStartAttributeNS_APIParam_2 or NULL||||null
xmlTextWriterStartAttributeNS_APIParam_3 is element local xmlTextWriterStartAttributeNS_APIParam_3||||null
xmlTextWriterStartAttributeNS_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterStartAttributeNS_APIParam_4 is namespace URI or NULL||||null
Start an xml CDATA section||||null
xmlTextWriterStartCDATA_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartCDATA_APIName returns the bytes written  or -1 in case of error||||null
Start an xml comment||||null
xmlTextWriterStartComment_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartComment_APIName returns the bytes written  or -1 in case of error||||null
Start an xml DTD||||null
xmlTextWriterStartDTD_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartDTD_APIParam_2 is the xmlTextWriterStartDTD_APIParam_2 of the DTD||||null
xmlTextWriterStartDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterStartDTD_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterStartDTD_APIParam_4 is the system identifier , which is the URI of the DTD||||null
Start an xml DTD ATTLIST||||null
xmlTextWriterStartDTDAttlist_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartDTDAttlist_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterStartDTDAttlist_APIParam_2 is the xmlTextWriterStartDTDAttlist_APIParam_2 of the DTD ATTLIST||||null
Start an xml DTD element||||null
xmlTextWriterStartDTDElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartDTDElement_APIParam_2 is the xmlTextWriterStartDTDElement_APIParam_2 of the DTD element||||null
xmlTextWriterStartDTDElement_APIName returns the bytes written  or -1 in case of error||||null
Start an xml DTD ATTLIST||||null
xmlTextWriterStartDTDEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartDTDEntity_APIParam_3 is the xmlTextWriterStartDTDEntity_APIParam_3 of the DTD ATTLIST||||null
xmlTextWriterStartDTDEntity_APIName returns the bytes written  or -1 in case of error||||null
Start a new xml document||||null
xmlTextWriterStartDocument_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartDocument_APIParam_2 is the xml xmlTextWriterStartDocument_APIParam_2 or NULL for default||||null
xmlTextWriterStartDocument_APIParam_3 is the xmlTextWriterStartDocument_APIParam_3 or NULL for default||||null
Start an xml element||||null
xmlTextWriterStartDocument_APIParam_4 is `` yes '' or `` no '' or NULL for default||||null
xmlTextWriterStartDTDEntity_APIParam_2 is TRUE||||if this is a parameter entity
xmlTextWriterStartDocument_APIName returns the bytes written  or -1 in case of error||||null
FALSE if not||||null
xmlTextWriterStartElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartElement_APIParam_2 is element xmlTextWriterStartElement_APIParam_2||||null
xmlTextWriterStartElement_APIName returns the bytes written  or -1 in case of error||||null
Start an xml element with namespace support||||null
xmlTextWriterStartElementNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartElementNS_APIParam_2 is namespace xmlTextWriterStartElementNS_APIParam_2 or NULL||||null
xmlTextWriterStartElementNS_APIParam_3 is element local xmlTextWriterStartElementNS_APIParam_3||||null
xmlTextWriterStartElementNS_APIParam_4 is namespace URI or NULL||||null
Start an xml PI||||null
xmlTextWriterStartElementNS_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterStartPI_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterStartPI_APIParam_2 is PI xmlTextWriterStartPI_APIParam_2||||null
Write an xml attribute||||null
xmlTextWriterStartPI_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteAttribute_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteAttribute_APIParam_2 is attribute xmlTextWriterWriteAttribute_APIParam_2||||null
xmlTextWriterWriteAttribute_APIParam_3 is attribute xmlTextWriterWriteAttribute_APIParam_3||||null
Write an xml attribute||||null
xmlTextWriterWriteAttribute_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteAttributeNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteAttributeNS_APIParam_2 is namespace xmlTextWriterWriteAttributeNS_APIParam_2||||null
xmlTextWriterWriteAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteAttributeNS_APIParam_3||||null
xmlTextWriterWriteAttributeNS_APIParam_4 is namespace URI||||null
xmlTextWriterWriteAttributeNS_APIParam_5 is attribute xmlTextWriterWriteAttributeNS_APIParam_5||||null
xmlTextWriterWriteAttributeNS_APIName returns the bytes written  or -1 in case of error||||null
Write an base64 encoded xml text||||null
xmlTextWriterWriteBase64_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteBase64_APIParam_2 is binary xmlTextWriterWriteBase64_APIParam_2||||null
xmlTextWriterWriteBase64_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteBase64_APIParam_4 is the number of bytes to encode||||null
xmlTextWriterWriteBase64_APIParam_3 is the position within the xmlTextWriterWriteBase64_APIParam_2 of the first byte to encode||||null
Write a BinHex encoded xml text||||null
xmlTextWriterWriteBinHex_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteBinHex_APIParam_2 is binary xmlTextWriterWriteBinHex_APIParam_2||||null
xmlTextWriterWriteBinHex_APIParam_3 is the position within the xmlTextWriterWriteBinHex_APIParam_2 of the first byte to encode||||null
xmlTextWriterWriteBinHex_APIParam_4 is the number of bytes to encode||||null
xmlTextWriterWriteBinHex_APIName returns the bytes written  or -1 in case of error||||null
Write an xml CDATA||||null
xmlTextWriterWriteCDATA_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteCDATA_APIParam_2 is CDATA xmlTextWriterWriteCDATA_APIParam_2||||null
xmlTextWriterWriteCDATA_APIName returns the bytes written  or -1 in case of error||||null
Write an xml comment||||null
xmlTextWriterWriteComment_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteComment_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteComment_APIParam_2 is comment string||||null
Write a DTD||||null
xmlTextWriterWriteDTD_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTD_APIParam_2 is the xmlTextWriterWriteDTD_APIParam_2 of the DTD||||null
xmlTextWriterWriteDTD_APIParam_5 is string content of the DTD||||null
xmlTextWriterWriteDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier||||null
Write a DTD ATTLIST||||null
xmlTextWriterWriteDTD_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTD_APIParam_4 is the system identifier , which is the URI of the DTD||||null
xmlTextWriterWriteDTDAttlist_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDAttlist_APIParam_2 is the xmlTextWriterWriteDTDAttlist_APIParam_2 of the DTD ATTLIST||||null
xmlTextWriterWriteDTDAttlist_APIParam_3 is xmlTextWriterWriteDTDAttlist_APIParam_3 of the ATTLIST||||null
xmlTextWriterWriteDTDAttlist_APIName returns the bytes written  or -1 in case of error||||null
Write a DTD element||||null
xmlTextWriterWriteDTDElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDElement_APIParam_2 is the xmlTextWriterWriteDTDElement_APIParam_2 of the DTD element||||null
xmlTextWriterWriteDTDElement_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTDElement_APIParam_3 is xmlTextWriterWriteDTDElement_APIParam_3 of the element||||null
Write a DTD entity||||null
xmlTextWriterWriteDTDEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDEntity_APIParam_3 is the xmlTextWriterWriteDTDEntity_APIParam_3 of the DTD entity||||null
xmlTextWriterWriteDTDEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterWriteDTDEntity_APIParam_5 is the system identifier , which is the URI of the DTD||||null
xmlTextWriterWriteDTDEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDEntity_APIParam_3||||null
xmlTextWriterWriteDTDEntity_APIParam_7 is xmlTextWriterWriteDTDEntity_APIParam_7 of the entity||||null
xmlTextWriterWriteDTDEntity_APIName returns the bytes written  or -1 in case of error||||null
Write a DTD external entity||||null
The entity must have been started with xmlTextWriterStartDTDEntity||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDEntity_APIParam_2 is TRUE||||if this is a parameter entity
FALSE if not||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_3 is the xmlTextWriterWriteDTDExternalEntity_APIParam_3 of the DTD entity||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_4 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_6 is the xml notation xmlTextWriterWriteDTDExternalEntity_APIParam_3||||null
xmlTextWriterWriteDTDExternalEntity_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_5 is the system identifier , which is the URI of the DTD||||null
Write the contents of a DTD external entity||||null
xmlTextWriterWriteDTDExternalEntityContents_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDExternalEntityContents_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTDExternalEntityContents_APIParam_2 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterWriteDTDExternalEntityContents_APIParam_3 is the system identifier , which is the URI of the DTD||||null
xmlTextWriterWriteDTDExternalEntityContents_APIParam_4 is the xml notation name||||null
xmlTextWriterWriteDTDExternalEntity_APIParam_2 is TRUE||||if this is a parameter entity
FALSE if not||||null
Write a DTD internal entity||||null
xmlTextWriterWriteDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteDTDInternalEntity_APIParam_3 of the DTD entity||||null
xmlTextWriterWriteDTDInternalEntity_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTDInternalEntity_APIParam_4 is xmlTextWriterWriteDTDInternalEntity_APIParam_4 of the entity||||null
Write a DTD entity||||null
xmlTextWriterWriteDTDNotation_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteDTDNotation_APIParam_2 is the xmlTextWriterWriteDTDNotation_APIParam_2 of the xml notation||||null
xmlTextWriterWriteDTDInternalEntity_APIParam_2 is TRUE||||if this is a parameter entity
FALSE if not||||null
Write an xml element||||null
xmlTextWriterWriteDTDNotation_APIParam_3 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterWriteDTDNotation_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteDTDNotation_APIParam_4 is the system identifier , which is the URI of the DTD||||null
xmlTextWriterWriteElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteElement_APIParam_2 is element xmlTextWriterWriteElement_APIParam_2||||null
xmlTextWriterWriteElement_APIParam_3 is element xmlTextWriterWriteElement_APIParam_3||||null
xmlTextWriterWriteElement_APIName returns the bytes written  or -1 in case of error||||null
Write an xml element with namespace support||||null
xmlTextWriterWriteElementNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteElementNS_APIParam_2 is namespace xmlTextWriterWriteElementNS_APIParam_2||||null
xmlTextWriterWriteElementNS_APIParam_3 is element local xmlTextWriterWriteElementNS_APIParam_3||||null
xmlTextWriterWriteElementNS_APIParam_4 is namespace URI||||null
xmlTextWriterWriteElementNS_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteElementNS_APIParam_5 is element xmlTextWriterWriteElementNS_APIParam_5||||null
Write a formatted xmlTextWriterWriteFormatAttribute_APIParam_4 attribute||||null
xmlTextWriterWriteFormatAttribute_APIParam_1 is xmlTextWriterWriteFormatAttribute_APIParam_4 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteFormatAttribute_APIParam_2||||null
xmlTextWriterWriteFormatAttribute_APIName returns xmlTextWriterWriteFormatAttribute_APIParam_4 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatAttribute_APIParam_3 is xmlTextWriterWriteFormatAttribute_APIParam_3 string xmlTextWriterWriteFormatAttribute_APIParam_4 extra parameters xmlTextWriterWriteFormatAttribute_APIParam_4 the xmlTextWriterWriteFormatAttribute_APIParam_3||||null
Write a formatted xmlTextWriterWriteFormatAttributeNS_APIParam_6 attribute.with namespace support||||null
xmlTextWriterWriteFormatAttributeNS_APIParam_1 is xmlTextWriterWriteFormatAttributeNS_APIParam_6 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_2||||null
xmlTextWriterWriteFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteFormatAttributeNS_APIParam_3||||null
xmlTextWriterWriteFormatAttributeNS_APIParam_4 is namespace xmlTextWriterWriteFormatAttributeNS_APIParam_6||||null
xmlTextWriterWriteFormatAttributeNS_APIName returns xmlTextWriterWriteFormatAttributeNS_APIParam_6 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatAttributeNS_APIParam_5 is xmlTextWriterWriteFormatAttributeNS_APIParam_5 string xmlTextWriterWriteFormatAttributeNS_APIParam_6 extra parameters xmlTextWriterWriteFormatAttributeNS_APIParam_6 the xmlTextWriterWriteFormatAttributeNS_APIParam_5||||null
Write a formatted xmlTextWriterWriteFormatCDATA_APIParam_3 CDATA||||null
xmlTextWriterWriteFormatCDATA_APIParam_1 is xmlTextWriterWriteFormatCDATA_APIParam_3 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatCDATA_APIName returns xmlTextWriterWriteFormatCDATA_APIParam_3 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatCDATA_APIParam_2 is xmlTextWriterWriteFormatCDATA_APIParam_2 string xmlTextWriterWriteFormatCDATA_APIParam_3 extra parameters xmlTextWriterWriteFormatCDATA_APIParam_3 the xmlTextWriterWriteFormatCDATA_APIParam_2||||null
Write an xmlTextWriterWriteFormatComment_APIParam_3 comment||||null
xmlTextWriterWriteFormatComment_APIParam_1 is xmlTextWriterWriteFormatComment_APIParam_3 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatComment_APIParam_2 is xmlTextWriterWriteFormatComment_APIParam_2 string xmlTextWriterWriteFormatComment_APIParam_3 extra parameters xmlTextWriterWriteFormatComment_APIParam_3 the xmlTextWriterWriteFormatComment_APIParam_2||||null
xmlTextWriterWriteFormatDTD_APIParam_1 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatComment_APIName returns xmlTextWriterWriteFormatComment_APIParam_3 bytes written  or -1 in case of error||||null
Write a xmlTextWriterWriteFormatDTD_APIParam_6 with a formatted markup declarations part||||null
xmlTextWriterWriteFormatDTD_APIParam_2 is xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_2 of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6||||null
xmlTextWriterWriteFormatDTD_APIParam_3 is xmlTextWriterWriteFormatDTD_APIParam_6 public identifier , which is an alternative to xmlTextWriterWriteFormatDTD_APIParam_6 system identifier||||null
xmlTextWriterWriteFormatDTD_APIParam_5 is xmlTextWriterWriteFormatDTD_APIParam_5 string xmlTextWriterWriteFormatDTD_APIParam_6 extra parameters xmlTextWriterWriteFormatDTD_APIParam_6 the xmlTextWriterWriteFormatDTD_APIParam_5||||null
xmlTextWriterWriteFormatDTD_APIName returns xmlTextWriterWriteFormatDTD_APIParam_6 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatDTD_APIParam_4 is xmlTextWriterWriteFormatDTD_APIParam_6 system identifier , which is xmlTextWriterWriteFormatDTD_APIParam_6 URI of xmlTextWriterWriteFormatDTD_APIParam_6 xmlTextWriterWriteFormatDTD_APIParam_6||||null
Write a formatted xmlTextWriterWriteFormatDTDAttlist_APIParam_4 ATTLIST||||null
xmlTextWriterWriteFormatDTDAttlist_APIParam_1 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatDTDAttlist_APIParam_2 is xmlTextWriterWriteFormatDTDAttlist_APIParam_4 xmlTextWriterWriteFormatDTDAttlist_APIParam_2 of xmlTextWriterWriteFormatDTDAttlist_APIParam_4 DTD ATTLIST||||null
xmlTextWriterWriteFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteFormatDTDAttlist_APIParam_3 string xmlTextWriterWriteFormatDTDAttlist_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDAttlist_APIParam_4 the xmlTextWriterWriteFormatDTDAttlist_APIParam_3||||null
xmlTextWriterWriteFormatDTDAttlist_APIName returns xmlTextWriterWriteFormatDTDAttlist_APIParam_4 bytes written  or -1 in case of error||||null
Write a formatted xmlTextWriterWriteFormatDTDElement_APIParam_4 element||||null
xmlTextWriterWriteFormatDTDElement_APIParam_1 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatDTDElement_APIParam_2 is xmlTextWriterWriteFormatDTDElement_APIParam_4 xmlTextWriterWriteFormatDTDElement_APIParam_2 of xmlTextWriterWriteFormatDTDElement_APIParam_4 DTD element||||null
xmlTextWriterWriteFormatDTDElement_APIName returns xmlTextWriterWriteFormatDTDElement_APIParam_4 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatDTDElement_APIParam_3 is xmlTextWriterWriteFormatDTDElement_APIParam_3 string xmlTextWriterWriteFormatDTDElement_APIParam_4 extra parameters xmlTextWriterWriteFormatDTDElement_APIParam_4 the xmlTextWriterWriteFormatDTDElement_APIParam_3||||null
Write a formatted xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 internal entity||||null
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_1 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 xmlTextWriterWriteFormatDTDInternalEntity_APIParam_3 of xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 DTD entity||||null
xmlTextWriterWriteFormatDTDInternalEntity_APIName returns xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4 string xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 extra parameters xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 the xmlTextWriterWriteFormatDTDInternalEntity_APIParam_4||||null
Write a formatted xmlTextWriterWriteFormatElement_APIParam_4 element||||null
xmlTextWriterWriteFormatElement_APIParam_1 is xmlTextWriterWriteFormatElement_APIParam_4 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatElement_APIParam_2 is element xmlTextWriterWriteFormatElement_APIParam_2||||null
xmlTextWriterWriteFormatElement_APIName returns xmlTextWriterWriteFormatElement_APIParam_4 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_2 is TRUE||||if this is a parameter entity , FALSE if xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5
xmlTextWriterWriteFormatElement_APIParam_3 is xmlTextWriterWriteFormatElement_APIParam_3 string xmlTextWriterWriteFormatElement_APIParam_4 extra parameters xmlTextWriterWriteFormatElement_APIParam_4 the xmlTextWriterWriteFormatElement_APIParam_3||||null
Write a formatted xmlTextWriterWriteFormatElementNS_APIParam_6 element with namespace support||||null
xmlTextWriterWriteFormatElementNS_APIParam_1 is xmlTextWriterWriteFormatElementNS_APIParam_6 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteFormatElementNS_APIParam_2||||null
xmlTextWriterWriteFormatElementNS_APIParam_3 is element local xmlTextWriterWriteFormatElementNS_APIParam_3||||null
xmlTextWriterWriteFormatElementNS_APIParam_4 is namespace xmlTextWriterWriteFormatElementNS_APIParam_6||||null
xmlTextWriterWriteFormatElementNS_APIName returns xmlTextWriterWriteFormatElementNS_APIParam_6 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatElementNS_APIParam_5 is xmlTextWriterWriteFormatElementNS_APIParam_5 string xmlTextWriterWriteFormatElementNS_APIParam_6 extra parameters xmlTextWriterWriteFormatElementNS_APIParam_6 the xmlTextWriterWriteFormatElementNS_APIParam_5||||null
xmlTextWriterWriteFormatPI_APIParam_2 is PI xmlTextWriterWriteFormatPI_APIParam_2||||null
Write a formatted xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterWriteFormatPI_APIParam_1 is xmlTextWriterWriteFormatPI_APIParam_4 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatPI_APIName returns xmlTextWriterWriteFormatPI_APIParam_4 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatPI_APIParam_3 is xmlTextWriterWriteFormatPI_APIParam_3 string xmlTextWriterWriteFormatPI_APIParam_4 extra parameters xmlTextWriterWriteFormatPI_APIParam_4 the xmlTextWriterWriteFormatPI_APIParam_3||||null
Write a formatted xmlTextWriterWriteFormatRaw_APIParam_3 xml text||||null
xmlTextWriterWriteFormatRaw_APIParam_1 is xmlTextWriterWriteFormatRaw_APIParam_3 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatRaw_APIName returns xmlTextWriterWriteFormatRaw_APIParam_3 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatRaw_APIParam_2 is xmlTextWriterWriteFormatRaw_APIParam_2 string xmlTextWriterWriteFormatRaw_APIParam_3 extra parameters xmlTextWriterWriteFormatRaw_APIParam_3 the xmlTextWriterWriteFormatRaw_APIParam_2||||null
Write a formatted xmlTextWriterWriteFormatString_APIParam_3 text||||null
xmlTextWriterWriteFormatString_APIParam_1 is xmlTextWriterWriteFormatString_APIParam_3 xmlTextWriterPtr||||null
xmlTextWriterWriteFormatString_APIName returns xmlTextWriterWriteFormatString_APIParam_3 bytes written  or -1 in case of error||||null
xmlTextWriterWriteFormatString_APIParam_2 is xmlTextWriterWriteFormatString_APIParam_2 string xmlTextWriterWriteFormatString_APIParam_3 extra parameters xmlTextWriterWriteFormatString_APIParam_3 the xmlTextWriterWriteFormatString_APIParam_2||||null
Write an xml PI||||null
xmlTextWriterWritePI_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWritePI_APIParam_2 is PI xmlTextWriterWritePI_APIParam_2||||null
xmlTextWriterWritePI_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWritePI_APIParam_3 is PI xmlTextWriterWritePI_APIParam_3||||null
Write a raw xml text||||null
xmlTextWriterWriteRaw_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteRaw_APIParam_2 is text string||||null
xmlTextWriterWriteRaw_APIName returns the bytes written  or -1 in case of error||||null
Write an xml text||||null
xmlTextWriterWriteRawLen_APIParam_1 is the xmlTextWriterPtr||||null
what about entities and special chars ??||||null
xmlTextWriterWriteRawLen_APIParam_2 is text string||||null
xmlTextWriterWriteRawLen_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteRawLen_APIParam_3 is length of the text string||||null
Write an xml text||||null
xmlTextWriterWriteString_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteString_APIParam_2 is text string||||null
Write a formatted xml attribute||||null
xmlTextWriterWriteString_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatAttribute_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatAttribute_APIParam_2 is attribute xmlTextWriterWriteVFormatAttribute_APIParam_2||||null
xmlTextWriterWriteVFormatAttribute_APIParam_3 is xmlTextWriterWriteVFormatAttribute_APIParam_3 string||||null
xmlTextWriterWriteVFormatAttribute_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatAttribute_APIParam_4 is pointer to the first member of the variable argument list||||null
Write a formatted xml attribute.with namespace support||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_2 is namespace xmlTextWriterWriteVFormatAttributeNS_APIParam_2||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_3 is attribute local xmlTextWriterWriteVFormatAttributeNS_APIParam_3||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_4 is namespace URI||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_5 is xmlTextWriterWriteVFormatAttributeNS_APIParam_5 string||||null
xmlTextWriterWriteVFormatAttributeNS_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatAttributeNS_APIParam_6 is pointer to the first member of the variable argument list||||null
Write a formatted xml CDATA||||null
xmlTextWriterWriteVFormatCDATA_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatCDATA_APIParam_2 is xmlTextWriterWriteVFormatCDATA_APIParam_2 string||||null
xmlTextWriterWriteVFormatCDATA_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatCDATA_APIParam_3 is pointer to the first member of the variable argument list||||null
Write an xml comment||||null
xmlTextWriterWriteVFormatComment_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatComment_APIParam_2 is xmlTextWriterWriteVFormatComment_APIParam_2 string||||null
xmlTextWriterWriteVFormatComment_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatComment_APIParam_3 is pointer to the first member of the variable argument list||||null
Write a DTD with a formatted markup declarations part||||null
xmlTextWriterWriteVFormatDTD_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatDTD_APIParam_2 is the xmlTextWriterWriteVFormatDTD_APIParam_2 of the DTD||||null
xmlTextWriterWriteVFormatDTD_APIParam_3 is the public identifier , which is an alternative to the system identifier||||null
xmlTextWriterWriteVFormatDTD_APIParam_5 is xmlTextWriterWriteVFormatDTD_APIParam_5 string||||null
xmlTextWriterWriteVFormatDTD_APIParam_4 is the system identifier , which is the URI of the DTD||||null
xmlTextWriterWriteVFormatDTD_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatDTD_APIParam_6 is pointer to the first member of the variable argument list||||null
Write a formatted DTD ATTLIST||||null
xmlTextWriterWriteVFormatDTDAttlist_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 is the xmlTextWriterWriteVFormatDTDAttlist_APIParam_2 of the DTD ATTLIST||||null
xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 is xmlTextWriterWriteVFormatDTDAttlist_APIParam_3 string||||null
xmlTextWriterWriteVFormatDTDAttlist_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatDTDAttlist_APIParam_4 is pointer to the first member of the variable argument list||||null
Write a formatted DTD element||||null
xmlTextWriterWriteVFormatDTDElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatDTDElement_APIParam_2 is the xmlTextWriterWriteVFormatDTDElement_APIParam_2 of the DTD element||||null
xmlTextWriterWriteVFormatDTDElement_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatDTDElement_APIParam_3 is xmlTextWriterWriteVFormatDTDElement_APIParam_3 string||||null
xmlTextWriterWriteVFormatDTDElement_APIParam_4 is pointer to the first member of the variable argument list||||null
Write a formatted DTD internal entity||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 is the xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_3 of the DTD entity||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 is xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_4 string||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_5 is pointer to the first member of the variable argument list||||null
Write a formatted xml element||||null
xmlTextWriterWriteVFormatElement_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatElement_APIParam_2 is element xmlTextWriterWriteVFormatElement_APIParam_2||||null
xmlTextWriterWriteVFormatElement_APIParam_3 is xmlTextWriterWriteVFormatElement_APIParam_3 string||||null
xmlTextWriterWriteVFormatElement_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatElement_APIParam_4 is pointer to the first member of the variable argument list||||null
Write a formatted xml element with namespace support||||null
xmlTextWriterWriteVFormatElementNS_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_2 is TRUE||||if this is a parameter entity
FALSE if not||||null
xmlTextWriterWriteVFormatElementNS_APIParam_2 is namespace xmlTextWriterWriteVFormatElementNS_APIParam_2||||null
xmlTextWriterWriteVFormatElementNS_APIParam_3 is element local xmlTextWriterWriteVFormatElementNS_APIParam_3||||null
xmlTextWriterWriteVFormatElementNS_APIParam_4 is namespace URI||||null
xmlTextWriterWriteVFormatElementNS_APIParam_5 is xmlTextWriterWriteVFormatElementNS_APIParam_5 string||||null
xmlTextWriterWriteVFormatElementNS_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatElementNS_APIParam_6 is pointer to the first member of the variable argument list||||null
Write a formatted xml PI||||null
xmlTextWriterWriteVFormatPI_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatPI_APIParam_2 is PI xmlTextWriterWriteVFormatPI_APIParam_2||||null
xmlTextWriterWriteVFormatPI_APIParam_3 is xmlTextWriterWriteVFormatPI_APIParam_3 string||||null
xmlTextWriterWriteVFormatPI_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatPI_APIParam_4 is pointer to the first member of the variable argument list||||null
Write a formatted raw xml text||||null
xmlTextWriterWriteVFormatRaw_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatRaw_APIParam_2 is xmlTextWriterWriteVFormatRaw_APIParam_2 string||||null
xmlTextWriterWriteVFormatRaw_APIName returns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatRaw_APIParam_3 is pointer to the first member of the variable argument list||||null
Write a formatted xml text||||null
xmlTextWriterWriteVFormatString_APIParam_1 is the xmlTextWriterPtr||||null
xmlTextWriterWriteVFormatString_APIParam_2 is xmlTextWriterWriteVFormatString_APIParam_2 string||||null
Daniel Veillard||||null
xmlTextWriterWriteVFormatString_APINamereturns the bytes written  or -1 in case of error||||null
xmlTextWriterWriteVFormatString_APIParam_3 is pointer to the first member of the variable argument list||||null
xmlCharInRange_APIParam_1 is character to be validated||||null
xmlCharInRange_APIParam_2 is pointer to range to be used to validate||||null
xmlIsBaseChar_APIName is DEPRECATED||||null
Does a binary search of the range table to determine if char is valid||||null
Use xmlIsBaseChar_APIName_ch or xmlIsBaseChar_APINameQ instead||||null
xmlIsBaseChar_APIParam_1 is character to validate||||null
xmlIsBlank_APIName is DEPRECATED||||null
Use xmlIsBlank_APIName_ch or xmlIsBlank_APINameQ instead||||null
xmlIsBlank_APIParam_1 is character to validate||||null
xmlIsChar_APIName is DEPRECATED||||null
Use xmlIsChar_APIName_ch or xmlIsChar_APINameQ instead||||null
xmlIsChar_APIParam_1 is character to validate||||null
xmlIsCombining_APIName is DEPRECATED||||null
Use xmlIsCombining_APINameQ instead||||null
xmlIsCombining_APIParam_1 is character to validate||||null
xmlIsDigit_APIName is DEPRECATED||||null
Use xmlIsDigit_APIName_ch or xmlIsDigit_APINameQ instead||||null
xmlIsDigit_APIParam_1 is character to validate||||null
xmlIsExtender_APIName is DEPRECATED||||null
Use xmlIsExtender_APIName_ch or xmlIsExtender_APINameQ instead||||null
xmlIsExtender_APIParam_1 is character to validate||||null
xmlIsIdeographic_APIName is DEPRECATED||||null
Use xmlIsIdeographic_APINameQ instead||||null
xmlIsIdeographic_APIParam_1 is character to validate||||null
This function is DEPRECATED||||null
Use xmlIsPubidChar_ch or xmlIsPubidCharQ instead||||null
xmlIsPubidChar_APIParam_1 is character to validate||||null
Daniel Veillard||||null
Close a document saving context , i.e||||null
xmlSaveClose_APIParam_1 is a document saving context||||null
xmlSaveClose_APIName returns the number of byte written or -1 in case of error||||null
make sure that all bytes have been output and free the associated data||||null
xmlSaveDoc_APIParam_1 is a document saving context||||null
xmlSaveDoc_APIParam_2 is a document||||null
xmlSaveDoc_APIName returns the number of byte written or -1 in case of error||||null
Flush a document saving context , i.e||||null
make sure that all bytes have been output||||null
Save a full document to a saving context TODO||||null
The function is not fully implemented yet as The function does not return the byte count but 0 instead||||null
xmlSaveFlush_APIName returns the number of byte written or -1 in case of error||||null
xmlSaveFlush_APIParam_1 is a document saving context||||null
xmlSaveSetAttrEscape_APIParam_1 is a document saving context||||null
xmlSaveSetAttrEscape_APIName returns 0 if successful or -1 in case of error||||null
xmlSaveSetAttrEscape_APIParam_2 is the escaping function||||null
Set a custom escaping function to be used for text in attribute content||||null
xmlSaveSetEscape_APIParam_1 is a document saving context||||null
xmlSaveSetEscape_APIParam_2 is the escaping function||||null
xmlSaveSetEscape_APIName returns 0 if successful or -1 in case of error||||null
xmlSaveToBuffer_APIParam_1 is a xmlSaveToBuffer_APIParam_1||||null
Set a custom escaping function to be used for text in element content||||null
xmlSaveToBuffer_APIParam_2 is the xmlSaveToBuffer_APIParam_2 name to use or NULL||||null
Create a document saving context serializing to a xmlSaveToBuffer_APIParam_1 with the xmlSaveToBuffer_APIParam_2 and the xmlSaveToBuffer_APIParam_3 given||||null
xmlSaveToBuffer_APIName returns a new serialization context or NULL in case of error||||null
xmlSaveToBuffer_APIParam_3 is a set of xmlSaveOptions||||null
xmlSaveToFd_APIParam_1 is a file descriptor number||||null
xmlSaveToFd_APIParam_2 is the xmlSaveToFd_APIParam_2 name to use or NULL||||null
xmlSaveToFd_APIParam_3 is a set of xmlSaveOptions||||null
xmlSaveToFd_APIName returns a new serialization context or NULL in case of error||||null
xmlSaveToFilename_APIParam_1 is a file name or an URL||||null
Create a document saving context serializing to a file descriptor with the xmlSaveToFd_APIParam_2 and the xmlSaveToFd_APIParam_3 given||||null
xmlSaveToFilename_APIParam_2 is the xmlSaveToFilename_APIParam_2 name to use or NULL||||null
xmlSaveToFilename_APIParam_3 is a set of xmlSaveOptions||||null
xmlSaveToFilename_APIName returns a new serialization context or NULL in case of error||||null
xmlSaveToIO_APIParam_1 is an I/O write function||||null
xmlSaveToIO_APIParam_2 is an I/O close function||||null
Create a document saving context serializing to a xmlSaveToFilename_APIParam_1 or possibly to an URL with the xmlSaveToFilename_APIParam_2 and the xmlSaveToFilename_APIParam_3 given||||null
xmlSaveToIO_APIParam_3 is an I/O handler||||null
xmlSaveToIO_APIParam_4 is the xmlSaveToIO_APIParam_4 name to use or NULL||||null
xmlSaveToIO_APIName returns a new serialization context or NULL in case of error||||null
xmlSaveToIO_APIParam_5 is a set of xmlSaveOptions||||null
Create a document saving context serializing to a file descriptor with the xmlSaveToIO_APIParam_4 and the xmlSaveToIO_APIParam_5 given||||null
xmlSaveTree_APIParam_1 is a document saving context||||null
Daniel Veillard||||null
xmlSaveTree_APIParam_2 is the top xmlSaveTree_APIParam_2 of the subtree to save||||null
xmlSaveTree_APINamereturns the number of byte written or -1 in case of error||||null
Register a new entity for this document||||null
xmlAddDocEntity_APIParam_1 is the document||||null
xmlAddDocEntity_APIParam_2 is the entity xmlAddDocEntity_APIParam_2||||null
xmlAddDocEntity_APIParam_3 is the entity xmlAddDocEntity_APIParam_3 XML_xxx_yyy_ENTITY||||null
Save a subtree starting at the xmlSaveTree_APIParam_2 parameter to a saving context TODO||||null
The function is not fully implemented yet as it does not return the byte count but 0 instead||||null
xmlAddDocEntity_APIName returns a pointer to the entity or NULL in case of error||||null
xmlAddDocEntity_APIParam_6 is the entity xmlAddDocEntity_APIParam_6||||null
xmlAddDtdEntity_APIParam_1 is the document||||null
Register a new entity for this document DTD external subset||||null
xmlAddDtdEntity_APIParam_2 is the entity xmlAddDtdEntity_APIParam_2||||null
xmlAddDtdEntity_APIParam_3 is the entity xmlAddDtdEntity_APIParam_3 XML_xxx_yyy_ENTITY||||null
xmlAddDocEntity_APIParam_5 is the entity system ID||||if available
xmlAddDocEntity_APIParam_4 is the entity external ID||||if available
xmlAddDtdEntity_APIParam_6 is the entity xmlAddDtdEntity_APIParam_6||||null
Cleanup up the predefined entities table||||null
Deprecated call||||null
xmlAddDtdEntity_APIName returns a pointer to the entity or NULL in case of error||||null
Build a copy of an entity xmlCopyEntitiesTable_APIParam_1||||null
xmlCopyEntitiesTable_APIName returns the new xmlEntitiesTablePtr or NULL in case of error||||null
xmlCopyEntitiesTable_APIParam_1 is An entity xmlCopyEntitiesTable_APIParam_1||||null
xmlAddDtdEntity_APIParam_4 is the entity external ID||||if available
xmlAddDtdEntity_APIParam_5 is the entity system ID||||if available
create and initialize an empty entities hash table||||null
xmlCreateEntitiesTable_APIName returns the xmlEntitiesTablePtr just created or NULL in case of error||||null
This really does not make sense and should be deprecated||||null
xmlDumpEntitiesTable_APIParam_1 is An XML buffer||||null
xmlDumpEntitiesTable_APIParam_2 is An entity table||||null
xmlDumpEntityDecl_APIParam_1 is An XML buffer||||null
This will dump the content of the entity xmlDumpEntitiesTable_APIParam_2 as an XML DTD definition||||null
xmlDumpEntityDecl_APIParam_2 is An entity table||||null
This will dump the content of the entity table as an XML DTD definition||||null
xmlEncodeEntities_APIParam_1 is the document containing the string||||null
xmlEncodeEntities_APIParam_2 is A string to convert to XML||||null
xmlEncodeEntities_APIName returns NULL||||null
xmlEncodeEntitiesReentrant_APIParam_1 is the document containing the string||||null
remove xmlEncodeEntities_APIName , once we are not afraid of breaking binary compatibility People must migrate their code to xmlEncodeEntities_APINameReentrant !||||null
xmlEncodeEntitiesReentrant_APIParam_2 is A string to convert to XML||||null
Contrary to xmlEncodeEntities , this routine is reentrant , and result must be deallocated||||null
This routine will issue a warning||||when encountered
xmlEncodeEntitiesReentrant_APIName returns A newly allocated string with the substitution done||||null
xmlEncodeSpecialChars_APIParam_1 is the document containing the string||||null
xmlEncodeSpecialChars_APIName returns A newly allocated string with the substitution done||||null
xmlEncodeSpecialChars_APIParam_2 is A string to convert to XML||||null
Do a global encoding of a string , replacing the predefined entities and non ASCII values with their entities and CharRef counterparts||||null
xmlFreeEntitiesTable_APIParam_1 is An entity table||||null
Deallocate the memory used by an entities hash xmlFreeEntitiesTable_APIParam_1||||null
Do an entity lookup in the document entity hash table and||||null
xmlGetDocEntity_APIParam_1 is the document referencing the entity||||null
xmlGetDocEntity returns A pointer to the entity structure or NULL if not found||||null
xmlGetDocEntity_APIParam_2 is the entity xmlGetDocEntity_APIParam_2||||null
Do a global encoding of a string , replacing the predefined entities this routine is reentrant , and result must be deallocated||||null
xmlGetDtdEntity_APIParam_1 is the document referencing the entity||||null
Do an entity lookup in the DTD entity hash table and||||null
xmlGetDtdEntity_APIName returns the corresponding entity, if found||||null
xmlGetDtdEntity_APIParam_2 is the entity xmlGetDtdEntity_APIParam_2||||null
xmlGetDtdEntity returns A pointer to the entity structure or NULL if not found||||null
Note the first argument is the document node , not the DTD node||||null
xmlGetParameterEntity_APIParam_1 is the document referencing the entity||||null
Do an entity lookup in the internal and external subsets and||||null
xmlGetParameterEntity_APIName returns the corresponding parameter entity, if found||||null
xmlGetParameterEntity_APIParam_2 is the entity xmlGetParameterEntity_APIParam_2||||null
xmlGetParameterEntity returns A pointer to the entity structure or NULL if not found||||null
xmlGetPredefinedEntity_APIParam_1 is the entity xmlGetPredefinedEntity_APIParam_1||||null
Set up the predefined entities||||null
Deprecated call||||null
xmlNewEntity_APIParam_1 is the document||||null
xmlNewEntity_APIParam_2 is the entity xmlNewEntity_APIParam_2||||null
xmlNewEntity_APIParam_3 is the entity xmlNewEntity_APIParam_3 XML_xxx_yyy_ENTITY||||null
xmlNewEntity_APIParam_6 is the entity xmlNewEntity_APIParam_6||||null
Daniel Veillard||||null
xmlNewEntity_APINamereturns a pointer to the entity or NULL in case of error||||null
Build a node list tree copy of the XPointer result||||null
This will drop Attributes and Namespace declarations||||null
xmlXPtrBuildNodeList_APIName returns an xmlNodePtr list or NULL||||null
xmlNewEntity_APIParam_5 is the entity system ID||||if available
xmlXPtrBuildNodeList_APIParam_1 is the XPointer result from the evaluation||||null
xmlNewEntity_APIParam_4 is the entity external ID||||if available
the caller has to free the node tree||||null
Evaluate the XPath Location Path in the given context||||null
xmlXPtrEval_APIParam_1 is the XPointer expression||||null
xmlXPtrEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL||||null
xmlXPtrEval_APIParam_2 is the XPointer context||||null
the caller has to free the object||||null
xmlXPtrEvalRangePredicate_APIParam_1 is the XPointer Parser context||||null
Free the LocationSet compound||||null
xmlXPtrFreeLocationSet_APIParam_1 is the xmlLocationSetPtr to free||||null
xmlXPtrLocationSetAdd_APIParam_1 is the initial range set||||null
= PredicateExpr||||null
Create a new entity, this differs from xmlAddDocEntity_APIName that if the document is NULL or has no internal subset defined, an unlinked entity structure will be returned, it is the responsability of the caller to link it to the document later or free it when not needed anymore||||null
xmlXPtrLocationSetAdd_APIParam_2 is a new xmlXPathObjectPtr||||null
= Expr Evaluate a predicate as in xmlXPathEvalPredicate_APIName but for a Location Set instead of a node set||||null
xmlXPtrLocationSetCreate_APIParam_1 is an initial xmlXPathObjectPtr , or NULL||||null
xmlXPtrLocationSetCreate_APIName returns the newly created object||||null
Create a new xmlLocationSetPtr of type double and of value @val||||null
Removes an xmlXPathObjectPtr from an existing LocationSet||||null
xmlXPtrLocationSetDel_APIParam_1 is the initial range set||||null
xmlXPtrLocationSetDel_APIParam_2 is an xmlXPathObjectPtr||||null
xmlXPtrLocationSetMerge_APIParam_1 is the first LocationSet||||null
xmlXPtrLocationSetMerge_APIName returns xmlXPtrLocationSetMerge_APIParam_1 once extended or NULL in case of error||||null
xmlXPtrLocationSetMerge_APIParam_2 is the second LocationSet||||null
Merges two rangesets , all ranges from @val2 are added to @val1||||null
add a new xmlXPathObjectPtr to an existing LocationSet||||If the location already exist in the set @val
is freed||||null
Removes an entry from an existing LocationSet list||||null
xmlXPtrLocationSetRemove_APIParam_1 is the initial range set||||null
xmlXPtrLocationSetRemove_APIParam_2 is the index to remove||||null
xmlXPtrNewCollapsedRange_APIName returns the newly created object||||null
Create a new xmlXPathObjectPtr of type range using a single nodes||||null
xmlXPtrNewCollapsedRange_APIParam_1 is the starting and ending node||||null
Create a new XPointer context||||null
xmlXPtrNewContext_APIParam_1 is the XML document||||null
xmlXPtrNewContext_APIName returns the xmlXPathContext just allocated||||null
xmlXPtrNewContext_APIParam_2 is the node that directly contains the XPointer being evaluated or NULL||||null
xmlXPtrNewLocationSetNodeSet_APIName returns the newly created object||||null
xmlXPtrNewLocationSetNodeSet_APIParam_1 is a node xmlXPtrNewLocationSetNodeSet_APIParam_1||||null
xmlXPtrNewContext_APIParam_3 is the element from which a user or program initiated traversal of the link , or NULL||||null
xmlXPtrNewLocationSetNodes_APIParam_1 is the xmlXPtrNewLocationSetNodes_APIParam_1 NodePtr value||||null
xmlXPtrNewLocationSetNodes_APIName returns the newly created object||||null
Create a new xmlXPathObjectPtr of type LocationSet and initialize it with all the nodes from @set||||null
xmlXPtrNewLocationSetNodes_APIParam_2 is the xmlXPtrNewLocationSetNodes_APIParam_2 NodePtr value or NULL||||null
Create a new xmlXPathObjectPtr of type range||||null
xmlXPtrNewRange_APIParam_1 is the starting node||||null
xmlXPtrNewRange_APIParam_2 is the xmlXPtrNewRange_APIParam_1 index||||null
Create a new xmlXPathObjectPtr of type LocationSet and initialize it with the single range made of the two nodes @start and @end||||null
xmlXPtrNewRange_APIParam_3 is the ending point||||null
xmlXPtrNewRange_APIParam_4 is the ending index||||null
xmlXPtrNewRange_APIName returns the newly created object||||null
xmlXPtrNewRangeNodeObject_APIParam_1 is the starting node||||null
xmlXPtrNewRangeNodeObject_APIParam_2 is the ending object||||null
xmlXPtrNewRangeNodeObject_APIName returns the newly created object||||null
xmlXPtrNewRangeNodePoint_APIParam_1 is the starting node||||null
Create a new xmlXPathObjectPtr of type range from a not to an object||||null
xmlXPtrNewRangeNodePoint_APIParam_2 is the ending point||||null
xmlXPtrNewRangeNodePoint_APIName returns the newly created object||||null
Create a new xmlXPathObjectPtr of type range from a node to a point||||null
Create a new xmlXPathObjectPtr of type range using 2 nodes||||null
xmlXPtrNewRangeNodes_APIParam_1 is the starting node||||null
xmlXPtrNewRangeNodes_APIName returns the newly created object||||null
xmlXPtrNewRangeNodes_APIParam_2 is the ending node||||null
xmlXPtrNewRangePointNode_APIParam_1 is the starting point||||null
xmlXPtrNewRangePointNode_APIParam_2 is the ending node||||null
Create a new xmlXPathObjectPtr of type range from a point to a node||||null
xmlXPtrNewRangePointNode_APIName returns the newly created object||||null
Create a new xmlXPathObjectPtr of type range using 2 Points||||null
xmlXPtrNewRangePoints_APIParam_1 is the starting point||||null
xmlXPtrNewRangePoints_APIParam_2 is the ending point||||null
xmlXPtrNewRangePoints_APIName returns the newly created object||||null
Implement the range-to_APIName XPointer function Obsolete||||null
xmlXPtrRangeToFunction_APIParam_1 is the XPointer Parser context||||null
xmlXPtrRangeToFunction_APIParam_2 is the number of args||||null
Wrap the LocationSet @val in a new xmlXPathObjectPtr||||null
xmlXPtrWrapLocationSet_APIParam_1 is the LocationSet value||||null
xmlXPtrWrapLocationSet_APINamereturns the newly created object||||null
range-to is not a real function but a special type of location step which is handled in xpath.c||||null
Daniel Veillard||||null
xmlBuildRelativeURI_APIParam_1 is the xmlBuildRelativeURI_APIParam_1 reference under consideration||||null
Expresses the xmlBuildRelativeURI_APIParam_1 of the reference in terms relative to the xmlBuildRelativeURI_APIParam_2||||null
xmlBuildRelativeURI_APIName returns a new xmlBuildRelativeURI_APIParam_1 string  or NULL in case error||||null
xmlBuildRelativeURI_APIParam_2 is the xmlBuildRelativeURI_APIParam_2 value||||null
Resolving Relative References to Absolute Form||||null
This is processed according to section 5.2 of the RFC 2396 5.2||||null
xmlBuildURI_APIParam_2 is the xmlBuildURI_APIParam_2 value||||null
xmlBuildURI_APIParam_1 is the xmlBuildURI_APIParam_1 instance found in the document||||null
xmlBuildURI_APIName returns a new xmlBuildURI_APIParam_1 string  or NULL in case of error||||null
Constructs a canonic xmlCanonicPath_APIParam_1 from the specified xmlCanonicPath_APIParam_1||||null
xmlCanonicPath_APIParam_1 is the resource locator in a filesystem notation||||null
Computes he final xmlBuildURI_APIParam_1 of the reference done by checking that the given xmlBuildURI_APIParam_1 is valid , and building the final xmlBuildURI_APIParam_1 using the xmlBuildURI_APIParam_2 xmlBuildURI_APIParam_1||||null
Simply creates an empty xmlURI||||null
The caller is responsible for freeing the memory occupied by xmlCanonicPath_APIParam_0||||null
xmlCanonicPath_APIName returns a new canonic xmlCanonicPath_APIParam_1, or a duplicate of the xmlCanonicPath_APIParam_1 parameter if the construction fails||||null
If there is insufficient memory available, or the argument is NULL, the function returns NULL||||null
Free up the xmlURI struct||||null
xmlCreateURI_APIName returns the new structure or NULL in case of error||||null
xmlFreeURI_APIParam_1 is pointer to an xmlURI||||null
Normalization occurs directly on the string , no new allocation is done||||null
xmlNormalizeURIPath_APIParam_1 is pointer to the xmlNormalizeURIPath_APIParam_1 string||||null
xmlNormalizeURIPath_APIName returns 0 or an error code||||null
Parse an URI based on RFC 3986 URI-reference =||||null
Applies the 5 normalization steps to a xmlNormalizeURIPath_APIParam_1 string -- that is , RFC 2396 Section 5.2 , steps 6.c through 6||||null
xmlParseURI_APIName returns a newly built xmlURIPtr or NULL in case of error||||null
xmlParseURI_APIParam_1 is the URI string to analyze||||null
URI-reference = URI / relative-ref||||null
Parse an URI but allows to keep intact the original fragments||||null
xmlParseURIRaw_APIParam_1 is the URI string to analyze||||null
xmlParseURIRaw_APIName returns a newly built xmlURIPtr or NULL in case of error||||null
xmlParseURIReference_APIParam_1 is pointer to an URI structure||||null
xmlParseURIReference_APIParam_2 is the string to analyze||||null
xmlParseURIReference_APIName returns 0 or the error code||||null
Constructs an URI expressing the existing xmlPathToURI_APIParam_1||||null
xmlPathToURI_APIName returns a new URI, or a duplicate of the xmlPathToURI_APIParam_1 parameter if the construction fails||||null
xmlPathToURI_APIParam_1 is the resource locator in a filesystem notation||||null
xmlParseURIRaw_APIParam_2 is||||if 1 unescaping of URI pieces are disabled
Prints the URI in the xmlPrintURI_APIParam_1 @stream||||null
The caller is responsible for freeing the memory occupied by xmlPathToURI_APIParam_0||||null
If there is insufficient memory available, or the argument is NULL, the function returns NULL||||null
Parse an URI reference string based on RFC 3986 and fills in the appropriate fields of the @uri structure URI-reference = URI / relative-ref||||null
xmlPrintURI_APIParam_1 is a FILE * for the output||||null
xmlPrintURI_APIParam_2 is pointer to an xmlURI||||null
Save the URI as an escaped string||||null
xmlSaveUri_APIName returns a new string (to be deallocated by caller||||null
xmlSaveUri_APIParam_1 is pointer to an xmlURI||||null
Escaping routine , does not do validity checks !||||null
xmlURIEscape_APIParam_1 is the string of the URI to escape||||null
- Carl Douglas||||null
xmlURIEscapeStr_APIParam_1 is string to escape||||null
It will try to escape the chars needing this , but this is heuristic based it is impossible to be sure||||null
xmlURIEscape_APIName returns an copy of the string, but escaped 25 May 2001 Uses xmlParseURI and xmlURIEscape_APINameStr to try to escape correctly according to RFC2396||||null
xmlURIEscapeStr_APIParam_2 is exception xmlURIEscapeStr_APIParam_2 string of chars not to escape||||null
xmlURIEscapeStr_APIName returns a new escaped string or NULL in case of error||||null
This routine escapes a string to hex , ignoring reserved characters and the characters in the exception xmlURIEscapeStr_APIParam_2||||null
xmlURIUnescapeString_APIParam_1 is the string to unescape||||null
Unescaping routine , but does not check that the string is an URI||||null
xmlURIUnescapeString_APIParam_2 is the length in bytes to unescape||||null
xmlURIUnescapeString_APIParam_3 is optional destination buffer||||null
Daniel Veillard||||null
Deallocate a Schema Type structure||||null
xmlURIUnescapeString_APINamereturns a copy of the string, but unescaped, will return NULL only in case of error||||null
xmlSchemaFreeType_APIParam_1 is a schema xmlSchemaFreeType_APIParam_1 structure||||null
Deallocates a xmlSchemaFreeWildcard_APIParam_1 structure||||null
xmlSchemaFreeWildcard_APIParam_1 is a xmlSchemaFreeWildcard_APIParam_1 structure||||null
Daniel Veillard||||null
Add the @userdata to the hash @table||||null
This can later be retrieved by using the @name||||null
Duplicate names generate errors||||null
xmlHashAddEntry_APIParam_1 is the hash xmlHashAddEntry_APIParam_1||||null
xmlHashAddEntry_APIParam_2 is the xmlHashAddEntry_APIParam_2 of the xmlHashAddEntry_APIParam_3||||null
The output is a direct unsigned char translation of % XX values Note that the length of the result can only be smaller or same size as the input string||||null
xmlHashAddEntry_APIParam_3 is a pointer to the xmlHashAddEntry_APIParam_3||||null
xmlHashAddEntry_APIName returns 0 the addition succeeded and -1 in case of error||||null
Add the @userdata to the hash @table||||null
This can later be retrieved by using the tuple||||null
Duplicate tuples generate errors||||null
xmlHashAddEntry2_APIParam_1 is the hash xmlHashAddEntry2_APIParam_1||||null
xmlHashAddEntry2_APIParam_2 is the xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4||||null
xmlHashAddEntry2_APIParam_3 is a second xmlHashAddEntry2_APIParam_2 of the xmlHashAddEntry2_APIParam_4||||null
xmlHashAddEntry2_APIParam_4 is a pointer to the xmlHashAddEntry2_APIParam_4||||null
xmlHashAddEntry2_APIName returns 0 the addition succeeded and -1 in case of error||||null
Add the @userdata to the hash @table||||null
This can later be retrieved by using the tuple||||null
Duplicate entries generate errors||||null
xmlHashAddEntry3_APIParam_1 is the hash xmlHashAddEntry3_APIParam_1||||null
xmlHashAddEntry3_APIParam_2 is the xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5||||null
xmlHashAddEntry3_APIParam_3 is a second xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5||||null
xmlHashAddEntry3_APIParam_4 is a third xmlHashAddEntry3_APIParam_2 of the xmlHashAddEntry3_APIParam_5||||null
xmlHashAddEntry3_APIParam_5 is a pointer to the xmlHashAddEntry3_APIParam_5||||null
xmlHashAddEntry3_APIName returns 0 the addition succeeded and -1 in case of error||||null
Callback to copy data from a hash||||null
xmlHashCopier_APIParam_1 is the data in the hash||||null
xmlHashCopier_APIParam_2 is the xmlHashCopier_APIParam_2 associated||||null
xmlHashCopy_APIParam_1 is the hash xmlHashCopy_APIParam_1||||null
xmlHashCopier_APIName returns a copy of the data or NULL in case of error||||null
Scan the hash @table and applied @f to each value||||null
xmlHashCopy_APIName returns the new xmlHashCopy_APIParam_1 or NULL in case of error||||null
xmlHashCopy_APIParam_2 is the copier function for items in the hash||||null
Create a new xmlHashTablePtr||||null
xmlHashCreate_APIName returns the newly created object, or NULL if an error occurred||||null
xmlHashCreate_APIParam_1 is the xmlHashCreate_APIParam_1 of the hash table||||null
Create a new xmlHashTablePtr which will use @dict as the internal dictionary||||null
xmlHashCreateDict_APIParam_1 is the xmlHashCreateDict_APIParam_1 of the hash table||||null
xmlHashCreateDict_APIName returns the newly created object, or NULL if an error occurred||||null
xmlHashCreateDict_APIParam_2 is a dictionary to use for the hash||||null
Callback to free data from a hash||||null
xmlHashDeallocator_APIParam_1 is the data in the hash||||null
xmlHashDeallocator_APIParam_2 is the xmlHashDeallocator_APIParam_2 associated||||null
Free the hash @table and its contents||||null
xmlHashFree_APIParam_1 is the hash xmlHashFree_APIParam_1||||null
Find the userdata specified by the @name||||null
xmlHashFree_APIParam_2 is the deallocator function for items in the hash||||null
xmlHashLookup_APIParam_1 is the hash xmlHashLookup_APIParam_1||||null
xmlHashLookup_APIName returns the pointer to the userdata||||null
xmlHashLookup_APIParam_2 is the xmlHashLookup_APIParam_2 of the userdata||||null
Find the userdata specified by the tuple||||null
xmlHashLookup2_APIParam_1 is the hash xmlHashLookup2_APIParam_1||||null
The userdata is deallocated with @f||||if provided
xmlHashLookup2_APIParam_2 is the xmlHashLookup2_APIParam_2 of the userdata||||null
xmlHashLookup2_APIName returns the pointer to the userdata||||null
xmlHashLookup2_APIParam_3 is a second xmlHashLookup2_APIParam_2 of the userdata||||null
Find the userdata specified by the tuple||||null
xmlHashLookup3_APIParam_1 is the hash xmlHashLookup3_APIParam_1||||null
xmlHashLookup3_APIParam_2 is the xmlHashLookup3_APIParam_2 of the userdata||||null
xmlHashLookup3_APIParam_3 is a second xmlHashLookup3_APIParam_2 of the userdata||||null
xmlHashLookup3_APIName returns the a pointer to the userdata||||null
xmlHashLookup3_APIParam_4 is a third xmlHashLookup3_APIParam_2 of the userdata||||null
Find the userdata specified by the QName @prefix||||null
xmlHashQLookup_APIParam_1 is the hash xmlHashQLookup_APIParam_1||||null
xmlHashQLookup_APIParam_2 is the xmlHashQLookup_APIParam_2 of the userdata||||null
xmlHashQLookup_APIName returns the pointer to the userdata||||null
xmlHashQLookup_APIParam_3 is the xmlHashQLookup_APIParam_3 of the userdata||||null
Find the userdata specified by the QNames tuple||||null
xmlHashQLookup2_APIParam_1 is the hash xmlHashQLookup2_APIParam_1||||null
xmlHashQLookup2_APIParam_2 is the xmlHashQLookup2_APIParam_2 of the userdata||||null
xmlHashQLookup2_APIParam_3 is the xmlHashQLookup2_APIParam_3 of the userdata||||null
xmlHashQLookup2_APIParam_4 is the second xmlHashQLookup2_APIParam_2 of the userdata||||null
xmlHashQLookup2_APIName returns the pointer to the userdata||||null
xmlHashQLookup2_APIParam_5 is a second xmlHashQLookup2_APIParam_3 of the userdata||||null
Find the userdata specified by the tuple||||null
xmlHashQLookup3_APIParam_1 is the hash xmlHashQLookup3_APIParam_1||||null
xmlHashQLookup3_APIParam_2 is the xmlHashQLookup3_APIParam_2 of the userdata||||null
xmlHashQLookup3_APIParam_3 is the xmlHashQLookup3_APIParam_3 of the userdata||||null
xmlHashQLookup3_APIParam_4 is the second xmlHashQLookup3_APIParam_2 of the userdata||||null
xmlHashQLookup3_APIParam_5 is a second xmlHashQLookup3_APIParam_3 of the userdata||||null
xmlHashQLookup3_APIParam_6 is the third xmlHashQLookup3_APIParam_2 of the userdata||||null
xmlHashQLookup3_APIName returns the a pointer to the userdata||||null
xmlHashQLookup3_APIParam_7 is a third xmlHashQLookup3_APIParam_3 of the userdata||||null
xmlHashRemoveEntry_APIParam_2 is the xmlHashRemoveEntry_APIParam_2 of the userdata||||null
Find the userdata specified by the @name and remove the @name from the hash @table||||null
xmlHashRemoveEntry_APIParam_3 is the deallocator function for removed item||||null
Existing userdata for this tuple will be removed and freed with @f||||null
xmlHashRemoveEntry_APIName returns 0 if the removal succeeded and -1 in case of error or not found||||null
Find the userdata specified by the tuple and remove it from the hash @table||||null
xmlHashRemoveEntry2_APIParam_2 is the xmlHashRemoveEntry2_APIParam_2 of the userdata||||null
xmlHashRemoveEntry2_APIParam_3 is a second xmlHashRemoveEntry2_APIParam_2 of the userdata||||null
Existing userdata for this tuple will be removed and freed with @f||||null
xmlHashRemoveEntry2_APIParam_4 is the deallocator function for removed item||||null
xmlHashRemoveEntry2_APIName returns 0 if the removal succeeded and -1 in case of error or not found||||null
Find the userdata specified by the tuple and remove it from the hash @table||||null
xmlHashRemoveEntry3_APIParam_2 is the xmlHashRemoveEntry3_APIParam_2 of the userdata||||null
Existing userdata for this tuple will be removed and freed with @f||||null
xmlHashRemoveEntry3_APIParam_3 is a second xmlHashRemoveEntry3_APIParam_2 of the userdata||||null
xmlHashRemoveEntry3_APIParam_4 is a third xmlHashRemoveEntry3_APIParam_2 of the userdata||||null
xmlHashRemoveEntry3_APIParam_5 is the deallocator function for removed item||||null
xmlHashScan_APIParam_1 is the hash xmlHashScan_APIParam_1||||null
Scan the hash @table and applied @f to each value||||null
xmlHashRemoveEntry3_APIName returns 0 if the removal succeeded and -1 in case of error or not found||||null
xmlHashScan_APIParam_2 is the scanner function for items in the hash||||null
xmlHashScan_APIParam_3 is extra xmlHashScan_APIParam_3 passed to f||||null
xmlHashScan3_APIParam_1 is the hash xmlHashScan3_APIParam_1||||null
Scan the hash @table and applied @f to each value matching tuple||||null
xmlHashScan3_APIParam_2 is the xmlHashScan3_APIParam_2 of the userdata or NULL||||null
xmlHashScan3_APIParam_3 is a second xmlHashScan3_APIParam_2 of the userdata or NULL||||null
xmlHashScan3_APIParam_4 is a third xmlHashScan3_APIParam_2 of the userdata or NULL||||null
xmlHashScan3_APIParam_5 is the scanner function for items in the hash||||null
xmlHashScan3_APIParam_6 is extra xmlHashScan3_APIParam_6 passed to f||||null
Scan the hash @table and applied @f to each value||||null
xmlHashScanFull_APIParam_1 is the hash xmlHashScanFull_APIParam_1||||null
the comparison is considered to match||||If one of the names is null
xmlHashScanFull_APIParam_2 is the scanner function for items in the hash||||null
xmlHashScanFull_APIParam_3 is extra xmlHashScanFull_APIParam_3 passed to f||||null
Scan the hash @table and applied @f to each value matching tuple||||null
xmlHashScanFull3_APIParam_1 is the hash xmlHashScanFull3_APIParam_1||||null
xmlHashScanFull3_APIParam_2 is the xmlHashScanFull3_APIParam_2 of the userdata or NULL||||null
xmlHashScanFull3_APIParam_3 is a second xmlHashScanFull3_APIParam_2 of the userdata or NULL||||null
xmlHashScanFull3_APIParam_4 is a third xmlHashScanFull3_APIParam_2 of the userdata or NULL||||null
the comparison is considered to match||||If one of the names is null
xmlHashScanFull3_APIParam_5 is the scanner function for items in the hash||||null
xmlHashScanFull3_APIParam_6 is extra xmlHashScanFull3_APIParam_6 passed to f||||null
xmlHashScanner_APIParam_1 is the xmlHashScanner_APIParam_2 in the hash||||null
xmlHashScanner_APIParam_2 is extra scannner xmlHashScanner_APIParam_2||||null
xmlHashScanner_APIParam_3 is the xmlHashScanner_APIParam_3 associated||||null
xmlHashScannerFull_APIParam_1 is the xmlHashScannerFull_APIParam_2 in the hash||||null
xmlHashScannerFull_APIParam_2 is extra scannner xmlHashScannerFull_APIParam_2||||null
xmlHashScannerFull_APIParam_3 is the xmlHashScannerFull_APIParam_3 associated||||null
xmlHashScannerFull_APIParam_4 is the second xmlHashScannerFull_APIParam_3 associated||||null
Callback||||when scanning xmlHashScanner_APIParam_2 in a hash with the simple scanner
xmlHashScannerFull_APIParam_5 is the third xmlHashScannerFull_APIParam_3 associated||||null
Query the number of elements installed in the hash @table||||null
Callback||||when scanning xmlHashScannerFull_APIParam_2 in a hash with the full scanner
xmlHashSize_APIParam_1 is the hash xmlHashSize_APIParam_1||||null
Add the @userdata to the hash @table||||null
xmlHashSize_APIName returns the number of elements in the hash xmlHashSize_APIParam_1 or -1 in case of error||||null
This can later be retrieved by using the @name||||null
xmlHashUpdateEntry_APIParam_1 is the hash xmlHashUpdateEntry_APIParam_1||||null
xmlHashUpdateEntry_APIParam_2 is the xmlHashUpdateEntry_APIParam_2 of the xmlHashUpdateEntry_APIParam_3||||null
xmlHashUpdateEntry_APIParam_3 is a pointer to the xmlHashUpdateEntry_APIParam_3||||null
xmlHashUpdateEntry_APIName returns 0 the addition succeeded and -1 in case of error||||null
xmlHashUpdateEntry_APIParam_4 is the deallocator function for replaced item||||null
Add the @userdata to the hash @table||||null
This can later be retrieved by using the tuple||||null
xmlHashUpdateEntry2_APIParam_1 is the hash xmlHashUpdateEntry2_APIParam_1||||null
xmlHashUpdateEntry2_APIParam_2 is the xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4||||null
xmlHashUpdateEntry2_APIParam_3 is a second xmlHashUpdateEntry2_APIParam_2 of the xmlHashUpdateEntry2_APIParam_4||||null
xmlHashUpdateEntry2_APIParam_4 is a pointer to the xmlHashUpdateEntry2_APIParam_4||||null
Existing entry for this @name will be removed and freed with @f||||if found
xmlHashUpdateEntry2_APIName returns 0 the addition succeeded and -1 in case of error||||null
xmlHashUpdateEntry2_APIParam_5 is the deallocator function for replaced item||||null
Add the @userdata to the hash @table||||null
This can later be retrieved by using the tuple||||null
Existing entry for this tuple will be removed and freed with @f||||if found
xmlHashUpdateEntry3_APIParam_1 is the hash xmlHashUpdateEntry3_APIParam_1||||null
xmlHashUpdateEntry3_APIParam_2 is the xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5||||null
xmlHashUpdateEntry3_APIParam_3 is a second xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5||||null
xmlHashUpdateEntry3_APIParam_4 is a third xmlHashUpdateEntry3_APIParam_2 of the xmlHashUpdateEntry3_APIParam_5||||null
xmlHashUpdateEntry3_APIParam_5 is a pointer to the xmlHashUpdateEntry3_APIParam_5||||null
xmlHashUpdateEntry3_APIParam_6 is the deallocator function for replaced item||||null
Daniel Veillard||||null
xmlHashUpdateEntry3_APINamereturns 0 the addition succeeded and -1 in case of error||||null
Dump a Schema structure||||null
xmlSchemaDump_APIParam_1 is the file xmlSchemaDump_APIParam_1||||null
Existing entry for this tuple will be removed and freed with @f||||if found
xmlSchemaDump_APIParam_2 is a xmlSchemaDump_APIParam_2 structure||||null
Deallocate a Schema structure||||null
xmlSchemaFree_APIParam_1 is a xmlSchemaFree_APIParam_1 structure||||null
Free the resources associated to the schema parser context||||null
xmlSchemaFreeParserCtxt_APIParam_1 is the schema parser context||||null
Free the resources associated to the schema validation context||||null
xmlSchemaFreeValidCtxt_APIParam_1 is the schema validation context||||null
xmlSchemaGetParserErrors_APIParam_1 is a XMl-Schema parser context||||null
Get the callback information used to handle errors for a parser context||||null
xmlSchemaGetParserErrors_APIParam_2 is the error callback result||||null
xmlSchemaGetParserErrors_APIParam_3 is the warning callback result||||null
xmlSchemaGetParserErrors_APIParam_4 is contextual data for the callbacks result||||null
Get the error and warning callback informations||||null
xmlSchemaGetValidErrors_APIParam_1 is a XML-Schema validation context||||null
xmlSchemaGetValidErrors_APIParam_2 is the error function result||||null
xmlSchemaGetValidErrors_APIParam_4 is the functions context result||||null
xmlSchemaGetValidErrors_APIParam_3 is the warning function result||||null
xmlSchemaIsValid_APIParam_1 is the schema validation context||||null
Create an XML Schemas parse context for that document||||null
xmlSchemaIsValid_APIName returns 1 if valid so far, 0 if errors were detected, and -1 in case of internal error||||null
Check||||if any error was detected during validation
xmlSchemaNewDocParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlSchemaNewDocParserCtxt_APIParam_1 is a preparsed document tree||||null
xmlSchemaNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas||||null
xmlSchemaNewMemParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlSchemaNewMemParserCtxt_APIParam_2 is the xmlSchemaNewMemParserCtxt_APIParam_2 of the array||||null
Create an XML Schemas parse context for that memory xmlSchemaNewMemParserCtxt_APIParam_1 expected to contain an XML Schemas file||||null
xmlSchemaNewParserCtxt_APIParam_1 is the location of the schema||||null
The document may be modified||||during the parsing process
xmlSchemaNewParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlSchemaNewValidCtxt_APIName returns the validation context or NULL in case of error||||null
xmlSchemaNewValidCtxt_APIParam_1 is a precompiled XML Schemas||||null
Create an XML Schemas parse context for that file/resource expected to contain an XML Schemas file||||null
Create an XML Schemas validation context based on the given xmlSchemaNewValidCtxt_APIParam_1||||null
xmlSchemaParse_APIParam_1 is a schema validation context||||null
xmlSchemaSAXPlug_APIParam_1 is a schema validation context||||null
xmlSchemaParse_APIName returns the internal XML Schema structure built from the resource or NULL in case of error||||null
Plug a SAX based validation layer in a SAX parsing event flow||||null
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances||||null
xmlSchemaSAXPlug_APIParam_2 is a pointer to the original xmlSAXHandlerPtr||||null
xmlSchemaSAXPlug_APIParam_3 is a pointer to the original SAX user data pointer||||null
Unplug a SAX based validation layer in a SAX parsing event flow||||null
xmlSchemaSAXUnplug_APIParam_1 is a data structure returned by xmlSchemaSAXPlug||||null
The original @saxptr and @dataptr data are replaced by new pointers but the calls to the original will be maintained||||null
The original pointers used in the call are restored||||null
xmlSchemaSAXPlug_APIName returns a pointer to a data structure needed to unplug the validation layer or NULL in case of errors||||null
Set the callback functions used to handle errors for a validation context||||null
xmlSchemaSAXUnplug_APIName returns 0 in case of success and -1 in case of failure||||null
xmlSchemaSetParserErrors_APIParam_1 is a schema validation context||||null
xmlSchemaSetParserErrors_APIParam_2 is the error callback||||null
xmlSchemaSetParserErrors_APIParam_3 is the warning callback||||null
xmlSchemaSetParserErrors_APIParam_4 is contextual data for the callbacks||||null
Set the structured error callback||||null
xmlSchemaSetParserStructuredErrors_APIParam_1 is a schema parser context||||null
xmlSchemaSetParserStructuredErrors_APIParam_2 is the structured error function||||null
xmlSchemaSetParserStructuredErrors_APIParam_3 is the functions context||||null
Set the error and warning callback informations||||null
xmlSchemaSetValidErrors_APIParam_1 is a schema validation context||||null
xmlSchemaSetValidErrors_APIParam_2 is the error function||||null
xmlSchemaSetValidErrors_APIParam_3 is the warning function||||null
xmlSchemaSetValidErrors_APIParam_4 is the functions context||||null
xmlSchemaSetValidOptions_APIParam_1 is a schema validation context||||null
xmlSchemaSetValidOptions_APIParam_2 is a combination of xmlSchemaValidOption||||null
Set the structured error callback||||null
xmlSchemaSetValidStructuredErrors_APIParam_1 is a schema validation context||||null
xmlSchemaSetValidOptions_APIName returns 0 in case of success, -1 in case of an API error||||null
xmlSchemaSetValidStructuredErrors_APIParam_2 is the structured error function||||null
xmlSchemaSetValidStructuredErrors_APIParam_3 is the functions context||||null
Get the validation context options||||null
to be used||||during the validation
Sets the xmlSchemaSetValidOptions_APIParam_2||||null
xmlSchemaValidCtxtGetOptions_APIName returns the option combination or -1 on error||||null
xmlSchemaValidCtxtGetOptions_APIParam_1 is a schema validation context||||null
xmlSchemaValidCtxtGetParserCtxt_APIName returns the parser context of the schema validation context or NULL in case of error||||null
xmlSchemaValidCtxtGetParserCtxt_APIParam_1 is a schema validation context||||null
allow access to the parser context of the schema validation context||||null
Validate a document tree in memory||||null
xmlSchemaValidateDoc_APIParam_1 is a schema validation context||||null
xmlSchemaValidateDoc_APIParam_2 is a parsed document tree||||null
xmlSchemaValidateFile_APIParam_1 is a schema validation context||||null
xmlSchemaValidateFile_APIParam_2 is the URI of the instance||||null
xmlSchemaValidateFile_APIParam_3 is a future set of xmlSchemaValidateFile_APIParam_3 , currently unused||||null
xmlSchemaValidateOneElement_APIParam_1 is a schema validation context||||null
xmlSchemaValidateOneElement_APIParam_2 is an element node||||null
Validate a branch of a tree , starting with the given @elem||||null
xmlSchemaValidateSetFilename_APIParam_2 is the file name||||null
xmlSchemaValidateSetFilename_APIParam_1 is the schema validation context||||null
Do a schemas validation of the given resource , a schemas validation of the given resource will use the SAX streamable validation internally||||null
xmlSchemaValidateSetLocator_APIParam_1 is a schema validation context||||null
xmlSchemaValidateSetLocator_APIParam_2 is the locator function pointer||||null
xmlSchemaValidateSetLocator_APIParam_3 is the locator context||||null
xmlSchemaValidateStream_APIParam_1 is a schema validation context||||null
xmlSchemaValidateStream_APIParam_2 is the xmlSchemaValidateStream_APIParam_2 to use for reading the data||||null
xmlSchemaValidateStream_APIParam_3 is an optional encoding information||||null
xmlSchemaValidateStream_APIParam_4 is a SAX handler for the resulting events||||null
xmlSchemaValidateStream_APIParam_5 is the context to provide to the SAX handler||||null
Workaround to provide file error reporting information||||when this is not provided by current APIs
Signature of an error callback from an xmlSchemaValidityErrorFunc_APIParam_3 validation||||null
xmlSchemaValidityErrorFunc_APIParam_1 is xmlSchemaValidityErrorFunc_APIParam_3 validation context||||null
xmlSchemaValidityErrorFunc_APIParam_2 is xmlSchemaValidityErrorFunc_APIParam_3 message xmlSchemaValidityErrorFunc_APIParam_3 extra arguments||||null
A schemas validation locator , a callback called by the validator||||null
xmlSchemaValidityLocatorFunc_APIParam_1 is user provided context||||null
xmlSchemaValidityLocatorFunc_APIParam_2be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_2 information||||null
xmlSchemaValidityLocatorFunc_APIParam_3be returned by xmlSchemaValidityLocatorFunc_APIName xmlSchemaValidityLocatorFunc_APIParam_3 information||||null
xmlSchemaValidityLocatorFunc_APIName returns 0 in case of success and -1 in case of error||||null
Signature of a warning callback from an xmlSchemaValidityWarningFunc_APIParam_3 validation||||null
Allows to set a locator function to the validation context , which will be used to provide file and line information||||null
xmlSchemaValidityWarningFunc_APIParam_1 is xmlSchemaValidityWarningFunc_APIParam_3 validation context||||null
xmlSchemaValidityWarningFunc_APIParam_2 is xmlSchemaValidityWarningFunc_APIParam_3 message xmlSchemaValidityWarningFunc_APIParam_3 extra arguments||||null
Daniel Veillard||||null
UTF8Toisolat1_APIParam_2 is the length of @out||||null
UTF8Toisolat1_APIParam_1 is a pointer to an array of bytes to store the result||||null
UTF8Toisolat1_APIParam_3 is a pointer to an array of UTF-8 chars||||null
UTF8Toisolat1_APIParam_4 is the length of @in||||null
The value of @outlen after return is the number of octets consumed||||null
This is used||||when xmlSchemaValidityLocatorFunc_APIParam_2 or node informations are not available to find out what xmlSchemaValidityLocatorFunc_APIParam_2 and xmlSchemaValidityLocatorFunc_APIParam_3 number are affected
isolat1ToUTF8_APIParam_2 is the length of @out||||null
Take a block of UTF-8 chars UTF8Toisolat1_APIParam_3 and try to convert it to an ISO Latin 1 block of chars UTF8Toisolat1_APIParam_1||||null
isolat1ToUTF8_APIParam_1 is a pointer to an array of bytes to store the result||||null
isolat1ToUTF8_APIParam_3 is a pointer to an array of ISO Latin 1 chars||||null
isolat1ToUTF8_APIParam_4 is the length of @in||||null
Validate an xmlSchemaValidateStream_APIParam_2 based on a flow of SAX event from the parser and forward the events to the @sax handler with the provided @user_data the user provided @sax handler must be a SAX2 one||||null
The value of @outlen after return is the number of octets consumed||||null
Registers an xmlAddEncodingAlias_APIParam_2 @alias for an encoding named @name||||null
Existing xmlAddEncodingAlias_APIParam_2 will be overwritten||||null
Take a block of ISO Latin 1 chars isolat1ToUTF8_APIParam_3 and try to convert it to an UTF-8 block of chars isolat1ToUTF8_APIParam_1||||null
xmlAddEncodingAlias_APIParam_1 is the encoding xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format||||null
xmlAddEncodingAlias_APIParam_2 is the xmlAddEncodingAlias_APIParam_2 xmlAddEncodingAlias_APIParam_1 as parsed , in UTF-8 format||||null
Generic front-end for encoding xmlCharEncCloseFunc_APIParam_1 close function||||null
xmlAddEncodingAlias_APIName returns 0 in case of success, -1 in case of error||||null
xmlCharEncCloseFunc_APIName returns 0 if success, or -1 in case of error||||null
xmlCharEncCloseFunc_APIParam_1 is char enconding transformation data structure||||null
limit itself to 45 chars||||null
xmlCharEncFirstLine_APIParam_1 is char enconding transformation data structure||||null
xmlCharEncFirstLine_APIParam_2 is an xmlBuffer for the output||||null
Front-end for the encoding xmlCharEncFirstLine_APIParam_1 input function , but handle only the very first line , i.e||||null
xmlCharEncFirstLine_APIParam_3 is an xmlBuffer for the input||||null
Generic front-end for the encoding xmlCharEncInFunc_APIParam_1 input function||||null
xmlCharEncInFunc_APIParam_1 is char encoding transformation data structure||||null
xmlCharEncInFunc_APIParam_2 is an xmlBuffer for the output||||null
xmlCharEncFirstLine_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or||||null
xmlCharEncInFunc_APIParam_3 is an xmlBuffer for the input||||null
xmlCharEncOutFunc_APIParam_1 is char enconding transformation data structure||||null
xmlCharEncInFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or||||null
xmlCharEncOutFunc_APIParam_2 is an xmlBuffer for the output||||null
xmlCharEncOutFunc_APIParam_3 is an xmlBuffer for the input||||null
xmlCharEncodingInputFunc_APIParam_2 is the length of @out||||null
xmlCharEncOutFunc_APIName returns the number of byte written if success, or -1 general error -2 if the transcoding fails , or||||null
xmlCharEncodingInputFunc_APIParam_1 is a pointer to an array of bytes to store the UTF-8 result||||null
xmlCharEncodingInputFunc_APIParam_4 is the length of @in||||null
In case of UTF8 sequence conversion errors for the given encoder , the content will be automatically remapped to a CharRef sequence||||null
The value of @outlen after return is the number of octets consumed||||null
xmlCharEncodingInputFunc_APIParam_3 is a pointer to an array of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding||||null
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable||||null
xmlCharEncodingInputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed||||null
Take a block of chars xmlCharEncodingInputFunc_APIParam_3 the original encoding and try to convert a block of chars to an UTF-8 block of chars xmlCharEncodingInputFunc_APIParam_1||||null
Generic front-end for the encoding xmlCharEncOutFunc_APIParam_1 output function a first call with @in == NULL has to be made firs to initiate the output xmlCharEncOutFunc_APIParam_3 case of non-stateless encoding needing to initiate their state or the output||||null
Take a block of UTF-8 chars xmlCharEncodingOutputFunc_APIParam_3 and try to convert it to another encoding||||null
xmlCharEncodingOutputFunc_APIParam_2 is the length of @out||||null
a first call designed to produce heading info is called with xmlCharEncodingOutputFunc_APIParam_3 = NULL||||null
xmlCharEncodingOutputFunc_APIParam_1 is a pointer to an array of bytes to store the result||||null
xmlCharEncodingOutputFunc_APIParam_3 is a pointer to an array of UTF-8 chars||||null
xmlCharEncodingOutputFunc_APIParam_4 is the length of @in||||null
The value of @outlen after return is the number of octets produced||||null
this should also initialize the encoder state||||If stateful
Unregisters all aliases||||null
xmlCharEncodingOutputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed||||null
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable||||null
Unregisters an encoding xmlDelEncodingAlias_APIParam_1 @alias||||null
xmlDelEncodingAlias_APIName returns 0 in case of success, -1 in case of error||||null
xmlDelEncodingAlias_APIParam_1 is the xmlDelEncodingAlias_APIParam_1 name as parsed , in UTF-8 format||||null
Cleanup the memory allocated for the char encoding support , it unregisters all the encoding handlers and the aliases||||null
xmlDetectCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values||||null
xmlDetectCharEncoding_APIParam_2 is pointer to the length of the buffer||||null
Search in the registered set the handler able to read/write that encoding||||null
xmlFindCharEncodingHandler_APIName returns the handler or NULL if not found||||null
xmlDetectCharEncoding_APIParam_1 is a pointer to the first bytes of the XML entity , must be at least 2 bytes long||||null
xmlFindCharEncodingHandler_APIParam_1 is a string describing the char encoding||||null
xmlGetCharEncodingHandler_APIParam_1 is an xmlCharEncoding value||||null
xmlGetCharEncodingHandler_APIName returns the handler or NULL if not found||||null
Guess the encoding of the entity using the first bytes of the entity content according to the non-normative appendix F of the XML-1 .0 recommendation||||null
Search in the registered set the handler able to read/write that encoding||||null
The `` canonical '' name for XML encoding||||null
/ / www.w3.org/TR/REC-xml#charencoding Section 4.3.3 Character Encoding in Entities||||null
xmlGetCharEncodingName_APIParam_1 is the encoding||||null
xmlGetCharEncodingName_APIName returns the canonical name for the given encoding||||null
Lookup an encoding name for the given xmlGetEncodingAlias_APIParam_1||||null
xmlGetEncodingAlias_APIParam_1 is the xmlGetEncodingAlias_APIParam_1 name as parsed , in UTF-8 format||||null
Create and registers an xmlCharEncodingHandler||||null
Initialize the char encoding support , the char encoding support registers the default encoding supported||||null
xmlNewCharEncodingHandler_APIParam_1 is the encoding xmlNewCharEncodingHandler_APIParam_1 , in UTF-8 format||||null
xmlNewCharEncodingHandler_APIParam_2 is the xmlCharEncodingInputFunc to read that encoding||||null
xmlNewCharEncodingHandler_APIName returns the xmlCharEncodingHandlerPtr created (or NULL in case of error||||null
xmlNewCharEncodingHandler_APIParam_3 is the xmlCharEncodingOutputFunc to write that encoding||||null
Compare the string to the encoding schemes already known||||null
xmlParseCharEncoding_APIParam_1 is the encoding xmlParseCharEncoding_APIParam_1 as parsed , in UTF-8 format||||null
xmlRegisterCharEncodingHandler_APIParam_1 is the xmlCharEncodingHandlerPtr xmlRegisterCharEncodingHandler_APIParam_1 block||||null
xmlParseCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values or XML_CHAR_ENCODING_NONE if not recognized||||null
Note that the comparison is case insensitive accordingly to the section 4.3.3 Character Encoding in Entities||||null
Register the char encoding xmlRegisterCharEncodingHandler_APIParam_1 , surprising , is not it ?||||null
Daniel Veillard||||null
xmlInitCharEncodingHandlers_APIName usually does not need to be called in normal processing||||while public
initGenericErrorDefaultFunc_APIParam_1 is the handler||||null
Save the original error xmlCopyError_APIParam_2 the new place||||null
Set or reset the default initGenericErrorDefaultFunc_APIParam_1 for generic errors to the builtin error function||||null
xmlCopyError_APIParam_1 is a source error||||null
xmlCopyError_APIParam_2 is a target error||||null
xmlCopyError_APIName returns 0 in case of success and -1 in case of error||||null
Get the last parsing error registered||||null
xmlCtxtGetLastError_APIParam_1 is an XML parser context||||null
xmlCtxtGetLastError_APIName returns NULL if no error occurred or a pointer to the error||||null
Cleanup the last global error registered||||null
For parsing error this does not change the well-formedness result||||null
xmlCtxtResetLastError_APIParam_1 is an XML parser context||||null
xmlGenericErrorFunc_APIParam_1 is a parsing context||||null
Get the last global error registered||||null
xmlGetLastError_APIName returns NULL if no error occurred or a pointer to the error||||null
xmlGenericErrorFunc_APIParam_2 is xmlGenericErrorFunc_APIParam_3 message xmlGenericErrorFunc_APIParam_3 the extra arguments of xmlGenericErrorFunc_APIParam_3 varags to format xmlGenericErrorFunc_APIParam_3 message||||null
xmlParserError_APIParam_1 is an xmlParserError_APIParam_3 parser context||||null
Display xmlParserError_APIParam_3 format an error messages , gives file , line , position xmlParserError_APIParam_3 extra parameters||||null
xmlParserError_APIParam_2 is xmlParserError_APIParam_3 message to display/transmit xmlParserError_APIParam_3 extra parameters xmlParserError_APIParam_3 the message display||||null
Displays current context within the xmlParserPrintFileContext_APIParam_1 content for error tracking||||null
xmlParserPrintFileContext_APIParam_1 is an xmlParserInputPtr input||||null
Signature of xmlGenericErrorFunc_APIParam_3 function to xmlGenericErrorFunc_APIParam_3||||when there is an error xmlGenericErrorFunc_APIParam_3 no parsing or validity context available
This is per thread||||if compiled with thread support
Displays the associated file and line informations for the current xmlParserPrintFileInfo_APIParam_1||||null
xmlParserPrintFileInfo_APIParam_1 is an xmlParserInputPtr input||||null
xmlParserValidityError_APIParam_1 is an xmlParserValidityError_APIParam_3 parser context||||null
xmlParserValidityWarning_APIParam_1 is an xmlParserValidityWarning_APIParam_3 parser context||||null
xmlParserValidityError_APIParam_2 is xmlParserValidityError_APIParam_3 message to display/transmit xmlParserValidityError_APIParam_3 extra parameters xmlParserValidityError_APIParam_3 the message display||||null
Display xmlParserValidityError_APIParam_3 format an validity error messages , gives file , line , position xmlParserValidityError_APIParam_3 extra parameters||||null
xmlParserWarning_APIParam_1 is an xmlParserWarning_APIParam_3 parser context||||null
xmlParserValidityWarning_APIParam_2 is xmlParserValidityWarning_APIParam_3 message to display/transmit xmlParserValidityWarning_APIParam_3 extra parameters xmlParserValidityWarning_APIParam_3 the message display||||null
Display xmlParserValidityWarning_APIParam_3 format a validity warning messages , gives file , line , position xmlParserValidityWarning_APIParam_3 extra parameters||||null
Cleanup the error||||null
Display xmlParserWarning_APIParam_3 format a warning messages , gives file , line , position xmlParserWarning_APIParam_3 extra parameters||||null
xmlResetError_APIParam_1 is pointer to the error||||null
xmlParserWarning_APIParam_2 is xmlParserWarning_APIParam_3 message to display/transmit xmlParserWarning_APIParam_3 extra parameters xmlParserWarning_APIParam_3 the message display||||null
Cleanup the last global error registered||||null
For parsing error this does not change the well-formedness result||||null
xmlSetGenericErrorFunc_APIParam_1 is the new error handling context||||null
Function to reset the xmlSetGenericErrorFunc_APIParam_2 and the error context for out of context error messages||||null
For multi-threaded applications , this must be set separately for each thread||||null
xmlSetGenericErrorFunc_APIParam_2 is the new xmlSetGenericErrorFunc_APIParam_2 function||||null
xmlSetStructuredErrorFunc_APIParam_1 is the new error handling context||||null
xmlSetStructuredErrorFunc_APIParam_2 is the new xmlSetStructuredErrorFunc_APIParam_2 function||||null
Function to reset the xmlSetStructuredErrorFunc_APIParam_2 and the error context for out of context structured error messages||||null
@handler will be called for subsequent error messages||||while not parsing nor validating
This simply means that||||null
xmlStructuredErrorFunc_APIParam_1 is user provided data for the xmlStructuredErrorFunc_APIParam_2 callback||||null
xmlStructuredErrorFunc_APIParam_2 is the xmlStructuredErrorFunc_APIParam_2 being raised||||null
Daniel Veillard||||null
And @ctx will be passed as first argument to @handler For multi-threaded applications , this must be set separately for each thread||||null
Dump an HTML document||||null
htmlDocContentDumpFormatOutput_APIParam_1 is the HTML buffer output||||null
@handler will be called for subsequent error messages||||while not parsing nor validating
This simply means that||||null
And @ctx will be passed as first argument to @handler One can simply force messages to be emitted to another FILE * than stderr by setting @ctx to this file handle and @handler to NULL||||null
Signature of the function to use handles the new xmlStructuredErrorFunc_APIParam_2 reporting mechanism||||when there is an xmlStructuredErrorFunc_APIParam_2 and the module
htmlDocContentDumpFormatOutput_APIParam_2 is the document||||null
htmlDocContentDumpFormatOutput_APIParam_3 is the htmlDocContentDumpFormatOutput_APIParam_3 string||||null
htmlDocContentDumpFormatOutput_APIParam_4 is should formatting spaces been added||||null
Dump an HTML document||||null
Formating return/spaces are added||||null
htmlDocContentDumpOutput_APIParam_1 is the HTML buffer output||||null
htmlDocContentDumpOutput_APIParam_2 is the document||||null
htmlDocContentDumpOutput_APIParam_3 is the htmlDocContentDumpOutput_APIParam_3 string||||null
Dump an HTML document to an open FILE||||null
htmlDocDump_APIParam_1 is the FILE *||||null
htmlDocDump_APIName returns the number of byte written or -1 in case of failure||||null
htmlDocDump_APIParam_2 is the document||||null
Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemory_APIParam_3||||null
it is up to the caller to free htmlDocDumpMemory_APIParam_0||||null
htmlDocDumpMemory_APIParam_1 is the document||||null
htmlDocDumpMemory_APIParam_2 is OUT the memory pointer||||null
htmlDocDumpMemory_APIParam_3 is OUT the memory length||||null
it is up to the caller to free htmlDocDumpMemoryFormat_APIParam_0||||null
Dump an HTML document in memory and return the xmlChar * and it is htmlDocDumpMemoryFormat_APIParam_3||||null
htmlDocDumpMemoryFormat_APIParam_1 is the document||||null
htmlDocDumpMemoryFormat_APIParam_2 is OUT the memory pointer||||null
htmlDocDumpMemoryFormat_APIParam_3 is OUT the memory length||||null
htmlDocDumpMemoryFormat_APIParam_4 is should formatting spaces been added||||null
Encoding definition lookup in the Meta tags||||null
htmlGetMetaEncoding_APIParam_1 is the document||||null
htmlGetMetaEncoding_APIName returns the current encoding as flagged in the HTML source||||null
htmlIsBooleanAttr_APIParam_1 is the htmlIsBooleanAttr_APIParam_1 of the attribute to check||||null
Creates a new HTML document||||null
htmlNewDoc_APIParam_1 is htmlNewDoc_APIParam_1 for the dtd , or NULL||||null
htmlNewDoc_APIName returns a new document||||null
htmlNewDoc_APIParam_2 is the external ID of the DTD , or NULL||||null
Determine||||if a given attribute is a boolean attribute
htmlNewDocNoDtD_APIParam_1 is htmlNewDocNoDtD_APIParam_1 for the dtd , or NULL||||null
htmlNewDocNoDtD_APIName returns a new document, do not initialize the DTD if not provided||||null
htmlNewDocNoDtD_APIParam_2 is the external ID of the DTD , or NULL||||null
htmlNodeDump_APIParam_1 is the HTML buffer output||||null
htmlNodeDump_APIParam_2 is the document||||null
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added||||null
htmlNodeDump_APIParam_3 is the current node||||null
htmlNodeDump_APIName returns the number of byte written or -1 in case of error||||null
htmlNodeDumpFile_APIParam_1 is the FILE pointer||||null
htmlNodeDumpFile_APIParam_2 is the document||||null
Creates a new HTML document without a DTD node||||if @URI and @ExternalID are NULL
htmlNodeDumpFile_APIParam_3 is the current node||||null
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns are added||||null
htmlNodeDumpFileFormat_APIParam_1 is the FILE pointer||||null
Dump an HTML node , recursive behaviour , children are printed too||||null
htmlNodeDumpFileFormat_APIParam_2 is the document||||null
htmlNodeDumpFileFormat_APIParam_3 is the current node||||null
htmlNodeDumpFileFormat_APIParam_4 is the document htmlNodeDumpFileFormat_APIParam_4||||null
htmlNodeDumpFileFormat_APIName returns the number of byte written or -1 in case of failure||||null
htmlNodeDumpFileFormat_APIParam_5 is should formatting spaces been added||||null
||||if htmlNodeDumpFileFormat_APIParam_4 == NULL try to save in the htmlNodeDumpFileFormat_APIParam_2 htmlNodeDumpFileFormat_APIParam_4
htmlNodeDumpFormatOutput_APIParam_1 is the HTML buffer output||||null
Dump an HTML node , recursive behaviour , children are printed too||||null
htmlNodeDumpFormatOutput_APIParam_2 is the document||||null
htmlNodeDumpFormatOutput_APIParam_3 is the current node||||null
htmlNodeDumpFormatOutput_APIParam_4 is the htmlNodeDumpFormatOutput_APIParam_4 string||||null
htmlNodeDumpFormatOutput_APIParam_5 is should formatting spaces been added||||null
htmlNodeDumpOutput_APIParam_1 is the HTML buffer output||||null
htmlNodeDumpOutput_APIParam_2 is the document||||null
Dump an HTML node, recursive behaviour,children are printed too, and formatting returns/spaces are added||||null
htmlNodeDumpOutput_APIParam_3 is the current node||||null
htmlNodeDumpOutput_APIParam_4 is the htmlNodeDumpOutput_APIParam_4 string||||null
Dump an HTML document to a file||||null
htmlSaveFile_APIParam_1 is the htmlSaveFile_APIParam_1||||null
htmlSaveFile_APIParam_2 is the document||||null
htmlSaveFile_APIName returns the number of byte written or -1 in case of failure||||null
htmlSaveFileEnc_APIParam_1 is the htmlSaveFileEnc_APIParam_1||||null
htmlSaveFileEnc_APIParam_2 is the document||||null
Dump an HTML document to a file using a given htmlSaveFileEnc_APIParam_3 and formatting returns/spaces are added||||null
htmlSaveFileEnc_APIName returns the number of byte written or -1 in case of failure||||null
htmlSaveFileEnc_APIParam_3 is the document htmlSaveFileEnc_APIParam_3||||null
htmlSaveFileFormat_APIParam_1 is the htmlSaveFileFormat_APIParam_1||||null
Dump an HTML document to a file using a given htmlSaveFileFormat_APIParam_3||||null
htmlSaveFileFormat_APIParam_2 is the document||||null
htmlSaveFileFormat_APIParam_3 is the document htmlSaveFileFormat_APIParam_3||||null
htmlSaveFileFormat_APIParam_4 is should formatting spaces been added||||null
htmlSaveFileFormat_APIName returns the number of byte written or -1 in case of failure||||null
htmlSetMetaEncoding_APIParam_1 is the document||||null
htmlSetMetaEncoding_APIParam_2 is the htmlSetMetaEncoding_APIParam_2 string||||null
Daniel Veillard||||null
htmlSetMetaEncoding_APINamereturns 0 in case of success and -1 in case of error||||null
A callback for the xmlNanoFTPGet command||||null
the stdout file is used||||If @filename is '' - ''
Sets the current htmlSetMetaEncoding_APIParam_2 in the Meta tags NOTE||||null
ftpDataCallback_APIParam_1 is the user provided context||||null
ftpDataCallback_APIParam_2 is the ftpDataCallback_APIParam_2 received||||null
ftpDataCallback_APIParam_3 is ftpDataCallback_APIParam_3 size in bytes||||null
this will not change the document content htmlSetMetaEncoding_APIParam_2 , just the META flag associated||||null
A callback for the xmlNanoFTPList command||||null
Note that only one of ftpListCallback_APIParam_8 and ftpListCallback_APIParam_10||||null
minute are specified||||null
ftpListCallback_APIParam_1 is user provided data for the callback||||null
ftpListCallback_APIParam_2 is the file name||||null
ftpListCallback_APIParam_3 is the attribute string||||null
ftpListCallback_APIParam_4 is the ftpListCallback_APIParam_4 string||||null
ftpListCallback_APIParam_5 is the ftpListCallback_APIParam_5 string||||null
ftpListCallback_APIParam_6 is the file ftpListCallback_APIParam_6||||null
ftpListCallback_APIParam_7 is the link count||||null
ftpListCallback_APIParam_8 is the ftpListCallback_APIParam_8||||null
ftpListCallback_APIParam_9 is the ftpListCallback_APIParam_9||||null
ftpListCallback_APIParam_10 is the ftpListCallback_APIParam_10||||null
ftpListCallback_APIParam_11 is the ftpListCallback_APIParam_11||||null
ftpListCallback_APIParam_12 is the minute||||null
xmlNanoFTPCheckResponse_APIParam_1 is an FTP context||||null
xmlNanoFTPCheckResponse_APIName returns the code number, or 0||||null
Cleanup the FTP protocol layer||||null
This cleanup proxy informations||||null
Close the connection and both control and transport||||null
xmlNanoFTPClose_APIParam_1 is an FTP context||||null
Close the data connection from the server||||null
xmlNanoFTPCloseConnection_APIParam_1 is an FTP context||||null
Check||||if there is a response from the FTP server after a command
Tries to open a control connection||||null
xmlNanoFTPConnect_APIParam_1 is an FTP context||||null
Tries to open a control connection to the given server/port||||null
xmlNanoFTPConnectTo_APIParam_1 is an FTP xmlNanoFTPConnectTo_APIParam_1 name||||null
xmlNanoFTPConnectTo_APIParam_2 is the xmlNanoFTPConnectTo_APIParam_2||||null
xmlNanoFTPConnectTo_APIName returns an fTP context or NULL if xmlNanoFTPConnectTo_APIName failed||||null
Tries to change the remote xmlNanoFTPCwd_APIParam_2||||null
xmlNanoFTPCwd_APIParam_1 is an FTP context||||null
xmlNanoFTPCwd_APIParam_2 is a xmlNanoFTPCwd_APIParam_2 on the server||||null
Tries to delete an item from server||||null
xmlNanoFTPCwd_APIName returns -1 incase of error, 1 if CWD worked, 0 if CWD failed||||null
xmlNanoFTPDele_APIParam_1 is an FTP context||||null
xmlNanoFTPDele_APIParam_2 is a xmlNanoFTPDele_APIParam_2 or directory on the server||||null
Frees the context after closing the connection||||null
xmlNanoFTPDele_APIName returns -1 incase of error, 1 if DELE worked, 0 if it failed||||null
xmlNanoFTPFreeCtxt_APIParam_1 is an FTP context||||null
Fetch the given file from the server||||null
All data are passed back in the callbacks||||null
xmlNanoFTPGet_APIParam_1 is an FTP context||||null
xmlNanoFTPGet_APIParam_2 is the user xmlNanoFTPGet_APIParam_2||||null
The last xmlNanoFTPGet_APIParam_2 has a size of 0 block||||null
xmlNanoFTPGet_APIParam_3 is the user xmlNanoFTPGet_APIParam_2 data||||null
xmlNanoFTPGet_APIParam_4 is the file to retrieve||||null
Try to open a data connection to the server||||null
Currently only passive mode is supported||||null
xmlNanoFTPGetConnection_APIParam_1 is an FTP context||||null
xmlNanoFTPGetResponse_APIParam_1 is an FTP context||||null
xmlNanoFTPGetResponse_APIName returns the code number||||null
Get the response from the FTP server after a command||||null
Initiate fetch of the given file from the server||||null
xmlNanoFTPGetSocket_APIParam_1 is an FTP context||||null
xmlNanoFTPGetSocket_APIParam_2 is the file to retrieve||||null
Initialize the FTP protocol layer||||null
xmlNanoFTPGetSocket_APIName returns the socket for the data connection, or <0 in case of error||||null
Currently it just checks for proxy informations , and get the hostname||||null
Do a listing on the server||||null
All files info are passed back in the callbacks||||null
xmlNanoFTPList_APIParam_1 is an FTP context||||null
xmlNanoFTPList_APIParam_2 is the user xmlNanoFTPList_APIParam_2||||null
xmlNanoFTPList_APIParam_3 is the user xmlNanoFTPList_APIParam_2 data||||null
xmlNanoFTPList_APIParam_4 is optional files to list||||null
Allocate and initialize a new FTP context||||null
xmlNanoFTPNewCtxt_APIName returns an FTP context or NULL in case of error||||null
xmlNanoFTPNewCtxt_APIParam_1 is The xmlNanoFTPNewCtxt_APIParam_1 used to initialize the context||||null
xmlNanoFTPOpen_APIName returns an FTP context, or NULL||||null
xmlNanoFTPOpen_APIParam_1 is the xmlNanoFTPOpen_APIParam_1 to the resource||||null
Setup the FTP proxy informations||||null
xmlNanoFTPProxy_APIParam_1 is the proxy xmlNanoFTPProxy_APIParam_1 name||||null
xmlNanoFTPProxy_APIParam_2 is the proxy xmlNanoFTPProxy_APIParam_2||||null
This can also be done by using ftp_proxy ftp_proxy_user and ftp_proxy_password environment variables||||null
xmlNanoFTPProxy_APIParam_3 is the proxy xmlNanoFTPProxy_APIParam_3 name||||null
Start to fetch the given ftp||||null
xmlNanoFTPProxy_APIParam_4 is the proxy password||||null
/ / resource||||null
Send a QUIT command to the server||||null
xmlNanoFTPQuit_APIParam_1 is an FTP context||||null
xmlNanoFTPProxy_APIParam_5 is the xmlNanoFTPProxy_APIParam_5 of proxy 1 for using SITE , 2 for USER a@b||||null
This is a blocking call||||null
xmlNanoFTPRead_APIParam_1 is the FTP context||||null
xmlNanoFTPRead_APIParam_2 is a buffer||||null
xmlNanoFTPRead_APIName tries to read @len bytes from the existing FTP connection and saves them in @dest||||null
xmlNanoFTPRead_APIParam_3 is the buffer length||||null
xmlNanoFTPRead_APIName returns the number of byte read||||null
0 is an indication of an end of connection||||null
-1 indicates a parameter error||||null
xmlNanoFTPScanProxy_APIParam_1 is The proxy xmlNanoFTPScanProxy_APIParam_1 used to initialize the proxy context||||null
Initialize the FTP Proxy context by parsing the xmlNanoFTPScanProxy_APIParam_1 and finding the protocol host port it indicates||||null
xmlNanoFTPUpdateURL_APIParam_1 is an FTP context||||null
It indicates a new connection has to be established||||null
Update an FTP context by parsing the xmlNanoFTPUpdateURL_APIParam_2 and finding new path it indicates||||null
xmlNanoFTPUpdateURL_APIParam_2 is The xmlNanoFTPUpdateURL_APIParam_2 used to update the context||||null
Daniel Veillard||||null
xmlNanoFTPUpdateURL_APINamereturns 0 if Ok, -1 in case of error||||null
Cleanup the default Schemas type library associated to RelaxNG||||null
Dump a RelaxNG structure back||||null
xmlRelaxNGDump_APIParam_1 is the file xmlRelaxNGDump_APIParam_1||||null
xmlRelaxNGDump_APIParam_2 is a xmlRelaxNGDump_APIParam_2 structure||||null
Dump the transformed RelaxNG tree||||null
xmlRelaxNGDumpTree_APIParam_1 is the file xmlRelaxNGDumpTree_APIParam_1||||null
xmlRelaxNGDumpTree_APIParam_2 is a xmlRelaxNGDumpTree_APIParam_2 structure||||null
Deallocate a RelaxNG structure||||null
xmlRelaxNGFree_APIParam_1 is a xmlRelaxNGFree_APIParam_1 structure||||null
the error is raised||||If there is an error in the protocol , hostname , port or other information
Free the resources associated to the schema parser context||||null
xmlRelaxNGFreeParserCtxt_APIParam_1 is the schema parser context||||null
Free the resources associated to the schema validation context||||null
xmlRelaxNGFreeValidCtxt_APIParam_1 is the schema validation context||||null
xmlRelaxNGGetParserErrors_APIParam_1 is a Relax-NG validation context||||null
xmlRelaxNGGetParserErrors_APIParam_2 is the error callback result||||null
Get the callback information used to handle errors for a validation context||||null
xmlRelaxNGGetParserErrors_APIParam_3 is the warning callback result||||null
xmlRelaxNGGetParserErrors_APIParam_4 is contextual data for the callbacks result||||null
Get the error and warning callback informations||||null
xmlRelaxNGGetValidErrors_APIParam_1 is a Relax-NG validation context||||null
Should be like ftp||||null
xmlRelaxNGGetValidErrors_APIParam_2 is the error function result||||null
/ / myproxy / or ftp||||null
xmlRelaxNGGetValidErrors_APIParam_3 is the warning function result||||null
xmlRelaxNGGetValidErrors_APIParam_4 is the functions context result||||null
3128 / A NULL xmlNanoFTPScanProxy_APIParam_1 cleans up proxy informations||||null
Initilize the default type libraries||||null
xmlRelaxNGInitTypes_APIName returns 0 in case of success and -1 in case of error||||null
Create an XML RelaxNGs parser context for that document||||null
xmlRelaxNGNewDocParserCtxt_APIParam_1 is a preparsed document tree||||null
xmlRelaxNGNewDocParserCtxt_APIName returns the parser context or NULL in case of error||||null
the @doc parameter is duplicated internally||||null
xmlRelaxNGNewMemParserCtxt_APIParam_2 is the xmlRelaxNGNewMemParserCtxt_APIParam_2 of the array||||null
xmlRelaxNGNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas||||null
xmlRelaxNGNewMemParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlRelaxNGNewParserCtxt_APIParam_1 is the location of the schema||||null
Create an XML RelaxNGs parse context for that memory xmlRelaxNGNewMemParserCtxt_APIParam_1 expected to contain an XML RelaxNGs file||||null
xmlRelaxNGNewParserCtxt_APIName returns the parser context or NULL in case of error||||null
Create an XML RelaxNGs parse context for that file/resource expected to contain an XML RelaxNGs file||||null
xmlRelaxNGNewValidCtxt_APIName returns the validation context or NULL in case of error||||null
Create an XML RelaxNGs validation context based on the given xmlRelaxNGNewValidCtxt_APIParam_1||||null
xmlRelaxNGNewValidCtxt_APIParam_1 is a precompiled XML RelaxNGs||||null
xmlRelaxNGParse_APIParam_1 is a Relax-NG parser context||||null
Set the callback functions used to handle errors for a validation context||||null
xmlRelaxNGParse_APIName returns the internal XML RelaxNG structure built from the resource or NULL in case of error||||null
xmlRelaxNGSetParserErrors_APIParam_1 is a Relax-NG validation context||||null
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances||||null
xmlRelaxNGSetParserErrors_APIParam_2 is the error callback||||null
xmlRelaxNGSetParserErrors_APIParam_3 is the warning callback||||null
xmlRelaxNGSetParserErrors_APIParam_4 is contextual data for the callbacks||||null
xmlRelaxNGSetParserStructuredErrors_APIParam_1 is a Relax-NG parser context||||null
xmlRelaxNGSetParserStructuredErrors_APIParam_2 is the error callback||||null
Set the callback functions used to handle errors for a parsing context||||null
xmlRelaxNGSetParserStructuredErrors_APIParam_3 is contextual data for the callbacks||||null
Set the error and warning callback informations||||null
xmlRelaxNGSetValidErrors_APIParam_1 is a Relax-NG validation context||||null
xmlRelaxNGSetValidErrors_APIParam_2 is the error function||||null
xmlRelaxNGSetValidErrors_APIParam_3 is the warning function||||null
xmlRelaxNGSetValidErrors_APIParam_4 is the functions context||||null
Set the structured error callback||||null
xmlRelaxNGSetValidStructuredErrors_APIParam_1 is a Relax-NG validation context||||null
xmlRelaxNGSetValidStructuredErrors_APIParam_2 is the structured error function||||null
xmlRelaxNGSetValidStructuredErrors_APIParam_3 is the functions context||||null
Validate a document tree in memory||||null
xmlRelaxNGValidateDoc_APIParam_1 is a Relax-NG validation context||||null
xmlRelaxNGValidateDoc_APIParam_2 is a parsed document tree||||null
xmlRelaxNGValidateFullElement_APIParam_1 is the validation context||||null
Validate a full subtree when xmlRelaxNGValidatePushElement_APIName returned 0 and the content of the node has been expanded||||null
xmlRelaxNGValidateFullElement_APIParam_2 is a document instance||||null
xmlRelaxNGValidateFullElement_APIParam_3 is an element instance||||null
xmlRelaxNGValidateFullElement_APIName returns 1 if no validation problem was found or -1 in case of error||||null
Pop the element end from the RelaxNG validation stack||||null
xmlRelaxNGValidatePopElement_APIParam_1 is the RelaxNG validation context||||null
xmlRelaxNGValidatePopElement_APIParam_2 is a document instance||||null
xmlRelaxNGValidatePopElement_APIParam_3 is an element instance||||null
check the CData parsed for validation in the current stack||||null
xmlRelaxNGValidatePushCData_APIParam_1 is the RelaxNG validation context||||null
xmlRelaxNGValidatePushCData_APIParam_2 is some character xmlRelaxNGValidatePushCData_APIParam_2 read||||null
xmlRelaxNGValidatePushCData_APIParam_3 is the length of the xmlRelaxNGValidatePushCData_APIParam_2||||null
Push a new element start on the RelaxNG validation stack||||null
xmlRelaxNGValidatePushElement_APIParam_1 is the validation context||||null
xmlRelaxNGValidatePushElement_APIParam_2 is a document instance||||null
xmlRelaxNGValidatePushElement_APIParam_3 is an element instance||||null
Signature of an error callback from a Relax-NG validation||||null
xmlRelaxNGValidityErrorFunc_APIParam_1 is xmlRelaxNGValidityErrorFunc_APIParam_3 validation context||||null
xmlRelaxNGValidityErrorFunc_APIParam_2 is xmlRelaxNGValidityErrorFunc_APIParam_3 message xmlRelaxNGValidityErrorFunc_APIParam_3 extra arguments||||null
Signature of a warning callback from a Relax-NG validation||||null
xmlRelaxNGValidityWarningFunc_APIParam_1 is xmlRelaxNGValidityWarningFunc_APIParam_3 validation context||||null
xmlRelaxNGValidityWarningFunc_APIParam_2 is xmlRelaxNGValidityWarningFunc_APIParam_3 message xmlRelaxNGValidityWarningFunc_APIParam_3 extra arguments||||null
xmlRelaxParserSetFlag_APIParam_1 is a RelaxNG parser context||||null
xmlRelaxNGValidatePushElement_APIName returns 1 if no validation problem was found or 0 if validating the element requires a full node, and -1 in case of error||||null
xmlRelaxParserSetFlag_APIParam_2 is a set of xmlRelaxParserSetFlag_APIParam_2 values||||null
Daniel Veillard||||null
xmlRelaxParserSetFlag_APINamereturns 0 if success and -1 in case of error||||null
Semi private function used to pass informations to a parser context which are a combination of xmlRelaxNGParserFlag||||null
Dumps the canonized image of given XML document into memory||||null
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''||||null
xmlC14NDocDumpMemory_APIParam_1 is the XML document for canonization||||null
xmlC14NDocDumpMemory_APIParam_3 is the c14n xmlC14NDocDumpMemory_APIParam_3||||null
xmlC14NDocDumpMemory_APIParam_5 include comments in the result or not||||null
xmlC14NDocDumpMemory_APIName returns the number of bytes written on success or a negative value on fail||||null
Dumps the canonized image of given XML document into the file||||null
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''||||null
xmlC14NDocSave_APIParam_1 is the XML document for canonization||||null
xmlC14NDocSave_APIParam_3 is the c14n xmlC14NDocSave_APIParam_3||||null
xmlC14NDocDumpMemory_APIParam_6 is the memory pointer for allocated canonical XML text||||null
xmlC14NDocSave_APIParam_5 include comments in the result or not||||null
xmlC14NDocSave_APIParam_6 is the xmlC14NDocSave_APIParam_6 to store canonical XML image||||null
the caller of xmlC14NDocDumpMemory_APIName is responsible for calling xmlFree_APIName to free allocated memory||||null
xmlC14NDocDumpMemory_APIParam_2 is the xmlC14NDocDumpMemory_APIParam_2 set to be included in the canonized image or NULL||||if all document xmlC14NDocDumpMemory_APIParam_2 should be included
xmlC14NDocSave_APIName returns the number of bytes written success or a negative value on fail||||null
Dumps the canonized image of given XML document into the provided buffer||||null
xmlC14NDocSaveTo_APIParam_1 is the XML document for canonization||||null
xmlC14NDocDumpMemory_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL||||if there is no inclusive namespaces
xmlC14NDocSave_APIParam_7 is the xmlC14NDocSave_APIParam_7 level -1 - libxml default , 0 - uncompressed , > 0 - xmlC14NDocSave_APIParam_7 level||||null
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''||||null
xmlC14NDocSaveTo_APIParam_3 is the c14n xmlC14NDocSaveTo_APIParam_3||||null
xmlC14NDocSave_APIParam_2 is the xmlC14NDocSave_APIParam_2 set to be included in the canonized image or NULL||||if all document xmlC14NDocSave_APIParam_2 should be included
xmlC14NDocSave_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL||||if there is no inclusive namespaces
xmlC14NDocSaveTo_APIParam_2 is the xmlC14NDocSaveTo_APIParam_2 set to be included in the canonized image or NULL||||if all document xmlC14NDocSaveTo_APIParam_2 should be included
xmlC14NDocSaveTo_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL||||if there is no inclusive namespaces
xmlC14NDocSaveTo_APIName returns non-negative value on success or a negative value on fail||||null
xmlC14NDocSaveTo_APIParam_5 include comments in the result or not||||null
Dumps the canonized image of given XML document into the provided buffer||||null
For details see `` Canonical XML '' or `` Exclusive XML Canonicalization ''||||null
xmlC14NDocSaveTo_APIParam_6 is the output buffer to store canonical XML||||null
xmlC14NExecute_APIParam_1 is the XML document for canonization||||null
this buffer MUST have encoder == NULL||||null
xmlC14NExecute_APIParam_3 is the first parameter for @is_visible_callback function||||null
xmlC14NExecute_APIParam_4 is the c14n xmlC14NExecute_APIParam_4||||null
xmlC14NExecute_APIParam_2 is the function to use to determine is node visible or not||||null
xmlC14NExecute_APIParam_6 include comments in the result or not||||null
xmlC14NExecute_APIName returns non-negative value on success or a negative value on fail||||null
Signature for a C14N callback on visible nodes||||null
xmlC14NIsVisibleCallback_APIParam_1 is user data||||null
xmlC14NIsVisibleCallback_APIParam_2 is the curent xmlC14NIsVisibleCallback_APIParam_2||||null
xmlC14NIsVisibleCallback_APIParam_3 is the xmlC14NIsVisibleCallback_APIParam_3 xmlC14NIsVisibleCallback_APIParam_2||||null
xmlC14NIsVisibleCallback_APINamereturns 1 if the xmlC14NIsVisibleCallback_APIParam_2 should be included||||null
xmlC14NExecute_APIParam_7 is the output buffer to store canonical XML||||null
this buffer MUST have encoder == NULL||||null
Daniel Veillard||||null
xmlC14NExecute_APIParam_5 is the list of inclusive namespace prefixes ended with a NULL or NULL||||if there is no inclusive namespaces
Deallocate all the resources associated to the xmlFreeTextReader_APIParam_1||||null
xmlFreeTextReader_APIParam_1 is the xmlTextReaderPtr||||null
Create an xmlTextReader structure fed with @input||||null
xmlNewTextReader_APIParam_1 is the xmlParserInputBufferPtr used to read data||||null
xmlNewTextReader_APIName returns the new xmlTextReaderPtr or NULL in case of error||||null
xmlNewTextReaderFilename_APIName returns the new xmlTextReaderPtr or NULL in case of error||||null
Create an xmlTextReader structure fed with the resource at @URI||||null
xmlNewTextReaderFilename_APIParam_1 is the xmlNewTextReaderFilename_APIParam_1 of the resource to process||||null
Create an xmltextReader for an XML in-memory document||||null
The parsing flags @options are a combination of xmlParserOption||||null
xmlNewTextReader_APIParam_2 is the xmlNewTextReader_APIParam_2 information for the source||||if available
xmlReaderForDoc_APIParam_1 is a pointer to a zero terminated string||||null
xmlReaderForDoc_APIParam_2 is the base xmlReaderForDoc_APIParam_2 to use for the document||||null
xmlReaderForDoc_APIParam_3 is the document xmlReaderForDoc_APIParam_3 , or NULL||||null
xmlReaderForDoc_APIName returns the new reader or NULL in case of error||||null
xmlReaderForDoc_APIParam_4 is a combination of xmlParserOption||||null
Create an xmltextReader for an XML from a file descriptor||||null
The parsing flags @options are a combination of xmlParserOption||||null
xmlReaderForFd_APIParam_1 is an open file descriptor||||null
xmlReaderForFd_APIParam_2 is the base xmlReaderForFd_APIParam_2 to use for the document||||null
xmlReaderForFd_APIParam_3 is the document xmlReaderForFd_APIParam_3 , or NULL||||null
xmlReaderForFd_APIName returns the new reader or NULL in case of error||||null
xmlReaderForFd_APIParam_4 is a combination of xmlParserOption||||null
parse an XML file from the filesystem or the network||||null
The parsing flags @options are a combination of xmlParserOption||||null
xmlReaderForFile_APIParam_1 is a file or URL||||null
xmlReaderForFile_APIParam_2 is the document xmlReaderForFile_APIParam_2 , or NULL||||null
xmlReaderForFile_APIName returns the new reader or NULL in case of error||||null
xmlReaderForFile_APIParam_3 is a combination of xmlParserOption||||null
the file descriptor will not be closed||||when the reader is closed
NOTE that or reset||||null
The parsing flags @options are a combination of xmlParserOption||||null
Create an xmltextReader for an XML document from I/O functions and source||||null
xmlReaderForIO_APIParam_1 is an I/O read function||||null
xmlReaderForIO_APIParam_2 is an I/O close function||||null
xmlReaderForIO_APIParam_3 is an I/O handler||||null
xmlReaderForIO_APIParam_4 is the base xmlReaderForIO_APIParam_4 to use for the document||||null
xmlReaderForIO_APIParam_5 is the document xmlReaderForIO_APIParam_5 , or NULL||||null
xmlReaderForIO_APIName returns the new reader or NULL in case of error||||null
xmlReaderForIO_APIParam_6 is a combination of xmlParserOption||||null
Create an xmltextReader for an XML in-memory document||||null
The parsing flags @options are a combination of xmlParserOption||||null
xmlReaderForMemory_APIParam_1 is a pointer to a char array||||null
xmlReaderForMemory_APIParam_2 is the xmlReaderForMemory_APIParam_2 of the array||||null
xmlReaderForMemory_APIParam_3 is the base xmlReaderForMemory_APIParam_3 to use for the document||||null
xmlReaderForMemory_APIParam_4 is the document xmlReaderForMemory_APIParam_4 , or NULL||||null
xmlReaderForMemory_APIParam_5 is a combination of xmlParserOption||||null
xmlReaderForMemory_APIName returns the new reader or NULL in case of error||||null
Setup an xmltextReader to parse an XML in-memory document||||null
The parsing flags @options are a combination of xmlParserOption||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewDoc_APIParam_1 is an XML xmlReaderNewDoc_APIParam_1||||null
xmlReaderNewDoc_APIParam_2 is a pointer to a zero terminated string||||null
xmlReaderNewDoc_APIParam_3 is the base xmlReaderNewDoc_APIParam_3 to use for the document||||null
xmlReaderNewDoc_APIParam_4 is the document xmlReaderNewDoc_APIParam_4 , or NULL||||null
xmlReaderNewDoc_APIParam_5 is a combination of xmlParserOption||||null
xmlReaderNewDoc_APIName returns 0 in case of success and -1 in case of error||||null
Setup an xmltextReader to parse an XML from a file descriptor||||null
The parsing flags @options are a combination of xmlParserOption||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewFd_APIParam_1 is an XML xmlReaderNewFd_APIParam_1||||null
xmlReaderNewFd_APIParam_2 is an open file descriptor||||null
xmlReaderNewFd_APIParam_3 is the base xmlReaderNewFd_APIParam_3 to use for the document||||null
xmlReaderNewFd_APIParam_4 is the document xmlReaderNewFd_APIParam_4 , or NULL||||null
xmlReaderNewFd_APIName returns 0 in case of success and -1 in case of error||||null
xmlReaderNewFd_APIParam_5 is a combination of xmlParserOption||||null
the file descriptor will not be closed||||when the xmlReaderNewFd_APIParam_1 is closed
NOTE that or reset||||null
parse an XML file from the filesystem or the network||||null
The parsing flags @options are a combination of xmlParserOption||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewFile_APIParam_1 is an XML xmlReaderNewFile_APIParam_1||||null
xmlReaderNewFile_APIParam_2 is a file or URL||||null
xmlReaderNewFile_APIParam_3 is the document xmlReaderNewFile_APIParam_3 , or NULL||||null
xmlReaderNewFile_APIName returns 0 in case of success and -1 in case of error||||null
xmlReaderNewFile_APIParam_4 is a combination of xmlParserOption||||null
The parsing flags @options are a combination of xmlParserOption||||null
Setup an xmltextReader to parse an XML document from I/O functions and source||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewIO_APIParam_1 is an XML xmlReaderNewIO_APIParam_1||||null
xmlReaderNewIO_APIParam_2 is an I/O read function||||null
xmlReaderNewIO_APIParam_3 is an I/O close function||||null
xmlReaderNewIO_APIParam_4 is an I/O handler||||null
xmlReaderNewIO_APIParam_5 is the base xmlReaderNewIO_APIParam_5 to use for the document||||null
xmlReaderNewIO_APIParam_6 is the document xmlReaderNewIO_APIParam_6 , or NULL||||null
xmlReaderNewIO_APIName returns 0 in case of success and -1 in case of error||||null
xmlReaderNewIO_APIParam_7 is a combination of xmlParserOption||||null
Setup an xmltextReader to parse an XML in-memory document||||null
The parsing flags @options are a combination of xmlParserOption||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewMemory_APIParam_1 is an XML xmlReaderNewMemory_APIParam_1||||null
xmlReaderNewMemory_APIParam_2 is a pointer to a char array||||null
xmlReaderNewMemory_APIParam_3 is the xmlReaderNewMemory_APIParam_3 of the array||||null
xmlReaderNewMemory_APIParam_4 is the base xmlReaderNewMemory_APIParam_4 to use for the document||||null
xmlReaderNewMemory_APIParam_5 is the document xmlReaderNewMemory_APIParam_5 , or NULL||||null
xmlReaderNewMemory_APIParam_6 is a combination of xmlParserOption||||null
Setup an xmltextReader to parse a preparsed XML document||||null
xmlReaderNewMemory_APIName returns 0 in case of success and -1 in case of error||||null
This reuses the existing @reader xmlTextReader||||null
xmlReaderNewWalker_APIParam_1 is an XML xmlReaderNewWalker_APIParam_1||||null
xmlReaderNewWalker_APIParam_2 is a preparsed document||||null
xmlReaderNewWalker_APIName returns 0 in case of success and -1 in case of error||||null
Create an xmltextReader for a preparsed document||||null
xmlReaderWalker_APIParam_1 is a preparsed document||||null
xmlReaderWalker_APIName returns the new reader or NULL in case of error||||null
Provides the number of attributes of the current node||||null
xmlTextReaderAttributeCount_APIParam_1 is the xmlTextReaderPtr used||||null
The base URI of the node||||null
xmlTextReaderAttributeCount_APIName returns 0 i no attributes, -1 in case of error or the attribute count||||null
xmlTextReaderBaseUri_APIParam_1 is the xmlTextReaderPtr used||||null
See xmlBytesConsumed_APIName for more information||||null
xmlTextReaderBaseUri_APIName returns the base URI or NULL if not available, if non NULL it need to be freed by the caller||||null
xmlTextReaderByteConsumed_APIParam_1 is an XML xmlTextReaderByteConsumed_APIParam_1||||null
xmlTextReaderClose_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderClose_APIName returns 0 or -1 in case of error||||null
xmlTextReaderByteConsumed_APIName actually just wraps a call to xmlBytesConsumed_APIName for the parser context associated with the xmlTextReaderByteConsumed_APIParam_1||||null
The base URI of the node||||null
xmlTextReaderByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed||||null
This method releases any resources allocated by the current instance changes the state to Closed and close any underlying input||||null
xmlTextReaderByteConsumed_APIName provides the current index of the parser used by the xmlTextReaderByteConsumed_APIParam_1 , relative to the start of the current entity||||null
xmlTextReaderConstBaseUri_APIParam_1 is the xmlTextReaderPtr used||||null
Determine the encoding of the document being read||||null
xmlTextReaderConstEncoding_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderConstBaseUri_APIName returns the base URI or NULL if not available, the string will be deallocated with the reader||||null
The string is deallocated with the reader||||null
The local name of the node||||null
xmlTextReaderConstLocalName_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderConstEncoding_APIName returns a string containing the encoding of the document or NULL in case of error||||null
The qualified name of the node , equal to Prefix||||null
xmlTextReaderConstLocalName_APIName returns the local name or NULL if not available, the string will be deallocated with the reader||||null
xmlTextReaderConstName_APIParam_1 is the xmlTextReaderPtr used||||null
The URI defining the namespace associated with the node||||null
xmlTextReaderConstName_APIName returns the local name or NULL if not available, the string is deallocated with the reader||||null
xmlTextReaderConstNamespaceUri_APIParam_1 is the xmlTextReaderPtr used||||null
A shorthand reference to the namespace associated with the node||||null
xmlTextReaderConstPrefix_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderConstNamespaceUri_APIName returns the namespace URI or NULL if not available, the string will be deallocated with the reader||||null
xmlTextReaderConstString_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderConstPrefix_APIName returns the prefix or NULL if not available, the string is deallocated with the reader||||null
xmlTextReaderConstString_APIParam_2 is the string to intern||||null
The string will be deallocated with the reader||||null
xmlTextReaderConstString_APIName returns an interned copy of the string or NULL in case of error||||null
xmlTextReaderConstValue_APIName returns the string or NULL if not available||||null
xmlTextReaderConstValue_APIParam_1 is the xmlTextReaderPtr used||||null
The result will be deallocated on the next Read_APIName operation||||null
The xml||||null
lang scope within which the node resides||||null
Provides the text value of the node||||if present
xmlTextReaderConstXmlLang_APIName returns the xmllang value or NULL if none exists||||null
xmlTextReaderConstXmlLang_APIParam_1 is the xmlTextReaderPtr used||||null
Determine the XML version of the document being read||||null
xmlTextReaderConstXmlVersion_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderConstXmlVersion_APIName returns a string containing the XML version of the document or NULL in case of error||||null
The string is deallocated with the reader||||null
xmlTextReaderCurrentDoc_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderCurrentDoc_APIName returns the xmlDocPtr or NULL in case of error||||null
Hacking interface allowing to get the xmlDocPtr correponding to the current document being accessed by the xmlTextReader||||null
xmlTextReaderCurrentNode_APIParam_1 is the xmlTextReaderPtr used||||null
This is dangerous||||null
xmlTextReaderCurrentNode_APIName returns the xmlNodePtr or NULL in case of error||||null
The depth of the node in the tree||||null
Hacking interface allowing to get the xmlNodePtr correponding to the current node being accessed by the xmlTextReader||||null
xmlTextReaderDepth_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderDepth_APIName returns the depth or -1 in case of error||||null
Signature of an error callback from a reader parser||||null
xmlTextReaderErrorFunc_APIParam_1 is the user argument||||null
xmlTextReaderErrorFunc_APIParam_2 is the message||||null
xmlTextReaderErrorFunc_APIParam_3 is the xmlTextReaderErrorFunc_APIParam_3 of the error||||null
xmlTextReaderErrorFunc_APIParam_4 is a xmlTextReaderErrorFunc_APIParam_4 indicating where the error occurred||||null
Reads the contents of the current node and the full subtree||||null
It makes the subtree available until the next xmlTextReaderRead_APIName call||||null
xmlTextReaderExpand_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderGetAttribute_APIParam_1 is the xmlTextReaderPtr used||||null
as a result of this call , the xmlTextReaderCurrentDoc_APIParam_1 will not destroy the associated XML document and calling xmlFreeDoc_APIName on the result is needed once the xmlTextReaderCurrentDoc_APIParam_1 parsing has finished||||null
xmlTextReaderExpand_APIName returns a node pointer valid until the next xmlTextReaderRead_APIName call or NULL in case of error||||null
Provides the value of the attribute with the specified qualified xmlTextReaderGetAttribute_APIParam_2||||null
xmlTextReaderGetAttribute_APIParam_2 is the qualified xmlTextReaderGetAttribute_APIParam_2 of the attribute||||null
The string must be deallocated by the caller||||null
xmlTextReaderGetAttribute_APIName returns a string containing the value of the specified attribute, or NULL in case of error||||null
xmlTextReaderGetAttributeNo_APIParam_1 is the xmlTextReaderPtr used||||null
Provides the value of the attribute with the specified index relative to the containing element||||null
The string must be deallocated by the caller||||null
xmlTextReaderGetAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element||||null
Provides the value of the specified attribute||||null
xmlTextReaderGetAttributeNo_APIName returns a string containing the value of the specified attribute, or NULL in case of error||||null
xmlTextReaderGetAttributeNs_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderGetAttributeNs_APIParam_2 is the local name of the attribute||||null
xmlTextReaderGetAttributeNs_APIParam_3 is the namespace URI of the attribute||||null
The string must be deallocated by the caller||||null
Retrieve the error callback function and user argument||||null
xmlTextReaderGetErrorHandler_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderGetAttributeNs_APIName returns a string containing the value of the specified attribute, or NULL in case of error||||null
xmlTextReaderGetErrorHandler_APIParam_3 is a user argument||||null
Provide the column number of the current parsing point||||null
xmlTextReaderGetErrorHandler_APIParam_2 is the callback function or NULL is no callback has been registered||||null
xmlTextReaderGetParserColumnNumber_APIParam_1 is the user data||||null
xmlTextReaderGetParserColumnNumber_APIName returns an int or 0 if not available||||null
Provide the line number of the current parsing point||||null
xmlTextReaderGetParserLineNumber_APIName returns an int or 0 if not available||||null
xmlTextReaderGetParserLineNumber_APIParam_1 is the user data||||null
Read the parser internal property||||null
xmlTextReaderGetParserProp_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderGetParserProp_APIParam_2 is the xmlParserProperties to get||||null
xmlTextReaderGetParserProp_APIName returns the value, usually 0 or 1, or -1 in case of error||||null
Method to get the remainder of the buffered XML||||null
Best would be to rewrite it differently||||null
this method stops the parser, set its state to End Of File and return the input stream with what is left that the parser did not use||||null
xmlTextReaderGetRemainder_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderGetRemainder_APIName returns the xmlParserInputBufferPtr attached to the XML or NULL in case of error||||null
xmlTextReaderHasAttributes_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderHasValue_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderHasAttributes_APIName returns 1 if true, 0 if false, and -1 in case or error||||null
xmlTextReaderIsDefault_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderHasValue_APIName returns 1 if true, 0 if false, and -1 in case or error||||null
The implementation is not good , the parser certainly procgressed past what left in reader - > input , and there is an allocation problem||||null
xmlTextReaderIsDefault_APIName returns 0 if not defaulted, 1 if defaulted, and -1 in case of error||||null
xmlTextReaderIsEmptyElement_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderIsNamespaceDecl_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderIsEmptyElement_APIName returns 1 if empty, 0 if not and -1 in case of error||||null
Retrieve the validity status from the parser context||||null
xmlTextReaderIsValid_APIParam_1 is the xmlTextReaderPtr used||||null
Check||||if the current node is empty
The local name of the node||||null
xmlTextReaderIsValid_APIName returns the flag value 1 if valid, 0 if no, and -1 in case of error||||null
xmlTextReaderLocalName_APIParam_1 is the xmlTextReaderPtr used||||null
Obtain the base URI for the given xmlTextReaderLocatorBaseURI_APIParam_1||||null
xmlTextReaderLocatorBaseURI_APIParam_1 is the xmlTextReaderLocatorPtr used||||null
xmlTextReaderLocalName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller||||null
Obtain the line number for the given xmlTextReaderLocatorLineNumber_APIParam_1||||null
xmlTextReaderLocatorLineNumber_APIParam_1 is the xmlTextReaderLocatorPtr used||||null
xmlTextReaderIsNamespaceDecl_APIName returns 1 if the current node is a namespace declaration, 0 if the current node is a regular attribute or other type of node, or -1 in case of error||||null
xmlTextReaderLocatorLineNumber_APIName returns the line number or -1 in case of error||||null
xmlTextReaderLocatorBaseURI_APIName returns the base URI or NULL in case of error, if non NULL it need to be freed by the caller||||null
xmlTextReaderLookupNamespace_APIParam_1 is the xmlTextReaderPtr used||||null
To return the default namespace, specify NULL||||null
Resolves a namespace xmlTextReaderLookupNamespace_APIParam_2 in the scope of the current element||||null
xmlTextReaderLookupNamespace_APIParam_2 is the xmlTextReaderLookupNamespace_APIParam_2 whose namespace URI is to be resolved||||null
xmlTextReaderLookupNamespace_APIName returns a string containing the namespace URI to which the xmlTextReaderLookupNamespace_APIParam_2 maps or NULL in case of error||||null
The string must be deallocated by the caller||||null
xmlTextReaderMoveToAttribute_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderMoveToAttribute_APIParam_2 is the qualified xmlTextReaderMoveToAttribute_APIParam_2 of the attribute||||null
xmlTextReaderMoveToAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found||||null
xmlTextReaderMoveToAttributeNo_APIParam_1 is the xmlTextReaderPtr used||||null
Moves the position of the current instance to the attribute with the specified qualified xmlTextReaderMoveToAttribute_APIParam_2||||null
xmlTextReaderMoveToAttributeNo_APIParam_2 is the zero-based index of the attribute relative to the containing element||||null
xmlTextReaderMoveToAttributeNs_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderMoveToAttributeNs_APIParam_2 is the local name of the attribute||||null
xmlTextReaderMoveToAttributeNo_APIName returns 1 in case of success, -1 in case of error, 0 if not found||||null
Moves the position of the current instance to the attribute with the specified index relative to the containing element||||null
xmlTextReaderMoveToAttributeNs_APIParam_3 is the namespace URI of the attribute||||null
xmlTextReaderMoveToElement_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderMoveToAttributeNs_APIName returns 1 in case of success, -1 in case of error, 0 if not found||||null
Moves the position of the current instance to the attribute with the specified local name and namespace URI||||null
xmlTextReaderMoveToElement_APIName returns 1 in case of success, -1 in case of error, 0 if not moved||||null
xmlTextReaderMoveToFirstAttribute_APIParam_1 is the xmlTextReaderPtr used||||null
Moves the position of the current instance to the node that contains the current Attribute node||||null
xmlTextReaderMoveToNextAttribute_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderMoveToFirstAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found||||null
Moves the position of the current instance to the first attribute associated with the current node||||null
xmlTextReaderMoveToNextAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found||||null
Moves the position of the current instance to the next attribute associated with the current node||||null
The qualified name of the node , equal to Prefix||||null
xmlTextReaderName_APIParam_1 is the xmlTextReaderPtr used||||null
The URI defining the namespace associated with the node||||null
xmlTextReaderNamespaceUri_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller||||null
xmlTextReaderNext_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderNamespaceUri_APIName returns the namespace URI or NULL if not available, if non NULL it need to be freed by the caller||||null
Currently implemented only for Readers built on a document||||null
xmlTextReaderNext_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error||||null
xmlTextReaderNextSibling_APIParam_1 is the xmlTextReaderPtr used||||null
Get the node type of the current node Reference||||null
xmlTextReaderNodeType_APIParam_1 is the xmlTextReaderPtr used||||null
The value indicating||||null
xmlTextReaderNodeType_APIName returns the xmlNodeType of the current node or -1 in case of error||||null
xmlTextReaderNextSibling_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error||||null
Skip to the node following the current one in document order||||while avoiding the subtree if any
xmlTextReaderNormalization_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderNormalization_APIName returns 1 or -1 in case of error||||null
Skip to the node following the current one in document order||||while avoiding the subtree if any
xmlTextReaderPrefix_APIParam_1 is the xmlTextReaderPtr used||||null
The broken bahaviour of accepting out of range character entities like & # 0||||null
is of course not supported either||||null
A shorthand reference to the namespace associated with the node||||null
This tells the XML Reader to preserve the current node||||null
xmlTextReaderPreserve_APIName returns the xmlNodePtr or NULL in case of error||||null
xmlTextReaderPreserve_APIParam_1 is the xmlTextReaderPtr used||||null
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished||||null
xmlTextReaderPrefix_APIName returns the prefix or NULL if not available, if non NULL it need to be freed by the caller||||null
xmlTextReaderPreservePattern_APIParam_1 is the xmlTextReaderPtr used||||null
This tells the XML Reader to preserve all nodes matched by the xmlTextReaderPreservePattern_APIParam_2||||null
xmlTextReaderPreservePattern_APIParam_2 is an XPath subset xmlTextReaderPreservePattern_APIParam_2||||null
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished||||null
xmlTextReaderPreservePattern_APIParam_3 is the prefix definitions , array of or NULL||||null
xmlTextReaderPreservePattern_APIName returns a non-negative number in case of success and -1 in case of error||||null
xmlTextReaderQuoteChar_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderQuoteChar_APIName returns " or ' and -1 in case of error||||null
The quotation mark character used to enclose the value of an attribute||||null
xmlTextReaderRead_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderReadAttributeValue_APIParam_1 is the xmlTextReaderPtr used||||null
Parses an attribute value into one or more Text and EntityReference nodes||||null
Moves the position of the current instance to the next node in the stream , exposing its properties||||null
xmlTextReaderReadInnerXml_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderRead_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error||||null
Reads the contents of the current node , including child nodes and markup||||null
The string must be deallocated by the caller||||null
xmlTextReaderReadOuterXml_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderReadInnerXml_APIName returns a string containing the XML content, or NULL if the current node is neither an element nor attribute, or has no child nodes||||null
Reads the contents of the current node , including child nodes and markup||||null
The string must be deallocated by the caller||||null
Gets the read state of the xmlTextReaderReadState_APIParam_1||||null
xmlTextReaderReadState_APIName returns the state value, or -1 in case of error||||null
xmlTextReaderReadState_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderReadOuterXml_APIName returns a string containing the node and any XML content, or NULL if the current node cannot be serialized||||null
xmlTextReaderReadAttributeValue_APIName returns 1 in case of success, 0 if the xmlTextReaderReadAttributeValue_APIParam_1 was not positionned on an ttribute node or all the attribute values have been read, or -1 in case of error||||null
xmlTextReaderReadString_APIParam_1 is the xmlTextReaderPtr used||||null
The string must be deallocated by the caller||||null
Reads the contents of an element or a text node as a string||||null
Use RelaxNG to validate the document as it is processed||||null
Activation is only possible before the first Read_APIName||||null
xmlTextReaderRelaxNGSetSchema_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderReadString_APIName returns a string containing the contents of the Element or Text node, or NULL if the xmlTextReaderReadString_APIParam_1 is positioned on any other type of node||||null
xmlTextReaderRelaxNGSetSchema_APIParam_2 is a precompiled RelaxNG xmlTextReaderRelaxNGSetSchema_APIParam_2||||null
@ The @schema should not be freed until the xmlTextReaderRelaxNGSetSchema_APIParam_1 is deallocated or its use has been deactivated||||null
xmlTextReaderRelaxNGSetSchema_APIName returns 0 in case the RelaxNG validation could be activated and -1 in case of error||||null
Use RelaxNG schema to validate the document as the document is processed||||null
Activation is only possible before the first Read_APIName||||null
RelaxNG validation is desactivated||||if @schema is NULL
xmlTextReaderRelaxNGValidate_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderRelaxNGValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error||||null
xmlTextReaderRelaxNGValidate_APIParam_2 is the path to a RelaxNG schema or NULL||||null
Activation is only possible before the first Read_APIName||||null
xmlTextReaderRelaxNGValidateCtxt_APIParam_1 is the xmlTextReaderPtr used||||null
Use RelaxNG schema context to validate the document as the document is processed||||null
xmlTextReaderRelaxNGValidateCtxt_APIParam_3 is xmlTextReaderRelaxNGValidateCtxt_APIParam_3||||null
xmlTextReaderRelaxNGValidateCtxt_APIParam_2 is the RelaxNG schema validation context or NULL||||null
RelaxNG schema validation is deactivated||||If @rng is NULL
Activation is only possible before the first Read_APIName||||null
xmlTextReaderRelaxNGValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error||||null
Use W3C XSD schema to validate the document as the document is processed||||null
RelaxNG schema validation is deactivated||||If @ctxt is NULL
xmlTextReaderSchemaValidate_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderSchemaValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error||||null
xmlTextReaderSchemaValidate_APIParam_2 is the path to a W3C XSD schema or NULL||||null
Activation is only possible before the first Read_APIName||||null
xmlTextReaderSchemaValidateCtxt_APIParam_1 is the xmlTextReaderPtr used||||null
Use W3C XSD schema context to validate the document as the document is processed||||null
xmlTextReaderSchemaValidateCtxt_APIParam_2 is the XML Schema validation context or NULL||||null
XML Schema validation is deactivated||||If @xsd is NULL
xmlTextReaderSchemaValidateCtxt_APIParam_3 is xmlTextReaderSchemaValidateCtxt_APIParam_3||||null
xmlTextReaderSetErrorHandler_APIParam_1 is the xmlTextReaderPtr used||||null
Register a callback function that will be called on error and warnings||||null
xmlTextReaderSchemaValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error||||null
XML Schema validation is deactivated||||If @ctxt is NULL
xmlTextReaderSetErrorHandler_APIParam_2 is the callback function to call on error and warnings||||null
xmlTextReaderSetErrorHandler_APIParam_3 is a user argument to pass to the callback function||||null
xmlTextReaderSetParserProp_APIParam_1 is the xmlTextReaderPtr used||||null
Change the parser processing behaviour by changing some of its internal properties||||null
Note that some properties can only be changed before any read has been done||||null
xmlTextReaderSetParserProp_APIParam_2 is the xmlParserProperties to set||||null
xmlTextReaderSetParserProp_APIName returns 0 if the call was successful, or -1 in case of error||||null
xmlTextReaderSetParserProp_APIParam_3 is usually 0 or 1 to activate it||||null
the default error and warning handlers are restored||||If @f is NULL
Use XSD Schema to validate the document as it is processed||||null
Activation is only possible before the first Read_APIName||||null
xmlTextReaderSetSchema_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderSetSchema_APIParam_2 is a precompiled Schema xmlTextReaderSetSchema_APIParam_2||||null
xmlTextReaderSetSchema_APIName returns 0 in case the Schema validation could be activated and -1 in case of error||||null
Register a callback function that will be called on error and warnings||||null
@ The @schema should not be freed until the xmlTextReaderSetSchema_APIParam_1 is deallocated or its use has been deactivated||||null
Schema validation is desactivated||||if @schema is NULL
xmlTextReaderSetStructuredErrorHandler_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderSetStructuredErrorHandler_APIParam_2 is the callback function to call on error and warnings||||null
xmlTextReaderSetStructuredErrorHandler_APIParam_3 is a user argument to pass to the callback function||||null
Setup an XML xmlTextReaderSetup_APIParam_1 with new xmlTextReaderSetup_APIParam_5||||null
xmlTextReaderSetup_APIParam_1 is an XML xmlTextReaderSetup_APIParam_1||||null
xmlTextReaderSetup_APIParam_2 is xmlParserInputBufferPtr used to feed the xmlTextReaderSetup_APIParam_1 , will be destroyed with it||||null
xmlTextReaderSetup_APIParam_3 is the base xmlTextReaderSetup_APIParam_3 to use for the document||||null
xmlTextReaderSetup_APIParam_4 is the document xmlTextReaderSetup_APIParam_4 , or NULL||||null
xmlTextReaderSetup_APIParam_5 is a combination of xmlParserOption||||null
xmlTextReaderSetup_APIName returns 0 in case of success and -1 in case of error||||null
the default error and warning handlers are restored||||If @f is NULL
Determine the standalone status of the document being read||||null
xmlTextReaderStandalone_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderValue_APIParam_1 is the xmlTextReaderPtr used||||null
xmlTextReaderValue_APIName returns the string or NULL if not available||||null
The result must be deallocated with xmlFree||||null
The xml||||null
lang scope within which the node resides||||null
Provides the text value of the node||||if present
xmlTextReaderXmlLang_APIParam_1 is the xmlTextReaderPtr used||||null
Daniel Veillard||||null
Get the authentication header of an HTTP context||||null
xmlTextReaderXmlLang_APINamereturns the xmllang value or NULL if none exists., if non NULL it need to be freed by the caller||||null
xmlNanoHTTPAuthHeader_APIParam_1 is the HTTP context||||null
xmlNanoHTTPAuthHeader_APIName returns the stashed value of the WWW-Authenticate or Proxy-Authenticate header||||null
Cleanup the HTTP protocol layer||||null
xmlNanoHTTPClose_APIParam_1 is the HTTP context||||null
xmlTextReaderStandalone_APIName returns 1 if the document was declared to be standalone, 0 if it was declared to be not standalone, or -1 if the document did not specify its standalone status or in case of error||||null
Provides the specified content length from the HTTP header||||null
xmlNanoHTTPContentLength_APIParam_1 is the HTTP context||||null
xmlNanoHTTPContentLength_APIName returns the specified content length from the HTTP header||||null
xmlNanoHTTPEncoding_APIName returns the specified encoding or NULL if not available||||null
xmlNanoHTTPClose_APIName closes an HTTP context , xmlNanoHTTPClose_APIName ends up the connection and free all data related to This function||||null
xmlNanoHTTPEncoding_APIParam_1 is the HTTP context||||null
xmlNanoHTTPFetch_APIParam_1 is The xmlNanoHTTPFetch_APIParam_1 to load||||null
xmlNanoHTTPFetch_APIParam_3 is if available the Content-Type information will be returned at that location||||null
encoding||||if specified in the HTTP headers
Note that a value of -1 indicates that the content length element was not included in the response header||||null
Provides the specified||||null
xmlNanoHTTPFetch_APIParam_2 is the xmlNanoHTTPFetch_APIParam_2 where the content should be saved||||null
xmlNanoHTTPFetch_APIName returns -1 in case of failure, 0 incase of success||||null
xmlNanoHTTPFetch_APIName try to fetch the indicated resource via HTTP GET and save it is content in the file||||null
Initialize the HTTP protocol layer||||null
Currently the HTTP protocol layer just checks for proxy informations||||null
xmlNanoHTTPMethod_APIParam_1 is The xmlNanoHTTPMethod_APIParam_1 to load||||null
xmlNanoHTTPMethod_APIParam_2 is the HTTP xmlNanoHTTPMethod_APIParam_2 to use||||null
xmlNanoHTTPMethod_APIParam_4 is the Content-Type information IN and OUT||||null
xmlNanoHTTPMethod_APIParam_5 is the extra xmlNanoHTTPMethod_APIParam_5||||null
xmlNanoHTTPMethod_APIParam_6 is xmlNanoHTTPMethod_APIParam_3 length||||null
The xmlNanoHTTPFetch_APIParam_3 , must be freed by the caller||||if provided
xmlNanoHTTPMethodRedir_APIParam_1 is The xmlNanoHTTPMethodRedir_APIParam_1 to load||||null
xmlNanoHTTPMethodRedir_APIParam_2 is the HTTP xmlNanoHTTPMethodRedir_APIParam_2 to use||||null
xmlNanoHTTPMethod_APIParam_3 is the xmlNanoHTTPMethod_APIParam_3 string||||if any
xmlNanoHTTPMethodRedir_APIParam_4 is the Content-Type information IN and OUT||||null
xmlNanoHTTPMethodRedir_APIParam_5 is the redirected xmlNanoHTTPMethodRedir_APIParam_1 OUT||||null
xmlNanoHTTPMethodRedir_APIParam_6 is the extra xmlNanoHTTPMethodRedir_APIParam_6||||null
The xmlNanoHTTPMethod_APIParam_4 , must be freed by the caller||||if provided
xmlNanoHTTPMethod_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethod_APIParam_5 and the xmlNanoHTTPMethod_APIParam_3 buffer for the request content||||null
xmlNanoHTTPMethodRedir_APIParam_7 is xmlNanoHTTPMethodRedir_APIParam_3 length||||null
xmlNanoHTTPMethodRedir_APIParam_3 is the xmlNanoHTTPMethodRedir_APIParam_3 string||||if any
xmlNanoHTTPMimeType_APIName returns the specified Mime-Type or NULL if not available||||null
xmlNanoHTTPMimeType_APIParam_1 is the HTTP context||||null
xmlNanoHTTPOpen_APIParam_2 is if available the Content-Type information will be returned at that location||||null
xmlNanoHTTPOpen_APIName try to open a connection to the indicated resource via HTTP GET||||null
xmlNanoHTTPOpen_APIParam_1 is The xmlNanoHTTPOpen_APIParam_1 to load||||null
xmlNanoHTTPMethodRedir_APIName try to open a connection to the indicated resource via HTTP using the given @method , adding the given extra xmlNanoHTTPMethodRedir_APIParam_6 and the xmlNanoHTTPMethodRedir_APIParam_3 buffer for the request content||||null
Provides the specified Mime-Type||||if specified in the HTTP headers
xmlNanoHTTPOpenRedir_APIParam_2 is if available the Content-Type information will be returned at that location||||null
xmlNanoHTTPOpenRedir_APIParam_1 is The xmlNanoHTTPOpenRedir_APIParam_1 to load||||null
The xmlNanoHTTPMethodRedir_APIParam_4 , or xmlNanoHTTPMethodRedir_APIParam_5 , must be freed by the caller||||if provided
xmlNanoHTTPOpenRedir_APIName try to open a connection to the indicated resource via HTTP GET||||null
xmlNanoHTTPOpenRedir_APIParam_3 is if available the redirected xmlNanoHTTPOpenRedir_APIParam_1 will be returned||||null
This is a blocking call||||null
xmlNanoHTTPRead_APIParam_1 is the HTTP context||||null
The xmlNanoHTTPOpen_APIParam_2 , must be freed by the caller||||if provided
xmlNanoHTTPRead_APIParam_2 is a buffer||||null
xmlNanoHTTPRead_APIParam_3 is the buffer length||||null
xmlNanoHTTPRead_APIName returns the number of byte read||||null
xmlNanoHTTPRead_APIName tries to read @len bytes from the existing HTTP connection and saves them in @dest||||null
The xmlNanoHTTPOpenRedir_APIParam_2 , must be freed by the caller||||if provided
0 is an indication of an end of connection||||null
-1 indicates a parameter error||||null
xmlNanoHTTPRedir_APIParam_1 is the HTTP context||||null
xmlNanoHTTPRedir_APIName returns the specified redirection URL or NULL if not redirected||||null
Get the latest HTTP return code received||||null
xmlNanoHTTPReturnCode_APIName returns the HTTP return code for the request||||null
xmlNanoHTTPReturnCode_APIParam_1 is the HTTP context||||null
xmlNanoHTTPSave_APIParam_1 is the HTTP context||||null
Provides the specified redirection URL from the HTTP header||||if available
xmlNanoHTTPSave_APIParam_2 is the xmlNanoHTTPSave_APIParam_2 where the content should be saved||||null
xmlNanoHTTPSave_APIName returns -1 in case of failure, 0 incase of success||||null
Should be like http||||null
/ / myproxy / or http||||null
xmlNanoHTTPSave_APIName saves the output of the HTTP transaction to a file xmlNanoHTTPSave_APIName closes and free the context at the end||||null
Daniel Veillard||||null
xmlNanoHTTPScanProxy_APIParam_1 is The proxy xmlNanoHTTPScanProxy_APIParam_1 used to initialize the proxy context||||null
Initialize the HTTP Proxy context by parsing the xmlNanoHTTPScanProxy_APIParam_1 and finding the protocol host port it indicates||||null
3128 / A NULL xmlNanoHTTPScanProxy_APIParam_1 cleans up proxy informations||||null
Deallocate a Schematron structure||||null
xmlSchematronFree_APIParam_1 is a xmlSchematronFree_APIParam_1 structure||||null
Free the resources associated to the schema parser context||||null
xmlSchematronFreeParserCtxt_APIParam_1 is the schema parser context||||null
Free the resources associated to the schema validation context||||null
xmlSchematronFreeValidCtxt_APIParam_1 is the schema validation context||||null
Create an XML Schematrons parse context for that document||||null
xmlSchematronNewDocParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlSchematronNewDocParserCtxt_APIParam_1 is a preparsed document tree||||null
xmlSchematronNewMemParserCtxt_APIName returns the parser context or NULL in case of error||||null
xmlSchematronNewMemParserCtxt_APIParam_1 is a pointer to a char array containing the schemas||||null
xmlSchematronNewMemParserCtxt_APIParam_2 is the xmlSchematronNewMemParserCtxt_APIParam_2 of the array||||null
Create an XML Schematrons parse context for that memory xmlSchematronNewMemParserCtxt_APIParam_1 expected to contain an XML Schematrons file||||null
xmlSchematronNewParserCtxt_APIParam_1 is the location of the schema||||null
The document may be modified||||during the parsing process
xmlSchematronNewParserCtxt_APIName returns the parser context or NULL in case of error||||null
Create an XML Schematrons validation context based on the given xmlSchematronNewValidCtxt_APIParam_1||||null
Create an XML Schematrons parse context for that file/resource expected to contain an XML Schematrons file||||null
xmlSchematronNewValidCtxt_APIParam_1 is a precompiled XML Schematrons||||null
xmlSchematronNewValidCtxt_APIName returns the validation context or NULL in case of error||||null
xmlSchematronNewValidCtxt_APIParam_2 is a set of xmlSchematronValidOptions||||null
xmlSchematronParse_APIParam_1 is a schema validation context||||null
Set the structured error callback||||null
parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances||||null
xmlSchematronParse_APIName returns the internal XML Schematron structure built from the resource or NULL in case of error||||null
xmlSchematronSetValidStructuredErrors_APIParam_1 is a Schematron validation context||||null
xmlSchematronSetValidStructuredErrors_APIParam_2 is the structured error function||||null
xmlSchematronSetValidStructuredErrors_APIParam_3 is the functions context||||null
Validate a tree xmlSchematronValidateDoc_APIParam_2 against the schematron||||null
xmlSchematronValidateDoc_APIParam_1 is the schema validation context||||null
xmlSchematronValidateDoc_APIParam_2 is the document instace tree||||null
xmlSchematronValidityErrorFunc_APIParam_1 is xmlSchematronValidityErrorFunc_APIParam_3 validation context||||null
Signature of an error callback from a Schematron validation||||null
xmlSchematronValidityErrorFunc_APIParam_2 is xmlSchematronValidityErrorFunc_APIParam_3 message xmlSchematronValidityErrorFunc_APIParam_3 extra arguments||||null
Signature of a warning callback from a Schematron validation||||null
xmlSchematronValidityWarningFunc_APIParam_1 is xmlSchematronValidityWarningFunc_APIParam_3 validation context||||null
xmlSchematronValidityWarningFunc_APIParam_2 is xmlSchematronValidityWarningFunc_APIParam_3 message xmlSchematronValidityWarningFunc_APIParam_3 extra arguments||||null
Daniel Veillard||||null
Free the dictionary mutex||||null
Create a new dictionary||||null
xmlDictCreate_APIName returns the newly created dictionary, or NULL if an error occurred||||null
xmlDictCreateSub_APIName returns the newly created dictionary, or NULL if an error occurred||||null
xmlDictCreateSub_APIParam_1 is an existing dictionary||||null
Create a new dictionary , inheriting strings from the read-only dictionary @sub||||null
xmlDictExists_APIParam_1 is the dictionary||||null
xmlDictExists_APIParam_2 is the xmlDictExists_APIParam_2 of the userdata||||null
Do not call||||unless sure the library is not in use anymore
xmlDictExists_APIName returns the internal copy of the xmlDictExists_APIParam_2 or NULL if not found||||null
Free the hash @dict and its contents||||null
xmlDictGetUsage_APIName returns the amount of strings allocated||||null
xmlDictFree_APIParam_1 is the dictionary||||null
Check||||if the @name exists in the dictionary @dict
xmlDictLookup_APIParam_1 is the dictionary||||null
Get how much memory is used by a dictionary for strings Added in 2.9.0||||null
xmlDictLookup_APIParam_2 is the xmlDictLookup_APIParam_2 of the userdata||||null
The userdata is deallocated with @f||||if provided
xmlDictExists_APIParam_3 is the length of the xmlDictExists_APIParam_2||||if -1 it is recomputed
check if a string is owned by the disctionary||||null
xmlDictOwns_APIParam_1 is the dictionary||||null
xmlDictLookup_APIName returns the internal copy of the xmlDictLookup_APIParam_2 or NULL in case of internal error||||null
xmlDictOwns_APIParam_2 is the string||||null
xmlDictQLookup_APIParam_1 is the dictionary||||null
are created in the new dictionary||||if not found
On lookup , strings are first searched in the new dictionary , in @sub , and||||null
Add the QName @prefix||||null
Add the @name to the dictionary @dict||||if not present
xmlDictQLookup_APIParam_2 is the xmlDictQLookup_APIParam_2||||null
xmlDictQLookup_APIParam_3 is the xmlDictQLookup_APIParam_3||||null
xmlDictLookup_APIParam_3 is the length of the xmlDictLookup_APIParam_2||||if -1 it is recomputed
xmlDictOwns_APIName returns 1 if true, 0 if false and -1 in case of error -1 in case of error||||null
Increment the reference counter of a dictionary||||null
xmlDictReference_APIParam_1 is the dictionary||||null
xmlDictQLookup_APIName returns the internal copy of the QName or NULL in case of internal error||||null
xmlDictReference_APIName returns 0 in case of success and -1 in case of error||||null
@name to the hash @dict||||if not present
xmlDictSetLimit_APIParam_2 is the xmlDictSetLimit_APIParam_2 in bytes||||null
xmlDictSetLimit_APIName returns the previous xmlDictSetLimit_APIParam_2 of the dictionary or 0||||null
Set a size xmlDictSetLimit_APIParam_2 for the dictionary Added in 2.9.0||||null
xmlDictSize_APIParam_1 is the dictionary||||null
Query the number of elements installed in the hash @dict||||null
Do the dictionary mutex initialization||||null
this function is deprecated||||null
xmlDictSize_APIName returns the number of elements in the dictionary or -1 in case of error||||null
Daniel Veillard||||null
xmlInitializeDict_APINamereturns 0 if initialization was already done, and 1 if that call led to the initialization||||null
Pops the top XPath object from the value stack||||null
valuePop_APIName returns the XPath object just removed||||null
valuePop_APIParam_1 is an XPath evaluation context||||null
valuePush_APIParam_1 is an XPath evaluation context||||null
Pushes a new XPath object on top of the valuePush_APIParam_2 stack||||null
valuePush_APIParam_2 is the XPath object||||null
valuePush_APIName returns the number of items on the valuePush_APIParam_2 stack||||null
xmlXPathAddValues_APIParam_1 is the XPath Parser context||||null
xmlXPathBooleanFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathBooleanFunction_APIParam_2 is the number of arguments||||null
xmlXPathCeilingFunction_APIParam_1 is the XPath Parser context||||null
Implement the add operation on XPath objects||||null
Implement the ceiling_APIName XPath function number ceiling The ceiling function returns the smallest  number that is not less than the argument and that is an integer||||null
xmlXPathCeilingFunction_APIParam_2 is the number of arguments||||null
xmlXPathCompareValues_APIParam_1 is the XPath Parser context||||null
xmlXPathCompareValues_APIParam_2 is less than or greater than||||null
xmlXPathCompareValues_APIParam_3 is is the comparison xmlXPathCompareValues_APIParam_3||||null
The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
The < comparison will be true if the first number is less than the second number||||if and only
Implement the compare operation on XPath objects||||null
xmlXPathCompareValues_APIName returns 1 if the comparison succeeded, 0 if it failed||||null
xmlXPathConcatFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathConcatFunction_APIParam_2 is the number of arguments||||null
Implement the concat_APIName XPath function string concat The concat function returns the concatenation of The concat function arguments||||null
The < = comparison will be true if the first number is less than or equal to the second number||||if and only
xmlXPathContainsFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathContainsFunction_APIParam_2 is the number of arguments||||null
The < = comparison will be true if the first number is greater than the second number||||if and only
@arg1 < @arg2 -LRB- 1 , 1 , ... @arg1 < = @arg2 -LRB- 1 , 0 , ... @arg1 > @arg2 -LRB- 0 , 1 , ... @arg1 > = @arg2 -LRB- 0 , 0||||null
Implement the count_APIName XPath function number count||||null
The < = comparison will be true if the first number is greater than or equal to the second number||||if and only
xmlXPathCountFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathCountFunction_APIParam_2 is the number of arguments||||null
Implement the boolean_APIName XPath function boolean boolean The boolean function converts its argument to a boolean as follows||||null
Dumps the tree of the compiled XPath expression||||null
xmlXPathDebugDumpCompExpr_APIParam_1 is the FILE * for the xmlXPathDebugDumpCompExpr_APIParam_1||||null
xmlXPathDebugDumpCompExpr_APIParam_2 is the precompiled XPath expression||||null
xmlXPathDebugDumpCompExpr_APIParam_3 is the indentation level||||null
Dump the content of the object for debugging purposes||||null
xmlXPathDebugDumpObject_APIParam_1 is the FILE * to dump the xmlXPathDebugDumpObject_APIParam_1||||null
xmlXPathDebugDumpObject_APIParam_2 is the object to inspect||||null
xmlXPathDebugDumpObject_APIParam_3 is indentation level||||null
xmlXPathDifference_APIParam_1 is a node-set||||null
the objects are compared by converted both objects to numbers and comparing the numbers according to IEEE 754||||When neither object to be compared is a node-set and the operator is < = , < , > = , >
- a number is true||||if and only if it is neither positive or negative zero nor NaN - a node-set is true if and only if it is non-empty - a string is true if and only if its length is non-zero
Implements the EXSLT - Sets difference_APIName function||||null
node-set set||||null
difference||||null
xmlXPathDifference_APIParam_2 is a node-set||||null
xmlXPathDifference_APIName returns the difference between the two node sets, or xmlXPathDifference_APIParam_1 if xmlXPathDifference_APIParam_2 is empty||||null
xmlXPathDistinct_APIParam_1 is a node-set||||null
Implements the EXSLT - Sets distinct_APIName function||||null
node-set set||||null
distinct||||null
xmlXPathDistinct_APIName returns a subset of the xmlXPathDistinct_APIParam_1 contained in @nodes, or @nodes if it is empty||||null
xmlXPathDistinctSorted_APIParam_1 is a node-set , sorted by document order||||null
Implements the EXSLT - Sets distinct_APIName function||||null
node-set set||||null
xmlXPathDistinctSorted_APIName returns a subset of the xmlXPathDistinctSorted_APIParam_1 contained in @nodes, or @nodes if it is empty||||null
xmlXPathDivValues_APIParam_1 is the XPath Parser context||||null
xmlXPathEqualValues_APIParam_1 is the XPath Parser context||||null
distinct @nodes is sorted by document order , #exslSetsDistinctSorted is called with the sorted node-set||||null
Implement the equal operation on XPath objects content||||null
xmlXPathEqualValues_APIName returns 0 or 1 depending on the results of the test||||null
Handle an XPath xmlXPathErr_APIParam_2||||null
@arg1 == @arg2||||null
xmlXPathErr_APIParam_1 is a XPath parser context||||null
xmlXPathErr_APIParam_2 is the xmlXPathErr_APIParam_2 code||||null
xmlXPathEvalExpr_APIParam_1 is the XPath Parser context||||null
Implement the div operation on XPath objects @arg1 / @arg2||||null
Evaluate a predicate result for the current node||||null
xmlXPathEvaluatePredicateResult_APIParam_1 is the XPath Parser context||||null
xmlXPathEvaluatePredicateResult_APIParam_2 is the Predicate Expression evaluation result||||null
A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean||||null
Implement the false_APIName XPath function boolean false_APIName||||null
Parse and evaluate an XPath expression in the given context , push the result on the context stack||||null
xmlXPathFalseFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathFalseFunction_APIParam_2 is the number of arguments||||null
xmlXPathFloorFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathFloorFunction_APIParam_2 is the number of arguments||||null
Free up an xmlXPathParserContext||||null
xmlXPathFreeParserContext_APIParam_1 is the context to free||||null
The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
xmlXPathFunctionLookup_APIParam_1 is the XPath context||||null
xmlXPathFunctionLookup_APIParam_2 is the function xmlXPathFunctionLookup_APIParam_2||||null
Implement the floor_APIName XPath function number floor The floor function returns the largest  number that is not greater than the argument and that is an integer||||null
Search in the Function array of the context for the given function||||null
xmlXPathFunctionLookup_APIName returns the xmlXPathFunction or NULL if not found||||null
xmlXPathFunctionLookupNS_APIParam_1 is the XPath context||||null
xmlXPathFunctionLookupNS_APIParam_2 is the function xmlXPathFunctionLookupNS_APIParam_2||||null
Search in the Function array of the context for the given function||||null
xmlXPathFunctionLookupNS_APIName returns the xmlXPathFunction or NULL if not found||||null
xmlXPathFunctionLookupNS_APIParam_3 is the function namespace URI||||null
Implements the EXSLT - Sets has-same-nodes function||||null
boolean set||||null
xmlXPathHasSameNodes_APIParam_1 is a node-set||||null
xmlXPathHasSameNodes_APIParam_2 is a node-set||||null
xmlXPathIdFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathIdFunction_APIParam_2 is the number of arguments||||null
xmlXPathIntersection_APIParam_1 is a node-set||||null
Implement the id_APIName XPath function node-set id The id function selects elements by their unique ID||||null
Implements the EXSLT - Sets intersection_APIName function||||null
node-set set||||null
xmlXPathIntersection_APIParam_2 is a node-set||||null
intersection||||null
xmlXPathIntersection_APIName returns a node set comprising the nodes that are within both the node sets passed as arguments||||null
Is the xmlXPathIsNodeType_APIParam_1 given a NodeType one||||null
xmlXPathIsNodeType_APIParam_1 is a xmlXPathIsNodeType_APIParam_1 string||||null
xmlXPathLangFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathLangFunction_APIParam_2 is the number of arguments||||null
xmlXPathLastFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathLastFunction_APIParam_2 is the number of arguments||||null
xmlXPathLeading_APIParam_1 is a node-set||||null
||||If there is no such attribute , lang
xmlXPathLeading_APIParam_2 is a node-set||||null
Implement the last_APIName XPath function number last_APIName The last function returns the number of nodes in the context node list||||null
Implements the EXSLT - Sets leading_APIName function||||null
node-set set||||null
leading||||null
xmlXPathLeadingSorted_APIParam_1 is a node-set , sorted by document order||||null
Implements the EXSLT - Sets leading_APIName function||||null
node-set set||||null
xmlXPathLeadingSorted_APIParam_2 is a node-set , sorted by document order||||null
Implement the local-name_APIName XPath function string local-name||||null
xmlXPathLocalNameFunction_APIParam_1 is the XPath Parser context||||null
leading @nodes1 and @nodes2 are sorted by document order , #exslSetsLeadingSorted is called||||null
If the node-set is empty or the first node has no name, an empty stringbe returned by xmlXPathLocalNameFunction_APIName||||null
xmlXPathLocalNameFunction_APIParam_2 is the number of arguments||||null
xmlXPathLeading_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2||||null
xmlXPathModValues_APIParam_1 is the XPath Parser context||||null
The local-name function returns a string containing the local part of the name of the node in the argument node-set that is first in document order||||null
the result is the union of the result of applying id to the string value of each of the nodes in the argument node-set||||When the argument to id is of type node-set
xmlXPathMultValues_APIParam_1 is the XPath Parser context||||null
= ` comment ' | ` text ' | ` processing-instruction ' | ` node '||||null
||||If the argument is omitted it defaults to the context node
Implement the lang_APIName XPath function boolean lang The lang function returns true or false depending on  or is a sublanguage of the language specified by the argument string||||null
Implement the namespace-uri_APIName XPath function string namespace-uri||||null
xmlXPathLeadingSorted_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2||||null
Implement the multiply operation on XPath objects||||null
Implement the mod operation on XPath objects||||null
The namespace-uri function returns a string containing the namespace URI of the expanded name of the node in the argument node-set that is first in document order||||null
If the node-set is empty, the first node has no name, or the expanded name has no namespace URI, an empty stringbe returned by xmlXPathNamespaceURIFunction_APIName||||null
The language of the context node is determined by the value of the xml||||null
xmlXPathNamespaceURIFunction_APIParam_1 is the XPath Parser context||||null
||||If the argument is omitted it defaults to the context node
xmlXPathNamespaceURIFunction_APIParam_2 is the number of arguments||||null
xmlXPathNewBoolean_APIParam_1 is the boolean value||||null
xmlXPathNewBoolean_APIName returns the newly created object||||null
The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
Create a new xmlXPathObjectPtr of type boolean and of value @val||||null
xmlXPathNewCString_APIName returns the newly created object||||null
@arg2 The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
@arg1 /||||null
xmlXPathNewCString_APIParam_1 is the char * value||||null
Create a new xmlXPathObjectPtr of type string and of value @val||||null
xmlXPathNewFloat_APIParam_1 is the double value||||null
xmlXPathNewFloat_APIName returns the newly created object||||null
lang attribute on the context node , or , has no xml||||if the context node
Create a new xmlXPathObjectPtr of type double and of value @val||||null
lang attribute , by the value of the xml||||null
xmlXPathNewNodeSet_APIParam_1 is the NodePtr value||||null
xmlXPathNewNodeSet_APIName returns the newly created object||||null
lang attribute on the nearest ancestor of the context node that has an xml||||null
lang attribute||||null
xmlXPathNewNodeSetList_APIName returns the newly created object||||null
xmlXPathNewNodeSetList_APIParam_1 is an existing NodeSet||||null
Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the single Node @val||||null
the argument is converted to a string as if by a call to the string function||||When the argument to id is of any other type
the string is split into a whitespace-separated list of tokens||||null
the result is a node-set containing the elements in the same document as the context node that have a unique ID equal to any of the tokens in the list||||null
Create a new xmlXPathParserContext||||null
Create a new xmlXPathObjectPtr of type NodeSet and initialize it with the Nodeset @val||||null
xmlXPathNewParserContext_APIParam_1 is the XPath expression||||null
xmlXPathNewParserContext_APIName returns the xmlXPathParserContext just allocated||||null
xmlXPathNewParserContext_APIParam_2 is the XPath context||||null
xmlXPathNewString_APIParam_1 is the xmlChar * value||||null
xmlXPathNewString_APIName returns the newly created object||||null
Create a new xmlXPathObjectPtr of type string and of value @val||||null
xmlXPathNewValueTree_APIParam_1 is the NodePtr value||||null
xmlXPathNewValueTree_APIName returns the newly created object||||null
xmlXPathNextAncestor_APIParam_1 is the XPath Parser context||||null
Create a new xmlXPathObjectPtr of type Value Tree and initialize it with the tree root @val||||null
xmlXPathNextAncestor_APIName returns the next element following that axis||||null
xmlXPathNextAncestor_APIParam_2 is the current node in the traversal||||null
xmlXPathNextAncestorOrSelf_APIParam_1 is the XPath Parser context||||null
xmlXPathNextAncestorOrSelf_APIName returns the next element following that axis||||null
xmlXPathNextAncestorOrSelf_APIParam_2 is the current node in the traversal||||null
xmlXPathNextAttribute_APIParam_1 is the XPath Parser context||||null
Traversal function for the `` attribute '' direction TODO||||null
support DTD inherited default attributes||||null
xmlXPathNextAttribute_APIName returns the next element following that axis||||null
xmlXPathNextAttribute_APIParam_2 is the current attribute in the traversal||||null
xmlXPathNextChild_APIParam_1 is the XPath Parser context||||null
xmlXPathNextChild_APIName returns the next element following that axis||||null
xmlXPathNextChild_APIParam_2 is the current node in the traversal||||null
xmlXPathNextDescendant_APIParam_1 is the XPath Parser context||||null
xmlXPathNextDescendant_APIName returns the next element following that axis||||null
xmlXPathNextDescendant_APIParam_2 is the current node in the traversal||||null
Traversal function for the `` child '' direction The child axis contains the children of the context node in document order||||null
xmlXPathNextDescendantOrSelf_APIParam_1 is the XPath Parser context||||null
xmlXPathNextDescendantOrSelf_APIName returns the next element following that axis||||null
xmlXPathNextDescendantOrSelf_APIParam_2 is the current node in the traversal||||null
xmlXPathNextFollowing_APIParam_1 is the XPath Parser context||||null
xmlXPathNextFollowing_APIName returns the next element following that axis||||null
xmlXPathNextFollowing_APIParam_2 is the current node in the traversal||||null
xmlXPathNextFollowingSibling_APIParam_1 is the XPath Parser context||||null
xmlXPathNextFollowingSibling_APIName returns the next element following that axis||||null
xmlXPathNextFollowingSibling_APIParam_2 is the current node in the traversal||||null
xmlXPathNextNamespace_APIParam_1 is the XPath Parser context||||null
xmlXPathNextNamespace_APIName returns the next element following that axis||||null
xmlXPathNextNamespace_APIParam_2 is the current attribute in the traversal||||null
Traversal function for the `` descendant '' direction the descendant axis contains the descendants of the context node in document order||||null
xmlXPathNextParent_APIParam_1 is the XPath Parser context||||null
xmlXPathNextParent_APIName returns the next element following that axis||||null
Traversal function for the `` following-sibling '' direction The following-sibling axis contains the following siblings of the context node in document order||||null
xmlXPathNextParent_APIParam_2 is the current node in the traversal||||null
a descendant is a child or a child of a child and so on||||null
xmlXPathNextPreceding_APIParam_1 is the XPath Parser context||||null
xmlXPathNextPreceding_APIName returns the next element following that axis||||null
xmlXPathNextPreceding_APIParam_2 is the current node in the traversal||||null
xmlXPathNodeLeading_APIParam_2 is a xmlXPathNodeLeading_APIParam_2||||null
xmlXPathNextPrecedingSibling_APIParam_1 is the XPath Parser context||||null
xmlXPathNodeLeadingSorted_APIParam_2 is a xmlXPathNodeLeadingSorted_APIParam_2||||null
xmlXPathNextSelf_APIParam_1 is the XPath Parser context||||null
xmlXPathNodeLeadingSorted_APIParam_1 is a node-set , sorted by document order||||null
xmlXPathNextSelf_APIParam_2 is the current node in the traversal||||null
xmlXPathNextPrecedingSibling_APIParam_2 is the current node in the traversal||||null
add a new xmlNodePtr to an existing NodeSet||||null
xmlXPathNextPrecedingSibling_APIName returns the next element following that axis||||null
xmlXPathNodeLeading_APIParam_1 is a node-set||||null
xmlXPathNodeSetAdd_APIParam_2 is a new xmlNodePtr||||null
Traversal function for the `` parent '' direction The parent axis contains the parent of the context node||||if there is one
xmlXPathNextSelf_APIName returns the next element following that axis||||null
xmlXPathNodeSetAdd_APIParam_1 is the initial node set||||null
Implements the EXSLT - Sets leading_APIName function||||null
node-set set||||null
leading||||null
Implements the EXSLT - Sets leading_APIName function||||null
node-set set||||null
leading @nodes is sorted by document order , #exslSetsNodeLeadingSorted is called||||null
add a new namespace xmlXPathNodeSetAddNs_APIParam_2 to an existing NodeSet||||null
Traversal function for the `` self '' direction The self axis contains just the context node itself||||null
xmlXPathNodeSetAddNs_APIParam_1 is the initial xmlXPathNodeSetAddNs_APIParam_2 set||||null
xmlXPathNodeSetAdd_APIName returns 0 in case of success, and -1 in case of error||||null
xmlXPathNodeLeading_APIName returns the xmlXPathNodeLeading_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node||||null
xmlXPathNodeSetAddNs_APIParam_2 is the hosting xmlXPathNodeSetAddNs_APIParam_2||||null
Traversal function for the `` ancestor-or-self '' direction he ancestor-or-self axis contains the context node and ancestors of the context node in reverse document order||||null
xmlXPathNodeLeadingSorted_APIName returns the xmlXPathNodeLeadingSorted_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node||||null
xmlXPathNodeSetAddNs_APIParam_3 is a the namespace xmlXPathNodeSetAddNs_APIParam_2||||null
xmlXPathNodeSetAddNs_APIName returns 0 in case of success and -1 in case of error||||null
thus the context node is the first node on the axis , and the context node parent the second||||null
xmlXPathNodeSetAddUnique_APIParam_1 is the initial node set||||null
parent here is defined the same as with the parent axis||||null
xmlXPathNodeSetAddUnique_APIParam_2 is a new xmlNodePtr||||null
xmlXPathNodeSetAddUnique_APIName returns 0 in case of success and -1 in case of failure||||null
Traversal function for the `` descendant-or-self '' direction the descendant-or-self axis contains the context node and the descendants of the context node in document order||||null
Traversal function for the `` following '' direction The following axis contains all nodes in the same document as the context node that are after the context node in document order , excluding any descendants and excluding attribute nodes and namespace nodes||||null
xmlXPathNodeSetContains_APIParam_1 is the node-set||||null
the nodes are ordered in document order||||null
Traversal function for the `` namespace '' direction the namespace axis contains the namespace nodes of the context node||||null
xmlXPathNodeSetContains_APIParam_2 is the node||||null
Traversal function for the `` preceding-sibling '' direction The preceding-sibling axis contains the preceding siblings of the context node in reverse document order||||null
Traversal function for the `` ancestor '' direction the ancestor axis contains the ancestors of the context node||||null
the order of nodes on this axis is implementation-defined||||null
the first preceding sibling is first on the axis||||null
Removes an xmlNodePtr from an existing NodeSet||||null
xmlXPathNodeSetDel_APIParam_1 is the initial node set||||null
xmlXPathNodeSetDel_APIParam_2 is an xmlNodePtr||||null
the sibling preceding that node is the second on the axis and so on||||null
add a new xmlNodePtr to an existing NodeSet , optimized version||||when we are sure the node is not already in the set
thus the context node is the first node on the axis , and the first child of the context node is the second node on the axis||||null
Namespace nodes in libxml do not match the XPath semantic||||null
the ancestors of the context node consist of the parent of context node and the parent parent and so on||||null
xmlXPathNodeSetFreeNs_APIParam_1 is the XPath namespace node found in a nodeset||||null
the nodes are ordered in reverse document order||||null
xmlXPathNodeSetMerge_APIParam_1 is the first NodeSet or NULL||||null
xmlXPathNodeSetMerge_APIName returns @val1 once extended or NULL in case of error||||null
xmlXPathNodeSetMerge_APIParam_2 is the second NodeSet||||null
Removes an entry from an existing NodeSet list||||null
Check||||if such a node needs to be freed
thus the parent is the first node on the axis , and the parent parent is the second node on the axis||||null
xmlXPathNodeSetRemove_APIParam_1 is the initial node set||||null
Traversal function for the `` preceding '' direction the preceding axis contains all nodes in the same document as the context node that are before the context node in document order , excluding any ancestors and excluding attribute nodes and namespace nodes||||null
the nodes are ordered in reverse document order||||null
xmlXPathNodeSetRemove_APIParam_2 is the index to remove||||null
the axis will be empty||||unless the context node is an element We keep the XML namespace node at the end of the list
Sort the node xmlXPathNodeSetSort_APIParam_1 in document order||||null
In a node set the namespace nodes are duplicated and the next pointer is set to the parent node in the XPath semantic||||null
a new set is created and copied from @val2||||if @val1 is NULL
Merges two nodesets , all nodes from @val2 are added to @val1||||null
xmlXPathNodeSetSort_APIParam_1 is the node set||||null
xmlXPathNodeTrailing_APIParam_1 is a node-set||||null
xmlXPathNodeTrailing_APIParam_2 is a xmlXPathNodeTrailing_APIParam_2||||null
Implements the EXSLT - Sets trailing_APIName function||||null
node-set set||||null
Implements the EXSLT - Sets trailing_APIName function||||null
node-set set||||null
trailing||||null
xmlXPathNodeTrailingSorted_APIParam_1 is a node-set , sorted by document order||||null
trailing @nodes is sorted by document order , #xmlXPathNodeTrailing_APINameSorted is called||||null
xmlXPathNodeTrailingSorted_APIParam_2 is a xmlXPathNodeTrailingSorted_APIParam_2||||null
Implement the normalize-space_APIName XPath function string normalize-space||||null
xmlXPathNodeTrailing_APIName returns the xmlXPathNodeTrailing_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node||||null
xmlXPathNormalizeFunction_APIParam_1 is the XPath Parser context||||null
Whitespace characters are the same allowed by the S production in XML||||null
xmlXPathNormalizeFunction_APIParam_2 is the number of arguments||||null
The normalize-space function returns the argument string with white space normalized by stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space||||null
xmlXPathNodeTrailingSorted_APIName returns the xmlXPathNodeTrailingSorted_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node||||null
Implement the equal operation on XPath objects content||||null
@arg1 == @arg2||||null
xmlXPathNotEqualValues_APIName returns 0 or 1 depending on the results of the test||||null
xmlXPathNotEqualValues_APIParam_1 is the XPath Parser context||||null
xmlXPathNotFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathNotFunction_APIParam_2 is the number of arguments||||null
xmlXPathNsLookup_APIParam_1 is the XPath context||||null
xmlXPathNsLookup_APIParam_2 is the namespace xmlXPathNsLookup_APIParam_2 value||||null
xmlXPathNsLookup_APIName returns the value or NULL if not found||||null
Implement the number_APIName XPath function number number||||null
xmlXPathNumberFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathNumberFunction_APIParam_2 is the number of arguments||||null
Search in the namespace declaration array of the context for the given namespace name associated to the given xmlXPathNsLookup_APIParam_2||||null
parse an XML namespace non qualified name||||null
the argument defaults to the context node converted to a string , the value of the context node||||If the argument is omitted
xmlXPathParseNCName_APIName returns the namespace name or NULL||||null
xmlXPathParseNCName_APIParam_1 is the XPath Parser context||||null
parse an XML name NameChar||||null
xmlXPathParseName_APIName returns the namespace name or NULL||||null
xmlXPathParseName_APIParam_1 is the XPath Parser context||||null
= Letter | Digit | ' . '||||null
Check error with #xmlXPathCheckError||||null
xmlXPathPopBoolean_APIName returns the boolean||||null
xmlXPathPopBoolean_APIParam_1 is an XPath parser context||||null
Check error with #xmlXPathCheckError||||null
xmlXPathPopExternal_APIParam_1 is an XPath parser context||||null
xmlXPathPopExternal_APIName returns the object||||null
Check error with #xmlXPathCheckError||||null
| ' - ' | '_' | CombiningChar | Extender||||null
xmlXPathPopNodeSet_APIParam_1 is an XPath parser context||||null
handling conversion||||if needed
Pops a boolean from the stack||||null
xmlXPathPopNodeSet_APIName returns the node-set||||null
= * NCNameChar||||null
handling conversion||||if needed
Pops an external object from the stack||||null
Check error with #xmlXPathCheckError||||null
xmlXPathPopNumber_APIName returns the number||||null
xmlXPathPopNumber_APIParam_1 is an XPath parser context||||null
= Letter | Digit | ' . '||||null
Check error with #xmlXPathCheckError||||null
handling conversion||||if needed
Pops a node-set from the stack||||null
xmlXPathPopString_APIName returns the string||||null
xmlXPathPopString_APIParam_1 is an XPath parser context||||null
handling conversion||||if needed
Pops a number from the stack||||null
xmlXPathPositionFunction_APIParam_1 is the XPath Parser context||||null
Implement the position_APIName XPath function number position_APIName The position function returns the position of the context node in the context node list||||null
xmlXPathPositionFunction_APIParam_2 is the number of arguments||||null
The first position is 1 , and so the last position will be equal to last_APIName||||null
Registers all default XPath functions in this context||||null
xmlXPathRegisterAllFunctions_APIParam_1 is the XPath context||||null
Register a new function||||null
handling conversion||||if needed
Pops a string from the stack||||null
xmlXPathRegisterFunc_APIParam_1 is the XPath context||||null
xmlXPathRegisterFunc_APIParam_2 is the function xmlXPathRegisterFunc_APIParam_2||||null
xmlXPathRegisterFunc_APIName returns 0 in case of success, -1 in case of error||||null
xmlXPathRegisterFunc_APIParam_3 is the function implementation or NULL||||null
| ' - ' | '_' | '||||null
Registers an external mechanism to do function lookup||||null
xmlXPathRegisterFuncLookup_APIParam_1 is the XPath context||||null
xmlXPathRegisterFuncLookup_APIParam_2 is the lookup function||||null
' | CombiningChar | Extender Name||||null
= *||||null
xmlXPathRegisterFuncLookup_APIParam_3 is the lookup data||||null
it unregisters the function||||If @f is NULL
Register a new function||||null
xmlXPathRegisterFuncNS_APIParam_1 is the XPath context||||null
xmlXPathRegisterFuncNS_APIParam_2 is the function xmlXPathRegisterFuncNS_APIParam_2||||null
xmlXPathRegisterFuncNS_APIParam_3 is the function namespace URI||||null
xmlXPathRegisterFuncNS_APIParam_4 is the function implementation or NULL||||null
Register a new namespace||||null
xmlXPathRegisterFuncNS_APIName returns 0 in case of success, -1 in case of error||||null
it unregisters the function||||If @f is NULL
xmlXPathRegisterNs_APIParam_1 is the XPath context||||null
xmlXPathRegisterNs_APIParam_3 is the namespace name||||null
xmlXPathRegisterNs_APIName returns 0 in case of success, -1 in case of error||||null
Register a new variable xmlXPathRegisterVariable_APIParam_3||||null
xmlXPathRegisterNs_APIParam_2 is the namespace xmlXPathRegisterNs_APIParam_2 can not be NULL or empty string||||null
it unregisters the namespace||||If @ns_uri is NULL
xmlXPathRegisterVariable_APIParam_1 is the XPath context||||null
xmlXPathRegisterVariable_APIParam_2 is the variable xmlXPathRegisterVariable_APIParam_2||||null
xmlXPathRegisterVariable_APIParam_3 is the variable xmlXPathRegisterVariable_APIParam_3 or NULL||||null
xmlXPathRegisterVariable_APIName returns 0 in case of success, -1 in case of error||||null
register an external mechanism to do variable lookup||||null
xmlXPathRegisterVariableLookup_APIParam_1 is the XPath context||||null
xmlXPathRegisterVariableLookup_APIParam_2 is the lookup function||||null
it unregisters the variable||||If @value is NULL
xmlXPathRegisterVariableLookup_APIParam_3 is the lookup data||||null
Register a new variable xmlXPathRegisterVariableNS_APIParam_4||||null
xmlXPathRegisterVariableNS_APIParam_1 is the XPath context||||null
xmlXPathRegisterVariableNS_APIParam_2 is the variable xmlXPathRegisterVariableNS_APIParam_2||||null
xmlXPathRegisterVariableNS_APIParam_3 is the variable namespace URI||||null
xmlXPathRegisterVariableNS_APIParam_4 is the variable xmlXPathRegisterVariableNS_APIParam_4 or NULL||||null
it unregisters the variable||||If @value is NULL
Cleanup the XPath context data associated to registered functions||||null
xmlXPathRegisterVariableNS_APIName returns 0 in case of success, -1 in case of error||||null
xmlXPathRegisteredFuncsCleanup_APIParam_1 is the XPath context||||null
Cleanup the XPath context data associated to registered variables||||null
xmlXPathRegisteredNsCleanup_APIParam_1 is the XPath context||||null
Cleanup the XPath context data associated to registered variables||||null
xmlXPathRegisteredVariablesCleanup_APIParam_1 is the XPath context||||null
Initialize the context to the root of the document||||null
xmlXPathRoot_APIParam_1 is the XPath Parser context||||null
xmlXPathRoundFunction_APIParam_1 is the XPath Parser context||||null
If there are two such numbers, the one that is closest to positive infinitybe returned by xmlXPathRoundFunction_APIName||||null
xmlXPathRoundFunction_APIParam_2 is the number of arguments||||null
Implement the round_APIName XPath function number round The round function returns the number that is closest to the argument and that is an integer||||null
xmlXPathStartsWithFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathStartsWithFunction_APIParam_2 is the number of arguments||||null
= Number ?||||null
| ' . '||||null
xmlXPathStringEvalNumber_APIName returns the double value||||null
xmlXPathStringEvalNumber_APIParam_1 is A string to scan||||null
= Digits -LRB- ' . '||||null
If the node-set is empty, an empty stringbe returned by xmlXPathStringFunction_APIName||||null
Implement the string_APIName XPath function string string||||null
- The boolean false value is converted to the string false||||null
xmlXPathStringLengthFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathStringLengthFunction_APIParam_2 is the number of arguments||||null
xmlXPathStringFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathSubstringAfterFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathStringFunction_APIParam_2 is the number of arguments||||null
xmlXPathSubstringAfterFunction_APIParam_2 is the number of arguments||||null
xmlXPathSubValues_APIParam_1 is the XPath Parser context||||null
Implement the substring_APIName XPath function string substring||||null
Implement the string-length_APIName XPath function number string-length||||null
substring-after returns 04/01, and substring-after returns 99/04/01||||null
xmlXPathSubstringBeforeFunction_APIParam_2 is the number of arguments||||null
substring-before returns 1999. xmlXPathSubstringBeforeFunction_APIParam_1 is the XPath Parser context||||null
The boolean true value is converted to the string true||||null
The string-length returns the number of characters in the string||||null
substring returns "234"||||null
substring returns "2345"||||null
xmlXPathSubstringFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathSumFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathTrailing_APIParam_2 is a node-set||||null
xmlXPathTrailing_APIParam_1 is a node-set||||null
xmlXPathSumFunction_APIParam_2 is the number of arguments||||null
xmlXPathTrailingSorted_APIParam_1 is a node-set , sorted by document order||||null
Implements the EXSLT - Sets trailing_APIName function||||null
node-set set||||null
xmlXPathTrailing_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2||||null
xmlXPathSubstringFunction_APIParam_2 is the number of arguments||||null
trailing||||null
is omitted , it defaults to a node-set with the context node as its only member||||If the argument
translate||||null
Implements the EXSLT - Sets trailing_APIName function||||null
node-set set||||null
xmlXPathVariableLookup_APIParam_1 is the XPath context||||null
xmlXPathTrueFunction_APIParam_1 is the XPath Parser context||||null
trailing @nodes1 and @nodes2 are sorted by document order , #xmlXPathTrailing_APINameSorted is called||||null
xmlXPathTrailingSorted_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2||||null
xmlXPathTranslateFunction_APIParam_1 is the XPath Parser context||||null
xmlXPathTranslateFunction_APIParam_2 is the number of arguments||||null
Implement the translate_APIName XPath function string translate The translate function returns the first argument string with occurrences of characters in the second argument string replaced by the character at the corresponding position in the third argument string||||null
- substring returns "234" - substring returns "12" - substring returns "" - substring returns "" - substring returns "12345" - substring returns ""||||null
Implement the true_APIName XPath function boolean true_APIName||||null
xmlXPathTrueFunction_APIParam_2 is the number of arguments||||null
xmlXPathVariableLookup_APIParam_2 is the variable xmlXPathVariableLookup_APIParam_2||||null
translate returns the string BAr||||null
xmlXPathTrailingSorted_APIParam_2 is a node-set , sorted by document order||||null
xmlXPathValueFlipSign_APIParam_1 is the XPath Parser context||||null
xmlXPathVariableLookup_APIName returns a copy of the value or NULL if not found||||null
Implement the subtraction operation on XPath objects||||null
The substring function returns the substring of the first argument starting at the position specified in the second argument with length specified in the third argument||||null
Search in the Variable array of the context for the given variable value||||null
Implement the sum_APIName XPath function number sum The sum function returns the sum of the values of the nodes in the argument node-set||||null
The string function converts an object to a string as follows||||null
- A node-set is converted to a string by returning the value of the node in the node-set that is first in document order||||null
If the third argument is not specified, {}_APIName returns the substring starting at the position specified in the second argument and continuing to the end of the string||||null
Implement the substring-before_APIName XPath function string substring-before The substring-before function returns the substring of the first argument string that precedes the first occurrence of the second argument string in the first argument string, or the empty string if the first argument string does not contain the second argument string||||null
The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
More precisely , each character in the string is considered to have a numeric position||||null
Implement the substring-after_APIName XPath function string substring-after The substring-after function returns the substring of the first argument string that follows the first occurrence of the second argument string in the first argument string, or the empty stringi if the first argument string does not contain the second argument string||||null
Digits Digits||||null
xmlXPathVariableLookupNS_APIParam_1 is the XPath context||||null
the position of the first character is 1 , the position of the second character is 2 and so on||||null
Search in the Variable array of the context for the given variable value||||null
xmlXPathVariableLookupNS_APIParam_2 is the variable xmlXPathVariableLookupNS_APIParam_2||||null
= + Compile a Number in the string In complement of the Number expression , xmlXPathStringEvalNumber_APIName also handles negative values||||null
xmlXPathVariableLookupNS_APIParam_3 is the variable namespace URI||||null
' - ' Number||||null
Wraps a string into an XPath object||||null
xmlXPathVariableLookupNS_APIName returns the a copy of the value or NULL if not found||||null
Implement the unary - operation on an XPath object The numeric operators convert The numeric operators operands to numbers by calling the number function||||as if
the argument defaults to the context node converted to a string , the value of the context node||||If the argument is omitted
xmlXPathWrapCString_APIParam_1 is the char * value||||null
xmlXPathWrapCString_APIName returns the newly created object||||null
Wraps the @val data into an XPath object||||null
xmlXPathWrapExternal_APIParam_1 is the user data||||null
xmlXPathWrapExternal_APIName returns the newly created object||||null
Wrap the Nodeset @val in a new xmlXPathObjectPtr||||null
xmlXPathWrapNodeSet_APIName returns the newly created object||||null
xmlXPathWrapNodeSet_APIParam_1 is the NodePtr value||||null
Wraps the @val string into an XPath object||||null
xmlXPathWrapString_APIName returns the newly created object||||null
xmlXPathWrapString_APIParam_1 is the xmlChar * value||||null
Formats an error message||||null
xmlXPatherror_APIParam_1 is the XPath Parser context||||null
occurrences of that character in the first argument string are removed||||If there is a character in the second argument string with no character at a corresponding position in the third argument string
xmlXPatherror_APIParam_2 is the xmlXPatherror_APIParam_2 name||||null
xmlXPatherror_APIParam_3 is the xmlXPatherror_APIParam_3 number||||null
xmlXPatherror_APIParam_4 is the error number||||null
Daniel Veillard||||null
Free up the memory allocated by @comp||||null
xmlFreePattern_APIParam_1 is an XSLT comp||||null
Free up the memory allocated by all the elements of @comp||||null
xmlFreePatternList_APIParam_1 is an XSLT xmlFreePatternList_APIParam_1 list||||null
Free the xmlFreeStreamCtxt_APIParam_1 context||||null
xmlFreeStreamCtxt_APIParam_1 is the xmlFreeStreamCtxt_APIParam_1 context||||null
xmlPatternFromRoot_APIParam_1 is the precompiled pattern||||null
xmlPatternGetStreamCtxt_APIParam_1 is the precompiled pattern||||null
xmlPatternFromRoot_APIName returns 1 if true, 0 if false and -1 in case of error||||null
xmlPatternGetStreamCtxt_APIName returns a pointer to the context or NULL in case of failure||||null
Get a streaming context for that pattern Use xmlFreeStreamCtxt to free the context||||null
Check||||if the pattern must be looked at from the root
xmlPatternMatch_APIParam_1 is the precompiled pattern||||null
xmlPatternMatch_APIParam_2 is a xmlPatternMatch_APIParam_2||||null
Check the maximum depth reachable by a pattern||||null
xmlPatternMaxDepth_APIParam_1 is the precompiled pattern||||null
xmlPatternMatch_APIName returns 1 if it matches, 0 if it does not and -1 in case of failure||||null
are part of the set||||null
xmlPatternMinDepth_APIParam_1 is the precompiled pattern||||null
Check the minimum depth reachable by a pattern , 0 mean the / or||||null
xmlPatternGetStreamCtxt_APIName should work||||null
xmlPatternStreamable_APIParam_1 is the precompiled pattern||||null
Compile a xmlPatterncompile_APIParam_1||||null
xmlPatternStreamable_APIName returns 1 if streamable, 0 if not and -1 in case of error||||null
xmlPatterncompile_APIParam_1 is the xmlPatterncompile_APIParam_1 to compile||||null
xmlPatterncompile_APIParam_2 is an optional dictionary for interned strings||||null
xmlPatterncompile_APIParam_3 is compilation xmlPatterncompile_APIParam_3 , see xmlPatternFlags||||null
Check||||if the pattern is streamable i.e
xmlPatterncompile_APIParam_4 is the prefix definitions , array of or NULL||||null
push one level from the xmlStreamPop_APIParam_1||||null
xmlPatterncompile_APIName returns the compiled form of the xmlPatterncompile_APIParam_1 or NULL in case of error||||null
xmlStreamPop_APIParam_1 is the xmlStreamPop_APIParam_1 context||||null
Push new data onto the xmlStreamPush_APIParam_1||||null
the root of the document||||null
This can also act as a reset||||null
xmlStreamPush_APIParam_1 is the xmlStreamPush_APIParam_1 context||||null
xmlStreamPush_APIParam_2 is the current xmlStreamPush_APIParam_2||||null
xmlStreamPush_APIParam_3 is the namespace xmlStreamPush_APIParam_2||||null
Push new attribute data onto the xmlStreamPushAttr_APIParam_1||||null
the root of the document||||null
This can also act as a reset||||null
xmlStreamPushAttr_APIParam_1 is the xmlStreamPushAttr_APIParam_1 context||||null
Both @name and @ns being NULL means the / i.e||||null
Otherwise the function will act||||as if it has been given an element-node
xmlStreamPushAttr_APIParam_2 is the current xmlStreamPushAttr_APIParam_2||||null
xmlStreamPushAttr_APIParam_3 is the namespace xmlStreamPushAttr_APIParam_2||||null
strings for xmlStreamPush_APIParam_2 and xmlStreamPush_APIParam_3 will be expected to come from the dictionary||||if the call xmlPatterncompile_APIName indicated a dictionary
Push new data onto the xmlStreamPushNode_APIParam_1||||null
the root of the document||||null
This can also act as a reset||||null
xmlStreamPushNode_APIParam_1 is the xmlStreamPushNode_APIParam_1 context||||null
xmlStreamPushNode_APIParam_2 is the current xmlStreamPushNode_APIParam_2||||null
Both @name and @ns being NULL means the / i.e||||null
Otherwise the function will act||||as if it has been given an attribute-node
xmlStreamPushNode_APIParam_3 is the namespace xmlStreamPushNode_APIParam_2||||null
strings for xmlStreamPushAttr_APIParam_2 and xmlStreamPushAttr_APIParam_3 will be expected to come from the dictionary||||if the call xmlPatterncompile_APIName indicated a dictionary
xmlStreamPushNode_APIParam_4 is the type of the node being pushed||||null
Different from xmlStreamPush_APIName xmlStreamPushNode_APIName can be fed with nodes of type||||null
xmlStreamWantsAnyNode_APIParam_1 is the stream context||||null
Both @name and @ns being NULL means the / i.e||||null
element - , attribute - , text - , cdata-section - , comment - and processing-instruction-node||||null
-1 on API errors||||null
Daniel Veillard||||null
This is the prototype for a extended link detection callback||||null
strings for xmlStreamPushNode_APIParam_2 and xmlStreamPushNode_APIParam_3 will be expected to come from the dictionary||||if the call xmlPatterncompile_APIName indicated a dictionary
xlinkExtendedLinkFunk_APIParam_1 is user data pointer||||null
xlinkExtendedLinkFunk_APIParam_2 is the xlinkExtendedLinkFunk_APIParam_2 carrying the link||||null
element-nodes and attribute-nodes need to be pushed||||If the result is 0 only
xlinkExtendedLinkFunk_APIParam_3 is the number of locators detected on the link||||null
xlinkExtendedLinkFunk_APIParam_4 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_4||||null
xlinkExtendedLinkFunk_APIParam_5 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of locator xlinkExtendedLinkFunk_APIParam_5||||null
xlinkExtendedLinkFunk_APIParam_6 is the number of arcs detected on the link||||null
xlinkExtendedLinkFunk_APIParam_7 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of source xlinkExtendedLinkFunk_APIParam_5 found on the arcs||||null
xlinkExtendedLinkFunk_APIParam_8 is pointer xlinkExtendedLinkFunk_APIParam_8 the array of target xlinkExtendedLinkFunk_APIParam_5 found on the arcs||||null
Query||||if the streaming pattern additionally needs to be fed with text - , cdata-section - , comment - and processing-instruction-nodes
xlinkExtendedLinkFunk_APIParam_9 is array of values for the xlinkExtendedLinkFunk_APIParam_9 attributes found on the arcs||||null
xlinkExtendedLinkFunk_APIParam_10 is array of values for the xlinkExtendedLinkFunk_APIParam_10 attributes found on the arcs||||null
xlinkExtendedLinkFunk_APIParam_11 is the number of xlinkExtendedLinkFunk_APIParam_12 detected on the link||||null
xlinkExtendedLinkFunk_APIParam_12 is||||null
xlinkExtendedLinkFunk_APIParam_13 is array of xmllang values for the titles||||null
xlinkExtendedLinkSetFunk_APIParam_1 is user data pointer||||null
This is the prototype for a extended link set detection callback||||null
xlinkExtendedLinkSetFunk_APIParam_2 is the xlinkExtendedLinkSetFunk_APIParam_2 carrying the link||||null
xlinkExtendedLinkSetFunk_APIParam_3 is the number of locators detected on the link||||null
xlinkExtendedLinkSetFunk_APIParam_4 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_4||||null
xlinkExtendedLinkSetFunk_APIParam_5 is pointer to the array of locator xlinkExtendedLinkSetFunk_APIParam_5||||null
xlinkExtendedLinkSetFunk_APIParam_7 is||||null
xlinkExtendedLinkSetFunk_APIParam_6 is the number of xlinkExtendedLinkSetFunk_APIParam_7 detected on the link||||null
xlinkExtendedLinkSetFunk_APIParam_8 is array of xmllang values for the titles||||null
xlinkGetDefaultDetect_APIName returns the current function or NULL||||null
Get the default xlink detection routine||||null
xlinkGetDefaultHandler_APIName returns the current xlinkHandlerPtr value||||null
Get the default xlink handler||||null
xlinkIsLink_APIParam_1 is the document containing the xlinkIsLink_APIParam_2||||null
xlinkIsLink_APIParam_2 is the xlinkIsLink_APIParam_2 pointer itself||||null
This routine do not try to do full checking of the link validity but tries to detect and return the appropriate link type||||null
This is the prototype for the link detection routine||||null
xlinkIsLink_APIName returns the xlinkType of the xlinkIsLink_APIParam_2 (XLINK_TYPE_NONE if there is no link detected||||null
It calls the default link detection callbacks upon link detection||||null
xlinkNodeDetectFunc_APIParam_1 is user data pointer||||null
xlinkNodeDetectFunc_APIParam_2 is the xlinkNodeDetectFunc_APIParam_2 to check||||null
Set the default xlink detection routine||||null
xlinkSetDefaultDetect_APIParam_1 is pointer to the new detection routine||||null
Set the default xlink handlers||||null
xlinkSetDefaultHandler_APIParam_1 is the new value for the xlink xlinkSetDefaultHandler_APIParam_1 block||||null
This is the prototype for a simple link detection callback||||null
xlinkSimpleLinkFunk_APIParam_1 is user data pointer||||null
xlinkSimpleLinkFunk_APIParam_2 is the xlinkSimpleLinkFunk_APIParam_2 carrying the link||||null
xlinkSimpleLinkFunk_APIParam_3 is the target of the link||||null
xlinkSimpleLinkFunk_APIParam_4 is the xlinkSimpleLinkFunk_APIParam_4 string||||null
xlinkSimpleLinkFunk_APIParam_5 is the link xlinkSimpleLinkFunk_APIParam_5||||null
Daniel Veillard||||null
Initialize the default SAX handler||||null
Initialize the default SAX handler||||null
Initialize the default SAX2 handler||||null
An attribute definition has been parsed||||null
xmlSAX2AttributeDecl_APIParam_1 is the user data||||null
xmlSAX2AttributeDecl_APIParam_2 is the name of the element||||null
xmlSAX2AttributeDecl_APIParam_3 is the attribute name||||null
xmlSAX2AttributeDecl_APIParam_4 is the attribute xmlSAX2AttributeDecl_APIParam_4||||null
xmlSAX2AttributeDecl_APIParam_5 is the xmlSAX2AttributeDecl_APIParam_4 of default value||||null
xmlSAX2AttributeDecl_APIParam_6 is the attribute default value||||null
xmlSAX2AttributeDecl_APIParam_7 is the xmlSAX2AttributeDecl_APIParam_7 of enumerated value set||||null
xmlSAX2CDataBlock_APIParam_1 is the user data||||null
xmlSAX2CDataBlock_APIParam_2 is The pcdata content||||null
xmlSAX2CDataBlock_APIParam_3 is the block length||||null
receiving some chars from the parser||||null
xmlSAX2Characters_APIParam_1 is the user data||||null
called||||when a pcdata block has been parsed
xmlSAX2Characters_APIParam_2 is a xmlChar string||||null
xmlSAX2Characters_APIParam_3 is the number of xmlChar||||null
A xmlSAX2Comment_APIName has been parsed||||null
xmlSAX2Comment_APIParam_1 is the user data||||null
xmlSAX2Comment_APIParam_2 is the xmlSAX2Comment_APIName content||||null
An element definition has been parsed||||null
xmlSAX2ElementDecl_APIParam_1 is the user data||||null
xmlSAX2ElementDecl_APIParam_2 is the element xmlSAX2ElementDecl_APIParam_2||||null
xmlSAX2ElementDecl_APIParam_3 is the element xmlSAX2ElementDecl_APIParam_3||||null
xmlSAX2ElementDecl_APIParam_4 is the element value tree||||null
xmlSAX2EndDocument_APIParam_1 is the user data -LRB- XML parser context||||null
xmlSAX2EndElement_APIParam_1 is the user data||||null
xmlSAX2EndElement_APIParam_2 is The element name||||null
It provides the namespace informations for the element||||null
xmlSAX2EndElementNs_APIParam_1 is the user data||||null
called||||when the document end has been detected
xmlSAX2EndElementNs_APIParam_2 is the local name of the element||||null
called||||when the end of an element has been detected
An entity definition has been parsed||||null
xmlSAX2EntityDecl_APIParam_1 is the user data||||null
xmlSAX2EntityDecl_APIParam_2 is the entity xmlSAX2EntityDecl_APIParam_2||||null
SAX2 callback||||when an element end has been detected by the parser
xmlSAX2EntityDecl_APIParam_3 is the entity xmlSAX2EntityDecl_APIParam_3||||null
xmlSAX2EntityDecl_APIParam_4 is The public ID of the entity||||null
xmlSAX2EndElementNs_APIParam_4 is the element namespace name||||if available
xmlSAX2EntityDecl_APIParam_5 is The system ID of the entity||||null
xmlSAX2EntityDecl_APIParam_6 is the entity value -LRB- without processing||||null
xmlSAX2EndElementNs_APIParam_3 is the element namespace xmlSAX2EndElementNs_APIParam_3||||if available
Callback on external subset declaration||||null
xmlSAX2ExternalSubset_APIParam_1 is the user data||||null
xmlSAX2ExternalSubset_APIParam_2 is the root element xmlSAX2ExternalSubset_APIParam_2||||null
xmlSAX2ExternalSubset_APIParam_3 is the external ID||||null
filename or URL||||null
Provide the column number of the current parsing point||||null
xmlSAX2GetColumnNumber_APIName returns an int||||null
xmlSAX2GetColumnNumber_APIParam_1 is the user data||||null
xmlSAX2ExternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g||||null
Get an entity by xmlSAX2GetEntity_APIParam_2||||null
xmlSAX2GetEntity_APIParam_1 is the user data||||null
xmlSAX2GetEntity_APIName returns the xmlEntityPtr if found||||null
xmlSAX2GetEntity_APIParam_2 is The entity xmlSAX2GetEntity_APIParam_2||||null
Provide the line number of the current parsing point||||null
xmlSAX2GetLineNumber_APIName returns an int||||null
xmlSAX2GetLineNumber_APIParam_1 is the user data||||null
Get a parameter entity by xmlSAX2GetParameterEntity_APIParam_2||||null
xmlSAX2GetParameterEntity_APIParam_1 is the user data||||null
xmlSAX2GetParameterEntity_APIName returns the xmlEntityPtr if found||||null
xmlSAX2GetParameterEntity_APIParam_2 is The entity xmlSAX2GetParameterEntity_APIParam_2||||null
Provides the public ID e.g||||null
xmlSAX2GetPublicId_APIName returns a xmlChar||||null
xmlSAX2GetPublicId_APIParam_1 is the user data||||null
Provides the system ID , basically URL or filename e.g||||null
xmlSAX2GetSystemId_APIParam_1 is the user data||||null
xmlSAX2GetSystemId_APIName returns a xmlChar||||null
Does this document has an external subset||||null
xmlSAX2HasExternalSubset_APIParam_1 is the user data||||null
xmlSAX2HasExternalSubset_APIName returns 1 if true||||null
Does this document has an internal subset||||null
xmlSAX2HasInternalSubset_APIParam_1 is the user data||||null
xmlSAX2HasInternalSubset_APIName returns 1 if true||||null
receiving some ignorable whitespaces from the parser||||null
by default the DOM building will use xmlSAX2Characters||||null
xmlSAX2IgnorableWhitespace_APIParam_1 is the user data||||null
xmlSAX2IgnorableWhitespace_APIParam_2 is a xmlChar string||||null
xmlSAX2IgnorableWhitespace_APIParam_3 is the number of xmlChar||||null
Initialize the default XML SAX2 handler||||null
xmlSAX2InitDefaultSAXHandler_APIParam_1 is the SAX handler||||null
Initialize the default DocBook SAX2 handler||||null
xmlSAX2InitDocbDefaultSAXHandler_APIParam_1 is the SAX handler||||null
Initialize the default HTML SAX2 handler||||null
xmlSAX2InitDefaultSAXHandler_APIParam_2 is flag||||if non-zero sets the handler xmlSAX2InitDefaultSAXHandler_APIParam_2 procedure
'' - / / SGMLSOURCE / / DTD DEMO / / EN ''||||null
xmlSAX2InitHtmlDefaultSAXHandler_APIParam_1 is the SAX handler||||null
Callback on internal subset declaration||||null
xmlSAX2InternalSubset_APIParam_1 is the user data||||null
xmlSAX2InternalSubset_APIParam_2 is the root element xmlSAX2InternalSubset_APIParam_2||||null
xmlSAX2InternalSubset_APIParam_3 is the external ID||||null
filename or URL||||null
Is this document tagged standalone ?||||null
xmlSAX2IsStandalone_APIParam_1 is the user data||||null
xmlSAX2IsStandalone_APIName returns 1 if true||||null
xmlSAX2InternalSubset_APIParam_4 is the SYSTEM ID -LRB- e.g||||null
xmlSAX2NotationDecl_APIParam_1 is the user data||||null
xmlSAX2NotationDecl_APIParam_2 is The xmlSAX2NotationDecl_APIParam_2 of the notation||||null
xmlSAX2NotationDecl_APIParam_3 is The public ID of the entity||||null
xmlSAX2NotationDecl_APIParam_4 is The system ID of the entity||||null
A processing instruction has been parsed||||null
xmlSAX2ProcessingInstruction_APIParam_1 is the user xmlSAX2ProcessingInstruction_APIParam_3||||null
xmlSAX2ProcessingInstruction_APIParam_2 is the xmlSAX2ProcessingInstruction_APIParam_2 name||||null
xmlSAX2ProcessingInstruction_APIParam_3 is the PI data||||null
What to do||||when a notation declaration has been parsed
||||null
xmlSAX2Reference_APIParam_1 is the user data||||null
xmlSAX2Reference_APIParam_2 is The entity name||||null
xmlSAX2ResolveEntity_APIParam_1 is the user data||||null
xmlSAX2ResolveEntity_APIParam_2 is The public ID of the entity||||null
xmlSAX2ResolveEntity_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour||||null
xmlSAX2ResolveEntity_APIParam_3 is The system ID of the entity||||null
xmlSAX2SetDocumentLocator_APIParam_1 is the user data||||null
called||||when an entity xmlSAX2Reference_APIName is detected
xmlSAX2SetDocumentLocator_APIParam_2 is A SAX Locator||||null
xmlSAX2StartDocument_APIParam_1 is the user data -LRB- XML parser context||||null
xmlSAX2StartElement_APIParam_1 is the user data||||null
xmlSAX2StartElement_APIParam_2 is The element name , including namespace prefix||||null
called||||when the document start being processed
called||||when an opening tag has been processed
xmlSAX2StartElement_APIParam_3 is An array of name/value attributes pairs , NULL terminated||||null
Receive the document locator at startup , actually xmlDefaultSAXLocator Everything is available on the context , so this is useless in our case||||null
xmlSAX2StartElementNs_APIParam_1 is the user data||||null
The entity loader , to control the loading of external entities , the application can either||||null
xmlSAX2StartElementNs_APIParam_2 is the local name of the element||||null
SAX2 callback||||when an element start has been detected by the parser
xmlSAX2StartElementNs_APIParam_5 is number of namespace definitions on that node||||null
- override this xmlSAX2ResolveEntity_APIName_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine||||null
xmlSAX2StartElementNs_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions||||null
xmlSAX2StartElementNs_APIParam_7 is the number of xmlSAX2StartElementNs_APIParam_9 on that node||||null
It provides the namespace informations for the element , as well as the new namespace declarations on the element||||null
xmlSAX2StartElementNs_APIParam_8 is the number of defaulted xmlSAX2StartElementNs_APIParam_9||||null
xmlSAX2StartElementNs_APIParam_9 is pointer to the array of attribute values||||null
xmlSAX2UnparsedEntityDecl_APIParam_1 is the user data||||null
xmlSAX2StartElementNs_APIParam_3 is the element namespace xmlSAX2StartElementNs_APIParam_3||||if available
xmlSAX2UnparsedEntityDecl_APIParam_2 is The xmlSAX2UnparsedEntityDecl_APIParam_2 of the entity||||null
xmlSAX2StartElementNs_APIParam_4 is the element namespace name||||if available
xmlSAX2UnparsedEntityDecl_APIParam_3 is The public ID of the entity||||null
xmlSAX2UnparsedEntityDecl_APIParam_4 is The system ID of the entity||||null
xmlSAX2UnparsedEntityDecl_APIParam_5 is the xmlSAX2UnparsedEntityDecl_APIParam_2 of the notation||||null
Set the default xmlSAXDefaultVersion_APIParam_1 of SAX used globally by the library||||null
xmlSAXDefaultVersion_APIParam_1 is the xmlSAXDefaultVersion_APIParam_1, 1 or 2. xmlSAXDefaultVersion_APIName returns the previous value in case of success and -1 in case of error||||null
Initialize the default XML SAX handler according to the xmlSAXVersion_APIParam_2||||null
xmlSAXVersion_APIParam_1 is the SAX handler||||null
What to do||||when an unparsed entity declaration is parsed
||||null
Daniel Veillard||||null
xmlSAXVersion_APIParam_2 is the xmlSAXVersion_APIParam_2, 1 or 2. xmlSAXVersion_APINamereturns 0 in case of success and -1 in case of error||||null
This should not be called by user level code||||null
By default , the default is set to 2||||during initialization
Signature for a free_APIName implementation||||null
Note that it is generally a better coding style to use xmlSAXVersion_APIName to set up the xmlSAXDefaultVersion_APIParam_1 explicitly for a given parsing context||||null
Free up all the memory allocated by the library for its own use||||null
xmlFreeFunc_APIParam_1 is an already allocated block of memory||||null
of areas useful for garbage collected memory allocators||||null
xmlGcMemGet_APIParam_1 is place to save the free_APIName function in use||||null
xmlGcMemGet_APIParam_2 is place to save the malloc_APIName function in use||||null
xmlGcMemGet_APIParam_3 is place to save the atomic malloc_APIName function in use||||null
xmlGcMemGet_APIParam_4 is place to save the realloc_APIName function in use||||null
xmlGcMemGet_APIName returns 0 on success||||null
xmlGcMemGet_APIParam_5 is place to save the strdup_APIName function in use||||null
xmlGcMemSetup_APIParam_1 is the free_APIName function to use||||null
xmlGcMemSetup_APIParam_2 is the malloc_APIName function to use||||null
Override the default memory access functions with a new set This has to be called before any other libxml routines !||||null
Should this be blocked||||if there was already some allocations done
of areas useful for garbage collected memory allocators ?||||null
xmlGcMemSetup_APIParam_3 is the malloc_APIName function to use for atomic allocations||||null
xmlGcMemSetup_APIParam_4 is the realloc_APIName function to use||||null
xmlGcMemSetup_APIName returns 0 on success||||null
xmlGcMemSetup_APIParam_5 is the strdup_APIName function to use||||null
The xmlGcMemSetup_APIParam_3 is specialized for atomic block allocations -LRB- i.e||||null
Initialize the memory layer||||null
xmlInitMemory_APIName returns 0 on success||||null
a malloc_APIName equivalent , with logging of the allocation info||||null
xmlMallocAtomicLoc_APIParam_2 is the xmlMallocAtomicLoc_APIParam_2 name or NULL||||null
xmlMallocAtomicLoc_APIParam_3 is the xmlMallocAtomicLoc_APIParam_3 number||||null
xmlMallocAtomicLoc_APIParam_1 is an unsigned int specifying the xmlMallocAtomicLoc_APIParam_1 in byte to allocate||||null
Signature for a malloc_APIName implementation||||null
xmlMallocAtomicLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory||||null
xmlMallocFunc_APIParam_1 is the xmlMallocFunc_APIParam_1 requested in bytes||||null
xmlMallocFunc_APIName returns a pointer to the newly allocated block or NULL in case of error||||null
a malloc_APIName equivalent , with logging of the allocation info||||null
xmlMallocLoc_APIParam_2 is the xmlMallocLoc_APIParam_2 name or NULL||||null
xmlMallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory||||null
xmlMallocLoc_APIParam_3 is the xmlMallocLoc_APIParam_3 number||||null
xmlMallocLoc_APIParam_1 is an int specifying the xmlMallocLoc_APIParam_1 in byte to allocate||||null
xmlMemBlocks_APIName returns an int representing the number of blocks||||null
Provides the number of memory areas currently allocated||||null
Provides the memory access functions set currently in use The xmlGcMemGet_APIParam_3 is specialized for atomic block allocations -LRB- i.e||||null
show in-extenso the memory blocks allocated||||null
xmlMemDisplayLast_APIParam_2 is the amount of memory to dump||||null
a free_APIName equivalent , with error checking||||null
xmlMemFree_APIParam_1 is the memory block pointer||||null
the last xmlMemDisplayLast_APIParam_2 of memory allocated and not freed , useful for dumping the memory left allocated between two places at runtime||||null
Provides the memory access functions set currently in use||||null
xmlMemGet_APIParam_1 is place to save the free_APIName function in use||||null
xmlMemGet_APIParam_2 is place to save the malloc_APIName function in use||||null
xmlMemGet_APIParam_3 is place to save the realloc_APIName function in use||||null
xmlMemGet_APIName returns 0 on success||||null
xmlMemGet_APIParam_4 is place to save the strdup_APIName function in use||||null
xmlMemDisplay_APIParam_1 is a FILE descriptor used as the output file||||if NULL , the result is written to the file
a malloc_APIName equivalent , with logging of the allocation info||||null
xmlMemMalloc_APIParam_1 is an int specifying the xmlMemMalloc_APIParam_1 in byte to allocate||||null
xmlMemRealloc_APIParam_1 is the initial memory block pointer||||null
a realloc_APIName equivalent , with logging of the allocation info||||null
xmlMemMalloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory||||null
xmlMemDisplayLast_APIParam_1 is a FILE descriptor used as the output file||||if NULL , the result is written to the file
xmlMemRealloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory||||null
xmlMemRealloc_APIParam_2 is an int specifying the xmlMemRealloc_APIParam_2 in byte to allocate||||null
xmlMemSetup_APIParam_1 is the free_APIName function to use||||null
xmlMemSetup_APIParam_2 is the malloc_APIName function to use||||null
xmlMemSetup_APIParam_3 is the realloc_APIName function to use||||null
xmlMemSetup_APIName returns 0 on success||||null
xmlMemSetup_APIParam_4 is the strdup_APIName function to use||||null
Override the default memory access functions with a new set This has to be called before any other libxml routines !||||null
xmlMemShow_APIParam_1 is a FILE descriptor used as the output file||||null
Should this be blocked ?||||if there was already some allocations done
xmlMemShow_APIParam_2 is number of entries to dump||||null
a strdup_APIName equivalent , with logging of the allocation info||||null
xmlMemStrdupLoc_APIParam_1 is the initial string pointer||||null
xmlMemStrdupLoc_APIParam_2 is the xmlMemStrdupLoc_APIParam_2 name or NULL||||null
show a show display of the memory allocated , and dump the @nr last allocated areas which were not freed||||null
xmlMemStrdupLoc_APIParam_3 is the xmlMemStrdupLoc_APIParam_3 number||||null
xmlMemStrdupLoc_APIName returns a pointer to the new string or NULL if allocation error occurred||||null
Provides the amount of memory currently allocated||||null
xmlMemUsed_APIName returns an int representing the amount of memory allocated||||null
Dump in-extenso the memory blocks allocated to the file||||null
a strdup_APIName equivalent , with logging of the allocation info||||null
xmlMemoryStrdup_APIParam_1 is the initial string pointer||||null
Signature for a realloc_APIName implementation||||null
xmlMemoryStrdup_APIName returns a pointer to the new string or NULL if allocation error occurred||||null
xmlReallocFunc_APIParam_1 is an already allocated block of memory||||null
xmlReallocFunc_APIParam_2 is the new xmlReallocFunc_APIParam_2 requested in bytes||||null
a realloc_APIName equivalent , with logging of the allocation info||||null
xmlReallocFunc_APIName returns a pointer to the newly reallocated block or NULL in case of error||||null
xmlReallocLoc_APIParam_1 is the initial memory block pointer||||null
xmlReallocLoc_APIParam_3 is the xmlReallocLoc_APIParam_3 name or NULL||||null
xmlReallocLoc_APIParam_4 is the xmlReallocLoc_APIParam_4 number||||null
xmlReallocLoc_APIParam_2 is an int specifying the xmlReallocLoc_APIParam_2 in byte to allocate||||null
Signature for an strdup_APIName implementation||||null
xmlReallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory||||null
xmlStrdupFunc_APINamereturns the copy of the string or NULL in case of error||||null
xmlStrdupFunc_APIParam_1 is a zero terminated string||||null
Daniel Veillard||||null
Convenient way to turn bool into text||||null
xmlBoolToText_APIName returns a pointer to either "True" or "False||||null
xmlBoolToText_APIParam_1 is a bool to turn into text||||null
xmlDebugCheckDocument_APIParam_1 is the FILE * for the xmlDebugCheckDocument_APIParam_1||||null
xmlDebugCheckDocument_APIParam_2 is the document||||null
xmlDebugCheckDocument_APIName returns the number of errors found||||null
Check the document for potential content problems , and xmlDebugCheckDocument_APIParam_1 the errors to @output||||null
Dumps debug information for the attribute||||null
xmlDebugDumpAttr_APIParam_1 is the FILE * for the xmlDebugDumpAttr_APIParam_1||||null
xmlDebugDumpAttr_APIParam_2 is the attribute||||null
xmlDebugDumpAttr_APIParam_3 is the indentation level||||null
Dumps debug information for the attribute list||||null
xmlDebugDumpAttrList_APIParam_1 is the FILE * for the xmlDebugDumpAttrList_APIParam_1||||null
xmlDebugDumpAttrList_APIParam_2 is the attribute list||||null
xmlDebugDumpAttrList_APIParam_3 is the indentation level||||null
Dumps debug information for the DTD||||null
xmlDebugDumpDTD_APIParam_1 is the FILE * for the xmlDebugDumpDTD_APIParam_1||||null
xmlDebugDumpDTD_APIParam_2 is the DTD||||null
Dumps debug information for the document , it is recursive||||null
xmlDebugDumpDocument_APIParam_1 is the FILE * for the xmlDebugDumpDocument_APIParam_1||||null
xmlDebugDumpDocument_APIParam_2 is the document||||null
Dumps debug information cncerning the document , not recursive||||null
xmlDebugDumpDocumentHead_APIParam_1 is the FILE * for the xmlDebugDumpDocumentHead_APIParam_1||||null
xmlDebugDumpDocumentHead_APIParam_2 is the document||||null
xmlDebugDumpEntities_APIParam_1 is the FILE * for the xmlDebugDumpEntities_APIParam_1||||null
xmlDebugDumpEntities_APIParam_2 is the document||||null
Dumps debug information for all the entities in use by the document||||null
Dumps debug information for the element xmlDebugDumpNode_APIParam_2 , it is recursive||||null
xmlDebugDumpNode_APIParam_1 is the FILE * for the xmlDebugDumpNode_APIParam_1||||null
xmlDebugDumpNode_APIParam_2 is the xmlDebugDumpNode_APIParam_2||||null
xmlDebugDumpNode_APIParam_3 is the indentation level||||null
Dumps debug information for the list of element xmlDebugDumpNodeList_APIParam_2 , it is recursive||||null
xmlDebugDumpNodeList_APIParam_1 is the FILE * for the xmlDebugDumpNodeList_APIParam_1||||null
xmlDebugDumpNodeList_APIParam_2 is the xmlDebugDumpNodeList_APIParam_2 list||||null
xmlDebugDumpNodeList_APIParam_3 is the indentation level||||null
Dumps debug information for the element xmlDebugDumpOneNode_APIParam_2 , it is not recursive||||null
xmlDebugDumpOneNode_APIParam_1 is the FILE * for the xmlDebugDumpOneNode_APIParam_1||||null
xmlDebugDumpOneNode_APIParam_2 is the xmlDebugDumpOneNode_APIParam_2||||null
xmlDebugDumpOneNode_APIParam_3 is the indentation level||||null
xmlDebugDumpString_APIParam_1 is the FILE * for the xmlDebugDumpString_APIParam_1||||null
xmlDebugDumpString_APIParam_2 is the string||||null
Count the children of @node||||null
xmlLsCountNode_APIParam_1 is the xmlLsCountNode_APIParam_1 to count||||null
xmlLsCountNode_APIName returns the number of children of @node||||null
Dump to @output the type and name of @node||||null
shorten it||||if necessary
Dumps informations about the string||||null
xmlLsOneNode_APIParam_1 is the FILE * for the xmlLsOneNode_APIParam_1||||null
xmlLsOneNode_APIParam_2 is the xmlLsOneNode_APIParam_2 to dump||||null
xmlShell_APIParam_1 is the initial document||||null
xmlShell_APIParam_2 is the xmlShell_APIParam_4 buffer||||null
xmlShell_APIParam_3 is the line reading function||||null
xmlShellBase_APIParam_1 is the shell context||||null
xmlShellBase_APIParam_2 is unused||||null
xmlShellBase_APIParam_3 is a xmlShellBase_APIParam_3||||null
xmlShellBase_APIName returns 0||||null
xmlShellBase_APIParam_4 is unused||||null
Implements the XML shell function `` base '' dumps the current XML base of the xmlShellBase_APIParam_3||||null
Implements the XML shell This allow to load , validate , view , modify and save a document using a environment similar to a UNIX commandline||||null
xmlShell_APIParam_4 is the xmlShell_APIParam_4 FILE * , defaults to stdout||||if NULL
xmlShellCat_APIParam_1 is the shell context||||null
xmlShellCat_APIParam_2 is unused||||null
Implements the XML shell function `` cat '' dumps the serialization xmlShellCat_APIParam_3 content||||null
xmlShellCat_APIParam_3 is a xmlShellCat_APIParam_3||||null
xmlShellCat_APIParam_4 is unused||||null
xmlShellCat_APIName returns 0||||null
xmlShellCmd_APIParam_1 is a shell context||||null
This is a generic signature for the XML shell functions||||null
xmlShellCmd_APIParam_2 is a string argument||||null
xmlShellCmd_APIParam_3 is a first xmlShellCmd_APIParam_3||||null
xmlShellCmd_APIName returns an int, negative returns indicating errors||||null
xmlShellCmd_APIParam_4 is a second xmlShellCmd_APIParam_3||||null
xmlShellDir_APIParam_1 is the shell context||||null
Implements the XML shell function `` dir '' dumps informations about the xmlShellDir_APIParam_3||||null
xmlShellDir_APIParam_2 is unused||||null
xmlShellDir_APIParam_3 is a xmlShellDir_APIParam_3||||null
xmlShellDir_APIName returns 0||||null
xmlShellDir_APIParam_4 is unused||||null
xmlShellDu_APIParam_1 is the shell context||||null
xmlShellDu_APIParam_2 is unused||||null
xmlShellDu_APIParam_3 is a node defining a subtree||||null
xmlShellDu_APIName returns 0 or -1 in case of error||||null
xmlShellDu_APIParam_4 is unused||||null
xmlShellList_APIParam_1 is the shell context||||null
xmlShellList_APIParam_2 is unused||||null
xmlShellList_APIParam_3 is a xmlShellList_APIParam_3||||null
xmlShellList_APIParam_4 is unused||||null
xmlShellList_APIName returns 0||||null
Implements the XML shell function `` ls '' Does an Unix like listing of the given xmlShellList_APIParam_3||||null
xmlShellLoad_APIParam_1 is the shell context||||null
xmlShellLoad_APIParam_2 is the file name||||null
xmlShellLoad_APIParam_3 is unused||||null
xmlShellLoad_APIName returns 0 or -1 if loading failed||||null
xmlShellLoad_APIParam_4 is unused||||null
Implements the XML shell function `` load '' loads a new document specified by the xmlShellLoad_APIParam_2||||null
Print xmlShellPrintNode_APIParam_1 to the output FILE||||null
the command works on the current node||||If @tree is null
Implements the XML shell function `` du '' show the structure of the subtree under node @tree||||null
xmlShellPrintNode_APIParam_1 is a non-null xmlShellPrintNode_APIParam_1 to print to the output FILE||||null
Print the xpath error to libxml default error channel||||null
xmlShellPrintXPathError_APIParam_1 is valid xpath error id||||null
xmlShellPrintXPathError_APIParam_2 is the argument that cause xpath to fail||||null
Prints result to the output FILE||||null
xmlShellPrintXPathResult_APIParam_1 is a valid result generated by an xpath evaluation||||null
The output is compatible with XPath commands||||null
xmlShellPwd_APIParam_1 is the shell context||||null
xmlShellPwd_APIParam_2 is the output xmlShellPwd_APIParam_2||||null
xmlShellPwd_APIParam_3 is a xmlShellPwd_APIParam_3||||null
xmlShellPwd_APIParam_4 is unused||||null
xmlShellPwd_APIName returns 0 or -1 in case of error||||null
xmlShellReadlineFunc_APIParam_1 is a string xmlShellReadlineFunc_APIParam_1||||null
xmlShellReadlineFunc_APIName returns a string which will be freed by the Shell||||null
This is a generic signature for the XML shell input function||||null
xmlShellSave_APIParam_1 is the shell context||||null
xmlShellSave_APIParam_2 is the file name||||null
xmlShellSave_APIParam_3 is unused||||null
xmlShellSave_APIParam_4 is unused||||null
xmlShellSave_APIName returns 0 or -1 in case of error||||null
xmlShellValidate_APIParam_1 is the shell context||||null
xmlShellValidate_APIParam_2 is the DTD URI||||null
Implements the XML shell function `` save '' Write the current document to the xmlShellSave_APIParam_2 , or it is original name||||null
xmlShellValidate_APIParam_3 is unused||||null
xmlShellValidate_APIParam_4 is unused||||null
xmlShellValidate_APIName returns 0 or -1 in case of error||||null
xmlShellWrite_APIParam_1 is the shell context||||null
xmlShellWrite_APIParam_2 is the file name||||null
xmlShellWrite_APIParam_3 is a xmlShellWrite_APIParam_3 in the tree||||null
xmlShellWrite_APIParam_4 is unused||||null
xmlShellWrite_APINamereturns 0 or -1 in case of error||||null
Implements the XML shell function `` pwd '' Show the full path from the root to the xmlShellPwd_APIParam_3||||if needed building thumblers when similar elements exists at a given ancestor level
Daniel Veillard||||null
a strdup for char to xmlChar||||null
xmlCharStrdup_APIName returns a new xmlChar * or NULL||||null
xmlCharStrdup_APIParam_1 is the input char *||||null
a strndup for char to xmlChar||||null
Implements the XML shell function `` write '' Write the current xmlShellWrite_APIParam_3 to the xmlShellWrite_APIParam_2 , it saves the serialization of the subtree under the @node specified||||null
xmlCharStrndup_APIParam_1 is the input char *||||null
xmlCharStrndup_APIName returns a new xmlChar * or NULL||||null
xmlCharStrndup_APIParam_2 is the xmlCharStrndup_APIParam_2 of @cur||||null
the validation is done against the given DTD||||if a DTD path is provided
Implements the XML shell function `` validate '' Validate the document||||null
Checks @utf for being valid UTF-8||||null
@utf is assumed to be null-terminated||||null
xmlCheckUTF8_APIName is not super-strict , as it will allow longer UTF-8 sequences than necessary||||null
xmlCheckUTF8_APIName returns value true if @utf is valid||||null
xmlCheckUTF8_APIParam_1 is Pointer to putative UTF-8 encoded string||||null
Read the first UTF8 character from @utf||||null
xmlGetUTF8Char_APIParam_1 is a sequence of UTF-8 encoded bytes||||null
xmlGetUTF8Char_APIParam_2 is a pointer to the minimum number of bytes present in the sequence||||null
This is used to assure the next character is completely contained within the sequence||||null
Also note , this routine checks for the 4-byte maximum size , but does not check for 0x10ffff maximum value||||null
producing these sequences||||if provoked
Note that Java is capable of||||null
xmlStrEqual_APIParam_1 is the first xmlChar *||||null
Should be a bit more readable and faster than xmlStrcmp_APIName||||null
xmlStrEqual_APIName returns 1 if they are equal, 0 if they are different||||null
xmlStrEqual_APIParam_2 is the second xmlChar *||||null
Formats @msg xmlStrPrintf_APIParam_4 places result into @buf||||null
xmlGetUTF8Char_APIName returns the char value or -1 in case of error, and sets *len to the actual number of bytes consumed (0 in case of error||||null
xmlStrPrintf_APIParam_1 is xmlStrPrintf_APIParam_4 result buffer||||null
Check have same content||||if both strings are equal of
xmlStrPrintf_APIParam_2 is xmlStrPrintf_APIParam_4 result buffer length||||null
xmlStrPrintf_APIParam_3 is xmlStrPrintf_APIParam_4 message with printf formatting||||null
xmlStrPrintf_APIParam_4 extra parameters xmlStrPrintf_APIParam_4 the message||||null
xmlStrPrintf_APIName returns xmlStrPrintf_APIParam_4 number of characters written to @buf or -1 if an error occurs||||null
xmlStrQEqual_APIParam_1 is the prefix of the QName||||null
xmlStrQEqual_APIParam_2 is the localname of the QName||||null
xmlStrQEqual_APIParam_3 is the second xmlChar *||||null
xmlStrQEqual_APIName returns 1 if they are equal, 0 if they are different||||null
Formats @msg and places result into @buf||||null
Check||||if a QName is Equal to a given string
xmlStrVPrintf_APIParam_1 is the result buffer||||null
xmlStrVPrintf_APIParam_2 is the result buffer length||||null
xmlStrVPrintf_APIParam_3 is the message with printf formatting||||null
xmlStrVPrintf_APIParam_4 is extra parameters for the message||||null
a strcasecmp for xmlChar||||null
xmlStrVPrintf_APIName returns the number of characters written to @buf or -1 if an error occurs||||null
xmlStrcasecmp_APIParam_1 is the first xmlChar *||||null
xmlStrcasecmp_APIName returns the integer result of the comparison||||null
xmlStrcasecmp_APIParam_2 is the second xmlChar *||||null
a case-ignoring strstr for xmlChar||||null
xmlStrcasestr_APIParam_1 is the xmlChar * array||||null
xmlStrcasestr_APIParam_2 is the xmlChar to search||||null
xmlStrcasestr_APIName returns the xmlChar * for the first occurrence or NULL||||null
a strcat for array of xmlChar||||null
xmlStrcat_APIParam_1 is the original xmlChar * array||||null
xmlStrcat_APIName returns a new xmlChar * containing the concatenated string||||null
xmlStrcat_APIParam_2 is the xmlChar * array added||||null
a strchr for xmlChar||||null
The original @cur is reallocated and should not be freed||||null
xmlStrchr_APIParam_1 is the xmlChar * array||||null
xmlStrchr_APIName returns the xmlChar * for the first occurrence or NULL||||null
xmlStrchr_APIParam_2 is the xmlChar to search||||null
a strcmp for xmlChar||||null
xmlStrcmp_APIParam_1 is the first xmlChar *||||null
xmlStrcmp_APIName returns the integer result of the comparison||||null
xmlStrcmp_APIParam_2 is the second xmlChar *||||null
a strdup for array of xmlChar||||null
xmlStrdup_APIName returns a new xmlChar * or NULL||||null
we assume a termination mark of ' 0 '||||null
xmlStrdup_APIParam_1 is the input xmlChar *||||null
length of a xmlChar string||||null
xmlStrlen_APIParam_1 is the xmlChar * array||||null
a strncasecmp for xmlChar||||null
xmlStrlen_APIName returns the number of xmlChar contained in the ARRAY||||null
xmlStrncasecmp_APIParam_1 is the first xmlChar *||||null
xmlStrncasecmp_APIParam_2 is the second xmlChar *||||null
xmlStrncasecmp_APIName returns the integer result of the comparison||||null
xmlStrncasecmp_APIParam_3 is the max comparison length||||null
xmlStrncat_APIParam_1 is the original xmlChar * array||||null
xmlStrncat_APIParam_2 is the xmlChar * array added||||null
we assume a termination mark of ' 0 '||||null
Note that if @len < 0 this is an API error and NULL will be returned||||null
xmlStrncat_APIParam_3 is the length of @add||||null
same as xmlStrncat , but creates a new string||||null
a strncat for array of xmlChar , it will extend @cur with the xmlStrncat_APIParam_3 first bytes of @add||||null
xmlStrncat_APIName returns a new xmlChar *, the original @cur is reallocated and should not be freed||||null
The original two strings are not freed||||null
xmlStrncatNew_APIParam_1 is first xmlChar string||||null
xmlStrncatNew_APIParam_2 is second xmlChar string||||null
a strncmp for xmlChar||||null
xmlStrncatNew_APIParam_3 is the xmlStrncatNew_APIParam_3 of @str2 or < 0. xmlStrncatNew_APIName returns a new xmlChar * or NULL||||null
xmlStrncmp_APIParam_1 is the first xmlChar *||||null
the length will be calculated automatically||||If @len is < 0
xmlStrncmp_APIParam_2 is the second xmlChar *||||null
xmlStrncmp_APIName returns the integer result of the comparison||||null
xmlStrncmp_APIParam_3 is the max comparison length||||null
a strndup for array of xmlChar||||null
xmlStrndup_APIParam_1 is the input xmlChar *||||null
xmlStrndup_APIParam_2 is the xmlStrndup_APIParam_2 of @cur||||null
xmlStrndup_APIName returns a new xmlChar * or NULL||||null
a strstr for xmlChar||||null
xmlStrstr_APIParam_1 is the xmlChar * array||||null
xmlStrstr_APIParam_2 is the xmlChar to search||||null
xmlStrstr_APIName returns the xmlChar * for the first occurrence or NULL||||null
Extract a substring of a given string||||null
xmlStrsub_APIParam_1 is the xmlChar * array||||null
xmlStrsub_APIParam_2 is the index of the first char||||null
xmlStrsub_APIName returns the xmlChar * for the first occurrence or NULL||||null
xmlStrsub_APIParam_3 is the length of the substring||||null
compares the two UCS4 values||||null
xmlUTF8Charcmp_APIParam_1 is pointer to first UTF8 char||||null
xmlUTF8Charcmp_APIName returns result of the compare as with xmlStrncmp||||null
xmlUTF8Charcmp_APIParam_2 is pointer to second UTF8 char||||null
calculates the internal size of a UTF8 character||||null
xmlUTF8Size_APIName returns the numbers of bytes in the character, -1 on format error||||null
xmlUTF8Size_APIParam_1 is pointer to the UTF8 character||||null
xmlUTF8Strlen_APIParam_1 is a sequence of UTF-8 encoded bytes||||null
xmlUTF8Strlen_APIName returns the number of characters in the string or -1 in case of error||||null
a function to provide the relative location of a UTF8 char||||null
xmlUTF8Strloc_APIParam_1 is the input UTF8 *||||null
xmlUTF8Strloc_APIParam_2 is the UTF8 character to be found||||null
a strndup for array of UTF8||||null
compute the length of an UTF8 string , it does not do a full UTF8 checking of the content of the string||||null
xmlUTF8Strloc_APIName returns the relative character position of the desired char or -1 if not found||||null
xmlUTF8Strndup_APIParam_1 is the input UTF8 *||||null
xmlUTF8Strndup_APIName returns a new UTF8 * or NULL||||null
xmlUTF8Strndup_APIParam_2 is the xmlUTF8Strndup_APIParam_2 of @utf||||null
xmlUTF8Strpos_APIParam_1 is the input UTF8 *||||null
xmlUTF8Strpos_APIName returns a pointer to the UTF8 character or NULL||||null
a function to provide the equivalent of fetching a character from a string array||||null
xmlUTF8Strpos_APIParam_2 is the position of the desired UTF8 char||||null
xmlUTF8Strsize_APIParam_1 is a sequence of UTF-8 encoded bytes||||null
xmlUTF8Strsize_APIParam_2 is the number of characters in the array||||null
xmlUTF8Strsize_APIName returns the storage size of the first willen' characters of ARRAY||||null
xmlUTF8Strsub_APIParam_1 is a sequence of UTF-8 encoded bytes||||null
xmlUTF8Strsub_APIParam_2 is relative pos of first char||||null
Create a substring from a given UTF-8 string Note||||null
xmlUTF8Strsub_APIParam_3 is total number to copy||||null
positions are given in units of UTF-8 chars||||null
Daniel Veillard||||null
xmlUTF8Strsub_APINamereturns a pointer to a newly created string or NULL if any problem||||null
An attribute definition has been parsed||||null
storage size of an UTF8 string the behaviour is not guaranteed||||if the input string is not UTF-8
attributeDeclSAXFunc_APIParam_1 is the user data||||null
attributeDeclSAXFunc_APIParam_2 is the name of the element||||null
attributeDeclSAXFunc_APIParam_3 is the attribute name||||null
attributeDeclSAXFunc_APIParam_4 is the attribute attributeDeclSAXFunc_APIParam_4||||null
attributeDeclSAXFunc_APIParam_5 is the attributeDeclSAXFunc_APIParam_4 of default value||||null
attributeDeclSAXFunc_APIParam_6 is the attribute default value||||null
attributeDeclSAXFunc_APIParam_7 is the attributeDeclSAXFunc_APIParam_7 of enumerated value set||||null
Handle an attribute that has been read by the parser||||null
attributeSAXFunc_APIParam_1 is the user data||||null
attributeSAXFunc_APIParam_2 is The attribute attributeSAXFunc_APIParam_2 , including namespace prefix||||null
attributeSAXFunc_APIParam_3 is The attribute value||||null
cdataBlockSAXFunc_APIParam_1 is the user data||||null
cdataBlockSAXFunc_APIParam_2 is The pcdata content||||null
cdataBlockSAXFunc_APIParam_3 is the block length||||null
Receiving some chars from the parser||||null
The default handling is to convert the attribute into an DOM subtree and past it in a new xmlAttr element added to the element||||null
Called||||when a pcdata block has been parsed
charactersSAXFunc_APIParam_1 is the user data||||null
charactersSAXFunc_APIParam_2 is a xmlChar string||||null
charactersSAXFunc_APIParam_3 is the number of xmlChar||||null
A comment has been parsed||||null
commentSAXFunc_APIParam_1 is the user data||||null
commentSAXFunc_APIParam_2 is the comment content||||null
An element definition has been parsed||||null
elementDeclSAXFunc_APIParam_1 is the user data||||null
elementDeclSAXFunc_APIParam_2 is the element elementDeclSAXFunc_APIParam_2||||null
elementDeclSAXFunc_APIParam_3 is the element elementDeclSAXFunc_APIParam_3||||null
elementDeclSAXFunc_APIParam_4 is the element value tree||||null
endDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context||||null
It provides the namespace informations for the element||||null
endElementNsSAX2Func_APIParam_1 is the user data||||null
endElementNsSAX2Func_APIParam_2 is the local name of the element||||null
Called||||when the document end has been detected
endElementSAXFunc_APIParam_1 is the user data||||null
endElementSAXFunc_APIParam_2 is The element name||||null
An entity definition has been parsed||||null
SAX2 callback||||when an element end has been detected by the parser
entityDeclSAXFunc_APIParam_1 is the user data||||null
entityDeclSAXFunc_APIParam_2 is the entity entityDeclSAXFunc_APIParam_2||||null
endElementNsSAX2Func_APIParam_4 is the element namespace name||||if available
entityDeclSAXFunc_APIParam_3 is the entity entityDeclSAXFunc_APIParam_3||||null
endElementNsSAX2Func_APIParam_3 is the element namespace endElementNsSAX2Func_APIParam_3||||if available
entityDeclSAXFunc_APIParam_4 is The public ID of the entity||||null
entityDeclSAXFunc_APIParam_5 is The system ID of the entity||||null
Called||||when the end of an element has been detected
entityDeclSAXFunc_APIParam_6 is the entity value -LRB- without processing||||null
Display errorSAXFunc_APIParam_3 format an error messages , callback||||null
errorSAXFunc_APIParam_1 is an errorSAXFunc_APIParam_3 parser context||||null
errorSAXFunc_APIParam_2 is errorSAXFunc_APIParam_3 message to display/transmit errorSAXFunc_APIParam_3 extra parameters errorSAXFunc_APIParam_3 the message display||||null
Callback on external subset declaration||||null
externalSubsetSAXFunc_APIParam_1 is the user data||||null
externalSubsetSAXFunc_APIParam_2 is the root element externalSubsetSAXFunc_APIParam_2||||null
externalSubsetSAXFunc_APIParam_3 is the external ID||||null
filename or URL||||null
Display fatalErrorSAXFunc_APIParam_3 format fatal error messages , callback||||null
fatalErrorSAXFunc_APIParam_1 is an fatalErrorSAXFunc_APIParam_3 parser context||||null
externalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g||||null
Get an entity by getEntitySAXFunc_APIParam_2||||null
fatalErrorSAXFunc_APIParam_2 is fatalErrorSAXFunc_APIParam_3 message to display/transmit fatalErrorSAXFunc_APIParam_3 extra parameters fatalErrorSAXFunc_APIParam_3 the message display||||null
so fatalErrorSAXFunc_APIParam_3 fatalError_APIName fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 not used , error_APIName fatalErrorSAXFunc_APIParam_3 all fatalErrorSAXFunc_APIParam_3 callbacks fatalErrorSAXFunc_APIParam_3 errors||||null
getEntitySAXFunc_APIParam_1 is the user data||||null
getEntitySAXFunc_APIName returns the xmlEntityPtr if found||||null
getEntitySAXFunc_APIParam_2 is The entity getEntitySAXFunc_APIParam_2||||null
Get a parameter entity by getParameterEntitySAXFunc_APIParam_2||||null
getParameterEntitySAXFunc_APIParam_1 is the user data||||null
getParameterEntitySAXFunc_APIParam_2 is The entity getParameterEntitySAXFunc_APIParam_2||||null
getParameterEntitySAXFunc_APIName returns the xmlEntityPtr if found||||null
Does this document has an external subset ?||||null
hasExternalSubsetSAXFunc_APIName returns 1 if true||||null
hasExternalSubsetSAXFunc_APIParam_1 is the user data||||null
Does this document has an internal subset||||null
hasInternalSubsetSAXFunc_APIName returns 1 if true||||null
hasInternalSubsetSAXFunc_APIParam_1 is the user data||||null
Receiving some ignorable whitespaces from the parser||||null
ignorableWhitespaceSAXFunc_APIParam_1 is the user data||||null
by default the DOM building will use characters||||null
ignorableWhitespaceSAXFunc_APIParam_2 is a xmlChar string||||null
ignorableWhitespaceSAXFunc_APIParam_3 is the number of xmlChar||||null
Callback on internal subset declaration||||null
internalSubsetSAXFunc_APIParam_1 is the user data||||null
internalSubsetSAXFunc_APIParam_2 is the root element internalSubsetSAXFunc_APIParam_2||||null
internalSubsetSAXFunc_APIParam_3 is the external ID||||null
filename or URL||||null
Is this document tagged standalone ?||||null
isStandaloneSAXFunc_APIParam_1 is the user data||||null
isStandaloneSAXFunc_APIName returns 1 if true||||null
internalSubsetSAXFunc_APIParam_4 is the SYSTEM ID -LRB- e.g||||null
notationDeclSAXFunc_APIParam_1 is the user data||||null
notationDeclSAXFunc_APIParam_2 is The notationDeclSAXFunc_APIParam_2 of the notation||||null
notationDeclSAXFunc_APIParam_3 is The public ID of the entity||||null
notationDeclSAXFunc_APIParam_4 is The system ID of the entity||||null
A processing instruction has been parsed||||null
processingInstructionSAXFunc_APIParam_1 is the user processingInstructionSAXFunc_APIParam_3||||null
processingInstructionSAXFunc_APIParam_2 is the processingInstructionSAXFunc_APIParam_2 name||||null
processingInstructionSAXFunc_APIParam_3 is the PI data||||null
What to do||||when a notation declaration has been parsed
||||null
referenceSAXFunc_APIParam_1 is the user data||||null
referenceSAXFunc_APIParam_2 is The entity name||||null
resolveEntitySAXFunc_APIParam_1 is the user data||||null
resolveEntitySAXFunc_APIParam_2 is The public ID of the entity||||null
resolveEntitySAXFunc_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour||||null
resolveEntitySAXFunc_APIParam_3 is The system ID of the entity||||null
Receive the document locator at startup , actually xmlDefaultSAXLocator||||null
setDocumentLocatorSAXFunc_APIParam_1 is the user data||||null
Called||||when an entity reference is detected
setDocumentLocatorSAXFunc_APIParam_2 is A SAX Locator||||null
Everything is available on the context , so this is useless in our case||||null
startDocumentSAXFunc_APIParam_1 is the user data -LRB- XML parser context||||null
startElementNsSAX2Func_APIParam_1 is the user data||||null
startElementNsSAX2Func_APIParam_2 is the local name of the element||||null
Called||||when the document start being processed
startElementNsSAX2Func_APIParam_5 is number of namespace definitions on that node||||null
startElementNsSAX2Func_APIParam_6 is pointer to the array of prefix/URI pairs namespace definitions||||null
startElementNsSAX2Func_APIParam_7 is the number of startElementNsSAX2Func_APIParam_9 on that node||||null
startElementNsSAX2Func_APIParam_8 is the number of defaulted startElementNsSAX2Func_APIParam_9||||null
It provides the namespace informations for the element , as well as the new namespace declarations on the element||||null
SAX2 callback||||when an element start has been detected by the parser
startElementNsSAX2Func_APIParam_4 is the element namespace name||||if available
The defaulted ones are at the end of the array||||null
The entity loader , to control the loading of external entities , the application can either||||null
startElementNsSAX2Func_APIParam_9 is pointer to the array of attribute values||||null
startElementNsSAX2Func_APIParam_3 is the element namespace startElementNsSAX2Func_APIParam_3||||if available
startElementSAXFunc_APIParam_1 is the user data||||null
startElementSAXFunc_APIParam_2 is The element startElementSAXFunc_APIParam_2 , including namespace prefix||||null
startElementSAXFunc_APIParam_3 is An array of name/value attributes pairs , NULL terminated||||null
unparsedEntityDeclSAXFunc_APIParam_1 is the user data||||null
- override this resolveEntity_APIName callback in the SAX block - or better use the xmlSetExternalEntityLoader_APIName function to set up it is own entity resolution routine||||null
unparsedEntityDeclSAXFunc_APIParam_2 is The unparsedEntityDeclSAXFunc_APIParam_2 of the entity||||null
unparsedEntityDeclSAXFunc_APIParam_3 is The public ID of the entity||||null
unparsedEntityDeclSAXFunc_APIParam_4 is The system ID of the entity||||null
unparsedEntityDeclSAXFunc_APIParam_5 is the unparsedEntityDeclSAXFunc_APIParam_2 of the notation||||null
Called||||when an opening tag has been processed
Display warningSAXFunc_APIParam_3 format a warning messages , callback||||null
warningSAXFunc_APIParam_1 is an warningSAXFunc_APIParam_3 parser context||||null
What to do||||when an unparsed entity declaration is parsed
||||null
warningSAXFunc_APIParam_2 is warningSAXFunc_APIParam_3 message to display/transmit warningSAXFunc_APIParam_3 extra parameters warningSAXFunc_APIParam_3 the message display||||null
xmlByteConsumed_APIParam_1 is an XML parser context||||null
xmlCleanupParser_APIName name is somewhat misleading||||null
xmlByteConsumed_APIName provides the current index of the parser relative to the start of the current entity||||null
It is a cleanup function for the XML library||||null
It does not deallocate any document related memory||||null
xmlByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed||||null
It does not clean up parser state , it cleans up memory allocated by the library itself||||null
It tries to reclaim all related global memory allocated for the library processing||||null
See also xmlInitParser_APIName which has the opposite function of preparing the library for operations||||null
-- Clear node info sequence||||null
xmlClearNodeInfoSeq_APIParam_1 is a node info sequence pointer||||null
The function is of constant cost||||if the input is UTF-8 but can be costly if run on non-UTF-8 input
In case of doubt abstain from calling xmlCleanupParser_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind||||null
Clear and reinitialize a parser context||||null
xmlByteConsumed_APIName is computed in bytes from the beginning starting at zero and finishing at the size in byte of the file||||if parsing a file
xmlClearParserCtxt_APIParam_1 is an XML parser context||||null
Creates a parser context for an XML in-memory document||||null
xmlCreateDocParserCtxt_APIName returns the new parser context or NULL||||null
xmlCreateDocParserCtxt_APIParam_1 is a pointer to an array of xmlChar||||null
One should call xmlCleanupParser_APIName_APIName only||||when the process has finished using the library and all XML/HTML documents built with it
xmlCreateIOParserCtxt_APIParam_1 is a SAX handler||||null
xmlCreateIOParserCtxt_APIParam_2 is The user data returned on SAX callbacks||||null
Create a parser context for using the XML parser with an existing I/O stream||||null
xmlCreateIOParserCtxt_APIParam_3 is an I/O read function||||null
xmlCreateIOParserCtxt_APIParam_4 is an I/O close function||||null
xmlCreateIOParserCtxt_APIParam_5 is an I/O handler||||null
it is sometimes very hard to guess||||if libxml2 is in use in the application
some libraries or plugins may use it without notice||||null
xmlCreateIOParserCtxt_APIName returns the new parser context or NULL||||null
may crash the application if another thread or a plugin is still using libxml2||||if your application is multithreaded or has plugin support calling this
Create a parser context for using the XML parser in push mode||||null
xmlCreatePushParserCtxt_APIParam_1 is a SAX handler||||null
xmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks||||null
xmlCreateIOParserCtxt_APIParam_6 is the charset encoding||||if known
xmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars||||null
The remaining characters will be parsed so The remaining characters do not need to be fed in again through xmlParseChunk||||null
xmlCreatePushParserCtxt_APIParam_4 is number of chars in the array||||null
xmlCreatePushParserCtxt_APIName returns the new parser context or NULL||||null
xmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI||||null
parse an XML in-memory document and build a tree||||null
the data is used to detect the encoding||||If @buffer and @size are non-NULL
This reuses the existing @ctxt parser context||||null
xmlCtxtReadDoc_APIParam_1 is an XML parser context||||null
xmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string||||null
xmlCtxtReadDoc_APIParam_3 is the base xmlCtxtReadDoc_APIParam_3 to use for the document||||null
To allow content encoding detection , @size should be > = 4 The value of @filename is used for fetching external entities and error/warning reports||||null
xmlCtxtReadDoc_APIParam_4 is the document xmlCtxtReadDoc_APIParam_4 , or NULL||||null
xmlCtxtReadDoc_APIName returns the resulting document tree||||null
xmlCtxtReadDoc_APIParam_5 is a combination of xmlParserOption||||null
xmlCtxtReadFd_APIParam_1 is an XML parser context||||null
parse an XML from a file descriptor and build a tree||||null
xmlCtxtReadFd_APIParam_2 is an open file descriptor||||null
xmlCtxtReadFd_APIParam_3 is the base xmlCtxtReadFd_APIParam_3 to use for the document||||null
xmlCtxtReadFd_APIParam_4 is the document xmlCtxtReadFd_APIParam_4 , or NULL||||null
xmlCtxtReadFd_APIParam_5 is a combination of xmlParserOption||||null
xmlCtxtReadFd_APIName returns the resulting document tree||||null
parse an XML file from the filesystem or the network||||null
This reuses the existing @ctxt parser context||||null
xmlCtxtReadFile_APIParam_1 is an XML parser context||||null
xmlCtxtReadFile_APIParam_2 is a file or URL||||null
xmlCtxtReadFile_APIParam_3 is the document xmlCtxtReadFile_APIParam_3 , or NULL||||null
xmlCtxtReadFile_APIParam_4 is a combination of xmlParserOption||||null
xmlCtxtReadFile_APIName returns the resulting document tree||||null
This reuses the existing @ctxt parser context||||null
the file descriptor will not be closed or reset||||when the reader is closed
This reuses the existing @ctxt parser context NOTE that||||null
xmlCtxtReadIO_APIParam_1 is an XML parser context||||null
parse an XML document from I/O functions and source and build a tree||||null
xmlCtxtReadIO_APIParam_2 is an I/O read function||||null
xmlCtxtReadIO_APIParam_3 is an I/O close function||||null
xmlCtxtReadIO_APIParam_4 is an I/O handler||||null
xmlCtxtReadIO_APIParam_5 is the base xmlCtxtReadIO_APIParam_5 to use for the document||||null
xmlCtxtReadIO_APIParam_6 is the document xmlCtxtReadIO_APIParam_6 , or NULL||||null
xmlCtxtReadIO_APIName returns the resulting document tree||||null
xmlCtxtReadIO_APIParam_7 is a combination of xmlParserOption||||null
parse an XML in-memory document and build a tree||||null
This reuses the existing @ctxt parser context||||null
xmlCtxtReadMemory_APIParam_1 is an XML parser context||||null
xmlCtxtReadMemory_APIParam_2 is a pointer to a char array||||null
xmlCtxtReadMemory_APIParam_3 is the xmlCtxtReadMemory_APIParam_3 of the array||||null
xmlCtxtReadMemory_APIParam_5 is the document xmlCtxtReadMemory_APIParam_5 , or NULL||||null
xmlCtxtReadMemory_APIParam_4 is the base xmlCtxtReadMemory_APIParam_4 to use for the document||||null
xmlCtxtReadMemory_APIName returns the resulting document tree||||null
xmlCtxtReadMemory_APIParam_6 is a combination of xmlParserOption||||null
Reset a parser context||||null
xmlCtxtReset_APIParam_1 is an XML parser context||||null
Reset a push parser context||||null
xmlCtxtResetPush_APIParam_1 is an XML parser context||||null
xmlCtxtResetPush_APIParam_2 is a pointer to an array of chars||||null
xmlCtxtResetPush_APIParam_3 is number of chars in the array||||null
xmlCtxtResetPush_APIParam_4 is an optional file name or URI||||null
xmlCtxtResetPush_APIParam_5 is the document xmlCtxtResetPush_APIParam_5 , or NULL||||null
xmlCtxtResetPush_APIName returns 0 in case of success and 1 in case of error||||null
Applies the xmlCtxtUseOptions_APIParam_2 to the parser context||||null
xmlCtxtUseOptions_APIParam_1 is an XML parser context||||null
xmlCtxtUseOptions_APIParam_2 is a combination of xmlParserOption||||null
External entity loaders types||||null
xmlExternalEntityLoader_APIParam_1 is The System xmlExternalEntityLoader_APIParam_2 of the resource requested||||null
xmlExternalEntityLoader_APIParam_2 is The Public xmlExternalEntityLoader_APIParam_2 of the resource requested||||null
xmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented xmlCtxtUseOptions_APIParam_2 in case of error||||null
xmlExternalEntityLoader_APIParam_3 is the XML parser xmlExternalEntityLoader_APIParam_3||||null
xmlExternalEntityLoader_APIName returns the entity input parser||||null
Free all the memory used by a parser context||||null
xmlFreeParserCtxt_APIParam_1 is an XML parser context||||null
xmlGetExternalEntityLoader_APIName returns the xmlExternalEntityLoader function pointer||||null
However the parsed document in ctxt - > myDoc is not freed||||null
xmlGetFeature_APIParam_1 is an XML/HTML parser context||||null
Get the default external entity resolver function for the application||||null
Read the current value of one feature of this parser instance||||null
xmlGetFeature_APIParam_2 is the feature xmlGetFeature_APIParam_2||||null
xmlGetFeature_APIParam_3 is location to store the xmlGetFeature_APIParam_3||||null
Copy at most * @len feature names into the @result array||||null
xmlGetFeaturesList_APIParam_1 is the length of the features name array||||null
xmlGetFeaturesList_APIParam_2 is an array of string to be filled with the features name||||null
xmlGetFeaturesList_APIName returns -1 in case or error, or the total number of features, xmlGetFeaturesList_APIParam_1 is updated with the number of strings copied, strings must not be deallocated||||null
xmlHasFeature_APIParam_1 is the xmlHasFeature_APIParam_1 to be examined||||null
Load and parse a DTD||||null
xmlIOParseDTD_APIParam_1 is the SAX handler block or NULL||||null
xmlIOParseDTD_APIParam_2 is an Input Buffer||||null
xmlIOParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error||||null
Examines||||if the library has been compiled with a given xmlHasFeature_APIParam_1
@input will be freed by the function in any case||||null
-- Initialize node info sequence||||null
xmlInitNodeInfoSeq_APIParam_1 is a node info sequence pointer||||null
Initialization function for the XML parser||||null
This is not reentrant||||null
Initialize a parser context||||null
xmlIOParseDTD_APIParam_3 is the charset encoding||||if known
Set and return the previous value for default blanks text nodes support||||null
Call once before processing in case of use in multithreaded programs||||null
xmlInitParserCtxt_APIParam_1 is an XML parser context||||null
xmlInitParserCtxt_APIName returns 0 in case of success and -1 in case of error||||null
xmlKeepBlanksDefault_APIParam_1 is int 0 or 1. xmlKeepBlanksDefault_APIName returns the last value for 0 for no substitution, 1 for substitution||||null
The 1.x version of the parser used an heuristic to try to detect ignorable white spaces||||null
Upgrade of 1.X code should be done by using xmlIsBlankNode_APIName commodity function to detect the `` empty '' nodes generated||||null
Set and return the previous value for enabling line numbers in elements contents||||null
This may break on old application and is turned off by default||||null
xmlLineNumbersDefault_APIParam_1 is int 0 or 1. xmlLineNumbersDefault_APIName returns the last value for 0 for no substitution, 1 for substitution||||null
xmlLoadExternalEntity_APIParam_1 is the xmlLoadExternalEntity_APIParam_1 for the entity to load||||null
xmlLoadExternalEntity_APIName returns the xmlParserInputPtr or NULL||||null
xmlLoadExternalEntity_APIParam_2 is the Public xmlLoadExternalEntity_APIParam_2 for the entity to load||||null
This value also affect autogeneration of indentation||||when saving code if blanks sections are kept , indentation is not generated
Load an external entity , note that the use of xmlLoadExternalEntity_APIName for unparsed entities may generate problems||||null
xmlLoadExternalEntity_APIParam_3 is the context in which the entity is called or NULL||||null
were not generated||||when using the DOM output text nodes containing those blanks
As a result the SAX callback was generating xmlSAX2IgnorableWhitespace_APIName callbacks instead of characters_APIName one , and||||null
xmlNewIOInputStream_APIParam_1 is an XML parser context||||null
xmlNewIOInputStream_APIParam_2 is an I/O Input||||null
Create a new xmlNewIOInputStream_APIParam_2 stream structure encapsulating the @input into a stream suitable for the parser||||null
xmlNewIOInputStream_APIParam_3 is the charset encoding||||if known
xmlKeepBlanksDefault_APIName is provided as a way to force the standard behavior on 1.X libs and to switch back to the old mode for compatibility||||when running 1.X client code on 2.X
ignorableWhitespace_APIName are only generated and||||when running the parser in validating mode
The 2.x and later version will switch to the XML standard way and||||null
xmlNewIOInputStream_APIName returns the new xmlNewIOInputStream_APIParam_2 stream or NULL||||null
xmlNewParserCtxt_APIName returns the xmlParserCtxtPtr or NULL||||null
Allocate and initialize a new parser context||||null
xmlParseBalancedChunkMemory_APIParam_1 is the document the chunk pertains to||||null
xmlParseBalancedChunkMemory_APIParam_3 is The user data returned on SAX callbacks||||null
xmlParseBalancedChunkMemory_APIParam_2 is the SAX handler bloc||||null
xmlParseBalancedChunkMemory_APIParam_6 is the return value for the set of parsed nodes||||null
xmlParseBalancedChunkMemory_APIParam_4 is Used for loop detection , use 0||||null
xmlParseBalancedChunkMemoryRecover_APIParam_1 is the document the chunk pertains to||||null
xmlParseBalancedChunkMemoryRecover_APIParam_3 is The user data returned on SAX callbacks||||null
xmlParseBalancedChunkMemoryRecover_APIParam_2 is the SAX handler bloc||||null
xmlParseBalancedChunkMemoryRecover_APIParam_6 is the return value for the set of parsed nodes||||null
xmlParseBalancedChunkMemoryRecover_APIParam_7 is return nodes||||null
xmlParseBalancedChunkMemoryRecover_APIParam_4 is Used for loop detection , use 0||||null
Parse a Chunk of memory||||null
xmlParseChunk_APIParam_1 is an XML parser context||||null
xmlParseChunk_APIParam_2 is an char array||||null
xmlParseChunk_APIParam_3 is the xmlParseChunk_APIParam_3 in byte of the xmlParseChunk_APIParam_2||||null
xmlParseChunk_APIParam_4 is last xmlParseChunk_APIParam_2 indicator||||null
= TextDecl ?||||null
xmlParseCtxtExternalEntity_APIParam_1 is the existing parsing context||||null
xmlParseCtxtExternalEntity_APIParam_2 is the xmlParseCtxtExternalEntity_APIParam_2 for the entity to load||||null
xmlParseCtxtExternalEntity_APIParam_4 is the return value for the set of parsed nodes||||null
Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar||||null
= *||||null
xmlParseCtxtExternalEntity_APIParam_3 is the System xmlParseCtxtExternalEntity_APIParam_3 for the entity to load||||null
Load and parse an external subset||||null
xmlParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error||||null
xmlParseDTD_APIParam_1 is a NAME * containing the External ID of the DTD||||null
Parse a well-balanced chunk of an XML document called by the parser The allowed sequence for the Well Balanced Chunk is the one defined by the content production in the XML grammar||||null
xmlParseDTD_APIParam_2 is a NAME * containing the URL to the DTD||||null
= *||||null
parse an XML in-memory document and build a tree||||null
xmlParseDoc_APIName returns the resulting document tree||||null
xmlParseDoc_APIParam_1 is a pointer to an array of xmlChar||||null
parse an XML document||||null
Misc * ?||||null
xmlParseDocument_APIParam_1 is an XML parser context||||null
xmlParseDocument_APIName returns 0, -1 in case of error||||null
the parser context is augmented as a result of the parsing||||null
An external general parsed entity is well-formed||||if it matches the production labeled extParsedEnt
Parse an external general entity within an existing parsing context||||null
parse an XML external entity out of context and build a tree||||null
content This correspond to a `` Well Balanced '' chunk||||null
= TextDecl ?||||null
xmlParseEntity_APIName returns the resulting document tree||||null
xmlParseEntity_APIParam_1 is the xmlParseEntity_APIParam_1||||null
= TextDecl ?||||null
xmlParseExtParsedEnt_APIParam_1 is an XML parser context||||null
xmlParseExtParsedEnt_APIName returns 0, -1 in case of error||||null
= prolog element Misc * prolog||||null
= XMLDecl ?||||null
the parser context is augmented as a result of the parsing||||null
= TextDecl ?||||null
xmlParseBalancedChunkMemoryRecover_APIName returns 0 if the chunk is well balanced , -1 in case of args problem and the parser error code otherwise In case xmlParseBalancedChunkMemoryRecover_APIParam_7 is set to 1 , the nodelist will not be empty  , assuming the parsing succeeded to some extent||||null
xmlParseExternalEntity_APIParam_1 is the document the chunk pertains to||||null
xmlParseExternalEntity_APIParam_2 is the SAX handler bloc||||null
An external general parsed entity is well-formed||||if it matches the production labeled extParsedEnt
parse a general parsed entity||||null
xmlParseExternalEntity_APIParam_3 is The user data returned on SAX callbacks||||null
xmlParseExternalEntity_APIParam_7 is the return value for the set of parsed nodes||||null
xmlParseExternalEntity_APIParam_4 is Used for loop detection , use 0||||null
xmlParseExternalEntity_APIParam_6 is the System xmlParseExternalEntity_APIParam_6 for the entity to load||||null
parse an XML file and build a tree||||null
xmlParseFile_APIParam_1 is the xmlParseFile_APIParam_1||||null
xmlParseInNodeContext_APIParam_1 is the context xmlParseInNodeContext_APIParam_1||||null
xmlParseInNodeContext_APIParam_2 is the input string||||null
An external general parsed entity is well-formed||||if it matches the production labeled extParsedEnt
Parse an external general entity||||null
xmlParseInNodeContext_APIParam_3 is the input string length in bytes||||null
xmlParseInNodeContext_APIParam_5 is the return value for the set of parsed nodes||||null
xmlParseInNodeContext_APIParam_4 is a combination of xmlParserOption||||null
Parse a well-balanced chunk of an XML document within the context of the given xmlParseInNodeContext_APIParam_1||||null
parse an XML in-memory block and build a tree||||null
xmlParseMemory_APIParam_1 is an pointer to a char array||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
xmlParseMemory_APIName returns the resulting document tree||||null
xmlParseMemory_APIParam_2 is the xmlParseMemory_APIParam_2 of the array||||null
The allowed sequence for the xmlParseInNodeContext_APIParam_2 is a Well Balanced Chunk defined by the content production in the XML grammar||||null
= *||||null
Insert node xmlParserAddNodeInfo_APIParam_2 record into the sorted sequence||||null
xmlParserAddNodeInfo_APIParam_1 is an XML parser context||||null
xmlParserAddNodeInfo_APIParam_2 is a node xmlParserAddNodeInfo_APIParam_2 sequence pointer||||null
Find the parser xmlParserFindNodeInfo_APIParam_2 info struct for a given xmlParserFindNodeInfo_APIParam_2||||null
xmlParserFindNodeInfo_APIParam_1 is an XML parser context||||null
xmlParserFindNodeInfo_APIName returns an xmlParserNodeInfo block pointer or NULL||||null
xmlParserFindNodeInfo_APIParam_2 is an XML xmlParserFindNodeInfo_APIParam_2 within the tree||||null
xmlParserFindNodeInfoIndex_APIParam_1 is a xmlParserFindNodeInfoIndex_APIParam_2 info sequence pointer||||null
xmlParserFindNodeInfoIndex_APIParam_2 is an XML xmlParserFindNodeInfoIndex_APIParam_2 pointer||||null
xmlParserFindNodeInfoIndex_APIName returns a long indicating the position of the record||||null
Callback for freeing some parser input allocations||||null
xmlParserInputDeallocate_APIParam_1 is the string to deallocate||||null
Find the index that the info record for the given xmlParserFindNodeInfoIndex_APIParam_2 is or should be at in a sorted sequence||||null
xmlParserInputGrow_APIName increase the input for the parser||||null
xmlParserInputGrow_APIParam_1 is an XML parser input||||null
xmlParserInputGrow_APIName tries to preserve pointers to the input buffer , and keep already read data||||null
xmlParserInputGrow_APIParam_2 is an indicative size for the lookahead||||null
xmlParserInputRead_APIName was internal and is deprecated||||null
xmlParserInputGrow_APIName returns the amount of char read, or -1 xmlParserInputGrow_APIParam_1 case of error, 0 indicate the end of this entity||||null
xmlParserInputRead_APIParam_1 is an XML parser input||||null
xmlParserInputRead_APIName returns -1 as this is an error to use it||||null
xmlParserInputRead_APIParam_2 is an indicative size for the lookahead||||null
Set and return the previous value for enabling pedantic warnings||||null
xmlPedanticParserDefault_APIParam_1 is int 0 or 1. xmlPedanticParserDefault_APIName returns the last value for 0 for no substitution, 1 for substitution||||null
parse an XML in-memory document and build a tree||||null
xmlReadDoc_APIParam_1 is a pointer to a zero terminated string||||null
xmlReadDoc_APIParam_2 is the base xmlReadDoc_APIParam_2 to use for the document||||null
xmlReadDoc_APIParam_3 is the document xmlReadDoc_APIParam_3 , or NULL||||null
xmlReadDoc_APIParam_4 is a combination of xmlParserOption||||null
xmlReadDoc_APIName returns the resulting document tree||||null
parse an XML from a file descriptor and build a tree||||null
xmlReadFd_APIParam_1 is an open file descriptor||||null
xmlReadFd_APIParam_2 is the base xmlReadFd_APIParam_2 to use for the document||||null
xmlReadFd_APIParam_3 is the document xmlReadFd_APIParam_3 , or NULL||||null
xmlReadFd_APIName returns the resulting document tree||||null
xmlReadFd_APIParam_4 is a combination of xmlParserOption||||null
parse an XML file from the filesystem or the network||||null
xmlReadFile_APIParam_1 is a file or URL||||null
xmlReadFile_APIName returns the resulting document tree||||null
xmlReadFile_APIParam_2 is the document xmlReadFile_APIParam_2 , or NULL||||null
the file descriptor will not be closed||||when the reader is closed
NOTE that or reset||||null
xmlReadFile_APIParam_3 is a combination of xmlParserOption||||null
xmlReadIO_APIParam_1 is an I/O read function||||null
parse an XML document from I/O functions and source and build a tree||||null
xmlReadIO_APIParam_2 is an I/O close function||||null
xmlReadIO_APIParam_3 is an I/O handler||||null
xmlReadIO_APIParam_4 is the base xmlReadIO_APIParam_4 to use for the document||||null
xmlReadIO_APIParam_5 is the document xmlReadIO_APIParam_5 , or NULL||||null
xmlReadIO_APIName returns the resulting document tree||||null
xmlReadIO_APIParam_6 is a combination of xmlParserOption||||null
parse an XML in-memory document and build a tree||||null
xmlReadMemory_APIParam_1 is a pointer to a char array||||null
xmlReadMemory_APIParam_2 is the xmlReadMemory_APIParam_2 of the array||||null
xmlReadMemory_APIParam_3 is the base xmlReadMemory_APIParam_3 to use for the document||||null
xmlReadMemory_APIParam_4 is the document xmlReadMemory_APIParam_4 , or NULL||||null
xmlReadMemory_APIName returns the resulting document tree||||null
xmlReadMemory_APIParam_5 is a combination of xmlParserOption||||null
parse an XML in-memory document and build a tree||||null
xmlRecoverDoc_APIParam_1 is a pointer to an array of xmlChar||||null
xmlRecoverDoc_APIName returns the resulting document tree or NULL in case of failure||||null
parse an XML file and build a tree||||null
xmlRecoverFile_APIParam_1 is the xmlRecoverFile_APIParam_1||||null
In the case the document is not Well Formed , a attempt to build a tree is tried anyway||||null
xmlRecoverFile_APIName returns the resulting document tree or NULL in case of failure||||null
parse an XML in-memory block and build a tree||||null
In the case the document is not Well Formed , it attempts to build a tree anyway||||null
xmlRecoverMemory_APIParam_1 is an pointer to a char array||||null
xmlRecoverMemory_APIParam_2 is the xmlRecoverMemory_APIParam_2 of the array||||null
xmlRecoverMemory_APIName returns the resulting document tree or NULL in case of error||||null
Load and parse an external subset||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
xmlSAXParseDTD_APIParam_1 is the SAX handler block||||null
In the case the document is not Well Formed , an attempt to build a tree is tried anyway||||null
xmlSAXParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error||||null
xmlSAXParseDTD_APIParam_2 is a NAME * containing the External ID of the DTD||||null
xmlSAXParseDTD_APIParam_3 is a NAME * containing the URL to the DTD||||null
parse an XML in-memory document and build a tree||||null
xmlSAXParseDoc_APIParam_1 is the SAX handler block||||null
an XML in-memory document use the given SAX function block to handle the parsing callback||||null
xmlSAXParseDoc_APIParam_2 is a pointer to an array of xmlChar||||null
xmlSAXParseDoc_APIParam_3 is work in xmlSAXParseDoc_APIParam_3 mode , i.e||||null
xmlSAXParseDoc_APIName returns the resulting document tree||||null
tries to read no Well Formed documents||||null
parse an XML external entity out of context and build a tree||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseDoc_APIParam_1
It use the given SAX function block to handle the parsing callback||||null
= TextDecl ?||||null
content This correspond to a `` Well Balanced '' chunk||||null
xmlSAXParseEntity_APIParam_1 is the SAX handler block||||null
xmlSAXParseEntity_APIParam_2 is the xmlSAXParseEntity_APIParam_2||||null
xmlSAXParseEntity_APIName returns the resulting document tree||||null
parse an XML file and build a tree||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseEntity_APIParam_1
It use the given SAX function block to handle the parsing callback||||null
xmlSAXParseFile_APIParam_1 is the SAX handler block||||null
xmlSAXParseFile_APIParam_2 is the xmlSAXParseFile_APIParam_2||||null
xmlSAXParseFile_APIParam_3 is work in xmlSAXParseFile_APIParam_3 mode , i.e||||null
xmlSAXParseFile_APIName returns the resulting document tree||||null
tries to read no Well Formed documents||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
parse an XML file and build a tree||||null
It use the given SAX function block to handle the parsing callback||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseFile_APIParam_1
xmlSAXParseFileWithData_APIParam_1 is the SAX handler block||||null
xmlSAXParseFileWithData_APIParam_2 is the xmlSAXParseFileWithData_APIParam_2||||null
xmlSAXParseFileWithData_APIParam_3 is work in xmlSAXParseFileWithData_APIParam_3 mode , i.e||||null
tries to read no Well Formed documents||||null
xmlSAXParseFileWithData_APIParam_4 is the userdata||||null
xmlSAXParseFileWithData_APIName returns the resulting document tree||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseFileWithData_APIParam_1
xmlSAXParseMemory_APIParam_1 is the SAX handler block||||null
parse an XML in-memory block and use the given SAX function block to handle the parsing callback||||null
xmlSAXParseMemory_APIParam_2 is an pointer to a char array||||null
xmlSAXParseMemory_APIParam_3 is the xmlSAXParseMemory_APIParam_3 of the array||||null
User xmlSAXParseFileWithData_APIParam_4 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml||||null
xmlSAXParseMemory_APIParam_4 is work in xmlSAXParseMemory_APIParam_4 mode , i.e||||null
xmlSAXParseMemory_APIName returns the resulting document tree||||null
tries to read not Well Formed documents||||null
xmlSAXParseMemoryWithData_APIParam_1 is the SAX handler block||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseMemory_APIParam_1
parse an XML in-memory block and use the given SAX function block to handle the parsing callback||||null
xmlSAXParseMemoryWithData_APIParam_2 is an pointer to a char array||||null
xmlSAXParseMemoryWithData_APIParam_3 is the xmlSAXParseMemoryWithData_APIParam_3 of the array||||null
xmlSAXParseMemoryWithData_APIParam_4 is work in xmlSAXParseMemoryWithData_APIParam_4 mode , i.e||||null
is NULL , fallback to the default DOM tree building routines||||If xmlSAXParseMemoryWithData_APIParam_1
tries to read no Well Formed documents||||null
xmlSAXParseMemoryWithData_APIParam_5 is the userdata||||null
xmlSAXParseMemoryWithData_APIName returns the resulting document tree||||null
parse an XML file and call the given SAX handler routines||||null
Automatic support for ZLIB/Compress compressed document is provided||||null
xmlSAXUserParseFile_APIParam_2 is The user data returned on SAX callbacks||||null
xmlSAXUserParseFile_APIParam_1 is a SAX handler||||null
User xmlSAXParseMemoryWithData_APIParam_5 is stored within the parser context in the context _ private member , so it is available nearly everywhere in libxml||||null
xmlSAXUserParseFile_APIParam_3 is a file name||||null
A better SAX parsing routine||||null
parse an XML in-memory xmlSAXUserParseMemory_APIParam_3 and call the given SAX handler routines||||null
xmlSAXUserParseMemory_APIParam_2 is The user data returned on SAX callbacks||||null
xmlSAXUserParseMemory_APIParam_1 is a SAX handler||||null
xmlSAXUserParseMemory_APIParam_3 is an in-memory XML document input||||null
xmlSAXUserParseMemory_APIParam_4 is the length of the XML document in bytes||||null
Changes the defaultexternal entity resolver function for the application||||null
xmlSetExternalEntityLoader_APIParam_1 is the new entity resolver function||||null
xmlSetFeature_APIParam_1 is an XML/HTML parser context||||null
xmlSetFeature_APIParam_2 is the feature xmlSetFeature_APIParam_2||||null
Change the current xmlSetFeature_APIParam_3 of one feature of this parser instance||||null
xmlSetFeature_APIParam_3 is pointer to the location of the new xmlSetFeature_APIParam_3||||null
The xmlSetupParserForBuffer_APIParam_2 parameter must not be NULL , but the xmlSetupParserForBuffer_APIParam_3 parameter can be||||null
Setup the parser context to parse a new xmlSetupParserForBuffer_APIParam_2||||null
xmlSetupParserForBuffer_APIParam_1 is an XML parser context||||null
Clears any prior contents from the parser context||||null
xmlSetupParserForBuffer_APIParam_2 is a xmlChar * xmlSetupParserForBuffer_APIParam_2||||null
xmlSetupParserForBuffer_APIParam_3 is a file name||||null
Blocks further parser processing||||null
xmlStopParser_APIParam_1 is an XML parser context||||null
Set and return the previous value for default entity support||||null
Daniel Veillard||||null
xmlSubstituteEntitiesDefault_APIParam_1 is int 0 or 1. xmlSubstituteEntitiesDefault_APINamereturns the last value for 0 for no substitution, 1 for substitution||||null
Initially the parser always keep entity references instead of substituting entity values in the output||||null
Free an XInclude context||||null
xmlXIncludeFreeContext_APIParam_1 is the XInclude context||||null
Creates a new XInclude context||||null
xmlXIncludeNewContext_APIName returns the new set||||null
xmlXIncludeNewContext_APIParam_1 is an XML Document||||null
Implement the XInclude substitution on the XML document @doc||||null
xmlXIncludeProcess_APIParam_1 is an XML document||||null
Implement the XInclude substitution on the XML document @doc||||null
xmlXIncludeProcess_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
xmlXIncludeProcessFlags_APIParam_1 is an XML document||||null
This function has to be used to change the default parser behavior SAX::substituteEntities_APIName has to be used for changing that on a file by file basis||||null
xmlXIncludeProcessFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes||||null
Implement the XInclude substitution on the XML document @doc||||null
xmlXIncludeProcessFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
xmlXIncludeProcessFlagsData_APIParam_1 is an XML document||||null
xmlXIncludeProcessNode_APIParam_1 is an existing XInclude context||||null
xmlXIncludeProcessFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes||||null
xmlXIncludeProcessNode_APIParam_2 is a xmlXIncludeProcessNode_APIParam_2 in an XML document||||null
xmlXIncludeProcessFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
Implement the XInclude substitution for the given subtree reusing the informations and data coming from the given context||||null
Implement the XInclude substitution for the given subtree||||null
xmlXIncludeProcessNode_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
xmlXIncludeProcessTree_APIParam_1 is a node in an XML document||||null
xmlXIncludeProcessFlagsData_APIParam_3 is application xmlXIncludeProcessFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context||||null
xmlXIncludeProcessTree_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
Implement the XInclude substitution for the given subtree||||null
xmlXIncludeProcessTreeFlags_APIParam_1 is a node in an XML document||||null
xmlXIncludeProcessTreeFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes||||null
Implement the XInclude substitution on the XML node @tree||||null
xmlXIncludeProcessTreeFlagsData_APIParam_1 is an XML node||||null
xmlXIncludeProcessTreeFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
xmlXIncludeProcessTreeFlagsData_APIParam_2 is a set of xmlParserOption used for parsing XML includes||||null
Set the xmlXIncludeSetFlags_APIParam_2 used for further processing of XML resources||||null
xmlXIncludeProcessTreeFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done||||null
xmlXIncludeSetFlags_APIParam_1 is an XInclude processing context||||null
Daniel Veillard||||null
xmlXIncludeSetFlags_APIParam_2 is a set of xmlParserOption used for parsing XML includes||||null
xmlXIncludeSetFlags_APINamereturns 0 in case of success and -1 in case of error||||null
xmlXIncludeProcessTreeFlagsData_APIParam_3 is application xmlXIncludeProcessTreeFlagsData_APIParam_3 that will be passed to the parser context in the _ private field of the parser context||||null
xmlAddChild_APIParam_1 is the xmlAddChild_APIParam_1 node||||null
xmlAddChild_APIParam_2 is the child node||||null
xmlAddChild_APIName returns the child or NULL in case of error||||null
xmlAddChildList_APIParam_1 is the xmlAddChildList_APIParam_1 node||||null
xmlAddChildList_APIParam_2 is the first node in the list||||null
xmlAddChildList_APIName returns the last child or NULL in case of error||||null
it is first destroyed||||If there is an attribute with equal name
As a result of text merging @elem may be freed||||null
xmlAddNextSibling_APIParam_1 is the child node||||null
Add a list of node at the end of the child list of the xmlAddChildList_APIParam_1 merging adjacent TEXT nodes||||null
xmlAddNextSibling_APIName returns the new node or NULL in case of error||||null
xmlAddNextSibling_APIParam_2 is the new node||||null
xmlAddPrevSibling_APIParam_1 is the child node||||null
xmlAddPrevSibling_APIName returns the new node or NULL in case of error||||null
xmlAddPrevSibling_APIParam_2 is the new node||||null
it is added into properties instead of children||||If the new node is ATTRIBUTE
xmlAddSibling_APIParam_1 is the child node||||null
it is first destroyed||||If there is an attribute with equal name
xmlAddSibling_APIName returns the new element or NULL in case of error||||null
xmlAddSibling_APIParam_2 is the new node||||null
it is first destroyed||||If there is an attribute with equal name
Serialize text attribute values to an xml simple buffer||||null
xmlAttrSerializeTxtContent_APIParam_1 is the XML buffer output||||null
it is added into properties instead of children||||If the new node is ATTRIBUTE
it is added into properties instead of children||||If the new node is ATTRIBUTE
Add a new node to @parent , at the end of the child list merging adjacent TEXT nodes||||null
xmlAttrSerializeTxtContent_APIParam_2 is the document||||null
xmlAttrSerializeTxtContent_APIParam_3 is the attribute node||||null
xmlAttrSerializeTxtContent_APIParam_4 is the text content||||null
it is first unlinked from its existing context||||If the new node was already inserted in a document
Add a new node @elem as the next sibling of @cur||||null
it is first unlinked from its existing context||||If the new node was already inserted in a document
Add a new node @elem as the previous sibling of @cur merging adjacent TEXT nodes||||null
Function to extract the content of a buffer||||null
xmlBufContent_APIParam_1 is the buffer||||null
xmlBufContent_APIName returns the internal content||||null
xmlBufEnd_APIParam_1 is the buffer||||null
xmlBufEnd_APIName returns the end of the internal content or NULL in case of error||||null
Function to extract the end of the content of a buffer||||null
Entity references are substituted||||null
Fills up the buffer @buf with this value||||null
xmlBufGetNodeContent_APIParam_1 is a buffer xmlBufPtr||||null
xmlBufGetNodeContent_APIParam_2 is the node being read||||null
xmlBufGetNodeContent_APIName returns 0 in case of success and -1 in case of error||||null
Dump an XML node , recursive behaviour , children are printed too||||null
xmlBufNodeDump_APIParam_1 is the XML buffer output||||null
xmlBufNodeDump_APIParam_2 is the document||||null
xmlBufNodeDump_APIParam_3 is the current node||||null
xmlBufNodeDump_APIParam_4 is the imbrication xmlBufNodeDump_APIParam_4 for indenting||||null
xmlBufNodeDump_APIParam_5 is is formatting allowed||||null
Remove the beginning of an XML buffer||||null
xmlBufShrink_APIParam_1 is the buffer to dump||||null
xmlBufNodeDump_APIName returns the number of bytes written to the buffer, in case of error 0be returned by xmlBufNodeDump_APIName or @buf stores the error||||null
xmlBufShrink_APIParam_2 is the number of xmlChar to remove||||null
xmlBufShrink_APIName returns the number of byte removed or 0 in case of failure||||null
it is first unlinked from its existing context||||If the new element was already inserted in a document
Add a new element @elem to the list of siblings of @cur merging adjacent TEXT nodes||||null
Function to get the length of a buffer||||null
xmlBufUse_APIName returns the length of data in the internal content||||null
xmlBufUse_APIParam_1 is the buffer||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
Add a string range to an XML buffer||||null
xmlBufferAdd_APIParam_1 is the buffer to dump||||null
xmlBufferAdd_APIParam_2 is the #xmlChar string||||null
xmlBufferAdd_APIParam_3 is the number of #xmlChar to add||||null
Add a string range to the beginning of an XML buffer||||null
xmlBufferAddHead_APIParam_1 is the buffer||||null
xmlBufferAddHead_APIParam_2 is the #xmlChar string||||null
the length of xmlBufferAdd_APIParam_2 is recomputed||||if xmlBufferAdd_APIParam_3 == -1
xmlBufferAddHead_APIParam_3 is the number of #xmlChar to add||||null
xmlBufferCCat_APIParam_1 is the buffer to dump||||null
Append a zero terminated C string to an XML buffer||||null
xmlBufferCCat_APIParam_2 is the C char string||||null
Append a zero terminated string to an XML buffer||||null
xmlBufferCat_APIParam_1 is the buffer to add to||||null
xmlBufferCat_APIParam_2 is the #xmlChar string||||null
the length of @str is recomputed||||if xmlBufferAddHead_APIParam_3 == -1
Function to extract the content of a buffer||||null
xmlBufferContent_APIParam_1 is the buffer||||null
xmlBufferContent_APIName returns the internal content||||null
carried directly by this node||||if it is a TEXT node or the aggregate string of the values carried by this node child
Read the value of a node @cur , this can be either the text||||null
xmlBufferCreate_APIName returns the new structure||||null
routine to create an XML buffer||||null
routine to create an XML buffer||||null
xmlBufferCreateSize_APIName returns the new structure||||null
xmlBufferCreateSize_APIParam_1 is initial xmlBufferCreateSize_APIParam_1 of buffer||||null
routine to create an XML buffer from an immutable memory area||||null
xmlBufferCreateStatic_APIParam_1 is the memory area||||null
xmlBufferCreateStatic_APIName returns the new structure||||null
xmlBufferCreateStatic_APIParam_2 is the xmlBufferCreateStatic_APIParam_2 in byte||||null
The buffer is reset to an empty content||||null
xmlBufferDetach_APIParam_1 is the buffer||||null
xmlBufferDetach_APIName returns the previous string contained by the buffer||||null
This does not work with immutable buffers as they can not be reset||||null
Remove the string contained in a buffer and gie it back to the caller||||null
The area will not be modified nor copied , and is expected to be present until the end of the buffer lifetime||||null
Dumps an XML buffer to a FILE *||||null
xmlBufferDump_APIParam_1 is the xmlBufferDump_APIParam_1 output||||null
xmlBufferDump_APIParam_2 is the buffer to dump||||null
xmlBufferDump_APIName returns the number of #xmlChar written||||null
empty a buffer||||null
xmlBufferEmpty_APIParam_1 is the buffer||||null
Frees an XML buffer||||null
xmlBufferFree_APIParam_1 is the buffer to free||||null
It frees both the content and the structure which encapsulate it||||null
Grow the available space of an XML buffer||||null
xmlBufferGrow_APIParam_1 is the buffer||||null
xmlBufferGrow_APIParam_2 is the minimum free size to allocate||||null
xmlBufferGrow_APIName returns the new available space or -1 in case of error||||null
Function to get the length of a buffer||||null
xmlBufferLength_APIParam_1 is the buffer||||null
xmlBufferLength_APIName returns the length of data in the internal content||||null
Resize a buffer to accommodate minimum xmlBufferResize_APIParam_2 of @size||||null
xmlBufferResize_APIParam_1 is the buffer to resize||||null
xmlBufferResize_APIParam_2 is the desired xmlBufferResize_APIParam_2||||null
Sets the allocation xmlBufferSetAllocationScheme_APIParam_2 for this buffer||||null
xmlBufferSetAllocationScheme_APIParam_1 is the buffer to tune||||null
xmlBufferSetAllocationScheme_APIParam_2 is allocation xmlBufferSetAllocationScheme_APIParam_2 to use||||null
Remove the beginning of an XML buffer||||null
xmlBufferShrink_APIParam_1 is the buffer to dump||||null
xmlBufferShrink_APIParam_2 is the number of xmlChar to remove||||null
xmlBufferShrink_APIName returns the number of #xmlChar removed, or -1 in case of failure||||null
routine which manages and grows an output buffer||||null
This one adds xmlChars at the end of the buffer||||null
xmlBufferWriteCHAR_APIParam_1 is the XML buffer||||null
xmlBufferWriteCHAR_APIParam_2 is the xmlBufferWriteCHAR_APIParam_2 to add||||null
routine which manage and grows an output buffer||||null
xmlBufferWriteChar_APIParam_1 is the XML buffer output||||null
xmlBufferWriteChar_APIParam_2 is the xmlBufferWriteChar_APIParam_2 to add||||null
This one add C chars at the end of the array||||null
routine which manage and grows an output buffer||||null
xmlBufferWriteQuotedString_APIParam_1 is the XML buffer output||||null
xmlBufferWriteQuotedString_APIParam_2 is the xmlBufferWriteQuotedString_APIParam_2 to add||||null
If xmlBuildQName_APIParam_2 is NULL or empty {}_APIName returns xmlBuildQName_APIParam_1||||null
This one writes a quoted or double quoted #xmlChar xmlBufferWriteQuotedString_APIParam_2 , checking first||||if it holds quote or double-quotes internally
xmlBuildQName_APIParam_1 is the Name||||null
xmlBuildQName_APIParam_2 is the xmlBuildQName_APIParam_2||||null
xmlBuildQName_APIParam_3 is preallocated xmlBuildQName_APIParam_3||||null
xmlBuildQName_APIParam_4 is preallocated xmlBuildQName_APIParam_3 length||||null
xmlChildElementCount_APIParam_1 is the xmlChildElementCount_APIParam_1 node||||null
xmlBuildQName_APIName returns the new string which must be freed by the caller if different from @memory and @ncname or NULL in case of error||||null
xmlChildElementCount_APIName returns the count of element child or 0 if not available||||null
Do a copy of the document info||||null
Finds the current number of child nodes of that element which are element nodes||||null
xmlCopyDoc_APIParam_1 is the document||||null
xmlCopyDoc_APIName returns a new #xmlDocPtr, or NULL in case of error||||null
Do a copy of the xmlCopyDtd_APIParam_1||||null
xmlCopyDtd_APIParam_1 is the xmlCopyDtd_APIParam_1||||null
xmlCopyDtd_APIName returns a new #xmlDtdPtr, or NULL in case of error||||null
Note the handling of entities references is different than in the W3C DOM element traversal spec||||null
xmlCopyDoc_APIParam_2 is||||if not zero do a xmlCopyDoc_APIParam_2 copy
Do a copy of the namespace||||null
xmlCopyNamespace_APIParam_1 is the namespace||||null
xmlCopyNamespace_APIName returns a new #xmlNsPtr, or NULL in case of error||||null
Do a copy of an namespace list||||null
xmlCopyNamespaceList_APIName returns a new #xmlNsPtr, or NULL in case of error||||null
xmlCopyNamespaceList_APIParam_1 is the first namespace||||null
the content tree will be copied too as well as DTD , namespaces and entities||||If xmlCopyDoc_APIParam_2
Do a copy of the xmlCopyNode_APIParam_1||||null
xmlCopyNode_APIParam_1 is the xmlCopyNode_APIParam_1||||null
xmlCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error||||null
Do a recursive copy of the xmlCopyNodeList_APIParam_1 list||||null
xmlCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error||||null
xmlCopyNodeList_APIParam_1 is the first xmlCopyNodeList_APIParam_1 in the list||||null
Do a copy of the attribute||||null
xmlCopyProp_APIParam_1 is the element where the attribute will be grafted||||null
xmlCopyProp_APIParam_2 is the attribute||||null
xmlCopyProp_APIName returns a new #xmlAttrPtr, or NULL in case of error||||null
xmlCopyNode_APIParam_2 is||||if 1 do a recursive copy if 2 copy properties and namespaces
Do a copy of an attribute list||||null
Use xmlDocCopyNodeList_APIName||||if possible to ensure string interning
xmlCopyPropList_APIName returns a new #xmlAttrPtr, or NULL in case of error||||null
xmlCopyPropList_APIParam_1 is the element where the attributes will be grafted||||null
xmlCopyPropList_APIParam_2 is the first attribute||||null
Create the internal subset of a document||||null
xmlCreateIntSubset_APIParam_1 is the document pointer||||null
xmlCreateIntSubset_APIParam_2 is the DTD xmlCreateIntSubset_APIParam_2||||null
xmlCreateIntSubset_APIParam_3 is the external ID||||null
xmlCreateIntSubset_APIParam_4 is the system ID||||null
xmlCreateIntSubset_APIName returns a pointer to the new DTD structure||||null
A function called to acquire namespaces from the wrapper||||null
xmlDOMWrapAcquireNsFunction_APIParam_1 is a DOM wrapper context||||null
xmlDOMWrapAcquireNsFunction_APIParam_2 is the context xmlDOMWrapAcquireNsFunction_APIParam_2||||null
xmlDOMWrapAcquireNsFunction_APIParam_3 is the requested namespace name||||null
xmlDOMWrapAcquireNsFunction_APIName returns an xmlNsPtr or NULL in case of an error||||null
xmlDOMWrapAcquireNsFunction_APIParam_4 is the requested namespace prefix||||null
xmlDOMWrapAdoptNode_APIName was not intensively tested||||null
xmlDOMWrapAdoptNode_APIParam_1 is the optional context for custom processing||||null
xmlDOMWrapAdoptNode_APIParam_2 is the optional xmlDOMWrapAdoptNode_APIParam_2||||null
xmlDOMWrapAdoptNode_APIParam_3 is the xmlDOMWrapAdoptNode_APIParam_3 to start with||||null
xmlDOMWrapAdoptNode_APIParam_4 is the destination doc||||null
xmlDOMWrapAdoptNode_APIParam_6 is option flags||||null
xmlDOMWrapAdoptNode_APIParam_5 is the optional new parent of @node in @destDoc||||null
Note that , , it could break QNames in attribute values or element content||||null
Currently this returns an error for XInclude||||null
1 -RRB- What to do with XInclude ?||||null
xmlDOMWrapAdoptNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapAdoptNode_APIParam_3 of unsupported type was given, 2 if a xmlDOMWrapAdoptNode_APIParam_3 of not yet supported type was given and -1 on API/internal errors||||null
References of out-of scope ns-decls are remapped to point to @destDoc||||null
xmlDOMWrapCloneNode_APIParam_1 is the optional context for custom processing||||null
xmlDOMWrapCloneNode_APIParam_2 is the optional xmlDOMWrapCloneNode_APIParam_2||||null
xmlDOMWrapCloneNode_APIParam_3 is the xmlDOMWrapCloneNode_APIParam_3 to start with||||null
xmlDOMWrapCloneNode_APIParam_4 is the clone of the given @node||||null
xmlDOMWrapCloneNode_APIParam_5 is the destination doc||||null
xmlDOMWrapCloneNode_APIParam_8 is option flags||||null
This is the case||||when you do not know already where the cloned branch will be added to
Note that , , this process could break QNames in attribute values or element content||||null
@destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed||||If @destParent is given
xmlDOMWrapCloneNode_APIParam_6 is the optional new parent of @node in @destDoc||||null
Frees the DOM-wrapper context||||null
xmlDOMWrapFreeCtxt_APIParam_1 is the DOM-wrapper context||||null
Allocates and initializes a new DOM-wrapper context||||null
xmlDOMWrapNewCtxt_APIName returns the xmlDOMWrapCtxtPtr or NULL in case of an internal error||||null
1 -RRB- , nsDef entries on element-nodes are used 2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used||||If @destParent is given
xmlDOMWrapCloneNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapCloneNode_APIParam_3 of unsupported  type was given, -1 on API/internal errors||||null
Ensures that ns-references point to ns-decls hold on element-nodes||||null
xmlDOMWrapCloneNode_APIParam_7 is descend into child||||if set
xmlDOMWrapReconcileNamespaces_APIName was not intensively tested||||null
Ensures that the tree is namespace wellformed by creating additional ns-decls where needed||||null
xmlDOMWrapReconcileNamespaces_APIParam_2 is the element-node||||null
xmlDOMWrapReconcileNamespaces_APIParam_1 is DOM wrapper context , unused at the moment||||null
xmlDOMWrapReconcileNamespaces_APIParam_3 is option flags||||null
Unlinks the given xmlDOMWrapRemoveNode_APIParam_3 from its owner||||null
Note that , , this process could break QNames in attribute values or element content||||null
xmlDOMWrapRemoveNode_APIName was not intensively tested||||null
xmlDOMWrapRemoveNode_APIParam_1 is a DOM wrapper context||||null
xmlDOMWrapRemoveNode_APIParam_2 is the xmlDOMWrapRemoveNode_APIParam_2||||null
xmlDOMWrapRemoveNode_APIParam_3 is the xmlDOMWrapRemoveNode_APIParam_3 to be removed||||null
xmlDOMWrapRemoveNode_APIParam_4 is set of xmlDOMWrapRemoveNode_APIParam_4 , unused at the moment||||null
Do a copy of the xmlDocCopyNode_APIParam_1 to a given document||||null
xmlDocCopyNode_APIParam_1 is the xmlDocCopyNode_APIParam_1||||null
xmlDocCopyNode_APIParam_2 is the document||||null
This will substitute ns-references to node - > nsDef for ns-references to doc - > oldNs , thus ensuring the removed branch to be autark wrt ns-references||||null
xmlDOMWrapRemoveNode_APIName returns 0 on success, 1 if the xmlDOMWrapRemoveNode_APIParam_3 is not supported, -1 on API and internal errors||||null
xmlDocCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error||||null
Do a recursive copy of the xmlDocCopyNodeList_APIParam_2 list||||null
xmlDocCopyNodeList_APIParam_1 is the target document||||null
xmlDocCopyNode_APIParam_3 is||||if 1 do a recursive copy if 2 copy properties and namespaces
xmlDocCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error||||null
xmlDocCopyNodeList_APIParam_2 is the first xmlDocCopyNodeList_APIParam_2 in the list||||null
Dump an XML document to an open FILE||||null
xmlDocDump_APIParam_1 is the FILE *||||null
xmlDocDump_APIParam_2 is the document||||null
xmlDocDump_APIName returns the number of bytes written or -1 in case of failure||||null
References of out-of scope ns-decls are remapped to point to @destDoc||||null
Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpFormatMemory_APIParam_3||||null
it is up to the caller to free xmlDocDumpFormatMemory_APIParam_0 with xmlFree_APIName||||null
xmlDocDumpFormatMemory_APIParam_1 is the document||||null
xmlDocDumpFormatMemory_APIParam_2 is OUT the memory pointer||||null
xmlDocDumpFormatMemory_APIParam_3 is OUT the memory length||||null
xmlDocDumpFormatMemory_APIParam_4 is should formatting spaces been added||||null
Dump the current DOM tree into memory using the character encoding specified by the caller||||null
xmlDocDumpFormatMemoryEnc_APIParam_1 is Document to generate XML text from||||null
Note it is up to the caller of xmlDocDumpFormatMemoryEnc_APIName to free the allocated memory with xmlFree_APIName||||null
xmlDocDumpFormatMemoryEnc_APIParam_2 is Memory pointer for allocated XML text||||null
xmlDocDumpFormatMemoryEnc_APIParam_3 is Length of the generated XML text||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
xmlDocDumpFormatMemoryEnc_APIParam_5 is should formatting spaces been added||||null
xmlDocDumpMemory_APIParam_1 is the document||||null
it is up to the caller to free xmlDocDumpMemory_APIParam_0 with xmlFree_APIName||||null
Dump an XML document in memory and return the #xmlChar * and it is xmlDocDumpMemory_APIParam_3 in bytes||||null
The resulting byte array is zero terminated||||null
xmlDocDumpMemory_APIParam_2 is OUT the memory pointer||||null
xmlDocDumpFormatMemoryEnc_APIParam_4 is Character encoding to use||||when generating XML text
xmlDocDumpMemory_APIParam_3 is OUT the memory length||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
Dump the current DOM tree into memory using the character encoding specified by the caller||||null
xmlDocDumpMemoryEnc_APIParam_1 is Document to generate XML text from||||null
xmlDocDumpMemoryEnc_APIParam_2 is Memory pointer for allocated XML text||||null
Note it is up to the caller of xmlDocDumpMemoryEnc_APIName to free the allocated memory with xmlFree_APIName||||null
xmlDocDumpMemoryEnc_APIParam_3 is Length of the generated XML text||||null
Dump an XML document to an open FILE||||null
xmlDocFormatDump_APIParam_1 is the FILE *||||null
xmlDocFormatDump_APIParam_2 is the document||||null
xmlDocFormatDump_APIName returns the number of bytes written or -1 in case of failure||||null
xmlDocFormatDump_APIParam_3 is should formatting spaces been added||||null
Get the root element of the document||||null
xmlDocGetRootElement_APIParam_1 is the document||||null
xmlDocGetRootElement_APIName returns the #xmlNodePtr for the root or NULL||||null
xmlDocDumpMemoryEnc_APIParam_4 is Character encoding to use||||when generating XML text
Set the xmlDocSetRootElement_APIParam_2 element of the document||||null
xmlDocSetRootElement_APIName returns the old xmlDocSetRootElement_APIParam_2 element if any was found, NULL if xmlDocSetRootElement_APIParam_2 was NULL||||null
xmlDocSetRootElement_APIParam_1 is the document||||null
Dump an XML/HTML node , recursive behaviour , children are printed too||||null
xmlElemDump_APIParam_1 is the FILE * for the output||||null
xmlElemDump_APIParam_2 is the document||||null
xmlElemDump_APIParam_3 is the current node||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
xmlFirstElementChild_APIName returns the first element child or NULL if not available||||null
xmlFirstElementChild_APIParam_1 is the xmlFirstElementChild_APIParam_1 node||||null
xmlFreeDoc_APIParam_1 is pointer to the document||||null
Free a DTD structure||||null
Free up all the structures used by a document , tree included||||null
xmlFreeDtd_APIParam_1 is the DTD structure to free up||||null
xmlFreeNode_APIParam_1 is the node||||null
1 -RRB- , nsDef entries on element-nodes are used||||If @destParent is given
2 -RRB- If * no * @destParent is given , @destDoc - > oldNs entries are used This is the case when you have an unlinked xmlDOMWrapAdoptNode_APIParam_3 and just want to move it to the context of If @destParent is given , it ensures that the tree is namespace wellformed by creating additional ns-decls where needed||||null
Free a node , this is a recursive behaviour , all the children are freed too||||null
xmlFreeNodeList_APIParam_1 is the first node in the list||||null
This does not unlink the child from the list , use xmlUnlinkNode_APIName first||||null
Free up the structures associated to a namespace||||null
xmlFreeNs_APIParam_1 is the namespace pointer||||null
Free up all the structures associated to the chained namespaces||||null
xmlFreeNsList_APIParam_1 is the first namespace pointer||||null
xmlDocSetRootElement_APIParam_2 is the new document xmlDocSetRootElement_APIParam_2 element||||if xmlDocSetRootElement_APIParam_2 is NULL no action is taken , to remove a node from a document use xmlUnlinkNode instead
xmlFreeProp_APIParam_1 is an attribute||||null
Free a node and all its siblings , this is a recursive behaviour , all the children are freed too||||null
Free one attribute , all the content is freed too||||null
xmlFreePropList_APIParam_1 is the first property in the list||||null
xmlGetBufferAllocationScheme_APIName returns the current allocation scheme||||null
Free a property and all its siblings , all the children are freed too||||null
xmlGetCompressMode_APIName returns 0  to 9 (max compression||||null
get the default compression mode used , ZLIB based||||null
xmlGetDocCompressMode_APIParam_1 is the document||||null
xmlGetDocCompressMode_APIName returns 0  to 9 (max compression||||null
get the compression ratio for a document , ZLIB based||||null
Get the internal subset of a document||||null
xmlGetIntSubset_APIName returns a pointer to the DTD structure or NULL if not found||||null
xmlGetIntSubset_APIParam_1 is the document pointer||||null
Finds the first child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec||||null
Search the last child of a node||||null
xmlGetLastChild_APIName returns the last child or NULL if none||||null
xmlGetLastChild_APIParam_1 is the xmlGetLastChild_APIParam_1 node||||null
Get line number of @node||||null
xmlGetLineNo_APIParam_1 is valid xmlGetLineNo_APIParam_1||||null
xmlGetNoNsProp_APIParam_1 is the xmlGetNoNsProp_APIParam_1||||null
Search and get the value of an attribute associated to a xmlGetNoNsProp_APIParam_1 This does the entity substitution||||null
xmlGetNoNsProp_APIParam_2 is the attribute xmlGetNoNsProp_APIParam_2||||null
xmlGetNoNsProp_APIName returns the attribute value or NULL if not found||||null
xmlGetNoNsProp_APIName is similar to xmlGetProp except it will accept only an attribute in no namespace||||null
it is up to the caller to free xmlGetNoNsProp_APIParam_0 with xmlFree||||null
Build a structure based Path for the given xmlGetNodePath_APIParam_1||||null
xmlGetNodePath_APIParam_1 is a xmlGetNodePath_APIParam_1||||null
The caller must free xmlGetNodePath_APIParam_0||||null
xmlGetNodePath_APIName returns the new path or NULL in case of error||||null
Try to override the limitation of lines being store in 16 bits ints||||if XML_PARSE_BIG_LINES parser option was used
Search all the namespace applying to a given element||||null
xmlGetNsList_APIParam_1 is the document||||null
xmlGetNsList_APIParam_2 is the current xmlGetNsList_APIParam_2||||null
DTD attribute declaration for #FIXED or default declaration values||||unless DTD use has been turned off
xmlGetNoNsProp_APIName looks in||||null
Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer tight in normal usage , and doubleit on large strings to avoid pathological performance||||when extra needed , improves performance XML_BUFFER_ALLOC_HYBRID - use exact sizes on small strings to keep memory usage
This does the entity substitution||||null
xmlGetNsProp_APIParam_1 is the xmlGetNsProp_APIParam_1||||null
xmlGetNsProp_APIParam_2 is the attribute xmlGetNsProp_APIParam_2||||null
xmlGetNsList_APIName returns an NULL terminated array of all the #xmlNsPtr found that need to be freed by the caller or NULL if no namespace if defined||||null
xmlGetNsProp_APIName returns the attribute value or NULL if not found||||null
xmlGetNsProp_APIParam_3 is the URI of the namespace||||null
Search and get the value of an attribute associated to a xmlGetNsProp_APIParam_1 This attribute has to be anchored in the namespace specified||||null
it is up to the caller to free xmlGetNsProp_APIParam_0 with xmlFree||||null
xmlGetProp_APIName acts independently of namespaces associated to the attribute||||null
Use xmlGetNsProp_APIName or xmlGetNoNsProp_APIName for namespace aware processing||||null
xmlGetProp_APIParam_1 is the xmlGetProp_APIParam_1||||null
Search and get the value of an attribute associated to a xmlGetProp_APIParam_1 This does the entity substitution||||null
DTD attribute declaration for #FIXED or default declaration values||||unless DTD use has been turned off
xmlGetNsProp_APIName looks in||||null
xmlGetProp_APIName returns the attribute value or NULL if not found||||null
xmlGetProp_APIParam_2 is the attribute xmlGetProp_APIParam_2||||null
it is up to the caller to free xmlGetProp_APIParam_0 with xmlFree||||null
This does the entity substitution||||null
xmlHasNsProp_APIParam_1 is the xmlHasNsProp_APIParam_1||||null
xmlHasNsProp_APIParam_2 is the attribute xmlHasNsProp_APIParam_2||||null
Note that a namespace of NULL indicates to use the default namespace||||null
Search for an attribute associated to a xmlHasNsProp_APIParam_1 This attribute has to be anchored in the namespace specified||||null
xmlHasNsProp_APIName returns the attribute or the attribute declaration or NULL if neither was found||||null
xmlHasNsProp_APIParam_3 is the URI of the namespace||||null
DTD attribute declaration for #FIXED or default declaration values||||unless DTD use has been turned off
xmlGetProp_APIName looks in||||null
xmlHasProp_APIParam_1 is the xmlHasProp_APIParam_1||||null
xmlHasProp_APIName returns the attribute or the attribute declaration or NULL if neither was found||||null
xmlHasProp_APIParam_2 is the attribute xmlHasProp_APIParam_2||||null
xmlIsBlankNode_APIParam_1 is the xmlIsBlankNode_APIParam_1||||null
xmlIsBlankNode_APIName returns 1 yes, 0 no||||null
DTD attribute declaration for #FIXED or default declaration values||||unless DTD use has been turned off
xmlHasNsProp_APIName looks in||||null
xmlIsXHTML_APIParam_1 is the system identifier||||null
xmlIsXHTML_APIParam_2 is the public identifier||||null
xmlIsXHTML_APIName returns 1 if true, 0 if not and -1 in case of error||||null
xmlLastElementChild_APIParam_1 is the xmlLastElementChild_APIParam_1 node||||null
xmlLastElementChild_APIName returns the last element child or NULL if not available||||null
Creation of a new node containing a CDATA block||||null
xmlNewCDataBlock_APIParam_1 is the document||||null
Try to find||||if the document correspond to an XHTML DTD
xmlNewCDataBlock_APIParam_2 is the CDATA block xmlNewCDataBlock_APIParam_2 xmlNewCDataBlock_APIParam_2||||null
xmlNewCDataBlock_APIName returns a pointer to the new node object||||null
xmlNewCDataBlock_APIParam_3 is the length of the block||||null
Creation of a new character reference node||||null
xmlNewCharRef_APIParam_1 is the document||||null
xmlNewCharRef_APIName returns a pointer to the new node object||||null
Creation of a new child element , added at the end of @parent children list||||null
@ns and @content parameters are optional||||null
DTD attribute declaration for #FIXED or default declaration values||||unless DTD use has been turned off
Search an attribute associated to a xmlHasProp_APIParam_1 xmlHasProp_APIName also looks in||||null
xmlNewChild_APIParam_1 is the xmlNewChild_APIParam_1 node||||null
@content is supposed to be a piece of XML CDATA , so @content allows entity references||||null
Finds the last child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec||||null
XML special chars must be escaped first by using xmlEncodeEntitiesReentrant_APIName , or xmlNewTextChild_APIName should be used||||null
xmlNewChild_APIParam_3 is the xmlNewChild_APIParam_3 of the child||||null
xmlNewChild_APIName returns a pointer to the new node object||||null
the newly created element inherits the namespace of @parent||||If @ns is NULL
Creation of a new node containing a comment||||null
xmlNewComment_APIName returns a pointer to the new node object||||null
xmlNewComment_APIParam_1 is the comment xmlNewComment_APIParam_1||||null
a child list containing the TEXTs and ENTITY_REFs node will be created||||If @content is non NULL
xmlNewDoc_APIName returns a new document||||null
Creates a new XML document||||null
xmlNewCharRef_APIParam_2 is the char ref string , starting with # or '' & #||||null
xmlNewChild_APIParam_2 is a namespace||||if any
xmlNewChild_APIParam_4 is the XML xmlNewChild_APIParam_4 of the child||||if any
xmlNewDocComment_APIParam_1 is the document||||null
xmlNewDoc_APIParam_1 is xmlChar string giving the xmlNewDoc_APIParam_1 of XML `` 1.0 ''||||null
xmlNewDocComment_APIParam_2 is the comment xmlNewDocComment_APIParam_2||||null
Creation of a new node containing a comment within a document||||null
xmlNewDocComment_APIName returns a pointer to the new node object||||null
Creation of a new Fragment node||||null
xmlNewDocFragment_APIParam_1 is the document owning the fragment||||null
xmlNewDocFragment_APIName returns a pointer to the new node object||||null
Creation of a new node element within a document||||null
@ns and @content are optional||||null
xmlNewDocNode_APIParam_1 is the document||||null
xmlNewDocNode_APIParam_3 is the node xmlNewDocNode_APIParam_3||||null
xmlNewDocNode_APIName returns a pointer to the new node object||||null
Creation of a new node element within a document||||null
@ns and @content are optional||||null
Use xmlNewDocRawNode_APIName||||if you do not need entities support
xmlNewDocNodeEatName_APIParam_1 is the document||||null
xmlNewDocNode_APIParam_2 is namespace||||if any
xmlNewDocNodeEatName_APIParam_3 is the node xmlNewDocNodeEatName_APIParam_3||||null
xmlNewDocNode_APIParam_4 is the XML text xmlNewDocNode_APIParam_4||||if any
xmlNewDocNodeEatName_APIName returns a pointer to the new node object||||null
Creation of a processing instruction element||||null
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName||||null
Use xmlNewDocRawNode_APIName||||if you do not need entities support
xmlNewDocPI_APIParam_1 is the target document||||null
xmlNewDocNodeEatName_APIParam_2 is namespace||||if any
xmlNewDocPI_APIParam_2 is the processing instruction xmlNewDocPI_APIParam_2||||null
xmlNewDocPI_APIParam_3 is the PI xmlNewDocPI_APIParam_3||||null
xmlNewDocPI_APIName returns a pointer to the new node object||||null
Create a new property carried by a document||||null
xmlNewDocNodeEatName_APIParam_4 is the XML text xmlNewDocNodeEatName_APIParam_4||||if any
xmlNewDocProp_APIParam_1 is the document||||null
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName||||null
xmlNewDocProp_APIParam_2 is the xmlNewDocProp_APIParam_2 of the attribute||||null
xmlNewDocProp_APIParam_3 is the xmlNewDocProp_APIParam_3 of the attribute||||null
xmlNewDocProp_APIName returns a pointer to the attribute||||null
Creation of a new node element within a document||||null
@ns and @content are optional||||null
xmlNewDocRawNode_APIParam_1 is the document||||null
xmlNewDocRawNode_APIParam_3 is the node xmlNewDocRawNode_APIParam_3||||null
xmlNewDocRawNode_APIName returns a pointer to the new node object||||null
xmlNewDocText_APIParam_1 is the document||||null
xmlNewDocRawNode_APIParam_2 is namespace||||if any
xmlNewDocText_APIParam_2 is the text xmlNewDocText_APIParam_2||||null
Creation of a new text node within a document||||null
xmlNewDocText_APIName returns a pointer to the new node object||||null
The text node pertain to a given document||||null
Creation of a new text node with an extra xmlNewDocTextLen_APIParam_2 length parameter||||null
xmlNewDocTextLen_APIParam_1 is the document||||null
xmlNewDocRawNode_APIParam_4 is the text xmlNewDocRawNode_APIParam_4||||if any
xmlNewDocTextLen_APIParam_2 is the text xmlNewDocTextLen_APIParam_2||||null
xmlNewDocTextLen_APIName returns a pointer to the new node object||||null
xmlNewDocTextLen_APIParam_3 is the text xmlNewDocTextLen_APIParam_3||||null
Creation of a new DTD for the external subset||||null
To create an internal subset , use xmlCreateIntSubset_APIName||||null
xmlNewDtd_APIParam_1 is the document pointer||||null
xmlNewDtd_APIParam_2 is the DTD xmlNewDtd_APIParam_2||||null
xmlNewDtd_APIParam_3 is the external ID||||null
xmlNewDtd_APIParam_4 is the system ID||||null
xmlNewDtd_APIName returns a pointer to the new DTD structure||||null
xmlNewGlobalNs_APIParam_1 is the document carrying the namespace||||null
xmlNewGlobalNs_APIParam_2 is the URI associated||||null
xmlNewGlobalNs_APIName returns NULL this functionality had been removed||||null
xmlNewGlobalNs_APIParam_3 is the xmlNewGlobalNs_APIParam_3 for the namespace||||null
Creation of a Namespace , the old way using PI and without scoping DEPRECATED !!!||||null
Creation of a new node element||||null
@ns is optional||||null
xmlNewNode_APIName returns a pointer to the new node object||||null
xmlNewNode_APIParam_2 is the node xmlNewNode_APIParam_2||||null
Uses xmlStrdup_APIName to make copy of @name||||null
Creation of a new node element||||null
@ns is optional||||null
xmlNewNode_APIParam_1 is namespace||||if any
xmlNewNodeEatName_APIParam_2 is the node xmlNewNodeEatName_APIParam_2||||null
Creation of a new Namespace||||null
xmlNewNodeEatName_APIName returns a pointer to the new node object, with pointer @name as new node xmlNewNodeEatName_APIParam_2||||null
Note that for a default namespace , @prefix should be NULL||||null
xmlNewNodeEatName_APIParam_1 is namespace||||if any
xmlNewNs_APIParam_1 is the element carrying the namespace||||null
xmlNewNs_APIParam_2 is the URI associated||||null
xmlNewNs_APIName will refuse to create a namespace with a similar xmlNewNs_APIParam_3 than an existing one present on this xmlNewNs_APIParam_1||||null
xmlNewNs_APIParam_3 is the xmlNewNs_APIParam_3 for the namespace||||null
xmlNewNs_APIName returns a new namespace pointer or NULL||||null
Use xmlNewNode_APIName is needed as new node name||||if a copy of @name string is
We use href == NULL in the case of an element creation where the namespace was not defined||||null
xmlNewNsProp_APIParam_1 is the holding xmlNewNsProp_APIParam_1||||null
Create a new property tagged with a namespace and carried by a xmlNewNsProp_APIParam_1||||null
xmlNewNsProp_APIParam_2 is the namespace||||null
xmlNewNsProp_APIParam_3 is the xmlNewNsProp_APIParam_3 of the attribute||||null
xmlNewNsProp_APIName returns a pointer to the attribute||||null
xmlNewNsProp_APIParam_4 is the xmlNewNsProp_APIParam_4 of the attribute||||null
Create a new property tagged with a namespace and carried by a xmlNewNsPropEatName_APIParam_1||||null
xmlNewNsPropEatName_APIParam_1 is the holding xmlNewNsPropEatName_APIParam_1||||null
xmlNewNsPropEatName_APIParam_2 is the namespace||||null
xmlNewNsPropEatName_APIParam_3 is the xmlNewNsPropEatName_APIParam_3 of the attribute||||null
xmlNewNsPropEatName_APIName returns a pointer to the attribute||||null
xmlNewNsPropEatName_APIParam_4 is the xmlNewNsPropEatName_APIParam_4 of the attribute||||null
Creation of a processing instruction element||||null
Use xmlDocNewPI preferably to get string interning||||null
xmlNewPI_APIParam_1 is the processing instruction xmlNewPI_APIParam_1||||null
xmlNewPI_APIName returns a pointer to the new node object||||null
xmlNewPI_APIParam_2 is the PI xmlNewPI_APIParam_2||||null
Create a new property carried by a xmlNewProp_APIParam_1||||null
xmlNewProp_APIParam_1 is the holding xmlNewProp_APIParam_1||||null
xmlNewProp_APIParam_2 is the xmlNewProp_APIParam_2 of the attribute||||null
xmlNewProp_APIName returns a pointer to the attribute||||null
xmlNewProp_APIParam_3 is the xmlNewProp_APIParam_3 of the attribute||||null
Creation of a new reference node||||null
xmlNewReference_APIParam_1 is the document||||null
xmlNewReference_APIName returns a pointer to the new node object||||null
xmlNewReference_APIParam_2 is the reference xmlNewReference_APIParam_2 , or the reference string with & and||||null
Creation of a new text node||||null
xmlNewText_APIParam_1 is the text xmlNewText_APIParam_1||||null
xmlNewText_APIName returns a pointer to the new node object||||null
@ns and @content parameters are optional||||null
Creation of a new child element , added at the end of @parent children list||||null
xmlNewTextChild_APIParam_1 is the xmlNewTextChild_APIParam_1 node||||null
xmlNewTextChild_APIParam_3 is the xmlNewTextChild_APIParam_3 of the child||||null
xmlNewTextChild_APIName returns a pointer to the new node object||||null
the newly created element inherits the namespace of @parent||||If @ns is NULL
xmlNewTextLen_APIParam_1 is the text xmlNewTextLen_APIParam_1||||null
xmlNewTextLen_APIParam_2 is the text xmlNewTextLen_APIParam_2||||null
xmlNewTextLen_APIName returns a pointer to the new node object||||null
a child TEXT node will be created containing the string @content||||If @content is non NULL
Creation of a new text node with an extra parameter for the xmlNewTextLen_APIParam_1 length||||null
Use xmlNewChild_APIName will contain entities that need to be preserved||||if @content
xmlNewTextChild_APIParam_2 is a namespace||||if any
xmlNextElementSibling_APIParam_1 is the current xmlNextElementSibling_APIParam_1||||null
Finds the first closest next sibling of the xmlNextElementSibling_APIParam_1 which is an element xmlNextElementSibling_APIParam_1||||null
xmlNextElementSibling_APIName returns the next element sibling or NULL if not available||||null
xmlNewTextChild_APIParam_4 is the text xmlNewTextChild_APIParam_4 of the child||||if any
Append the extra substring to the node xmlNodeAddContent_APIParam_2||||null
xmlNodeAddContent_APIParam_1 is the node being modified||||null
xmlNodeAddContent_APIParam_2 is extra content||||null
Append the extra substring to the node xmlNodeAddContentLen_APIParam_2||||null
xmlNodeAddContentLen_APIParam_1 is the node being modified||||null
xmlNodeAddContentLen_APIParam_2 is extra xmlNodeAddContentLen_APIParam_2||||null
Note the handling of entities references is different than in the W3C DOM element traversal spec||||null
this function , xmlNewTextChild_APIName_APIName , , such as the ampersand , greater-than or less-than signs , are automatically replaced by their XML||||if you need to ensure that reserved XML chars that might appear in @content
Use escaped entity representations||||null
xmlNodeAddContentLen_APIParam_3 is the size of @content||||null
Entity references are substituted||||null
Fills up the xmlNodeBufGetContent_APIParam_1 @buffer with this value||||null
xmlNodeBufGetContent_APIParam_1 is a xmlNodeBufGetContent_APIParam_1||||null
In contrast to xmlNodeSetContent_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported||||null
xmlNodeBufGetContent_APIParam_2 is the node being read||||null
xmlNodeBufGetContent_APIName returns 0 in case of success and -1 in case of error||||null
Dump an XML node , recursive behaviour , children are printed too||||null
xmlNodeDump_APIParam_1 is the XML buffer output||||null
In contrast to xmlNodeSetContentLen_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported||||null
xmlNodeDump_APIParam_2 is the document||||null
xmlNodeDump_APIParam_3 is the current node||||null
xmlNodeDump_APIParam_4 is the imbrication xmlNodeDump_APIParam_4 for indenting||||null
xmlNodeDump_APIName returns the number of bytes written to the buffer or -1 in case of error||||null
xmlNodeDump_APIParam_5 is is formatting allowed||||null
Dump an XML node , recursive behaviour , children are printed too||||null
xmlNodeDumpOutput_APIParam_1 is the XML buffer output||||null
xmlNodeDumpOutput_APIParam_2 is the document||||null
xmlNodeDumpOutput_APIParam_3 is the current node||||null
xmlNodeDumpOutput_APIParam_4 is the imbrication xmlNodeDumpOutput_APIParam_4 for indenting||||null
xmlNodeDumpOutput_APIParam_5 is is formatting allowed||||null
xmlNodeDumpOutput_APIParam_6 is an optional xmlNodeDumpOutput_APIParam_6 string||||null
{}_APIName returns the base as defined in RFC 2396 sections 5.1.1||||null
Searches for the BASE URL||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
The code should work on both XML and HTML document||||null
Note||||null
Base URI within Document Content and 5.1.2||||null
xmlNodeGetBase_APIParam_1 is the document the node pertains to||||null
xmlNodeGetBase_APIParam_2 is the node being checked||||null
Base URI from the Encapsulating Entity However it does not return the document base , use doc->URL||||null
Entity references are substituted||||null
xmlNodeGetContent_APIName returns a new #xmlChar * or NULL if no content is available||||null
xmlNodeGetContent_APIParam_1 is the node being read||||null
xmlNodeGetBase_APIName returns a pointer to the base URL, or NULL if not found it is up to the caller to free xmlNodeGetBase_APIParam_0 with xmlFree||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called it is limited to 2GB and somehow deprecated
Note , use xmlBufNodeDump_APIName instead||||null
it is up to the caller to free xmlNodeGetContent_APIParam_0 with xmlFree||||null
Searches the language of a node , i.e||||null
xmlNodeGetLang_APIParam_1 is the node being checked||||null
the values of the xml||||null
lang attribute or the one carried by the nearest ancestor||||null
Searches the space preserving behaviour of a node , i.e||||null
xmlNodeGetSpacePreserve_APIParam_1 is the node being checked||||null
the values of the xml||||null
xmlNodeGetLang_APIName returns a pointer to the lang value, or NULL if not found it is up to the caller to free xmlNodeGetLang_APIParam_0 with xmlFree||||null
carried directly by this node||||if it is a TEXT node or the aggregate string of the values carried by this node child
Read the value of a node @cur , this can be either the text||||null
space attribute or the one carried by the nearest ancestor||||null
xmlNodeGetSpacePreserve_APIName returns -1 if xmlspace is not inherited, 0 if "default", 1 if "preserve||||null
Is this xmlNodeIsText_APIParam_1 a Text xmlNodeIsText_APIParam_1 ?||||null
xmlNodeIsText_APIParam_1 is the xmlNodeIsText_APIParam_1||||null
xmlNodeListGetRawString_APIParam_1 is the document||||null
xmlNodeIsText_APIName returns 1 yes, 0 no||||null
xmlNodeListGetRawString_APIParam_2 is a Node xmlNodeListGetRawString_APIParam_2||||null
xmlNodeListGetRawString_APIName returns a pointer to the string copy, the caller must free it with xmlFree||||null
xmlNodeListGetRawString_APIParam_3 is should we replace entity contents or show their external form||||null
xmlNodeListGetString_APIParam_1 is the document||||null
xmlNodeListGetString_APIParam_2 is a Node xmlNodeListGetString_APIParam_2||||null
Build the string equivalent to the text contained in the Node xmlNodeListGetString_APIParam_2 made of TEXTs and ENTITY_REFs||||null
xmlNodeListGetString_APIParam_3 is should we replace entity contents or show their external form||||null
Set the base URI of a node , i.e||||null
the value of the xml||||null
xmlNodeListGetString_APIName returns a pointer to the string copy, the caller must free it with xmlFree||||null
base attribute||||null
xmlNodeSetBase_APIParam_1 is the node being changed||||null
xmlNodeSetBase_APIParam_2 is the new base URI||||null
Replace the xmlNodeSetContent_APIParam_2 of a node||||null
Builds the string equivalent to the text contained in the Node xmlNodeListGetRawString_APIParam_2 made of TEXTs and ENTITY_REFs , contrary to xmlNodeListGetString_APIName xmlNodeListGetRawString_APIName does not do any character encoding handling||||null
xmlNodeSetContent_APIParam_1 is the node being modified||||null
xmlNodeSetContent_APIParam_2 is the new value of the content||||null
Replace the xmlNodeSetContentLen_APIParam_2 of a node||||null
carried directly by this node||||if it is a TEXT node or the aggregate string of the values carried by this node child
Read the value of a node , this can be either the text||||null
xmlNodeSetContentLen_APIParam_1 is the node being modified||||null
xmlNodeSetContentLen_APIParam_2 is the new value of the xmlNodeSetContentLen_APIParam_2||||null
xmlNodeSetContentLen_APIParam_3 is the size of @content||||null
Set the language of a node , i.e||||null
the values of the xml||||null
lang attribute||||null
xmlNodeSetLang_APIParam_1 is the node being changed||||null
xmlNodeSetLang_APIParam_2 is the language description||||null
Set the xmlNodeSetName_APIParam_2 of a node||||null
xmlNodeSetName_APIParam_1 is the node being changed||||null
xmlNodeSetName_APIParam_2 is the new tag name||||null
Set the space preserving behaviour of a node , i.e||||null
the value of the xml||||null
space attribute||||null
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp||||null
xmlNodeSetSpacePreserve_APIParam_1 is the node being changed||||null
xmlPreviousElementSibling_APIParam_1 is the current xmlPreviousElementSibling_APIParam_1||||null
Finds the first closest previous sibling of the xmlPreviousElementSibling_APIParam_1 which is an element xmlPreviousElementSibling_APIParam_1||||null
xmlPreviousElementSibling_APIName returns the previous element sibling or NULL if not available||||null
xmlReconciliateNs_APIName checks that all the namespaces declared within the given xmlReconciliateNs_APIParam_2 are properly declared||||null
xmlReconciliateNs_APIParam_1 is the document||||null
The subtree may still hold pointers to namespace declarations outside the subtree or invalid/masked||||null
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp||||null
As much as possible the function try to reuse the existing namespaces found in the new environment||||null
xmlReconciliateNs_APIParam_2 is a node defining the subtree to reconciliate||||null
xmlReconciliateNs_APIName returns the number of namespace declarations created or -1 in case of error||||null
xmlRemoveProp_APIParam_1 is an attribute||||null
xmlRemoveProp_APIName returns 0 if success and -1 in case of error||||null
Note the handling of entities references is different than in the W3C DOM element traversal spec||||null
xmlReplaceNode_APIParam_1 is the xmlReplaceNode_APIParam_1 node||||null
the new namespaces are redeclared on @tree at the top of the given subtree||||If not possible
Unlink and free one attribute , all the content is freed too Note this does not work for namespace definition attributes||||null
Unlink the xmlReplaceNode_APIParam_1 node from its current context , prune the new one at the same place||||null
xmlNodeSetSpacePreserve_APIParam_2 is the xmlspace value -LRB- `` 0 '' default , 1 `` preserve||||null
xmlReplaceNode_APIParam_2 is the node||||null
xmlReplaceNode_APIName returns the @old node||||null
Dump an XML document to a file||||null
xmlSaveFile_APIParam_1 is the xmlSaveFile_APIParam_1||||null
xmlSaveFile_APIParam_2 is the document||||null
xmlSaveFile_APIName returns the number of bytes written or -1 in case of failure||||null
Dump an XML document , converting it to the given xmlSaveFileEnc_APIParam_3||||null
xmlSaveFileEnc_APIParam_1 is the xmlSaveFileEnc_APIParam_1||||null
xmlSaveFileEnc_APIParam_2 is the document||||null
xmlSaveFileEnc_APIName returns the number of bytes written or -1 in case of failure||||null
xmlSaveFileEnc_APIParam_3 is the name of an xmlSaveFileEnc_APIParam_3||||null
Will use compression and enabled||||if compiled in
it is first unlinked from its existing context||||If @cur was already inserted in a document
Dump an XML document to an I/O buffer||||null
Warning !||||null
xmlSaveFileTo_APIParam_1 is an output I/O buffer||||null
xmlSaveFileTo_APIParam_2 is the document||||null
This call xmlOutputBufferClose_APIName on xmlSaveFileTo_APIParam_1 which is not available after this call||||null
xmlSaveFileTo_APIName returns the number of bytes written or -1 in case of failure||||null
Dump an XML document to a file||||null
xmlSaveFormatFile_APIParam_1 is the xmlSaveFormatFile_APIParam_1||||null
xmlSaveFormatFile_APIParam_2 is the document||||null
xmlSaveFormatFile_APIParam_3 is should formatting spaces been added||||null
xmlSaveFormatFile_APIName returns the number of bytes written or -1 in case of failure||||null
xmlSaveFileTo_APIParam_3 is the xmlSaveFileTo_APIParam_3||||if any assuming the I/O layer handles the trancoding
Dump an XML document to a file or an URL||||null
Will use compression and enabled||||if compiled in
xmlSaveFormatFileEnc_APIParam_1 is the xmlSaveFormatFileEnc_APIParam_1 or URL to output||||null
the stdout file is used||||If @filename is '' - ''
xmlSaveFormatFileEnc_APIParam_2 is the document being saved||||null
the document will be indented on output||||If @format is set
xmlSaveFormatFileEnc_APIParam_3 is the name of the xmlSaveFormatFileEnc_APIParam_3 to use or NULL||||null
xmlSaveFormatFileEnc_APIName returns the number of bytes written or -1 in case of error||||null
xmlSaveFormatFileEnc_APIParam_4 is should formatting spaces be added||||null
Dump an XML document to an I/O buffer||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
Warning !||||null
This call xmlOutputBufferClose_APIName on xmlSaveFormatFileTo_APIParam_1 which is not available after this call||||null
xmlSaveFormatFileTo_APIParam_1 is an output I/O buffer||||null
xmlSaveFormatFileTo_APIParam_2 is the document||||null
xmlSaveFormatFileTo_APIParam_4 is should formatting spaces been added||||null
xmlSaveFormatFileTo_APIName returns the number of bytes written or -1 in case of failure||||null
that @format = 1 provide node indenting||||only if xmlIndentTreeOutput = 1 or xmlKeepBlanksDefault was called
Note||||null
Search a Ns registered under a given name space for a document||||null
@nameSpace can be NULL , this is a search for the default namespace||||null
the stdout file is used||||If @filename is '' - ''
We do not allow to cross entities boundaries||||null
xmlSaveFormatFileTo_APIParam_3 is the xmlSaveFormatFileTo_APIParam_3||||if any assuming the I/O layer handles the trancoding
A warning is generated to cover this case||||null
xmlSearchNs_APIParam_1 is the document||||null
xmlSearchNs_APIParam_2 is the current xmlSearchNs_APIParam_2||||null
xmlSearchNs_APIName returns the namespace pointer or NULL||||null
xmlSearchNs_APIParam_3 is the namespace prefix||||null
Search a Ns aliasing a given URI||||null
xmlSearchNsByHref_APIParam_1 is the document||||null
xmlSearchNsByHref_APIParam_2 is the current xmlSearchNsByHref_APIParam_2||||null
xmlSearchNsByHref_APIName returns the namespace pointer or NULL||||null
xmlSearchNsByHref_APIParam_3 is the namespace value||||null
Set the buffer allocation method||||null
xmlSetBufferAllocationScheme_APIParam_1 is allocation method to use||||null
xmlSetCompressMode_APIParam_1 is the compression ratio||||null
set the default compression xmlSetCompressMode_APIParam_1 used , ZLIB based Correct values||||null
0 to 9||||null
xmlSetDocCompressMode_APIParam_1 is the document||||null
xmlSetDocCompressMode_APIParam_2 is the compression ratio||||null
xmlSetListDoc_APIParam_1 is the first element||||null
set the compression ratio for a document , ZLIB based Correct values||||null
0 to 9||||null
xmlSetListDoc_APIParam_2 is the document||||null
update all nodes in the xmlSetListDoc_APIParam_1 to point to the right document||||null
Associate a namespace to a xmlSetNs_APIParam_1 , a posteriori||||null
xmlSetNs_APIParam_1 is a xmlSetNs_APIParam_1 in the document||||null
xmlSetNs_APIParam_2 is a namespace pointer||||null
Set an attribute carried by a xmlSetNsProp_APIParam_1||||null
xmlSetNsProp_APIParam_1 is the xmlSetNsProp_APIParam_1||||null
The xmlSetNsProp_APIParam_2 structure must be in scope , this is not checked||||null
xmlSetNsProp_APIParam_2 is the namespace definition||||null
Types are XML_BUFFER_ALLOC_EXACT - use exact sizes , keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer||||when extra needed , improves performance
xmlSetNsProp_APIParam_3 is the attribute xmlSetNsProp_APIParam_3||||null
xmlSetNsProp_APIParam_4 is the attribute xmlSetNsProp_APIParam_4||||null
xmlSetNsProp_APIName returns the attribute pointer||||null
Set an attribute carried by a xmlSetProp_APIParam_1||||null
xmlSetProp_APIParam_1 is the xmlSetProp_APIParam_1||||null
xmlSetProp_APIParam_2 is the attribute xmlSetProp_APIParam_2||||null
xmlSetProp_APIParam_3 is the attribute xmlSetProp_APIParam_3||||null
xmlSetProp_APIName returns the attribute pointer||||null
update all nodes under the xmlSetTreeDoc_APIParam_1 to point to the right document||||null
xmlSetTreeDoc_APIParam_1 is the top element||||null
xmlSetTreeDoc_APIParam_2 is the document||||null
parse an XML qualified xmlSplitQName2_APIParam_1 string QName||||null
= ?||||null
xmlSplitQName2_APIParam_1 is the full QName||||null
xmlSplitQName2_APIParam_2 is a xmlChar **||||null
xmlSplitQName2_APIName returns NULL if the xmlSplitQName2_APIParam_1 does not have a xmlSplitQName2_APIParam_2||||null
Otherwise, returns the local part, and xmlSplitQName2_APIParam_2 is updated to get the Prefix||||null
Both the return value and the xmlSplitQName2_APIParam_2 must be freed by the caller||||null
parse an XML qualified xmlSplitQName3_APIParam_1 string , i||||null
xmlSplitQName3_APIParam_1 is the full QName||||null
xmlSplitQName3_APIParam_2 is an int *||||null
the corresponding namespace-binding will be used , if in scope||||If @name has a prefix
LocalPart Prefix||||null
Parse the xmlStringGetNodeList_APIParam_2 string and build the node list associated||||null
= NCName LocalPart||||null
= NCName||||null
it is an error it there no such ns-binding for the prefix in scope||||null
Should produce a flat tree with only TEXTs and ENTITY_REFs||||null
xmlStringGetNodeList_APIParam_1 is the document||||null
xmlStringGetNodeList_APIParam_2 is the xmlStringGetNodeList_APIParam_2 of the attribute||||null
xmlStringGetNodeList_APIName returns a pointer to the first child||||null
Parse the xmlStringLenGetNodeList_APIParam_2 string and build the node list associated||||null
xmlStringLenGetNodeList_APIParam_1 is the document||||null
Should produce a flat tree with only TEXTs and ENTITY_REFs||||null
xmlStringLenGetNodeList_APIParam_2 is the xmlStringLenGetNodeList_APIParam_2 of the text||||null
xmlStringLenGetNodeList_APIName returns a pointer to the first child||||null
xmlStringLenGetNodeList_APIParam_3 is the length of the string xmlStringLenGetNodeList_APIParam_2||||null
xmlTextConcat_APIParam_1 is the xmlTextConcat_APIParam_1||||null
xmlTextConcat_APIParam_2 is the xmlTextConcat_APIParam_2||||null
Concat the given string at the end of the existing xmlTextConcat_APIParam_1 xmlTextConcat_APIParam_2||||null
xmlTextConcat_APIParam_3 is @content length||||null
Merge two text nodes into one||||null
xmlTextMerge_APIParam_1 is the xmlTextMerge_APIParam_1 text node||||null
xmlTextMerge_APIName returns the xmlTextMerge_APIParam_1 text node augmented||||null
xmlTextMerge_APIParam_2 is the xmlTextMerge_APIParam_2 text node being merged||||null
xmlUnlinkNode_APIParam_1 is the node||||null
Remove an attribute carried by a xmlUnsetNsProp_APIParam_1||||null
xmlUnsetNsProp_APIParam_1 is the xmlUnsetNsProp_APIParam_1||||null
xmlUnsetNsProp_APIParam_2 is the namespace definition||||null
xmlUnsetNsProp_APIParam_3 is the attribute xmlUnsetNsProp_APIParam_3||||null
xmlUnsetNsProp_APIName returns 0 if successful, -1 if not found||||null
Note that namespace nodes can not be unlinked as they do not have pointer to their parent||||null
Remove an attribute carried by a xmlUnsetProp_APIParam_1||||null
This handles only attributes in no namespace||||null
xmlUnsetProp_APIParam_1 is the xmlUnsetProp_APIParam_1||||null
xmlUnsetProp_APIParam_2 is the attribute xmlUnsetProp_APIParam_2||||null
xmlUnsetProp_APIName returns 0 if successful, -1 if not found||||null
Check that a xmlValidateNCName_APIParam_1 conforms to the lexical xmlValidateNCName_APIParam_2 of NCName||||null
xmlValidateNCName_APIParam_1 is the xmlValidateNCName_APIParam_1 to check||||null
xmlValidateNCName_APIParam_2 allow spaces in front and end of the string||||null
xmlValidateNMToken_APIParam_1 is the xmlValidateNMToken_APIParam_1 to check||||null
Check that a xmlValidateNMToken_APIParam_1 conforms to the lexical xmlValidateNMToken_APIParam_2 of NMToken||||null
xmlValidateNMToken_APIParam_2 allow spaces in front and end of the string||||null
xmlValidateName_APIParam_1 is the xmlValidateName_APIParam_1 to check||||null
Check that a xmlValidateName_APIParam_1 conforms to the lexical xmlValidateName_APIParam_2 of Name||||null
xmlValidateName_APIParam_2 allow spaces in front and end of the string||||null
the node is not freed||||If one need to free the node
Unlink a node from it is current context , , use xmlFreeNode_APIName routine after the unlink to discard it||||null
Check that a xmlValidateQName_APIParam_1 conforms to the lexical xmlValidateQName_APIParam_2 of QName||||null
xmlValidateQName_APIParam_1 is the xmlValidateQName_APIParam_1 to check||||null
Daniel Veillard||||null
xmlValidateQName_APIParam_2 allow spaces in front and end of the string||||null
xmlModuleClose_APIParam_1 is the xmlModuleClose_APIParam_1 handle||||null
xmlModuleFree_APIParam_1 is the xmlModuleFree_APIParam_1 handle||||null
xmlModuleFree_APIName returns 0 in case of success, -1 in case of argument error||||null
The close operations unload the associated xmlModuleClose_APIParam_1 and free the data associated to the xmlModuleClose_APIParam_1||||null
xmlModuleOpen_APIParam_2 are not yet implemented||||null
xmlModuleClose_APIName returns 0 in case of success, -1 in case of argument error and -2 if the xmlModuleClose_APIParam_1 could not be closed/unloaded||||null
xmlModuleOpen_APIParam_1 is the module xmlModuleOpen_APIParam_1||||null
xmlModuleOpen_APIName returns a handle for the module or NULL in case of error||||null
xmlModuleOpen_APIParam_2 is a set of xmlModuleOption||||null
xmlModuleSymbol_APIParam_1 is the xmlModuleSymbol_APIParam_1||||null
The free operations free the data associated to the xmlModuleFree_APIParam_1 but does not unload the associated shared library which may still be in use||||null
xmlModuleSymbol_APIParam_2 is the xmlModuleSymbol_APIParam_2 of the xmlModuleSymbol_APIParam_3||||null
xmlModuleSymbol_APIParam_3 is the resulting xmlModuleSymbol_APIParam_3 address||||null
Daniel Veillard||||null
We canot guarantee that an UTF-8 string would work , which is why xmlModuleOpen_APIParam_1 is a const char * and not a const xmlChar *||||null
xmlModuleSymbol_APINamereturns 0 if the xmlModuleSymbol_APIParam_3 was found, or -1 in case of error||||null
UTF8ToHtml_APIParam_2 is the length of @out||||null
UTF8ToHtml_APIParam_1 is a pointer to an array of bytes to store the result||||null
UTF8ToHtml_APIParam_3 is a pointer to an array of UTF-8 chars||||null
UTF8ToHtml_APIParam_4 is the length of @in||||null
We canot guarantee that an UTF-8 string would work , which is why xmlModuleSymbol_APIParam_2 is a const char * and not a const xmlChar *||||null
The value of @outlen after return is the number of octets consumed||||null
htmlAttrAllowed_APIParam_1 is HTML element||||null
htmlAttrAllowed_APIParam_2 is HTML attribute||||null
htmlAttrAllowed_APIName returns one of HTML_REQUIRED, HTML_VALID, HTML_DEPRECATED, HTML_INVALID||||null
Take a block of UTF-8 chars UTF8ToHtml_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars UTF8ToHtml_APIParam_1||||null
Checks Has full knowledge of Required and Deprecated attributes||||null
The list is kept in htmlStartClose array||||null
The HTML DTD allows a tag to implicitly close other tags||||null
htmlAutoCloseTag_APIParam_1 is the HTML document||||null
htmlAutoCloseTag_APIParam_2 is The tag htmlAutoCloseTag_APIParam_2||||null
htmlAutoCloseTag_APIParam_3 is the HTML element||||null
Create a parser context for an HTML in-memory document||||null
htmlAutoCloseTag_APIName checks if the element or one of The list is children would autoclose the given tag||||null
htmlCreateMemoryParserCtxt_APIParam_1 is a pointer to a char array||||null
htmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL||||null
htmlCreateMemoryParserCtxt_APIParam_2 is the htmlCreateMemoryParserCtxt_APIParam_2 of the array||||null
htmlCreatePushParserCtxt_APIParam_2 is The user data returned on SAX callbacks||||null
htmlCreatePushParserCtxt_APIParam_1 is a SAX handler||||null
htmlCreatePushParserCtxt_APIParam_3 is a pointer to an array of chars||||null
htmlCreatePushParserCtxt_APIParam_4 is number of chars in the array||||null
htmlCreatePushParserCtxt_APIParam_5 is an optional file name or URI||||null
htmlCreatePushParserCtxt_APIName returns the new parser context or NULL||||null
htmlCreatePushParserCtxt_APIParam_6 is an optional encoding||||null
parse an XML in-memory document and build a tree||||null
This reuses the existing @ctxt parser context||||null
htmlCtxtReadDoc_APIParam_1 is an HTML parser context||||null
htmlCtxtReadDoc_APIParam_2 is a pointer to a zero terminated string||||null
Create a parser context for using the HTML parser in push mode The value of @filename is used for fetching external entities and error/warning reports||||null
htmlCtxtReadDoc_APIParam_3 is the base htmlCtxtReadDoc_APIParam_3 to use for the document||||null
htmlCtxtReadDoc_APIParam_4 is the document htmlCtxtReadDoc_APIParam_4 , or NULL||||null
htmlCtxtReadDoc_APIName returns the resulting document tree||||null
htmlCtxtReadDoc_APIParam_5 is a combination of htmlParserOption||||null
parse an XML from a file descriptor and build a tree||||null
This reuses the existing @ctxt parser context||||null
htmlCtxtReadFd_APIParam_1 is an HTML parser context||||null
htmlCtxtReadFd_APIParam_2 is an open file descriptor||||null
htmlCtxtReadFd_APIParam_3 is the base htmlCtxtReadFd_APIParam_3 to use for the document||||null
htmlCtxtReadFd_APIParam_4 is the document htmlCtxtReadFd_APIParam_4 , or NULL||||null
htmlCtxtReadFd_APIName returns the resulting document tree||||null
htmlCtxtReadFd_APIParam_5 is a combination of htmlParserOption||||null
parse an XML file from the filesystem or the network||||null
This reuses the existing @ctxt parser context||||null
htmlCtxtReadFile_APIParam_1 is an HTML parser context||||null
htmlCtxtReadFile_APIParam_2 is a file or URL||||null
htmlCtxtReadFile_APIParam_3 is the document htmlCtxtReadFile_APIParam_3 , or NULL||||null
htmlCtxtReadFile_APIName returns the resulting document tree||||null
htmlCtxtReadFile_APIParam_4 is a combination of htmlParserOption||||null
This reuses the existing @ctxt parser context||||null
htmlCtxtReadIO_APIParam_1 is an HTML parser context||||null
parse an HTML document from I/O functions and source and build a tree||||null
htmlCtxtReadIO_APIParam_2 is an I/O read function||||null
htmlCtxtReadIO_APIParam_3 is an I/O close function||||null
htmlCtxtReadIO_APIParam_4 is an I/O handler||||null
htmlCtxtReadIO_APIParam_5 is the base htmlCtxtReadIO_APIParam_5 to use for the document||||null
htmlCtxtReadIO_APIParam_6 is the document htmlCtxtReadIO_APIParam_6 , or NULL||||null
htmlCtxtReadIO_APIName returns the resulting document tree||||null
htmlCtxtReadIO_APIParam_7 is a combination of htmlParserOption||||null
parse an XML in-memory document and build a tree||||null
This reuses the existing @ctxt parser context||||null
htmlCtxtReadMemory_APIParam_1 is an HTML parser context||||null
htmlCtxtReadMemory_APIParam_2 is a pointer to a char array||||null
htmlCtxtReadMemory_APIParam_3 is the htmlCtxtReadMemory_APIParam_3 of the array||||null
htmlCtxtReadMemory_APIParam_4 is the base htmlCtxtReadMemory_APIParam_4 to use for the document||||null
htmlCtxtReadMemory_APIParam_5 is the document htmlCtxtReadMemory_APIParam_5 , or NULL||||null
htmlCtxtReadMemory_APIName returns the resulting document tree||||null
htmlCtxtReadMemory_APIParam_6 is a combination of htmlParserOption||||null
Reset a parser context||||null
htmlCtxtReset_APIParam_1 is an HTML parser context||||null
Applies the htmlCtxtUseOptions_APIParam_2 to the parser context||||null
htmlCtxtUseOptions_APIParam_1 is an HTML parser context||||null
htmlCtxtUseOptions_APIParam_2 is a combination of htmlParserOption||||null
Note - does not check for deprecated elements||||null
htmlElementAllowedHere_APIParam_1 is HTML htmlElementAllowedHere_APIParam_1 element||||null
htmlElementAllowedHere_APIParam_2 is HTML element||||null
htmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented htmlCtxtUseOptions_APIParam_2 in case of error||||null
htmlElementStatusHere_APIParam_1 is HTML htmlElementStatusHere_APIParam_1 element||||null
htmlElementStatusHere_APIParam_2 is HTML element||||null
htmlElementStatusHere_APIName returns one of HTML_VALID, HTML_DEPRECATED, HTML_INVALID||||null
htmlEncodeEntities_APIParam_2 is the length of @out||||null
htmlEncodeEntities_APIParam_3 is a pointer to an array of UTF-8 chars||||null
htmlEncodeEntities_APIParam_1 is a pointer to an array of bytes to store the result||||null
htmlEncodeEntities_APIParam_4 is the length of @in||||null
The value of @outlen after return is the number of octets consumed||||null
htmlEncodeEntities_APIParam_5 is the quote character to escape or zero||||null
htmlEntityLookup_APIParam_1 is the entity htmlEntityLookup_APIParam_1||||null
Lookup the given entity in EntitiesTable TODO||||null
Take a block of UTF-8 chars htmlEncodeEntities_APIParam_3 and try to convert it to an ASCII plus HTML entities block of chars htmlEncodeEntities_APIParam_1||||null
htmlEntityValueLookup_APIParam_1 is the entity unicode htmlEntityValueLookup_APIParam_1||||null
the linear scan is really ugly , an hash table is really needed||||null
Free all the memory used by a parser context||||null
Lookup the given entity in EntitiesTable TODO||||null
htmlFreeParserCtxt_APIParam_1 is an HTML parser context||||null
Set and return the previous value for handling HTML omitted tags||||null
the linear scan is really ugly , an hash table is really needed||||null
However the parsed document in ctxt - > myDoc is not freed||||null
htmlHandleOmittedElem_APIParam_1 is int 0 or 1. htmlHandleOmittedElem_APIName returns the last value for 0 for no handling, 1 for auto insertion||||null
The HTML DTD allows a tag to implicitly close other tags||||null
The list is kept in htmlStartClose array||||null
htmlIsAutoClosed_APIParam_1 is the HTML document||||null
htmlIsAutoClosed_APIParam_2 is the HTML element||||null
htmlIsAutoClosed_APIName checks if a tag is autoclosed by one of a tag is child||||null
htmlIsScriptAttribute_APIParam_1 is an attribute htmlIsScriptAttribute_APIParam_1||||null
htmlNewParserCtxt_APIName returns the htmlParserCtxtPtr or NULL in case of allocation error||||null
Allocate and initialize a new parser context||||null
Experimental||||null
htmlNodeStatus_APIName returns for Element nodes, a return from htmlElementAllowedHere  or htmlElementStatusHere||||null
htmlNodeStatus_APIParam_1 is an htmlNodePtr in a tree||||null
for Attribute nodes, a return from htmlAttrAllowed for other nodes, HTML_NA (no checks performed||||null
Check||||if an attribute is of content type Script
htmlParseCharRef_APIParam_1 is an HTML parser context||||null
Parse a Chunk of memory||||null
htmlParseChunk_APIParam_1 is an HTML parser context||||null
htmlParseChunk_APIParam_2 is an char array||||null
htmlParseCharRef_APIName returns the value parsed (as an int||||null
htmlParseChunk_APIParam_3 is the htmlParseChunk_APIParam_3 in byte of the htmlParseChunk_APIParam_2||||null
htmlParseChunk_APIParam_4 is last htmlParseChunk_APIParam_2 indicator||||null
parse an HTML in-memory document and build a tree||||null
htmlParseDoc_APIName returns the resulting document tree||||null
htmlParseDoc_APIParam_1 is a pointer to an array of xmlChar||||null
parse an HTML document||||null
htmlParseDoc_APIParam_2 is a free form C string describing the HTML document htmlParseDoc_APIParam_2 , or NULL||||null
htmlParseDocument_APIParam_1 is an HTML parser context||||null
htmlParseDocument_APIName returns 0, -1 in case of error||||null
the parser context is augmented as a result of the parsing||||null
htmlParseElement_APIParam_1 is an HTML parser context||||null
htmlParseEntityRef_APIParam_1 is an HTML parser context||||null
htmlParseEntityRef_APIParam_2 is location to store the entity name||||null
parse an HTML file and build a tree||||null
htmlParseFile_APIParam_1 is the htmlParseFile_APIParam_1||||null
htmlParseFile_APIName returns the resulting document tree||||null
parse an XML in-memory document and build a tree||||null
htmlParseFile_APIParam_2 is a free form C string describing the HTML document htmlParseFile_APIParam_2 , or NULL||||null
parse an HTML element , this is highly recursive this is kept for compatibility with previous code versions element||||null
htmlReadDoc_APIParam_1 is a pointer to a zero terminated string||||null
= EmptyElemTag | STag content ETag Attribute||||null
htmlReadDoc_APIParam_2 is the base htmlReadDoc_APIParam_2 to use for the document||||null
= Name Eq AttValue||||null
htmlReadDoc_APIParam_3 is the document htmlReadDoc_APIParam_3 , or NULL||||null
htmlReadDoc_APIName returns the resulting document tree||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
htmlReadDoc_APIParam_4 is a combination of htmlParserOption||||null
parse an XML from a file descriptor and build a tree||||null
htmlReadFd_APIParam_1 is an open file descriptor||||null
htmlReadFd_APIParam_2 is the base htmlReadFd_APIParam_2 to use for the document||||null
htmlReadFd_APIParam_3 is the document htmlReadFd_APIParam_3 , or NULL||||null
parse an HTML ENTITY references EntityRef||||null
htmlReadFd_APIParam_4 is a combination of htmlParserOption||||null
htmlReadFd_APIName returns the resulting document tree||||null
= ' & ' Name '||||null
parse an XML file from the filesystem or the network||||null
htmlReadFile_APIParam_1 is a file or URL||||null
htmlReadFile_APIParam_2 is the document htmlReadFile_APIParam_2 , or NULL||||null
htmlReadFile_APIParam_3 is a combination of htmlParserOption||||null
htmlReadFile_APIName returns the resulting document tree||||null
parse an HTML document from I/O functions and source and build a tree||||null
htmlReadIO_APIParam_1 is an I/O read function||||null
htmlReadIO_APIParam_2 is an I/O close function||||null
htmlReadIO_APIParam_3 is an I/O handler||||null
htmlReadIO_APIParam_4 is the base htmlReadIO_APIParam_4 to use for the document||||null
htmlReadIO_APIParam_5 is the document htmlReadIO_APIParam_5 , or NULL||||null
htmlReadIO_APIName returns the resulting document tree||||null
htmlReadIO_APIParam_6 is a combination of htmlParserOption||||null
parse an XML in-memory document and build a tree||||null
parse Reference declarations CharRef||||null
htmlReadMemory_APIParam_1 is a pointer to a char array||||null
htmlReadMemory_APIParam_2 is the htmlReadMemory_APIParam_2 of the array||||null
= ' & # ' + '||||null
htmlReadMemory_APIParam_3 is the base htmlReadMemory_APIParam_3 to use for the document||||null
htmlReadMemory_APIParam_4 is the document htmlReadMemory_APIParam_4 , or NULL||||null
htmlReadMemory_APIName returns the resulting document tree||||null
htmlReadMemory_APIParam_5 is a combination of htmlParserOption||||null
Parse an HTML in-memory document||||null
' | ' & # x ' + '||||null
If htmlSAXParseDoc_APIParam_3 is NULL, fallback to the default DOM behavior and return a tree||||null
htmlSAXParseDoc_APIParam_1 is a pointer to an array of xmlChar||||null
htmlSAXParseDoc_APIParam_3 is the SAX handler block||||null
htmlSAXParseDoc_APIParam_2 is a free form C string describing the HTML document htmlSAXParseDoc_APIParam_2 , or NULL||||null
htmlSAXParseDoc_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed||||null
parse an HTML file and build a tree||||null
use the SAX callbacks to handle parse events||||If htmlSAXParseDoc_APIParam_3 is not NULL
It use the given SAX function block to handle the parsing callback||||null
htmlSAXParseFile_APIParam_1 is the htmlSAXParseFile_APIParam_1||||null
htmlSAXParseFile_APIParam_3 is the SAX handler block||||null
htmlSAXParseDoc_APIParam_4 is||||if using SAX , this pointer will be provided on callbacks
htmlSAXParseFile_APIName returns the resulting document tree unless SAX is NULL or the document is not well formed||||null
htmlSAXParseFile_APIParam_2 is a free form C string describing the HTML document htmlSAXParseFile_APIParam_2 , or NULL||||null
Lookup the HTML htmlTagLookup_APIParam_1 in the ElementTable||||null
htmlTagLookup_APIParam_1 is The htmlTagLookup_APIParam_1 name in lowercase||||null
htmlTagLookup_APINamereturns the related htmlElemDescPtr or NULL if not found||||null
is NULL , fallback to the default DOM tree building routines||||If htmlSAXParseFile_APIParam_3
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
Daniel Veillard||||null
See xmlLinkGetData returns||||null
xmlLinkGetData_APIParam_1 is a link||||null
xmlLinkGetData_APIName returns a pointer to the data referenced from this link||||null
xmlListAppend_APIParam_1 is a list||||null
htmlSAXParseFile_APIParam_4 is||||if using SAX , this pointer will be provided on callbacks
xmlListAppend_APIParam_2 is the xmlListAppend_APIParam_2||||null
Insert xmlListAppend_APIParam_2 in the ordered list at the end for this value||||null
Remove the all data in the list||||null
xmlListAppend_APIName returns 0 in case of success, 1 in case of failure||||null
xmlListClear_APIParam_1 is a list||||null
xmlListCopy_APIParam_1 is the new list||||null
xmlListCopy_APIParam_2 is the xmlListCopy_APIParam_2 list||||null
Move all the element from the xmlListCopy_APIParam_2 list in the new list||||null
Create a new list||||null
xmlListCreate_APIName returns the new list or NULL in case of error||||null
xmlListCopy_APIName returns 0 in case of success 1 in case of error||||null
xmlListDup_APIName returns a new copy of the list or NULL in case of error||||null
xmlListEnd_APIName returns the last element in the list, or NULL||||null
xmlListEmpty_APIName returns 1 if the list is empty, 0 if not empty and -1 in case of error||||null
xmlListFront_APIName returns the first element in the list, or NULL||||null
Duplicate the list||||null
xmlListCreate_APIParam_2 is an optional comparison function||||null
xmlListDelete_APIParam_1 is a list||||null
xmlListDup_APIParam_1 is the list||||null
xmlListDeallocator_APIParam_1 is the data to deallocate||||null
Is the list empty ?||||null
Callback function used to compare 2 data||||null
xmlListCreate_APIParam_1 is an optional xmlListCreate_APIParam_1 function||||null
xmlListFront_APIParam_1 is a list||||null
xmlListEnd_APIParam_1 is a list||||null
xmlListInsert_APIParam_1 is a list||||null
xmlListEmpty_APIParam_1 is a list||||null
Deletes the list and its associated data||||null
xmlListDataCompare_APIParam_1 is the first data||||null
xmlListDataCompare_APIParam_2 is the second data||||null
xmlListInsert_APIParam_2 is the xmlListInsert_APIParam_2||||null
Get the last element in the list||||null
Callback function used to free data from a list||||null
xmlListInsert_APIName returns 0 in case of success, 1 in case of failure||||null
Get the first element in the list||||null
Insert xmlListInsert_APIParam_2 in the ordered list at the beginning for this value||||null
xmlListMerge_APIParam_1 is the original list||||null
xmlListMerge_APIParam_2 is the new list||||null
Removes the last element in the list||||null
xmlListPopBack_APIParam_1 is a list||||null
xmlListPopFront_APIParam_1 is a list||||null
include all the elements of the second list in the first one and clear the second list||||null
Removes the first element in the list||||null
xmlListPushBack_APIParam_1 is a list||||null
xmlListPushBack_APIParam_2 is new xmlListPushBack_APIParam_2||||null
add the new xmlListPushBack_APIParam_2 at the end of the list||||null
xmlListPushFront_APIParam_1 is a list||||null
add the new xmlListPushFront_APIParam_2 at the beginning of the list||||null
xmlListPushFront_APIParam_2 is new xmlListPushFront_APIParam_2||||null
Remove the all instance associated to xmlListRemoveAll_APIParam_2 in the list||||null
xmlListRemoveAll_APIParam_1 is a list||||null
xmlListRemoveAll_APIParam_2 is list xmlListRemoveAll_APIParam_2||||null
xmlListRemoveAll_APIName returns the number of deallocation, or 0 if not found||||null
Remove the first instance associated to xmlListRemoveFirst_APIParam_2 in the list||||null
xmlListRemoveFirst_APIParam_1 is a list||||null
xmlListRemoveFirst_APIName returns 1 if a deallocation occurred, or 0 if not found||||null
xmlListRemoveFirst_APIParam_2 is list xmlListRemoveFirst_APIParam_2||||null
xmlListRemoveLast_APIParam_1 is a list||||null
xmlListRemoveLast_APIParam_2 is list xmlListRemoveLast_APIParam_2||||null
Remove the last instance associated to xmlListRemoveLast_APIParam_2 in the list||||null
xmlListRemoveLast_APIName returns 1 if a deallocation occurred, or 0 if not found||||null
Reverse the order of the elements in the list||||null
xmlListReverse_APIParam_1 is a list||||null
xmlListReverseSearch_APIParam_1 is a list||||null
Search the list in reverse order for an existing value of @data||||null
xmlListReverseSearch_APIName returns the value associated to @data or NULL in case of error||||null
xmlListReverseSearch_APIParam_2 is a search value||||null
xmlListReverseWalk_APIParam_1 is a list||||null
xmlListReverseWalk_APIParam_2 is a processing function||||null
xmlListReverseWalk_APIParam_3 is a xmlListReverseWalk_APIParam_3 parameter passed to the xmlListReverseWalk_APIParam_2 function||||null
Search the list for an existing value of @data||||null
Walk all the element of the list in reverse order and apply the xmlListReverseWalk_APIParam_2 function to it||||null
xmlListSearch_APIParam_1 is a list||||null
xmlListSearch_APIParam_2 is a search value||||null
xmlListSearch_APIName returns the value associated to @data or NULL in case of error||||null
Get the number of elements in the list||||null
xmlListSize_APIParam_1 is a list||||null
xmlListSize_APIName returns the number of elements in the list or -1 in case of error||||null
Sort all the elements in the list||||null
xmlListSort_APIParam_1 is a list||||null
xmlListWalk_APIParam_1 is a list||||null
xmlListWalk_APIParam_2 is a processing function||||null
xmlListWalk_APIParam_3 is a xmlListWalk_APIParam_3 parameter passed to the xmlListWalk_APIParam_2 function||||null
xmlListWalker_APIParam_1 is the xmlListWalker_APIParam_1 found in the list||||null
Walk all the element of the first from first to last and apply the xmlListWalk_APIParam_2 function to the xmlListWalk_APIParam_2 function||||null
xmlListWalker_APIParam_2 is extra xmlListWalker_APIParam_2 provided xmlListWalker_APIParam_1 to the walker||||null
Daniel Veillard||||null
Create a buffered parser output||||null
xmlAllocOutputBuffer_APIName returns the new parser output or NULL||||null
xmlAllocOutputBuffer_APIParam_1 is the encoding converter or NULL||||null
Create a buffered parser input for progressive parsing||||null
Callback function used||||when walking a list with xmlListWalk_APIName
xmlAllocParserInputBuffer_APIName returns the new parser input or NULL||||null
xmlCheckFilename_APIParam_1 is the xmlCheckFilename_APIParam_1 to check||||null
xmlCheckFilename_APIName returns 1. if stat fails, returns 0||||null
xmlCheckHTTPInput_APIParam_1 is an XML parser context||||null
xmlCheckHTTPInput_APIName returns the input or NULL in case of HTTP error||||null
xmlCheckHTTPInput_APIParam_2 is an XML parser input||||null
xmlAllocParserInputBuffer_APIParam_1 is the charset encoding||||if known
clears the entire input callback table||||null
function checks to see||||if @path is a valid source for XML
this includes the compiled-in I/O||||null
||||if stat is not available on the target machine
clears the entire output callback table||||null
this includes the compiled-in I/O callbacks||||null
Close an I/O channel||||null
xmlFileClose_APIName returns 0 or -1 in case of error||||null
It also checks for HTTP errors in which case the input is cleanly freed up and an appropriate error is raised in context||||null
xmlFileClose_APIParam_1 is the I/O xmlFileClose_APIParam_1||||null
input from FILE *||||null
xmlFileMatch_APIParam_1 is the URI for matching||||null
xmlFileOpen_APIName returns a handler or NULL in case or failure||||null
xmlFileOpen_APIParam_1 is the URI for matching||||null
Read @len bytes to @buffer from the I/O channel||||null
Check an input in case it was created from an HTTP stream , in that case it will handle encoding and update of the base URL in case of redirection||||null
xmlFileRead_APIParam_1 is the I/O xmlFileRead_APIParam_1||||null
xmlFileRead_APIParam_2 is where to drop data||||null
xmlFileRead_APIName returns the number of bytes written or < 0 in case of failure||||null
xmlFileRead_APIParam_3 is number of bytes to write||||null
Free up the memory used by a buffered parser input||||null
xmlFreeParserInputBuffer_APIParam_1 is a buffered parser input||||null
Close an FTP I/O channel||||null
xmlIOFTPClose_APIParam_1 is the I/O xmlIOFTPClose_APIParam_1||||null
xmlIOFTPClose_APIName returns 0||||null
check if the URI matches an FTP one||||null
xmlIOFTPMatch_APIParam_1 is the URI for matching||||null
try xmlFileOpen_APIName_real with an unescaped version of @filename||||if this fails fallback to @filename
Wrapper around xmlFileOpen_APIName_real that||||null
open an FTP I/O channel||||null
xmlIOFTPOpen_APIName returns an I/O context or NULL in case of error||||null
xmlIOFTPOpen_APIParam_1 is the URI for matching||||null
Read @len bytes to @buffer from the I/O channel||||null
xmlIOFTPRead_APIParam_1 is the I/O xmlIOFTPRead_APIParam_1||||null
xmlIOFTPRead_APIParam_2 is where to drop data||||null
xmlIOFTPRead_APIName returns the number of bytes written||||null
xmlIOFTPRead_APIParam_3 is number of bytes to write||||null
Close an HTTP I/O channel||||null
xmlIOHTTPClose_APIName returns 0||||null
xmlIOHTTPClose_APIParam_1 is the I/O xmlIOHTTPClose_APIParam_1||||null
check if the URI matches an HTTP one||||null
xmlIOHTTPMatch_APIParam_1 is the URI for matching||||null
open an HTTP I/O channel||||null
xmlIOHTTPOpen_APIName returns an I/O context or NULL in case of error||||null
xmlIOHTTPOpen_APIParam_1 is the URI for matching||||null
Non-static as is called from the output buffer creation routine||||null
xmlIOHTTPOpenW_APIParam_1 is The destination URI for the document||||null
Open a temporary buffer to collect the document for a subsequent HTTP POST request||||null
xmlIOHTTPOpenW_APIName returns an I/O context or NULL in case of error||||null
xmlIOHTTPOpenW_APIParam_2 is The xmlIOHTTPOpenW_APIParam_2 desired for the document||||null
Read @len bytes to @buffer from the I/O channel||||null
xmlIOHTTPRead_APIParam_1 is the I/O xmlIOHTTPRead_APIParam_1||||null
xmlIOHTTPRead_APIParam_2 is where to drop data||||null
xmlIOHTTPRead_APIName returns the number of bytes written||||null
xmlIOHTTPRead_APIParam_3 is number of bytes to write||||null
xmlInputCloseCallback_APIParam_1 is an Input xmlInputCloseCallback_APIParam_1||||null
xmlInputCloseCallback_APIName returns 0 or -1 in case of error||||null
Callback used in the I/O Input API to close the resource||||null
xmlInputMatchCallback_APIParam_1 is the xmlInputMatchCallback_APIParam_1 or URI||||null
xmlInputMatchCallback_APIName returns 1 if yes and 0 if another Input module should be used||||null
xmlInputOpenCallback_APIName returns an Input context or NULL in case or error||||null
Callback used in the I/O Input API to open the resource||||null
xmlInputOpenCallback_APIParam_1 is the xmlInputOpenCallback_APIParam_1 or URI||||null
xmlInputReadCallback_APIParam_1 is an Input xmlInputReadCallback_APIParam_1||||null
Callback used in the I/O Input API to read the resource||||null
xmlInputReadCallback_APIParam_2 is the xmlInputReadCallback_APIParam_2 to store data read||||null
xmlInputReadCallback_APIName returns the number of bytes read or -1 in case of error||||null
xmlInputReadCallback_APIParam_3 is the length of the xmlInputReadCallback_APIParam_2 in bytes||||null
Callback used in the I/O Input API to detect||||if the current handler can provide input fonctionnalities for this resource
xmlNoNetExternalEntityLoader_APIParam_1 is the xmlNoNetExternalEntityLoader_APIParam_1 for the entity to load||||null
xmlNoNetExternalEntityLoader_APIParam_2 is the System xmlNoNetExternalEntityLoader_APIParam_2 for the entity to load||||null
xmlNoNetExternalEntityLoader_APIName returns a new allocated xmlParserInputPtr, or NULL||||null
xmlNoNetExternalEntityLoader_APIParam_3 is the context in which the entity is called or NULL||||null
xmlNormalizeWindowsPath_APIName is obsolete||||null
Please see xmlURIFromPath in uri.c for a better solution||||null
xmlNormalizeWindowsPath_APIParam_1 is the input file xmlNormalizeWindowsPath_APIParam_1||||null
xmlNormalizeWindowsPath_APIName returns a canonicalized version of the path||||null
xmlOutputBufferClose_APIParam_1 is a buffered output||||null
xmlOutputBufferClose_APIName returns the number of byte written or -1 in case of error||||null
flushes and close the output I/O channel and free up all the associated resources||||null
xmlOutputBufferCreateBuffer_APIParam_1 is a xmlBufferPtr||||null
Create a buffered output for the progressive saving to a xmlBuffer||||null
xmlOutputBufferCreateBuffer_APIParam_2 is the encoding converter or NULL||||null
xmlOutputBufferCreateBuffer_APIName returns the new parser output or NULL||||null
Create a buffered output for the progressive saving to a file descriptor||||null
xmlOutputBufferCreateFd_APIParam_1 is a file descriptor number||||null
xmlOutputBufferCreateFd_APIParam_2 is the encoding converter or NULL||||null
xmlOutputBufferCreateFd_APIName returns the new parser output or NULL||||null
xmlOutputBufferCreateFile_APIParam_1 is a FILE *||||null
xmlOutputBufferCreateFile_APIParam_2 is the encoding converter or NULL||||null
xmlOutputBufferCreateFile_APIName returns the new parser output or NULL||||null
Create a buffered output for the progressive saving to a FILE * buffered C I/O||||null
xmlOutputBufferCreateFilename_APIParam_1 is a C string containing the xmlOutputBufferCreateFilename_APIParam_1 or filename||||null
xmlOutputBufferCreateFilename_APIParam_2 is the encoding converter or NULL||||null
xmlOutputBufferCreateFilename_APIName returns the new output or NULL||||null
xmlOutputBufferCreateFilename_APIParam_3 is the xmlOutputBufferCreateFilename_APIParam_3 ration||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
xmlOutputBufferCreateIO_APIParam_1 is an I/O write function||||null
xmlOutputBufferCreateIO_APIParam_2 is an I/O close function||||null
Create a buffered output for the progressive saving to an I/O handler||||null
xmlOutputBufferCreateIO_APIParam_3 is an I/O handler||||null
xmlOutputBufferCreateIO_APIName returns the new parser output or NULL||||null
the library only support writing to a local file||||currently if xmlOutputBufferCreateFilename_APIParam_3 is set
flushes the output I/O channel||||null
xmlOutputBufferFlush_APIName returns the number of byte written or -1 in case of error||||null
xmlOutputBufferFlush_APIParam_1 is a buffered output||||null
Create a buffered output for the progressive saving of a file '' - '||||If filename is
we use stdout as the output||||null
xmlOutputBufferGetContent_APIParam_1 is an xmlOutputBufferPtr||||null
xmlOutputBufferCreateIO_APIParam_4 is the charset encoding||||if known
xmlOutputBufferGetContent_APIName returns a pointer to the data or NULL in case of error||||null
Gives a pointer to the data currently held in the output buffer||||null
xmlOutputBufferGetSize_APIParam_1 is an xmlOutputBufferPtr||||null
Gives the length of the data currently held in the output buffer||||null
will store in case of partial or delayed writes||||null
xmlOutputBufferWrite_APIParam_1 is a buffered parser output||||null
xmlOutputBufferWrite_APIParam_2 is the size in bytes of the array||||null
xmlOutputBufferWrite_APIParam_3 is an char array||||null
xmlOutputBufferWrite_APIName returns the number of chars immediately written, or -1 in case of error||||null
will store in case of partial or delayed writes||||null
xmlOutputBufferWriteEscape_APIParam_1 is a buffered parser output||||null
xmlOutputBufferWriteEscape_APIParam_2 is a zero terminated UTF-8 string||||null
xmlOutputBufferWriteEscape_APIName returns the number of chars immediately written, or -1 in case of error||||null
xmlOutputBufferWriteEscape_APIParam_3 is an optional xmlOutputBufferWriteEscape_APIParam_3 function||||null
Write the content of the array in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e||||null
will store in case of partial or delayed writes||||null
xmlOutputBufferWriteString_APIParam_1 is a buffered parser output||||null
xmlOutputBufferWriteString_APIParam_2 is a zero terminated C string||||null
Callback used in the I/O Output API to close the resource||||null
xmlOutputCloseCallback_APIParam_1 is an Output xmlOutputCloseCallback_APIParam_1||||null
xmlOutputBufferWriteString_APIName returns the number of chars immediately written, or -1 in case of error||||null
xmlOutputCloseCallback_APIName returns 0 or -1 in case of error||||null
xmlOutputMatchCallback_APIParam_1 is the xmlOutputMatchCallback_APIParam_1 or URI||||null
Write the content of the string in the output I/O buffer This routine escapes the caracters and handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e||||null
xmlOutputMatchCallback_APIName returns 1 if yes and 0 if another Output module should be used||||null
Callback used in the I/O Output API to open the resource||||null
Write the content of the string in the output I/O buffer This routine handle the I18N transcoding from internal UTF-8 The buffer is lossless , i.e||||null
xmlOutputOpenCallback_APIName returns an Output context or NULL in case or error||||null
xmlOutputOpenCallback_APIParam_1 is the xmlOutputOpenCallback_APIParam_1 or URI||||null
xmlOutputWriteCallback_APIParam_1 is an Output xmlOutputWriteCallback_APIParam_1||||null
Callback used in the I/O Output API to write to the resource||||null
xmlOutputWriteCallback_APIParam_2 is the xmlOutputWriteCallback_APIParam_2 of data to write||||null
xmlOutputWriteCallback_APIName returns the number of bytes written or -1 in case of error||||null
xmlOutputWriteCallback_APIParam_3 is the length of the xmlOutputWriteCallback_APIParam_2 in bytes||||null
Callback used in the I/O Output API to detect||||if the current handler can provide output fonctionnalities for this resource
lookup the directory for that file||||null
xmlParserGetDirectory_APIName returns a new allocated string containing the directory, or NULL||||null
xmlParserGetDirectory_APIParam_1 is the path to a file||||null
xmlParserInputBufferCreateFd_APIParam_1 is a file descriptor number||||null
xmlParserInputBufferCreateFd_APIName returns the new parser input or NULL||||null
xmlParserInputBufferCreateFile_APIParam_1 is a FILE *||||null
Create a buffered parser input for the progressive parsing for the input from a file descriptor||||null
xmlParserInputBufferCreateFd_APIParam_2 is the charset encoding||||if known
xmlParserInputBufferCreateFile_APIParam_2 is the charset encoding||||if known
xmlParserInputBufferCreateFile_APIName returns the new parser input or NULL||||null
Create a buffered parser input for the progressive parsing of a FILE * buffered C I/O||||null
Do an encoding check if xmlParserInputBufferCreateFilename_APIParam_2 == XML_CHAR_ENCODING_NONE||||null
xmlParserInputBufferCreateFilename_APIParam_1 is a C string containing the xmlParserInputBufferCreateFilename_APIParam_1 or filename||||null
xmlParserInputBufferCreateFilename_APIName returns the new parser input or NULL||||null
xmlParserInputBufferCreateIO_APIParam_1 is an I/O read function||||null
xmlParserInputBufferCreateIO_APIParam_2 is an I/O close function||||null
Create a buffered parser input for the progressive parsing for the input from an I/O handler||||null
xmlParserInputBufferCreateIO_APIParam_3 is an I/O handler||||null
document is provided by default||||if found at compile-time
Automatic support for ZLIB/Compress compressed||||null
xmlParserInputBufferCreateIO_APIName returns the new parser input or NULL||||null
xmlParserInputBufferCreateFilename_APIParam_2 is the charset encoding||||if known
xmlParserInputBufferCreateMem_APIParam_1 is the memory input||||null
xmlParserInputBufferCreateMem_APIParam_2 is the length of the memory block||||null
Create a buffered parser input for the progressive parsing of a file '' - '||||If filename is
we use stdin as the input||||null
xmlParserInputBufferCreateMem_APIName returns the new parser input or NULL||||null
xmlParserInputBufferCreateStatic_APIParam_1 is the memory input||||null
xmlParserInputBufferCreateStatic_APIParam_2 is the length of the memory block||||null
Create a buffered parser input for the progressive parsing for the input from a memory area||||null
xmlParserInputBufferCreateIO_APIParam_4 is the charset encoding||||if known
xmlParserInputBufferCreateStatic_APIName returns the new parser input or NULL||||null
xmlParserInputBufferGrow_APIParam_1 is a buffered parser input||||null
xmlParserInputBufferGrow_APIName returns the number of chars read and stored xmlParserInputBufferGrow_APIParam_1 the buffer, or -1 xmlParserInputBufferGrow_APIParam_1 case of error||||null
xmlParserInputBufferCreateMem_APIParam_3 is the charset encoding||||if known
Create a buffered parser input for the progressive parsing for the input from an immutable memory area||||null
xmlParserInputBufferGrow_APIParam_2 is indicative value of the amount of chars to read||||null
xmlParserInputBufferPush_APIParam_1 is a buffered parser input||||null
xmlParserInputBufferCreateStatic_APIParam_3 is the charset encoding||||if known
xmlParserInputBufferPush_APIParam_2 is the size xmlParserInputBufferPush_APIParam_1 bytes of the array||||null
xmlParserInputBufferPush_APIParam_3 is an char array||||null
xmlParserInputBufferPush_APIName returns the number of chars read and stored xmlParserInputBufferPush_APIParam_1 the buffer, or -1 xmlParserInputBufferPush_APIParam_1 case of error||||null
xmlParserInputBufferRead_APIParam_1 is a buffered parser input||||null
xmlParserInputBufferRead_APIParam_2 is indicative value of the amount of chars to read||||null
Clear the top input callback from the input stack||||null
xmlParserInputBufferRead_APIName returns the number of chars read and stored xmlParserInputBufferRead_APIParam_1 the buffer, or -1 xmlParserInputBufferRead_APIParam_1 case of error||||null
this includes the compiled-in I/O||||null
Registers the default compiled-in I/O handlers||||null
xmlPopInputCallbacks_APIName returns the number of input callback registered or -1 in case of error||||null
Refresh the content of the input buffer , the old data are considered consumed This routine handle the I18N transcoding to internal UTF-8||||null
Registers the default compiled-in I/O handlers||||null
xmlRegisterInputCallbacks_APIParam_1 is the xmlInputMatchCallback||||null
By default , libxml submits HTTP output requests using the `` PUT '' method||||null
xmlRegisterInputCallbacks_APIParam_2 is the xmlInputOpenCallback||||null
Calling this method changes the HTTP output method to use the `` POST '' method instead||||null
Register a new set of I/O callback for handling parser input||||null
xmlRegisterInputCallbacks_APIParam_3 is the xmlInputReadCallback||||null
Push the content of the arry xmlParserInputBufferPush_APIParam_1 the input buffer This routine handle the I18N transcoding to internal UTF-8 This is used||||when operating the parser xmlParserInputBufferPush_APIParam_1 progressive mode
xmlRegisterInputCallbacks_APIParam_4 is the xmlInputCloseCallback||||null
xmlRegisterInputCallbacks_APIName returns the registered handler number or -1 in case of error||||null
xmlRegisterOutputCallbacks_APIParam_1 is the xmlOutputMatchCallback||||null
Register a new set of I/O callback for handling output||||null
xmlRegisterOutputCallbacks_APIParam_2 is the xmlOutputOpenCallback||||null
xmlRegisterOutputCallbacks_APIParam_3 is the xmlOutputWriteCallback||||null
xmlRegisterOutputCallbacks_APIParam_4 is the xmlOutputCloseCallback||||null
Daniel Veillard||||null
xmlRegisterOutputCallbacks_APINamereturns the registered handler number or -1 in case of error||||null
xmlACatalogAdd_APIParam_1 is a Catalog||||null
xmlACatalogAdd_APIParam_2 is the xmlACatalogAdd_APIParam_2 of record to add to the catalog||||null
Add an entry in the catalog , it may overwrite existing but different entries||||null
xmlACatalogAdd_APIParam_3 is the system , public or prefix to match||||null
xmlACatalogAdd_APIParam_4 is the replacement value for the match||||null
Dump the given catalog to the given file||||null
xmlACatalogDump_APIParam_1 is a Catalog||||null
xmlACatalogDump_APIParam_2 is the file||||null
Remove an entry from the catalog||||null
xmlACatalogRemove_APIParam_1 is a Catalog||||null
xmlACatalogRemove_APIParam_2 is the xmlACatalogRemove_APIParam_2 to remove||||null
Do a complete resolution lookup of an External Identifier||||null
xmlACatalogResolve_APIParam_1 is a Catalog||||null
xmlACatalogResolve_APIParam_2 is the public ID string||||null
xmlACatalogResolve_APIParam_3 is the system ID string||||null
xmlACatalogResolvePublic_APIParam_1 is a Catalog||||null
xmlACatalogResolvePublic_APIParam_2 is the public ID string||||null
xmlACatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller||||null
Try to lookup the catalog local reference associated to a public ID in that catalog||||null
Try to lookup the catalog resource for a system ID||||null
xmlACatalogResolveSystem_APIParam_1 is a Catalog||||null
xmlACatalogResolveSystem_APIParam_2 is the system ID string||||null
Do a complete resolution lookup of an xmlACatalogResolveURI_APIParam_2||||null
xmlACatalogResolveURI_APIParam_1 is a Catalog||||null
xmlACatalogResolveURI_APIParam_2 is the xmlACatalogResolveURI_APIParam_2||||null
This routine is used||||when operating the parser xmlParserInputBufferGrow_APIParam_1 normal mode TODO
Grow up the content of the input buffer , the old data are preserved This routine handle the I18N transcoding to internal UTF-8||||null
xmlACatalogResolveURI_APIName returns the xmlACatalogResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller||||null
Add an entry in the catalog , it may overwrite existing but different entries||||null
xmlCatalogAdd_APIParam_2 is the system , public or prefix to match||||null
xmlCatalogAdd_APIParam_1 is the xmlCatalogAdd_APIParam_1 of record to add to the catalog||||null
xmlCatalogAdd_APIParam_3 is the replacement value for the match||||null
Add the new entry to the catalog list||||null
one should be able to remove one extra copy by copying directly onto in - > buffer or in - > raw||||null
xmlCatalogAddLocal_APIParam_1 is a document list of xmlCatalogAddLocal_APIParam_1||||null
xmlCatalogAddLocal_APIName returns the updated list||||null
xmlCatalogAddLocal_APIParam_2 is the xmlCatalogAddLocal_APIParam_2 to a new local catalog||||null
Free up all the memory associated with catalogs||||null
Convert all the SGML catalog entries as XML ones||||null
xmlCatalogDump_APIParam_1 is the file||||null
Dump all the global catalog content to the given file||||null
Free up the memory associated to the catalog list||||null
xmlCatalogFreeLocal_APIParam_1 is a document list of catalogs||||null
Used to get the user preference w.r.t||||null
xmlCatalogGetDefaults_APIName returns the current xmlCatalogAllow value||||null
to what catalogs should be accepted||||null
xmlCatalogGetPublic_APIParam_1 is the public ID string||||null
Try to lookup the catalog reference associated to a public ID DEPRECATED , use xmlCatalogResolvePublic_APIName||||null
xmlCatalogGetSystem_APIParam_1 is the system ID string||||null
Try to lookup the catalog reference associated to a system ID DEPRECATED , use xmlCatalogResolveSystem_APIName||||null
Check is a catalog is empty||||null
xmlCatalogIsEmpty_APIParam_1 is should this create an SGML catalog||||null
xmlCatalogIsEmpty_APIName returns 1 if the catalog is empty, 0 if not, amd -1 in case of error||||null
xmlCatalogLocalResolve_APIParam_1 is a document list of xmlCatalogLocalResolve_APIParam_1||||null
Do a complete resolution lookup of an External Identifier using a document private catalog list||||null
xmlCatalogLocalResolve_APIParam_2 is the public ID string||||null
xmlCatalogLocalResolve_APIParam_3 is the system ID string||||null
xmlCatalogLocalResolveURI_APIParam_1 is a document list of xmlCatalogLocalResolveURI_APIParam_1||||null
xmlCatalogLocalResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller||||null
xmlCatalogLocalResolveURI_APIParam_2 is the xmlCatalogLocalResolveURI_APIParam_2||||null
Do a complete resolution lookup of an xmlCatalogLocalResolveURI_APIParam_2 using a document private catalog list||||null
Remove an entry from the catalog||||null
xmlCatalogLocalResolveURI_APIName returns the xmlCatalogLocalResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller||||null
xmlCatalogRemove_APIParam_1 is the xmlCatalogRemove_APIParam_1 to remove||||null
Do a complete resolution lookup of an External Identifier||||null
xmlCatalogResolve_APIParam_1 is the public ID string||||null
xmlCatalogResolve_APIParam_2 is the system ID string||||null
xmlCatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller||||null
xmlCatalogResolvePublic_APIParam_1 is the public ID string||||null
Try to lookup the catalog reference associated to a public ID||||null
Try to lookup the catalog resource for a system ID||||null
xmlCatalogResolveSystem_APIParam_1 is the system ID string||||null
Do a complete resolution lookup of an xmlCatalogResolveURI_APIParam_1||||null
xmlCatalogResolveURI_APIParam_1 is the xmlCatalogResolveURI_APIParam_1||||null
xmlCatalogSetDebug_APIParam_1 is the debug xmlCatalogSetDebug_APIParam_1 of catalogs required||||null
xmlCatalogSetDebug_APIName returns the previous value of the catalog debugging level||||null
xmlCatalogResolveURI_APIName returns the xmlCatalogResolveURI_APIParam_1 of the resource or NULL if not found, it must be freed by the caller||||null
Used to set the debug xmlCatalogSetDebug_APIParam_1 for catalog operation , 0 disable debugging , 1 enable it||||null
xmlCatalogSetDefaultPrefer_APIParam_1 is the default preference for delegation||||null
xmlCatalogSetDefaultPrefer_APIName returns the previous value of the default preference for delegation||||null
Allows to set the preference between public and system for deletion in XML Catalog resolution||||null
section 4.1.1 of the spec Values accepted are XML_CATA_PREFER_PUBLIC or XML_CATA_PREFER_SYSTEM||||null
Used to set the user preference w.r.t||||null
to what catalogs should be accepted||||null
xmlCatalogSetDefaults_APIParam_1 is what catalogs should be accepted||||null
Convert all the SGML catalog entries as XML ones||||null
xmlConvertSGMLCatalog_APIParam_1 is the catalog||||null
Free the memory allocated to a Catalog||||null
xmlFreeCatalog_APIParam_1 is a Catalog||||null
Do the catalog initialization||||null
Load the catalog and build the associated data structures||||null
On the other hand XML Catalogs are not handled recursively||||null
xmlLoadACatalog_APIParam_1 is a file path||||null
xmlInitializeCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup||||null
xmlLoadACatalog_APIName returns the catalog parsed or NULL in case of error||||null
This can be either an XML Catalog or an SGML Catalog It will recurse in SGML CATALOG entries||||null
the catalog will recurse in SGML CATALOG entries||||null
xmlLoadCatalog_APIParam_1 is a file path||||null
Load the catalog and makes the catalog definitions effective for the default external entity loader||||null
xmlLoadCatalog_APIName returns 0 in case of success -1 in case of error||||null
xmlLoadCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup||||null
Load an SGML super catalog||||null
Load the catalogs and makes their definitions effective for the default external entity loader||||null
xmlLoadCatalogs_APIName is not thread safe , catalog initialization should preferably be done once at startup||||null
It will not expand CATALOG or DELEGATE references||||null
xmlLoadCatalogs_APIParam_1 is a list of directories separated by a colon or a space||||null
xmlLoadSGMLSuperCatalog_APIParam_1 is a file path||||null
create a new Catalog||||null
xmlLoadSGMLSuperCatalog_APIName returns the catalog parsed or NULL in case of error||||null
This is only needed for manipulating SGML Super Catalogs like adding and removing CATALOG or DELEGATE entries||||null
xmlNewCatalog_APIName returns the xmlCatalogPtr or NULL in case of error||||null
xmlNewCatalog_APIParam_1 is should this create an SGML catalog||||null
parse an XML file and build a tree||||null
xmlParseCatalogFile_APIParam_1 is the xmlParseCatalogFile_APIParam_1||||null
Daniel Veillard||||null
it is like xmlParseFile_APIName except it bypass all catalog lookups||||null
xmlParseCatalogFile_APINamereturns the resulting document tree or NULL in case of error||||null
Checks and computes the values of facets||||null
xmlSchemaCheckFacet_APIParam_1 is the xmlSchemaCheckFacet_APIParam_1||||null
xmlSchemaCheckFacet_APIParam_2 is the schema type definition||||null
xmlSchemaCheckFacet_APIParam_3 is the schema parser context or NULL||||null
xmlSchemaCheckFacet_APIParam_4 is the optional xmlSchemaCheckFacet_APIParam_4 of the type||||null
Cleanup the default XML Schemas type library||||null
Removes and normalize white spaces in the string||||null
xmlSchemaCollapseString_APIParam_1 is a xmlSchemaCollapseString_APIParam_1||||null
Compare 2 values||||null
xmlSchemaCollapseString_APIName returns the new string or NULL if no change was required||||null
xmlSchemaCheckFacet_APIName returns 0 if valid, a positive error code if not valid and -1 in case of an internal or API error||||null
xmlSchemaCompareValues_APIParam_1 is a first value||||null
xmlSchemaCompareValues_APIParam_2 is a second value||||null
Compare 2 values||||null
xmlSchemaCompareValuesWhtsp_APIParam_1 is a first value||||null
xmlSchemaCompareValuesWhtsp_APIParam_2 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_1||||null
xmlSchemaCompareValuesWhtsp_APIParam_3 is a second value||||null
xmlSchemaCompareValuesWhtsp_APIParam_4 is the whitespace value of xmlSchemaCompareValuesWhtsp_APIParam_3||||null
Copies the precomputed value||||null
This duplicates any string within||||null
xmlSchemaCopyValue_APIParam_1 is the precomputed value to be copied||||null
Deallocate a Schema Facet structure||||null
xmlSchemaCopyValue_APIName returns the copy or NULL if a copy for a data-type is not implemented||||null
xmlSchemaFreeFacet_APIParam_1 is a schema xmlSchemaFreeFacet_APIParam_1 structure||||null
xmlSchemaCompareValues_APIName returns -1 if xmlSchemaCompareValues_APIParam_1 < xmlSchemaCompareValues_APIParam_2, 0 if xmlSchemaCompareValues_APIParam_1 == xmlSchemaCompareValues_APIParam_2, 1 if xmlSchemaCompareValues_APIParam_1 > xmlSchemaCompareValues_APIParam_2, 2 if xmlSchemaCompareValues_APIParam_1 <> xmlSchemaCompareValues_APIParam_2, and -2 in case of error||||null
Cleanup the default XML Schemas type library||||null
xmlSchemaCompareValuesWhtsp_APIName returns -1 if xmlSchemaCompareValuesWhtsp_APIParam_1 < xmlSchemaCompareValuesWhtsp_APIParam_3, 0 if xmlSchemaCompareValuesWhtsp_APIParam_1 == xmlSchemaCompareValuesWhtsp_APIParam_3, 1 if xmlSchemaCompareValuesWhtsp_APIParam_1 > xmlSchemaCompareValuesWhtsp_APIParam_3, 2 if xmlSchemaCompareValuesWhtsp_APIParam_1 <> xmlSchemaCompareValuesWhtsp_APIParam_3, and -2 in case of error||||null
xmlSchemaFreeValue_APIParam_1 is the xmlSchemaFreeValue_APIParam_1 to free||||null
Lookup function||||null
xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 is the built-in simple xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1||||null
xmlSchemaGetBuiltInType_APIParam_1 is the xmlSchemaGetBuiltInType_APIParam_1 of the built in xmlSchemaGetBuiltInType_APIParam_1||||null
Gives you the xmlSchemaGetBuiltInType_APIParam_1 struct for a built-in xmlSchemaGetBuiltInType_APIParam_1 by its xmlSchemaGetBuiltInType_APIParam_1 id||||null
Get the canonical lexical representation of the value||||null
The caller has to FREE xmlSchemaGetCanonValue_APIParam_0||||null
xmlSchemaGetBuiltInListSimpleTypeItemType_APIName returns the item xmlSchemaGetBuiltInListSimpleTypeItemType_APIParam_1 of @type as defined by the built-in datatype hierarchy of XML Schema Part 2 Datatypes, or NULL in case of an error||||null
This will be fixed in XML Schema 1.1||||null
xmlSchemaGetCanonValue_APIParam_2 is xmlSchemaGetCanonValue_APIParam_0||||null
Some value types are not supported yet , resulting in a @retValue of '' ??? ''||||null
Get the canonical representation of the value||||null
The caller has to free xmlSchemaGetCanonValueWhtsp_APIParam_0||||null
xmlSchemaGetCanonValueWhtsp_APIParam_1 is the precomputed value||||null
XML Schema 1.0 does not define canonical representations for||||null
xmlSchemaGetCanonValueWhtsp_APIParam_2 is xmlSchemaGetCanonValueWhtsp_APIParam_0||||null
xmlSchemaGetCanonValueWhtsp_APIParam_3 is the whitespace type of the value||||null
duration , gYearMonth , gYear , gMonthDay , gMonth , gDay , anyURI , QName , NOTATION||||null
xmlSchemaGetCanonValue_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors||||null
Extract the value of a xmlSchemaGetFacetValueAsULong_APIParam_1||||null
xmlSchemaGetFacetValueAsULong_APIName returns the value as a long||||null
xmlSchemaGetFacetValueAsULong_APIParam_1 is an schemas type xmlSchemaGetFacetValueAsULong_APIParam_1||||null
xmlSchemaGetCanonValueWhtsp_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors||||null
xmlSchemaGetPredefinedType_APIParam_1 is the type xmlSchemaGetPredefinedType_APIParam_1||||null
Lookup a type in the default XML Schemas type library||||null
Accessor for the type of a value||||null
xmlSchemaGetValType_APIName returns the xmlSchemaValType of the value||||null
xmlSchemaGetValType_APIParam_1 is a schemas value||||null
Initialize the default XML Schemas type library||||null
xmlSchemaIsBuiltInTypeFacet_APIParam_1 is the built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1||||null
xmlSchemaIsBuiltInTypeFacet_APIParam_2 is the facet xmlSchemaIsBuiltInTypeFacet_APIParam_1||||null
Allocate a new Facet structure||||null
xmlSchemaNewFacet_APIName returns the newly allocated structure or NULL in case or error||||null
Allocate a new NOTATION value||||null
The given values are consumed and freed with the struct||||null
xmlSchemaNewNOTATIONValue_APIParam_1 is the notation xmlSchemaNewNOTATIONValue_APIParam_1||||null
Evaluates||||if a specific facet can be used in conjunction with a xmlSchemaIsBuiltInTypeFacet_APIParam_1
xmlSchemaNewNOTATIONValue_APIParam_2 is the notation namespace xmlSchemaNewNOTATIONValue_APIParam_1 or NULL||||null
Allocate a new QName value||||null
xmlSchemaNewNOTATIONValue_APIName returns a pointer to the new value or NULL in case of error||||null
xmlSchemaNewQNameValue_APIParam_1 is the namespace name||||null
The given values are consumed and freed with the struct||||null
xmlSchemaNewQNameValue_APIParam_2 is the local name||||null
xmlSchemaNewQNameValue_APIName returns a pointer to the new value or NULL in case of an error||||null
Allocate a new simple xmlSchemaNewStringValue_APIParam_1 xmlSchemaNewStringValue_APIParam_2||||null
The xmlSchemaNewStringValue_APIParam_1 can be of XML_SCHEMAS_STRING||||null
We need this for anySimpleType as well||||null
xmlSchemaGetPredefinedType_APIParam_2 is the URI of the namespace usually `` http / / www.w3.org/2001/XMLSchema ''||||null
This one is intended to be expanded for other string based types||||null
The given xmlSchemaNewStringValue_APIParam_2 is consumed and freed with the struct||||null
xmlSchemaNewStringValue_APIParam_1 is the xmlSchemaNewStringValue_APIParam_2 xmlSchemaNewStringValue_APIParam_1||||null
xmlSchemaNewStringValue_APIName returns a pointer to the new xmlSchemaNewStringValue_APIParam_2 or NULL in case of error||||null
xmlSchemaNewStringValue_APIParam_2 is the xmlSchemaNewStringValue_APIParam_2||||null
if true a xmlSchemaValPredefTypeNode_APIParam_2 is computed and returned in @val||||null
Check that a xmlSchemaValPredefTypeNode_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNode_APIParam_1||||null
xmlSchemaValPredefTypeNode_APIParam_1 is the predefined xmlSchemaValPredefTypeNode_APIParam_1||||null
xmlSchemaValPredefTypeNode_APIParam_3 is the return computed xmlSchemaValPredefTypeNode_APIParam_2||||null
xmlSchemaValPredefTypeNode_APIParam_2 is the xmlSchemaValPredefTypeNode_APIParam_2 to check||||null
xmlSchemaValPredefTypeNode_APIParam_4 is the xmlSchemaValPredefTypeNode_APIParam_4 containing the xmlSchemaValPredefTypeNode_APIParam_2||||null
if true a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is computed and returned in @val||||null
Check that a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1||||null
This one does apply any normalization to the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2||||null
xmlSchemaValPredefTypeNodeNoNorm_APIParam_1 is the predefined xmlSchemaValPredefTypeNodeNoNorm_APIParam_1||||null
xmlSchemaValPredefTypeNodeNoNorm_APIParam_3 is the return computed xmlSchemaValPredefTypeNodeNoNorm_APIParam_2||||null
xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 to check||||null
xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 is the xmlSchemaValPredefTypeNodeNoNorm_APIParam_4 containing the xmlSchemaValPredefTypeNodeNoNorm_APIParam_2||||null
Check a xmlSchemaValidateFacet_APIParam_3 against a xmlSchemaValidateFacet_APIParam_2 condition||||null
xmlSchemaValidateFacet_APIParam_1 is the xmlSchemaValidateFacet_APIParam_1 type||||null
xmlSchemaValidateFacet_APIParam_2 is the xmlSchemaValidateFacet_APIParam_2 to check||||null
xmlSchemaValidateFacet_APIParam_3 is the lexical repr of the xmlSchemaValidateFacet_APIParam_3 to validate||||null
xmlSchemaValidateFacet_APIParam_4 is the precomputed xmlSchemaValidateFacet_APIParam_3||||null
Check a xmlSchemaValidateFacetWhtsp_APIParam_4 against a xmlSchemaValidateFacetWhtsp_APIParam_1 condition||||null
xmlSchemaValidateFacetWhtsp_APIParam_1 is the xmlSchemaValidateFacetWhtsp_APIParam_1 to check||||null
This takes xmlSchemaValidateFacetWhtsp_APIParam_4 normalization according to the specified whitespace types into account||||null
xmlSchemaValidateFacetWhtsp_APIParam_2 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_1 xmlSchemaValidateFacetWhtsp_APIParam_4||||null
xmlSchemaValidateFacetWhtsp_APIParam_3 is the built-in type of the xmlSchemaValidateFacetWhtsp_APIParam_4||||null
xmlSchemaValidateFacetWhtsp_APIParam_5 is the precomputed xmlSchemaValidateFacetWhtsp_APIParam_4||||null
xmlSchemaValidateFacetWhtsp_APIParam_4 is the lexical repr of the xmlSchemaValidateFacetWhtsp_APIParam_4 to validate||||null
xmlSchemaValidateFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateFacetWhtsp_APIParam_4||||null
xmlSchemaValidateLengthFacet_APIParam_1 is the built-in xmlSchemaValidateLengthFacet_APIParam_1||||null
xmlSchemaValidateLengthFacet_APIParam_2 is the xmlSchemaValidateLengthFacet_APIParam_2 to check||||null
xmlSchemaValidateLengthFacet_APIParam_3 is the lexical repr||||null
of the xmlSchemaValidateLengthFacet_APIParam_3 to be validated||||null
xmlSchemaValidateLengthFacet_APIParam_4 is the precomputed xmlSchemaValidateLengthFacet_APIParam_3||||null
Note that @value needs to be the * normalized * xmlSchemaValidateFacetWhtsp_APIParam_4||||if the xmlSchemaValidateFacetWhtsp_APIParam_1 is of type `` pattern ''
xmlSchemaValidateLengthFacet_APIParam_5 is the actual xmlSchemaValidateLengthFacet_APIParam_5 of the xmlSchemaValidateLengthFacet_APIParam_3||||null
Checka a xmlSchemaValidateLengthFacet_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacet_APIParam_2||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_1 is the xmlSchemaValidateLengthFacetWhtsp_APIParam_1 to check||||null
sets @length to the computed xmlSchemaValidateLengthFacet_APIParam_5 of @value||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_2 is the built-in type||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is the lexical repr||||null
of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 to be validated||||null
Checka a xmlSchemaValidateLengthFacetWhtsp_APIParam_3 against a `` length '' , `` minLength '' and `` maxLength '' xmlSchemaValidateLengthFacetWhtsp_APIParam_1||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_4 is the precomputed xmlSchemaValidateLengthFacetWhtsp_APIParam_3||||null
sets @length to the computed xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of @value||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_5 is the actual xmlSchemaValidateLengthFacetWhtsp_APIParam_5 of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3||||null
xmlSchemaValidateLengthFacetWhtsp_APIParam_6 is the whitespace type of the xmlSchemaValidateLengthFacetWhtsp_APIParam_3||||null
Checks the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 of a list simple type against a xmlSchemaValidateListSimpleTypeFacet_APIParam_1||||null
xmlSchemaValidateListSimpleTypeFacet_APIParam_1 is the xmlSchemaValidateListSimpleTypeFacet_APIParam_1 to check||||null
xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is the lexical repr of the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 to validate||||null
xmlSchemaValidateListSimpleTypeFacet_APIParam_3 is the number of list items||||null
xmlSchemaValidateListSimpleTypeFacet_APIParam_4 is the resulting expected number of list items||||null
if true a xmlSchemaValidatePredefinedType_APIParam_2 is computed and returned in @val||||null
Check that a xmlSchemaValidatePredefinedType_APIParam_2 conforms to the lexical space of the predefined xmlSchemaValidatePredefinedType_APIParam_1||||null
xmlSchemaValidatePredefinedType_APIParam_1 is the predefined xmlSchemaValidatePredefinedType_APIParam_1||||null
xmlSchemaValidatePredefinedType_APIParam_2 is the xmlSchemaValidatePredefinedType_APIParam_2 to check||||null
xmlSchemaValidatePredefinedType_APIParam_3 is the return computed xmlSchemaValidatePredefinedType_APIParam_2||||null
Appends a next sibling to a list of computed values||||null
xmlSchemaValueAppend_APIParam_1 is the value||||null
xmlSchemaValueAppend_APIName returns 0 if succeeded and -1 on API errors||||null
xmlSchemaValueAppend_APIParam_2 is the value to be appended||||null
Accessor for the boolean value of a computed value||||null
xmlSchemaValueGetAsBoolean_APIParam_1 is the value||||null
xmlSchemaValueGetAsBoolean_APIName returns 1 if true and 0 if false, or in case of an error||||null
xmlSchemaValueGetAsString_APIParam_1 is the value||||null
xmlSchemaValueGetAsString_APIName returns the string value or NULL if there was none, or on API errors||||null
Accessor for the string value of a computed value||||null
xmlSchemaValueGetNext_APIParam_1 is the value||||null
Accessor for the next sibling of a list of computed values||||null
Replaces 0xd , 0x9 and 0xa with a space||||null
xmlSchemaWhiteSpaceReplace_APIParam_1 is a xmlSchemaWhiteSpaceReplace_APIParam_1||||null
xmlSchemaValueGetNext_APIName returns the next value or NULL if there was none, or on API errors||||null
xmlSchemaWhiteSpaceReplace_APINamereturns the new string or NULL if no change was required||||null
Daniel Veillard||||null
