xmlAutomataGetInitState_APIName returns the initial state of the automata
xmlAutomataNewCountTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCountTrans2_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewAllTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCountedTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewCounterTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewEpsilon_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewOnceTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewNegTrans_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewOnceTrans2_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewTransition_APIParam_3 is the target point of the transition or NULL
xmlAutomataNewTransition2_APIParam_3 is the target point of the transition or NULL
The automata should be free after this point
xmlAutomataNewAllTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewCountTrans2_APIName returns the target state or NULL in case of error
xmlAutomataNewCountTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewCountedTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewCounterTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewNegTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewOnceTrans_APIName returns the target state or NULL in case of error
xmlAutomataNewEpsilon_APIName returns the target state or NULL in case of error
xmlAutomataNewOnceTrans2_APIName returns the target state or NULL in case of error
xmlAutomataNewTransition_APIName returns the target state or NULL in case of error
xmlAutomataNewTransition2_APIName returns the target state or NULL in case of error
Compile the automata into a Reg Exp ready for being executed
xmlAutomataCompile_APIName returns the compiled regexp or NULL in case of error
xmlRegexpCompile_APIName returns the compiled expression or NULL in case of error
xmlAutomataIsDeterminist_APIName returns 1 if true, 0 if not, and -1 in case of error
xmlAutomataNewCounter_APIName returns the counter number or -1 in case of error
allowed only
xmlAutomataNewState_APIName returns the new state or NULL in case of error
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans2_APIParam_2 the @from state xmlAutomataNewOnceTrans2_APIParam_3 the target state activated by a succession of input of value @token and @token2 and whose number is between @min and @max , moreover that transition can only be crossed once
this creates first a new target state in the automata and adds a transition xmlAutomataNewOnceTrans_APIParam_2 the @from state xmlAutomataNewOnceTrans_APIParam_3 the target state activated by a succession of input of value @token and whose number is between @min and @max , moreover that transition can only be crossed once
xmlAutomataSetFinalState_APIName returns 0 or -1 in case of error
xmlRelaxParserSetFlag_APIName returns 0 if success and -1 in case of error
xmlTextReaderClose_APIName returns 0 or -1 in case of error
xmlTextReaderDepth_APIName returns the depth or -1 in case of error
xmlTextReaderNormalization_APIName returns 1 or -1 in case of error
xmlTextReaderQuoteChar_APIName returns " or ' and -1 in case of error
xmlDictOwns_APIName returns 1 if true, 0 if false and -1 in case of error -1 in case of error
xmlShellDu_APIName returns 0 or -1 in case of error
xmlShellPwd_APIName returns 0 or -1 in case of error
xmlShellSave_APIName returns 0 or -1 in case of error
xmlShellValidate_APIName returns 0 or -1 in case of error
xmlShellWrite_APIName returns 0 or -1 in case of error
xmlRemoveProp_APIName returns 0 if success and -1 in case of error
xmlFileClose_APIName returns 0 or -1 in case of error
xmlInputCloseCallback_APIName returns 0 or -1 in case of error
xmlOutputCloseCallback_APIName returns 0 or -1 in case of error
xmlSchemaCompareValues_APIName returns -1 if xmlSchemaCompareValues_APIParam_1 < xmlSchemaCompareValues_APIParam_2, 0 if xmlSchemaCompareValues_APIParam_1 == xmlSchemaCompareValues_APIParam_2, 1 if xmlSchemaCompareValues_APIParam_1 > xmlSchemaCompareValues_APIParam_2, 2 if xmlSchemaCompareValues_APIParam_1 <> xmlSchemaCompareValues_APIParam_2, and -2 in case of error
xmlSchemaCompareValuesWhtsp_APIName returns -1 if xmlSchemaCompareValuesWhtsp_APIParam_1 < xmlSchemaCompareValuesWhtsp_APIParam_3, 0 if xmlSchemaCompareValuesWhtsp_APIParam_1 == xmlSchemaCompareValuesWhtsp_APIParam_3, 1 if xmlSchemaCompareValuesWhtsp_APIParam_1 > xmlSchemaCompareValuesWhtsp_APIParam_3, 2 if xmlSchemaCompareValuesWhtsp_APIParam_1 <> xmlSchemaCompareValuesWhtsp_APIParam_3, and -2 in case of error
xmlNewAutomata_APIName returns the new object or NULL in case of failure
xmlFreeRMutex_APIParam_1 is the reentrant mutex
xmlRMutexLock_APIParam_1 is the reentrant mutex
xmlRMutexUnlock_APIParam_1 is the reentrant mutex
In case of doubt abstain from calling xmlCleanupThreads_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind
In case of doubt abstain from calling xmlCleanupParser_APIName or do it just before calling exit_APIName to avoid leak reports from valgrind
xmlRFreeMutex_APIName is used to reclaim resources associated with a reentrant mutex
xmlGetGlobalState_APIName returns the thread global state or NULL in case of error
may crash the application if another thread or a plugin is call xmlRMutexUnlock_APIName
may crash the application if another thread or a plugin is call xmlRMutexUnlock_APIName
may crash the application if another thread or a plugin is call xmlRMutexUnlock_APIName
may crash the application if another thread or a plugin is call xmlRMutexUnlock_APIName
xmlIsMainThread_APIName returns 1 if the current thread is the main thread, 0 otherwise
xmlParseDefaultDecl_APIName returns XML_ATTRIBUTE_NONE, XML_ATTRIBUTE_REQUIRED, XML_ATTRIBUTE_IMPLIED or XML_ATTRIBUTE_FIXED
xmlParseEnumeratedType_APIName returns XML_ATTRIBUTE_ENUMERATION or XML_ATTRIBUTE_NOTATION
xmlRemoveID_APIName returns -1 if the lookup failed and 0 otherwise
xmlRemoveRef_APIName returns -1 if the lookup failed and 0 otherwise
xmlValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise
xmlValidatePushCData_APIName returns 1 if no validation problem was found or 0 otherwise
xmlValidatePushElement_APIName returns 1 if no validation problem was found or 0 otherwise
xmlExpIsNillable_APIName returns 1 if nillable, 0 if not and -1 in case of error
xmlRegExecPushString_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString_APIParam_2 in case of error
xmlRegExecPushString2_APIName returns 1 if the regexp reached a final state, 0 if non-final, and a negative xmlRegExecPushString2_APIParam_2 in case of error
xmlXPathCompiledEvalToBoolean_APIName returns 1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors
xmlXPathContextSetCache_APIName returns 0 if the setting succeeded, and -1 on API or internal errors
xmlXPathEvalPredicate_APIName returns 1 if predicate is true, 0 otherwise
xmlXPathIsNaN_APIName returns 1 if the value is a NaN, 0 otherwise
xmlHashRemoveEntry_APIName returns 0 if the removal succeeded and -1 in case of error or not found
xmlHashRemoveEntry2_APIName returns 0 if the removal succeeded and -1 in case of error or not found
xmlHashRemoveEntry3_APIName returns 0 if the removal succeeded and -1 in case of error or not found
xmlSchemaValidateDoc_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidateFile_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of an internal or API error
xmlSchemaValidateOneElement_APIName returns 0 if the element and its subtree is valid, a positive error code number otherwise and -1 in case of an internal or API error
xmlSchemaValidateStream_APIName returns 0 if the document is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
htmlIsBooleanAttr_APIName returns false if the attribute is not boolean, true otherwise
xmlRelaxNGValidateDoc_APIName returns 0 if the document is valid, a positive error code number otherwise and -1 in case of internal or API error
xmlRelaxNGValidateFullElement_APIName returns 1 if no validation problem was found or -1 in case of error
xmlRelaxNGValidatePopElement_APIName returns 1 if no validation problem was found or 0 otherwise
xmlRelaxNGValidatePushCData_APIName returns 1 if no validation problem was found or -1 otherwise
xmlRelaxNGValidatePushElement_APIName returns 1 if no validation problem was found or 0 if validating the element requires a full node, and -1 in case of error
xmlC14NIsVisibleCallback_APIName returns 1 if the xmlC14NIsVisibleCallback_APIParam_2 should be included
xmlTextReaderHasAttributes_APIName returns 1 if true, 0 if false, and -1 in case or error
xmlTextReaderHasValue_APIName returns 1 if true, 0 if false, and -1 in case or error
xmlTextReaderIsEmptyElement_APIName returns 1 if empty, 0 if not and -1 in case of error
xmlTextReaderIsNamespaceDecl_APIName returns 1 if the current node is a namespace declaration, 0 if the current node is a regular attribute or other type of node, or -1 in case of error
xmlTextReaderNext_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
xmlTextReaderNextSibling_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
xmlTextReaderRead_APIName returns 1 if the node was read successfully, 0 if there is no more nodes to read, or -1 in case of error
xmlTextReaderSetParserProp_APIName returns 0 if the call was successful, or -1 in case of error
xmlTextReaderStandalone_APIName returns 1 if the document was declared to be standalone, 0 if it was declared to be not standalone, or -1 if the document did not specify its standalone status or in case of error
xmlInitializeDict_APIName returns 0 if initialization was already done, and 1 if that call led to the initialization
xmlXPathEvaluatePredicateResult_APIName returns 1 if predicate is true, 0 otherwise
xmlXPathNodeSetContains_APIName returns true  if @cur contains @val, false  otherwise
xmlPatternFromRoot_APIName returns 1 if true, 0 if false and -1 in case of error
xmlPatternMatch_APIName returns 1 if it matches, 0 if it does not and -1 in case of failure
xmlPatternStreamable_APIName returns 1 if streamable, 0 if not and -1 in case of error
xmlShellBase_APIName returns 0
xmlShellCat_APIName returns 0
xmlShellDir_APIName returns 0
xmlShellList_APIName returns 0
xmlShellLoad_APIName returns 0 or -1 if loading failed
xmlStrEqual_APIName returns 1 if they are equal, 0 if they are different
xmlStrQEqual_APIName returns 1 if they are equal, 0 if they are different
xmlHasFeature returns zero  if the xmlHasFeature_APIParam_1 does not exist or an unknown unknown xmlHasFeature_APIParam_1 is requested, non-zero otherwise
xmlParseBalancedChunkMemory_APIName returns 0 if the chunk is well balanced, -1 in case of args problem and the parser error code otherwise
xmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise
xmlParseCtxtExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise
xmlParseBalancedChunkMemoryRecover_APIName returns 0 if the chunk is well balanced , -1 in case of args problem and the parser error code otherwise In case xmlParseBalancedChunkMemoryRecover_APIParam_7 is set to 1 , the nodelist will not be empty  , assuming the parsing succeeded to some extent
xmlParseExternalEntity_APIName returns 0 if the entity is well formed, -1 in case of args problem and the parser error code otherwise
xmlParseInNodeContext_APIName returns XML_ERR_OK if the chunk is well balanced, and the parser error code otherwise
xmlXIncludeProcess_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessNode_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTree_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTreeFlags_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlXIncludeProcessTreeFlagsData_APIName returns 0 if no substitution were done, -1 if some processing failed or the number of substitutions done
xmlDOMWrapAdoptNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapAdoptNode_APIParam_3 of unsupported type was given, 2 if a xmlDOMWrapAdoptNode_APIParam_3 of not yet supported type was given and -1 on API/internal errors
xmlDOMWrapCloneNode_APIName returns 0 if the operation succeeded, 1 if a xmlDOMWrapCloneNode_APIParam_3 of unsupported  type was given, -1 on API/internal errors
xmlDOMWrapReconcileNamespaces_APIName returns 0 if succeeded, -1 otherwise and on API/internal errors
xmlGetCompressMode_APIName returns 0  to 9 (max compression
xmlGetDocCompressMode_APIName returns 0  to 9 (max compression
xmlIsXHTML_APIName returns 1 if true, 0 if not and -1 in case of error
xmlNodeGetSpacePreserve_APIName returns -1 if xmlspace is not inherited, 0 if "default", 1 if "preserve
xmlUnsetNsProp_APIName returns 0 if successful, -1 if not found
xmlUnsetProp_APIName returns 0 if successful, -1 if not found
xmlModuleSymbol_APIName returns 0 if the xmlModuleSymbol_APIParam_3 was found, or -1 in case of error
UTF8ToHtml_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable
htmlElementAllowedHere_APIName returns 1 if allowed
htmlEncodeEntities_APIName returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable
htmlParseChunk_APIName returns zero if no error, the xmlParserErrors otherwise
xmlListEmpty_APIName returns 1 if the list is empty, 0 if not empty and -1 in case of error
xmlListRemoveFirst_APIName returns 1 if a deallocation occurred, or 0 if not found
xmlListRemoveLast_APIName returns 1 if a deallocation occurred, or 0 if not found
xmlIOFTPClose_APIName returns 0
xmlIOHTTPClose_APIName returns 0
xmlInputMatchCallback_APIName returns 1 if yes and 0 if another Input module should be used
xmlOutputMatchCallback_APIName returns 1 if yes and 0 if another Output module should be used
xmlCatalogIsEmpty_APIName returns 1 if the catalog is empty, 0 if not, amd -1 in case of error
xmlSchemaGetCanonValue_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors
xmlSchemaGetCanonValueWhtsp_APIName returns 0 if the value could be built, 1 if the value type is not supported yet and -1 in case of API errors
xmlSchemaIsBuiltInTypeFacet_APIName returns 1 if the facet can be used with the given built-in xmlSchemaIsBuiltInTypeFacet_APIParam_1, 0 otherwise and -1 in case the xmlSchemaIsBuiltInTypeFacet_APIParam_1 is not a built-in type
xmlSchemaValidateFacet_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidateFacetWhtsp_APIName returns 0 if the element is schemas valid, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidateLengthFacet_APIName returns 0 if the xmlSchemaValidateLengthFacet_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error
xmlSchemaValidateLengthFacetWhtsp_APIName returns 0 if the xmlSchemaValidateLengthFacetWhtsp_APIParam_3 is valid, a positive error code otherwise and -1 in case of an internal or API error
xmlSchemaValidateListSimpleTypeFacet_APIName returns 0 if the xmlSchemaValidateListSimpleTypeFacet_APIParam_2 is valid, a positive error code number otherwise and -1 in case of an internal error
xmlSchemaValueAppend_APIName returns 0 if succeeded and -1 on API errors
xmlNewMutex_APIName returns a new simple mutex pointer or NULL in case of error
xmlNewRMutex_APIName returns the new reentrant mutex pointer or NULL in case of error
xmlRNewMutex_APIName is used to call xmlSchemaNewStringValue_APIName for use in synchronizing access to data
This is not reentrant
This is not reentrant
This is not reentrant
This is not reentrant
htmlCreateFileParserCtxt_APIName returns the new parser context or NULL
xmlCreateFileParserCtxt_APIName returns the new parser context or NULL
xmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL
xmlCreateEntityParserCtxt_APIName returns the new parser context or NULL
xmlCreateURLParserCtxt_APIName returns the new parser context or NULL
xmlCreateDocParserCtxt_APIName returns the new parser context or NULL
xmlCreateIOParserCtxt_APIName returns the new parser context or NULL
xmlCreatePushParserCtxt_APIName returns the new parser context or NULL
htmlCreateMemoryParserCtxt_APIName returns the new parser context or NULL
htmlCreatePushParserCtxt_APIName returns the new parser context or NULL
htmlCreateFileParserCtxt_APIParam_2 is a free form C string describing the HTML document htmlCreateFileParserCtxt_APIParam_2 , or NULL
htmlParseDoc_APIParam_2 is a free form C string describing the HTML document htmlParseDoc_APIParam_2 , or NULL
htmlParseFile_APIParam_2 is a free form C string describing the HTML document htmlParseFile_APIParam_2 , or NULL
htmlSAXParseDoc_APIParam_2 is a free form C string describing the HTML document htmlSAXParseDoc_APIParam_2 , or NULL
htmlSAXParseFile_APIParam_2 is a free form C string describing the HTML document htmlSAXParseFile_APIParam_2 , or NULL
inputPush_APIName returns -1 in case of error, the index in the stack otherwise
namePush_APIName returns -1 in case of error, the index in the stack otherwise
nodePush_APIName returns -1 in case of error, the index in the stack otherwise
namePop_APIName returns the name just removed
nodePop_APIName returns the node just removed
xmlCheckLanguageID_APIName returns 1 if correct 0 otherwise
this is somewhat deprecated , those productions were removed from the XML Second edition
sometimes followed by
or reserved for future use / 5 * 8ALPHA
xmlDecodeEntities_APIName is deprecated , we now always process entities content through xmlStringDecodeEntities TODO
This behavior can conveniently be produced by normalizing all line breaks to #xA on input , before parsing . -RRB
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
The caller must deallocate it
xmlDecodeEntities_APIParam_4 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
xmlDecodeEntities_APIParam_5 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
xmlDecodeEntities_APIParam_6 is an xmlDecodeEntities_APIParam_4 marker xmlChar , 0
xmlStringDecodeEntities_APIParam_4 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
xmlStringDecodeEntities_APIParam_5 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
xmlStringDecodeEntities_APIParam_6 is an xmlStringDecodeEntities_APIParam_4 marker xmlChar , 0
xmlStringLenDecodeEntities_APIParam_5 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
xmlStringLenDecodeEntities_APIParam_6 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
xmlStringLenDecodeEntities_APIParam_7 is an xmlStringLenDecodeEntities_APIParam_5 marker xmlChar , 0
xmlDecodeEntities_APIName returns A newly allocated string with the substitution done
xmlStringDecodeEntities_APIName returns A newly allocated string with the substitution done
xmlStringLenDecodeEntities_APIName returns A newly allocated string with the substitution done
xmlEncodeEntitiesReentrant_APIName returns A newly allocated string with the substitution done
xmlEncodeSpecialChars_APIName returns A newly allocated string with the substitution done
xmlIsLetter_APIName returns 0 if not, non-zero otherwise
xmlNamespaceParseNCName_APIName returns the namespace name or NULL
xmlParsePITarget_APIName returns the PITarget name or NULL
xmlXPathParseNCName_APIName returns the namespace name or NULL
xmlXPathParseName_APIName returns the namespace name or NULL
xmlNewInputStream_APIName returns the new input stream or NULL
xmlNewEntityInputStream_APIName returns the new input stream or NULL
xmlParseAttValue_APIName returns the AttValue parsed or NULL
xmlParseNmtoken_APIName returns the Nmtoken parsed or NULL
xmlParsePubidLiteral_APIName returns the PubidLiteral parsed or NULL
xmlParseSystemLiteral_APIName returns the SystemLiteral parsed or NULL
xmlNewInputFromFile_APIName returns the new input stream or NULL in case of error
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
this seems not in use anymore , the namespace handling is done on top of the SAX interfaces , i.e
The attribute must have been declared
the xmlParseAttribute_APIParam_2 must be of the type declared for it
All attributes should be treated by a non-validating parser declared CDATA
= Name Eq AttValue Attribute values can not contain direct or indirect entity references to external entities
The replacement text of any entity referred to directly or indirectly in an attribute xmlParseAttribute_APIParam_2 must not contain a
IDREF values must match the value of some ID attribute
An ID attribute must have a declared default of #IMPLIED or #REQUIRED
No element type may have more than one ID attribute specified
Values of type NMTOKEN must match the Nmtoken production
values of type NMTOKENS must match Nmtokens
2.11 End-of-Line Handling Wherever an external parsed entity or the literal entity value of an internal parsed entity contains either the literal two-character sequence  #xD #xA  or a standalone literal #xD , an XML processor must pass to the application the single character #xA
A name must not appear more than once in an XML document as a value of this type
Values of type ENTITY must match the Name production , values of type ENTITIES must match Names
Values of type IDREF must match the Name production , and values of type IDREFS must match Names
each Entity Name must match the name of an unparsed entity declared in the DTD
i.e. , ID values must uniquely identify the elements which bear them
each IDREF Name must match the value of an ID attribute on some element in the XML document
= ` ID ' | ` IDREF ' | ` IDREFS ' | ` ENTITY ' | ` ENTITIES ' | ` NMTOKEN ' | ` NMTOKENS ' Validity constraints for attribute values syntax are checked in xmlValidateAttributeValue_APIName Values of type ID must match the Name production
Before the value of an attribute is passed to the application or checked for validity , the XML processor must normalize it as follows
The declared default xmlParseDefaultDecl_APIParam_2 must call xmlValidateNMToken_APIName of the declared attribute type c.f
Skip an XML comment <!-- .... --> The spec says that  For compatibility , the string  --  must not occur within comments
= ' #REQUIRED ' | ' #IMPLIED
instances of that attribute must match the default xmlParseDefaultDecl_APIParam_2
= EmptyElemTag | STag content ETag The Name in an element end-tag must match the element type in the start-tag
applies to and TODO Parameter-entity replacement text must be properly nested with parenthesized groups
xmlParseElementChildrenContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks
xmlParseElementMixedContentDecl_APIParam_2 is the input used for the current entity , needed for boundary checks
xmlParseElementDecl_APIName returns the type of the element, or -1 in case of error
call xmlParseElementDecl_APIName for an Element content either Mixed or Children , the cases EMPTY and ANY are handled directly in xmlParseElementDecl contentspec
applies to too The same name must not appear more than once in a single mixed-content declaration
' > ' No element type may be declared more than once
xmlParseEncName_APIName returns the encoding name value or NULL
xmlParseEncodingDecl_APIName returns the encoding value or NULL
' > ' The Name in the document type declaration must match the element type of the root element
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
The declaration of a parameter entity must precede any reference to it
= S ` NDATA ' S Name The Name must match the declared name of a notation
its replacement text should not be empty
For interoperability , , and neither the first nor last non-blank character of the replacement text should be a connector
xmlParseEntityRef_APIName returns the xmlEntityPtr if found, or NULL otherwise
An entity reference must not contain the name of an unparsed entity
An entity reference must not contain the name of an unparsed entity CharRef
xmlParseEntityValue_APIName returns the EntityValue parsed with reference substituted or NULL
Similarly , the declaration of a general entity must precede any reference to it which appears in a default value in an attribute-list declaration
' Characters referred to using character references must match the production for Char
for such documents , the rule that an entity must be declared ` yes
 , and must , for compatibility , be escaped using  & gt
AttValue -RRB- , the attribute must be specified for all elements of the type in the attribute-list declaration
' In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with  standalone = ` yes '  , the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities
Values of this type must match one of the Nmtoken tokens in the declaration
In the internal DTD subset , parameter-entity references can occur only where markup declarations can occur , not within markup declarations
call xmlSAXParseDTD_APIName or a Public ID NOTE
xmlParseName_APIName returns the Name parsed or NULL
xmlScanName_APIName returns the Name parsed or NULL
= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment Parameter-entity replacement text must be properly nested with markup declarations
Values of this type must match one of the notation names included in the declaration
all notation names in the declaration must be declared
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
The declaration of a parameter entity must precede any reference to it ... Parameter-entity references may only appear in the DTD
xmlParseQuotedString_APIName returns the string parser or NULL
Deprecated , to be removed at next drop of binary compatibility
support is still here
This is what the older xml-name Working Draft specified , a bunch of other stuff may still rely on it , so
xmlParseSDDecl_APIName returns 1 if standalone="yes" 0 if standalone="no" -2 if standalone attribute is missing or invalid (A standalone value of -2 means that the XML declaration was found, but no value was specified for the standalone attribute
' A call xmlParseExtParsedEnt_APIName must not contain a recursive reference to itself , either directly or indirectly
' A call xmlParseExtParsedEnt_APIName must not contain a recursive reference to itself , either directly or indirectly
' A call xmlParseExtParsedEnt_APIName must not contain a recursive reference to itself , either directly or indirectly
' A call xmlParseExtParsedEnt_APIName must not contain a recursive reference to itself , either directly or indirectly
The standalone document declaration must have the value  no
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with  standalone = ` yes
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with  standalone = ` yes
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with  standalone = ` yes
In a document without any DTD , a document with only an internal DTD subset which contains no parameter entity references , or a document with  standalone = ` yes
+ In practice allow
xmlParseVersionNum_APIName returns the string giving the XML version number, or NULL
xmlPushInput_APIName returns -1 in case of error or the index in the xmlPushInput_APIParam_2 stack
seems deprecated now , only used in the default part of xmlParserHandleReference NameChar
Used only
xmlSwitchEncoding_APIName returns 0 in case of success, -1 otherwise
xmlSwitchInputEncoding_APIName returns 0 in case of success, -1 otherwise
xmlSwitchToEncoding_APIName returns 0 in case of success, -1 otherwise
' the Name given in the entity reference must match that in an entity declaration , except that well-formed documents need not declare any of the following entities
xmlAddAttributeDecl_APIName returns NULL if not new, otherwise the attribute decl
xmlAddElementDecl_APIName returns NULL if not, otherwise the entity
xmlAddID_APIName returns NULL if not, otherwise the new xmlIDPtr
xmlAddNotationDecl_APIName returns NULL if not, otherwise the entity
xmlAddRef_APIName returns NULL if not, otherwise the new xmlRefPtr
xmlGetPredefinedEntity_APIName returns NULL if not, otherwise the entity
xmlAddElementDecl_APIParam_5 is the element xmlAddElementDecl_APIParam_5 tree or NULL
xmlAddNotationDecl_APIParam_4 is the public identifier or NULL
xmlAddNotationDecl_APIParam_5 is the system identifier or NULL
xmlCopyAttributeTable_APIName returns the new xmlAttributeTablePtr or NULL in case of error
xmlCopyDocElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error
xmlCopyElementContent_APIName returns the new xmlElementContentPtr or NULL in case of error
xmlCopyElementTable_APIName returns the new xmlElementTablePtr or NULL in case of error
xmlCopyNotationTable_APIName returns the new xmlNotationTablePtr or NULL in case of error
xmlExpNewAtom_APIName returns the node or NULL in case of error
xmlExpNewOr_APIName returns the node or NULL in case of error
xmlExpNewRange_APIName returns the node or NULL in case of error
xmlExpNewSeq_APIName returns the node or NULL in case of error
xmlNewTextWriter_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterDoc_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterFilename_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterMemory_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterPushParser_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlNewTextWriterTree_APIName returns the new xmlTextWriterPtr or NULL in case of error
xmlCopyEntitiesTable_APIName returns the new xmlEntitiesTablePtr or NULL in case of error
xmlNewTextReader_APIName returns the new xmlTextReaderPtr or NULL in case of error
xmlNewTextReaderFilename_APIName returns the new xmlTextReaderPtr or NULL in case of error
xmlReaderForDoc_APIName returns the new reader or NULL in case of error
xmlReaderForFd_APIName returns the new reader or NULL in case of error
xmlReaderForFile_APIName returns the new reader or NULL in case of error
xmlReaderForIO_APIName returns the new reader or NULL in case of error
xmlReaderForMemory_APIName returns the new reader or NULL in case of error
xmlReaderWalker_APIName returns the new reader or NULL in case of error
xmlTextReaderCurrentDoc_APIName returns the xmlDocPtr or NULL in case of error
xmlTextReaderCurrentNode_APIName returns the xmlNodePtr or NULL in case of error
xmlTextReaderPreserve_APIName returns the xmlNodePtr or NULL in case of error
xmlAddChild_APIName returns the child or NULL in case of error
xmlAddNextSibling_APIName returns the new node or NULL in case of error
xmlAddPrevSibling_APIName returns the new node or NULL in case of error
xmlDOMWrapAcquireNsFunction_APIName returns an xmlNsPtr or NULL in case of an error
xmlNewCatalog_APIName returns the xmlCatalogPtr or NULL in case of error
Deprecated , use xmlCopyDocElementContent instead
Deprecated , use xmlFreeDocElementContent instead
xmlCopyEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error
xmlCreateEnumeration_APIName returns the xmlEnumerationPtr just created or NULL in case of error
xmlCreateEntitiesTable_APIName returns the xmlEntitiesTablePtr just created or NULL in case of error
xmlNewCharEncodingHandler_APIName returns the xmlCharEncodingHandlerPtr created (or NULL in case of error
xmlCreateEnumeration_APIParam_1 is the enumeration xmlCreateEnumeration_APIParam_1 or NULL
xmlNewDocElementContent_APIParam_2 is the subelement xmlNewDocElementContent_APIParam_2 or NULL
xmlNewElementContent_APIParam_1 is the subelement xmlNewElementContent_APIParam_1 or NULL
xmlTextWriterStartAttributeNS_APIParam_2 is namespace xmlTextWriterStartAttributeNS_APIParam_2 or NULL
xmlTextWriterStartElementNS_APIParam_2 is namespace xmlTextWriterStartElementNS_APIParam_2 or NULL
xmlHashScan3_APIParam_2 is the xmlHashScan3_APIParam_2 of the userdata or NULL
xmlHashScanFull3_APIParam_2 is the xmlHashScanFull3_APIParam_2 of the userdata or NULL
xmlSchemaNewNOTATIONValue_APIParam_2 is the notation namespace xmlSchemaNewNOTATIONValue_APIParam_1 or NULL
The whole subtree is removed
The whole subtree is removed
The whole subtree is removed
The whole subtree is removed
xmlGetDtdAttrDesc_APIName returns the xmlAttributePtr if found or NULL
xmlGetDtdElementDesc_APIName returns the xmlElementPtr if found or NULL
xmlGetDtdNotationDesc_APIName returns the xmlNotationPtr if found or NULL
xmlGetDtdQAttrDesc_APIName returns the xmlAttributePtr if found or NULL
xmlGetDtdQElementDesc_APIName returns the xmlElementPtr if found or NULL
xmlGetID_APIName returns NULL if not found, otherwise the xmlAttrPtr defining the ID
xmlGetRefs_APIName returns NULL if not found, otherwise node set for the ID
xmlIsID_APIName returns 0 or 1 depending on the lookup result
xmlIsRef_APIName returns 0 or 1 depending on the lookup result
xmlIsMixedElement_APIName returns 0 if no, 1 if yes, and -1 if no element description is available
xmlNewDocElementContent_APIName returns NULL if not, otherwise the new element content structure
xmlNewElementContent_APIName returns NULL if not, otherwise the new element content structure
Deprecated in favor of xmlNewDocElementContent
xmlNewValidCtxt_APIName returns NULL if not, otherwise the new validation context structure
Deprecated , unsafe , use xmlSnprintfElementContent
xmlSnprintfElementContent_APIParam_4 is 1
xmlSprintfElementContent_APIParam_3 is 1
xmlTextWriterStartDTDEntity_APIParam_2 is TRUE
xmlTextWriterWriteDTDEntity_APIParam_2 is TRUE
xmlTextWriterWriteDTDExternalEntity_APIParam_2 is TRUE
xmlTextWriterWriteDTDInternalEntity_APIParam_2 is TRUE
xmlTextWriterWriteFormatDTDInternalEntity_APIParam_2 is TRUE
xmlTextWriterWriteVFormatDTDInternalEntity_APIParam_2 is TRUE
xmlValidBuildContentModel_APIName returns 1 in case of success, 0 in case of error
xmlAddEncodingAlias_APIName returns 0 in case of success, -1 in case of error
xmlDelEncodingAlias_APIName returns 0 in case of success, -1 in case of error
xmlTextReaderReadAttributeValue_APIName returns 1 in case of success, 0 if the xmlTextReaderReadAttributeValue_APIParam_1 was not positionned on an ttribute node or all the attribute values have been read, or -1 in case of error
xmlXPathNodeSetAdd_APIName returns 0 in case of success, and -1 in case of error
xmlXPathRegisterFunc_APIName returns 0 in case of success, -1 in case of error
xmlXPathRegisterFuncNS_APIName returns 0 in case of success, -1 in case of error
xmlXPathRegisterNs_APIName returns 0 in case of success, -1 in case of error
xmlXPathRegisterVariable_APIName returns 0 in case of success, -1 in case of error
xmlXPathRegisterVariableNS_APIName returns 0 in case of success, -1 in case of error
xmlValidCtxtNormalizeAttributeValue_APIParam_1 is the validation context or NULL
xmlTextReaderRelaxNGValidateCtxt_APIParam_2 is the RelaxNG schema validation context or NULL
xmlTextReaderSchemaValidateCtxt_APIParam_2 is the XML Schema validation context or NULL
xmlValidCtxtNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidCtxtNormalizeAttributeValue_APIParam_0 value
xmlValidNormalizeAttributeValue_APIName returns a new normalized string if normalization is needed, NULL otherwise the caller must free xmlValidNormalizeAttributeValue_APIParam_0 value
xmlValidGetPotentialChildren_APIName returns the number of element in the list, or -1 in case of error
xmlValidGetValidElements_APIName returns the number of element in the list, or -1 in case of error
If the function returns the value @max the caller is invited to grow the receiving array and retry
xmlValidGetValidElements -LRB- NULL , node - > childs , to append a child to ` node
xmlValidGetValidElements -LRB- node - > last , NULL , ... pointers to the element xmlValidGetValidElements_APIParam_3 are inserted at the beginning of the array and do not need to be freed
the XML processor must further process the normalized attribute xmlValidNormalizeAttributeValue_APIParam_4 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character
the XML processor must further process the normalized attribute xmlValidCtxtNormalizeAttributeValue_APIParam_5 by discarding any leading and trailing space characters , and by replacing sequences of space characters by single space character
xmlValidateAttributeDecl_APIName returns 1 if valid or 0 otherwise
xmlValidateAttributeValue_APIName returns 1 if valid or 0 otherwise
xmlValidateDocument_APIName returns 1 if valid or 0 otherwise
xmlValidateDocumentFinal_APIName returns 1 if valid or 0 otherwise
xmlValidateDtd_APIName returns 1 if valid or 0 otherwise
xmlValidateElement_APIName returns 1 if valid or 0 otherwise
xmlValidateElementDecl_APIName returns 1 if valid or 0 otherwise
xmlValidateNamesValue_APIName returns 1 if valid or 0 otherwise
xmlValidateNameValue_APIName returns 1 if valid or 0 otherwise
xmlValidateNmtokenValue_APIName returns 1 if valid or 0 otherwise
xmlValidateNmtokensValue_APIName returns 1 if valid or 0 otherwise
xmlValidateNotationDecl_APIName returns 1 if valid or 0 otherwise
xmlValidateNotationUse_APIName returns 1 if valid or 0 otherwise
xmlValidateOneAttribute_APIName returns 1 if valid or 0 otherwise
xmlValidateOneElement_APIName returns 1 if valid or 0 otherwise
xmlValidateOneNamespace_APIName returns 1 if valid or 0 otherwise
xmlValidateRoot_APIName returns 1 if valid or 0 otherwise
Validate that the call xmlGetID_APIName match the proper production Values of xmlValidateAttributeValue_APIParam_1 ID must match the Name production
Values of xmlValidateAttributeValue_APIParam_1 IDREF must match the Name production , and values of xmlValidateAttributeValue_APIParam_1 IDREFS must match Names
Values of xmlValidateAttributeValue_APIParam_1 ENTITY must match the Name production , values of xmlValidateAttributeValue_APIParam_1 ENTITIES must match Names
Values of xmlValidateAttributeValue_APIParam_1 NMTOKEN must match the Nmtoken production
values of xmlValidateAttributeValue_APIParam_1 NMTOKENS must match Nmtokens
xmlValidateDtdFinal_APIName returns 1 if valid or 0 if invalid and -1 if not well-formed
not used -RRB- , which
xmlExpCtxtNbCons_APIName returns the number of nodes ever allocated or -1 in case of error
xmlExpCtxtNbNodes_APIName returns the number of nodes in use or -1 in case of error
xmlExpDump_APIParam_2 is the call xmlExpFree_APIName
xmlExpMaxToken_APIParam_1 is a call xmlExpFree_APIName
xmlXPathCompiledEval_APIParam_1 is the call xmlXPathCtxtCompile_APIName
xmlXPathCompiledEvalToBoolean_APIParam_1 is the call xmlXPathCtxtCompile_APIName
xmlExpExpDerive_APIName returns the resulting expression or NULL in case of internal error, the result must be freed
xmlExpGetLanguage_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings
xmlExpGetStart_APIName returns the number of unique strings found, -1 in case of errors and -2 if there is more than @len strings
xmlExpMaxToken_APIName returns the maximum length or -1 in case of error
xmlExpNewCtxt_APIName returns the context or NULL in case of error
xmlNanoFTPNewCtxt_APIName returns an FTP context or NULL in case of error
xmlIOFTPOpen_APIName returns an I/O context or NULL in case of error
xmlIOHTTPOpen_APIName returns an I/O context or NULL in case of error
xmlIOHTTPOpenW_APIName returns an I/O context or NULL in case of error
xmlExpParse_APIName returns a new expression or NULL in case of failure
xmlExpStringDerive_APIName returns the resulting expression or NULL in case of internal error
Get the atom associated to the choice @left | @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure
Get the atom associated to the range -LCB- @min , @max -RCB- Note that @subset is consumed in the operation , to keep an handle on @subset use xmlExpRef_APIName and use xmlExpFree_APIName to release @subset , this is true even in case of failure
xmlExpSubsume_APIName returns 1 if true 0 if false and -1 in case of failure
xmlSAX2HasExternalSubset_APIName returns 1 if true
xmlSAX2HasInternalSubset_APIName returns 1 if true
xmlSAX2IsStandalone_APIName returns 1 if true
hasExternalSubsetSAXFunc_APIName returns 1 if true
hasInternalSubsetSAXFunc_APIName returns 1 if true
isStandaloneSAXFunc_APIName returns 1 if true
xmlSchemaValueGetAsBoolean_APIName returns 1 if true and 0 if false, or in case of an error
Get the atom associated to the sequence @left , @right Note that @left and @right are consumed in the operation , to keep an handle on them use xmlExpRef_APIName and use xmlExpFree_APIName to release them , this is true even in case of failure
xmlRegExecErrInfo_APIParam_4 is return number of negative transitions
xmlRegExecNextValues_APIParam_3 is return number of negative transitions
xmlRegExecErrInfo returns 0 in case of success or -1 in case of error
xmlRegExecNextValues returns 0 in case of success or -1 in case of error
xmlSchemaValidityLocatorFunc_APIName returns 0 in case of success and -1 in case of error
xmlCopyError_APIName returns 0 in case of success and -1 in case of error
htmlSetMetaEncoding_APIName returns 0 in case of success and -1 in case of error
xmlRelaxNGInitTypes_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewDoc_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewFd_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewFile_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewIO_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewMemory_APIName returns 0 in case of success and -1 in case of error
xmlReaderNewWalker_APIName returns 0 in case of success and -1 in case of error
xmlTextReaderSetup_APIName returns 0 in case of success and -1 in case of error
xmlDictReference_APIName returns 0 in case of success and -1 in case of error
xmlXPathNodeSetAddNs_APIName returns 0 in case of success and -1 in case of error
xmlCtxtResetPush_APIName returns 0 in case of success and 1 in case of error
xmlInitParserCtxt_APIName returns 0 in case of success and -1 in case of error
xmlXIncludeSetFlags_APIName returns 0 in case of success and -1 in case of error
xmlBufGetNodeContent_APIName returns 0 in case of success and -1 in case of error
xmlNodeBufGetContent_APIName returns 0 in case of success and -1 in case of error
xmlListCopy_APIName returns 0 in case of success 1 in case of error
xmlLoadCatalog_APIName returns 0 in case of success -1 in case of error
xmlRegExecErrInfo_APIName returns will be freed with the @exec context and do not need to be deallocated
xmlRegExecNextValues_APIName returns will be freed with the @exec context and do not need to be deallocated
Extract informations from the regexp execution, the parameter @values must point to an array of @nbval string pointers on return xmlRegExecNextValues_APIParam_2 will contain the number of possible strings in that state and the @values array will be updated with them
xmlRegexpExec_APIParam_1 is the call xmlExpFree_APIName
xmlRegexpIsDeterminist_APIParam_1 is the call xmlExpFree_APIName
xmlRegexpExec_APIName returns 1 if it matches, 0 if not and a negative value in case of error
xmlRegexpIsDeterminist_APIName returns 1 if it yes, 0 if not and a negative value in case of error
xmlRegexpPrint_APIParam_2 is the compiled xmlRegexpPrint_APIParam_2
xmlOutputBufferCreateFilenameFunc_APIName returns the new xmlOutputBufferPtr in case of success or NULL if no method was found
xmlParserInputBufferCreateFilenameFunc_APIName returns the new xmlParserInputBufferPtr in case of success or NULL if no method was found
xmlXPathAxisFunc_APIName returns the next node in that axis or NULL if at the end of the axis
xmlEncodeEntities_APIName returns NULL
xmlCtxtGetLastError_APIName returns NULL if no error occurred or a pointer to the error
xmlGetLastError_APIName returns NULL if no error occurred or a pointer to the error
xmlCharStrdup_APIName returns a new xmlChar * or NULL
xmlCharStrndup_APIName returns a new xmlChar * or NULL
xmlStrdup_APIName returns a new xmlChar * or NULL
xmlStrndup_APIName returns a new xmlChar * or NULL
xmlLoadExternalEntity_APIName returns the xmlParserInputPtr or NULL
xmlNewParserCtxt_APIName returns the xmlParserCtxtPtr or NULL
xmlNodeGetContent_APIName returns a new #xmlChar * or NULL if no content is available
xmlSplitQName2_APIName returns NULL if the xmlSplitQName2_APIParam_1 does not have a xmlSplitQName2_APIParam_2
To traverse an axis, the engine calls the first time with xmlXPathAxisFunc_APIParam_2 == NULL and repeat until the function returns NULL indicating the end of the axis traversal
xmlXPathCastBooleanToString_APIName returns a newly allocated string
xmlXPathCastNodeSetToString_APIName returns a newly allocated string
xmlXPathCastNodeToString_APIName returns a newly allocated string
xmlXPathCastNumberToString_APIName returns a newly allocated string
xmlXPathCastToString_APIName returns the allocated string value of the object, NULL in case of error
it is up to the caller to free the string memory with xmlFree_APIName
xmlXPathCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL
xmlXPathCtxtCompile_APIName returns the xmlXPathCompExprPtr resulting from the compilation or NULL
xmlXPathCmpNodes_APIName returns -2 in case of error 1 if first point < second point, 0 if it is the same node, -1 otherwise
xmlSchemaGetValidErrors_APIName returns -1 in case of error and 0 otherwise
xmlRelaxNGGetValidErrors_APIName returns -1 in case of error and 0 otherwise
xmlXPathCompiledEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
xmlXPathEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
xmlXPathEvalExpression_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
xmlXPathNodeEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
xmlXPtrEval_APIName returns the xmlXPathObjectPtr resulting from the evaluation or NULL
Applies the XPath boolean_APIName function on the result of the given call xmlExpFree_APIName
Other values for @options have currently no effect
xmlXPathConvertFunc_APIName returns -1 in case of error, 0 otherwise
xmlNanoFTPConnect_APIName returns -1 in case of error, 0 otherwise
xmlNanoFTPQuit_APIName returns -1 in case of error, 0 otherwise
xmlStreamPop_APIName returns -1 in case of error, 0 otherwise
xmlGetFeature_APIName returns -1 in case or error, 0 otherwise
xmlSetFeature_APIName returns -1 in case or error, 0 otherwise
xmlTextConcat_APIName returns -1 in case of error, 0 otherwise
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
the result will be converted to true if the number is equal to the position of the context node in the context node list and will be converted to false otherwise
xmlXPathFuncLookupFunc_APIName returns the XPath function or NULL if not found
xmlXPathNewContext_APIName returns the xmlXPathContext just allocated
xmlXPtrNewContext_APIName returns the xmlXPathContext just allocated
htmlNewDoc_APIName returns a new document
xmlXPathNewParserContext_APIName returns the xmlXPathParserContext just allocated
xmlXPathPopBoolean_APIName returns the boolean
xmlSAX2GetPublicId_APIName returns a xmlChar
xmlSAX2GetSystemId_APIName returns a xmlChar
xmlNewDoc_APIName returns a new document
The caller will need to free it
xmlXPathNodeSetCreate_APIName returns the newly created object
xmlXPathObjectCopy_APIName returns the newly created object
xmlXPtrLocationSetCreate_APIName returns the newly created object
xmlXPtrNewCollapsedRange_APIName returns the newly created object
xmlXPtrNewLocationSetNodeSet_APIName returns the newly created object
xmlXPtrNewLocationSetNodes_APIName returns the newly created object
xmlXPtrNewRange_APIName returns the newly created object
xmlXPtrNewRangeNodeObject_APIName returns the newly created object
xmlXPtrNewRangeNodePoint_APIName returns the newly created object
xmlXPtrNewRangeNodes_APIName returns the newly created object
xmlXPtrNewRangePointNode_APIName returns the newly created object
xmlXPtrNewRangePoints_APIName returns the newly created object
xmlXPtrWrapLocationSet_APIName returns the newly created object
xmlXPathNewBoolean_APIName returns the newly created object
xmlXPathNewCString_APIName returns the newly created object
xmlXPathNewFloat_APIName returns the newly created object
xmlXPathNewNodeSet_APIName returns the newly created object
xmlXPathNewNodeSetList_APIName returns the newly created object
xmlXPathNewValueTree_APIName returns the newly created object
xmlXPathNewString_APIName returns the newly created object
xmlXPathWrapCString_APIName returns the newly created object
xmlXPathWrapExternal_APIName returns the newly created object
xmlXPathWrapNodeSet_APIName returns the newly created object
xmlXPathWrapString_APIName returns the newly created object
xmlXPathNodeSetCreate_APIParam_1 is an initial xmlNodePtr , or NULL
xmlXPtrLocationSetCreate_APIParam_1 is an initial xmlXPathObjectPtr , or NULL
xmlXPathIsInf_APIName returns 1 vi the value is +Infinite, -1 if -Infinite, 0 otherwise
xmlXPathOrderDocElems_APIName returns the number of elements found in the document or -1 in case of error
The xmlXPathSetContextNode_APIParam_1 must be in the same document as that associated with the context
xmlXPathSetContextNode_APIName returns -1 in case of error or 0 if successful
xmlXPathVariableLookupFunc_APIName returns the XPath object value or NULL if not found
xmlNewTextWriterTree_APIParam_2 is xmlNodePtr or NULL for doc - > children
xmlTextWriterEndAttribute_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndCDATA_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndDTD_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndDTDElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndDTDEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndDocument_APIName returns the bytes written or -1 in case of error
xmlTextWriterEndElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterEndPI_APIName returns the bytes written  or -1 in case of error
xmlTextWriterFlush_APIName returns the bytes written  or -1 in case of error
xmlTextWriterFullEndElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartAttribute_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartAttributeNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartCDATA_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDTD_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDTDElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDTDEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartDocument_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartElementNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterStartPI_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteAttribute_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteAttributeNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteBase64_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteCDATA_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteBinHex_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTD_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDExternalEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDExternalEntityContents_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDInternalEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteDTDNotation_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteElementNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWritePI_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteRaw_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteRawLen_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteString_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatAttribute_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatAttributeNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatCDATA_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatComment_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTD_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDAttlist_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatDTDInternalEntity_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatElement_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatElementNS_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatPI_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatRaw_APIName returns the bytes written  or -1 in case of error
xmlTextWriterWriteVFormatString_APIName returns the bytes written  or -1 in case of error
xmlTextWriterSetIndent_APIParam_2 = 0 do not indentation
xmlTextWriterSetIndent_APIParam_2 > 0 do indentation
xmlTextWriterSetIndent_APIName returns -1 on error or 0 otherwise
xmlTextWriterSetIndentString_APIName returns -1 on error or 0 otherwise
xmlTextWriterSetQuoteChar_APIName returns -1 on error or 0 otherwise
Start an xml attribute with namespace support
xmlTextWriterStartAttributeNS_APIParam_4 is namespace URI or NULL
xmlTextWriterStartElementNS_APIParam_4 is namespace URI or NULL
xmlTextWriterStartDocument_APIParam_2 is the xml xmlTextWriterStartDocument_APIParam_2 or NULL for default
xmlTextWriterStartDocument_APIParam_3 is the xmlTextWriterStartDocument_APIParam_3 or NULL for default
xmlTextWriterStartDocument_APIParam_4 is  yes  or  no  or NULL for default
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
FALSE if not
Start an xml element with namespace support
The entity must have been started with xmlTextWriterStartDTDEntity
call xmlTextWriterWriteElement_APIName with namespace support
xmlTextWriterWriteFormatAttribute_APIName returns xmlTextWriterWriteFormatAttribute_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatAttributeNS_APIName returns xmlTextWriterWriteFormatAttributeNS_APIParam_6 bytes written  or -1 in case of error
xmlTextWriterWriteFormatCDATA_APIName returns xmlTextWriterWriteFormatCDATA_APIParam_3 bytes written  or -1 in case of error
xmlTextWriterWriteFormatDTD_APIName returns xmlTextWriterWriteFormatDTD_APIParam_6 bytes written  or -1 in case of error
xmlTextWriterWriteFormatComment_APIName returns xmlTextWriterWriteFormatComment_APIParam_3 bytes written  or -1 in case of error
xmlTextWriterWriteFormatDTDAttlist_APIName returns xmlTextWriterWriteFormatDTDAttlist_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatDTDElement_APIName returns xmlTextWriterWriteFormatDTDElement_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatDTDInternalEntity_APIName returns xmlTextWriterWriteFormatDTDInternalEntity_APIParam_5 bytes written  or -1 in case of error
xmlTextWriterWriteFormatElement_APIName returns xmlTextWriterWriteFormatElement_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatElementNS_APIName returns xmlTextWriterWriteFormatElementNS_APIParam_6 bytes written  or -1 in case of error
xmlTextWriterWriteFormatPI_APIName returns xmlTextWriterWriteFormatPI_APIParam_4 bytes written  or -1 in case of error
xmlTextWriterWriteFormatRaw_APIName returns xmlTextWriterWriteFormatRaw_APIParam_3 bytes written  or -1 in case of error
xmlTextWriterWriteFormatString_APIName returns xmlTextWriterWriteFormatString_APIParam_3 bytes written  or -1 in case of error
Write a formatted xmlTextWriterWriteFormatElementNS_APIParam_6 element with namespace support
Write a formatted xml attribute.with namespace support
Write a formatted xml element with namespace support
xmlCharInRange_APIName returns true if character valid, false otherwise
xmlIsBaseChar_APIName returns true if argument valid, false otherwise
xmlIsBlank_APIName returns true if argument valid, false otherwise
xmlIsChar_APIName returns true if argument valid, false otherwise
xmlIsCombining_APIName returns true if argument valid, false otherwise
xmlIsDigit_APIName returns true if argument valid, false otherwise
xmlIsExtender_APIName returns true if argument valid, false otherwise
xmlIsPubidChar_APIName returns true if argument valid, false otherwise
xmlIsIdeographic_APIName returns true if argument valid, false otherwise
xmlIsBaseChar_APIName is DEPRECATED
xmlIsBlank_APIName is DEPRECATED
xmlIsChar_APIName is DEPRECATED
xmlIsCombining_APIName is DEPRECATED
xmlIsDigit_APIName is DEPRECATED
xmlIsExtender_APIName is DEPRECATED
xmlIsIdeographic_APIName is DEPRECATED
Use xmlIsBaseChar_ch or xmlIsBaseCharQ instead
Use xmlIsBlank_ch or xmlIsBlankQ instead
Use xmlIsChar_ch or xmlIsCharQ instead
Use xmlIsDigit_ch or xmlIsDigitQ instead
Use xmlIsExtender_ch or xmlIsExtenderQ instead
Use xmlIsPubidChar_ch or xmlIsPubidCharQ instead
Use xmlIsCombiningQ instead
Use xmlIsIdeographicQ instead
This function is DEPRECATED
this function is deprecated
xmlSaveClose_APIName returns the number of byte written or -1 in case of error
xmlSaveDoc_APIName returns the number of byte written or -1 in case of error
xmlSaveFlush_APIName returns the number of byte written or -1 in case of error
xmlSaveTree_APIName returns the number of byte written or -1 in case of error
htmlNodeDump_APIName returns the number of byte written or -1 in case of error
xmlSaveFormatFileEnc_APIName returns the number of bytes written or -1 in case of error
xmlOutputBufferClose_APIName returns the number of byte written or -1 in case of error
xmlOutputBufferFlush_APIName returns the number of byte written or -1 in case of error
xmlOutputWriteCallback_APIName returns the number of bytes written or -1 in case of error
make sure that all bytes have been output and free the associated data
make sure that all bytes have been output
The function is not fully implemented yet as The function does not return the byte count but 0 instead
xmlSaveSetAttrEscape_APIName returns 0 if successful or -1 in case of error
xmlSaveSetEscape_APIName returns 0 if successful or -1 in case of error
xmlSaveToBuffer_APIParam_2 is the xmlSaveToBuffer_APIParam_2 name to use or NULL
xmlSaveToFd_APIParam_2 is the xmlSaveToFd_APIParam_2 name to use or NULL
xmlSaveToFilename_APIParam_2 is the xmlSaveToFilename_APIParam_2 name to use or NULL
xmlSaveToIO_APIParam_4 is the xmlSaveToIO_APIParam_4 name to use or NULL
xmlSaveToBuffer_APIName returns a new serialization context or NULL in case of error
xmlSaveToFd_APIName returns a new serialization context or NULL in case of error
xmlSaveToFilename_APIName returns a new serialization context or NULL in case of error
xmlSaveToIO_APIName returns a new serialization context or NULL in case of error
The function is not fully implemented yet as it does not return the byte count but 0 instead
xmlAddDocEntity_APIName returns a pointer to the entity or NULL in case of error
xmlAddDtdEntity_APIName returns a pointer to the entity or NULL in case of error
xmlNewEntity_APIName returns a pointer to the entity or NULL in case of error
Deprecated call
Deprecated call
Deprecated call
Deprecated call
This really does not make sense and should be deprecated
Contrary to xmlEncodeEntities , this routine is reentrant , and result must be deallocated
remove xmlEncodeEntities , once we are not afraid of breaking binary compatibility People must migrate their code to xmlEncodeEntitiesReentrant
Do a global encoding of a string , replacing the predefined entities this routine is reentrant , and result must be deallocated
xmlGetDocEntity returns A pointer to the entity structure or NULL if not found
xmlGetDtdEntity returns A pointer to the entity structure or NULL if not found
xmlGetParameterEntity returns A pointer to the entity structure or NULL if not found
xmlGetIntSubset_APIName returns a pointer to the DTD structure or NULL if not found
Note the first argument is the document node , not the DTD node
xmlXPtrBuildNodeList_APIName returns an xmlNodePtr list or NULL
the caller has to free the node tree
Create a new entity, this differs from xmlAddDocEntity_APIName that if the document is NULL or has no internal subset defined, an unlinked entity structure will be returned, it is the responsability of the caller to link it to the document later or free it when not needed anymore
xmlXPtrLocationSetMerge_APIName returns xmlXPtrLocationSetMerge_APIParam_1 once extended or NULL in case of error
xmlXPtrNewContext_APIParam_2 is the node that directly contains the XPointer being evaluated or NULL
xmlXPtrNewContext_APIParam_3 is the element from which a user or program initiated traversal of the link , or NULL
xmlXPtrNewLocationSetNodes_APIParam_2 is the xmlXPtrNewLocationSetNodes_APIParam_2 NodePtr value or NULL
Implement the range-to_APIName XPointer function Obsolete
xmlBuildRelativeURI_APIName returns a new xmlBuildRelativeURI_APIParam_1 string  or NULL in case error
xmlBuildURI_APIName returns a new xmlBuildURI_APIParam_1 string  or NULL in case of error
it may be worthwhile to first convert it into a  nice  one by calling xmlBuildURI before calling this routine , since this routine assumes xmlBuildRelativeURI_APIParam_1 has already been through some validation
The caller is responsible for call xmlFreePattern_APIName occupied by xmlCanonicPath_APIParam_0
The caller is responsible for call xmlFreePattern_APIName occupied by xmlPathToURI_APIParam_0
xmlCreateURI_APIName returns the new structure or NULL in case of error
If there is insufficient memory available, or the argument is NULL, the function returns NULL
If there is insufficient memory available, or the argument is NULL, the function returns NULL
If there is insufficient memory available, or the argument is NULL, the function returns NULL
If there is insufficient memory available, or the argument is NULL, the function returns NULL
xmlNormalizeURIPath_APIName returns 0 or an error code
xmlParseURIReference_APIName returns 0 or the error code
xmlParseURI_APIName returns a newly built xmlURIPtr or NULL in case of error
xmlParseURIRaw_APIName returns a newly built xmlURIPtr or NULL in case of error
xmlPathToURI_APIName returns a new URI, or a duplicate of the xmlPathToURI_APIParam_1 parameter if the construction fails
xmlSaveUri_APIName returns a new string (to be deallocated by caller
It will try to escape the chars needing this , but this is heuristic based it is impossible to be sure
xmlURIEscapeStr_APIName returns a new escaped string or NULL in case of error
xmlURIUnescapeString_APIName returns a copy of the string, but unescaped, will return NULL only in case of error
xmlHashAddEntry_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashAddEntry2_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashAddEntry3_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashUpdateEntry_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashUpdateEntry2_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashUpdateEntry3_APIName returns 0 the addition succeeded and -1 in case of error
xmlHashCopier_APIName returns a copy of the data or NULL in case of error
xmlHashCopy_APIName returns the new xmlHashCopy_APIParam_1 or NULL in case of error
xmlHashCreate_APIName returns the newly created object, or NULL if an error occurred
xmlHashCreateDict_APIName returns the newly created object, or NULL if an error occurred
xmlHashScan3_APIParam_3 is a second xmlHashScan3_APIParam_2 of the userdata or NULL
xmlHashScanFull3_APIParam_3 is a second xmlHashScanFull3_APIParam_2 of the userdata or NULL
xmlHashScan3_APIParam_4 is a third xmlHashScan3_APIParam_2 of the userdata or NULL
xmlHashScanFull3_APIParam_4 is a third xmlHashScanFull3_APIParam_2 of the userdata or NULL
xmlHashSize_APIName returns the number of elements in the hash xmlHashSize_APIParam_1 or -1 in case of error
xmlSchemaGetParserErrors_APIParam_2 is the error callback result
xmlRelaxNGGetParserErrors_APIParam_2 is the error callback result
xmlSchemaGetParserErrors_APIName returns -1 in case of failure, 0 otherwise
xmlRelaxNGGetParserErrors_APIName returns -1 in case of failure, 0 otherwise
xmlSchemaIsValid_APIName returns 1 if valid so far, 0 if errors were detected, and -1 in case of internal error
xmlSchemaNewDocParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchemaNewMemParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchemaNewParserCtxt_APIName returns the parser context or NULL in case of error
xmlRelaxNGNewDocParserCtxt_APIName returns the parser context or NULL in case of error
xmlRelaxNGNewMemParserCtxt_APIName returns the parser context or NULL in case of error
xmlRelaxNGNewParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchematronNewDocParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchematronNewMemParserCtxt_APIName returns the parser context or NULL in case of error
xmlSchematronNewParserCtxt_APIName returns the parser context or NULL in case of error
The document may be modified
The document may be modified
The document may be modified
The document may be modified
xmlSchemaNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlRelaxNGNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlSchematronNewValidCtxt_APIName returns the validation context or NULL in case of error
xmlSchemaParse_APIName returns the internal XML Schema structure built from the resource or NULL in case of error
xmlRelaxNGParse_APIName returns the internal XML RelaxNG structure built from the resource or NULL in case of error
xmlSchematronParse_APIName returns the internal XML Schematron structure built from the resource or NULL in case of error
xmlSchemaSAXPlug_APIName returns a pointer to a data structure needed to unplug the validation layer or NULL in case of errors
xmlSchemaSAXUnplug_APIName returns 0 in case of success and -1 in case of failure
xmlXPathNodeSetAddUnique_APIName returns 0 in case of success and -1 in case of failure
xmlSchemaSetParserErrors_APIParam_2 is the error callback
xmlRelaxNGSetParserErrors_APIParam_2 is the error callback
xmlRelaxNGSetParserStructuredErrors_APIParam_2 is the error callback
xmlSchemaSetValidOptions_APIName returns 0 in case of success, -1 in case of an API error
xmlSchemaValidCtxtGetOptions_APIName returns the option combination or -1 on error
xmlSchemaValidCtxtGetParserCtxt_APIName returns the parser context of the schema validation context or NULL in case of error
Validate an xmlSchemaValidateStream_APIParam_2 based on a flow of SAX event from the parser and forward the events to the @sax handler with the provided @user_data the user call xmlSchemaValidateStream_APIName must be a SAX2 one
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
The value of @outlen after return is the number of octets consumed
xmlCharEncCloseFunc_APIName returns 0 if success, or -1 in case of error
limit itself to 45 chars
xmlCharEncodingInputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed
xmlCharEncodingOutputFunc_APIName returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed
Generic front-end for the encoding xmlCharEncOutFunc_APIParam_1 output function a first call with @in == NULL has to be made firs to initiate the output xmlCharEncOutFunc_APIParam_3 case of non-stateless encoding needing to initiate their state or the output
a first call designed to produce heading info is called with xmlCharEncodingOutputFunc_APIParam_3 = NULL
The value of @outlen after return is the number of octets produced
this should also initialize the encoder state
Cleanup the memory allocated for the char call xmlInitCharEncodingHandlers_APIName , it unregisters all the encoding handlers and the aliases
xmlDetectCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values
xmlFindCharEncodingHandler_APIName returns the handler or NULL if not found
xmlGetCharEncodingHandler_APIName returns the handler or NULL if not found
xmlDetectCharEncoding_APIParam_1 is a pointer to the first bytes of the XML entity , must be at least 2 bytes long
xmlGetEncodingAlias_APIName returns NULL if not found, otherwise the original name
Initialize the char encoding support , the char encoding support call xmlRegisterDefaultOutputCallbacks_APIName encoding supported
Compare the string to the call xmlDelEncodingAlias_APIName already known
xmlInitCharEncodingHandlers_APIName usually does not need to be called in normal processing
xmlParseCharEncoding_APIName returns one of the XML_CHAR_ENCODING_... values or XML_CHAR_ENCODING_NONE if not recognized
xmlCopyError_APIParam_1 is a source error
For multi-threaded applications , this must be set separately for each thread
And @ctx will be passed as first argument to @handler For multi-threaded applications , this must be set separately for each thread
htmlDocContentDumpFormatOutput_APIParam_4 is should formatting spaces been added
htmlDocDumpMemoryFormat_APIParam_4 is should formatting spaces been added
htmlNodeDumpFileFormat_APIParam_5 is should formatting spaces been added
htmlNodeDumpFormatOutput_APIParam_5 is should formatting spaces been added
htmlSaveFileFormat_APIParam_4 is should formatting spaces been added
xmlDocDumpFormatMemory_APIParam_4 is should formatting spaces been added
xmlDocDumpFormatMemoryEnc_APIParam_5 is should formatting spaces been added
xmlDocFormatDump_APIParam_3 is should formatting spaces been added
xmlSaveFormatFile_APIParam_3 is should formatting spaces been added
xmlSaveFormatFileEnc_APIParam_4 is should formatting spaces be added
xmlSaveFormatFileTo_APIParam_4 is should formatting spaces been added
htmlDocDump_APIName returns the number of byte written or -1 in case of failure
htmlNodeDumpFileFormat_APIName returns the number of byte written or -1 in case of failure
htmlSaveFile_APIName returns the number of byte written or -1 in case of failure
htmlSaveFileEnc_APIName returns the number of byte written or -1 in case of failure
htmlSaveFileFormat_APIName returns the number of byte written or -1 in case of failure
xmlDocDump_APIName returns the number of bytes written or -1 in case of failure
xmlDocFormatDump_APIName returns the number of bytes written or -1 in case of failure
xmlSaveFile_APIName returns the number of bytes written or -1 in case of failure
xmlSaveFileTo_APIName returns the number of bytes written or -1 in case of failure
xmlSaveFileEnc_APIName returns the number of bytes written or -1 in case of failure
xmlSaveFormatFile_APIName returns the number of bytes written or -1 in case of failure
xmlSaveFormatFileTo_APIName returns the number of bytes written or -1 in case of failure
xmlFileRead_APIName returns the number of bytes written or < 0 in case of failure
it is up to the caller to free htmlDocDumpMemory_APIParam_0
it is up to the caller to free htmlDocDumpMemoryFormat_APIParam_0
htmlNewDoc_APIParam_1 is htmlNewDoc_APIParam_1 for the dtd , or NULL
htmlNewDocNoDtD_APIParam_1 is htmlNewDocNoDtD_APIParam_1 for the dtd , or NULL
xmlReaderForDoc_APIParam_3 is the document xmlReaderForDoc_APIParam_3 , or NULL
xmlReaderForFd_APIParam_3 is the document xmlReaderForFd_APIParam_3 , or NULL
xmlReaderForFile_APIParam_2 is the document xmlReaderForFile_APIParam_2 , or NULL
xmlReaderForIO_APIParam_5 is the document xmlReaderForIO_APIParam_5 , or NULL
xmlReaderForMemory_APIParam_4 is the document xmlReaderForMemory_APIParam_4 , or NULL
xmlReaderNewDoc_APIParam_4 is the document xmlReaderNewDoc_APIParam_4 , or NULL
xmlReaderNewFd_APIParam_4 is the document xmlReaderNewFd_APIParam_4 , or NULL
xmlReaderNewFile_APIParam_3 is the document xmlReaderNewFile_APIParam_3 , or NULL
xmlReaderNewIO_APIParam_6 is the document xmlReaderNewIO_APIParam_6 , or NULL
xmlReaderNewMemory_APIParam_5 is the document xmlReaderNewMemory_APIParam_5 , or NULL
xmlTextReaderSetup_APIParam_4 is the document xmlTextReaderSetup_APIParam_4 , or NULL
xmlCtxtReadDoc_APIParam_4 is the document xmlCtxtReadDoc_APIParam_4 , or NULL
xmlCtxtReadFd_APIParam_4 is the document xmlCtxtReadFd_APIParam_4 , or NULL
xmlCtxtReadFile_APIParam_3 is the document xmlCtxtReadFile_APIParam_3 , or NULL
xmlCtxtReadIO_APIParam_6 is the document xmlCtxtReadIO_APIParam_6 , or NULL
xmlCtxtReadMemory_APIParam_5 is the document xmlCtxtReadMemory_APIParam_5 , or NULL
xmlCtxtResetPush_APIParam_5 is the document xmlCtxtResetPush_APIParam_5 , or NULL
xmlReadDoc_APIParam_3 is the document xmlReadDoc_APIParam_3 , or NULL
xmlReadFd_APIParam_3 is the document xmlReadFd_APIParam_3 , or NULL
xmlReadFile_APIParam_2 is the document xmlReadFile_APIParam_2 , or NULL
xmlReadIO_APIParam_5 is the document xmlReadIO_APIParam_5 , or NULL
xmlReadMemory_APIParam_4 is the document xmlReadMemory_APIParam_4 , or NULL
htmlCtxtReadDoc_APIParam_4 is the document htmlCtxtReadDoc_APIParam_4 , or NULL
htmlCtxtReadFd_APIParam_4 is the document htmlCtxtReadFd_APIParam_4 , or NULL
htmlCtxtReadFile_APIParam_3 is the document htmlCtxtReadFile_APIParam_3 , or NULL
htmlCtxtReadIO_APIParam_6 is the document htmlCtxtReadIO_APIParam_6 , or NULL
htmlCtxtReadMemory_APIParam_5 is the document htmlCtxtReadMemory_APIParam_5 , or NULL
htmlReadDoc_APIParam_3 is the document htmlReadDoc_APIParam_3 , or NULL
htmlReadFd_APIParam_3 is the document htmlReadFd_APIParam_3 , or NULL
htmlReadFile_APIParam_2 is the document htmlReadFile_APIParam_2 , or NULL
htmlReadIO_APIParam_5 is the document htmlReadIO_APIParam_5 , or NULL
htmlReadMemory_APIParam_4 is the document htmlReadMemory_APIParam_4 , or NULL
htmlNewDoc_APIParam_2 is the external ID of the DTD , or NULL
htmlNewDocNoDtD_APIParam_2 is the external ID of the DTD , or NULL
htmlNewDocNoDtD_APIName returns a new document, do not initialize the DTD if not provided
Note that only one of ftpListCallback_APIParam_8 and ftpListCallback_APIParam_10
xmlNanoFTPCheckResponse_APIName returns the code number, or 0
xmlNanoFTPClose_APIName returns -1 incase of error, 0 otherwise
xmlNanoFTPCloseConnection_APIName returns -1 incase of error, 0 otherwise
xmlNanoFTPGet_APIName returns -1 incase of error, 0 otherwise
xmlNanoFTPGetConnection_APIName returns -1 incase of error, 0 otherwise
xmlNanoFTPList_APIName returns -1 incase of error, 0 otherwise
xmlNanoFTPConnectTo_APIName returns an fTP context or NULL if xmlNanoFTPConnectTo_APIName failed
xmlNanoFTPCwd_APIName returns -1 incase of error, 1 if CWD worked, 0 if CWD failed
xmlNanoFTPDele_APIName returns -1 incase of error, 1 if DELE worked, 0 if it failed
Currently only passive mode is supported
xmlNanoFTPOpen_APIName returns an FTP context, or NULL
xmlNanoFTPProxy_APIParam_5 is the xmlNanoFTPProxy_APIParam_5 of proxy 1 for using SITE , 2 for USER a@b
Initialize the FTP Proxy context by parsing the xmlNanoFTPScanProxy_APIParam_1 and finding the protocol host port it indicates
Initialize the HTTP Proxy context by parsing the xmlNanoHTTPScanProxy_APIParam_1 and finding the protocol host port it indicates
xmlNanoFTPUpdateURL_APIName returns 0 if Ok, -1 in case of error
the error is raised
Should be like ftp
Should be like http
3128 / A NULL xmlNanoFTPScanProxy_APIParam_1 cleans up proxy informations
3128 / A NULL xmlNanoHTTPScanProxy_APIParam_1 cleans up proxy informations
xmlC14NDocDumpMemory_APIName returns the number of bytes written on success or a negative value on fail
xmlC14NDocSave_APIName returns the number of bytes written success or a negative value on fail
the caller of xmlC14NDocDumpMemory_APIName is responsible for calling xmlFree_APIName to free call xmlMemUsed_APIName
xmlC14NDocDumpMemory_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSave_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSaveTo_APIParam_4 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NExecute_APIParam_5 is the list of inclusive namespace prefixes ended with a NULL or NULL
xmlC14NDocSaveTo_APIName returns non-negative value on success or a negative value on fail
xmlC14NExecute_APIName returns non-negative value on success or a negative value on fail
this buffer MUST have encoder == NULL
this buffer MUST have encoder == NULL
this buffer MUST have encoder == NULL
this buffer MUST have encoder == NULL
xmlTextReaderAttributeCount_APIName returns 0 i no attributes, -1 in case of error or the attribute count
xmlTextReaderBaseUri_APIName returns the base URI or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed
xmlByteConsumed_APIName returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed
xmlTextReaderConstEncoding_APIName returns a string containing the encoding of the document or NULL in case of error
xmlTextReaderConstBaseUri_APIName returns the base URI or NULL if not available, the string will be deallocated with the reader
xmlTextReaderConstLocalName_APIName returns the local name or NULL if not available, the string will be deallocated with the reader
xmlTextReaderConstName_APIName returns the local name or NULL if not available, the string is deallocated with the reader
xmlTextReaderConstPrefix_APIName returns the prefix or NULL if not available, the string is deallocated with the reader
xmlTextReaderPrefix_APIName returns the prefix or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderConstNamespaceUri_APIName returns the namespace URI or NULL if not available, the string will be deallocated with the reader
xmlTextReaderNamespaceUri_APIName returns the namespace URI or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderConstString_APIName returns an interned copy of the string or NULL in case of error
xmlStrdupFunc_APIName returns the copy of the string or NULL in case of error
xmlTextReaderConstValue_APIName returns the string or NULL if not available
xmlTextReaderValue_APIName returns the string or NULL if not available
xmlSchemaCollapseString_APIName returns the new string or NULL if no change was required
xmlSchemaWhiteSpaceReplace_APIName returns the new string or NULL if no change was required
xmlTextReaderConstXmlLang_APIName returns the xmllang value or NULL if none exists
xmlTextReaderXmlLang_APIName returns the xmllang value or NULL if none exists., if non NULL it need to be freed by the caller
xmlXPathNsLookup_APIName returns the value or NULL if not found
xmlSchemaValueGetNext_APIName returns the next value or NULL if there was none, or on API errors
xmlTextReaderConstXmlVersion_APIName returns a string containing the XML version of the document or NULL in case of error
as a result of this call , the xmlTextReaderCurrentDoc_APIParam_1 will not destroy the associated XML document and calling xmlFreeDoc_APIName on the result is needed once the xmlTextReaderCurrentDoc_APIParam_1 parsing has finished
xmlTextReaderErrorFunc_APIParam_4 is a xmlTextReaderErrorFunc_APIParam_4 indicating where the error occurred
xmlTextReaderExpand_APIName returns a node pointer valid until the next xmlTextReaderRead_APIName call or NULL in case of error
xmlTextReaderGetAttribute_APIName returns a string containing the value of the specified attribute, or NULL in case of error
xmlTextReaderGetAttributeNo_APIName returns a string containing the value of the specified attribute, or NULL in case of error
xmlTextReaderGetAttributeNs_APIName returns a string containing the value of the specified attribute, or NULL in case of error
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
The string must be deallocated by the caller
xmlTextReaderGetErrorHandler_APIParam_2 is the callback function or NULL is no callback has been registered
xmlTextReaderGetParserColumnNumber_APIName returns an int or 0 if not available
xmlTextReaderGetParserLineNumber_APIName returns an int or 0 if not available
xmlTextReaderGetParserProp_APIName returns the value, usually 0 or 1, or -1 in case of error
xmlTextReaderGetRemainder_APIName returns the xmlParserInputBufferPtr attached to the XML or NULL in case of error
xmlTextReaderIsDefault_APIName returns 0 if not defaulted, 1 if defaulted, and -1 in case of error
xmlTextReaderIsValid_APIName returns the flag value 1 if valid, 0 if no, and -1 in case of error
xmlTextReaderLocatorBaseURI_APIName returns the base URI or NULL in case of error, if non NULL it need to be freed by the caller
xmlTextReaderLocalName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller
xmlTextReaderName_APIName returns the local name or NULL if not available, if non NULL it need to be freed by the caller
To return the default namespace, specify NULL
xmlTextReaderLookupNamespace_APIName returns a string containing the namespace URI to which the xmlTextReaderLookupNamespace_APIParam_2 maps or NULL in case of error
xmlTextReaderMoveToAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToAttributeNo_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToAttributeNs_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToElement_APIName returns 1 in case of success, -1 in case of error, 0 if not moved
xmlTextReaderMoveToFirstAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
xmlTextReaderMoveToNextAttribute_APIName returns 1 in case of success, -1 in case of error, 0 if not found
Currently implemented only for Readers built on a document
is of course not supported either
Since attribute value and end of line normalizations are a MUST in the XML specification only the value true is accepted
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
The caller must also use xmlTextReaderCurrentDoc_APIName to keep an handle on the resulting document once parsing has finished
xmlTextReaderPreservePattern_APIParam_3 is the prefix definitions , array of or NULL
xmlPatterncompile_APIParam_4 is the prefix definitions , array of or NULL
xmlTextReaderPreservePattern_APIName returns a non-negative number in case of success and -1 in case of error
xmlTextReaderReadInnerXml_APIName returns a string containing the XML content, or NULL if the current node is neither an element nor attribute, or has no child nodes
xmlTextReaderReadOuterXml_APIName returns a string containing the node and any XML content, or NULL if the current node cannot be serialized
xmlTextReaderReadString_APIName returns a string containing the contents of the Element or Text node, or NULL if the xmlTextReaderReadString_APIParam_1 is positioned on any other type of node
xmlTextReaderRelaxNGSetSchema_APIName returns 0 in case the RelaxNG validation could be activated and -1 in case of error
xmlTextReaderRelaxNGValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
xmlTextReaderRelaxNGValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
xmlTextReaderSchemaValidate_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
xmlTextReaderSchemaValidateCtxt_APIName returns 0 in case the schemas validation could be activated and -1 in case of error
xmlTextReaderSetSchema_APIName returns 0 in case the Schema validation could be activated and -1 in case of error
@ The @schema should not be call xmlRegFreeRegexp_APIName is deallocated or its use has been deactivated
@ The @schema should not be call xmlRegFreeRegexp_APIName is deallocated or its use has been deactivated
xmlTextReaderRelaxNGValidate_APIParam_2 is the path to a RelaxNG schema or NULL
xmlTextReaderSchemaValidate_APIParam_2 is the path to a W3C XSD schema or NULL
xmlTextReaderSetParserProp_APIParam_3 is usually 0 or 1 to activate it
The result must be deallocated with xmlFree_APIName
xmlNanoHTTPEncoding_APIName returns the specified encoding or NULL if not available
Note that a value of -1 indicates that the content length element was not included in the response header
xmlNanoHTTPFetch_APIParam_2 is the xmlNanoHTTPFetch_APIParam_2 where the content should be saved
xmlNanoHTTPSave_APIParam_2 is the xmlNanoHTTPSave_APIParam_2 where the content should be saved
xmlNanoHTTPFetch_APIName returns -1 in case of failure, 0 incase of success
xmlNanoHTTPSave_APIName returns -1 in case of failure, 0 incase of success
The xmlNanoHTTPFetch_APIParam_3 , must be freed by the caller
The xmlNanoHTTPMethod_APIParam_4 , must be freed by the caller
The xmlNanoHTTPMethodRedir_APIParam_4 , or xmlNanoHTTPMethodRedir_APIParam_5 , must be freed by the caller
The xmlNanoHTTPOpen_APIParam_2 , must be freed by the caller
The xmlNanoHTTPOpenRedir_APIParam_2 , must be freed by the caller
xmlNanoHTTPMethod_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPMethodRedir_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPOpen_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPOpenRedir_APIName returns NULL in case of failure, otherwise a request handler
xmlNanoHTTPMimeType_APIName returns the specified Mime-Type or NULL if not available
xmlNanoHTTPRedir_APIName returns the specified redirection URL or NULL if not redirected
xmlNanoHTTPReturnCode_APIName returns the HTTP return code for the request
xmlSchematronValidateDoc_APIName returns 0 in case of success, -1 in case of internal error and an error count otherwise
Free the dictionary mutex
xmlDictCreate_APIName returns the newly created dictionary, or NULL if an error occurred
xmlDictCreateSub_APIName returns the newly created dictionary, or NULL if an error occurred
Do not call 
xmlDictExists_APIName returns the internal copy of the xmlDictExists_APIParam_2 or NULL if not found
xmlDictLookup_APIName returns the internal copy of the xmlDictLookup_APIParam_2 or NULL in case of internal error
xmlDictQLookup_APIName returns the internal copy of the QName or NULL in case of internal error
xmlDictSetLimit_APIName returns the previous xmlDictSetLimit_APIParam_2 of the dictionary or 0
xmlDictSize_APIName returns the number of elements in the dictionary or -1 in case of error
xmlXPathCompareValues_APIName returns 1 if the comparison succeeded, 0 if it failed
The < comparison will be true if the first number is less than the second number
The < = comparison will be true if the first number is greater than the second number
The < = comparison will be true if the first number is less than or equal to the second number
The < = comparison will be true if the first number is greater than or equal to the second number
Implement the boolean_APIName XPath function boolean boolean The boolean function converts its argument to a boolean as follows
Implement the contains_APIName XPath function boolean contains The contains function returns true if the first argument string contains the second argument string, and otherwise returns false
- a number is true
xmlXPathEqualValues_APIName returns 0 or 1 depending on the results of the test
xmlXPathNotEqualValues_APIName returns 0 or 1 depending on the results of the test
xmlXPathFunctionLookup_APIName returns the xmlXPathFunction or NULL if not found
xmlXPathFunctionLookupNS_APIName returns the xmlXPathFunction or NULL if not found
xmlXPathHasSameNodes_APIName returns true  if @nodes1 shares any node with @nodes2, false  otherwise
htmlAutoCloseTag_APIName returns 1 if autoclose, 0 otherwise
htmlIsAutoClosed_APIName returns 1 if autoclosed, 0 otherwise
xmlXPathIsNodeType_APIName returns 1 if true 0 otherwise
the result is the union of the result of applying id to the string value of each of the nodes in the argument node-set
xmlXPathLeading_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
xmlXPathLeadingSorted_APIName returns the nodes in @nodes1 that precede the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
If the node-set is empty or the first node has no name, an empty stringbe returned by xmlXPathLocalNameFunction_APIName
If the node-set is empty, the first node has no name, or the expanded name has no namespace URI, an empty stringbe returned by xmlXPathNamespaceURIFunction_APIName
xmlXPathNextAncestor_APIName returns the next element following that axis
xmlXPathNextAncestorOrSelf_APIName returns the next element following that axis
xmlXPathNextAttribute_APIName returns the next element following that axis
xmlXPathNextChild_APIName returns the next element following that axis
xmlXPathNextDescendantOrSelf_APIName returns the next element following that axis
xmlXPathNextDescendant_APIName returns the next element following that axis
xmlXPathNextFollowing_APIName returns the next element following that axis
xmlXPathNextFollowingSibling_APIName returns the next element following that axis
xmlXPathNextNamespace_APIName returns the next element following that axis
xmlXPathNextParent_APIName returns the next element following that axis
xmlXPathNextPreceding_APIName returns the next element following that axis
xmlXPathNextPrecedingSibling_APIName returns the next element following that axis
xmlXPathNextSelf_APIName returns the next element following that axis
xmlXPathNodeLeading_APIName returns the xmlXPathNodeLeading_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
xmlXPathNodeLeadingSorted_APIName returns the xmlXPathNodeLeadingSorted_APIParam_1 in @nodes that precede @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
xmlXPathNodeSetMerge_APIParam_1 is the first NodeSet or NULL
Namespace nodes in libxml do not match the XPath semantic
xmlXPathNodeSetMerge_APIName returns @val1 once extended or NULL in case of error
xmlXPathNodeTrailing_APIName returns the xmlXPathNodeTrailing_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
xmlXPathNodeTrailingSorted_APIName returns the xmlXPathNodeTrailingSorted_APIParam_1 in @nodes that follow @node in document order, @nodes if @node is NULL or an empty node-set if @nodes does not contain @node
Implement the not_APIName XPath function boolean not The not function returns true if its argument is false, and false otherwise
xmlXPathRegisterFunc_APIParam_3 is the function implementation or NULL
xmlXPathRegisterFuncNS_APIParam_4 is the function implementation or NULL
xmlXPathRegisterNs_APIParam_2 is the namespace xmlXPathRegisterNs_APIParam_2 can not be NULL or empty string
xmlXPathRegisterVariable_APIParam_3 is the variable xmlXPathRegisterVariable_APIParam_3 or NULL
xmlXPathRegisterVariableNS_APIParam_4 is the variable xmlXPathRegisterVariableNS_APIParam_4 or NULL
If there are two such numbers, the one that is closest to positive infinitybe returned by xmlXPathRoundFunction_APIName
Implement the starts-with_APIName XPath function boolean starts-with The starts-with function returns true if the first argument string starts with the second argument string, and otherwise returns false
- The boolean false value is converted to the string false
The boolean true value is converted to the string true
substring returns "234
substring returns "2345
substring-after returns 04/01, and substring-after returns 99/04/01
The string function converts an object to a string as follows
xmlXPathTrailing_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
xmlXPathTrailingSorted_APIName returns the nodes in @nodes1 that follow the first node in @nodes2 in document order, @nodes1 if @nodes2 is NULL or empty or an empty node-set if @nodes1 does not contain @nodes2
- substring returns "234" - substring returns "12" - substring returns "" - substring returns "" - substring returns "12345" - substring returns
xmlXPathVariableLookup_APIName returns a copy of the value or NULL if not found
xmlXPathVariableLookupNS_APIName returns the a copy of the value or NULL if not found
Implement the substring-after_APIName XPath function string substring-after The substring-after function returns the substring of the first argument string that follows the first occurrence of the second argument string in the first argument string, or the empty stringi if the first argument string does not contain the second argument string
the comparisons and addition used for the above follow the standard IEEE 754 rules
occurrences of that character in the first argument string are removed
there must be no leading zeros before the decimal point apart possibly from the one required digit immediately before the decimal point
beyond the one required digit after the decimal point there must be as many , but only as many , more digits as are needed to uniquely distinguish the number from all other IEEE 754 numeric values
xmlPatternGetStreamCtxt_APIName returns a pointer to the context or NULL in case of failure
xmlPatternMaxDepth_APIName returns -2 if no limit , otherwise the depth, and -1 in case of error
xmlPatternMinDepth_APIName returns -1 in case of error otherwise the depth
A number is converted to a string as follows + NaN is converted to the string NaN + positive zero is converted to the string 0 + negative zero is converted to the string 0 + positive infinity is converted to the string Infinity + negative infinity is converted to the string - Infinity + , the number is represented in decimal form as a Number with no decimal point and no leading zeros , preceded by a minus sign if the number is negative + otherwise , the number is represented in decimal form as a Number including a decimal point with at least one digit before the decimal point and at least one digit after the decimal point , preceded by a minus sign if the number is negative
xmlPatternGetStreamCtxt_APIName should work
xmlPatterncompile_APIParam_1 is the xmlPatterncompile_APIParam_1 to compile
xmlPatterncompile_APIName returns the compiled form of the xmlPatterncompile_APIParam_1 or NULL in case of error
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
Both @name and @ns being NULL means the / i.e
xmlStreamPush_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPush_APIParam_1 is a match and 0 otherwise
xmlStreamPushAttr_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushAttr_APIParam_1 is a match and 0 otherwise
xmlStreamPushNode_APIName returns -1 in case of error, 1 if the current state in the xmlStreamPushNode_APIParam_1 is a match and 0 otherwise
strings for xmlStreamPush_APIParam_2 and xmlStreamPush_APIParam_3 will be expected to come from the dictionary
strings for xmlStreamPushAttr_APIParam_2 and xmlStreamPushAttr_APIParam_3 will be expected to come from the dictionary
strings for xmlStreamPushNode_APIParam_2 and xmlStreamPushNode_APIParam_3 will be expected to come from the dictionary
xmlStreamWantsAnyNode_APIName returns 1 in case of need of nodes of the above described types, 0 otherwise
-1 on API errors
element-nodes and attribute-nodes need to be pushed
xlinkGetDefaultDetect_APIName returns the current function or NULL
xmlSAX2GetEntity_APIName returns the xmlEntityPtr if found
xmlSAX2GetParameterEntity_APIName returns the xmlEntityPtr if found
getEntitySAXFunc_APIName returns the xmlEntityPtr if found
getParameterEntitySAXFunc_APIName returns the xmlEntityPtr if found
xmlSAX2ResolveEntity_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour
resolveEntitySAXFunc_APIName returns the xmlParserInputPtr if inlined or NULL for DOM behaviour
xmlSAX2StartElement_APIParam_3 is An array of name/value attributes pairs , NULL terminated
startElementSAXFunc_APIParam_3 is An array of name/value attributes pairs , NULL terminated
xmlSAXDefaultVersion_APIParam_1 is the xmlSAXDefaultVersion_APIParam_1, 1 or 2. xmlSAXDefaultVersion_APIName returns the previous value in case of success and -1 in case of error
xmlSAXVersion_APIParam_2 is the xmlSAXVersion_APIParam_2, 1 or 2. xmlSAXVersion_APIName returns 0 in case of success and -1 in case of error
This should not be called by user level code
xmlGcMemGet_APIName returns 0 on success
xmlGcMemSetup_APIName returns 0 on success
xmlInitMemory_APIName returns 0 on success
xmlMemGet_APIName returns 0 on success
xmlMemSetup_APIName returns 0 on success
Should this be blocked
Should this be blocked
xmlMallocAtomicLoc_APIParam_2 is the xmlMallocAtomicLoc_APIParam_2 name or NULL
xmlMallocLoc_APIParam_2 is the xmlMallocLoc_APIParam_2 name or NULL
xmlMemStrdupLoc_APIParam_2 is the xmlMemStrdupLoc_APIParam_2 name or NULL
xmlReallocLoc_APIParam_3 is the xmlReallocLoc_APIParam_3 name or NULL
xmlMallocAtomicLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMemMalloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMemRealloc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlReallocLoc_APIName returns a pointer to the allocated area or NULL in case of lack of memory
xmlMallocFunc_APIName returns a pointer to the newly allocated block or NULL in case of error
xmlMemStrdupLoc_APIName returns a pointer to the new string or NULL if allocation error occurred
xmlMemoryStrdup_APIName returns a pointer to the new string or NULL if allocation error occurred
xmlReallocFunc_APIName returns a pointer to the newly reallocated block or NULL in case of error
xmlBoolToText_APIName returns a pointer to either "True" or "False
Check the document for potential content problems , and xmlDebugCheckDocument_APIParam_1 the errors to @output
xmlDebugCheckDocument_APIName returns the number of errors found
Dumps debug information for the element xmlDebugDumpOneNode_APIParam_2 , it is not recursive
xmlShellCmd_APIName returns an int, negative returns indicating errors
xmlShellPrintXPathError_APIParam_2 is the argument that cause xpath to fail
xmlShellPrintXPathError_APIParam_1 is valid xpath error id
@utf is assumed to be null-terminated
xmlCheckUTF8_APIName returns value true if @utf is valid
Should be a bit more readable and faster than xmlStrcmp_APIName
xmlGetUTF8Char_APIName returns the char value or -1 in case of error, and sets *len to the actual number of bytes consumed (0 in case of error
xmlStrcasestr_APIName returns the xmlChar * for the first occurrence or NULL
xmlStrchr_APIName returns the xmlChar * for the first occurrence or NULL
xmlStrstr_APIName returns the xmlChar * for the first occurrence or NULL
xmlStrsub_APIName returns the xmlChar * for the first occurrence or NULL
The original @cur is reallocated and should not be freed
Note that if @len < 0 this is an API error and NULL will be returned
xmlStrncat_APIName returns a new xmlChar *, the original @cur is reallocated and should not be freed
xmlStrncatNew_APIParam_3 is the xmlStrncatNew_APIParam_3 of @str2 or < 0. xmlStrncatNew_APIName returns a new xmlChar * or NULL
xmlUTF8Strloc_APIName returns the relative character position of the desired char or -1 if not found
xmlUTF8Strndup_APIName returns a new UTF8 * or NULL
xmlUTF8Strpos_APIName returns a pointer to the UTF8 character or NULL
xmlUTF8Strsub_APIName returns a pointer to a newly created string or NULL if any problem
One should call xmlCleanupParser_APIName only
xmlByteConsumed_APIName is computed in bytes from the beginning starting at zero and finishing at the size in byte of the file
The remaining characters will be parsed so The remaining characters do not need to be fed in again through xmlParseChunk
To allow content encoding detection , @size should be > = 4 The value of @filename is used for fetching external entities and error/warning reports
xmlCtxtReadDoc_APIName returns the resulting document tree
xmlCtxtReadFd_APIName returns the resulting document tree
xmlCtxtReadFile_APIName returns the resulting document tree
xmlCtxtReadIO_APIName returns the resulting document tree
xmlCtxtReadMemory_APIName returns the resulting document tree
xmlParseDoc_APIName returns the resulting document tree
xmlParseEntity_APIName returns the resulting document tree
xmlParseFile_APIName returns the resulting document tree if the file was wellformed, NULL otherwise
xmlParseMemory_APIName returns the resulting document tree
xmlReadDoc_APIName returns the resulting document tree
xmlReadFd_APIName returns the resulting document tree
xmlReadFile_APIName returns the resulting document tree
xmlReadIO_APIName returns the resulting document tree
xmlReadMemory_APIName returns the resulting document tree
xmlSAXParseDoc_APIName returns the resulting document tree
xmlSAXParseEntity_APIName returns the resulting document tree
xmlSAXParseFile_APIName returns the resulting document tree
xmlSAXParseFileWithData_APIName returns the resulting document tree
xmlSAXParseMemory_APIName returns the resulting document tree
xmlSAXParseMemoryWithData_APIName returns the resulting document tree
htmlCtxtReadDoc_APIName returns the resulting document tree
htmlCtxtReadFd_APIName returns the resulting document tree
htmlCtxtReadFile_APIName returns the resulting document tree
htmlCtxtReadIO_APIName returns the resulting document tree
htmlCtxtReadMemory_APIName returns the resulting document tree
htmlParseDoc_APIName returns the resulting document tree
htmlParseFile_APIName returns the resulting document tree
htmlReadDoc_APIName returns the resulting document tree
htmlReadFd_APIName returns the resulting document tree
htmlReadFile_APIName returns the resulting document tree
htmlReadIO_APIName returns the resulting document tree
htmlReadMemory_APIName returns the resulting document tree
xmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented xmlCtxtUseOptions_APIParam_2 in case of error
htmlCtxtUseOptions_APIName returns 0 in case of success, the set of unknown or unimplemented htmlCtxtUseOptions_APIParam_2 in case of error
xmlGetFeature_APIParam_2 is the feature xmlGetFeature_APIParam_2
xmlSetFeature_APIParam_2 is the feature xmlSetFeature_APIParam_2
xmlGetFeaturesList_APIParam_1 is the length of the features name array
xmlGetFeaturesList_APIParam_2 is an array of string to be filled with the features name
xmlIOParseDTD_APIParam_1 is the SAX handler block or NULL
xmlIOParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
xmlParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
xmlRecoverMemory_APIName returns the resulting document tree or NULL in case of error
xmlSAXParseDTD_APIName returns the resulting xmlDtdPtr or NULL in case of error
xmlParseCatalogFile_APIName returns the resulting document tree or NULL in case of error
xmlGetFeaturesList_APIName returns -1 in case or error, or the total number of features, xmlGetFeaturesList_APIParam_1 is updated with the number of strings copied, strings must not be deallocated
Set and return the previous value for default blanks text nodes support
This may break on old application and is turned off by default
Upgrade of 1.X code should be done by using xmlIsBlankNode_APIName commodity function to detect the  empty  nodes generated
xmlKeepBlanksDefault_APIParam_1 is int 0 or 1. xmlKeepBlanksDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
xmlLineNumbersDefault_APIParam_1 is int 0 or 1. xmlLineNumbersDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
xmlPedanticParserDefault_APIParam_1 is int 0 or 1. xmlPedanticParserDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
xmlSubstituteEntitiesDefault_APIParam_1 is int 0 or 1. xmlSubstituteEntitiesDefault_APIName returns the last value for 0 for no substitution, 1 for substitution
xmlLoadExternalEntity_APIParam_3 is the context in which the entity is called or NULL
xmlNoNetExternalEntityLoader_APIParam_3 is the context in which the entity is called or NULL
xmlNewIOInputStream_APIName returns the new xmlNewIOInputStream_APIParam_2 stream or NULL
xmlParseBalancedChunkMemoryRecover_APIParam_7 is return nodes
xmlParseDocument_APIName returns 0, -1 in case of error
xmlParseExtParsedEnt_APIName returns 0, -1 in case of error
htmlParseDocument_APIName returns 0, -1 in case of error
xmlParserFindNodeInfo_APIName returns an xmlParserNodeInfo block pointer or NULL
xmlParserFindNodeInfoIndex_APIName returns a long indicating the position of the record
Find the index that the info record for the given xmlParserFindNodeInfoIndex_APIParam_2 is or should be at in a sorted sequence
xmlParserInputRead_APIName was internal and is deprecated
xmlParserInputRead_APIName returns -1 as this is an error to use it
xmlRecoverDoc_APIName returns the resulting document tree or NULL in case of failure
xmlRecoverFile_APIName returns the resulting document tree or NULL in case of failure
In the case the document is not Well Formed , a attempt to build a tree is tried anyway
In the case the document is not Well Formed , an attempt to build a tree is tried anyway
In the case the document is not Well Formed , it attempts to build a tree anyway
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
is NULL , fallback to the default DOM tree building routines
xmlSAXUserParseFile_APIName returns 0 in case of success or a error number otherwise
xmlSAXUserParseMemory_APIName returns 0 in case of success or a error number otherwise
The xmlSetupParserForBuffer_APIParam_2 parameter must not be NULL , but the xmlSetupParserForBuffer_APIParam_3 parameter can be
Set and return the previous value for default entity support
xmlAddChildList_APIName returns the last child or NULL in case of error
xmlAddSibling_APIName returns the new element or NULL in case of error
xmlBufContent_APIName returns the internal content
xmlBufferContent_APIName returns the internal content
xmlBufEnd_APIName returns the end of the internal content or NULL in case of error
xmlBufShrink_APIName returns the number of byte removed or 0 in case of failure
NOTE that this routine behaviour differs from xmlBufferShrink_APIName as it will return 0 on error instead of -1 due to size_t being used as the return type
xmlBufferAdd_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
xmlBufferAddHead_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
xmlBufferCCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
xmlBufferCat_APIName returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error
This does not work with immutable buffers as they can not be reset
xmlBufferGrow_APIName returns the new available space or -1 in case of error
xmlBufferResize_APIName returns 0 in case of problems, 1 otherwise
xmlBufferShrink_APIName returns the number of #xmlChar removed, or -1 in case of failure
If xmlBuildQName_APIParam_2 is NULL or empty {}_APIName returns xmlBuildQName_APIParam_1
xmlBuildQName_APIName returns the new string which must be freed by the caller if different from @memory and @ncname or NULL in case of error
xmlChildElementCount_APIName returns the count of element child or 0 if not available
xmlCopyDoc_APIName returns a new #xmlDocPtr, or NULL in case of error
xmlCopyDtd_APIName returns a new #xmlDtdPtr, or NULL in case of error
xmlCopyNamespace_APIName returns a new #xmlNsPtr, or NULL in case of error
xmlCopyNamespaceList_APIName returns a new #xmlNsPtr, or NULL in case of error
xmlCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error
xmlCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error
xmlCopyProp_APIName returns a new #xmlAttrPtr, or NULL in case of error
xmlCopyPropList_APIName returns a new #xmlAttrPtr, or NULL in case of error
xmlDocCopyNode_APIName returns a new #xmlNodePtr, or NULL in case of error
xmlDocCopyNodeList_APIName returns a new #xmlNodePtr, or NULL in case of error
Currently this returns an error for XInclude
@destParent ensures that the tree is namespace wellformed by creating additional ns-decls where needed
Ensures that the tree is namespace wellformed by creating additional ns-decls where needed
1 -RRB- , nsDef entries on element-nodes are used 2 -RRB- If * no * call xmlXPathIsNodeType_APIName , @destDoc - > oldNs entries are used
xmlDOMWrapNewCtxt_APIName returns the xmlDOMWrapCtxtPtr or NULL in case of an internal error
call xmlDOMWrapReconcileNamespaces_APIName to ns-decls hold on element-nodes
This will substitute ns-references to node - > nsDef for ns-references to doc - > oldNs , thus ensuring the removed branch to be autark wrt ns-references
xmlDOMWrapRemoveNode_APIName returns 0 on success, 1 if the xmlDOMWrapRemoveNode_APIParam_3 is not supported, -1 on API and internal errors
it is up to the caller to free xmlDocDumpFormatMemory_APIParam_0 with xmlFree_APIName
it is up to the caller to free xmlDocDumpMemory_APIParam_0 with xmlFree_APIName
it is up to the caller to free xmlGetNoNsProp_APIParam_0 with xmlFree_APIName
it is up to the caller to free xmlGetNsProp_APIParam_0 with xmlFree_APIName
it is up to the caller to free xmlGetProp_APIParam_0 with xmlFree_APIName
it is up to the caller to free xmlNodeGetContent_APIParam_0 with xmlFree_APIName
xmlDocGetRootElement_APIName returns the #xmlNodePtr for the root or NULL
xmlFirstElementChild_APIName returns the first element child or NULL if not available
xmlGetBufferAllocationScheme_APIName returns the current allocation scheme
xmlGetLastChild_APIName returns the last child or NULL if none
xmlGetLineNo_APIName returns the line number if successful, -1 otherwise
xmlGetNoNsProp_APIName returns the attribute value or NULL if not found
xmlGetNsProp_APIName returns the attribute value or NULL if not found
xmlGetProp_APIName returns the attribute value or NULL if not found
The caller must free xmlGetNodePath_APIParam_0
xmlGetNodePath_APIName returns the new path or NULL in case of error
xmlGetNsList_APIName returns an NULL terminated array of all the #xmlNsPtr found that need to be freed by the caller or NULL if no namespace if defined
Note that a namespace of NULL indicates to use the default namespace
xmlHasNsProp_APIName returns the attribute or the attribute declaration or NULL if neither was found
xmlHasProp_APIName returns the attribute or the attribute declaration or NULL if neither was found
xmlIsBlankNode_APIName returns 1 yes, 0 no
xmlNodeIsText_APIName returns 1 yes, 0 no
xmlLastElementChild_APIName returns the last element child or NULL if not available
XML special chars must be escaped first by using xmlEncodeEntitiesReentrant_APIName , or xmlNewTextChild_APIName should be used
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
@content is supposed to be a piece of XML CDATA , so it allow entities references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName
Creation of a Namespace , the old way using PI and without scoping DEPRECATED
xmlNewGlobalNs_APIName returns NULL this functionality had been removed
Note that for a default namespace , @prefix should be NULL
xmlNewNs_APIName returns a new namespace pointer or NULL
xmlSearchNs_APIName returns the namespace pointer or NULL
xmlSearchNsByHref_APIName returns the namespace pointer or NULL
We use href == NULL in the case of an element creation where the namespace was not defined
Use xmlNewNode_APIName is needed as new node name
Use xmlNewChild_APIName will contain entities that need to be preserved
xmlNextElementSibling_APIName returns the next element sibling or NULL if not available
In contrast to xmlNodeSetContent_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported
In contrast to xmlNodeSetContentLen_APIName , @content is supposed to be raw text , so unescaped XML special chars are allowed , entity references are not supported
The code should work on both XML and HTML document
Note , use xmlBufNodeDump_APIName instead
xmlNodeGetBase_APIName returns a pointer to the base URL, or NULL if not found it is up to the caller to free xmlNodeGetBase_APIParam_0 with xmlFree_APIName
xmlNodeGetLang_APIName returns a pointer to the lang value, or NULL if not found it is up to the caller to free xmlNodeGetLang_APIParam_0 with xmlFree_APIName
xmlNodeListGetRawString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName
xmlNodeListGetString_APIName returns a pointer to the string copy, the caller must free it with xmlFree_APIName
xmlNodeListGetRawString_APIParam_3 is should we replace entity contents or show their external form
xmlNodeListGetString_APIParam_3 is should we replace entity contents or show their external form
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
@content is supposed to be a piece of XML CDATA , so @content allows entity references , but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant_APIName resp
xmlPreviousElementSibling_APIName returns the previous element sibling or NULL if not available
The subtree may still hold pointers to namespace declarations outside the subtree or invalid/masked
xmlReplaceNode_APIName returns the @old node
This call xmlOutputBufferClose_APIName on xmlSaveFileTo_APIParam_1 which is not available after this call
This call xmlOutputBufferClose_APIName on xmlSaveFormatFileTo_APIParam_1 which is not available after this call
xmlSaveFormatFileEnc_APIParam_3 is the name of the xmlSaveFormatFileEnc_APIParam_3 to use or NULL
recurse on the parents until it finds the defined namespace or return NULL otherwise
Recurse on the parents until it finds the defined namespace or return NULL otherwise
@nameSpace can be NULL , this is a search for the default namespace
We do not allow to cross entities boundaries
The xmlSetNsProp_APIParam_2 structure must be in scope , this is not checked
Both the return value and the xmlSplitQName2_APIParam_2 must be freed by the caller
Should produce a flat tree with only TEXTs and ENTITY_REFs
Should produce a flat tree with only TEXTs and ENTITY_REFs
Should produce a flat tree with only TEXTs and ENTITY_REFs
Should produce a flat tree with only TEXTs and ENTITY_REFs
it is an error it there no such ns-binding for the prefix in scope
xmlSplitQName3_APIName returns NULL if it is not a Qualified Name, otherwise, update xmlSplitQName3_APIParam_2 with the length in byte of the prefix and return a pointer to the start of the xmlSplitQName3_APIParam_1 without the prefix
Note that namespace nodes can not be unlinked as they do not have pointer to their parent
This handles only attributes in no namespace
xmlValidateNCName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlValidateNMToken_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlValidateName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlValidateQName_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValPredefTypeNode_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValPredefTypeNodeNoNorm_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlSchemaValidatePredefinedType_APIName returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error
xmlModuleFree_APIName returns 0 in case of success, -1 in case of argument error
xmlModuleOpen_APIParam_2 are not yet implemented
xmlModuleClose_APIName returns 0 in case of success, -1 in case of argument error and -2 if the xmlModuleClose_APIParam_1 could not be closed/unloaded
xmlModuleOpen_APIName returns a handle for the module or NULL in case of error
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
that due to portability issues , behaviour can only be guaranteed with @name using ASCII
We canot guarantee that an UTF-8 string would work , which is why xmlModuleOpen_APIParam_1 is a const char * and not a const xmlChar
We canot guarantee that an UTF-8 string would work , which is why xmlModuleSymbol_APIParam_2 is a const char * and not a const xmlChar
Checks Has full knowledge of Required and Deprecated attributes
htmlAttrAllowed_APIParam_3 is whether to allow deprecated attributes
htmlAttrAllowed_APIName returns one of HTML_REQUIRED, HTML_VALID, HTML_DEPRECATED, HTML_INVALID
htmlElementStatusHere_APIName returns one of HTML_VALID, HTML_DEPRECATED, HTML_INVALID
The HTML DTD allows a tag to implicitly close other tags
The HTML DTD allows a tag to implicitly close other tags
The HTML DTD allows a tag to implicitly close other tags
The HTML DTD allows a tag to implicitly close other tags
htmlEntityLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise
htmlEntityValueLookup_APIName returns the associated htmlEntityDescPtr if found, NULL otherwise
the linear scan is really ugly , an hash table is really needed
the linear scan is really ugly , an hash table is really needed
the linear scan is really ugly , an hash table is really needed
the linear scan is really ugly , an hash table is really needed
htmlIsScriptAttribute_APIName returns 1 is the attribute is a script 0 otherwise
htmlNewParserCtxt_APIName returns the htmlParserCtxtPtr or NULL in case of allocation error
htmlNodeStatus_APIParam_2 is whether to allow deprecated elements
htmlNodeStatus_APIName returns for Element nodes, a return from htmlElementAllowedHere  or htmlElementStatusHere
for Attribute nodes, a return from htmlAttrAllowed for other nodes, HTML_NA (no checks performed
If htmlSAXParseDoc_APIParam_3 is NULL, fallback to the default DOM behavior and return a tree
htmlSAXParseDoc_APIName returns the resulting document tree 
htmlSAXParseFile_APIName returns the resulting document tree 
htmlTagLookup_APIName returns the related htmlElemDescPtr or NULL if not found
See xmlLinkGetData returns
xmlListAppend_APIName returns 0 in case of success, 1 in case of failure
xmlListInsert_APIName returns 0 in case of success, 1 in case of failure
xmlListCreate_APIName returns the new list or NULL in case of error
xmlListDataCompare_APIName returns 0 is equality, -1 or 1 otherwise depending on the ordering
xmlListDup_APIName returns a new copy of the list or NULL in case of error
xmlListEnd_APIName returns the last element in the list, or NULL
xmlListFront_APIName returns the first element in the list, or NULL
xmlListPushBack_APIName returns 1 if successful, 0 otherwise
xmlListPushFront_APIName returns 1 if successful, 0 otherwise
xmlACatalogAdd_APIName returns 0 if successful, -1 otherwise
xmlCatalogAdd_APIName returns 0 if successful, -1 otherwise
xmlListRemoveAll_APIName returns the number of deallocation, or 0 if not found
xmlListSize_APIName returns the number of elements in the list or -1 in case of error
xmlListWalker_APIName returns 0 to stop walking the list, 1 otherwise
xmlAllocOutputBuffer_APIParam_1 is the call xmlDelEncodingAlias_APIName or NULL
xmlOutputBufferCreateBuffer_APIParam_2 is the call xmlDelEncodingAlias_APIName or NULL
xmlOutputBufferCreateFd_APIParam_2 is the call xmlDelEncodingAlias_APIName or NULL
xmlOutputBufferCreateFile_APIParam_2 is the call xmlDelEncodingAlias_APIName or NULL
xmlOutputBufferCreateFilename_APIParam_2 is the call xmlDelEncodingAlias_APIName or NULL
xmlAllocOutputBuffer_APIName returns the new parser output or NULL
xmlOutputBufferCreateBuffer_APIName returns the new parser output or NULL
xmlOutputBufferCreateFd_APIName returns the new parser output or NULL
xmlOutputBufferCreateFile_APIName returns the new parser output or NULL
xmlOutputBufferCreateIO_APIName returns the new parser output or NULL
xmlAllocParserInputBuffer_APIName returns the new parser input or NULL
xmlParserInputBufferCreateFd_APIName returns the new parser input or NULL
xmlParserInputBufferCreateFile_APIName returns the new parser input or NULL
xmlParserInputBufferCreateFilename_APIName returns the new parser input or NULL
xmlParserInputBufferCreateIO_APIName returns the new parser input or NULL
xmlParserInputBufferCreateMem_APIName returns the new parser input or NULL
xmlParserInputBufferCreateStatic_APIName returns the new parser input or NULL
if stat succeeds and the file is a directory, returns 2. otherwise returns 1
xmlCheckFilename_APIName returns 1. if stat fails, returns 0
xmlCheckHTTPInput_APIName returns the input or NULL in case of HTTP error
xmlFileMatch_APIName returns 1 if matches, 0 otherwise
xmlIOFTPMatch_APIName returns 1 if matches, 0 otherwise
xmlIOHTTPMatch_APIName returns 1 if matches, 0 otherwise
xmlFileOpen_APIName returns a handler or NULL in case or failure
xmlInputOpenCallback_APIName returns an Input context or NULL in case or error
xmlInputReadCallback_APIName returns the number of bytes read or -1 in case of error
xmlNoNetExternalEntityLoader_APIName returns a new allocated xmlParserInputPtr, or NULL
xmlNormalizeWindowsPath_APIName is obsolete
Please see xmlURIFromPath in uri.c for a better solution
xmlOutputBufferCreateFilename_APIName returns the new output or NULL
the library only support writing to a local file
xmlOutputBufferGetContent_APIName returns a pointer to the data or NULL in case of error
xmlOutputBufferGetSize_APIName returns 0 in case or error or no data is held, the size otherwise
xmlOutputOpenCallback_APIName returns an Output context or NULL in case or error
xmlParserGetDirectory_APIName returns a new allocated string containing the directory, or NULL
Calling this method changes the HTTP output method to use the  POST  method instead
xmlACatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise
xmlCatalogRemove_APIName returns the number of entries removed if successful, -1 otherwise
one should be able to remove one extra copy by copying directly onto in - > buffer or in - > raw
xmlACatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
xmlCatalogLocalResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
xmlCatalogResolve_APIName returns the URI of the resource or NULL if not found, it must be freed by the caller
xmlACatalogResolvePublic_APIName returns the local resource if found or NULL otherwise, the value returned must be freed by the caller
xmlACatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlCatalogResolvePublic_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlCatalogResolveSystem_APIName returns the resource if found or NULL otherwise, the value returned must be freed by the caller
xmlACatalogResolveURI_APIName returns the xmlACatalogResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller
xmlCatalogLocalResolveURI_APIName returns the xmlCatalogLocalResolveURI_APIParam_2 of the resource or NULL if not found, it must be freed by the caller
xmlCatalogResolveURI_APIName returns the xmlCatalogResolveURI_APIParam_1 of the resource or NULL if not found, it must be freed by the caller
xmlCatalogConvert_APIName returns the number of entries converted if successful, -1 otherwise
xmlConvertSGMLCatalog_APIName returns the number of entries converted if successful, -1 otherwise
to what catalogs should be accepted
to what catalogs should be accepted
to what catalogs should be accepted
to what catalogs should be accepted
xmlCatalogGetPublic_APIName returns the resource if found or NULL otherwise
xmlCatalogGetSystem_APIName returns the resource if found or NULL otherwise
Try to call xmlCatalogResolvePublic_APIName associated to a public ID DEPRECATED , use xmlCatalogResolvePublic_APIName
Try to call xmlCatalogResolvePublic_APIName associated to a system ID DEPRECATED , use xmlCatalogResolveSystem_APIName
xmlCatalogIsEmpty_APIParam_1 is should this call xmlNewCatalog_APIName
xmlNewCatalog_APIParam_1 is should this call xmlNewCatalog_APIName
xmlCatalogSetDefaults_APIParam_1 is what catalogs should be accepted
xmlInitializeCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup
xmlLoadCatalog_APIName is not thread safe , catalog initialization should preferably be done once at startup
xmlLoadCatalogs_APIName is not thread safe , catalog initialization should preferably be done once at startup
xmlLoadACatalog_APIName returns the catalog parsed or NULL in case of error
xmlLoadSGMLSuperCatalog_APIName returns the catalog parsed or NULL in case of error
This is only needed for call xmlLoadSGMLSuperCatalog_APIName like adding and removing CATALOG or DELEGATE entries
xmlSchemaCheckFacet_APIName returns 0 if valid, a positive error code if not valid and -1 in case of an internal or API error
xmlSchemaCopyValue_APIName returns the copy or NULL if a copy for a data-type is not implemented
xmlSchemaGetBuiltInType_APIName returns the xmlSchemaGetBuiltInType_APIParam_1 if found, NULL otherwise
Some value types are not supported yet , resulting in a @retValue of
The caller has to FREE xmlSchemaGetCanonValue_APIParam_0
The caller has to free xmlSchemaGetCanonValueWhtsp_APIParam_0
This will be fixed in XML Schema 1.1
xmlSchemaGetPredefinedType_APIName returns the type if found, NULL otherwise
xmlSchemaNewFacet_APIName returns the newly allocated structure or NULL in case or error
xmlSchemaNewNOTATIONValue_APIName returns a pointer to the new value or NULL in case of error
xmlSchemaNewQNameValue_APIName returns a pointer to the new value or NULL in case of an error
The xmlSchemaNewStringValue_APIParam_1 can be of XML_SCHEMAS_STRING
We need this for anySimpleType as well
xmlSchemaNewStringValue_APIName returns a pointer to the new xmlSchemaNewStringValue_APIParam_2 or NULL in case of error
if true a xmlSchemaValPredefTypeNode_APIParam_2 is computed and returned in @val
if true a xmlSchemaValPredefTypeNodeNoNorm_APIParam_2 is computed and returned in @val
if true a xmlSchemaValidatePredefinedType_APIParam_2 is computed and returned in @val
Note that @value needs to be the * normalized * xmlSchemaValidateFacetWhtsp_APIParam_4
xmlSchemaValueGetAsString_APIName returns the string value or NULL if there was none, or on API errors
