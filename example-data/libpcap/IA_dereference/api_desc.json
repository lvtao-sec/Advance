{"struct pcap_pkthdr write packet capture file": "pcap_dump", "pcap_t force pcap_dispatch or pcap_loop call return": "pcap_breakloop", "set pcap_t check whether monitor mode can be set": "pcap_can_set_rfmon", "activate pcap_t activate capture handle": "pcap_activate", "pcap_t get snapshot length": "pcap_snapshot", "find ipv4 network number netmask device": "pcap_lookupnet", "close pcap_t close capture device or savefile pcap_t p": "pcap_close", "get pcap_t get time stamp precision return capture": "pcap_get_tstamp_precision", "const struct pcap_pkthdr const struct bpf_program check whether filter match packet": "pcap_offline_filter", "pcap_t get link": "pcap_datalink", "pcap_t set or get state non": "pcap_setnonblock", "pcap_t get list time stamp type support by capture device , free list": "pcap_list_tstamp_types", "get list link": "pcap_free_datalinks", "pcap_t set time stamp precision return capture": "pcap_set_tstamp_precision", "get require struct timeval pcap_t get file descriptor which select can be do live capture": "pcap_get_required_select_timeout", "long pcap_dumper_t get current file offset savefile write": "pcap_dump_ftell", "inject unk pcap_t transmit packet": "pcap_inject", "get name or description link": "pcap_datalink_val_to_name", "compile struct bpf_program pcap_t compile filter expression": "pcap_compile", "convert pcap_error or pcap_warn value string": "pcap_statustostr", "get time stamp type value correspond time stamp type name": "pcap_tstamp_type_name_to_val", "pcap_t set monitor mode": "pcap_set_rfmon", "get name or description time stamp type value": "pcap_tstamp_type_val_to_description", "pcap_t set snapshot length": "pcap_set_snaplen", "unk pcap_t set direction which packet be capture": "pcap_setdirection", "close pcap_dumper_t close savefile write": "pcap_dump_close", "struct pcap_stat pcap_t get capture statistic": "pcap_stats", "struct unk free bpf program": "pcap_freecode", "struct pcap_pkthdr pcap_t read next packet pcap_t": "pcap_next", "pcap_t set packet buffer timeout": "pcap_set_timeout", "be unk pcap_t find out whether savefile have native byte order": "pcap_is_swapped", "pcap_t set buffer size": "pcap_set_buffer_size", "file pcap_t get standard stream savefile read": "pcap_file", "find default device which capture": "pcap_lookupdev", "unk pcap_handler pcap_t process packet live capture or savefile": "pcap_dispatch", "create pcap_t create live capture handle": "pcap_create", "pcap_t set immediate mode": "pcap_set_immediate_mode", "pcap_t set promiscuous mode": "pcap_set_promisc", "pcap_dumper_t flush savefile packet dump": "pcap_dump_flush", "pcap_t get file descriptor live capture": "pcap_fileno", "pcap_t get or print libpcap error message text": "pcap_geterr", "pcap_if_t get list capture device , free list": "pcap_freealldevs", "file pcap_dumper_t get standard stream savefile write": "pcap_dump_file", "pcap_dumper_t pcap_t open file which write packet": "pcap_dump_open", "pcap_t open saved capture file reading": "pcap_open_offline", "convert errno value string": "pcap_strerror", "pcap_t set time stamp type be use by capture device": "pcap_set_tstamp_type", "get version information libpcap": "pcap_lib_version", "pcap_t open fake pcap_t compile filter or open capture output": "pcap_open_dead", "pcap_t set capture protocol": "pcap_set_protocol_linux", "pcap_t open device capturing": "pcap_open_live", "pcap_t set link": "pcap_set_datalink", "struct bpf_program pcap_t set filter": "pcap_setfilter", "pcap_t get version number savefile": "pcap_major_version"}