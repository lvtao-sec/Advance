{"add dbus_bool_t unk unk dbusconnection add message filter": "dbus_connection_add_filter", "dbus_bool_t dbuserror dbusconnection register dbus_bus_register_apiparam_1 bus": "dbus_bus_register", "get dbusmessage get number unix fd attach dbus_message_get_n_unix_fds_apiparam_1": "_dbus_message_get_n_unix_fds", "get dbustimeout get dbus_timeout_get_interval_apiparam_1 interval": "dbus_timeout_get_interval", "handle dbus_bool_t dbustimeout call dbus_timeout_handle_apiparam_1 handler dbus_timeout_handle_apiparam_1": "dbus_timeout_handle", "get dbuserror dbusconnection ask bus return globally unique identifi , as describe d_bus specification": "dbus_bus_get_id", "get dbusmessageiter read unk dbus_message_iter_get_basic_apiparam_2 message iterator": "dbus_message_iter_get_basic", "remove dbuserror dbusconnection remove previously_added match dbus_bus_remove_match_apiparam_2 by value most recently_adde identical dbus_bus_remove_match_apiparam_2 get remove": "dbus_bus_remove_match", "allocate dbus_bool_t allocate integer identifier be use store application_specific datum dbusconnection": "dbus_connection_allocate_data_slot", "get be authenticate dbus_bool_t dbusconnection get whether dbus_connection_get_is_authenticated_apiparam_1 be authenticate": "dbus_connection_get_is_authenticated", "dbussignatureiter initialize dbussignatureiter read type dbus_signature_iter_init_apiparam_2": "dbus_signature_iter_init", "get fix dbusmessageiter read block fixed_length value message iterator": "dbus_message_iter_get_fixed_array", "dbuserror free dbus_error_free_apiparam_1 set , then reinitialize dbus_error_free_apiparam_1 as dbus_error_init_apiname": "dbus_error_free", "dbusmessage const dbusmessage create dbus_message_copy_apiparam_1 be exact replica dbus_message_copy_apiparam_1 specify , except refcount be set 1 , dbus_message_copy_apiparam_1 serial be reset 0 , if original dbus_message_copy_apiparam_1 be lock dbus_message_copy_apiparam_1 be lock": "dbus_message_copy", "set dbus_bool_t dbusmessage set reply serial dbus_message_set_reply_serial_apiparam_1 serial dbus_message_set_reply_serial_apiparam_1 be reply": "dbus_message_set_reply_serial", "set allow dbus_bool_t dbusconnection unk must be call server side dbus_connection_set_allow_anonymous_apiparam_1 when dbus_connection_set_allow_anonymous_apiparam_1 be first see dbusnewconnectionfunction": "dbus_connection_set_allow_anonymous", "get dbus_bool_t va_list dbuserror dbusmessage like dbus_message_get_args but take va_list by language binding": "dbus_message_get_args_valist", "dbus_bool_t dbussignatureiter skip next value level": "dbus_signature_iter_next", "pende get complete dbus_bool_t dbuspendingcall check whether dbus_pending_call_get_completed_apiparam_1 call have receive reply yet , or": "dbus_pending_call_get_completed", "dbus_bool_t dbusmessageiter dbusmessage initialize dbusmessageiter read argument dbus_message_iter_init_apiparam_1 pass": "dbus_message_iter_init", "pende unk dbusmessage dbuspendingcall get reply , or return null if none have receive yet": "dbus_pending_call_steal_reply", "validate dbus_bool_t dbuserror check type dbus_signature_validate_apiparam_1 validity": "dbus_signature_validate", "have dbus_bool_t dbuserror dbusconnection ask bus whether certain dbus_bus_name_has_owner_apiparam_2 have owner": "dbus_bus_name_has_owner", "dbusconnection block until outgoing message queue be empty": "dbus_connection_flush", "deallocate global identifi server datum slot": "dbus_server_free_data_slot", "dbusmessage dbusconnection return first_received message incoming message queue , remove queue": "dbus_connection_pop_message", "get dispatch unk dbusconnection get current state incoming message queue": "dbus_connection_get_dispatch_status", "escape give string as dbus_address_escape_value_apiparam_1 key value pair d_bus address": "dbus_address_escape_value", "set dbus_bool_t unk set global flag whether dbus_connection_new_apiname set sigpipe behavior sig_ign": "dbus_connection_set_change_sigpipe", "get dbusmessage get interface member invoke or emit dbus_message_type_signal": "dbus_message_get_member", "append dbus_bool_t dbusmessage append field dbus_message_append_args_apiparam_1 give variable argument list": "dbus_message_append_args", "be dbus_bool_t return true if argument be valid dbus_type_is_valid_apiparam_1": "dbus_type_is_valid", "dbus_bool_t dbuserror check dbus_validate_error_name_apiparam_2 dbus_validate_error_name_apiparam_1 validity": "dbus_validate_error_name", "pende deallocate global identifi dbuspendingcall datum slot": "dbus_pending_call_free_data_slot", "fix dbus_bool_t dbusmessageiter append block fixed_length value array": "dbus_message_iter_append_fixed_array", "unk allocate give number dbus_malloc0_apiparam_1 , as standard malloc_apiname , but dbus_malloc0_apiparam_1 be initialize zero as calloc_apiname": "dbus_malloc0", "send dbus_bool_t dbusconnection test whether certain dbus_connection_can_send_type_apiparam_2 can be send via dbus_connection_can_send_type_apiparam_1": "dbus_connection_can_send_type", "unk borrow dbusmessage dbusconnection use keep dbus_connection_steal_borrowed_message_apiparam_2 after peek dbus_connection_steal_borrowed_message_apiparam_2 use dbus_connection_borrow_message_apiname": "dbus_connection_steal_borrowed_message", "have dbus_bool_t dbusmessage check whether dbus_message_has_sender_apiparam_1 have give unique dbus_message_has_sender_apiparam_2 as sender": "dbus_message_has_sender", "be set dbus_bool_t const dbuserror check whether dbus_error_is_set_apiparam_1 occur dbus_error_is_set_apiparam_1 be set": "dbus_error_is_set", "watch get dbuswatch return socket be watch , unix return # if -PRON- transport be unk so dbus_watch_get_unix_fd_apiname be prefer": "dbus_watch_get_socket", "dbuserror dbuserror move error dbus_move_error_apiparam_1 into dbus_move_error_apiparam_2 , free dbus_move_error_apiparam_1 overwrite dbus_move_error_apiparam_2": "dbus_move_error", "get dbusmessageiter return number byte array as marshal wire protocol": "dbus_message_iter_get_array_len", "allocate dbus_bool_t allocate integer identifier be use store application_specific datum dbusserver": "dbus_server_allocate_data_slot", "dbus_bool_t dbuserror check object dbus_validate_path_apiparam_1 validity": "dbus_validate_path", "dbusmessage dbusmessage construct message be reply method call": "dbus_message_new_method_return", "free block dbus_free_apiparam_1 previously allocate by dbus_malloc_apiname or dbus_malloc0_apiname": "dbus_free", "get long dbusconnection get approximate number uni fds message outgoing message queue": "dbus_connection_get_outgoing_unix_fds", "utility function convert d_bus message dbus_message_type_to_string_apiparam_1 into machine_readable string translate": "dbus_message_type_to_string", "send dbus_bool_t dbusmessage dbusconnection add dbus_connection_send_apiparam_2 outgoing dbus_connection_send_apiparam_2 queue": "dbus_connection_send", "get dbustimeout get datum previously set dbus_timeout_set_data_apiname or null if none": "dbus_timeout_get_data", "get long dbusconnection get approximate size byte message outgoing message queue": "dbus_connection_get_outgoing_size", "add dbuserror dbusconnection add match dbus_bus_add_match_apiparam_2 match message go through message bus": "dbus_bus_add_match", "get dbus_bool_t dbusconnection get window user sid dbus_connection_get_windows_user_apiparam_1 if know": "dbus_connection_get_windows_user", "have dbus_bool_t dbusmessage check if dbus_message_has_member_apiparam_1 have interface dbus_message_has_member_apiparam_2": "dbus_message_has_member", "append dbus_bool_t va_list dbusmessage like dbus_message_append_args_apiname but take va_list by language binding": "dbus_message_append_args_valist", "set dbus_bool_t unk dbustimeouttoggledfunction dbusremovetimeoutfunction dbusaddtimeoutfunction dbusserver set timeout function dbus_server_set_timeout_functions_apiparam_1": "dbus_server_set_timeout_functions", "have dbus_bool_t dbusmessage check whether dbus_message_has_signature_apiparam_1 have give dbus_message_has_signature_apiparam_2 ; see dbus_message_get_signature_apiname more detail what dbus_message_has_signature_apiparam_2 look like": "dbus_message_has_signature", "get unsigned long dbuserror dbusconnection ask bus return uid name dbus_bus_get_unix_user_apiparam_1 authenticate as , if": "dbus_bus_get_unix_user", "dbuserror dbusconnection ask bus unassign give dbus_bus_release_name_apiparam_2 dbus_bus_release_name_apiparam_1 by invoke releasename method bus": "dbus_bus_release_name", "dbusmessage dbuserror demarshal d_bus message format describe d_bus specification": "dbus_message_demarshal", "dbus_bool_t dbuserror check member dbus_validate_member_apiparam_1 validity": "dbus_validate_member", "pende dbuspendingcall decrement reference count dbus_pending_call_unref_apiparam_1 call , free if count reach # dbus_pending_call_unref_apiparam_1 be dbus_pending_call_unref_apiparam_1 call object": "dbus_pending_call_unref", "set dbus_bool_t unk dbuswatchtoggledfunction dbusremovewatchfunction dbusaddwatchfunction dbusconnection set watch function dbus_connection_set_watch_functions_apiparam_1": "dbus_connection_set_watch_functions", "send unk dbusconnection free dbus_connection_free_preallocated_send_apiparam_2 message_sending resource dbus_connection_preallocate_send_apiname": "dbus_connection_free_preallocated_send", "deallocate global identifi message datum slot": "dbus_message_free_data_slot", "dbusmessage dbusmessage create message be error reply another message , allow -PRON- printf format": "dbus_message_new_error_printf", "get const dbussignatureiter return current type point by iterator": "dbus_signature_iter_get_current_type", "dbus_bool_t dbusmessageiter dbusmessageiter appends container_type value message": "dbus_message_iter_open_container", "get dbus_bool_t unsigned long dbusconnection get process identifi dbus_connection_get_unix_process_id_apiparam_1 if": "dbus_connection_get_unix_process_id", "dbuserror dbusconnection ask bus assign give dbus_bus_request_name_apiparam_2 dbus_bus_request_name_apiparam_1 by invoke requestname method bus": "dbus_bus_request_name", "get dbusmessage get object path dbus_message_get_path_apiparam_1 be send or emit dbus_message_type_signal": "dbus_message_get_path", "set dbus_bool_t dbusmessage dbuserror set dbuserror base content give dbus_set_error_from_message_apiparam_2": "dbus_set_error_from_message", "get dbus_bool_t dbusconnection get underlie window or unix socket file descriptor dbus_connection_get_socket_apiparam_1 , if": "dbus_connection_get_socket", "get receive long dbusconnection get value set by dbus_connection_set_max_received_unix_fds_apiname": "dbus_connection_get_max_received_unix_fds", "pende allocate dbus_bool_t allocate integer identifier be use store application_specific datum dbuspendingcall": "dbus_pending_call_allocate_data_slot", "set dbus_bool_t dbusmessage set interface dbus_message_set_member_apiparam_2 invoke or emit dbus_message_type_signal": "dbus_message_set_member", "get enable dbus_bool_t dbustimeout return whether dbus_timeout_get_enabled_apiparam_1 be enable or": "dbus_timeout_get_enabled", "set dbus_bool_t dbusmessage set dbus_message_set_sender_apiparam_1 dbus_message_set_sender_apiparam_2": "dbus_message_set_sender", "get reply dbusmessage return serial dbus_message_get_reply_serial_apiparam_1 be reply or # if none": "dbus_message_get_reply_serial", "borrow dbusmessage dbusconnection return first_received message incoming message queue , leave queue": "dbus_connection_borrow_message", "need return number byte require be buffer demarshal d_bus message": "dbus_message_demarshal_bytes_needed", "dbusmessageiter dbusmessage initialize dbusmessageiter append argument end dbus_message_iter_init_append_apiparam_1": "dbus_message_iter_init_append", "get dbusmessage get error name or null if none": "dbus_message_get_error_name", "set unk dbustimeout set dbus_timeout_set_data_apiparam_2 which can be retrieve dbus_timeout_get_data_apiname": "dbus_timeout_set_data", "get dbusserver return unique identifi dbus_server_get_id_apiparam_1 , as newly_allocated string which must be free by caller": "dbus_server_get_id", "dbusmessageiter dbusmessageiter recurse into container value when read value message , initialize sub_iterator traverse child value container": "dbus_message_iter_recurse", "have dbus_bool_t dbusmessage check if dbus_message_has_path_apiparam_1 have particular object dbus_message_has_path_apiparam_2": "dbus_message_has_path", "pende notify dbus_bool_t unk unk dbuspendingcall set notification dbus_pending_call_set_notify_apiparam_2 be call when reply be receive or dbus_pending_call_set_notify_apiparam_1 call time out": "dbus_pending_call_set_notify", "pende dbuspendingcall dbuspendingcall increment reference count dbus_pending_call_ref_apiparam_1 call": "dbus_pending_call_ref", "get long dbusconnection get value set by dbus_connection_set_max_message_size_apiname": "dbus_connection_get_max_message_size", "deallocate global identifi connection data slot": "dbus_connection_free_data_slot", "dbusmessage dbusmessage increment reference count dbusmessage": "dbus_message_ref", "set unk unk dbusconnection set predicate dbus_connection_set_unix_user_function_apiparam_2 use determine whether give user identifi be allow connect": "dbus_connection_set_unix_user_function", "set dbus_bool_t dbusserver set authentication dbus_server_set_auth_mechanisms_apiparam_2 dbus_server_set_auth_mechanisms_apiparam_1 offer client , as null terminate array mechanism name": "dbus_server_set_auth_mechanisms", "read write dbus_bool_t dbusconnection dbus_connection_read_write_apiname be intend application want write main loop deal dbuswatch dbustimeout": "dbus_connection_read_write", "abandon dbusmessageiter dbusmessageiter abandon creation contained_typed value free resource create by dbus_message_iter_open_container_apiname": "dbus_message_iter_abandon_container_if_open", "set dbus_bool_t dbusmessage set flag indicating owner destination name be automatically start before dbus_message_set_auto_start_apiparam_1 be deliver": "dbus_message_set_auto_start", "get dbusserver retrieve datum previously set dbus_server_set_data_apiname": "dbus_server_get_data", "get dbusmessage get destination dbus_message_get_destination_apiparam_1 or null if be none set": "dbus_message_get_destination", "dispatch unk dbusconnection process incoming datum": "dbus_connection_dispatch", "get be connect dbus_bool_t dbusserver return true if dbus_server_get_is_connected_apiparam_1 be still listen connection": "dbus_server_get_is_connected", "dbus_bool_t dbusmessage turn dbusmessage into marshal form as describe d_bus specification": "dbus_message_marshal", "get dbusmessageiter return current signature message iterator": "dbus_message_iter_get_signature", "have dbus_bool_t dbusmessageiter check if iterator have more field": "dbus_message_iter_has_next", "dbusserver dbusserver increment reference count dbusserver": "dbus_server_ref", "free null terminate array string": "dbus_free_string_array", "get dbusconnection get identifi server address -PRON- be authenticate , if dbus_connection_get_server_id_apiparam_1 be client side": "dbus_connection_get_server_id", "unk allocate give number dbus_malloc_apiparam_1 , as standard malloc_apiname": "dbus_malloc", "set dbuserror assign dbus_set_error_const_apiparam_1 dbus_set_error_const_apiparam_2 dbus_set_error_const_apiparam_3 dbuserror": "dbus_set_error_const", "get dbusconnection retrieve datum previously set dbus_connection_set_data_apiname": "dbus_connection_get_data", "pende get dbuspendingcall retrieve datum previously set dbus_pending_call_set_data_apiname": "dbus_pending_call_get_data", "dbusmessage decrement reference count dbusmessage , free dbus_message_unref_apiparam_1 if count reach # dbus_message_unref_apiparam_1 be dbus_message_unref_apiparam_1 see dbus_message_ref": "dbus_message_unref", "set long dbusconnection specifie maximum number unix fds message dbus_connection_set_max_message_unix_fds_apiparam_1 be allow receive": "dbus_connection_set_max_message_unix_fds", "be dbus_bool_t basic type be somewhat arbitrary concept , but intent be include type be unk by single dbus_type_is_basic_apiparam_1 , no additional type information or nest value": "dbus_type_is_basic", "watch set unk dbuswatch set dbus_watch_set_data_apiparam_2 which can be retrieve dbus_watch_get_data_apiname": "dbus_watch_set_data", "set dbus_bool_t unk dbusmessage store pointer dbusmessage , along optional function be use free dbus_message_set_data_apiparam_3 when dbus_message_set_data_apiparam_3 be set again , or when dbus_message_set_data_apiparam_1 be finalize": "dbus_message_set_data", "be dbus_bool_t dbusmessage check whether dbus_message_is_signal_apiparam_1 be signal give interface member field": "dbus_message_is_signal", "dbusconnection dbusconnection increment reference count dbusconnection": "dbus_connection_ref", "get decompose dbus_bool_t dbusmessage get object dbus_message_get_path_decomposed_apiparam_2 dbus_message_get_path_decomposed_apiparam_1 be send or emit decompose format one array element per dbus_message_get_path_decomposed_apiparam_2 component": "dbus_message_get_path_decomposed", "get dbusmessageiter return element type array message iterator point": "dbus_message_iter_get_element_type", "send dbusmessage dbuserror dbusmessage dbusconnection send dbus_connection_send_with_reply_and_block_apiparam_2 block certain time period while wait reply": "dbus_connection_send_with_reply_and_block", "be dbus_bool_t dbusmessage check whether dbus_message_is_error_apiparam_1 be error reply give error name": "dbus_message_is_error", "set dbus_bool_t dbusmessage set message dbus_message_set_destination_apiparam_2": "dbus_message_set_destination", "get dbusmessage get interface dbus_message_get_interface_apiparam_1 be send or emit dbus_message_type_signal": "dbus_message_get_interface", "set peer dbus_bool_t dbusconnection normally dbusconnection automatically handle message interface": "dbus_connection_set_route_peer_messages", "dbusmessage dbusconnection use return dbus_connection_return_message_apiparam_2 after peek dbus_connection_return_message_apiparam_2 use dbus_connection_borrow_message_apiname": "dbus_connection_return_message", "dbus_bool_t dbuserror dbusconnection start service request ownership give dbus_bus_start_service_by_name_apiparam_2": "dbus_bus_start_service_by_name", "thread unk dbus_bool_t const unk initialize thread , like dbus_threads_init_default_apiname": "dbus_threads_init", "get dbusmessage return serial dbus_message_get_serial_apiparam_1 or # if none have specify": "dbus_message_get_serial", "get dbus_bool_t dbusmessage return true if dbus_message_get_no_reply_apiparam_1 do expect reply": "dbus_message_get_no_reply", "validate dbus_bool_t dbuserror check string validity": "dbus_validate_utf8", "watch get enable dbus_bool_t dbuswatch return whether dbus_watch_get_enabled_apiparam_1 be enable or": "dbus_watch_get_enabled", "set dbus_bool_t dbusmessage set container instance dbus_message_set_container_instance_apiparam_1 be send": "dbus_message_set_container_instance", "set disconnect dbus_bool_t dbusconnection set whether exit_apiname should be call when dbus_connection_set_exit_on_disconnect_apiparam_1 receive disconnect signal": "dbus_connection_set_exit_on_disconnect", "get unk return value dbus_address_entry_get_value_apiparam_2 dbus_address_entry_get_value_apiparam_1": "dbus_address_entry_get_value", "get dbus_bool_t dbusconnection get adt audit dbus_connection_get_adt_audit_session_data_apiparam_2 dbus_connection_get_adt_audit_session_data_apiparam_1 if": "dbus_connection_get_adt_audit_session_data", "pende cancel dbuspendingcall cancel dbus_pending_call_cancel_apiparam_1 call , such reply or error receive just be ignore": "dbus_pending_call_cancel", "set unk unk dbusconnection set predicate dbus_connection_set_windows_user_function_apiparam_2 use determine whether give user identifi be allow connect": "dbus_connection_set_windows_user_function", "try dbus_bool_t dbuserror const unk dbusconnection register handler give dbus_connection_try_register_object_path_apiparam_2 object hierarchy": "dbus_connection_try_register_object_path", "dbusmessage construct message represent signal emission": "dbus_message_new_signal", "get dbusmessage get type signature dbus_message_get_signature_apiparam_1 , i": "dbus_message_get_signature", "set dbus_bool_t dbusmessage set object path dbus_message_set_path_apiparam_1 be send or one signal be emit dbus_message_type_signal": "dbus_message_set_path", "dbus_bool_t const unk dbusconnection register handler give dbus_connection_register_object_path_apiparam_2 object hierarchy": "dbus_connection_register_object_path", "dbus_bool_t dbusmessageiter move iterator next field , if": "dbus_message_iter_next", "set unk dbusnewconnectionfunction dbusserver set dbus_server_set_new_connection_function_apiparam_2 be use handling connection": "dbus_server_set_new_connection_function", "dbusserver decrement reference count dbusserver": "dbus_server_unref", "dbus_bool_t wrapper setenv_apiname": "dbus_setenv", "get dbusconnection get unique name dbus_bus_get_unique_name_apiparam_1 as assign by message bus": "dbus_bus_get_unique_name", "get dbus_bool_t dbuserror dbusmessage get argument dbus_message_get_args_apiparam_1 give variable argument list": "dbus_message_get_args", "get get dynamically link version libdbus": "dbus_get_version", "set long dbusconnection specifie maximum dbus_connection_set_max_message_size_apiparam_2 message dbus_connection_set_max_message_size_apiparam_1 be allow receive": "dbus_connection_set_max_message_size", "dbusconnection dbuserror open , dedicated connection remote dbus_connection_open_private_apiparam_1": "dbus_connection_open_private", "try get dbuserror obtain machine uuid machine process be run": "dbus_try_get_local_machine_id", "get dbus_bool_t dbusconnection get unix file descriptor dbus_connection_get_unix_fd_apiparam_1 , if": "dbus_connection_get_unix_fd", "get const dbussignatureiter convenience function return element type array ; dbus_signature_iter_get_element_type_apiname allow -PRON- avoid initialize sub_iterator get current type": "dbus_signature_iter_get_element_type", "get be dbus_bool_t dbusconnection get whether dbus_connection_get_is_anonymous_apiparam_1 be authenticate as specific user": "dbus_connection_get_is_anonymous", "get dbusmessage get unique name connection which originate dbus_message_get_sender_apiparam_1 , or null if unknown or inapplicable": "dbus_message_get_sender", "get dbusconnection dbuserror dbusbustype connect bus daemon register client as dbus_bus_register_apiname": "dbus_bus_get_private", "get dbusserver return address dbus_server_get_address_apiparam_1 , as newly_allocated string which must be free by caller": "dbus_server_get_address", "unk free null terminate array address dbus_address_entries_free_apiparam_1": "dbus_address_entries_free", "dbus_bool_t dbuserror check interface dbus_validate_interface_apiparam_1 validity": "dbus_validate_interface", "dbusmessage dbusmessage create message be error reply another message": "dbus_message_new_error", "dbuserror initialize dbuserror structure": "dbus_error_init", "get dbus_bool_t unsigned long dbusconnection get unix user identifi dbus_connection_get_unix_user_apiparam_1 if know": "dbus_connection_get_unix_user", "send unk dbusconnection preallocate resource need send message , allow message be send without possibility memory allocation failure": "dbus_connection_preallocate_send", "get dbus_bool_t dbusmessage return true if dbus_message_get_auto_start_apiparam_1 cause owner destination name be auto_start": "dbus_message_get_auto_start", "have dbus_bool_t dbusmessage check whether dbus_message_has_destination_apiparam_1 be send give dbus_message_has_destination_apiparam_2": "dbus_message_has_destination", "validate dbus_bool_t dbuserror check type dbus_signature_validate_single_apiparam_1 be both valid contain exactly one complete type": "dbus_signature_validate_single", "set dbus_bool_t dbusconnection set unique name dbus_bus_set_unique_name_apiparam_1 , as assign by message bus": "dbus_bus_set_unique_name", "be dbus_bool_t container type can contain basic type , or nest container type": "dbus_type_is_container", "pende dbuspendingcall block until dbus_pending_call_block_apiparam_1 call be complete": "dbus_pending_call_block", "set unk unk dbusconnection set mainloop wakeup function dbus_connection_set_wakeup_main_function_apiparam_1": "dbus_connection_set_wakeup_main_function", "get dbuswatch get datum previously set dbus_watch_set_data_apiname or null if none": "dbus_watch_get_data", "dbussignatureiter const dbussignatureiter initialize iterator point first type current container": "dbus_signature_iter_recurse", "contain dbus_bool_t dbusmessage check whether dbus_message_contains_unix_fds_apiparam_1 contain unix fds": "dbus_message_contains_unix_fds", "dbusmessage construct message give message type": "dbus_message_new", "get dbusmessage retrieve datum previously set dbus_message_set_data_apiname": "dbus_message_get_data", "read write dispatch dbus_bool_t dbusconnection dbus_connection_read_write_dispatch_apiname be intend application want write main loop deal dbuswatch dbustimeout": "dbus_connection_read_write_dispatch", "set dbusmessage set dbus_message_set_serial_apiparam_2 number dbus_message_set_serial_apiparam_1": "dbus_message_set_serial", "dbusconnection dbuserror get connection remote dbus_connection_open_apiparam_1": "dbus_connection_open", "set allow dbus_bool_t dbusmessage set flag indicating caller method be prepare wait interactive authorization take place before actual method be process": "dbus_message_set_allow_interactive_authorization", "unk resize block dbus_realloc_apiparam_1 previously allocate by dbus_malloc_apiname or dbus_malloc0_apiname": "dbus_realloc", "get receive long dbusconnection get value set by dbus_connection_set_max_received_size_apiname": "dbus_connection_get_max_received_size", "get long dbusconnection get value set by dbus_connection_set_max_message_unix_fds_apiname": "dbus_connection_get_max_message_unix_fds", "get dbusmessageiter return number element array_typed value point by iterator": "dbus_message_iter_get_element_count", "pende dbus_bool_t unk dbuspendingcall store pointer dbuspendingcall , along optional function be use free dbus_pending_call_set_data_apiparam_3 when dbus_pending_call_set_data_apiparam_3 be set again , or when dbus_pending_call_set_data_apiparam_1 call be finalize": "dbus_pending_call_set_data", "watch get dbuswatch return unix file descriptor be watch , which be pipe , socket , or other type descriptor": "dbus_watch_get_unix_fd", "set dbus_bool_t unk dbusconnection store pointer dbusconnection , along optional function be use free dbus_connection_set_data_apiparam_3 when dbus_connection_set_data_apiparam_3 be set again , or when dbus_connection_set_data_apiparam_1 be finalize": "dbus_connection_set_data", "be dbus_bool_t dbusmessage check whether dbus_message_is_method_call_apiparam_1 be dbus_message_is_method_call_apiparam_3 call give interface member field": "dbus_message_is_method_call", "get dbusmessage get container instance dbus_message_get_container_instance_apiparam_1 be send , or null if none": "dbus_message_get_container_instance", "set dbus_bool_t dbusmessage set name error dbus_message_type_error": "dbus_message_set_error_name", "close dbusmessageiter initialize dbus_message_iter_init_closed_apiparam_1 as if unk": "dbus_message_iter_init_closed", "utility function convert machine_readable string into d_bus message type": "dbus_message_type_from_string", "handle dbus_bool_t dbuswatch call notify d_bus library when previously_added dbus_watch_handle_apiparam_1 be ready reading or writing , or have exception such as hangup": "dbus_watch_handle", "watch get dbuswatch get flag dbuswatchflag indicate what condition should be monitor file descriptor": "dbus_watch_get_flags", "disconnect dbusserver release server address stop listen client": "dbus_server_disconnect", "dbusconnection decrement reference count dbusconnection , finalize if count reach zero": "dbus_connection_unref", "register dbus_bool_t dbusconnection list register fallback handler object path handler give dbus_connection_list_registered_apiparam_2": "dbus_connection_list_registered", "get be connect dbus_bool_t dbusconnection get whether dbus_connection_get_is_connected_apiparam_1 be currently open": "dbus_connection_get_is_connected", "get dbusmessageiter return argument type argument message iterator point": "dbus_message_iter_get_arg_type", "set dbus_bool_t dbusmessage set interface dbus_message_set_interface_apiparam_1 be send or interface signal be emit dbus_message_type_signal": "dbus_message_set_interface", "set dbus_bool_t unk dbusserver store pointer dbusserver , along optional function be use free dbus_server_set_data_apiparam_3 when dbus_server_set_data_apiparam_3 be set again , or when dbus_server_set_data_apiparam_1 be finalize": "dbus_server_set_data", "be fix dbus_bool_t tell -PRON- whether value type can change length if -PRON- set -PRON- other value": "dbus_type_is_fixed", "set receive long dbusconnection set maximum total number unix fd can be use message receive dbus_connection_set_max_received_unix_fds_apiparam_1": "dbus_connection_set_max_received_unix_fds", "dbusmessage construct message invoke dbus_message_new_method_call_apiparam_4 remote object": "dbus_message_new_method_call", "close dbusconnection close private dbus_connection_close_apiparam_1 , so no further datum can be send or receive": "dbus_connection_close", "listen dbusserver dbuserror listen connection give dbus_server_listen_apiparam_1": "dbus_server_listen", "get dbusconnection dbuserror dbusbustype connect bus daemon register client": "dbus_bus_get", "append dbus_bool_t dbusmessageiter append unk dbus_message_iter_append_basic_apiparam_3 message": "dbus_message_iter_append_basic", "allocate dbus_bool_t allocate integer identifier be use store application_specific datum dbusmessage": "dbus_message_allocate_data_slot", "get const dbussignatureiter return signature single complete type start give iterator": "dbus_signature_iter_get_signature", "send preallocate dbusmessage unk dbusconnection send dbus_connection_send_preallocated_apiparam_3 use dbus_connection_send_preallocated_apiparam_2 resource": "dbus_connection_send_preallocated", "try dbus_bool_t dbuserror const unk dbusconnection register fallback handler give subsection object hierarchy": "dbus_connection_try_register_fallback", "watch get dbuswatch deprecate former name dbus_watch_get_unix_fd_apiname": "dbus_watch_get_fd", "set dbus_bool_t unk dbustimeouttoggledfunction dbusremovetimeoutfunction dbusaddtimeoutfunction dbusconnection set timeout function dbus_connection_set_timeout_functions_apiparam_1": "dbus_connection_set_timeout_functions", "have send dbus_bool_t dbusconnection check whether be message outgoing message queue": "dbus_connection_has_messages_to_send", "parse dbus_bool_t dbuserror unk parse dbus_parse_address_apiparam_1 string form : method : key value , key value ; method : key value see d_bus specification complete docs format": "dbus_parse_address", "get dbus_bool_t dbusconnection get user datum pass dbus_connection_register_object_path_apiname or dbus_connection_register_fallback_apiname": "dbus_connection_get_object_path_data", "get dbusmessage get type dbus_message_get_type_apiparam_1": "dbus_message_get_type", "set dbus_bool_t dbusmessage set flag indicating dbus_message_set_no_reply_apiparam_1 do want reply ; if flag be set , other end connection optimize by send method return or error reply": "dbus_message_set_no_reply", "thread dbus_bool_t initialize thread": "dbus_threads_init_default", "get unk return method string address dbus_address_entry_get_method_apiparam_1": "dbus_address_entry_get_method", "set receive long dbusconnection set maximum total number byte can be use message receive dbus_connection_set_max_received_size_apiparam_1": "dbus_connection_set_max_received_size", "set dispatch unk dbusdispatchstatusfunction dbusconnection set dbus_connection_set_dispatch_status_function_apiparam_2 be invoke when dispatch status change": "dbus_connection_set_dispatch_status_function", "send dbus_bool_t dbuspendingcall dbusmessage dbusconnection queue dbus_connection_send_with_reply_apiparam_2 send , as dbus_connection_send_apiname , but return dbuspendingcall use receive reply dbus_connection_send_with_reply_apiparam_2": "dbus_connection_send_with_reply", "get allow dbus_bool_t dbusmessage return whether flag control by dbus_message_set_allow_interactive_authorization_apiname have set": "dbus_message_get_allow_interactive_authorization", "dbus_bool_t dbuserror check bus dbus_validate_bus_name_apiparam_1 validity": "dbus_validate_bus_name", "dbusmessage lock dbus_message_lock_apiparam_1": "dbus_message_lock", "have dbus_bool_t dbusmessage check if dbus_message_has_interface_apiparam_1 have interface": "dbus_message_has_interface", "free memory allocate internally by libdbus unk effect dbus_threads_init_apiname": "dbus_shutdown", "set dbus_bool_t unk dbuswatchtoggledfunction dbusremovewatchfunction dbusaddwatchfunction dbusserver set watch function dbus_server_set_watch_functions_apiparam_1": "dbus_server_set_watch_functions", "have dbus_bool_t const dbuserror check whether dbus_error_has_name_apiparam_1 be set have give dbus_error_has_name_apiparam_2": "dbus_error_has_name", "dbus_bool_t dbusconnection unregister handler register exactly give dbus_connection_unregister_object_path_apiparam_2": "dbus_connection_unregister_object_path", "set dbuserror assign dbus_set_error_apiparam_1 dbus_set_error_apiparam_2 message dbuserror": "dbus_set_error", "dbuserror unescape give string as dbus_address_unescape_value_apiparam_1 key value pair d_bus address": "dbus_address_unescape_value", "close dbus_bool_t dbusmessageiter dbusmessageiter close container_type value append message ; write out more information message know only after entire container be write , free resource create by dbus_message_iter_open_container_apiname": "dbus_message_iter_close_container", "remove unk dbusconnection remove previously_added message filter": "dbus_connection_remove_filter"}