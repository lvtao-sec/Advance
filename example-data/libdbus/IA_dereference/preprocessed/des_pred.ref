['the arguments in the dbus_message_get_signature_APIParam_1 payload.', 'argument dbus_message_get_signature_apiparam_1 payload']
['Instead, the DBusDispatchStatusFunction should simply save an indication that messages should be dispatched later, when the main loop is re-entered.', 'instead , dbusdispatchstatusfunction should simply save indication message should be dispatch later , when main loop be re_entered']
['dbus_timeout_set_data_APIParam_2 is the dbus_timeout_set_data_APIParam_2.', 'dbus_timeout_set_data_apiparam_2 be dbus_timeout_set_data_apiparam_2']
['dbus_message_iter_abandon_container_if_open_APIParam_2 is sub-iterator to close.', 'dbus_message_iter_abandon_container_if_open_apiparam_2 be sub_iterator close']
['The supported types include those supported by dbus_message_append_args_APIName ; that is, basic types and arrays of fixed-length basic types.', 'support type include support by dbus_message_append_args_apiname ; be , basic type arrays fixed_length basic type']
['The returned array should be freed with dbus_free_string_array_APIName .', 'return array should be free dbus_free_string_array_apiname']
['dbus_connection_set_route_peer_messages_APIParam_2 is TRUE to pass through org.freedesktop.DBus.Peer messages with a bus name set.', 'dbus_connection_set_route_peer_messages_apiparam_2 be true pass through message bus name set']
['dbus_message_iter_close_container_APIParam_1 is the append iterator.', 'dbus_message_iter_close_container_apiparam_1 be append iterator']
['dbus_pending_call_get_data_APIName returns the data, or NULL if not found.', 'dbus_pending_call_get_data_apiname return datum , or null if find']
['Match rules have a maximum length of DBUS_MAXIMUM_MATCH_RULE_LENGTH bytes.', 'match rule have maximum length dbus_maximum_match_rule_length byte']
['The caller owns a reference to the returned message.', 'caller own reference return message']
["Possible results are: DBUS_RELEASE_NAME_REPLY_RELEASED which means you owned the dbus_bus_release_name_APIParam_2 or were in the queue to own it, and and now you don't own it and aren't in the queue.", 'possible result be : dbus_release_name_reply_releas which mean -PRON- own dbus_bus_release_name_apiparam_2 or be queue , now -PRON- be queue']
['Note The thread lock on DBusConnection is held while timeout functions are invoked, so inside these functions you may not invoke any methods on DBusConnection or it will deadlock.', 'note thread lock dbusconnection be hold while timeout function be invoke , so inside function -PRON- invoke method dbusconnection or deadlock']
['dbus_connection_try_register_object_path_APIName returns FALSE if an dbus_connection_try_register_object_path_APIParam_5 ( DBUS_ERROR_NO_MEMORY or DBUS_ERROR_OBJECT_PATH_IN_USE ) is reported.', 'dbus_connection_try_register_object_path_apiname return false if dbus_connection_try_register_object_path_apiparam_5 be report']
["dbus_connection_unregister_object_path_APIParam_2 is a '/' delimited string of dbus_connection_unregister_object_path_APIParam_2 elements.", 'dbus_connection_unregister_object_path_apiparam_2 be delimit string dbus_connection_unregister_object_path_apiparam_2 element']
["This is useful primarily for dealing with variants; one can recurse into a variant and determine the signature of the variant's value.", 'be useful primarily deal variant ; one can recurse into variant determine signature variant value']
['dbus_pending_call_ref_APIName returns the dbus_pending_call_ref_APIParam_1 call object.', 'dbus_pending_call_ref_apiname return dbus_pending_call_ref_apiparam_1 call object']
['dbus_message_demarshal_APIParam_3 is the location to save errors to.', 'dbus_message_demarshal_apiparam_3 be location save error']
['Gets the container instance this dbus_message_get_container_instance_APIParam_1 was sent from, or NULL if none.', 'get container instance dbus_message_get_container_instance_apiparam_1 be send , or null if none']
['dbus_connection_get_object_path_data_APIParam_2 is the dbus_connection_get_object_path_data_APIParam_2 you registered with.', 'dbus_connection_get_object_path_data_apiparam_2 be dbus_connection_get_object_path_data_apiparam_2 -PRON- registered']
['dbus_message_demarshal_APIParam_2 is the length of dbus_message_demarshal_APIParam_1.', 'dbus_message_demarshal_apiparam_2 be length dbus_message_demarshal_apiparam_1']
['Gets the underlying Windows or UNIX socket file descriptor of the dbus_connection_get_socket_APIParam_1, if any.', 'get underlie window or unix socket file descriptor dbus_connection_get_socket_apiparam_1 , if']
['When the maximum is reached, the dbus_connection_set_max_received_unix_fds_APIParam_1 will not read more data until some messages are finalized.', 'when maximum be reach , dbus_connection_set_max_received_unix_fds_apiparam_1 read more datum until message be finalize']
['The dbus_set_error_from_message_APIParam_1 is only set if the dbus_set_error_from_message_APIParam_2 is an dbus_set_error_from_message_APIParam_1 dbus_set_error_from_message_APIParam_2, as in DBUS_MESSAGE_TYPE_ERROR .', 'dbus_set_error_from_message_apiparam_1 be only set if dbus_set_error_from_message_apiparam_2 be dbus_set_error_from_message_apiparam_1 dbus_set_error_from_message_apiparam_2 , as dbus_message_type_error']
['dbus_server_get_id_APIName returns the unique ID of the dbus_server_get_id_APIParam_1, as a newly-allocated string which must be freed by the caller.', 'dbus_server_get_id_apiname return unique identifi dbus_server_get_id_apiparam_1 , as newly_allocated string which must be free by caller']
['Caller owns a reference to the bus and must either close it or know it to be closed prior to releasing this reference.', 'caller own reference bus must either close or know be close prior release reference']
['Set whether _exit_APIName should be called when the dbus_connection_set_exit_on_disconnect_APIParam_1 receives a disconnect signal.', 'set whether exit_apiname should be call when dbus_connection_set_exit_on_disconnect_apiparam_1 receive disconnect signal']
['Asks the bus to unassign the given dbus_bus_release_name_APIParam_2 from this dbus_bus_release_name_APIParam_1 by invoking the ReleaseName method on the bus.', 'ask bus unassign give dbus_bus_release_name_apiparam_2 dbus_bus_release_name_apiparam_1 by invoke releasename method bus']
['dbus_connection_set_data_APIParam_2 is the dbus_connection_set_data_APIParam_2 number.', 'dbus_connection_set_data_apiparam_2 be dbus_connection_set_data_apiparam_2 number']
['Deallocates a global ID for DBusPendingCall data slots.', 'deallocate global identifi dbuspendingcall datum slot']
['Checks whether the dbus_message_has_signature_APIParam_1 has the given dbus_message_has_signature_APIParam_2; see dbus_message_get_signature_APIName for more details on what the dbus_message_has_signature_APIParam_2 looks like.', 'check whether dbus_message_has_signature_apiparam_1 have give dbus_message_has_signature_apiparam_2 ; see dbus_message_get_signature_apiname more detail what dbus_message_has_signature_apiparam_2 look like']
['dbus_bus_add_match_APIParam_3 is location to store any errors.', 'dbus_bus_add_match_apiparam_3 be location store error']
['dbus_connection_open_APIName and dbus_bus_get_APIName return shared connections.', 'dbus_connection_open_apiname dbus_bus_get_apiname return share connection']
['Gets the number of unix fds attached to this _dbus_message_get_n_unix_fds_APIParam_1.', 'get number unix fd attach dbus_message_get_n_unix_fds_apiparam_1']
['The string is terminated with nul (nul is also the value of DBUS_TYPE_INVALID ).', 'string be terminate nul nul be value dbus_type_invalid']
['On Windows you use dbus_watch_get_socket_APIName to get a Winsock socket to dbus_watch_get_unix_fd_APIParam_1.', 'window -PRON- dbus_watch_get_socket_apiname get winsock socket dbus_watch_get_unix_fd_apiparam_1']
['dbus_server_get_data_APIName returns the data, or NULL if not found.', 'dbus_server_get_data_apiname return datum , or null if find']
['More than one complete type would mean for example "ii" or two integers in sequence.', 'more than one complete type would mean example ii or two integer sequence']
['If this function returns FALSE , then the file descriptor may still be ready for reading or writing, but more memory is needed in order to do the reading or writing.', 'if function return false , then file descriptor still be ready reading or writing , but more memory be need order read or writing']
['Frees all memory allocated internally by libdbus and reverses the effects of dbus_threads_init_APIName .', 'free memory allocate internally by libdbus reverse effect dbus_threads_init_apiname']
['_dbus_message_get_n_unix_fds_APIParam_1 is the _dbus_message_get_n_unix_fds_APIParam_1.', 'dbus_message_get_n_unix_fds_apiparam_1 be dbus_message_get_n_unix_fds_apiparam_1']
["If you want to request a dbus_bus_name_has_owner_APIParam_2, just request it; if you want to avoid replacing a current owner, don't specify DBUS_NAME_FLAG_REPLACE_EXISTING and you will get an dbus_bus_name_has_owner_APIParam_3 if there's already an owner.", 'if -PRON- want request dbus_bus_name_has_owner_apiparam_2 , just request ; if -PRON- want avoid replace current owner , specify dbus_name_flag_replace_existing -PRON- get dbus_bus_name_has_owner_apiparam_3 if already owner']
['An empty but non-NULL dbus_message_get_path_decomposed_APIParam_2 array means the dbus_message_get_path_decomposed_APIParam_2 "/".', 'empty but non_null dbus_message_get_path_decomposed_apiparam_2 array mean dbus_message_get_path_decomposed_apiparam_2']
['This function can be used to do runtime checking for types that might be unknown to the specific D-Bus client implementation version, i.e.', 'function can be use runtime check type may be unknown specific d_bus client implementation version , i']
['dbus_message_get_allow_interactive_authorization_APIName returns whether the flag controlled by dbus_message_set_allow_interactive_authorization_APIName has been set.', 'dbus_message_get_allow_interactive_authorization_apiname return whether flag control by dbus_message_set_allow_interactive_authorization_apiname have set']
['dbus_message_demarshal_APIParam_1 is the marshalled DBusMessage.', 'dbus_message_demarshal_apiparam_1 be marshal dbusmessage']
['One (probably unusual) reason to do that might be to do the bus registration call asynchronously instead of synchronously.', 'one reason may be bus registration call asynchronously instead synchronously']
['dbus_message_unref_APIName can be called as soon as this method returns as the dbus_connection_send_APIParam_2 queue will hold its own ref until the dbus_connection_send_APIParam_2 is sent.', 'dbus_message_unref_apiname can be call as soon as method return as dbus_connection_send_apiparam_2 queue hold ref until dbus_connection_send_apiparam_2 be send']
['dbus_pending_call_allocate_data_slot_APIName returns FALSE on failure (no memory).', 'dbus_pending_call_allocate_data_slot_apiname return false failure no memory']
['dbus_timeout_get_enabled_APIName returns whether a dbus_timeout_get_enabled_APIParam_1 is enabled or not.', 'dbus_timeout_get_enabled_apiname return whether dbus_timeout_get_enabled_apiparam_1 be enable or']
['dbus_signature_iter_next_APIName returns FALSE if nothing more to read at or below this level.', 'dbus_signature_iter_next_apiname return false if nothing more read or below level']
['dbus_connection_send_with_reply_APIParam_2 is the dbus_connection_send_with_reply_APIParam_2 to send.', 'dbus_connection_send_with_reply_apiparam_2 be dbus_connection_send_with_reply_apiparam_2 send']
['These properties are stored even if the dbus_bus_request_name_APIParam_1 is queued and does not become the primary owner.', 'property be store even if dbus_bus_request_name_apiparam_1 be queue do become primary owner']
['dbus_connection_get_windows_user_APIParam_1 is the dbus_connection_get_windows_user_APIParam_1.', 'dbus_connection_get_windows_user_apiparam_1 be dbus_connection_get_windows_user_apiparam_1']
['dbus_connection_open_private_APIParam_1 is the dbus_connection_open_private_APIParam_1.', 'dbus_connection_open_private_apiparam_1 be dbus_connection_open_private_apiparam_1']
['dbus_message_is_signal_APIName returns TRUE if the dbus_message_is_signal_APIParam_1 is the specified signal.', 'dbus_message_is_signal_apiname return true if dbus_message_is_signal_apiparam_1 be specify signal']
['dbus_message_get_member_APIParam_1 is the dbus_message_get_member_APIParam_1.', 'dbus_message_get_member_apiparam_1 be dbus_message_get_member_apiparam_1']
['For example: dbus_int32_t v_INT32 = 42; const char *v_STRING = "Hello World" ; dbus_message_append_args_APIName (message, DBUS_TYPE_INT32 , &v_INT32, DBUS_TYPE_STRING , &v_STRING, DBUS_TYPE_INVALID ); To append an array of fixed-length basic types (except Unix file descriptors), pass in the DBUS_TYPE_ARRAY typecode, the element typecode, the address of the array pointer, and a 32-bit integer giving the number of elements in the array.', 'example : dbus_int32_t v_int32 42 ; const char v_stre hello world ; dbus_message_append_args_apiname ; append array fixed_length basic type , pass dbus_type_array typecode , element typecode , address array pointer , 32_bit integer give number element array']
['dbus_message_copy_APIName returns the new dbus_message_copy_APIParam_1.or NULL if not enough memory or Unix file descriptors (in case the dbus_message_copy_APIParam_1 to copy includes Unix file descriptors) can be allocated.', 'dbus_message_copy_apiname return null if enough memory or unix file descriptor can be allocate']
['Basic types are the non-containers such as integer and string.', 'basic type be non_container such as integer string']
['dbus_message_iter_get_arg_type_APIName returns the argument type of the argument that the message iterator points to.', 'dbus_message_iter_get_arg_type_apiname return argument type argument message iterator point']
['The returned string becomes invalid if the dbus_message_get_signature_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_signature_APIParam_1 data.', 'return string become invalid if dbus_message_get_signature_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_signature_apiparam_1 datum']
['This call duplicates Unix file descriptors when reading them.', 'call duplicate unix file descriptor when read -PRON']
['Not all connections will have a file descriptor.', 'connection have file descriptor']
['dbus_error_has_name_APIParam_2 is the dbus_error_has_name_APIParam_2.', 'dbus_error_has_name_apiparam_2 be dbus_error_has_name_apiparam_2']
['dbus_message_new_method_return_APIName returns a new DBusMessage , free with dbus_message_unref_APIName.', 'dbus_message_new_method_return_apiname return dbusmessage , free dbus_message_unref_apiname']
['The returned string becomes invalid if the dbus_message_get_sender_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_sender_APIParam_1 data.', 'return string become invalid if dbus_message_get_sender_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_sender_apiparam_1 datum']
['dbus_pending_call_get_completed_APIName returns TRUE if a reply has been received.', 'dbus_pending_call_get_completed_apiname return true if reply have receive']
['dbus_connection_steal_borrowed_message_APIParam_2 is the dbus_connection_steal_borrowed_message_APIParam_2 from dbus_connection_borrow_message_APIName.', 'dbus_connection_steal_borrowed_message_apiparam_2 be dbus_connection_steal_borrowed_message_apiparam_2 dbus_connection_borrow_message_apiname']
['If DBUS_TIMEOUT_INFINITE is passed for the timeout, no timeout will be set and the call will block forever.', 'if dbus_timeout_infinite be pass timeout , no timeout be set call block forever']
['dbus_message_get_reply_serial_APIName returns the serial that the dbus_message_get_reply_serial_APIParam_1 is a reply to or 0 if none.', 'dbus_message_get_reply_serial_apiname return serial dbus_message_get_reply_serial_apiparam_1 be reply or # if none']
['dbus_connection_get_data_APIParam_1 is the dbus_connection_get_data_APIParam_1.', 'dbus_connection_get_data_apiparam_1 be dbus_connection_get_data_apiparam_1']
['Currently there is no way to match against non-string arguments.', 'currently be no way match against non_string argument']
['See detailed explanation in docs for dbus_bus_add_match_APIName .', 'see detailed explanation docs dbus_bus_add_match_apiname']
['dbus_connection_get_socket_APIParam_1 is the dbus_connection_get_socket_APIParam_1.', 'dbus_connection_get_socket_apiparam_1 be dbus_connection_get_socket_apiparam_1']
['A specialised form of wildcard matching on arguments is supported for path-like namespaces.', 'specialised form wildcard matching argument be support path_like namespace']
['If called more than once, only the first call has an effect.', 'if call more than once , only first call have effect']
['On the protocol level this toggles DBUS_HEADER_FLAG_ALLOW_INTERACTIVE_AUTHORIZATION .', 'protocol level toggle dbus_header_flag_allow_interactive_authorization']
['dbus_connection_open_APIParam_2 is dbus_connection_open_APIParam_1 where an dbus_connection_open_APIParam_2 can be returned.', 'dbus_connection_open_apiparam_2 be dbus_connection_open_apiparam_1 where dbus_connection_open_apiparam_2 can be return']
['If NULL is passed for the dbus_connection_send_with_reply_APIParam_3, the DBusPendingCall will still be generated internally, and used to track the dbus_connection_send_with_reply_APIParam_2 reply timeout.', 'if null be pass dbus_connection_send_with_reply_apiparam_3 , dbuspendingcall still be generate internally , use track dbus_connection_send_with_reply_apiparam_2 reply timeout']
['Assigns an dbus_set_error_APIParam_1 dbus_set_error_APIParam_2 and message to a DBusError .', 'assign dbus_set_error_apiparam_1 dbus_set_error_apiparam_2 message dbuserror']
['dbus_server_listen_APIName returns a new DBusServer , or NULL on failure.', 'dbus_server_listen_apiname return dbusserver , or null failure']
['The libdbus full version number is "MAJOR.MINOR.MICRO" where the MINOR changes if API is added, and the MICRO changes with each release of a MAJOR.MINOR series.', 'libdbus full version number be where minor change if api be add , micro change each release series']
['dbus_message_set_sender_APIParam_1 is the dbus_message_set_sender_APIParam_1.', 'dbus_message_set_sender_apiparam_1 be dbus_message_set_sender_apiparam_1']
['If a nonnegative slot is passed in, the refcount is incremented on that slot, rather than creating a new slot.', 'if nonnegative slot be pass , refcount be incremente slot , rather than create slot']
['Connections created with dbus_connection_open_private_APIName or dbus_bus_get_private_APIName are not kept track of or referenced by libdbus.', 'connection create dbus_connection_open_private_apiname or dbus_bus_get_private_apiname be keep track or reference by libdbus']
['Use dbus_connection_try_register_fallback_APIName if this might be the case.', 'dbus_connection_try_register_fallback_apiname if may be case']
['dbus_message_allocate_data_slot_APIName returns FALSE on failure (no memory).', 'dbus_message_allocate_data_slot_apiname return false failure no memory']
["If this function returns FALSE , then there wasn't enough memory to handle the dbus_timeout_handle_APIParam_1.", 'if function return false , then wasn t enough memory handle dbus_timeout_handle_apiparam_1']
['Todo: If this fails due to lack of memory, the message is hosed and you have to start over building the whole message.', 'todo : if fail due lack memory , message be hose -PRON- have start over build whole message']
['dbus_connection_try_register_object_path_APIParam_1 is the dbus_connection_try_register_object_path_APIParam_1.', 'dbus_connection_try_register_object_path_apiparam_1 be dbus_connection_try_register_object_path_apiparam_1']
['dbus_connection_remove_filter_APIParam_3 is user data for the handler to remove.', 'dbus_connection_remove_filter_apiparam_3 be user datum handler remove']
['dbus_malloc_APIName returns allocated memory, or NULL if the allocation fails.', 'dbus_malloc_apiname return allocate memory , or null if allocation fail']
['Gets whether the dbus_connection_get_is_connected_APIParam_1 is currently open.', 'get whether dbus_connection_get_is_connected_apiparam_1 be currently open']
['dbus_connection_preallocate_send_APIName returns the preallocated resources, or NULL.', 'dbus_connection_preallocate_send_apiname return preallocate resource , or null']
['dbus_message_iter_init_APIName returns FALSE if the dbus_message_iter_init_APIParam_1 has no arguments.', 'dbus_message_iter_init_apiname return false if dbus_message_iter_init_apiparam_1 have no argument']
['Reads a block of fixed-length values from the message iterator.', 'read block fixed_length value message iterator']
['The DBusWatchToggledFunction notifies the application that the watch has been enabled or disabled.', 'dbuswatchtoggledfunction notifie application watch have enable or disable']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_interface_APIParam_2 dbus_validate_interface_APIParam_1 and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_interface_apiparam_2 dbus_validate_interface_apiparam_1 message']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_path_APIParam_2 name and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_path_apiparam_2 name message']
['Initializes a DBusMessageIter for appending arguments to the end of a dbus_message_iter_init_append_APIParam_1.', 'initialize dbusmessageiter append argument end dbus_message_iter_init_append_apiparam_1']
['dbus_pending_call_get_completed_APIParam_1 is the dbus_pending_call_get_completed_APIParam_1 call.', 'dbus_pending_call_get_completed_apiparam_1 be dbus_pending_call_get_completed_apiparam_1 call']
['So for example, if the session bus daemon is listening on UNIX domain sockets and on TCP, then each of those modalities will have its own server ID.', 'so example , if session bus daemon be listen unix domain socket tcp , then each modality have server identifier']
['dbus_message_get_error_name_APIParam_1 is the dbus_message_get_error_name_APIParam_1.', 'dbus_message_get_error_name_apiparam_1 be dbus_message_get_error_name_apiparam_1']
['dbus_message_new_APIParam_1 is type of message.', 'dbus_message_new_apiparam_1 be type message']
['The caller of this function owns a reference to the bus.', 'caller function own reference bus']
['dbus_signature_iter_get_current_type_APIName returns current type (e.g.', 'dbus_signature_iter_get_current_type_apiname return current type e']
['dbus_connection_set_dispatch_status_function_APIParam_2 is dbus_connection_set_dispatch_status_function_APIParam_2 to call on dispatch status changes.', 'dbus_connection_set_dispatch_status_function_apiparam_2 be dbus_connection_set_dispatch_status_function_apiparam_2 call dispatch status change']
["If the dbus_connection_get_is_anonymous_APIParam_1 is not anonymous, you can use dbus_connection_get_unix_user_APIName and dbus_connection_get_windows_user_APIName to see who it's authorized as.", 'if dbus_connection_get_is_anonymous_apiparam_1 be anonymous , -PRON- can dbus_connection_get_unix_user_apiname dbus_connection_get_windows_user_apiname see who be authorize as']
['The dbus_set_error_const_APIParam_3 may be NULL , which means a default dbus_set_error_const_APIParam_3 will be deduced from the dbus_set_error_const_APIParam_2.', 'dbus_set_error_const_apiparam_3 be null , which mean default dbus_set_error_const_apiparam_3 be deduce dbus_set_error_const_apiparam_2']
['If you cancel the call, no reply is received unless the the reply was already received before you canceled.', 'if -PRON- cancel call , no reply be receive unless reply be already receive before -PRON- cancel']
['dbus_message_has_sender_APIParam_1 is the dbus_message_has_sender_APIParam_1.', 'dbus_message_has_sender_apiparam_1 be dbus_message_has_sender_apiparam_1']
['dbus_connection_register_fallback_APIParam_3 is the virtual table.', 'dbus_connection_register_fallback_apiparam_3 be virtual table']
['On Windows, the dbus_connection_set_unix_user_function_APIParam_2 will be set and its dbus_connection_set_unix_user_function_APIParam_4 will be invoked when the dbus_connection_set_unix_user_function_APIParam_1 is freed or a new dbus_connection_set_unix_user_function_APIParam_2 is set.', 'window , dbus_connection_set_unix_user_function_apiparam_2 be set dbus_connection_set_unix_user_function_apiparam_4 be invoke when dbus_connection_set_unix_user_function_apiparam_1 be free or dbus_connection_set_unix_user_function_apiparam_2 be set']
["So if you're using an array instead of a pointer you have to create a pointer variable, assign the array to it, then take the address of the pointer variable.", 'so if -PRON- be use array instead pointer -PRON- have create pointer variable , assign array , then take address pointer variable']
['dbus_message_set_no_reply_APIParam_2 is TRUE if no reply is desired.', 'dbus_message_set_no_reply_apiparam_2 be true if no reply be desire']
['Obtains the machine UUID of the machine this process is running on.', 'obtain machine uuid machine process be run']
['The only valid operation for such an iterator is dbus_message_iter_abandon_container_if_open_APIName , which does nothing.', 'only valid operation such iterator be dbus_message_iter_abandon_container_if_open_apiname , which do nothing']
['If passed NULL , does nothing.', 'if pass null , do nothing']
['dbus_connection_send_with_reply_and_block_APIParam_2 is the dbus_connection_send_with_reply_and_block_APIParam_2 to send.', 'dbus_connection_send_with_reply_and_block_apiparam_2 be dbus_connection_send_with_reply_and_block_apiparam_2 send']
['dbus_server_set_watch_functions_APIParam_3 is function to stop monitoring a descriptor.', 'dbus_server_set_watch_functions_apiparam_3 be function stop monitor descriptor']
['dbus_connection_send_preallocated_APIParam_3 is the dbus_connection_send_preallocated_APIParam_3 to send.', 'dbus_connection_send_preallocated_apiparam_3 be dbus_connection_send_preallocated_apiparam_3 send']
['dbus_type_is_fixed_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID.', 'dbus_type_is_fixed_apiparam_1 be either valid type_code or dbus_type_invalid']
['If FALSE is returned due to lack of memory, the failure may be due to a FALSE return from the new dbus_connection_set_watch_functions_APIParam_2.', 'if false be return due lack memory , failure be due false return dbus_connection_set_watch_functions_apiparam_2']
['dbus_message_get_path_decomposed_APIParam_2 is place to store allocated array of dbus_message_get_path_decomposed_APIParam_2 components; NULL set here if no dbus_message_get_path_decomposed_APIParam_2 field exists.', 'dbus_message_get_path_decomposed_apiparam_2 be place store allocate array dbus_message_get_path_decomposed_apiparam_2 component ; null set here if no dbus_message_get_path_decomposed_apiparam_2 field exist']
['Also, root is always allowed to connect.', 'root be always allow connect']
['If there are no messages to dispatch, this function will block until it can read or write, then read or write, then return.', 'if be no message dispatch , function block until can read or write , then read or write , then return']
['dbus_pending_call_allocate_data_slot_APIParam_1 is address of a global variable storing the slot.', 'dbus_pending_call_allocate_data_slot_apiparam_1 be address global variable storing slot']
['dbus_bus_start_service_by_name_APIParam_5 is location to store any errors.', 'dbus_bus_start_service_by_name_apiparam_5 be location store error']
['dbus_connection_unregister_object_path_APIParam_1 is the dbus_connection_unregister_object_path_APIParam_1.', 'dbus_connection_unregister_object_path_apiparam_1 be dbus_connection_unregister_object_path_apiparam_1']
['The dbus_message_new_method_call_APIParam_2 and dbus_message_new_method_call_APIParam_4 names may not be NULL .', 'dbus_message_new_method_call_apiparam_2 dbus_message_new_method_call_apiparam_4 name be null']
["The main implication of this is that if you have for example an empty array of array of int32, you can recurse into the outermost array, but it will have no values, so you won't be able to recurse further.", 'main implication be if -PRON- have example empty array array int32 , -PRON- can recurse into outermost array , but have no value , so -PRON- be able recurse further']
['The blocking is as with dbus_connection_send_with_reply_and_block_APIName ; it does not enter the main loop or process other messages, it simply waits for the reply in question.', 'block be as dbus_connection_send_with_reply_and_block_apiname ; do enter main loop or process other message , simply wait reply question']
['After the unique name is set, you can get it with dbus_bus_get_unique_name_APIName .', 'after unique name be set , -PRON- can get dbus_bus_get_unique_name_apiname']
['dbus_message_iter_get_signature_APIParam_1 is the message iterator.', 'dbus_message_iter_get_signature_apiparam_1 be message iterator']
['The dbus_set_error_APIParam_3 may be NULL , which means a (pretty much useless) default message will be deduced from the dbus_set_error_APIParam_2.', 'dbus_set_error_apiparam_3 be null , which mean default message be deduce dbus_set_error_apiparam_2']
['dbus_message_has_destination_APIParam_1 is the dbus_message_has_destination_APIParam_1.', 'dbus_message_has_destination_apiparam_1 be dbus_message_has_destination_apiparam_1']
['Adds a match dbus_bus_add_match_APIParam_2 to match messages going through the message bus.', 'add match dbus_bus_add_match_apiparam_2 match message go through message bus']
['dbus_pending_call_set_data_APIParam_1 is the pending_call.', 'dbus_pending_call_set_data_apiparam_1 be pending_call']
['This function may also called externally, for applications wrapping D-Bus in another protocol.', 'function call externally , application wrap d_bus another protocol']
['dbus_connection_get_data_APIParam_2 is the dbus_connection_get_data_APIParam_2 to get data from.', 'dbus_connection_get_data_apiparam_2 be dbus_connection_get_data_apiparam_2 get datum']
['Unescapes the given string as a dbus_address_unescape_value_APIParam_1 in a key=value pair for a D-Bus address.', 'unescape give string as dbus_address_unescape_value_apiparam_1 key value pair d_bus address']
['If the function fails due to lack of memory, it returns FALSE .', 'if function fail due lack memory , return false']
['dbus_message_has_interface_APIName returns TRUE if the interface field in the header matches.', 'dbus_message_has_interface_apiname return true if interface field header match']
['Deprecated former name of dbus_watch_get_unix_fd_APIName .', 'deprecate former name dbus_watch_get_unix_fd_apiname']
["You can't continue to use any D-Bus objects, such as connections, that were allocated prior to dbus_shutdown_APIName .", 'PRON- can continue d_bus object , such as connection , be allocate prior dbus_shutdown_apiname']
['Creates a new message that is an error reply to another message.', 'create message be error reply another message']
['dbus_message_iter_get_element_type_APIName returns the element type of the array that the message iterator points to.', 'dbus_message_iter_get_element_type_apiname return element type array message iterator point']
['dbus_connection_unregister_object_path_APIName returns FALSE if not enough memory.', 'dbus_connection_unregister_object_path_apiname return false if enough memory']
['dbus_pending_call_set_notify_APIName returns FALSE if not enough memory.', 'dbus_pending_call_set_notify_apiname return false if enough memory']
['It will usually remain the same across reboots also, but hardware configuration changes or rebuilding the machine could break that.', 'usually remain across reboot , but hardware configuration change or rebuild machine could break']
['Think carefully about which of these you want in a given case.', 'think carefully about which -PRON- want give case']
['dbus_message_get_no_reply_APIName returns TRUE if the dbus_message_get_no_reply_APIParam_1 does not expect a reply.', 'dbus_message_get_no_reply_apiname return true if dbus_message_get_no_reply_apiparam_1 do expect reply']
["dbus_message_new_signal_APIName returns NULL if memory can't be allocated for the message.", 'dbus_message_new_signal_apiname return null if memory can be allocate message']
['dbus_connection_add_filter_APIParam_1 is the dbus_connection_add_filter_APIParam_1.', 'dbus_connection_add_filter_apiparam_1 be dbus_connection_add_filter_apiparam_1']
['dbus_message_set_container_instance_APIParam_1 is the dbus_message_set_container_instance_APIParam_1.', 'dbus_message_set_container_instance_apiparam_1 be dbus_message_set_container_instance_apiparam_1']
['Adds a message filter.', 'add message filter']
['dbus_message_set_sender_APIName returns FALSE if not enough memory.', 'dbus_message_set_sender_apiname return false if enough memory']
['The machine ID can also be used to create unique per-machine instances.', 'machine identifier can be use create unique per_machine instance']
['In D-Bus 1.6 or older, this function must be called in the main thread before any other thread starts.', 'd_bus # or old , function must be call main thread before other thread start']
['whether the dbus_connection_read_write_APIParam_1 is connected.', 'whether dbus_connection_read_write_apiparam_1 be connect']
['dbus_connection_get_server_id_APIName returns the server ID or NULL if no memory or the dbus_connection_get_server_id_APIParam_1 is server-side.', 'dbus_connection_get_server_id_apiname return server identifier or null if no memory or dbus_connection_get_server_id_apiparam_1 be server_side']
["Frees an dbus_error_free_APIParam_1 that's been set (or just initialized), then reinitializes the dbus_error_free_APIParam_1 as in dbus_error_init_APIName .", 'free dbus_error_free_apiparam_1 set , then reinitialize dbus_error_free_apiparam_1 as dbus_error_init_apiname']
['In case of failure, the reply will be an error.', 'case failure , reply be error']
['See also dbus_message_get_path_decomposed_APIName .', 'see dbus_message_get_path_decomposed_apiname']
['dbus_signature_iter_get_current_type_APIName returns the current type pointed to by the iterator.', 'dbus_signature_iter_get_current_type_apiname return current type point by iterator']
['Otherwise returns a new DBusServer .', 'otherwise return dbusserver']
['Removes a previously-added match dbus_bus_remove_match_APIParam_2 "by value" (the most recently-added identical dbus_bus_remove_match_APIParam_2 gets removed).', 'remove previously_added match dbus_bus_remove_match_apiparam_2 by value most recently_adde identical dbus_bus_remove_match_apiparam_2 get remove']
['There are not separate states for "closed" and "disconnected," the two terms are synonymous.', 'be separate state close disconnected , two term be synonymous']
['dbus_bus_get_unique_name_APIName returns the unique name or NULL on error.', 'dbus_bus_get_unique_name_apiname return unique name or null error']
["If you don't know about all threads in the app (for example, if some libraries you're using might start libdbus-using threads), then you need to avoid using this function on shared connections.", 'if -PRON- know about thread app , then -PRON- need avoid use function share connection']
['dbus_message_get_data_APIName and dbus_message_set_data_APIName may no longer be used with this slot.', 'dbus_message_get_data_apiname dbus_message_set_data_apiname no longer be use slot']
['For Unix file descriptors this function will internally duplicate the descriptor you passed in.', 'unix file descriptor function internally duplicate descriptor -PRON- pass']
['dbus_message_new_error_printf_APIParam_3 is the error message format as with printf ... format string arguments.', 'dbus_message_new_error_printf_apiparam_3 be error message format as printf ... format string argument']
['Guaranteed to free the dbus_realloc_APIParam_1 and return NULL if dbus_realloc_APIParam_2 is zero on all platforms.', 'guarantee free dbus_realloc_apiparam_1 return null if dbus_realloc_apiparam_2 be zero platform']
['A signal is identified by its originating object dbus_message_new_signal_APIParam_1, interface, and the dbus_message_new_signal_APIParam_3 of the signal.', 'signal be identify by originate object dbus_message_new_signal_apiparam_1 , interface , dbus_message_new_signal_apiparam_3 signal']
['dbus_connection_list_registered_APIParam_3 is returns NULL -terminated array of children.', 'dbus_connection_list_registered_apiparam_3 be return null terminate array child']
['dbus_parse_address_APIParam_1 is the dbus_parse_address_APIParam_1.', 'dbus_parse_address_apiparam_1 be dbus_parse_address_apiparam_1']
['The given dbus_server_set_new_connection_function_APIParam_2 is passed each new connection as the connection is created.', 'give dbus_server_set_new_connection_function_apiparam_2 be pass each connection as connection be create']
['Omitting a key from the dbus_bus_add_match_APIParam_2 indicates a wildcard match.', 'omit key dbus_bus_add_match_apiparam_2 indicate wildcard match']
['Fixed-length values are those basic types that are not string-like, such as integers, bool, double.', 'fixed_length value be basic type be string_like , such as integer , bool , double']
['Adds a dbus_connection_send_APIParam_2 to the outgoing dbus_connection_send_APIParam_2 queue.', 'add dbus_connection_send_apiparam_2 outgoing dbus_connection_send_apiparam_2 queue']
['dbus_message_set_path_APIName returns FALSE if not enough memory.', 'dbus_message_set_path_apiname return false if enough memory']
['dbus_connection_pop_message_APIParam_1 is the dbus_connection_pop_message_APIParam_1.', 'dbus_connection_pop_message_apiparam_1 be dbus_connection_pop_message_apiparam_1']
['You can update these dbus_bus_request_name_APIParam_3 by calling RequestName again (even if you already own the name).', 'PRON- can update dbus_bus_request_name_apiparam_3 by call requestname again even if -PRON- already name']
['dbus_server_set_watch_functions_APIParam_5 is dbus_server_set_watch_functions_APIParam_5 to pass to dbus_server_set_watch_functions_APIParam_2 and dbus_server_set_watch_functions_APIParam_3.', 'dbus_server_set_watch_functions_apiparam_5 be dbus_server_set_watch_functions_apiparam_5 pass dbus_server_set_watch_functions_apiparam_2 dbus_server_set_watch_functions_apiparam_3']
['If the dbus_connection_get_is_anonymous_APIParam_1 is not authenticated, this function returns TRUE , and if it is authenticated but as an anonymous user, it returns TRUE .', 'if dbus_connection_get_is_anonymous_apiparam_1 be authenticate , function return true , if be authenticate but as anonymous user , return true']
['dbus_signature_iter_recurse_APIParam_2 is an iterator to initialize pointing to the first child.', 'dbus_signature_iter_recurse_apiparam_2 be iterator initialize point first child']
['Thus, either the dbus_connection_close_APIParam_1 is closed and it is OK to drop the last reference, or the dbus_connection_close_APIParam_1 is open and the app knows it does not have the last reference.', 'thus , either dbus_connection_close_apiparam_1 be close be ok drop last reference , or dbus_connection_close_apiparam_1 be open app know do have last reference']
['Always returns FALSE on non-Windows platforms for now, though in theory someone could hook UNIX to Active Directory or something.', 'always return false non_windows platform now , though theory someone could hook unix active directory or something']
['If you want an ID that identifies an entire session bus, look at dbus_bus_get_id_APIName instead (which is just a convenience wrapper around the org.freedesktop.DBus.GetId method invoked on the bus).', 'if -PRON- want identifi identifie entire session bus , look dbus_bus_get_id_apiname instead which be just convenience wrapper around method invoke bus']
['See also dbus_message_append_args .', 'see dbus_message_append_args']
['Constructs a new message to invoke a dbus_message_new_method_call_APIParam_4 on a remote object.', 'construct message invoke dbus_message_new_method_call_apiparam_4 remote object']
['The interface may be NULL , which means that if multiple methods with the given name exist it is undefined which one will be invoked.', 'interface be null , which mean if multiple method give name exist be undefined which one be invoke']
['Gets the UNIX user ID of the dbus_connection_get_unix_user_APIParam_1 if known.', 'get unix user identifi dbus_connection_get_unix_user_apiparam_1 if know']
['dbus_message_new_signal_APIName returns a new DBusMessage , free with dbus_message_unref_APIName.', 'dbus_message_new_signal_apiname return dbusmessage , free dbus_message_unref_apiname']
['dbus_connection_try_register_fallback_APIParam_1 is the dbus_connection_try_register_fallback_APIParam_1.', 'dbus_connection_try_register_fallback_apiparam_1 be dbus_connection_try_register_fallback_apiparam_1']
['If this function is not called, the D-Bus library will not lock any data structures.', 'if function be call , d_bus library lock data structure']
['dbus_message_demarshal_APIName returns NULL if there was an dbus_message_demarshal_APIParam_3.', 'dbus_message_demarshal_apiname return null if be dbus_message_demarshal_apiparam_3']
['dbus_connection_read_write_APIName returns TRUE if still connected.', 'dbus_connection_read_write_apiname return true if still connect']
['Otherwise returns the number of bytes to be demarshalled.', 'otherwise return number byte be demarshalle']
['Checks whether there are messages in the outgoing message queue.', 'check whether be message outgoing message queue']
['dbus_message_iter_get_signature_APIName returns the current signature of a message iterator.', 'dbus_message_iter_get_signature_apiname return current signature message iterator']
['dbus_bus_get_private_APIName calls dbus_bus_register_APIName for you.', 'dbus_bus_get_private_apiname call dbus_bus_register_apiname -PRON']
["If you pass NULL for the dbus_bus_add_match_APIParam_3, this function will not block; the match thus won't be added until you flush the dbus_bus_add_match_APIParam_1, and if there's an dbus_bus_add_match_APIParam_3 adding the match you won't find out about it.", 'if -PRON- pass null dbus_bus_add_match_apiparam_3 , function block ; match thus be add until -PRON- flush dbus_bus_add_match_apiparam_1 , if dbus_bus_add_match_apiparam_3 adding match -PRON- find out about']
['If anonymous connections are allowed, however, then any user identity is allowed.', 'if anonymous connection be allow , however , then user identity be allow']
['dbus_server_get_data_APIName and dbus_server_set_data_APIName may no longer be used with this slot.', 'dbus_server_get_data_apiname dbus_server_set_data_apiname no longer be use slot']
['DBUS_REQUEST_NAME_REPLY_EXISTS happens if the dbus_bus_request_name_APIParam_2 has an owner already and the caller specifies DBUS_NAME_FLAG_DO_NOT_QUEUE and either the current owner has NOT specified DBUS_NAME_FLAG_ALLOW_REPLACEMENT or the caller did NOT specify DBUS_NAME_FLAG_REPLACE_EXISTING .', 'dbus_request_name_reply_exist happen if dbus_bus_request_name_apiparam_2 have owner already caller specifie dbus_name_flag_do_not_queue either current owner have specify dbus_name_flag_allow_replacement or caller do specify dbus_name_flag_replace_existing']
['dbus_connection_get_adt_audit_session_data_APIParam_2 is return location for audit dbus_connection_get_adt_audit_session_data_APIParam_2.', 'dbus_connection_get_adt_audit_session_data_apiparam_2 be return location audit dbus_connection_get_adt_audit_session_data_apiparam_2']
['The dbus_message_iter_get_fixed_array_APIParam_2 argument should be the address of a location to store the returned array.', 'dbus_message_iter_get_fixed_array_apiparam_2 argument should be address location store return array']
['dbus_message_has_destination_APIName returns TRUE if the dbus_message_has_destination_APIParam_1 has the given destination dbus_message_has_destination_APIParam_2.', 'dbus_message_has_destination_apiname return true if dbus_message_has_destination_apiparam_1 have give destination dbus_message_has_destination_apiparam_2']
['Note Just use dbus_bus_get_APIName or dbus_bus_get_private_APIName instead of dbus_bus_register_APIName and save yourself some pain.', 'note just dbus_bus_get_apiname or dbus_bus_get_private_apiname instead dbus_bus_register_apiname save -PRON- pain']
['dbus_message_get_interface_APIName returns NULL if none.', 'dbus_message_get_interface_apiname return null if none']
['dbus_server_get_data_APIParam_2 is the dbus_server_get_data_APIParam_2 to get data from.', 'dbus_server_get_data_apiparam_2 be dbus_server_get_data_apiparam_2 get datum']
['If your argument match has a \'path\' suffix (eg: "arg0path=\'/some/path/\'") then it is considered a match if the argument exactly matches the given string or if one of them ends in a \'/\' and is a prefix of the other.', 'if -PRON- argument match have path suffix then be consider match if argument exactly match give string or if one -PRON- end be prefix other']
['Matches are inclusive not exclusive so as long as one dbus_bus_add_match_APIParam_2 matches the message will get through.', 'match be inclusive exclusive so as long as one dbus_bus_add_match_apiparam_2 match message get through']
['DBusConnection will automatically set the dbus_message_set_serial_APIParam_2 to an appropriate value when the dbus_message_set_serial_APIParam_1 is sent; this function is only needed when encapsulating messages in another protocol, or otherwise bypassing DBusConnection .', 'dbusconnection automatically set dbus_message_set_serial_apiparam_2 appropriate value when dbus_message_set_serial_apiparam_1 be send ; function be only need when encapsulating message another protocol , or otherwise bypass dbusconnection']
['dbus_connection_send_APIParam_2 is the dbus_connection_send_APIParam_2 to write.', 'dbus_connection_send_apiparam_2 be dbus_connection_send_apiparam_2 write']
['dbus_message_get_args_valist_APIName returns FALSE if dbus_message_get_args_valist_APIParam_2 was set.', 'dbus_message_get_args_valist_apiname return false if dbus_message_get_args_valist_apiparam_2 be set']
['Larger messages will result in disconnecting the dbus_connection_set_max_message_size_APIParam_1.', 'large message result disconnect dbus_connection_set_max_message_size_apiparam_1']
['(See the note in docs for dbus_connection_set_watch_functions_APIName .)', 'see note docs dbus_connection_set_watch_functions_apiname']
['dbus_realloc_APIParam_1 is block to be resized.', 'dbus_realloc_apiparam_1 be block be resize']
["Allows checking that applications don't keep a reference to a dbus_message_lock_APIParam_1 in the outgoing queue and change it underneath us.", 'allow check application keep reference dbus_message_lock_apiparam_1 outgoing queue change underneath -PRON']
['The dbus_message_set_sender_APIParam_1 bus daemon will call it to set the origin of each dbus_message_set_sender_APIParam_1.', 'dbus_message_set_sender_apiparam_1 bus daemon call set origin each dbus_message_set_sender_apiparam_1']
['dbus_validate_error_name_APIParam_2 is dbus_validate_error_name_APIParam_1, which must not be NULL dbus_validate_error_name_APIParam_2 error return.', 'dbus_validate_error_name_apiparam_2 be dbus_validate_error_name_apiparam_1 , which must be null dbus_validate_error_name_apiparam_2 error return']
['Some types of argument can only be read with DBusMessageIter however.', 'type argument can only be read dbusmessageiter however']
['dbus_validate_interface_APIParam_1 is a potentially invalid interface dbus_validate_interface_APIParam_1, which must not be NULL.', 'dbus_validate_interface_apiparam_1 be potentially invalid interface dbus_validate_interface_apiparam_1 , which must be null']
['dbus_bus_get_unix_user_APIParam_3 is location to store the dbus_bus_get_unix_user_APIParam_3.', 'dbus_bus_get_unix_user_apiparam_3 be location store dbus_bus_get_unix_user_apiparam_3']
["The user is only read by servers from clients; clients can't usually get the user of servers, because servers do not authenticate to clients.", 'user be only read by server client ; client can usually get user server , because server authenticate client']
['if dbus_type_is_container_APIName returns FALSE for the result of dbus_signature_iter_get_current_type_APIName ).', 'if dbus_type_is_container_apiname return false result dbus_signature_iter_get_current_type_apiname']
['This function is used to invoke method calls on a remote object.', 'function be use invoke method call remote object']
['dbus_message_new_signal_APIParam_2 is the interface the signal is emitted from.', 'dbus_message_new_signal_apiparam_2 be interface signal be emit']
['The dbus_bus_start_service_by_name_APIParam_3 parameter is for future expansion, currently you should specify 0.', 'dbus_bus_start_service_by_name_apiparam_3 parameter be future expansion , currently -PRON- should specify #']
['Normal API conventions would have the function return a boolean value indicating whether the dbus_bus_add_match_APIParam_3 was set, but that would require blocking always to determine the return value.', 'normal api convention would have function return boolean value indicate whether dbus_bus_add_match_apiparam_3 be set , but would require block always determine return value']
['dbus_connection_get_unix_process_id_APIName returns TRUE if uid is filled in with a valid process ID.', 'dbus_connection_get_unix_process_id_apiname return true if uid be fill valid process identifier']
['dbus_connection_try_register_object_path_APIParam_5 is address where an dbus_connection_try_register_object_path_APIParam_5 can be returned.', 'dbus_connection_try_register_object_path_apiparam_5 be address where dbus_connection_try_register_object_path_apiparam_5 can be return']
['This function only affects connections created after it is called.', 'function only affect connection create after be call']
['Gets the type signature of the dbus_message_get_signature_APIParam_1, i.e.', 'get type signature dbus_message_get_signature_apiparam_1 , i']
['dbus_bus_get_APIName calls dbus_bus_register_APIName for you.', 'dbus_bus_get_apiname call dbus_bus_register_apiname -PRON']
['However, after this function has either succeeded or failed, it is valid to call dbus_message_iter_abandon_container_if_open_APIName .', 'however , after function have either succeed or fail , be valid call dbus_message_iter_abandon_container_if_open_apiname']
['dbus_server_unref_APIParam_1 is the dbus_server_unref_APIParam_1.', 'dbus_server_unref_apiparam_1 be dbus_server_unref_apiparam_1']
["These functions are responsible for making the application's main loop aware of timeouts.", 'function be responsible make application main loop aware timeout']
['The DBusWatch can be queried for the file descriptor to watch using dbus_watch_get_unix_fd_APIName or dbus_watch_get_socket_APIName , and for the events to watch for using dbus_watch_get_flags_APIName .', 'dbuswatch can be query file descriptor watch use dbus_watch_get_unix_fd_apiname or dbus_watch_get_socket_apiname , event watch use dbus_watch_get_flags_apiname']
['dbus_message_set_error_name_APIName returns FALSE if not enough memory.', 'dbus_message_set_error_name_apiname return false if enough memory']
['If the dbus_message_is_signal_APIParam_1 is not DBUS_MESSAGE_TYPE_SIGNAL , or has a different interface or member field, returns FALSE .', 'if dbus_message_is_signal_apiparam_1 be dbus_message_type_signal , or have different interface or member field , return false']
['dbus_signature_iter_next_APIParam_1 is the iterator.', 'dbus_signature_iter_next_apiparam_1 be iterator']
["dbus_message_demarshal_bytes_needed_APIName returns -1 if there was no valid data to be demarshalled, 0 if there wasn't enough data to determine how much should be demarshalled.", 'dbus_message_demarshal_bytes_needed_apiname return # if be no valid datum be demarshalle , # if wasn t enough datum determine how much should be demarshalle']
["To implement this, always set DBUS_NAME_FLAG_ALLOW_REPLACEMENT when you request your application's bus dbus_bus_request_name_APIParam_2.", 'implement , always set dbus_name_flag_allow_replacement when -PRON- request -PRON- application bus dbus_bus_request_name_apiparam_2']
['If the destination is NULL , just frees and reinits the source error.', 'if destination be null , just free reinit source error']
['Gets the approximate size in bytes of all messages in the outgoing message queue.', 'get approximate size byte message outgoing message queue']
['A "basic type" is a somewhat arbitrary concept, but the intent is to include those types that are fully-specified by a single dbus_type_is_basic_APIParam_1, with no additional type information or nested values.', 'basic type be somewhat arbitrary concept , but intent be include type be fully_specifie by single dbus_type_is_basic_apiparam_1 , no additional type information or nest value']
['The call to _exit_APIName comes after any handlers for the disconnect signal run; handlers can cancel the exit by calling this function.', 'call exit_apiname come after handler disconnect signal run ; handler can cancel exit by call function']
['With Qt, QTimer::start_APIName and QTimer::stop_APIName can be used to enable and disable.', 'qt , qtimer : : start_apiname qtimer : : stop_apiname can be use enable disable']
['The returned user is the user the dbus_connection_get_windows_user_APIParam_1 authenticated as.', 'return user be user dbus_connection_get_windows_user_apiparam_1 authenticate as']
['dbus_timeout_set_data_APIParam_1 is the DBusTimeout object.', 'dbus_timeout_set_data_apiparam_1 be dbustimeout object']
['dbus_watch_set_data_APIParam_2 is the dbus_watch_set_data_APIParam_2.', 'dbus_watch_set_data_apiparam_2 be dbus_watch_set_data_apiparam_2']
['Only one owns it at a time - called the primary owner.', 'only one own time call primary owner']
['messages other than the reply are queued up but not processed.', 'message other than reply be queue up but process']
['Free it with dbus_free_APIName only.', 'free dbus_free_apiname only']
['Todo: for now, if this function fails due to OOM it will leave the dbus_message_append_args_valist_APIParam_1 half-written and you have to discard the dbus_message_append_args_valist_APIParam_1 and start over.', 'todo : now , if function fail due oom leave dbus_message_append_args_valist_apiparam_1 half_written -PRON- have discard dbus_message_append_args_valist_apiparam_1 start over']
['This function is useful to determine whether dbus_message_iter_get_fixed_array_APIName may be used.', 'function be useful determine whether dbus_message_iter_get_fixed_array_apiname be use']
["Thus, it's possible to see a status of DBUS_DISPATCH_DATA_REMAINS but not have a message yet.", 'thus , be possible see status dbus_dispatch_data_remain but have message yet']
['This function can only be called once per dbus_pending_call_steal_reply_APIParam_1 call, since the reply message is tranferred to the caller.', 'function can only be call once per dbus_pending_call_steal_reply_apiparam_1 call , since reply message be tranferre caller']
['dbus_set_error_const_APIParam_1 is the dbus_set_error_const_APIParam_1 or NULL.', 'dbus_set_error_const_apiparam_1 be dbus_set_error_const_apiparam_1 or null']
['Filters are handlers that are run on all incoming messages, prior to the objects registered with dbus_connection_register_object_path_APIName .', 'filter be handler be run incoming message , prior object register dbus_connection_register_object_path_apiname']
['Does not block to write the dbus_connection_send_APIParam_2 to the network; that happens asynchronously.', 'do block write dbus_connection_send_apiparam_2 network ; happen asynchronously']
['dbus_connection_try_register_object_path_APIParam_3 is the virtual table.', 'dbus_connection_try_register_object_path_apiparam_3 be virtual table']
['dbus_threads_init_APIParam_1 is ignored, formerly dbus_threads_init_APIParam_1 for using threads.', 'dbus_threads_init_apiparam_1 be ignore , formerly dbus_threads_init_apiparam_1 use thread']
['You can also get a machine ID; see dbus_try_get_local_machine_id_APIName to get the machine you are on.', 'PRON- can get machine identifi ; see dbus_try_get_local_machine_id_apiname get machine -PRON- be']
['dbus_connection_set_allow_anonymous_APIParam_1 is the dbus_connection_set_allow_anonymous_APIParam_1.', 'dbus_connection_set_allow_anonymous_apiparam_1 be dbus_connection_set_allow_anonymous_apiparam_1']
['The UUID is not a UUID in the sense of RFC4122; the details are explained in the D-Bus specification.', 'uuid be uuid sense rfc4122 ; detail be explain d_bus specification']
['dbus_pending_call_set_data_APIParam_4 is finalizer function for the dbus_pending_call_set_data_APIParam_3.', 'dbus_pending_call_set_data_apiparam_4 be finalizer function dbus_pending_call_set_data_apiparam_3']
['Existing data stored on existing DBusServer objects will be freed when the server is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot).', 'exist datum store exist dbusserver object be free when server be finalize , but be retrieve only be replace if someone else reallocate slot']
['dbus_message_get_args_valist_APIParam_3 is type of the first argument.', 'dbus_message_get_args_valist_apiparam_3 be type first argument']
['dbus_message_is_method_call_APIParam_3 is the name to check (must not be NULL ).', 'dbus_message_is_method_call_apiparam_3 be name check must be null']
['dbus_connection_get_max_received_size_APIName returns the max size of all live messages.', 'dbus_connection_get_max_received_size_apiname return max size live message']
['This function cannot fail.', 'function can fail']
['dbus_realloc_APIName returns NULL if the resize fails.', 'dbus_realloc_apiname return null if resize fail']
['Note that this recurses into a value, not a type, so you can only recurse if the value exists.', 'note recurse into value , type , so -PRON- can only recurse if value exist']
['If you open a bus dbus_bus_register_APIParam_1 with dbus_connection_open_APIName or dbus_connection_open_private_APIName you will have to dbus_bus_register_APIName yourself, or make the appropriate registration method calls yourself.', 'if -PRON- open bus dbus_bus_register_apiparam_1 dbus_connection_open_apiname or dbus_connection_open_private_apiname -PRON- have dbus_bus_register_apiname -PRON- , or make appropriate registration method call -PRON']
['dbus_validate_utf8_APIParam_2 is dbus_validate_utf8_APIParam_2 return.', 'dbus_validate_utf8_apiparam_2 be dbus_validate_utf8_apiparam_2 return']
['dbus_free_APIParam_1 is block to be freed.', 'dbus_free_apiparam_1 be block be free']
['If a message omits the interface, then it will NOT match if the dbus_bus_add_match_APIParam_2 specifies an interface name.', 'if message omit interface , then match if dbus_bus_add_match_apiparam_2 specifie interface name']
['dbus_connection_set_exit_on_disconnect_APIParam_1 is the dbus_connection_set_exit_on_disconnect_APIParam_1.', 'dbus_connection_set_exit_on_disconnect_apiparam_1 be dbus_connection_set_exit_on_disconnect_apiparam_1']
["dbus_timeout_handle_APIName returns FALSE if there wasn't enough memory.", 'dbus_timeout_handle_apiname return false if wasn t enough memory']
["For the system bus, probably the bus ID is not useful; instead, use the machine ID since it's accessible without necessarily connecting to the bus and may be persistent beyond a single bus instance (across reboots for example).", 'system bus , probably bus identifi be useful ; instead , machine identifi since be accessible without necessarily connect bus be persistent beyond single bus instance across reboot example']
['Checks whether the dbus_error_has_name_APIParam_1 is set and has the given dbus_error_has_name_APIParam_2.', 'check whether dbus_error_has_name_apiparam_1 be set have give dbus_error_has_name_apiparam_2']
['dbus_message_has_destination_APIParam_2 is the dbus_message_has_destination_APIParam_2 to check (must not be NULL ).', 'dbus_message_has_destination_apiparam_2 be dbus_message_has_destination_apiparam_2 check must be null']
['dbus_timeout_set_data_APIParam_3 is function to be called to free the dbus_timeout_set_data_APIParam_2.', 'dbus_timeout_set_data_apiparam_3 be function be call free dbus_timeout_set_data_apiparam_2']
['Does nothing if dbus_set_error_const_APIParam_1 is NULL .', 'do nothing if dbus_set_error_const_apiparam_1 be null']
['Gets the type of a dbus_message_get_type_APIParam_1.', 'get type dbus_message_get_type_apiparam_1']
['See the comments in the code or http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144 if you encounter this issue and want to attempt writing a patch.', 'see comment code or http : # if -PRON- encounter issue want attempt writing patch']
['Thus, the max live messages dbus_connection_set_max_received_size_APIParam_2 can actually be exceeded by up to the maximum dbus_connection_set_max_received_size_APIParam_2 of a single message.', 'thus , max live message dbus_connection_set_max_received_size_apiparam_2 can actually be exceed by up maximum dbus_connection_set_max_received_size_apiparam_2 single message']
['dbus_bus_release_name_APIParam_2 is the dbus_bus_release_name_APIParam_2 to remove.', 'dbus_bus_release_name_apiparam_2 be dbus_bus_release_name_apiparam_2 remove']
['Before using this function, see the caveats/warnings in the documentation for dbus_connection_pop_message_APIName .', 'before use function , see documentation dbus_connection_pop_message_apiname']
['Look for the signal "NameLost" from DBUS_SERVICE_DBUS and DBUS_INTERFACE_DBUS (the signal\'s first argument is the bus dbus_bus_request_name_APIParam_2 that was lost).', 'look signal namelost dbus_service_dbus dbus_interface_dbus signal first argument be bus dbus_bus_request_name_apiparam_2 be lose']
['dbus_message_set_path_APIParam_1 is the dbus_message_set_path_APIParam_1.', 'dbus_message_set_path_apiparam_1 be dbus_message_set_path_apiparam_1']
['dbus_message_iter_get_arg_type_APIName returns the argument type.', 'dbus_message_iter_get_arg_type_apiname return argument type']
['dbus_watch_get_socket_APIName returns a socket to be watched, on UNIX this will return -1 if our transport is not socket-based so dbus_watch_get_unix_fd_APIName is preferred.', 'dbus_watch_get_socket_apiname return socket be watch , unix return # if -PRON- transport be socket_bas so dbus_watch_get_unix_fd_apiname be prefer']
['Existing data stored on existing DBusPendingCall objects will be freed when the DBusPendingCall is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot).', 'exist datum store exist dbuspendingcall object be free when dbuspendingcall be finalize , but be retrieve only be replace if someone else reallocate slot']
['When a service represents an application, say "text editor," then it should specify DBUS_NAME_FLAG_ALLOW_REPLACEMENT if it wants the last editor started to be the user\'s editor vs. the first one started.', 'when service represent application , say text editor , then should specify dbus_name_flag_allow_replacement if want last editor start be user editor vs. first one start']
['dbus_connection_set_exit_on_disconnect_APIParam_2 is TRUE if _exit_APIName should be called after a disconnect signal.', 'dbus_connection_set_exit_on_disconnect_apiparam_2 be true if exit_apiname should be call after disconnect signal']
['If you ignore the FALSE return, your application may spin in a busy loop on the file descriptor until memory becomes available, but nothing more catastrophic should happen.', 'if -PRON- ignore false return , -PRON- application spin busy loop file descriptor until memory become available , but nothing more catastrophic should happen']
['dbus_message_ref_APIParam_1 is the dbus_message_ref_APIParam_1.', 'dbus_message_ref_apiparam_1 be dbus_message_ref_apiparam_1']
['Block until the dbus_pending_call_block_APIParam_1 call is completed.', 'block until dbus_pending_call_block_apiparam_1 call be complete']
['dbus_validate_path_APIParam_1 is a potentially invalid object dbus_validate_path_APIParam_1, which must not be NULL.', 'dbus_validate_path_apiparam_1 be potentially invalid object dbus_validate_path_apiparam_1 , which must be null']
['Todo: add _DBUS_GNUC_PRINTF to this (requires moving _DBUS_GNUC_PRINTF to public header, see DBUS_DEPRECATED for an example)   dbus_message_new_error_printf_APIParam_1 is the original message.', 'todo : add dbus_gnuc_printf dbus_message_new_error_printf_apiparam_1 be original message']
['dbus_bus_get_APIParam_2 is address where an dbus_bus_get_APIParam_2 can be returned.', 'dbus_bus_get_apiparam_2 be address where dbus_bus_get_apiparam_2 can be return']
['dbus_connection_get_adt_audit_session_data_APIParam_3 is return location for length of audit dbus_connection_get_adt_audit_session_data_APIParam_2.', 'dbus_connection_get_adt_audit_session_data_apiparam_3 be return location length audit dbus_connection_get_adt_audit_session_data_apiparam_2']
['Check a member (method/signal) dbus_validate_member_APIParam_1 for validity.', 'check member dbus_validate_member_apiparam_1 validity']
['The return value indicates whether the dbus_set_error_from_message_APIParam_1 was set (the dbus_set_error_from_message_APIParam_1 is set if and only if the dbus_set_error_from_message_APIParam_2 is an dbus_set_error_from_message_APIParam_1 message).', 'return value indicate whether dbus_set_error_from_message_apiparam_1 be set dbus_set_error_from_message_apiparam_1 be set if only if dbus_set_error_from_message_apiparam_2 be dbus_set_error_from_message_apiparam_1 message']
['dbus_set_error_const_APIParam_2 is the dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_2 (not copied!!!).', 'dbus_set_error_const_apiparam_2 be dbus_set_error_const_apiparam_1 dbus_set_error_const_apiparam_2 copy']
['If the dbus_message_has_sender_APIParam_1 has no sender specified or has a different sender, returns FALSE .', 'if dbus_message_has_sender_apiparam_1 have no sender specify or have different sender , return false']
['Alternatively, there are macros #DBUS_MAJOR_VERSION, #DBUS_MINOR_VERSION, #DBUS_MICRO_VERSION, and #DBUS_VERSION which allow you to test the VERSION YOU ARE COMPILED AGAINST.', 'alternatively , be macro dbus_major_version , dbus_minor_version , dbus_micro_version , dbus_version which allow -PRON- test version -PRON- be compile against']
['Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE_SIGNAL).', 'get interface member invoke or emit dbus_message_type_signal']
['dbus_connection_can_send_type_APIName returns TRUE if the dbus_connection_can_send_type_APIParam_2 may be send via the dbus_connection_can_send_type_APIParam_1.', 'dbus_connection_can_send_type_apiname return true if dbus_connection_can_send_type_apiparam_2 be send via dbus_connection_can_send_type_apiparam_1']
['So for int32 it should be a "const dbus_int32_t**" The returned dbus_message_iter_get_fixed_array_APIParam_2 is by reference and should not be freed.', 'so int32 should be const dbus_int32_t return dbus_message_iter_get_fixed_array_apiparam_2 be by reference should be free']
['dbus_connection_ref_APIParam_1 is the dbus_connection_ref_APIParam_1.', 'dbus_connection_ref_apiparam_1 be dbus_connection_ref_apiparam_1']
['Utility function to convert a D-Bus message dbus_message_type_to_string_APIParam_1 into a machine-readable string (not translated).', 'utility function convert d_bus message dbus_message_type_to_string_apiparam_1 into machine_readable string translate']
['For example with Qt you might store the QTimer for this dbus_timeout_set_data_APIParam_1 and with GLib you might store a g_timeout_add result id.', 'example qt -PRON- may store qtimer dbus_timeout_set_data_apiparam_1 glib -PRON- may store g_timeout_add result identifier']
['Should only be called if the dbus_connection_free_preallocated_send_APIParam_2 resources are not used to send a message.', 'should only be call if dbus_connection_free_preallocated_send_apiparam_2 resource be use send message']
['dbus_bus_start_service_by_name_APIParam_1 is the dbus_bus_start_service_by_name_APIParam_1.', 'dbus_bus_start_service_by_name_apiparam_1 be dbus_bus_start_service_by_name_apiparam_1']
['dbus_validate_bus_name_APIName returns TRUE if dbus_validate_bus_name_APIParam_1 is valid.', 'dbus_validate_bus_name_apiname return true if dbus_validate_bus_name_apiparam_1 be valid']
['Gets the object path this dbus_message_get_path_APIParam_1 is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted from (for DBUS_MESSAGE_TYPE_SIGNAL).', 'get object path dbus_message_get_path_apiparam_1 be send or emit dbus_message_type_signal']
['Warning While this function blocks the calling thread will not be processing the incoming dbus_connection_send_with_reply_and_block_APIParam_2 queue.', 'warning while function block call thread be process incoming dbus_connection_send_with_reply_and_block_apiparam_2 queue']
['dbus_bus_release_name_APIParam_3 is location to store the dbus_bus_release_name_APIParam_3.', 'dbus_bus_release_name_apiparam_3 be location store dbus_bus_release_name_apiparam_3']
['dbus_message_has_path_APIParam_2 is the dbus_message_has_path_APIParam_2 name.', 'dbus_message_has_path_apiparam_2 be dbus_message_has_path_apiparam_2 name']
['dbus_message_get_reply_serial_APIParam_1 is the dbus_message_get_reply_serial_APIParam_1.', 'dbus_message_get_reply_serial_apiparam_1 be dbus_message_get_reply_serial_apiparam_1']
['dbus_message_iter_open_container_APIParam_1 is the append iterator.', 'dbus_message_iter_open_container_apiparam_1 be append iterator']
['dbus_server_get_is_connected_APIName returns TRUE if the dbus_server_get_is_connected_APIParam_1 is still listening for new connections.', 'dbus_server_get_is_connected_apiname return true if dbus_server_get_is_connected_apiparam_1 be still listen connection']
['dbus_connection_set_timeout_functions_APIParam_3 is function to remove a timeout.', 'dbus_connection_set_timeout_functions_apiparam_3 be function remove timeout']
['The interface name must contain only valid characters as defined in the D-Bus specification.', 'interface name must contain only valid character as define d_bus specification']
["If the iterator is pointing at a type code such as 's', then it will be returned directly.", 'if iterator be point type code such as , then be return directly']
['When using Qt, typically the DBusAddWatchFunction would create a QSocketNotifier.', 'when use qt , typically dbusaddwatchfunction would create qsocketnotifier']
['Frees dbus_connection_free_preallocated_send_APIParam_2 message-sending resources from dbus_connection_preallocate_send_APIName .', 'free dbus_connection_free_preallocated_send_apiparam_2 message_sending resource dbus_connection_preallocate_send_apiname']
['dbus_message_iter_get_element_count_APIParam_1 is the iterator.', 'dbus_message_iter_get_element_count_apiparam_1 be iterator']
['dbus_connection_ref_APIName returns the dbus_connection_ref_APIParam_1.', 'dbus_connection_ref_apiname return dbus_connection_ref_apiparam_1']
['This setting interacts with the available authorization mechanisms (see dbus_server_set_auth_mechanisms_APIName ).', 'set interact available authorization mechanism see dbus_server_set_auth_mechanisms_apiname']
['To append variable-length basic types, or any more complex value, you have to use an iterator rather than this function.', 'append variable_length basic type , or more complex value , -PRON- have iterator rather than function']
['So int32, double, bool, etc.', 'so int32 , double , bool , etc']
['clients can connect anonymously.', 'client can connect anonymously']
['dbus_connection_get_unix_process_id_APIName returns TRUE if the dbus_connection_get_unix_process_id_APIParam_2 is filled in.', 'dbus_connection_get_unix_process_id_apiname return true if dbus_connection_get_unix_process_id_apiparam_2 be fill']
['dbus_server_allocate_data_slot_APIName returns FALSE on no memory.', 'dbus_server_allocate_data_slot_apiname return false no memory']
['If the dbus_connection_get_server_id_APIParam_1 is on the server side, this will always return NULL - use dbus_server_get_id_APIName to get the ID of your own server, if you are the server side.', 'if dbus_connection_get_server_id_apiparam_1 be server side , always return null dbus_server_get_id_apiname get identifi -PRON- server , if -PRON- be server side']
['dbus_pending_call_set_data_APIName returns TRUE if there was enough memory to store the dbus_pending_call_set_data_APIParam_3.', 'dbus_pending_call_set_data_apiname return true if be enough memory store dbus_pending_call_set_data_apiparam_3']
['dbus_connection_get_max_message_size_APIName returns the max size of a single message.', 'dbus_connection_get_max_message_size_apiname return max size single message']
['Stores a pointer on a DBusConnection , along with an optional function to be used for freeing the dbus_connection_set_data_APIParam_3 when the dbus_connection_set_data_APIParam_3 is set again, or when the dbus_connection_set_data_APIParam_1 is finalized.', 'store pointer dbusconnection , along optional function be use free dbus_connection_set_data_apiparam_3 when dbus_connection_set_data_apiparam_3 be set again , or when dbus_connection_set_data_apiparam_1 be finalize']
["It's a bug to call this function for a dbus_connection_unregister_object_path_APIParam_2 that isn't registered.", 'be bug call function dbus_connection_unregister_object_path_apiparam_2 be register']
['The "rule" argument is the string form of a match dbus_bus_remove_match_APIParam_2.', 'rule argument be stre form match dbus_bus_remove_match_apiparam_2']
['This feature is used instead of simply adding/removing the watch because enabling/disabling can be done without memory allocation.', 'feature be use instead simply watch because can be do without memory allocation']
['This function is not thread-safe, because altering the environment in Unix is not thread-safe in general.', 'function be thread_safe , because alter environment unix be thread_safe general']
['If the queue is empty, returns NULL .', 'if queue be empty , return null']
['Sets a predicate dbus_connection_set_windows_user_function_APIParam_2 used to determine whether a given user ID is allowed to connect.', 'set predicate dbus_connection_set_windows_user_function_apiparam_2 use determine whether give user identifi be allow connect']
['dbus_malloc_APIName returns NULL if the allocation fails.', 'dbus_malloc_apiname return null if allocation fail']
['Stores a pointer on a DBusPendingCall , along with an optional function to be used for freeing the dbus_pending_call_set_data_APIParam_3 when the dbus_pending_call_set_data_APIParam_3 is set again, or when the dbus_pending_call_set_data_APIParam_1 call is finalized.', 'store pointer dbuspendingcall , along optional function be use free dbus_pending_call_set_data_apiparam_3 when dbus_pending_call_set_data_apiparam_3 be set again , or when dbus_pending_call_set_data_apiparam_1 call be finalize']
["However, when the parser encounters a container type start character such as '(' for a structure, the corresponding type for the container will be returned, e.g.", 'however , when parser encounter container type start character such as structure , correspond type container be return , e']
['dbus_message_get_path_APIParam_1 is the dbus_message_get_path_APIParam_1.', 'dbus_message_get_path_apiparam_1 be dbus_message_get_path_apiparam_1']
['This function calls dbus_connection_set_exit_on_disconnect_APIName on the new connection, so the application will exit if the connection closes.', 'function call dbus_connection_set_exit_on_disconnect_apiname connection , so application exit if connection close']
['dbus_signature_iter_recurse_APIParam_1 is the current interator.', 'dbus_signature_iter_recurse_apiparam_1 be current interator']
['See also dbus_connection_read_write_dispatch_APIName .', 'see dbus_connection_read_write_dispatch_apiname']
['Initialize dbus_message_iter_init_closed_APIParam_1 as if with DBUS_MESSAGE_ITER_INIT_CLOSED .', 'initialize dbus_message_iter_init_closed_apiparam_1 as if dbus_message_iter_init_close']
['Sets the interface dbus_message_set_member_APIParam_2 being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE_SIGNAL).', 'set interface dbus_message_set_member_apiparam_2 invoke or emit dbus_message_type_signal']
['The dbus_pending_call_get_data_APIParam_2 must still be allocated (must not have been freed).', 'dbus_pending_call_get_data_apiparam_2 must still be allocate must have free']
['dbus_connection_get_is_anonymous_APIParam_1 is the dbus_connection_get_is_anonymous_APIParam_1.', 'dbus_connection_get_is_anonymous_apiparam_1 be dbus_connection_get_is_anonymous_apiparam_1']
['If the open fails, the function returns NULL , and provides a reason for the failure in the dbus_connection_open_private_APIParam_2 parameter.', 'if open fail , function return null , provide reason failure dbus_connection_open_private_apiparam_2 parameter']
['If the iterator is at the end of the message, returns DBUS_TYPE_INVALID .', 'if iterator be end message , return dbus_type_invalid']
['Escapes the given string as a dbus_address_escape_value_APIParam_1 in a key=value pair for a D-Bus address.', 'escape give string as dbus_address_escape_value_apiparam_1 key value pair d_bus address']
['Initializes threads.', 'initialize thread']
['The path must contain only valid characters as defined in the D-Bus specification.', 'path must contain only valid character as define d_bus specification']
['The list is terminated with DBUS_TYPE_INVALID .', 'list be terminate dbus_type_invalid']
['Guaranteed to return NULL if dbus_malloc0_APIParam_1 is zero on all platforms.', 'guarantee return null if dbus_malloc0_apiparam_1 be zero platform']
["dbus_connection_preallocate_send_APIParam_1 is the dbus_connection_preallocate_send_APIParam_1 we're preallocating for.", 'dbus_connection_preallocate_send_apiparam_1 be dbus_connection_preallocate_send_apiparam_1 -PRON- re preallocate']
['The timer interval may change whenever the timeout is added, removed, or toggled.', 'timer interval change whenever timeout be add , remove , or toggle']
['The purpose of dbus_shutdown_APIName is to allow applications to get clean output from memory leak checkers.', 'purpose dbus_shutdown_apiname be allow application get clean output memory leak checker']
['dbus_connection_get_max_received_size_APIParam_1 is the dbus_connection_get_max_received_size_APIParam_1.', 'dbus_connection_get_max_received_size_apiparam_1 be dbus_connection_get_max_received_size_apiparam_1']
['dbus_message_new_signal_APIParam_3 is dbus_message_new_signal_APIParam_3 of the signal.', 'dbus_message_new_signal_apiparam_3 be dbus_message_new_signal_apiparam_3 signal']
['dbus_set_error_APIParam_2 is the dbus_set_error_APIParam_1 dbus_set_error_APIParam_2.', 'dbus_set_error_apiparam_2 be dbus_set_error_apiparam_1 dbus_set_error_apiparam_2']
['The return value indicates whether the disconnect message has been processed, NOT whether the dbus_connection_read_write_dispatch_APIParam_1 is connected.', 'return value indicate whether disconnect message have process , whether dbus_connection_read_write_dispatch_apiparam_1 be connect']
['dbus_message_get_auto_start_APIName returns TRUE if the dbus_message_get_auto_start_APIParam_1 will cause an owner for destination name to be auto-started.', 'dbus_message_get_auto_start_apiname return true if dbus_message_get_auto_start_apiparam_1 cause owner destination name be auto_starte']
['If the dbus_connection_read_write_APIParam_1 is closed, the function returns FALSE .', 'if dbus_connection_read_write_apiparam_1 be closed , function return false']
['If more arguments than requested are present, the requested arguments are returned and the extra arguments are ignored.', 'if more argument than request be present , request argument be return extra argument be ignore']
['dbus_connection_allocate_data_slot_APIName returns FALSE on failure (no memory).', 'dbus_connection_allocate_data_slot_apiname return false failure no memory']
["dbus_message_new_error_APIParam_1 is the message we're replying to.", 'dbus_message_new_error_apiparam_1 be message -PRON- re reply']
['You may not close a shared dbus_connection_close_APIParam_1.', 'PRON- close share dbus_connection_close_apiparam_1']
['dbus_pending_call_set_notify_APIParam_4 is dbus_pending_call_set_notify_APIParam_2 to free the user data.', 'dbus_pending_call_set_notify_apiparam_4 be dbus_pending_call_set_notify_apiparam_2 free user datum']
['Should be freed with dbus_free_APIName.', 'should be free dbus_free_apiname']
['This function returns a result code.', 'function return result code']
['A single call to dbus_connection_dispatch_APIName will process at most one message; it will not clear the entire message queue.', 'single call dbus_connection_dispatch_apiname process most one message ; clear entire message queue']
['dbus_set_error_APIParam_1 is the dbus_set_error_APIParam_1.or NULL.', 'dbus_set_error_apiparam_1 be null']
['Note that you need to check that the iterator points to an array prior to using this function.', 'note -PRON- need check iterator point array prior use function']
['dbus_malloc_APIName memory is NOT safe to free with regular free_APIName from the C library.', 'dbus_malloc_apiname memory be safe free regular free_apiname c library']
['dbus_validate_path_APIName returns TRUE if dbus_validate_path_APIParam_1 is valid.', 'dbus_validate_path_apiname return true if dbus_validate_path_apiparam_1 be valid']
['dbus_validate_utf8_APIName returns TRUE if dbus_validate_utf8_APIParam_1 is valid UTF-8.', 'dbus_validate_utf8_apiname return true if dbus_validate_utf8_apiparam_1 be valid utf_8']
['For variants, the dbus_message_iter_open_container_APIParam_3 should be the dbus_message_iter_open_container_APIParam_2 of the single value inside the variant.', 'variant , dbus_message_iter_open_container_apiparam_3 should be dbus_message_iter_open_container_apiparam_2 single value inside variant']
['If a normal reply is received, it is returned, and removed from the incoming dbus_connection_send_with_reply_and_block_APIParam_2 queue.', 'if normal reply be receive , be return , remove incoming dbus_connection_send_with_reply_and_block_apiparam_2 queue']
['dbus_connection_get_adt_audit_session_data_APIName returns TRUE if audit dbus_connection_get_adt_audit_session_data_APIParam_2 is filled in with a valid ucred pointer.', 'dbus_connection_get_adt_audit_session_data_apiname return true if audit dbus_connection_get_adt_audit_session_data_apiparam_2 be fill valid ucred pointer']
['Registers a handler for a given dbus_connection_register_object_path_APIParam_2 in the object hierarchy.', 'register handler give dbus_connection_register_object_path_apiparam_2 object hierarchy']
['If the dbus_connection_set_windows_user_function_APIParam_2 is set to NULL (as it is by default), then only the same user owning the server process will be allowed to connect.', 'if dbus_connection_set_windows_user_function_apiparam_2 be set null , then only user owning server process be allow connect']
['It is important to note this because every time a message is received the application will be paged into memory to process it.', 'be important note because every time message be receive application be page into memory process']
['The only reason to use this function is to re-implement the equivalent of dbus_bus_register_APIName yourself.', 'only reason function be re_implement equivalent dbus_bus_register_apiname -PRON']
['dbus_message_set_interface_APIParam_2 is the interface or NULL to unset.', 'dbus_message_set_interface_apiparam_2 be interface or null unset']
['If the resize fails, the dbus_realloc_APIParam_1 is not freed.', 'if resize fail , dbus_realloc_apiparam_1 be free']
['dbus_connection_register_object_path_APIParam_1 is the dbus_connection_register_object_path_APIParam_1.', 'dbus_connection_register_object_path_apiparam_1 be dbus_connection_register_object_path_apiparam_1']
['Like dbus_message_append_args_APIName but takes a va_list for use by language bindings.', 'like dbus_message_append_args_apiname but take va_list by language binding']
['dbus_connection_open_APIParam_1 is the dbus_connection_open_APIParam_1.', 'dbus_connection_open_apiparam_1 be dbus_connection_open_apiparam_1']
['DBUS_DISPATCH_COMPLETE indicates that the incoming queue is empty.', 'dbus_dispatch_complete indicate incoming queue be empty']
['DO NOT read or write to the file descriptor, or try to select_APIName on it; use DBusWatch for main loop integration.', 'read or write file descriptor , or try select_apiname ; dbuswatch main loop integration']
['Opens a new, dedicated connection to a remote dbus_connection_open_private_APIParam_1.', 'open , dedicated connection remote dbus_connection_open_private_apiparam_1']
['dbus_validate_interface_APIName returns TRUE if dbus_validate_interface_APIParam_1 is valid.', 'dbus_validate_interface_apiname return true if dbus_validate_interface_apiparam_1 be valid']
['dbus_message_set_container_instance_APIName returns FALSE if not enough memory.', 'dbus_message_set_container_instance_apiname return false if enough memory']
["If an array's elements are not fixed in size, you have to recurse into the array with dbus_message_iter_recurse_APIName and read the elements one by one.", 'if array element be fix size , -PRON- have recurse into array dbus_message_iter_recurse_apiname read element one by one']
['Note that a peer application will always have the unique dbus_message_has_sender_APIParam_2 of the connection as the sender.', 'note peer application always have unique dbus_message_has_sender_apiparam_2 connection as sender']
['Gets the reply, or returns NULL if none has been received yet.', 'get reply , or return null if none have receive yet']
['However, the message bus wants to be able to route methods on that interface through the bus and to other applications.', 'however , message bus want be able route method interface through bus other application']
['Gets flags from DBusWatchFlags indicating what conditions should be monitored on the file descriptor.', 'get flag dbuswatchflag indicate what condition should be monitor file descriptor']
['dbus_error_has_name_APIParam_1 is the dbus_error_has_name_APIParam_1.', 'dbus_error_has_name_apiparam_1 be dbus_error_has_name_apiparam_1']
['Cancels the dbus_pending_call_cancel_APIParam_1 call, such that any reply or error received will just be ignored.', 'cancel dbus_pending_call_cancel_apiparam_1 call , such reply or error receive just be ignore']
['This function behaves exactly like dbus_connection_set_watch_functions_APIName ; see the documentation for that routine.', 'function behave exactly like dbus_connection_set_watch_functions_apiname ; see documentation routine']
['dbus_bus_register_APIParam_2 is place to store errors.', 'dbus_bus_register_apiparam_2 be place store error']
['Retrieves data previously set with dbus_server_set_data_APIName .', 'retrieve datum previously set dbus_server_set_data_apiname']
['If something else goes wrong, result is set to whatever is appropriate, such as DBUS_ERROR_NO_MEMORY or DBUS_ERROR_DISCONNECTED .', 'if something else go wrong , result be set whatever be appropriate , such as dbus_error_no_memory or dbus_error_disconnected']
['dbus_watch_handle_APIParam_2 is the poll condition using DBusWatchFlags values.', 'dbus_watch_handle_apiparam_2 be poll condition use dbuswatchflag value']
['dbus_address_escape_value_APIName returns newly-allocated escaped dbus_address_escape_value_APIParam_1 or NULL if no memory.', 'dbus_address_escape_value_apiname return newly_allocated escape dbus_address_escape_value_apiparam_1 or null if no memory']
["If you aren't implementing a dbus_message_set_sender_APIParam_1 bus daemon you shouldn't need to set the dbus_message_set_sender_APIParam_2.", 'if -PRON- be implement dbus_message_set_sender_apiparam_1 bus daemon -PRON- should need set dbus_message_set_sender_apiparam_2']
['dbus_realloc_APIParam_2 is new size of the dbus_realloc_APIParam_1 block.', 'dbus_realloc_apiparam_2 be size dbus_realloc_apiparam_1 block']
['Undefined behavior results if you invoke this function when the current type of the iterator is not DBUS_TYPE_ARRAY .', 'undefined behavior result if -PRON- invoke function when current type iterator be dbus_type_array']
['dbus_watch_get_enabled_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_enabled_apiparam_1 be dbuswatch object']
['Return TRUE if the argument is a valid dbus_type_is_valid_APIParam_1.', 'return true if argument be valid dbus_type_is_valid_apiparam_1']
['dbus_connection_set_data_APIParam_1 is the dbus_connection_set_data_APIParam_1.', 'dbus_connection_set_data_apiparam_1 be dbus_connection_set_data_apiparam_1']
['dbus_connection_set_watch_functions_APIParam_3 is function to stop monitoring a descriptor.', 'dbus_connection_set_watch_functions_apiparam_3 be function stop monitor descriptor']
['dbus_connection_can_send_type_APIParam_2 is the dbus_connection_can_send_type_APIParam_2 to check.', 'dbus_connection_can_send_type_apiparam_2 be dbus_connection_can_send_type_apiparam_2 check']
['To append a basic type, specify its type code followed by the address of the value.', 'append basic type , specify type code follow by address value']
['If you use dbus_bus_get_APIName or dbus_bus_get_private_APIName this function will be called for you.', 'if -PRON- dbus_bus_get_apiname or dbus_bus_get_private_apiname function be call -PRON']
['dbus_server_set_data_APIName returns TRUE if there was enough memory to store the dbus_server_set_data_APIParam_3.', 'dbus_server_set_data_apiname return true if be enough memory store dbus_server_set_data_apiparam_3']
['This function will block until authentication and bus registration are complete.', 'function block until authentication bus registration be complete']
['dbus_bus_name_has_owner_APIParam_3 is location to store any errors.', 'dbus_bus_name_has_owner_apiparam_3 be location store error']
['dbus_watch_handle_APIParam_1 is the DBusWatch object.', 'dbus_watch_handle_apiparam_1 be dbuswatch object']
['dbus_connection_allocate_data_slot_APIParam_1 is address of a global variable storing the slot.', 'dbus_connection_allocate_data_slot_apiparam_1 be address global variable storing slot']
['Queues a dbus_connection_send_with_reply_APIParam_2 to send, as with dbus_connection_send_APIName , but also returns a DBusPendingCall used to receive a reply to the dbus_connection_send_with_reply_APIParam_2.', 'queue dbus_connection_send_with_reply_apiparam_2 send , as dbus_connection_send_apiname , but return dbuspendingcall use receive reply dbus_connection_send_with_reply_apiparam_2']
['dbus_connection_send_with_reply_and_block_APIParam_1 is the dbus_connection_send_with_reply_and_block_APIParam_1.', 'dbus_connection_send_with_reply_and_block_apiparam_1 be dbus_connection_send_with_reply_and_block_apiparam_1']
['Processes any incoming data.', 'process incoming datum']
['dbus_address_entry_get_value_APIName returns a value from a dbus_address_entry_get_value_APIParam_2 of an dbus_address_entry_get_value_APIParam_1.', 'dbus_address_entry_get_value_apiname return value dbus_address_entry_get_value_apiparam_2 dbus_address_entry_get_value_apiparam_1']
['dbus_connection_set_watch_functions_APIParam_4 is function to notify of enable/disable.', 'dbus_connection_set_watch_functions_apiparam_4 be function notify']
['dbus_address_entry_get_value_APIParam_2 is the dbus_address_entry_get_value_APIParam_2.', 'dbus_address_entry_get_value_apiparam_2 be dbus_address_entry_get_value_apiparam_2']
['Decrements the reference count on a dbus_pending_call_unref_APIParam_1 call, freeing it if the count reaches 0.   dbus_pending_call_unref_APIParam_1 is the dbus_pending_call_unref_APIParam_1 call object.', 'decrement reference count dbus_pending_call_unref_apiparam_1 call , free if count reach # dbus_pending_call_unref_apiparam_1 be dbus_pending_call_unref_apiparam_1 call object']
['dbus_bus_get_unix_user_APIParam_2 is a dbus_bus_get_unix_user_APIParam_2 owned by the dbus_bus_get_unix_user_APIParam_1.', 'dbus_bus_get_unix_user_apiparam_2 be dbus_bus_get_unix_user_apiparam_2 own by dbus_bus_get_unix_user_apiparam_1']
['Path, interface, and signal dbus_message_new_signal_APIParam_3 must all be valid (the D-Bus specification defines the syntax of these fields).', 'path , interface , signal dbus_message_new_signal_apiparam_3 must be valid d_bus specification define syntax field']
['Check a type dbus_signature_validate_APIParam_1 for validity.', 'check type dbus_signature_validate_apiparam_1 validity']
['dbus_error_has_name_APIName returns TRUE if the given named dbus_error_has_name_APIParam_1 occurred.', 'dbus_error_has_name_apiname return true if give name dbus_error_has_name_apiparam_1 occur']
['dbus_validate_member_APIName returns TRUE if dbus_validate_member_APIParam_1 is valid.', 'dbus_validate_member_apiname return true if dbus_validate_member_apiparam_1 be valid']
["The reason is that we don't know the dbus_connection_set_max_received_size_APIParam_2 of a message until after we read it.", 'reason be -PRON- know dbus_connection_set_max_received_size_apiparam_2 message until after -PRON- read']
['Appends a basic-typed dbus_message_iter_append_basic_APIParam_3 to the message.', 'append basic_type dbus_message_iter_append_basic_apiparam_3 message']
['dbus_connection_get_max_message_unix_fds_APIParam_1 is the dbus_connection_get_max_message_unix_fds_APIParam_1.', 'dbus_connection_get_max_message_unix_fds_apiparam_1 be dbus_connection_get_max_message_unix_fds_apiparam_1']
['_dbus_message_get_n_unix_fds_APIName returns the number of file descriptors.', 'dbus_message_get_n_unix_fds_apiname return number file descriptor']
['If the dbus_message_is_method_call_APIParam_1 is not DBUS_MESSAGE_TYPE_METHOD_CALL , or has a different interface or member field, returns FALSE .', 'if dbus_message_is_method_call_apiparam_1 be dbus_message_type_method_call , or have different interface or member field , return false']
['dbus_bus_request_name_APIParam_1 is the dbus_bus_request_name_APIParam_1.', 'dbus_bus_request_name_apiparam_1 be dbus_bus_request_name_apiparam_1']
['dbus_server_set_new_connection_function_APIParam_2 is a dbus_server_set_new_connection_function_APIParam_2 to handle new connections.', 'dbus_server_set_new_connection_function_apiparam_2 be dbus_server_set_new_connection_function_apiparam_2 handle connection']
['(However, you can always use dbus_message_iter_recurse_APIName , even for fixed-length types; dbus_message_iter_get_fixed_array_APIName is just an optimization.)', 'however , -PRON- can always dbus_message_iter_recurse_apiname , even fixed_length type ; dbus_message_iter_get_fixed_array_apiname be just optimization']
['dbus_message_set_member_APIParam_2 is the dbus_message_set_member_APIParam_2 or NULL to unset.', 'dbus_message_set_member_apiparam_2 be dbus_message_set_member_apiparam_2 or null unset']
['dbus_connection_get_data_APIName returns the data, or NULL if not found.', 'dbus_connection_get_data_apiname return datum , or null if find']
["dbus_connection_try_register_object_path_APIParam_2 is a '/' delimited string of dbus_connection_try_register_object_path_APIParam_2 elements.", 'dbus_connection_try_register_object_path_apiparam_2 be delimit string dbus_connection_try_register_object_path_apiparam_2 element']
['dbus_message_new_method_call_APIName returns a new DBusMessage , free with dbus_message_unref_APIName.', 'dbus_message_new_method_call_apiname return dbusmessage , free dbus_message_unref_apiname']
['To process the incoming message queue, use dbus_connection_dispatch_APIName or (in rare cases) dbus_connection_pop_message_APIName .', 'process incoming message queue , dbus_connection_dispatch_apiname or dbus_connection_pop_message_apiname']
['Check an dbus_validate_error_name_APIParam_2 dbus_validate_error_name_APIParam_1 for validity.', 'check dbus_validate_error_name_apiparam_2 dbus_validate_error_name_apiparam_1 validity']
["If you match message args ('arg0', 'arg1', and so forth) only string arguments will match.", 'if -PRON- match message arg only stre argument match']
["You have to know that nobody is using libdbus in your application's process before you can call dbus_shutdown_APIName .", 'PRON- have know nobody be use libdbus -PRON- application process before -PRON- can call dbus_shutdown_apiname']
['dbus_message_has_member_APIParam_1 is the dbus_message_has_member_APIParam_1.', 'dbus_message_has_member_apiparam_1 be dbus_message_has_member_apiparam_1']
['dbus_connection_set_change_sigpipe_APIParam_1 is TRUE to allow sigpipe to be set to SIG_IGN.', 'dbus_connection_set_change_sigpipe_apiparam_1 be true allow sigpipe be set sig_ign']
['If you dbus_connection_unref_APIName for the last time without closing the dbus_connection_close_APIParam_1, the results are undefined; it is a bug in your program and libdbus will try to print a warning.', 'if -PRON- dbus_connection_unref_apiname last time without close dbus_connection_close_apiparam_1 , result be undefined ; be bug -PRON- program libdbus try print warning']
['The "value" argument should be the address of the array.', 'value argument should be address array']
["This may be useful when using match dbus_bus_add_match_APIParam_2 keys introduced in recent versions of D-Bus, like 'arg0namespace', to allow the application to fall back to less efficient match rules supported by older versions of the daemon if the running version is not new enough; or when using user-supplied rules rather than rules hard-coded at compile time.", 'be useful when use match dbus_bus_add_match_apiparam_2 key introduce recent version d_bus , like arg0namespace , allow application fall back less efficient match rule support by old version daemon if run version be enough ; or when use user_supplied rule rather than rule hard_code compile time']
['It is a bug to call this function for object paths which already have a handler.', 'be bug call function object path which already have handler']
['dbus_message_iter_get_element_count_APIName returns the number of elements in the array-typed value pointed to by the iterator.', 'dbus_message_iter_get_element_count_apiname return number element array_typed value point by iterator']
['Can only be called once per dbus_bus_set_unique_name_APIParam_1.', 'can only be call once per dbus_bus_set_unique_name_apiparam_1']
['dbus_connection_get_server_id_APIParam_1 is the dbus_connection_get_server_id_APIParam_1.', 'dbus_connection_get_server_id_apiparam_1 be dbus_connection_get_server_id_apiparam_1']
['The memory must be released with dbus_free_APIName .', 'memory must be release dbus_free_apiname']
['This function will block until registration is complete.', 'function block until registration be complete']
['The flag is FALSE by default; that is, by default the other end is expected to make any authorization decisions non-interactively and promptly.', 'flag be false by default ; be , by default other end be expect make authorization decision non_interactively promptly']
['This method is fully documented in the D-Bus specification.', 'method be fully document d_bus specification']
['The dbus_connection_send_APIParam_2 dbus_connection_send_APIParam_3 is used by the remote application to send a reply; see dbus_message_get_serial_APIName or the D-Bus specification.', 'dbus_connection_send_apiparam_2 dbus_connection_send_apiparam_3 be use by remote application send reply ; see dbus_message_get_serial_apiname or d_bus specification']
['Rules are specified as a string of comma separated key/value pairs.', 'rule be specify as string comma separate pair']
['WARNING: dbus_shutdown_APIName is NOT thread safe, it must be called while NO other threads are using D-Bus.', 'warning : dbus_shutdown_apiname be thread safe , must be call while no other thread be use d_bus']
['dbus_message_get_data_APIParam_2 is the dbus_message_get_data_APIParam_2 to get data from.', 'dbus_message_get_data_apiparam_2 be dbus_message_get_data_apiparam_2 get datum']
['Sets a predicate dbus_connection_set_unix_user_function_APIParam_2 used to determine whether a given user ID is allowed to connect.', 'set predicate dbus_connection_set_unix_user_function_apiparam_2 use determine whether give user identifi be allow connect']
["Sets the message's dbus_message_set_destination_APIParam_2.", 'set message dbus_message_set_destination_apiparam_2']
['dbus_message_get_auto_start_APIParam_1 is the dbus_message_get_auto_start_APIParam_1.', 'dbus_message_get_auto_start_apiparam_1 be dbus_message_get_auto_start_apiparam_1']
['If the iterator moves forward, returns TRUE .', 'if iterator move forward , return true']
['If the dbus_pending_call_block_APIParam_1 call is already completed, this function returns immediately.', 'if dbus_pending_call_block_apiparam_1 call be already complete , function return immediately']
['calling dbus_connection_dispatch_APIName recursively.', 'call dbus_connection_dispatch_apiname recursively']
['This function will block if called during a dbus_connection_dispatch_APIName .', 'function block if call during dbus_connection_dispatch_apiname']
['if FALSE is returned the net result should be that dbus_connection_set_watch_functions_APIName has no effect, but the dbus_connection_set_watch_functions_APIParam_2 and dbus_connection_set_watch_functions_APIParam_3 may have been called.', 'if false be return net result should be dbus_connection_set_watch_functions_apiname have no effect , but dbus_connection_set_watch_functions_apiparam_2 dbus_connection_set_watch_functions_apiparam_3 have call']
['Can unregister both fallback paths and object paths.', 'can unregister both fallback path object path']
['dbus_message_allocate_data_slot_APIParam_1 is address of a global variable storing the slot.', 'dbus_message_allocate_data_slot_apiparam_1 be address global variable storing slot']
['dbus_message_iter_append_basic_APIParam_1 is the append iterator.', 'dbus_message_iter_append_basic_apiparam_1 be append iterator']
['This will always return TRUE for all types, with the exception of DBUS_TYPE_UNIX_FD.', 'always return true type , exception dbus_type_unix_fd']
['Gets the destination of a dbus_message_get_destination_APIParam_1 or NULL if there is none set.', 'get destination dbus_message_get_destination_apiparam_1 or null if be none set']
["A side effect of this is that you need to know there's a reference held on the dbus_connection_set_data_APIParam_1 while invoking dbus_connection_set_data_APIName , or the dbus_connection_set_data_APIParam_1 could be finalized during dbus_connection_set_data_APIName .", 'side effect be -PRON- need know reference hold dbus_connection_set_data_apiparam_1 while invoke dbus_connection_set_data_apiname , or dbus_connection_set_data_apiparam_1 could be finalize during dbus_connection_set_data_apiname']
["There is absolutely no requirement to call dbus_shutdown_APIName - in fact, most applications won't bother and should not feel guilty.", 'be absolutely no requirement call dbus_shutdown_apiname fact , most application bother should feel guilty']
['Most connections are shared.', 'most connection be share']
['Checks whether an dbus_error_is_set_APIParam_1 occurred (the dbus_error_is_set_APIParam_1 is set).', 'check whether dbus_error_is_set_apiparam_1 occur dbus_error_is_set_apiparam_1 be set']
["dbus_message_set_reply_serial_APIParam_2 is the serial we're replying to.", 'dbus_message_set_reply_serial_apiparam_2 be serial -PRON- re reply']
['dbus_message_get_destination_APIName returns the dbus_message_get_destination_APIParam_1 destination (should not be freed) or NULL.', 'dbus_message_get_destination_apiname return dbus_message_get_destination_apiparam_1 destination or null']
['dbus_connection_get_unix_user_APIName returns TRUE if the dbus_connection_get_unix_user_APIParam_2 is filled in.', 'dbus_connection_get_unix_user_apiname return true if dbus_connection_get_unix_user_apiparam_2 be fill']
['Todo: this could be optimized by using the len from the dbus_message_get_path_decomposed_APIParam_1 instead of calling strlen_APIName again   dbus_message_get_path_decomposed_APIParam_1 is the dbus_message_get_path_decomposed_APIParam_1.', 'todo : could be optimize by use len dbus_message_get_path_decomposed_apiparam_1 instead call strlen_apiname again dbus_message_get_path_decomposed_apiparam_1 be dbus_message_get_path_decomposed_apiparam_1']
['dbus_connection_get_unix_process_id_APIParam_1 is the dbus_connection_get_unix_process_id_APIParam_1.', 'dbus_connection_get_unix_process_id_apiparam_1 be dbus_connection_get_unix_process_id_apiparam_1']
["DBUS_RELEASE_NAME_REPLY_NOT_OWNER which means someone else owns the dbus_bus_release_name_APIParam_2 so you can't release it.", 'dbus_release_name_reply_not_owner which mean someone else own dbus_bus_release_name_apiparam_2 so -PRON- can release']
['For messages whose type is not DBUS_MESSAGE_TYPE_METHOD_CALL , this flag is meaningless and should not be set.', 'message whose type be dbus_message_type_method_call , flag be meaningless should be set']
['Gets whether the dbus_connection_get_is_authenticated_APIParam_1 was authenticated.', 'get whether dbus_connection_get_is_authenticated_apiparam_1 be authenticate']
["This function is intended for use with applications that don't want to write a main loop and deal with DBusWatch and DBusTimeout .", 'function be intend application want write main loop deal dbuswatch dbustimeout']
['dbus_server_get_address_APIParam_1 is the dbus_server_get_address_APIParam_1.', 'dbus_server_get_address_apiparam_1 be dbus_server_get_address_apiparam_1']
['Asks the bus to assign the given dbus_bus_request_name_APIParam_2 to this dbus_bus_request_name_APIParam_1 by invoking the RequestName method on the bus.', 'ask bus assign give dbus_bus_request_name_apiparam_2 dbus_bus_request_name_apiparam_1 by invoke requestname method bus']
['Connections created with dbus_connection_open_APIName or dbus_bus_get_APIName are shared.', 'connection create dbus_connection_open_apiname or dbus_bus_get_apiname be share']
['Intended for use by the DBusAddWatchFunction and DBusRemoveWatchFunction to store their own dbus_watch_set_data_APIParam_2.', 'intend by dbusaddwatchfunction dbusremovewatchfunction store dbus_watch_set_data_apiparam_2']
["So you can't use this function to see whether a sender owned a well-known dbus_message_has_sender_APIParam_2.", 'so -PRON- can function see whether sender own well_known dbus_message_has_sender_apiparam_2']
["Pass NULL if you don't care about the dbus_bus_start_service_by_name_APIParam_4.", 'pass null if -PRON- care about dbus_bus_start_service_by_name_apiparam_4']
['dbus_connection_read_write_dispatch_APIName dispatches incoming messages for you; with dbus_connection_read_write_APIName you have to arrange to drain the incoming queue yourself.', 'dbus_connection_read_write_dispatch_apiname dispatch incoming message -PRON- ; dbus_connection_read_write_apiname -PRON- have arrange drain incoming queue -PRON']
['Be sure you have somehow checked that dbus_message_iter_get_arg_type_APIName matches the type you are expecting to recurse into.', 'be sure -PRON- have somehow check dbus_message_iter_get_arg_type_apiname match type -PRON- be expect recurse into']
['dbus_connection_free_preallocated_send_APIParam_1 is the dbus_connection_free_preallocated_send_APIParam_1.', 'dbus_connection_free_preallocated_send_apiparam_1 be dbus_connection_free_preallocated_send_apiparam_1']
['dbus_connection_add_filter_APIParam_3 is user data to pass to the dbus_connection_add_filter_APIParam_2.', 'dbus_connection_add_filter_apiparam_3 be user data pass dbus_connection_add_filter_apiparam_2']
['Allows apps to create a future guarantee that they can send a message regardless of memory shortages.', 'allow app create future guarantee can send message regardless memory shortage']
['Call dbus_timeout_get_enabled_APIName to check this.', 'call dbus_timeout_get_enabled_apiname check']
['This function should only be used if dbus_type_is_fixed_APIName returns TRUE for the element type.', 'function should only be use if dbus_type_is_fixed_apiname return true element type']
['Sets the name of the error (DBUS_MESSAGE_TYPE_ERROR).', 'set name error dbus_message_type_error']
['dbus_server_set_watch_functions_APIParam_2 is function to begin monitoring a new descriptor.', 'dbus_server_set_watch_functions_apiparam_2 be function begin monitor descriptor']
['Preallocates resources needed to send a message, allowing the message to be sent without the possibility of memory allocation failure.', 'preallocate resource need send message , allow message be send without possibility memory allocation failure']
['dbus_connection_get_unix_fd_APIParam_2 is return location for the file descriptor.', 'dbus_connection_get_unix_fd_apiparam_2 be return location file descriptor']
['As a result, it is not sufficient to call this function in a library or plugin, unless the library or plugin imposes a similar requirement on its callers.', 'as result , be sufficient call function library or plugin , unless library or plugin impose similar requirement caller']
['dbus_connection_get_unix_user_APIParam_1 is the dbus_connection_get_unix_user_APIParam_1.', 'dbus_connection_get_unix_user_apiparam_1 be dbus_connection_get_unix_user_apiparam_1']
['Strings on D-Bus must be valid UTF-8.', 'string d_bus must be valid utf_8']
['The returned string becomes invalid if the dbus_message_get_container_instance_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_container_instance_APIParam_1 data.', 'return string become invalid if dbus_message_get_container_instance_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_container_instance_apiparam_1 datum']
['The function will return TRUE for DBUS_TYPE_UNIX_FD only on systems that know Unix file descriptors and can send them via the chosen transport and when the remote side supports this.', 'function return true dbus_type_unix_fd only system know unix file descriptor can send -PRON- via choose transport when remote side support']
["Popping messages manually is only useful in very simple programs that don't share a DBusConnection with any libraries or other modules.", 'pop message manually be only useful simple program share dbusconnection library or other module']
['dbus_message_set_data_APIParam_1 is the dbus_message_set_data_APIParam_1.', 'dbus_message_set_data_apiparam_1 be dbus_message_set_data_apiparam_1']
['In addition to an ID for each bus and an ID for each machine, there is an ID for each address that the bus is listening on; that can be retrieved with dbus_connection_get_server_id_APIName , though it is probably not very useful.', 'addition identifi each bus identifi each machine , be identifi each address bus be listen ; can be retrieve dbus_connection_get_server_id_apiname , though be probably useful']
['dbus_threads_init_default_APIName returns TRUE on success, FALSE if not enough memory', 'dbus_threads_init_default_apiname return true success , false if enough memory']
['Called to notify the D-Bus library when a previously-added dbus_watch_handle_APIParam_1 is ready for reading or writing, or has an exception such as a hangup.', 'call notify d_bus library when previously_added dbus_watch_handle_apiparam_1 be ready reading or writing , or have exception such as hangup']
['DBUS_DISPATCH_DATA_REMAINS indicates that the message queue may contain messages.', 'dbus_dispatch_data_remain indicate message queue contain message']
['dbus_message_get_path_APIName returns the path (should not be freed) or NULL.', 'dbus_message_get_path_apiname return path or null']
['On the protocol level this toggles DBUS_HEADER_FLAG_NO_AUTO_START   dbus_message_set_auto_start_APIParam_1 is the dbus_message_set_auto_start_APIParam_1.', 'protocol level toggle dbus_header_flag_no_auto_start dbus_message_set_auto_start_apiparam_1 be dbus_message_set_auto_start_apiparam_1']
['dbus_watch_get_unix_fd_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_unix_fd_apiparam_1 be dbuswatch object']
['Only called if dbus_connection_return_message_APIParam_2 from dbus_connection_borrow_message_APIName was non- NULL .', 'only call if dbus_connection_return_message_apiparam_2 dbus_connection_borrow_message_apiname be non null']
['dbus_connection_try_register_fallback_APIParam_4 is data to pass to functions in the dbus_connection_try_register_fallback_APIParam_3.', 'dbus_connection_try_register_fallback_apiparam_4 be data pass function dbus_connection_try_register_fallback_apiparam_3']
['Unlike the other two dbus_bus_request_name_APIParam_3, DBUS_NAME_FLAG_REPLACE_EXISTING is a property of the individual RequestName call, i.e.', 'unlike other two dbus_bus_request_name_apiparam_3 , dbus_name_flag_replace_existing be property individual requestname call , i']
['Tells you whether values of this type can change length if you set them to some other value.', 'tell -PRON- whether value type can change length if -PRON- set -PRON- other value']
['For this purpose, you assume that the first byte of the old and new value would be in the same location, so alignment padding is not a factor.', 'purpose , -PRON- assume first byte old value would be location , so alignment padding be factor']
['The fixed-length types are all basic types that are not string-like.', 'fixed_length type be basic type be string_like']
["The bus compares match rules semantically, not textually, so whitespace and ordering don't have to be identical to the dbus_bus_remove_match_APIParam_2 you passed to dbus_bus_add_match_APIName .", 'bus compare match rule semantically , textually , so whitespace ordering have be identical dbus_bus_remove_match_apiparam_2 -PRON- pass dbus_bus_add_match_apiname']
['dbus_validate_bus_name_APIParam_1 is a potentially invalid bus dbus_validate_bus_name_APIParam_1, which must not be NULL.', 'dbus_validate_bus_name_apiparam_1 be potentially invalid bus dbus_validate_bus_name_apiparam_1 , which must be null']
['dbus_connection_get_max_message_size_APIParam_1 is the dbus_connection_get_max_message_size_APIParam_1.', 'dbus_connection_get_max_message_size_apiparam_1 be dbus_connection_get_max_message_size_apiparam_1']
['dbus_pending_call_ref_APIParam_1 is the dbus_pending_call_ref_APIParam_1 call object.', 'dbus_pending_call_ref_apiparam_1 be dbus_pending_call_ref_apiparam_1 call object']
['DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER means that the dbus_bus_request_name_APIParam_2 had no existing owner, and the caller is now the primary owner; or that the dbus_bus_request_name_APIParam_2 had an owner, and the caller specified DBUS_NAME_FLAG_REPLACE_EXISTING , and the current owner specified DBUS_NAME_FLAG_ALLOW_REPLACEMENT .', 'dbus_request_name_reply_primary_owner mean dbus_bus_request_name_apiparam_2 have no exist owner , caller be now primary owner ; or dbus_bus_request_name_apiparam_2 have owner , caller specify dbus_name_flag_replace_existing , current owner specify dbus_name_flag_allow_replacement']
['So the dbus_message_get_path_decomposed_APIParam_2 "/foo/bar" becomes { "foo", "bar", NULL } and the dbus_message_get_path_decomposed_APIParam_2 "/" becomes { NULL }.', 'so dbus_message_get_path_decomposed_apiparam_2 become foo , bar , null dbus_message_get_path_decomposed_apiparam_2 become null']
['Blocks until the outgoing message queue is empty.', 'block until outgoing message queue be empty']
['DBUS_REQUEST_NAME_REPLY_IN_QUEUE happens only if the caller does NOT specify DBUS_NAME_FLAG_DO_NOT_QUEUE and either the current owner did NOT specify DBUS_NAME_FLAG_ALLOW_REPLACEMENT or the caller did NOT specify DBUS_NAME_FLAG_REPLACE_EXISTING .', 'dbus_request_name_reply_in_queue happen only if caller do specify dbus_name_flag_do_not_queue either current owner do specify dbus_name_flag_allow_replacement or caller do specify dbus_name_flag_replace_existing']
['dbus_server_get_is_connected_APIParam_1 is the dbus_server_get_is_connected_APIParam_1.', 'dbus_server_get_is_connected_apiparam_1 be dbus_server_get_is_connected_apiparam_1']
['dbus_bus_add_match_APIParam_2 is textual form of match dbus_bus_add_match_APIParam_2.', 'dbus_bus_add_match_apiparam_2 be textual form match dbus_bus_add_match_apiparam_2']
["Does not modify the server's reference count.", 'do modify server reference count']
["dbus_connection_register_fallback_APIParam_2 is a '/' delimited string of dbus_connection_register_fallback_APIParam_2 elements.", 'dbus_connection_register_fallback_apiparam_2 be delimit string dbus_connection_register_fallback_apiparam_2 element']
['(Note that if the dbus_connection_get_is_authenticated_APIParam_1 was authenticated then disconnected, this function still returns TRUE )   dbus_connection_get_is_authenticated_APIParam_1 is the dbus_connection_get_is_authenticated_APIParam_1.', 'dbus_connection_get_is_authenticated_apiparam_1 be dbus_connection_get_is_authenticated_apiparam_1']
['The toggled function may be NULL if a main loop re-queries dbus_watch_get_enabled_APIName every time anyway.', 'toggle function be null if main loop re_queries dbus_watch_get_enabled_apiname every time anyway']
['dbus_connection_set_windows_user_function_APIParam_3 is dbus_connection_set_windows_user_function_APIParam_3 to pass to the predicate.', 'dbus_connection_set_windows_user_function_apiparam_3 be dbus_connection_set_windows_user_function_apiparam_3 pass predicate']
['The flag is FALSE by default, that is by default the other end is required to reply.', 'flag be false by default , be by default other end be require reply']
['Attempts to send messages after closing a dbus_connection_close_APIParam_1 are safe, but will result in error replies generated locally in libdbus.', 'attempt send message after close dbus_connection_close_apiparam_1 be safe , but result error reply generate locally libdbus']
['dbus_bus_get_private_APIName returns a DBusConnection with new ref.', 'dbus_bus_get_private_apiname return dbusconnection ref']
['dbus_pending_call_steal_reply_APIName returns the reply message or NULL .', 'dbus_pending_call_steal_reply_apiname return reply message or null']
['Allocates an integer ID to be used for storing application-specific data on any DBusServer .', 'allocate integer identifier be use store application_specific datum dbusserver']
['If the remote application has the same machine ID as the one returned by this function, then the remote application is on the same machine as your application.', 'if remote application have machine identifi as one return by function , then remote application be machine as -PRON- application']
['dbus_connection_get_outgoing_size_APIName returns the number of bytes that have been queued up but not sent.', 'dbus_connection_get_outgoing_size_apiname return number byte have queue up but send']
['The "ReleaseName" method is canonically documented in the D-Bus specification.', 'releasename method be canonically document d_bus specification']
['Used to keep a dbus_connection_steal_borrowed_message_APIParam_2 after peeking at it using dbus_connection_borrow_message_APIName .', 'use keep dbus_connection_steal_borrowed_message_apiparam_2 after peek use dbus_connection_borrow_message_apiname']
['Todo: If appending any of the arguments fails due to lack of memory, the dbus_message_iter_init_append_APIParam_1 is hosed and you have to start over building the whole dbus_message_iter_init_append_APIParam_1.', 'todo : if append argument fail due lack memory , dbus_message_iter_init_append_apiparam_1 be hose -PRON- have start over build whole dbus_message_iter_init_append_apiparam_1']
['dbus_message_get_path_decomposed_APIName returns FALSE if no memory to allocate the array.', 'dbus_message_get_path_decomposed_apiname return false if no memory allocate array']
["Because the array is not copied, this function runs in constant time and is fast; it's much preferred over walking the entire array with an iterator.", 'because array be copy , function run constant time be fast ; be much prefer over walk entire array iterator']
['dbus_signature_validate_APIName returns TRUE if dbus_signature_validate_APIParam_1 is valid or FALSE if an dbus_signature_validate_APIParam_2 is set.', 'dbus_signature_validate_apiname return true if dbus_signature_validate_apiparam_1 be valid or false if dbus_signature_validate_apiparam_2 be set']
['Sets dbus_timeout_set_data_APIParam_2 which can be retrieved with dbus_timeout_get_data_APIName .', 'set dbus_timeout_set_data_apiparam_2 which can be retrieve dbus_timeout_get_data_apiname']
['If this flag is set, there is no way to know whether the dbus_message_set_no_reply_APIParam_1 successfully arrived at the remote end.', 'if flag be set , be no way know whether dbus_message_set_no_reply_apiparam_1 successfully arrive remote end']
['dbus_server_set_data_APIParam_4 is finalizer function for the dbus_server_set_data_APIParam_3.', 'dbus_server_set_data_apiparam_4 be finalizer function dbus_server_set_data_apiparam_3']
['If -1 is passed for the timeout, a sane default timeout is used.', 'if # be pass timeout , sane default timeout be use']
['dbus_message_iter_get_array_len_APIName returns the number of bytes in the array as marshaled in the wire protocol.', 'dbus_message_iter_get_array_len_apiname return number byte array as marshal wire protocol']
['Sends a dbus_connection_send_preallocated_APIParam_3 using dbus_connection_send_preallocated_APIParam_2 resources.', 'send dbus_connection_send_preallocated_apiparam_3 use dbus_connection_send_preallocated_apiparam_2 resource']
['dbus_message_new_signal_APIParam_1 is the dbus_message_new_signal_APIParam_1 to the object emitting the signal.', 'dbus_message_new_signal_apiparam_1 be dbus_message_new_signal_apiparam_1 object emit signal']
['The allocated ID may then be used with dbus_server_set_data_APIName and dbus_server_get_data_APIName .', 'allocate identifier then be use dbus_server_set_data_apiname dbus_server_get_data_apiname']
['dbus_bus_request_name_APIName returns a result code, -1 if dbus_bus_request_name_APIParam_4 is set.', 'dbus_bus_request_name_apiname return result code , # if dbus_bus_request_name_apiparam_4 be set']
['dbus_connection_send_with_reply_APIParam_3 is return location for a DBusPendingCall object, or NULL if dbus_connection_send_with_reply_APIParam_1 is disconnected or when you try to send Unix file descriptors on a dbus_connection_send_with_reply_APIParam_1 that does not support them.', 'dbus_connection_send_with_reply_apiparam_3 be return location dbuspendingcall object , or null if dbus_connection_send_with_reply_apiparam_1 be disconnected or when -PRON- try send unix file descriptor dbus_connection_send_with_reply_apiparam_1 do support -PRON']
['dbus_server_get_data_APIParam_1 is the dbus_server_get_data_APIParam_1.', 'dbus_server_get_data_apiparam_1 be dbus_server_get_data_apiparam_1']
['dbus_message_iter_append_basic_APIName returns FALSE if not enough memory.', 'dbus_message_iter_append_basic_apiname return false if enough memory']
['dbus_message_iter_get_fixed_array_APIParam_3 is number of elements in the block.', 'dbus_message_iter_get_fixed_array_apiparam_3 be number element block']
['dbus_message_iter_get_signature_APIName returns the contained signature, or NULL if out of memory.', 'dbus_message_iter_get_signature_apiname return contain signature , or null if out memory']
['Unlike dbus_message_iter_abandon_container_APIName , it is valid to call this function on an iterator that was initialized with DBUS_MESSAGE_ITER_INIT_CLOSED , or an iterator that was already closed or abandoned.', 'unlike dbus_message_iter_abandon_container_apiname , be valid call function iterator be initialize dbus_message_iter_init_close , or iterator be already close or abandon']
['dbus_server_set_new_connection_function_APIParam_3 is dbus_server_set_new_connection_function_APIParam_3 to pass to the new connection handler.', 'dbus_server_set_new_connection_function_apiparam_3 be dbus_server_set_new_connection_function_apiparam_3 pass connection handler']
['dbus_type_is_fixed_APIName returns FALSE if the type can occupy different lengths.', 'dbus_type_is_fixed_apiname return false if type can occupy different length']
['dbus_message_marshal_APIParam_1 is the DBusMessage.', 'dbus_message_marshal_apiparam_1 be dbusmessage']
['dbus_connection_set_allow_anonymous_APIParam_2 is whether to allow authentication as an anonymous user.', 'dbus_connection_set_allow_anonymous_apiparam_2 be whether allow authentication as anonymous user']
['dbus_message_iter_init_append_APIParam_2 is pointer to an iterator to initialize.', 'dbus_message_iter_init_append_apiparam_2 be pointer iterator initialize']
['dbus_bus_get_APIName returns a DBusConnection with new ref or NULL on dbus_bus_get_APIParam_2.', 'dbus_bus_get_apiname return dbusconnection ref or null dbus_bus_get_apiparam_2']
['The timeout stops firing when it is removed with the given dbus_connection_set_timeout_functions_APIParam_3.', 'timeout stop fire when be remove give dbus_connection_set_timeout_functions_apiparam_3']
['dbus_message_set_allow_interactive_authorization_APIParam_2 is TRUE if interactive authorization is acceptable.', 'dbus_message_set_allow_interactive_authorization_apiparam_2 be true if interactive authorization be acceptable']
['dbus_connection_set_timeout_functions_APIParam_1 is the dbus_connection_set_timeout_functions_APIParam_1.', 'dbus_connection_set_timeout_functions_apiparam_1 be dbus_connection_set_timeout_functions_apiparam_1']
['When using GLib, it would call g_main_context_wakeup_APIName.', 'when use glib , would call g_main_context_wakeup_apiname']
['This ID is normally used by clients to tell when two DBusConnection would be equivalent (because the dbus_server_get_id_APIParam_1 address passed to dbus_connection_open_APIName will have the same guid in the two cases).', 'identifi be normally use by client tell when two dbusconnection would be equivalent because dbus_server_get_id_apiparam_1 address pass dbus_connection_open_apiname have guid two case']
['Messages are locked when they enter the outgoing queue (dbus_connection_send_message_APIName), and the library complains if the dbus_message_lock_APIParam_1 is modified while locked.', 'message be lock when enter outgoing queue , library complain if dbus_message_lock_apiparam_1 be modify while lock']
['dbus_pending_call_cancel_APIParam_1 is the dbus_pending_call_cancel_APIParam_1 call.', 'dbus_pending_call_cancel_apiparam_1 be dbus_pending_call_cancel_apiparam_1 call']
['The given dbus_connection_register_fallback_APIParam_3 handles messages at or below the given dbus_connection_register_fallback_APIParam_2.', 'give dbus_connection_register_fallback_apiparam_3 handle message or below give dbus_connection_register_fallback_apiparam_2']
['dbus_connection_send_APIParam_1 is the dbus_connection_send_APIParam_1.', 'dbus_connection_send_apiparam_1 be dbus_connection_send_apiparam_1']
['dbus_pending_call_set_notify_APIParam_2 is notifier dbus_pending_call_set_notify_APIParam_2.', 'dbus_pending_call_set_notify_apiparam_2 be notifi dbus_pending_call_set_notify_apiparam_2']
['Skip to the next value on this "level".', 'skip next value level']
['The creator of these connections is responsible for calling dbus_connection_close_APIName prior to releasing the last reference, if the dbus_connection_close_APIParam_1 is not already disconnected.', 'creator connection be responsible call dbus_connection_close_apiname prior release last reference , if dbus_connection_close_apiparam_1 be already disconnect']
['The dbus_message_set_member_APIParam_2 name must contain only valid characters as defined in the D-Bus specification.', 'dbus_message_set_member_apiparam_2 name must contain only valid character as define d_bus specification']
['Moves an error dbus_move_error_APIParam_1 into dbus_move_error_APIParam_2, freeing dbus_move_error_APIParam_1 and overwriting dbus_move_error_APIParam_2.', 'move error dbus_move_error_apiparam_1 into dbus_move_error_apiparam_2 , free dbus_move_error_apiparam_1 overwrite dbus_move_error_apiparam_2']
["For shared connections (created with dbus_connection_open_APIName ) in a multithreaded application, you can't really make the registration calls yourself, because you don't know whether some other thread is also registering, and the bus will kick you off if you send two registration messages.", 'share connection multithreade application , -PRON- can really make registration call -PRON- , because -PRON- know whether other thread be register , bus kick -PRON- off if -PRON- send two registration message']
['A dbus_connection_get_is_connected_APIParam_1 may become disconnected when the remote application closes its end, or exits; a dbus_connection_get_is_connected_APIParam_1 may also be disconnected with dbus_connection_close_APIName .', 'dbus_connection_get_is_connected_apiparam_1 become disconnected when remote application close end , or exit ; dbus_connection_get_is_connected_apiparam_1 be disconnect dbus_connection_close_apiname']
['A disabled timeout should have no effect, and enabled timeout should be added to the main loop.', 'disabled timeout should have no effect , enable timeout should be add main loop']
['For security reasons, you can match arguments only up to DBUS_MAXIMUM_MATCH_RULE_ARG_NUMBER .', 'security reason , -PRON- can match argument only up dbus_maximum_match_rule_arg_number']
['dbus_connection_get_object_path_data_APIName returns FALSE if not enough memory.', 'dbus_connection_get_object_path_data_apiname return false if enough memory']
['Messages count toward the maximum until they are finalized.', 'message count toward maximum until be finalize']
['dbus_address_escape_value_APIParam_1 is the unescaped dbus_address_escape_value_APIParam_1.', 'dbus_address_escape_value_apiparam_1 be unescaped dbus_address_escape_value_apiparam_1']
['dbus_setenv_APIParam_2 is dbus_setenv_APIParam_2 of environment variable, or NULL to unset.', 'dbus_setenv_apiparam_2 be dbus_setenv_apiparam_2 environment variable , or null unset']
['For example, if the iterator is pointing at the start of "(ii)ii" (which is "a struct of two ints, followed by an int, followed by an int"), then "(ii)" would be returned.', 'example , if iterator be point start ii , then would be return']
['When these bytes are parsed, they may not add up to an entire message.', 'when byte be parse , add up entire message']
['The machine ID is preferred over the machine hostname, because the hostname is frequently set to "localhost.localdomain" and may also change at runtime.', 'machine identifier be prefer over machine hostname , because hostname be frequently set change runtime']
['dbus_connection_return_message_APIParam_2 is the dbus_connection_return_message_APIParam_2 from dbus_connection_borrow_message_APIName.', 'dbus_connection_return_message_apiparam_2 be dbus_connection_return_message_apiparam_2 dbus_connection_borrow_message_apiname']
['dbus_message_append_args_valist_APIParam_3 is value of first argument, then list of type/value pairs.', 'dbus_message_append_args_valist_apiparam_3 be value first argument , then list pair']
["If the passed-in slot is not -1, it's assumed to be already allocated, and its refcount is incremented.", 'if passed_in slot be 1 , be assume be already allocate , refcount be incremente']
['dbus_message_set_container_instance_APIParam_2 is the path or NULL to unset.', 'dbus_message_set_container_instance_apiparam_2 be path or null unset']
['Deallocates a global ID for connection data slots.', 'deallocate global identifi connection data slot']
['The iterator must currently be inside an array-typed value.', 'iterator must currently be inside array_typed value']
['dbus_set_error_APIParam_3 is printf-style dbus_set_error_APIParam_3 string.', 'dbus_set_error_apiparam_3 be printf_style dbus_set_error_apiparam_3 string']
['See the comments in the code or http://lists.freedesktop.org/archives/dbus/2007-July/tread.html#8144 if you encounter this issue and want to attempt writing a patch.', 'see comment code or http : # if -PRON- encounter issue want attempt writing patch']
['dbus_message_get_member_APIName returns the member name (should not be freed) or NULL.', 'dbus_message_get_member_apiname return member name or null']
['(Re-requesting a dbus_bus_request_name_APIParam_2 is useful if you want to change the DBUS_NAME_FLAG_ALLOW_REPLACEMENT or DBUS_NAME_FLAG_DO_NOT_QUEUE settings.)', 're_requesting dbus_bus_request_name_apiparam_2 be useful if -PRON- want change dbus_name_flag_allow_replacement or dbus_name_flag_do_not_queue setting']
['dbus_message_new_error_APIName returns a new error message object, free with dbus_message_unref_APIName.', 'dbus_message_new_error_apiname return error message object , free dbus_message_unref_apiname']
['This is important because even after disconnecting, you want to process any messages you received prior to the disconnect.', 'be important because even after disconnect , -PRON- want process message -PRON- receive prior disconnect']
['dbus_connection_send_preallocated_APIParam_1 is the dbus_connection_send_preallocated_APIParam_1.', 'dbus_connection_send_preallocated_apiparam_1 be dbus_connection_send_preallocated_apiparam_1']
['dbus_server_set_watch_functions_APIParam_4 is function to notify when the watch is enabled/disabled.', 'dbus_server_set_watch_functions_apiparam_4 be function notify when watch be']
['You MUST free all memory and release all reference counts returned to you by libdbus prior to calling dbus_shutdown_APIName .', 'PRON- must free memory release reference count return -PRON- by libdbus prior call dbus_shutdown_apiname']
["It's often easier to avoid explicitly starting services, and just send a method call to the service's bus dbus_bus_start_service_by_name_APIParam_2 instead.", 'be often easy avoid explicitly start service , just send method call service bus dbus_bus_start_service_by_name_apiparam_2 instead']
['Once this returns, the message is hosed and you have to start over building the whole message.', 'once return , message be hose -PRON- have start over build whole message']
['dbus_connection_set_unix_user_function_APIParam_2 is the predicate.', 'dbus_connection_set_unix_user_function_apiparam_2 be predicate']
['dbus_server_get_address_APIName returns the address or NULL if no memory.', 'dbus_server_get_address_apiname return address or null if no memory']
["If there's incoming raw data that has not yet been parsed, it is parsed, which may or may not result in adding messages to the incoming queue.", 'if incoming raw datum have yet parse , be parse , which or result add message incoming queue']
['Use dbus_connection_flush_APIName to block until all outgoing messages have been written to the underlying transport (such as a socket).', 'dbus_connection_flush_apiname block until outgoing message have write underlie transport such as socket']
['The returned string becomes invalid if the dbus_message_get_interface_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_interface_APIParam_1 data.', 'return string become invalid if dbus_message_get_interface_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_interface_apiparam_1 datum']
['An example is "type=\'signal\',sender=\'org.freedesktop.DBus\', interface=\'org.freedesktop.DBus\',member=\'Foo\', path=\'/bar/foo\',destination=\':452345.34\'" Possible keys you can match on are type, sender, interface, member, path, destination and numbered keys to match message args (keys are \'arg0\', \'arg1\', etc.).', 'example be type ignal , sender , interface , member foo , path , destination : possible key -PRON- can match be type , sender , interface , member , path , destination number key match message arg key be arg0 , arg1 , etc']
['dbus_connection_unref_APIParam_1 is the dbus_connection_unref_APIParam_1.', 'dbus_connection_unref_apiparam_1 be dbus_connection_unref_apiparam_1']
['So for int32 it should be a "dbus_int32_t*" and for string a "const char**".', 'so int32 should be dbus_int32_t string const char']
['To force the dbus_connection_send_APIParam_2 to be written, call dbus_connection_flush_APIName however it is not necessary to call dbus_connection_flush_APIName by hand; the dbus_connection_send_APIParam_2 will be sent the next time the main loop is run.', 'force dbus_connection_send_apiparam_2 be write , call dbus_connection_flush_apiname however be necessary call dbus_connection_flush_apiname by hand ; dbus_connection_send_apiparam_2 be send next time main loop be run']
['dbus_address_entry_get_method_APIName returns the method string of an address dbus_address_entry_get_method_APIParam_1.', 'dbus_address_entry_get_method_apiname return method string address dbus_address_entry_get_method_apiparam_1']
['Check an object dbus_validate_path_APIParam_1 for validity.', 'check object dbus_validate_path_apiparam_1 validity']
['This must be the first thing an application does when connecting to the message bus.', 'must be first thing application do when connect message bus']
['In particular, this will result in processing of the special Disconnected signal, which may result in a call to _exit_APIName, unless you have used dbus_connection_set_exit_on_disconnect_APIName to disable that behaviour.', 'particular , result processing special disconnected signal , which result call exit_apiname , unless -PRON- have use dbus_connection_set_exit_on_disconnect_apiname disable behaviour']
['Remember that a DBusServer represents only one mode of connecting, so e.g.', 'remember dbusserver represent only one mode connect , so e']
['dbus_signature_validate_APIParam_1 is a potentially invalid type dbus_signature_validate_APIParam_1.', 'dbus_signature_validate_apiparam_1 be potentially invalid type dbus_signature_validate_apiparam_1']
['Constructs a new message representing a signal emission.', 'construct message represent signal emission']
['dbus_signature_validate_APIParam_2 is dbus_signature_validate_APIParam_2 return.', 'dbus_signature_validate_apiparam_2 be dbus_signature_validate_apiparam_2 return']
['dbus_connection_get_outgoing_size_APIParam_1 is the dbus_connection_get_outgoing_size_APIParam_1.', 'dbus_connection_get_outgoing_size_apiparam_1 be dbus_connection_get_outgoing_size_apiparam_1']
['Gets the ID of the server address we are authenticated to, if this dbus_connection_get_server_id_APIParam_1 is on the client side.', 'get identifier server address -PRON- be authenticate , if dbus_connection_get_server_id_apiparam_1 be client side']
['Warning in C, given "int array[]", "&array == array" (the comp.lang.c FAQ says otherwise, but gcc and the FAQ don\'t agree).', 'warn c , give int array , array array faq say otherwise , but gcc faq agree']
['all DBusServer objects will have a slot with the given integer ID reserved.', 'dbusserver object have slot give integer identifier reserve']
['Stores a pointer on a DBusMessage , along with an optional function to be used for freeing the dbus_message_set_data_APIParam_3 when the dbus_message_set_data_APIParam_3 is set again, or when the dbus_message_set_data_APIParam_1 is finalized.', 'store pointer dbusmessage , along optional function be use free dbus_message_set_data_apiparam_3 when dbus_message_set_data_apiparam_3 be set again , or when dbus_message_set_data_apiparam_1 be finalize']
['The D-Bus specification describes the server ID and other IDs in a bit more detail.', 'd_bus specification describe server identifier other id bit more detail']
['dbus_malloc0_APIName memory is NOT safe to free with regular free_APIName from the C library.', 'dbus_malloc0_apiname memory be safe free regular free_apiname c library']
['dbus_server_set_timeout_functions_APIParam_4 is function to notify when the timeout is enabled/disabled.', 'dbus_server_set_timeout_functions_apiparam_4 be function notify when timeout be']
['dbus_realloc_APIName returns allocated dbus_realloc_APIParam_1, or NULL if the resize fails.', 'dbus_realloc_apiname return allocate dbus_realloc_apiparam_1 , or null if resize fail']
['dbus_message_new_method_call_APIParam_2 is object dbus_message_new_method_call_APIParam_2 the message should be sent to.', 'dbus_message_new_method_call_apiparam_2 be object dbus_message_new_method_call_apiparam_2 message should be send']
['The caller may NOT call dbus_connection_close_APIName on this connection; see dbus_connection_open_APIName and dbus_connection_close_APIName for details on that.', 'caller call dbus_connection_close_apiname connection ; see dbus_connection_open_apiname dbus_connection_close_apiname detail']
["Once a file descriptor becomes readable or writable, or an exception occurs, dbus_watch_handle_APIName should be called to notify the dbus_connection_set_watch_functions_APIParam_1 of the file descriptor's condition.", 'once file descriptor become readable or writable , or exception occur , dbus_watch_handle_apiname should be call notify dbus_connection_set_watch_functions_apiparam_1 file descriptor condition']
['dbus_bus_set_unique_name_APIParam_1 is the dbus_bus_set_unique_name_APIParam_1.', 'dbus_bus_set_unique_name_apiparam_1 be dbus_bus_set_unique_name_apiparam_1']
['dbus_connection_get_is_authenticated_APIName returns TRUE if the dbus_connection_get_is_authenticated_APIParam_1 was ever authenticated.', 'dbus_connection_get_is_authenticated_apiname return true if dbus_connection_get_is_authenticated_apiparam_1 be ever authenticate']
['dbus_connection_set_watch_functions_APIParam_5 is dbus_connection_set_watch_functions_APIParam_5 to pass to dbus_connection_set_watch_functions_APIParam_2 and dbus_connection_set_watch_functions_APIParam_3.', 'dbus_connection_set_watch_functions_apiparam_5 be dbus_connection_set_watch_functions_apiparam_5 pass dbus_connection_set_watch_functions_apiparam_2 dbus_connection_set_watch_functions_apiparam_3']
['In this case, you should initialize a sub-iterator with dbus_signature_iter_recurse_APIName to parse the container type.', 'case , -PRON- should initialize sub_iterator dbus_signature_iter_recurse_apiname parse container type']
['dbus_message_get_reply_serial_APIName returns the reply serial.', 'dbus_message_get_reply_serial_apiname return reply serial']
['Retrieves data previously set with dbus_message_set_data_APIName .', 'retrieve datum previously set dbus_message_set_data_apiname']
["The queue means you don't need to manually watch for the current owner to disappear and then request the dbus_bus_request_name_APIParam_2 again.", 'queue mean -PRON- need manually watch current owner disappear then request dbus_bus_request_name_apiparam_2 again']
['Existing data stored on existing DBusConnection objects will be freed when the connection is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot).', 'exist datum store exist dbusconnection object be free when connection be finalize , but be retrieve only be replace if someone else reallocate slot']
['Constructs a new message of the given message type.', 'construct message give message type']
['dbus_bus_get_id_APIName returns the bus ID or NULL if dbus_bus_get_id_APIParam_2 is set.', 'dbus_bus_get_id_apiname return bus identifier or null if dbus_bus_get_id_apiparam_2 be set']
['dbus_message_append_args_valist_APIName returns TRUE on success.', 'dbus_message_append_args_valist_apiname return true success']
['dbus_timeout_get_interval_APIParam_1 is the DBusTimeout object.', 'dbus_timeout_get_interval_apiparam_1 be dbustimeout object']
['This feature is used instead of simply adding/removing the timeout because enabling/disabling can be done without memory allocation.', 'feature be use instead simply timeout because can be do without memory allocation']
['dbus_bus_name_has_owner_APIName returns TRUE if the dbus_bus_name_has_owner_APIParam_2 exists, FALSE if not or on dbus_bus_name_has_owner_APIParam_3.', 'dbus_bus_name_has_owner_apiname return true if dbus_bus_name_has_owner_apiparam_2 exist , false if or dbus_bus_name_has_owner_apiparam_3']
['dbus_timeout_get_data_APIParam_1 is the DBusTimeout object.', 'dbus_timeout_get_data_apiparam_1 be dbustimeout object']
['dbus_connection_register_fallback_APIParam_4 is data to pass to functions in the dbus_connection_register_fallback_APIParam_3.', 'dbus_connection_register_fallback_apiparam_4 be data pass function dbus_connection_register_fallback_apiparam_3']
['If no memory can be allocated for the dbus_set_error_APIParam_1 message, an out-of-memory dbus_set_error_APIParam_1 message will be set instead.', 'if no memory can be allocate dbus_set_error_apiparam_1 message , out_of_memory dbus_set_error_apiparam_1 message be set instead']
['Sets the watch functions for the dbus_server_set_watch_functions_APIParam_1.', 'set watch function dbus_server_set_watch_functions_apiparam_1']
['dbus_validate_error_name_APIParam_1 is a potentially invalid.', 'dbus_validate_error_name_apiparam_1 be potentially invalid']
['dbus_move_error_APIParam_1 is reinitialized to an empty error.', 'dbus_move_error_apiparam_1 be reinitialize empty error']
['dbus_watch_get_socket_APIName returns the socket to dbus_watch_get_socket_APIParam_1.', 'dbus_watch_get_socket_apiname return socket dbus_watch_get_socket_apiparam_1']
['Note that canceling a dbus_pending_call_cancel_APIParam_1 call will not simulate a timed-out call; if a call times out, then a timeout error reply is received.', 'note cancel dbus_pending_call_cancel_apiparam_1 call simulate timed_out call ; if call time out , then timeout error reply be receive']
['dbus_shutdown_APIName may also be useful if you want to dlopen_APIName libdbus instead of linking to it, and want to be able to unload the library again.', 'dbus_shutdown_apiname be useful if -PRON- want dlopen_apiname libdbus instead link , want be able unload library again']
['dbus_message_append_args_APIName returns TRUE on success.', 'dbus_message_append_args_apiname return true success']
['dbus_pending_call_set_data_APIParam_2 is the dbus_pending_call_set_data_APIParam_2 number.', 'dbus_pending_call_set_data_apiparam_2 be dbus_pending_call_set_data_apiparam_2 number']
['dbus_connection_pop_message_APIName returns the first-received message from the incoming message queue, removing it from the queue.', 'dbus_connection_pop_message_apiname return first_received message incoming message queue , remove queue']
['Gets a connection to a remote dbus_connection_open_APIParam_1.', 'get connection remote dbus_connection_open_apiparam_1']
['dbus_signature_iter_get_signature_APIName returns current signature; or NULL if no memory.', 'dbus_signature_iter_get_signature_apiname return current signature ; or null if no memory']
['Why would you want to know how many bytes are in the array as marshaled in the wire protocol?', 'why would -PRON- want know how many byte be array as marshal wire protocol']
["Todo: This function can't be used in programs that try to recover from OOM errors.", 'todo : function can be use program try recover oom error']
['The returned string must be freed with dbus_free_APIName .', 'return string must be free dbus_free_apiname']
['However, it is not valid to call this function on uninitialized memory.', 'however , be valid call function uninitialized memory']
["It's safe to close a dbus_connection_close_APIParam_1 more than once; all calls after the first do nothing.", 'be safe close dbus_connection_close_apiparam_1 more than once ; call after first nothing']
['Usually you want to use dbus_message_new_method_call_APIName , dbus_message_new_method_return_APIName , dbus_message_new_signal_APIName , or dbus_message_new_error_APIName instead.', 'usually -PRON- want dbus_message_new_method_call_apiname , dbus_message_new_method_return_apiname , dbus_message_new_signal_apiname , or dbus_message_new_error_apiname instead']
['If you send the method calls yourself, call dbus_bus_set_unique_name_APIName with the unique bus name you get from the bus.', 'if -PRON- send method call -PRON- , call dbus_bus_set_unique_name_apiname unique bus name -PRON- get bus']
['dbus_connection_get_windows_user_APIName returns TRUE if user is available (returned value may be NULL anyway if no memory).', 'dbus_connection_get_windows_user_apiname return true if user be available return value be null anyway if no memory']
['dbus_connection_register_object_path_APIParam_3 is the virtual table.', 'dbus_connection_register_object_path_apiparam_3 be virtual table']
['Registers a dbus_bus_register_APIParam_1 with the bus.', 'register dbus_bus_register_apiparam_1 bus']
["Remember that NULL can always be passed instead of a DBusError*, if you don't care about having an dbus_signature_validate_APIParam_2 name and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_signature_validate_apiparam_2 name message']
['dbus_connection_get_is_connected_APIParam_1 is the dbus_connection_get_is_connected_APIParam_1.', 'dbus_connection_get_is_connected_apiparam_1 be dbus_connection_get_is_connected_apiparam_1']
['If two threads are both sending the registration message, there is no mechanism in libdbus itself to avoid sending it twice.', 'if two thread be both send registration message , be no mechanism libdbus avoid send twice']
['Method calls start a service to handle them by default unless you call dbus_message_set_auto_start_APIName to disable this behavior.', 'method call start service handle -PRON- by default unless -PRON- call dbus_message_set_auto_start_apiname disable behavior']
['The dbus_timeout_handle_APIName should be called each time this interval elapses, starting after it elapses once.', 'dbus_timeout_handle_apiname should be call each time interval elapse , start after elapse once']
['dbus_connection_read_write_dispatch_APIParam_2 is max time to block or -1 for infinite.', 'dbus_connection_read_write_dispatch_apiparam_2 be max time block or # infinite']
['Checks if an iterator has any more fields.', 'check if iterator have more field']
['dbus_server_set_auth_mechanisms_APIParam_1 is the dbus_server_set_auth_mechanisms_APIParam_1.', 'dbus_server_set_auth_mechanisms_apiparam_1 be dbus_server_set_auth_mechanisms_apiparam_1']
['Sends a dbus_connection_send_with_reply_and_block_APIParam_2 and blocks a certain time period while waiting for a reply.', 'send dbus_connection_send_with_reply_and_block_apiparam_2 block certain time period while wait reply']
['In a single-threaded application you can register by hand instead of using dbus_bus_register_APIName , as long as you check dbus_bus_get_unique_name_APIName to see if a unique name has already been stored by another thread before you send the registration messages.', 'single_threaded application -PRON- can register by hand instead use dbus_bus_register_apiname , as long as -PRON- check dbus_bus_get_unique_name_apiname see if unique name have already store by another thread before -PRON- send registration message']
['All connections returned by dbus_bus_get_APIName or dbus_bus_get_private_APIName have been successfully registered.', 'connection return by dbus_bus_get_apiname or dbus_bus_get_private_apiname have successfully register']
['dbus_connection_set_unix_user_function_APIParam_3 is dbus_connection_set_unix_user_function_APIParam_3 to pass to the predicate.', 'dbus_connection_set_unix_user_function_apiparam_3 be dbus_connection_set_unix_user_function_apiparam_3 pass predicate']
['dbus_address_entry_get_method_APIName returns a string describing the method.', 'dbus_address_entry_get_method_apiname return string describe method']
['If it is not received, NULL is returned and the dbus_connection_send_with_reply_and_block_APIParam_4 is set to DBUS_ERROR_NO_REPLY .', 'if be receive , null be return dbus_connection_send_with_reply_and_block_apiparam_4 be set dbus_error_no_reply']
['dbus_message_iter_get_array_len_APIName returns the number of bytes in the array.', 'dbus_message_iter_get_array_len_apiname return number byte array']
['dbus_message_set_reply_serial_APIParam_1 is the dbus_message_set_reply_serial_APIParam_1.', 'dbus_message_set_reply_serial_apiparam_1 be dbus_message_set_reply_serial_apiparam_1']
['Connects to a bus daemon and registers the client with it.', 'connect bus daemon register client']
['If you need them without this flag set, make sure to unset it with fcntl_APIName.', 'if -PRON- need -PRON- without flag set , make sure unset fcntl_apiname']
['This is intended to be used in error cleanup code paths, similar to this pattern: DBusMessageIter outer = DBUS_MESSAGE_ITER_INIT_CLOSED; DBusMessageIter inner = DBUS_MESSAGE_ITER_INIT_CLOSED; dbus_bool_t result = FALSE; if (!dbus_message_iter_open_container (iter, ..., &outer)) goto out; if (!dbus_message_iter_open_container (&outer, ..., &inner)) goto out; if (!dbus_message_iter_append_basic (&inner, ...)) goto out; if (!dbus_message_iter_close_container (&outer, ..., &inner)) goto out; if (!dbus_message_iter_close_container (iter, ..., &outer)) goto out; result = TRUE; out: dbus_message_iter_abandon_container_if_open_APIName (&outer, &inner); dbus_message_iter_abandon_container_if_open_APIName (iter, &outer); return result;   dbus_message_iter_abandon_container_if_open_APIParam_1 is the append iterator.', 'be intend be use error cleanup code path , similar pattern : dbusmessageiter outer dbus_message_iter_init_close ; dbusmessageiter inner dbus_message_iter_init_close ; dbus_bool_t result false ; if goto out ; if goto out ; if goto out ; if goto out ; if goto out ; result true ; out : dbus_message_iter_abandon_container_if_open_apiname ; dbus_message_iter_abandon_container_if_open_apiname ; return result ; dbus_message_iter_abandon_container_if_open_apiparam_1 be append iterator']
['The error name must be a valid error name according to the syntax given in the D-Bus specification.', 'error name must be valid error name accord syntax give d_bus specification']
['dbus_message_append_args_valist_APIParam_2 is type of first argument.', 'dbus_message_append_args_valist_apiparam_2 be type first argument']
['dbus_connection_get_dispatch_status_APIParam_1 is the dbus_connection_get_dispatch_status_APIParam_1.', 'dbus_connection_get_dispatch_status_apiparam_1 be dbus_connection_get_dispatch_status_apiparam_1']
["These functions are responsible for making the application's main loop aware of file descriptors that need to be monitored for events, using select_APIName or poll_APIName.", 'function be responsible make application main loop aware file descriptor need be monitor event , use select_apiname or poll_apiname']
['See dbus_connection_open_private_APIName for more details on when to close and unref this connection.', 'see dbus_connection_open_private_apiname more detail when close unref connection']
['dbus_connection_send_preallocated_APIParam_2 is the dbus_connection_send_preallocated_APIParam_2 resources.', 'dbus_connection_send_preallocated_apiparam_2 be dbus_connection_send_preallocated_apiparam_2 resource']
['On UNIX this is preferred to dbus_watch_get_socket_APIName since it works with more kinds of DBusWatch .', 'unix be prefer dbus_watch_get_socket_apiname since work more kind dbuswatch']
['Sets a flag indicating that the dbus_message_set_no_reply_APIParam_1 does not want a reply; if this flag is set, the other end of the connection may (but is not required to) optimize by not sending method return or error replies.', 'set flag indicating dbus_message_set_no_reply_apiparam_1 do want reply ; if flag be set , other end connection optimize by send method return or error reply']
['dbus_message_set_data_APIParam_2 is the dbus_message_set_data_APIParam_2 number.', 'dbus_message_set_data_apiparam_2 be dbus_message_set_data_apiparam_2 number']
["No one can get at the message while its borrowed, so return it as quickly as possible and don't keep a reference to it after returning it.", 'no one can get message while borrow , so return as quickly as possible keep reference after return']
['The caller does not own a reference to the returned message, and must either return it using dbus_connection_return_message_APIName or keep it after calling dbus_connection_steal_borrowed_message_APIName .', 'caller do reference return message , must either return use dbus_connection_return_message_apiname or keep after call dbus_connection_steal_borrowed_message_apiname']
['dbus_message_iter_get_fixed_array_APIParam_1 is the iterator.', 'dbus_message_iter_get_fixed_array_apiparam_1 be iterator']
['Abandons creation of a contained-typed value and frees resources created by dbus_message_iter_open_container_APIName .', 'abandon creation contained_typed value free resource create by dbus_message_iter_open_container_apiname']
["There isn't a convenience wrapper, but you can invoke org.freedesktop.DBus.Peer.GetMachineId on any peer to get the machine ID on the other end.", 'be convenience wrapper , but -PRON- can invoke peer get machine identifi other end']
['Gets the error name (DBUS_MESSAGE_TYPE_ERROR only) or NULL if none.', 'get error name or null if none']
['Frees a block of dbus_free_APIParam_1 previously allocated by dbus_malloc_APIName or dbus_malloc0_APIName .', 'free block dbus_free_apiparam_1 previously allocate by dbus_malloc_apiname or dbus_malloc0_apiname']
['The given dbus_connection_try_register_fallback_APIParam_3 handles messages at or below the given dbus_connection_try_register_fallback_APIParam_2.', 'give dbus_connection_try_register_fallback_apiparam_3 handle message or below give dbus_connection_try_register_fallback_apiparam_2']
['Ownership of the reply message passes to the caller.', 'ownership reply message pass caller']
['dbus_bus_start_service_by_name_APIName returns TRUE if the activation succeeded, FALSE if not.', 'dbus_bus_start_service_by_name_apiname return true if activation succeed , false if']
['dbus_bus_release_name_APIName returns a result code, -1 if dbus_bus_release_name_APIParam_3 is set.', 'dbus_bus_release_name_apiname return result code , # if dbus_bus_release_name_apiparam_3 be set']
['dbus_bus_request_name_APIParam_4 is location to store the dbus_bus_request_name_APIParam_4.', 'dbus_bus_request_name_apiparam_4 be location store dbus_bus_request_name_apiparam_4']
['dbus_signature_iter_init_APIParam_1 is pointer to an iterator to initialize.', 'dbus_signature_iter_init_apiparam_1 be pointer iterator initialize']
['It may use the error DBUS_ERROR_INTERACTIVE_AUTHORIZATION_REQUIRED to signal that authorization failed, but could have succeeded if this flag had been used.', 'error dbus_error_interactive_authorization_require signal authorization fail , but could have succeed if flag have use']
['Todo: some FIXME in here about handling DBUS_HANDLER_RESULT_NEED_MEMORY   dbus_connection_dispatch_APIParam_1 is the dbus_connection_dispatch_APIParam_1.', 'todo : fixme here about handle dbus_handler_result_need_memory dbus_connection_dispatch_apiparam_1 be dbus_connection_dispatch_apiparam_1']
['Gets the interface this dbus_message_get_interface_APIParam_1 is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted from (for DBUS_MESSAGE_TYPE_SIGNAL).', 'get interface dbus_message_get_interface_apiparam_1 be send or emit dbus_message_type_signal']
['dbus_connection_flush_APIName should only be used, for example, if the application was expected to exit before running the main loop.', 'dbus_connection_flush_apiname should only be use , example , if application be expect exit before run main loop']
['The loop terminates when the last message from the dbus_connection_read_write_dispatch_APIParam_1 (the disconnected signal) is processed.', 'loop terminate when last message dbus_connection_read_write_dispatch_apiparam_1 be process']
["So don't set this unless you are the message bus.", 'so set unless -PRON- be message bus']
['The dbus_message_iter_get_basic_APIParam_2 argument should be the address of a location to store the returned dbus_message_iter_get_basic_APIParam_2.', 'dbus_message_iter_get_basic_apiparam_2 argument should be address location store return dbus_message_iter_get_basic_apiparam_2']
['dbus_connection_open_private_APIName returns new connection, or NULL on failure.', 'dbus_connection_open_private_apiname return connection , or null failure']
['all DBusConnection objects will have a slot with the given integer ID reserved.', 'dbusconnection object have slot give integer identifier reserve']
['dbus_message_new_method_call_APIParam_1 is name that the message should be sent to or NULL.', 'dbus_message_new_method_call_apiparam_1 be name message should be send or null']
['On success, you are required to append the contents of the container using the returned sub-iterator, and then call dbus_message_iter_close_container_APIName .', 'success , -PRON- be require append content container use return sub_iterator , then call dbus_message_iter_close_container_apiname']
['DBUS_NAME_FLAG_ALLOW_REPLACEMENT means that another requestor of the dbus_bus_request_name_APIParam_2 can take it away from you by specifying DBUS_NAME_FLAG_REPLACE_EXISTING .', 'dbus_name_flag_allow_replacement mean another requestor dbus_bus_request_name_apiparam_2 can take away -PRON- by specify dbus_name_flag_replace_existing']
['Convenience function for returning the element type of an array; This function allows you to avoid initializing a sub-iterator and getting its current type.', 'convenience function return element type array ; function allow -PRON- avoid initialize sub_iterator get current type']
['dbus_connection_get_unix_process_id_APIParam_2 is return location for the process ID.', 'dbus_connection_get_unix_process_id_apiparam_2 be return location process identifier']
['Checks if the dbus_message_has_path_APIParam_1 has a particular object dbus_message_has_path_APIParam_2.', 'check if dbus_message_has_path_apiparam_1 have particular object dbus_message_has_path_apiparam_2']
['Moves the iterator to the next field, if any.', 'move iterator next field , if']
['See dbus_try_get_local_machine_id_APIName .', 'see dbus_try_get_local_machine_id_apiname']
['dbus_connection_get_outgoing_unix_fds_APIParam_1 is the dbus_connection_get_outgoing_unix_fds_APIParam_1.', 'dbus_connection_get_outgoing_unix_fds_apiparam_1 be dbus_connection_get_outgoing_unix_fds_apiparam_1']
['dbus_pending_call_steal_reply_APIParam_1 is the dbus_pending_call_steal_reply_APIParam_1 call.', 'dbus_pending_call_steal_reply_apiparam_1 be dbus_pending_call_steal_reply_apiparam_1 call']
['If an dbus_connection_send_with_reply_and_block_APIParam_4 reply is received, it is converted to a DBusError and returned as an dbus_connection_send_with_reply_and_block_APIParam_4, then the reply dbus_connection_send_with_reply_and_block_APIParam_2 is deleted and NULL is returned.', 'if dbus_connection_send_with_reply_and_block_apiparam_4 reply be receive , be convert dbuserror return as dbus_connection_send_with_reply_and_block_apiparam_4 , then reply dbus_connection_send_with_reply_and_block_apiparam_2 be delete null be return']
['Gets the object dbus_message_get_path_decomposed_APIParam_2 this dbus_message_get_path_decomposed_APIParam_1 is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted from (for DBUS_MESSAGE_TYPE_SIGNAL) in a decomposed format (one array element per dbus_message_get_path_decomposed_APIParam_2 component).', 'get object dbus_message_get_path_decomposed_apiparam_2 dbus_message_get_path_decomposed_apiparam_1 be send or emit decompose format one array element per dbus_message_get_path_decomposed_apiparam_2 component']
['dbus_message_iter_close_container_APIName returns FALSE if not enough memory.', 'dbus_message_iter_close_container_apiname return false if enough memory']
['The message dbus_message_iter_get_fixed_array_APIParam_1 should be "in" the array (that is, you recurse into the array, and then you call dbus_message_iter_get_fixed_array_APIName on the "sub-iterator" created by dbus_message_iter_recurse_APIName ).', 'message dbus_message_iter_get_fixed_array_apiparam_1 should be array be , -PRON- recurse into array , then -PRON- call dbus_message_iter_get_fixed_array_apiname sub_iterator create by dbus_message_iter_recurse_apiname']
['dbus_message_marshal_APIParam_3 is the location to save the length of the marshalled form to.', 'dbus_message_marshal_apiparam_3 be location save length marshal form']
['Specifies the maximum number of unix fds a message on this dbus_connection_set_max_message_unix_fds_APIParam_1 is allowed to receive.', 'specifie maximum number unix fds message dbus_connection_set_max_message_unix_fds_apiparam_1 be allow receive']
['The incoming data buffer is filled when the dbus_connection_dispatch_APIParam_1 reads from its underlying transport (such as a socket).', 'incoming data buffer be fill when dbus_connection_dispatch_apiparam_1 read underlie transport such as socket']
["The function will never fail for other reasons; even if the dbus_connection_send_APIParam_1 is disconnected, you can queue an outgoing dbus_connection_send_APIParam_2, though obviously it won't be sent.", 'function never fail other reason ; even if dbus_connection_send_apiparam_1 be disconnected , -PRON- can queue outgoing dbus_connection_send_apiparam_2 , though obviously be send']
['Warning if the dbus_connection_send_with_reply_APIParam_1 is disconnected or you try to send Unix file descriptors on a dbus_connection_send_with_reply_APIParam_1 that does not support them, the DBusPendingCall will be set to NULL , so be careful with this.', 'warn if dbus_connection_send_with_reply_apiparam_1 be disconnected or -PRON- try send unix file descriptor dbus_connection_send_with_reply_apiparam_1 do support -PRON- , dbuspendingcall be set null , so be careful']
["The message's serial number is provided by the application sending the dbus_message_get_serial_APIParam_1 and is used to identify replies to this dbus_message_get_serial_APIParam_1.", 'message serial number be provide by application send dbus_message_get_serial_apiparam_1 be use identify reply dbus_message_get_serial_apiparam_1']
['The basic types are the non-container types such as integer and string.', 'basic type be non_container type such as integer string']
["Otherwise, you have to iterate over the container's contents one dbus_message_iter_get_basic_APIParam_2 at a time.", 'otherwise , -PRON- have iterate over container content one dbus_message_iter_get_basic_apiparam_2 time']
['Closes a private dbus_connection_close_APIParam_1, so no further data can be sent or received.', 'close private dbus_connection_close_apiparam_1 , so no further datum can be send or receive']
["Usually you don't want to call this.", 'usually -PRON- want call']
['dbus_connection_remove_filter_APIParam_2 is the handler to remove.', 'dbus_connection_remove_filter_apiparam_2 be handler remove']
['Frees a NULL -terminated array of address dbus_address_entries_free_APIParam_1.', 'free null terminate array address dbus_address_entries_free_apiparam_1']
['Sets the timeout functions for the dbus_connection_set_timeout_functions_APIParam_1.', 'set timeout function dbus_connection_set_timeout_functions_apiparam_1']
['dbus_server_set_data_APIParam_3 is the dbus_server_set_data_APIParam_3 to store.', 'dbus_server_set_data_apiparam_3 be dbus_server_set_data_apiparam_3 store']
['Types include DBUS_MESSAGE_TYPE_METHOD_CALL , DBUS_MESSAGE_TYPE_SIGNAL , and so forth.', 'type include dbus_message_type_method_call , dbus_message_type_signal , so forth']
['dbus_validate_bus_name_APIParam_2 is dbus_validate_bus_name_APIParam_2 return.', 'dbus_validate_bus_name_apiparam_2 be dbus_validate_bus_name_apiparam_2 return']
['dbus_message_get_member_APIName returns NULL if none.', 'dbus_message_get_member_apiname return null if none']
['dbus_message_iter_append_fixed_array_APIParam_1 is the append iterator.', 'dbus_message_iter_append_fixed_array_apiparam_1 be append iterator']
['Third, if the message is a method call it is forwarded to any registered object path handlers added with dbus_connection_register_object_path_APIName or dbus_connection_register_fallback_APIName .', 'third , if message be method call be forward register object path handler add dbus_connection_register_object_path_apiname or dbus_connection_register_fallback_apiname']
['If you pass non- NULL for the dbus_bus_add_match_APIParam_3 this function will block until it gets a reply.', 'if -PRON- pass non null dbus_bus_add_match_apiparam_3 function block until get reply']
['dbus_server_free_data_slot_APIParam_1 is address of the slot to deallocate.', 'dbus_server_free_data_slot_apiparam_1 be address slot deallocate']
['dbus_connection_set_watch_functions_APIName returns FALSE on failure (no memory).', 'dbus_connection_set_watch_functions_apiname return false failure no memory']
['In addition to those types, arrays of string, object path, and signature are supported; but these are returned as allocated memory and must be freed with dbus_free_string_array_APIName , while the other types are returned as const references.', 'addition type , arrays string , object path , signature be support ; but be return as allocate memory must be free dbus_free_string_array_apiname , while other type be return as const reference']
['See dbus_message_new_error_APIName for details - this function is the same aside from the printf formatting.', 'see dbus_message_new_error_apiname detail function be aside printf formatting']
['Check that a type dbus_signature_validate_single_APIParam_1 is both valid and contains exactly one complete type.', 'check type dbus_signature_validate_single_apiparam_1 be both valid contain exactly one complete type']
['dbus_connection_list_registered_APIParam_1 is the dbus_connection_list_registered_APIParam_1.', 'dbus_connection_list_registered_apiparam_1 be dbus_connection_list_registered_apiparam_1']
['dbus_message_iter_append_basic_APIParam_2 is the dbus_message_iter_append_basic_APIParam_2 of the.', 'dbus_message_iter_append_basic_apiparam_2 be dbus_message_iter_append_basic_apiparam_2']
['If it is authenticated as a specific user, then this returns FALSE .', 'if be authenticate as specific user , then return false']
['If the open fails, the function returns NULL , and provides a reason for the failure in the dbus_connection_open_APIParam_2 parameter.', 'if open fail , function return null , provide reason failure dbus_connection_open_apiparam_2 parameter']
['If the dispatch status is DBUS_DISPATCH_DATA_REMAINS , then dbus_connection_dispatch_APIName needs to be called to process incoming messages.', 'if dispatch status be dbus_dispatch_data_remains , then dbus_connection_dispatch_apiname need be call process incoming message']
['Sets the unique name of the dbus_bus_set_unique_name_APIParam_1, as assigned by the message bus.', 'set unique name dbus_bus_set_unique_name_apiparam_1 , as assign by message bus']
["Because this function does not copy the dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_2 or dbus_set_error_const_APIParam_3, you must ensure the dbus_set_error_const_APIParam_2 and dbus_set_error_const_APIParam_3 are global data that won't be freed.", 'because function do copy dbus_set_error_const_apiparam_1 dbus_set_error_const_apiparam_2 or dbus_set_error_const_apiparam_3 , -PRON- must ensure dbus_set_error_const_apiparam_2 dbus_set_error_const_apiparam_3 be global datum be free']
['If not enabled, it should not be polled by the main loop.', 'if enable , should be poll by main loop']
['But this has to be implemented in bus/driver.c and dbus/dbus-bus.c , and is pointless anyway since on Windows we only use the session bus for now.', 'but have be implement , be pointless anyway since window -PRON- only session bus now']
['Tests whether a certain dbus_connection_can_send_type_APIParam_2 can be send via the dbus_connection_can_send_type_APIParam_1.', 'test whether certain dbus_connection_can_send_type_apiparam_2 can be send via dbus_connection_can_send_type_apiparam_1']
['You can get the machine ID of a remote application by invoking the method GetMachineId from interface org.freedesktop.DBus.Peer.', 'PRON- can get machine identifi remote application by invoke method getmachineid interface']
['dbus_address_unescape_value_APIParam_1 is the escaped dbus_address_unescape_value_APIParam_1.', 'dbus_address_unescape_value_apiparam_1 be escape dbus_address_unescape_value_apiparam_1']
['Since D-Bus 1.7 it is safe to call this function from any thread, any number of times (but it must be called before any other libdbus API is used).', 'since d_bus # be safe call function thread , number time but must be call before other libdbus api be use']
['Initializes a DBusMessageIter for reading the arguments of the dbus_message_iter_init_APIParam_1 passed in.', 'initialize dbusmessageiter read argument dbus_message_iter_init_apiparam_1 pass']
['If you use dbus_bus_register_APIName however, there is a lock that keeps both apps from registering at the same time.', 'if -PRON- dbus_bus_register_apiname however , be lock keep both app register time']
['Note that when a watch is added, it may not be enabled.', 'note when watch be add , be enable']
['The path must contain only valid characters for an object path as defined in the D-Bus specification.', 'path must contain only valid character object path as define d_bus specification']
["Be sure you have somehow checked that dbus_message_iter_get_arg_type_APIName matches the type you are expecting, or you'll crash when you try to use an integer as a string or something.", 'be sure -PRON- have somehow check dbus_message_iter_get_arg_type_apiname match type -PRON- be expect , or -PRON- will crash when -PRON- try integer as string or something']
["Todo: we don't run filters on messages while blocking without entering the main loop, since filters are run as part of dbus_connection_dispatch_APIName .", 'todo : -PRON- run filter message while block without enter main loop , since filter be run as part dbus_connection_dispatch_apiname']
['dbus_server_get_address_APIName returns the address of the dbus_server_get_address_APIParam_1, as a newly-allocated string which must be freed by the caller.', 'dbus_server_get_address_apiname return address dbus_server_get_address_apiparam_1 , as newly_allocated string which must be free by caller']
['dbus_type_is_container_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID.', 'dbus_type_is_container_apiparam_1 be either valid type_code or dbus_type_invalid']
["One implication of this is that calling dbus_shutdown_APIName from a library is almost certainly wrong, since you don't know what the rest of the app is up to.", 'one implication be call dbus_shutdown_apiname library be almost certainly wrong , since -PRON- know what rest app be up']
['dbus_connection_get_socket_APIName returns TRUE if dbus_connection_get_socket_APIParam_2 is successfully obtained.', 'dbus_connection_get_socket_apiname return true if dbus_connection_get_socket_apiparam_2 be successfully obtain']
['The given dbus_connection_try_register_object_path_APIParam_3 handles messages sent to exactly the given dbus_connection_try_register_object_path_APIParam_2.', 'give dbus_connection_try_register_object_path_apiparam_3 handle message send exactly give dbus_connection_try_register_object_path_apiparam_2']
['dbus_bus_register_APIParam_1 is the dbus_bus_register_APIParam_1.', 'dbus_bus_register_apiparam_1 be dbus_bus_register_apiparam_1']
['Check a bus dbus_validate_bus_name_APIParam_1 for validity.', 'check bus dbus_validate_bus_name_apiparam_1 validity']
['dbus_message_is_method_call_APIParam_1 is the dbus_message_is_method_call_APIParam_1.', 'dbus_message_is_method_call_apiparam_1 be dbus_message_is_method_call_apiparam_1']
['dbus_connection_get_dispatch_status_APIName returns current dispatch status.', 'dbus_connection_get_dispatch_status_apiname return current dispatch status']
['dbus_pending_call_get_data_APIName and dbus_pending_call_set_data_APIName may no longer be used with this slot.', 'dbus_pending_call_get_data_apiname dbus_pending_call_set_data_apiname no longer be use slot']
['dbus_connection_set_wakeup_main_function_APIParam_1 is the dbus_connection_set_wakeup_main_function_APIParam_1.', 'dbus_connection_set_wakeup_main_function_apiparam_1 be dbus_connection_set_wakeup_main_function_apiparam_1']
['dbus_server_set_timeout_functions_APIParam_6 is function to be called to free the dbus_server_set_timeout_functions_APIParam_5.', 'dbus_server_set_timeout_functions_apiparam_6 be function be call free dbus_server_set_timeout_functions_apiparam_5']
['Gets the dbus_timeout_get_interval_APIParam_1 interval.', 'get dbus_timeout_get_interval_apiparam_1 interval']
['For example, given the address "tcp:host=example.com,port=8073" if you asked for the dbus_address_entry_get_value_APIParam_2 "host" you would get the value "example.com" The returned value is already unescaped.', 'example , give address tcp : host , port 8073 if -PRON- ask dbus_address_entry_get_value_apiparam_2 host -PRON- would get value return value be already unescaped']
['Filters are run in the order that they were added.', 'filter be run order be add']
['This is not a good idea, just go ahead and provide a useful dbus_set_error_APIParam_1 message.', 'be good idea , just go ahead provide useful dbus_set_error_apiparam_1 message']
['dbus_type_is_basic_APIName returns TRUE if type is basic.', 'dbus_type_is_basic_apiname return true if type be basic']
['dbus_message_iter_append_fixed_array_APIName (&iter, DBUS_TYPE_INT32 , &v_ARRAY, 3)) fprintf (stderr, "No memory!\\n" ); For strings it works to write const char *array = "Hello" and then use &array though.', 'dbus_message_iter_append_fixed_array_apiname fprintf ; string work write const char array hello then array though']
['Decrements the reference count of a DBusMessage , freeing the dbus_message_unref_APIParam_1 if the count reaches 0.   dbus_message_unref_APIParam_1 is the dbus_message_unref_APIParam_1 See also dbus_message_ref.', 'decrement reference count dbusmessage , free dbus_message_unref_apiparam_1 if count reach # dbus_message_unref_apiparam_1 be dbus_message_unref_apiparam_1 see dbus_message_ref']
['Check a string for validity.', 'check string validity']
['dbus_connection_get_adt_audit_session_data_APIParam_1 is the dbus_connection_get_adt_audit_session_data_APIParam_1.', 'dbus_connection_get_adt_audit_session_data_apiparam_1 be dbus_connection_get_adt_audit_session_data_apiparam_1']
['dbus_bus_get_unix_user_APIParam_1 is the dbus_bus_get_unix_user_APIParam_1.', 'dbus_bus_get_unix_user_apiparam_1 be dbus_bus_get_unix_user_apiparam_1']
['The returned user string has to be freed with dbus_free_APIName .', 'return user string have be free dbus_free_apiname']
['dbus_validate_error_name_APIName returns TRUE if dbus_validate_error_name_APIParam_1 is valid.', 'dbus_validate_error_name_apiname return true if dbus_validate_error_name_apiparam_1 be valid']
['dbus_connection_list_registered_APIParam_2 is the path to list the child handlers of.', 'dbus_connection_list_registered_apiparam_2 be path list child handler']
['Checks whether the dbus_message_is_signal_APIParam_1 is a signal with the given interface and member fields.', 'check whether dbus_message_is_signal_apiparam_1 be signal give interface member field']
["dbus_message_new_method_return_APIName returns NULL if memory can't be allocated for the message.", 'dbus_message_new_method_return_apiname return null if memory can be allocate message']
['When possible, dbus_message_get_args_APIName is much more convenient.', 'when possible , dbus_message_get_args_apiname be much more convenient']
['dbus_signature_validate_single_APIName returns TRUE if dbus_signature_validate_single_APIParam_1 is valid and has exactly one complete type.', 'dbus_signature_validate_single_apiname return true if dbus_signature_validate_single_apiparam_1 be valid have exactly one complete type']
['dbus_message_get_allow_interactive_authorization_APIParam_1 is the dbus_message_get_allow_interactive_authorization_APIParam_1.', 'dbus_message_get_allow_interactive_authorization_apiparam_1 be dbus_message_get_allow_interactive_authorization_apiparam_1']
['dbus_message_get_container_instance_APIParam_1 is the dbus_message_get_container_instance_APIParam_1.', 'dbus_message_get_container_instance_apiparam_1 be dbus_message_get_container_instance_apiparam_1']
['dbus_message_iter_append_basic_APIParam_3 is dbus_message_iter_append_basic_APIParam_3 the address of the dbus_message_iter_append_basic_APIParam_3.', 'dbus_message_iter_append_basic_apiparam_3 be dbus_message_iter_append_basic_apiparam_3 address dbus_message_iter_append_basic_apiparam_3']
['dbus_message_iter_close_container_APIParam_2 is sub-iterator to close.', 'dbus_message_iter_close_container_apiparam_2 be sub_iterator close']
['dbus_connection_try_register_object_path_APIParam_4 is data to pass to functions in the dbus_connection_try_register_object_path_APIParam_3.', 'dbus_connection_try_register_object_path_apiparam_4 be data pass function dbus_connection_try_register_object_path_apiparam_3']
['dbus_pending_call_get_data_APIParam_1 is the pending_call.', 'dbus_pending_call_get_data_apiparam_1 be pending_call']
["But kind of sucks if you're trying to filter METHOD_RETURN for some reason.", 'but kind suck if -PRON- be try filter method_return reason']
['It is an error to pass an invalid type-code, other than DBUS_TYPE_INVALID, to this function.', 'be error pass invalid type_code , other than dbus_type_invalid , function']
['dbus_connection_add_filter_APIParam_2 is dbus_connection_add_filter_APIParam_2 to handle messages.', 'dbus_connection_add_filter_apiparam_2 be dbus_connection_add_filter_apiparam_2 handle message']
['You must close a dbus_connection_close_APIParam_1 prior to releasing the last reference to the dbus_connection_close_APIParam_1.', 'PRON- must close dbus_connection_close_apiparam_1 prior release last reference dbus_connection_close_apiparam_1']
['The dbus_message_get_data_APIParam_2 must still be allocated (must not have been freed).', 'dbus_message_get_data_apiparam_2 must still be allocate must have free']
['Gets the value set by dbus_connection_set_max_message_unix_fds_APIName .', 'get value set by dbus_connection_set_max_message_unix_fds_apiname']
["Note Prefer dbus_connection_open_APIName to dbus_connection_open_private_APIName unless you have good reason; connections are expensive enough that it's wasteful to create lots of connections to the same server.", 'note prefer dbus_connection_open_apiname dbus_connection_open_private_apiname unless -PRON- have good reason ; connection be expensive enough be wasteful create lot connection server']
['dbus_message_has_signature_APIName returns TRUE if dbus_message_has_signature_APIParam_1 has the given dbus_message_has_signature_APIParam_2.', 'dbus_message_has_signature_apiname return true if dbus_message_has_signature_apiparam_1 have give dbus_message_has_signature_apiparam_2']
['dbus_server_set_new_connection_function_APIParam_1 is the dbus_server_set_new_connection_function_APIParam_1.', 'dbus_server_set_new_connection_function_apiparam_1 be dbus_server_set_new_connection_function_apiparam_1']
['dbus_timeout_get_interval_APIName returns the interval in milliseconds.', 'dbus_timeout_get_interval_apiname return interval millisecond']
['dbus_connection_get_adt_audit_session_data_APIName returns TRUE if the structure pointer is returned.', 'dbus_connection_get_adt_audit_session_data_apiname return true if structure pointer be return']
['dbus_connection_set_timeout_functions_APIParam_5 is dbus_connection_set_timeout_functions_APIParam_5 to pass to dbus_connection_set_timeout_functions_APIParam_2 and dbus_connection_set_timeout_functions_APIParam_3.', 'dbus_connection_set_timeout_functions_apiparam_5 be dbus_connection_set_timeout_functions_apiparam_5 pass dbus_connection_set_timeout_functions_apiparam_2 dbus_connection_set_timeout_functions_apiparam_3']
['dbus_message_iter_append_fixed_array_APIParam_4 is the number of elements to append.', 'dbus_message_iter_append_fixed_array_apiparam_4 be number element append']
['dbus_bus_get_unique_name_APIParam_1 is the dbus_bus_get_unique_name_APIParam_1.', 'dbus_bus_get_unique_name_apiparam_1 be dbus_bus_get_unique_name_apiparam_1']
['dbus_message_iter_init_APIParam_1 is the dbus_message_iter_init_APIParam_1.', 'dbus_message_iter_init_apiparam_1 be dbus_message_iter_init_apiparam_1']
['dbus_connection_add_filter_APIName returns TRUE on success, FALSE if not enough memory.', 'dbus_connection_add_filter_apiname return true success , false if enough memory']
['co. dbus_connection_set_max_message_unix_fds_APIParam_2 isnection is a DBusConnection dbus_connection_set_max_message_unix_fds_APIParam_2 maximum message unix fds the dbus_connection_set_max_message_unix_fds_APIParam_1 can receive.', 'co. dbus_connection_set_max_message_unix_fds_apiparam_2 isnection be dbusconnection dbus_connection_set_max_message_unix_fds_apiparam_2 maximum message unix fds dbus_connection_set_max_message_unix_fds_apiparam_1 can receive']
['Gets the value set by dbus_connection_set_max_received_size_APIName .', 'get value set by dbus_connection_set_max_received_size_apiname']
["If there's no next field, returns FALSE .", 'if no next field , return false']
['Otherwise, returns a new connection and saves the new connection for possible re-use if a future call to dbus_connection_open_APIName asks to connect to the same server.', 'otherwise , return connection save connection possible re_use if future call dbus_connection_open_apiname ask connect server']
['dbus_bus_start_service_by_name_APIParam_2 is the dbus_bus_start_service_by_name_APIParam_2 we want the new service to request.', 'dbus_bus_start_service_by_name_apiparam_2 be dbus_bus_start_service_by_name_apiparam_2 -PRON- want service request']
['This function should really be called get_is_open_APIName but for historical reasons is not.', 'function should really be call get_is_open_apiname but historical reason be']
['Checks whether a dbus_message_contains_unix_fds_APIParam_1 contains unix fds.', 'check whether dbus_message_contains_unix_fds_apiparam_1 contain unix fds']
['For quick reference, the format of the match rules is discussed here, but the specification is the canonical version of this information.', 'quick reference , format match rule be discuss here , but specification be canonical version information']
['The slot must be initialized with -1.', 'slot must be initialize #']
['When the refcount on the passed-in slot reaches 0, it is set to -1.   dbus_message_free_data_slot_APIParam_1 is address storing the slot to deallocate.', 'when refcount passed_in slot reach 0 , be set # dbus_message_free_data_slot_apiparam_1 be address store slot deallocate']
['dbus_server_set_timeout_functions_APIParam_5 is dbus_server_set_timeout_functions_APIParam_5 to pass to dbus_server_set_timeout_functions_APIParam_2 and dbus_server_set_timeout_functions_APIParam_3.', 'dbus_server_set_timeout_functions_apiparam_5 be dbus_server_set_timeout_functions_apiparam_5 pass dbus_server_set_timeout_functions_apiparam_2 dbus_server_set_timeout_functions_apiparam_3']
['(Unix file descriptors however are not supported.)', 'unix file descriptor however be support']
['A DBusPendingCall will see a reply dbus_connection_send_with_reply_APIParam_2 before any filters or registered object path handlers.', 'dbuspendingcall see reply dbus_connection_send_with_reply_apiparam_2 before filter or register object path handler']
['The D-Bus protocol allows dbus_message_is_method_call_APIParam_3 callers to leave out the interface name.', 'd_bus protocol allow dbus_message_is_method_call_apiparam_3 caller leave out interface name']
['dbus_message_has_interface_APIParam_1 is the dbus_message_has_interface_APIParam_1.', 'dbus_message_has_interface_apiparam_1 be dbus_message_has_interface_apiparam_1']
['dbus_message_iter_init_APIParam_2 is pointer to an iterator to initialize.', 'dbus_message_iter_init_apiparam_2 be pointer iterator initialize']
['Specifies the maximum dbus_connection_set_max_message_size_APIParam_2 message this dbus_connection_set_max_message_size_APIParam_1 is allowed to receive.', 'specifie maximum dbus_connection_set_max_message_size_apiparam_2 message dbus_connection_set_max_message_size_apiparam_1 be allow receive']
['dbus_type_is_container_APIName returns TRUE if type is a container.', 'dbus_type_is_container_apiname return true if type be container']
['This function is not safe to use on invalid signatures; be sure to validate potentially invalid signatures with dbus_signature_validate before using this function.', 'function be safe invalid signature ; be sure validate potentially invalid signature dbus_signature_validate before use function']
['Normally you know a dbus_message_set_no_reply_APIParam_1 was received when you receive the reply to it.', 'normally -PRON- know dbus_message_set_no_reply_apiparam_1 be receive when -PRON- receive reply']
['dbus_message_set_interface_APIParam_1 is the dbus_message_set_interface_APIParam_1.', 'dbus_message_set_interface_apiparam_1 be dbus_message_set_interface_apiparam_1']
['dbus_message_set_reply_serial_APIName returns FALSE if not enough memory.', 'dbus_message_set_reply_serial_apiname return false if enough memory']
['Similar to dbus_message_get_fixed_array_APIName this function does not support arrays of type DBUS_TYPE_UNIX_FD.', 'similar dbus_message_get_fixed_array_apiname function do support arrays type dbus_type_unix_fd']
['dbus_connection_get_unix_fd_APIName returns TRUE if dbus_connection_get_unix_fd_APIParam_2 is successfully obtained.', 'dbus_connection_get_unix_fd_apiname return true if dbus_connection_get_unix_fd_apiparam_2 be successfully obtain']
['dbus_connection_read_write_APIParam_1 is the dbus_connection_read_write_APIParam_1.', 'dbus_connection_read_write_apiparam_1 be dbus_connection_read_write_apiparam_1']
['dbus_bus_add_match_APIParam_1 is dbus_bus_add_match_APIParam_1 to the message bus.', 'dbus_bus_add_match_apiparam_1 be dbus_bus_add_match_apiparam_1 message bus']
['dbus_message_set_destination_APIName returns FALSE if not enough memory.', 'dbus_message_set_destination_apiname return false if enough memory']
['dbus_watch_get_enabled_APIName returns whether a dbus_watch_get_enabled_APIParam_1 is enabled or not.', 'dbus_watch_get_enabled_apiname return whether dbus_watch_get_enabled_apiparam_1 be enable or']
['dbus_message_set_sender_APIParam_2 is the dbus_message_set_sender_APIParam_2 or NULL to unset.', 'dbus_message_set_sender_apiparam_2 be dbus_message_set_sender_apiparam_2 or null unset']
['Parses an dbus_parse_address_APIParam_1 string of the form: method:key=value,key=value;method:key=value See the D-Bus specification for complete docs on the format.', 'parse dbus_parse_address_apiparam_1 string form : method : key value , key value ; method : key value see d_bus specification complete docs format']
['Not all connections will have a socket.', 'connection have socket']
['This function does not reenter the main loop, i.e.', 'function do reenter main loop , i']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_bus_name_APIParam_2 dbus_validate_bus_name_APIParam_1 and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_bus_name_apiparam_2 dbus_validate_bus_name_apiparam_1 message']
['dbus_message_is_error_APIParam_1 is the dbus_message_is_error_APIParam_1.', 'dbus_message_is_error_apiparam_1 be dbus_message_is_error_apiparam_1']
['dbus_server_set_watch_functions_APIName returns FALSE on failure (no memory).', 'dbus_server_set_watch_functions_apiname return false failure no memory']
['Recurses into a container value when reading values from a message, initializing a sub-iterator to use for traversing the child values of the container.', 'recurse into container value when read value message , initialize sub_iterator traverse child value container']
['dbus_message_iter_get_element_type_APIParam_1 is the message dbus_message_iter_get_element_type_APIParam_1.', 'dbus_message_iter_get_element_type_apiparam_1 be message dbus_message_iter_get_element_type_apiparam_1']
['Deallocates a global ID for server data slots.', 'deallocate global identifi server datum slot']
['Asks the bus to return the UID the named dbus_bus_get_unix_user_APIParam_1 authenticated as, if any.', 'ask bus return uid name dbus_bus_get_unix_user_apiparam_1 authenticate as , if']
['dbus_message_append_args_APIParam_2 is type of the first argument ... value of first argument, list of additional type-value pairs.', 'dbus_message_append_args_apiparam_2 be type first argument ... value first argument , list additional type_value pair']
['Thus, you need a way to coordinate which thread sends the registration attempt; which also means you know which thread will call dbus_bus_set_unique_name_APIName .', 'thus , -PRON- need way coordinate which thread send registration attempt ; which mean -PRON- know which thread call dbus_bus_set_unique_name_apiname']
['To free the server, applications must call first dbus_server_disconnect_APIName and then dbus_server_unref_APIName .', 'free server , application must call first dbus_server_disconnect_apiname then dbus_server_unref_apiname']
['If the dbus_connection_set_unix_user_function_APIParam_2 is set to NULL (as it is by default), then only the same UID as the server process will be allowed to connect.', 'if dbus_connection_set_unix_user_function_apiparam_2 be set null , then only uid as server process be allow connect']
['This is generally acceptable, since the possible errors (including a lack of resources in the bus, the dbus_bus_add_match_APIParam_1 having exceeded its quota of active match rules, or the match dbus_bus_add_match_APIParam_2 being unparseable) are generally unrecoverable.', 'be generally acceptable , since possible error be generally unrecoverable']
['dbus_message_has_path_APIName returns TRUE if there is a dbus_message_has_path_APIParam_2 field in the header.', 'dbus_message_has_path_apiname return true if be dbus_message_has_path_apiparam_2 field header']
['A "container type" can contain basic types, or nested container types.', 'container type can contain basic type , or nest container type']
['dbus_malloc0_APIName returns NULL if the allocation fails.', 'dbus_malloc0_apiname return null if allocation fail']
['If the dbus_bus_register_APIParam_1 has already registered with the bus (determined by checking whether dbus_bus_get_unique_name_APIName returns a non- NULL value), then this function does nothing.', 'if dbus_bus_register_apiparam_1 have already register bus , then function do nothing']
['dbus_pending_call_set_data_APIParam_3 is the dbus_pending_call_set_data_APIParam_3 to store.', 'dbus_pending_call_set_data_apiparam_3 be dbus_pending_call_set_data_apiparam_3 store']
['This UUID is guaranteed to remain the same until the next reboot (unless the sysadmin foolishly changes it and screws themselves).', 'uuid be guarantee remain until next reboot unless sysadmin foolishly change screw']
["Pass NULL for the dbus_connection_open_private_APIParam_2 parameter if you aren't interested in the reason for failure.", 'pass null dbus_connection_open_private_apiparam_2 parameter if -PRON- be interested reason failure']
['dbus_server_ref_APIParam_1 is the dbus_server_ref_APIParam_1.', 'dbus_server_ref_apiparam_1 be dbus_server_ref_apiparam_1']
['Gets data previously set with dbus_timeout_set_data_APIName or NULL if none.', 'get datum previously set dbus_timeout_set_data_apiname or null if none']
['The same handler can be added as a filter more than once, in which case it will be run more than once.', 'handler can be add as filter more than once , which case be run more than once']
['Some structs are fixed-size (if they contain only fixed-size types) but struct is not considered a fixed type for purposes of this function.', 'struct be fixed_size but struct be consider fix type purpose function']
['The returned string becomes invalid if the dbus_message_get_destination_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_destination_APIParam_1 data.', 'return string become invalid if dbus_message_get_destination_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_destination_apiparam_1 datum']
['dbus_message_get_sender_APIParam_1 is the dbus_message_get_sender_APIParam_1.', 'dbus_message_get_sender_apiparam_1 be dbus_message_get_sender_apiparam_1']
['This requires storing timestamps instead of intervals in the timeout   dbus_pending_call_block_APIParam_1 is the dbus_pending_call_block_APIParam_1 call.', 'require storing timestamp instead interval timeout dbus_pending_call_block_apiparam_1 be dbus_pending_call_block_apiparam_1 call']
['If set to TRUE (the default is FALSE ), then the dbus_connection_set_allow_anonymous_APIParam_1 can proceed even if the client does not authenticate as some user identity, i.e.', 'if set true , then dbus_connection_set_allow_anonymous_apiparam_1 can proceed even if client do authenticate as user identity , i']
['dbus_connection_get_max_received_unix_fds_APIName returns the max unix fds of all live messages.', 'dbus_connection_get_max_received_unix_fds_apiname return max unix fd live message']
['dbus_server_listen_APIParam_2 is location to store reason for failure.', 'dbus_server_listen_apiparam_2 be location store reason failure']
['If the dbus_connection_get_unix_fd_APIParam_1 is socket-based, you can also use dbus_connection_get_socket_APIName , which will work on Windows too.', 'if dbus_connection_get_unix_fd_apiparam_1 be socket_based , -PRON- can dbus_connection_get_socket_apiname , which work window too']
['dbus_move_error_APIParam_2 may not contain an existing error.', 'dbus_move_error_apiparam_2 contain exist error']
['For example, you could use it in bus names or X selection names.', 'example , -PRON- could bus name or x selection name']
['Gets the value set by dbus_connection_set_max_message_size_APIName .', 'get value set by dbus_connection_set_max_message_size_apiname']
['Asks the bus whether a certain dbus_bus_name_has_owner_APIParam_2 has an owner.', 'ask bus whether certain dbus_bus_name_has_owner_apiparam_2 have owner']
['If the given handler was added more than once, only one instance of it will be removed (the most recently-added instance).', 'if give handler be add more than once , only one instance be remove most recently_added instance']
['dbus_connection_set_timeout_functions_APIParam_6 is function to be called to free the dbus_connection_set_timeout_functions_APIParam_5.', 'dbus_connection_set_timeout_functions_apiparam_6 be function be call free dbus_connection_set_timeout_functions_apiparam_5']
['if you did not call dbus_bus_register_APIName ).', 'if -PRON- do call dbus_bus_register_apiname']
['Always returns FALSE prior to authenticating the dbus_connection_get_unix_user_APIParam_1.', 'always return false prior authenticate dbus_connection_get_unix_user_apiparam_1']
['Sets the maximum total number of bytes that can be used for all messages received on this dbus_connection_set_max_received_size_APIParam_1.', 'set maximum total number byte can be use message receive dbus_connection_set_max_received_size_apiparam_1']
['dbus_message_iter_open_container_APIName returns FALSE if not enough memory.', 'dbus_message_iter_open_container_apiname return false if enough memory']
['This function returns NULL if there was not enough memory to read the UUID, or if the UUID could not be read because the D-Bus library was installed incorrectly.', 'function return null if be enough memory read uuid , or if uuid could be read because d_bus library be instal incorrectly']
['dbus_connection_send_with_reply_APIName returns FALSE if no memory, TRUE otherwise.', 'dbus_connection_send_with_reply_apiname return false if no memory , true otherwise']
['dbus_set_error_from_message_APIName returns TRUE if the dbus_set_error_from_message_APIParam_2 had type DBUS_MESSAGE_TYPE_ERROR.', 'dbus_set_error_from_message_apiname return true if dbus_set_error_from_message_apiparam_2 have type dbus_message_type_error']
['dbus_server_set_watch_functions_APIParam_1 is the dbus_server_set_watch_functions_APIParam_1.', 'dbus_server_set_watch_functions_apiparam_1 be dbus_server_set_watch_functions_apiparam_1']
['dbus_connection_get_unix_user_APIParam_2 is return location for the user ID.', 'dbus_connection_get_unix_user_apiparam_2 be return location user identifier']
['That is, arg0=\'5\' means match the string "5" not the integer 5.', 'be , arg0 5 mean match string 5 integer #']
['dbus_message_get_no_reply_APIParam_1 is the dbus_message_get_no_reply_APIParam_1.', 'dbus_message_get_no_reply_apiparam_1 be dbus_message_get_no_reply_apiparam_1']
['dbus_message_get_path_APIName returns NULL if none.', 'dbus_message_get_path_apiname return null if none']
['If the dbus_setenv_APIParam_2 is NULL , unsets the environment variable.', 'if dbus_setenv_apiparam_2 be null , unset environment variable']
["Both of these maximums are much higher than you're likely to need, they only exist because the D-Bus bus daemon has fixed limits on all resource usage.", 'both maximum be much high than -PRON- be likely need , only exist because d_bus bus daemon have fix limit resource usage']
['dbus_signature_validate_single_APIParam_1 is a potentially invalid type dbus_signature_validate_single_APIParam_1.', 'dbus_signature_validate_single_apiparam_1 be potentially invalid type dbus_signature_validate_single_apiparam_1']
['Checks whether the dbus_message_is_method_call_APIParam_1 is a dbus_message_is_method_call_APIParam_3 call with the given interface and member fields.', 'check whether dbus_message_is_method_call_apiparam_1 be dbus_message_is_method_call_apiparam_3 call give interface member field']
['dbus_connection_try_register_fallback_APIParam_3 is the virtual table.', 'dbus_connection_try_register_fallback_apiparam_3 be virtual table']
['dbus_message_iter_get_element_type_APIName returns the array element type.', 'dbus_message_iter_get_element_type_apiname return array element type']
['It is not allowed to reference a DBusWatch after it has been passed to dbus_connection_set_watch_functions_APIParam_3.', 'be allow reference dbuswatch after have pass dbus_connection_set_watch_functions_apiparam_3']
['On the protocol level this toggles DBUS_HEADER_FLAG_NO_REPLY_EXPECTED   dbus_message_set_no_reply_APIParam_1 is the dbus_message_set_no_reply_APIParam_1.', 'protocol level toggle dbus_header_flag_no_reply_expected dbus_message_set_no_reply_apiparam_1 be dbus_message_set_no_reply_apiparam_1']
["It won't hurt you.", 'hurt -PRON']
['Todo: support DBUS_TYPE_STRUCT and DBUS_TYPE_VARIANT and complex arrays   dbus_message_get_args_APIParam_1 is the dbus_message_get_args_APIParam_1.', 'todo : support dbus_type_struct dbus_type_variant complex arrays dbus_message_get_args_apiparam_1 be dbus_message_get_args_apiparam_1']
['You can thus write a loop as follows: dbus_message_iter_init (message, &iter); while ((current_type = dbus_message_iter_get_arg_type_APIName (&iter)) != DBUS_TYPE_INVALID ) dbus_message_iter_next (&iter);   dbus_message_iter_get_arg_type_APIParam_1 is the message dbus_message_iter_get_arg_type_APIParam_1.', 'PRON- can thus write loop as follow : dbus_message_iter_init ; while dbus_type_invalid dbus_message_iter_next ; dbus_message_iter_get_arg_type_apiparam_1 be message dbus_message_iter_get_arg_type_apiparam_1']
['dbus_connection_return_message_APIParam_1 is the dbus_connection_return_message_APIParam_1.', 'dbus_connection_return_message_apiparam_1 be dbus_connection_return_message_apiparam_1']
['dbus_watch_get_socket_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_socket_apiparam_1 be dbuswatch object']
['Set a dbus_connection_set_dispatch_status_function_APIParam_2 to be invoked when the dispatch status changes.', 'set dbus_connection_set_dispatch_status_function_apiparam_2 be invoke when dispatch status change']
['dbus_connection_register_fallback_APIName returns FALSE if an error ( DBUS_ERROR_NO_MEMORY or DBUS_ERROR_OBJECT_PATH_IN_USE ) occured.', 'dbus_connection_register_fallback_apiname return false if error occur']
['If the requested arguments are not present, or do not have the requested types, then an dbus_message_get_args_APIParam_2 will be set.', 'if request argument be present , or have request type , then dbus_message_get_args_apiparam_2 be set']
['dbus_message_iter_abandon_container_APIParam_2 is sub-iterator to close.', 'dbus_message_iter_abandon_container_apiparam_2 be sub_iterator close']
['The dbus_connection_set_data_APIParam_2 number must have been allocated with dbus_connection_allocate_data_slot_APIName .', 'dbus_connection_set_data_apiparam_2 number must have allocate dbus_connection_allocate_data_slot_apiname']
['dbus_message_iter_get_array_len_APIParam_1 is the iterator.', 'dbus_message_iter_get_array_len_apiparam_1 be iterator']
['dbus_malloc0_APIName returns allocated memory, or NULL if the allocation fails.', 'dbus_malloc0_apiname return allocate memory , or null if allocation fail']
['Sets a dbus_server_set_new_connection_function_APIParam_2 to be used for handling new connections.', 'set dbus_server_set_new_connection_function_apiparam_2 be use handling connection']
['If there are multiple semicolon-separated dbus_server_listen_APIParam_1 entries in the dbus_server_listen_APIParam_1, tries each one and listens on the first one that works.', 'if be multiple semicolon_separate dbus_server_listen_apiparam_1 entry dbus_server_listen_apiparam_1 , try each one listen first one work']
['Sets the maximum total number of unix fds that can be used for all messages received on this dbus_connection_set_max_received_unix_fds_APIParam_1.', 'set maximum total number unix fd can be use message receive dbus_connection_set_max_received_unix_fds_apiparam_1']
['For strings it works to write const char *array = "Hello" and then use &array though.', 'string work write const char array hello then array though']
["If you don't do this then libdbus won't know to stop and will read invalid memory.", 'if -PRON- then libdbus know stop read invalid memory']
['dbus_message_iter_has_next_APIParam_1 is the message dbus_message_iter_has_next_APIParam_1.', 'dbus_message_iter_has_next_apiparam_1 be message dbus_message_iter_has_next_apiparam_1']
["This function does not affect the connection's reference count.", 'function do affect connection reference count']
['This is probably a feature, as filters could create arbitrary reentrancy.', 'be probably feature , as filter could create arbitrary reentrancy']
['If a RequestName call includes the DBUS_NAME_FLAG_REPLACE_EXISTING flag, and the current primary owner has DBUS_NAME_FLAG_ALLOW_REPLACEMENT set, then the current primary owner will be kicked off.', 'if requestname call include dbus_name_flag_replace_existing flag , current primary owner have dbus_name_flag_allow_replacement set , then current primary owner be kick off']
['The idea is that two processes with the same machine ID should be able to use shared memory, UNIX domain sockets, process IDs, and other features of the OS that require both processes to be running on the same OS kernel instance.', 'idea be two process machine identifi should be able share memory , unix domain socket , process id , other feature os require both process be run os kernel instance']
['dbus_message_has_interface_APIParam_2 is the interface name.', 'dbus_message_has_interface_apiparam_2 be interface name']
['This connection will not be saved or recycled by libdbus.', 'connection be save or recycle by libdbus']
['dbus_connection_borrow_message_APIName returns the first-received message from the incoming message queue, leaving it in the queue.', 'dbus_connection_borrow_message_apiname return first_received message incoming message queue , leave queue']
['co. dbus_connection_set_max_received_unix_fds_APIParam_2 isnection is the dbus_connection_set_max_received_unix_fds_APIParam_1 dbus_connection_set_max_received_unix_fds_APIParam_2 the maximum size in bytes of all outstanding messages.', 'co. dbus_connection_set_max_received_unix_fds_apiparam_2 isnection be dbus_connection_set_max_received_unix_fds_apiparam_1 dbus_connection_set_max_received_unix_fds_apiparam_2 maximum size byte outstanding message']
['Sets a DBusError based on the contents of the given dbus_set_error_from_message_APIParam_2.', 'set dbuserror base content give dbus_set_error_from_message_apiparam_2']
['Intended for use by the DBusAddTimeoutFunction and DBusRemoveTimeoutFunction to store their own dbus_timeout_set_data_APIParam_2.', 'intend by dbusaddtimeoutfunction dbusremovetimeoutfunction store dbus_timeout_set_data_apiparam_2']
['dbus_pending_call_get_data_APIParam_2 is the dbus_pending_call_get_data_APIParam_2 to get data from.', 'dbus_pending_call_get_data_apiparam_2 be dbus_pending_call_get_data_apiparam_2 get datum']
['The dbus_connection_get_data_APIParam_2 must still be allocated (must not have been freed).', 'dbus_connection_get_data_apiparam_2 must still be allocate must have free']
['Types include DBUS_MESSAGE_TYPE_METHOD_CALL , DBUS_MESSAGE_TYPE_METHOD_RETURN , DBUS_MESSAGE_TYPE_ERROR , DBUS_MESSAGE_TYPE_SIGNAL , but other types are allowed and all code must silently ignore messages of unknown type.', 'type include dbus_message_type_method_call , dbus_message_type_method_return , dbus_message_type_error , dbus_message_type_signal , but other type be allow code must silently ignore message unknown type']
['It only frees libdbus-internal data structures.', 'only free libdbus_internal datum structure']
['dbus_connection_borrow_message_APIName returns next message in the incoming queue.', 'dbus_connection_borrow_message_apiname return next message incoming queue']
['Gets the Windows user SID of the dbus_connection_get_windows_user_APIParam_1 if known.', 'get window user sid dbus_connection_get_windows_user_apiparam_1 if know']
['When an incoming dbus_connection_set_windows_user_function_APIParam_1 has authenticated with a particular user ID, this dbus_connection_set_windows_user_function_APIParam_2 is called; if it returns TRUE , the dbus_connection_set_windows_user_function_APIParam_1 is allowed to proceed, otherwise the dbus_connection_set_windows_user_function_APIParam_1 is disconnected.', 'when incoming dbus_connection_set_windows_user_function_apiparam_1 have authenticate particular user identifi , dbus_connection_set_windows_user_function_apiparam_2 be call ; if return true , dbus_connection_set_windows_user_function_apiparam_1 be allow proceed , otherwise dbus_connection_set_windows_user_function_apiparam_1 be disconnected']
['dbus_connection_get_windows_user_APIName returns TRUE if the ID is filled in.', 'dbus_connection_get_windows_user_apiname return true if identifier be fill']
['This function is deprecated on the grounds that it is stupid.', 'function be deprecate ground be stupid']
['dbus_pending_call_set_notify_APIParam_1 is the dbus_pending_call_set_notify_APIParam_1 call.', 'dbus_pending_call_set_notify_apiparam_1 be dbus_pending_call_set_notify_apiparam_1 call']
['dbus_server_set_new_connection_function_APIParam_4 is dbus_server_set_new_connection_function_APIParam_2 to free the dbus_server_set_new_connection_function_APIParam_3.', 'dbus_server_set_new_connection_function_apiparam_4 be dbus_server_set_new_connection_function_apiparam_2 free dbus_server_set_new_connection_function_apiparam_3']
['dbus_bus_set_unique_name_APIName returns FALSE if not enough memory.', 'dbus_bus_set_unique_name_apiname return false if enough memory']
['Preallocated resources comes from dbus_connection_preallocate_send_APIName .', 'preallocate resource come dbus_connection_preallocate_send_apiname']
['dbus_parse_address_APIParam_2 is return location to an array of entries.', 'dbus_parse_address_apiparam_2 be return location array entry']
['dbus_bus_get_id_APIParam_1 is the dbus_bus_get_id_APIParam_1.', 'dbus_bus_get_id_apiparam_1 be dbus_bus_get_id_apiparam_1']
['Sets the reply serial of a dbus_message_set_reply_serial_APIParam_1 (the serial of the dbus_message_set_reply_serial_APIParam_1 this is a reply to).', 'set reply serial dbus_message_set_reply_serial_apiparam_1 serial dbus_message_set_reply_serial_apiparam_1 be reply']
['dbus_message_set_member_APIName returns FALSE if not enough memory.', 'dbus_message_set_member_apiname return false if enough memory']
['You can undo this by calling dbus_connection_set_exit_on_disconnect_APIName yourself after you get the connection.', 'PRON- can undo by call dbus_connection_set_exit_on_disconnect_apiname -PRON- after -PRON- get connection']
['dbus_connection_free_preallocated_send_APIParam_2 is the resources.', 'dbus_connection_free_preallocated_send_apiparam_2 be resource']
['Initialize a new iterator pointing to the first type in the current container.', 'initialize iterator point first type current container']
['If there are complete messages in the incoming queue, dbus_connection_dispatch_APIName removes one message from the queue and processes it.', 'if be complete message incoming queue , dbus_connection_dispatch_apiname remove one message queue process']
['dbus_bus_request_name_APIParam_2 is the dbus_bus_request_name_APIParam_2 to request.', 'dbus_bus_request_name_apiparam_2 be dbus_bus_request_name_apiparam_2 request']
['"method_call" -> DBUS_MESSAGE_TYPE_METHOD_CALL "method_return" -> DBUS_MESSAGE_TYPE_METHOD_RETURN "signal" -> DBUS_MESSAGE_TYPE_SIGNAL "error" -> DBUS_MESSAGE_TYPE_ERROR anything else -> DBUS_MESSAGE_TYPE_INVALID', 'method_call dbus_message_type_method_call method_return dbus_message_type_method_return signal dbus_message_type_signal error dbus_message_type_error anything else dbus_message_type_invalid']
['When using Qt, typically the DBusAddTimeoutFunction would create a QTimer.', 'when use qt , typically dbusaddtimeoutfunction would create qtimer']
['dbus_message_is_signal_APIParam_2 is the name to check (must not be NULL ).', 'dbus_message_is_signal_apiparam_2 be name check must be null']
["For shared connections, libdbus will own a reference as long as the dbus_connection_unref_APIParam_1 is connected, so you can know that either you don't have the last reference, or it's OK to drop the last reference.", 'share connection , libdbus reference as long as dbus_connection_unref_apiparam_1 be connect , so -PRON- can know either -PRON- have last reference , or be ok drop last reference']
['The valid type-codes are defined by dbus-protocol.h and can be checked with dbus_type_is_valid_APIName .', 'valid type_code be define by dbus_protocol can be check dbus_type_is_valid_apiname']
['The "value" argument should be the address of a basic-typed dbus_message_iter_append_basic_APIParam_3.', 'value argument should be address basic_type dbus_message_iter_append_basic_apiparam_3']
['dbus_message_demarshal_bytes_needed_APIParam_2 is the length of dbus_message_demarshal_bytes_needed_APIParam_1.', 'dbus_message_demarshal_bytes_needed_apiparam_2 be length dbus_message_demarshal_bytes_needed_apiparam_1']
['The new connection dbus_server_set_new_connection_function_APIParam_2 may also close the connection itself, which is considered good form if the connection is not wanted.', 'connection dbus_server_set_new_connection_function_apiparam_2 close connection , which be consider good form if connection be want']
['The DBusTimeout can be queried for the timer interval using dbus_timeout_get_interval_APIName .', 'dbustimeout can be query timer interval use dbus_timeout_get_interval_apiname']
['dbus_connection_get_object_path_data_APIParam_3 is location to store the user data, or NULL.', 'dbus_connection_get_object_path_data_apiparam_3 be location store user datum , or null']
['This function is responsible for waking up the main loop (if its sleeping in another thread) when some some change has happened to the dbus_connection_set_wakeup_main_function_APIParam_1 that the mainloop needs to reconsider (e.g.', 'function be responsible wake up main loop when change have happen dbus_connection_set_wakeup_main_function_apiparam_1 mainloop need reconsider e']
['This function "consumes" the dbus_connection_send_preallocated_APIParam_2 resources, they need not be freed separately.', 'function consume dbus_connection_send_preallocated_apiparam_2 resource , nee be free separately']
['dbus_connection_add_filter_APIParam_4 is dbus_connection_add_filter_APIParam_2 to use for freeing user data.', 'dbus_connection_add_filter_apiparam_4 be dbus_connection_add_filter_apiparam_2 free user datum']
['Error replies are most common in response to method calls, but can be returned in reply to any message.', 'error reply be most common response method call , but can be return reply message']
['dbus_message_set_error_name_APIParam_1 is the dbus_message_set_error_name_APIParam_1.', 'dbus_message_set_error_name_apiparam_1 be dbus_message_set_error_name_apiparam_1']
['The arguments are the same as they would be for dbus_message_iter_get_basic_APIName or dbus_message_iter_get_fixed_array_APIName .', 'argument be as would be dbus_message_iter_get_basic_apiname or dbus_message_iter_get_fixed_array_apiname']
['If –replace is given, ask to replace the old owner.', 'if replace be give , ask replace old owner']
['But this should be inconsequential.', 'but should be inconsequential']
['dbus_connection_borrow_message_APIParam_1 is the dbus_connection_borrow_message_APIParam_1.', 'dbus_connection_borrow_message_apiparam_1 be dbus_connection_borrow_message_apiparam_1']
['dbus_server_set_data_APIParam_2 is the dbus_server_set_data_APIParam_2 number.', 'dbus_server_set_data_apiparam_2 be dbus_server_set_data_apiparam_2 number']
['Note that, while it is blocked on I/O, it cannot be interrupted (even by other threads), which makes this function unsuitable for applications that do more than just react to received messages.', 'note , while be block , can be interrupt , which make function unsuitable application more than just react receive message']
['This function sets a global flag for whether dbus_connection_new_APIName will set SIGPIPE behavior to SIG_IGN.', 'function set global flag whether dbus_connection_new_apiname set sigpipe behavior sig_ign']
['Note that this function is O(1) for arrays of fixed-size types but O(n) for arrays of variable-length types such as strings, so it may be a bad idea to use it.', 'note function be o arrays fixed_size type but o arrays variable_length type such as string , so be bad idea']
['The semantics are analogous to those of dbus_connection_set_max_received_size_APIName .', 'semantic be analogous dbus_connection_set_max_received_size_apiname']
['Increments the reference count on a dbus_pending_call_ref_APIParam_1 call.', 'increment reference count dbus_pending_call_ref_apiparam_1 call']
['To solve this, either avoid the situation, block in a separate thread from the main connection-dispatching thread, or use dbus_pending_call_set_notify_APIName to avoid blocking.', 'solve , either avoid situation , block separate thread main connection_dispatching thread , or dbus_pending_call_set_notify_apiname avoid blocking']
['So for example if you have an application org.freedesktop.TextEditor and multiple instances of it can be run, you can have all of them sitting in the queue.', 'so example if -PRON- have application multiple instance can be run , -PRON- can have -PRON- sit queue']
['Second, any filters registered with dbus_connection_add_filter_APIName are run.', 'second , filter register dbus_connection_add_filter_apiname be run']
['If a dbus_connection_close_APIParam_1 is dropped by the remote application, it will close itself.', 'if dbus_connection_close_apiparam_1 be drop by remote application , close']
['This function always fails on Windows.', 'function always fail window']
['dbus_connection_set_wakeup_main_function_APIParam_2 is function to wake up the mainloop.', 'dbus_connection_set_wakeup_main_function_apiparam_2 be function wake up mainloop']
['If you need to keep the message, make a copy of it.', 'if -PRON- need keep message , make copy']
['This setting also changes the default rule for connections authorized as a user; normally, if a dbus_connection_set_allow_anonymous_APIParam_1 authorizes as a user identity, it is permitted if the user identity is root or the user identity matches the user identity of the server process.', 'set change default rule connection authorize as user ; normally , if dbus_connection_set_allow_anonymous_apiparam_1 authorizes as user identity , be permit if user identity be root or user identity match user identity server process']
['dbus_message_marshal_APIName returns FALSE if there was not enough memory.', 'dbus_message_marshal_apiname return false if be enough memory']
['dbus_get_version_APIParam_1 is pointer to return the major version, or NULL.', 'dbus_get_version_apiparam_1 be pointer return major version , or null']
['If a normal application sets this flag, it can break things badly.', 'if normal application set flag , can break thing badly']
['Reading usually happens in dbus_watch_handle_APIName or dbus_connection_read_write_APIName .', 'read usually happen dbus_watch_handle_apiname or dbus_connection_read_write_apiname']
['dbus_bus_get_unix_user_APIName returns the unix user id, or ((unsigned)-1) if dbus_bus_get_unix_user_APIParam_3 is set.', 'dbus_bus_get_unix_user_apiname return unix user identifi , or 1 if dbus_bus_get_unix_user_apiparam_3 be set']
['dbus_message_copy_APIParam_1 is the dbus_message_copy_APIParam_1.', 'dbus_message_copy_apiparam_1 be dbus_message_copy_apiparam_1']
['dbus_message_iter_append_fixed_array_APIName returns FALSE if not enough memory.', 'dbus_message_iter_append_fixed_array_apiname return false if enough memory']
['dbus_message_new_method_return_APIParam_1 is the message being replied to.', 'dbus_message_new_method_return_apiparam_1 be message reply']
['dbus_watch_get_fd_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_fd_apiparam_1 be dbuswatch object']
['-1 is typically the best value for the timeout for this reason, unless you want a very short or very long timeout.', '# be typically good value timeout reason , unless -PRON- want short or long timeout']
['Note The thread lock on DBusConnection is held while watch functions are invoked, so inside these functions you may not invoke any methods on DBusConnection or it will deadlock.', 'note thread lock dbusconnection be hold while watch function be invoke , so inside function -PRON- invoke method dbusconnection or deadlock']
['auto starting is the default.', 'auto starting be default']
['only allow the ANONYMOUS mechanism).', 'only allow anonymous mechanism']
['dbus_connection_set_timeout_functions_APIName returns FALSE on failure (no memory).', 'dbus_connection_set_timeout_functions_apiname return false failure no memory']
['Hence you may close the descriptor immediately after this call.', 'hence -PRON- close descriptor immediately after call']
['dbus_connection_can_send_type_APIParam_1 is the dbus_connection_can_send_type_APIParam_1.', 'dbus_connection_can_send_type_apiparam_1 be dbus_connection_can_send_type_apiparam_1']
['If a connection to the given dbus_connection_open_APIParam_1 already exists, returns the existing connection with its reference count incremented.', 'if connection give dbus_connection_open_apiparam_1 already exist , return exist connection reference count incremente']
['The easiest way to iterate is like this: dbus_message_iter_init_APIName (message, &iter); while ((current_type = dbus_message_iter_get_arg_type (&iter)) != DBUS_TYPE_INVALID ) dbus_message_iter_next (&iter); DBusMessageIter contains no allocated memory; it need not be freed, and can be copied by assignment or memcpy_APIName.', 'easy way iterate be like : dbus_message_iter_init_apiname ; while dbus_type_invalid dbus_message_iter_next ; dbusmessageiter contain no allocate memory ; nee be free , can be copy by assignment or memcpy_apiname']
['Checks if the dbus_message_has_member_APIParam_1 has an interface dbus_message_has_member_APIParam_2.', 'check if dbus_message_has_member_apiparam_1 have interface dbus_message_has_member_apiparam_2']
['Always returns FALSE on non-UNIX platforms for now, though in theory someone could hook Windows to NIS or something.', 'always return false non_unix platform now , though theory someone could hook window ni or something']
["This means you can end up deadlocked if the application you're talking to needs you to reply to a method.", 'mean -PRON- can end up deadlocke if application -PRON- be talk need -PRON- reply method']
["DBUS_TYPE_INVALID surprisingly enough is not considered valid, and random unknown bytes aren't either.", 'dbus_type_invalid surprisingly enough be consider valid , random unknown byte be either']
['Gets the user data passed to dbus_connection_register_object_path_APIName or dbus_connection_register_fallback_APIName .', 'get user datum pass dbus_connection_register_object_path_apiname or dbus_connection_register_fallback_apiname']
['They point into the DBusMessage .', 'point into dbusmessage']
['Using this can easily result in a race condition, since an owner can appear or disappear after you call this.', 'use can easily result race condition , since owner can appear or disappear after -PRON- call']
['If nothing was registered at this dbus_connection_get_object_path_data_APIParam_2, the data is filled in with NULL .', 'if nothing be register dbus_connection_get_object_path_data_apiparam_2 , datum be fill null']
['The last argument to this function must be DBUS_TYPE_INVALID , marking the end of the argument list.', 'last argument function must be dbus_type_invalid , mark end argument list']
['However, signal messages are required to include the interface so when matching signals usually you should specify the interface in the match dbus_bus_add_match_APIParam_2.', 'however , signal message be require include interface so when match signal usually -PRON- should specify interface match dbus_bus_add_match_apiparam_2']
['Decrements the reference count of a DBusConnection , and finalizes it if the count reaches zero.', 'decrement reference count dbusconnection , finalize if count reach zero']
['The sender is filled in by the dbus_message_get_sender_APIParam_1 bus.', 'sender be fill by dbus_message_get_sender_apiparam_1 bus']
['dbus_setenv_APIName returns TRUE on success, FALSE if not enough memory.', 'dbus_setenv_apiname return true success , false if enough memory']
['dbus_message_set_data_APIName returns TRUE if there was enough memory to store the dbus_message_set_data_APIParam_3.', 'dbus_message_set_data_apiname return true if be enough memory store dbus_message_set_data_apiparam_3']
['dbus_message_iter_get_basic_APIParam_2 is location to store the dbus_message_iter_get_basic_APIParam_2.', 'dbus_message_iter_get_basic_apiparam_2 be location store dbus_message_iter_get_basic_apiparam_2']
['All messages received on a connection will have a serial provided by the remote application.', 'message receive connection have serial provide by remote application']
['Note, DBUS_DISPATCH_DATA_REMAINS really means that either we have messages in the queue, or we have raw bytes buffered up that need to be parsed.', 'note , dbus_dispatch_data_remains really mean either -PRON- have message queue , or -PRON- have raw byte buffer up nee be parse']
['dbus_signature_iter_get_current_type_APIParam_1 is pointer to an iterator.', 'dbus_signature_iter_get_current_type_apiparam_1 be pointer iterator']
['dbus_message_iter_get_fixed_array_APIParam_2 is location to store the block.', 'dbus_message_iter_get_fixed_array_apiparam_2 be location store block']
['dbus_watch_get_unix_fd_APIName returns the file descriptor to dbus_watch_get_unix_fd_APIParam_1.', 'dbus_watch_get_unix_fd_apiname return file descriptor dbus_watch_get_unix_fd_apiparam_1']
['Note Just use dbus_bus_get_APIName or dbus_bus_get_private_APIName , or worst case dbus_bus_register_APIName , instead of messing with this function.', 'note just dbus_bus_get_apiname or dbus_bus_get_private_apiname , or bad case dbus_bus_register_apiname , instead mess function']
['dbus_message_contains_unix_fds_APIName returns TRUE if the dbus_message_contains_unix_fds_APIParam_1 contains unix fds.', 'dbus_message_contains_unix_fds_apiname return true if dbus_message_contains_unix_fds_apiparam_1 contain unix fds']
['dbus_connection_get_socket_APIParam_2 is return location for the file descriptor.', 'dbus_connection_get_socket_apiparam_2 be return location file descriptor']
["There's no array of int32 to recurse into.", 'no array int32 recurse into']
['Messages with more unix fds will result in disconnecting the dbus_connection_set_max_message_unix_fds_APIParam_1.', 'message more unix fds result disconnect dbus_connection_set_max_message_unix_fds_apiparam_1']
['dbus_server_listen_APIParam_1 is the dbus_server_listen_APIParam_1 of this server.', 'dbus_server_listen_apiparam_1 be dbus_server_listen_apiparam_1 server']
['dbus_error_is_set_APIParam_1 is the dbus_error_is_set_APIParam_1 object.', 'dbus_error_is_set_apiparam_1 be dbus_error_is_set_apiparam_1 object']
['Sets a flag indicating that the caller of the method is prepared to wait for interactive authorization to take place (for instance via Polkit) before the actual method is processed.', 'set flag indicating caller method be prepare wait interactive authorization take place before actual method be process']
['The allocated ID may then be used with dbus_message_set_data_APIName and dbus_message_get_data_APIName .', 'allocate identifier then be use dbus_message_set_data_apiname dbus_message_get_data_apiname']
['Initializes a DBusSignatureIter for reading a type dbus_signature_iter_init_APIParam_2.', 'initialize dbussignatureiter read type dbus_signature_iter_init_apiparam_2']
["If the new connection dbus_server_set_new_connection_function_APIParam_2 increments the connection's reference count, the connection will stay alive.", 'if connection dbus_server_set_new_connection_function_apiparam_2 increment connection reference count , connection stay alive']
['The dbus_message_set_sender_APIParam_2 must be a valid bus name as defined in the D-Bus specification.', 'dbus_message_set_sender_apiparam_2 must be valid bus name as define d_bus specification']
['The default dbus_set_error_const_APIParam_3 will be totally useless, though, so using a NULL dbus_set_error_const_APIParam_3 is not recommended.', 'default dbus_set_error_const_apiparam_3 be totally useless , though , so use null dbus_set_error_const_apiparam_3 be recommend']
['If the container is an array of fixed-length values (except Unix file descriptors), you can get all the array elements at once with dbus_message_iter_get_fixed_array_APIName .', 'if container be array fixed_length value , -PRON- can get array element once dbus_message_iter_get_fixed_array_apiname']
['This disconnects the transport (such as a socket) underlying the dbus_connection_close_APIParam_1.', 'disconnect transport underlie dbus_connection_close_apiparam_1']
['(Remember, you have to free all D-Bus objects and memory before you call dbus_shutdown_APIName , so no thread can be using libdbus.)', 'remember , -PRON- have free d_bus object memory before -PRON- call dbus_shutdown_apiname , so no thread can be use libdbus']
['The object dbus_message_has_path_APIParam_2 is the destination object for a method call or the emitting object for a signal.', 'object dbus_message_has_path_apiparam_2 be destination object method call or emit object signal']
['Gets the ADT audit dbus_connection_get_adt_audit_session_data_APIParam_2 of the dbus_connection_get_adt_audit_session_data_APIParam_1 if any.', 'get adt audit dbus_connection_get_adt_audit_session_data_apiparam_2 dbus_connection_get_adt_audit_session_data_apiparam_1 if']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_utf8_APIParam_2 name and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_utf8_apiparam_2 name message']
['dbus_connection_register_object_path_APIParam_4 is data to pass to functions in the dbus_connection_register_object_path_APIParam_3.', 'dbus_connection_register_object_path_apiparam_4 be data pass function dbus_connection_register_object_path_apiparam_3']
['Utility function to convert a machine-readable (not translated) string into a D-Bus message type.', 'utility function convert machine_readable string into d_bus message type']
["It is your job to close them when you don't need them anymore.", 'be -PRON- job close -PRON- when -PRON- need -PRON- anymore']
['dbus_connection_get_is_connected_APIName returns TRUE if the dbus_connection_get_is_connected_APIParam_1 is still alive.', 'dbus_connection_get_is_connected_apiname return true if dbus_connection_get_is_connected_apiparam_1 be still alive']
['dbus_message_get_destination_APIParam_1 is the dbus_message_get_destination_APIParam_1.', 'dbus_message_get_destination_apiparam_1 be dbus_message_get_destination_apiparam_1']
["This function only works for connections that authenticated as a UNIX user, right now that includes all bus connections, but it's very possible to have connections with no associated UID.", 'function only work connection authenticate as unix user , right now include bus connection , but be possible have connection no associated uid']
['Whenever a timeout is toggled, its interval may change.', 'whenever timeout be toggle , interval change']
['dbus_watch_set_data_APIParam_3 is function to be called to free the dbus_watch_set_data_APIParam_2.', 'dbus_watch_set_data_apiparam_3 be function be call free dbus_watch_set_data_apiparam_2']
['Gets the approximate number of uni fds of all messages in the outgoing message queue.', 'get approximate number uni fds message outgoing message queue']
['DBUS_RELEASE_NAME_REPLY_NON_EXISTENT which means nobody owned the dbus_bus_release_name_APIParam_2.', 'dbus_release_name_reply_non_existent which mean nobody own dbus_bus_release_name_apiparam_2']
['However, dbus_connection_dispatch_APIName MUST NOT BE CALLED from inside the DBusDispatchStatusFunction.', 'however , dbus_connection_dispatch_apiname must be call inside dbusdispatchstatusfunction']
['dbus_connection_set_route_peer_messages_APIParam_1 is the dbus_connection_set_route_peer_messages_APIParam_1.', 'dbus_connection_set_route_peer_messages_apiparam_1 be dbus_connection_set_route_peer_messages_apiparam_1']
['When connecting to an dbus_parse_address_APIParam_1, the first dbus_parse_address_APIParam_1 entries in the semicolon-separated list should be tried first.', 'when connect dbus_parse_address_apiparam_1 , first dbus_parse_address_apiparam_1 entry semicolon_separated list should be try first']
['In the latter case, a warning is logged.', 'latter case , warning be log']
['Creates a new dbus_message_copy_APIParam_1 that is an exact replica of the dbus_message_copy_APIParam_1 specified, except that its refcount is set to 1, its dbus_message_copy_APIParam_1 serial is reset to 0, and if the original dbus_message_copy_APIParam_1 was "locked" (in the outgoing dbus_message_copy_APIParam_1 queue and thus not modifiable) the new dbus_message_copy_APIParam_1 will not be locked.', 'create dbus_message_copy_apiparam_1 be exact replica dbus_message_copy_apiparam_1 specify , except refcount be set 1 , dbus_message_copy_apiparam_1 serial be reset 0 , if original dbus_message_copy_apiparam_1 be lock dbus_message_copy_apiparam_1 be lock']
['dbus_server_listen_APIName returns NULL and sets dbus_server_listen_APIParam_2 if listening fails for any reason.', 'dbus_server_listen_apiname return null set dbus_server_listen_apiparam_2 if listen fail reason']
['The possible result codes are as follows.', 'possible result code be as follow']
['dbus_timeout_handle_APIName should be called repeatedly, each time the interval elapses, starting after it has elapsed once.', 'dbus_timeout_handle_apiname should be call repeatedly , each time interval elapse , start after have elapse once']
["It's hard to use this function safely on shared connections (created by dbus_connection_open_APIName ) in a multithreaded application, because only one registration attempt can be sent to the bus.", 'be hard function safely share connection multithreade application , because only one registration attempt can be send bus']
['dbus_connection_read_write_dispatch_APIParam_1 is the dbus_connection_read_write_dispatch_APIParam_1.', 'dbus_connection_read_write_dispatch_apiparam_1 be dbus_connection_read_write_dispatch_apiparam_1']
['a message has been queued for writing).', 'message have queue write']
['dbus_connection_get_is_anonymous_APIName returns TRUE if not authenticated or authenticated as anonymous.', 'dbus_connection_get_is_anonymous_apiname return true if authenticate or authenticate as anonymous']
['DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER happens if an application requests a dbus_bus_request_name_APIParam_2 it already owns.', 'dbus_request_name_reply_already_owne happen if application request dbus_bus_request_name_apiparam_2 already own']
['dbus_message_get_interface_APIParam_1 is the dbus_message_get_interface_APIParam_1.', 'dbus_message_get_interface_apiparam_1 be dbus_message_get_interface_apiparam_1']
['Stores a pointer on a DBusServer , along with an optional function to be used for freeing the dbus_server_set_data_APIParam_3 when the dbus_server_set_data_APIParam_3 is set again, or when the dbus_server_set_data_APIParam_1 is finalized.', 'store pointer dbusserver , along optional function be use free dbus_server_set_data_apiparam_3 when dbus_server_set_data_apiparam_3 be set again , or when dbus_server_set_data_apiparam_1 be finalize']
['dbus_watch_set_data_APIParam_1 is the DBusWatch object.', 'dbus_watch_set_data_apiparam_1 be dbuswatch object']
['dbus_message_is_signal_APIParam_3 is the name to check (must not be NULL ).', 'dbus_message_is_signal_apiparam_3 be name check must be null']
['dbus_bus_remove_match_APIParam_1 is dbus_bus_remove_match_APIParam_1 to the message bus.', 'dbus_bus_remove_match_apiparam_1 be dbus_bus_remove_match_apiparam_1 message bus']
['dbus_message_marshal_APIParam_2 is the location to save the marshalled form to.', 'dbus_message_marshal_apiparam_2 be location save marshal form']
['dbus_server_set_timeout_functions_APIName returns FALSE on failure (no memory).', 'dbus_server_set_timeout_functions_apiname return false failure no memory']
['Always returns FALSE prior to authenticating the dbus_connection_get_adt_audit_session_data_APIParam_1.', 'always return false prior authenticate dbus_connection_get_adt_audit_session_data_apiparam_1']
['Gets the unique name of the connection which originated this dbus_message_get_sender_APIParam_1, or NULL if unknown or inapplicable.', 'get unique name connection which originate dbus_message_get_sender_apiparam_1 , or null if unknown or inapplicable']
['However, it remains valid to call dbus_message_iter_abandon_container_if_open_APIName .', 'however , remain valid call dbus_message_iter_abandon_container_if_open_apiname']
['dbus_connection_remove_filter_APIParam_1 is the dbus_connection_remove_filter_APIParam_1.', 'dbus_connection_remove_filter_apiparam_1 be dbus_connection_remove_filter_apiparam_1']
['dbus_message_get_args_APIParam_2 is dbus_message_get_args_APIParam_2 to be filled in on failure.', 'dbus_message_get_args_apiparam_2 be dbus_message_get_args_apiparam_2 be fill failure']
['dbus_server_set_watch_functions_APIParam_6 is function to be called to free the dbus_server_set_watch_functions_APIParam_5.', 'dbus_server_set_watch_functions_apiparam_6 be function be call free dbus_server_set_watch_functions_apiparam_5']
['However, the dbus_connection_set_windows_user_function_APIParam_2 will never be called, because there is no way right now to authenticate as a Windows user on UNIX.', 'however , dbus_connection_set_windows_user_function_apiparam_2 never be call , because be no way right now authenticate as window user unix']
['dbus_server_disconnect_APIParam_1 is the dbus_server_disconnect_APIParam_1.', 'dbus_server_disconnect_apiparam_1 be dbus_server_disconnect_apiparam_1']
['Because this only queues the dbus_connection_send_APIParam_2, the only reason it can fail is lack of memory.', 'because only queue dbus_connection_send_apiparam_2 , only reason can fail be lack memory']
['The ID is not a UUID in the sense of RFC4122; the details are explained in the D-Bus specification.', 'identifi be uuid sense rfc4122 ; detail be explain d_bus specification']
['All basic-typed values are guaranteed to fit in a DBusBasicValue , so in versions of libdbus that have that type, you can write code like this: DBusBasicValue dbus_message_iter_get_basic_APIParam_2; int type; dbus_message_iter_get_basic_APIName (&read_iter, &value); type = dbus_message_iter_get_arg_type (&read_iter); dbus_message_iter_append_basic (&write_iter, type, &value); (All D-Bus basic types are either numeric and 8 bytes or smaller, or behave like a string; so in older versions of libdbus, DBusBasicValue can be replaced with union { char *string; unsigned char bytes[8]; }, for instance.)', 'basic_typed value be guarantee fit dbusbasicvalue , so version libdbus have type , -PRON- can write code like : dbusbasicvalue dbus_message_iter_get_basic_apiparam_2 ; int type ; dbus_message_iter_get_basic_apiname ; type dbus_message_iter_get_arg_type ; dbus_message_iter_append_basic ; d_bus basic type be either numeric # byte or small , or behave like string ; so old version libdbus , dbusbasicvalue can be replace union char string ; unsigned char byte 8 ; , instance']
['dbus_bus_start_service_by_name_APIParam_3 is the dbus_bus_start_service_by_name_APIParam_3 (should always be 0 for now).', 'dbus_bus_start_service_by_name_apiparam_3 be dbus_bus_start_service_by_name_apiparam_3 should always be # now']
['dbus_watch_get_enabled_APIName returns TRUE if the dbus_watch_get_enabled_APIParam_1 is enabled.', 'dbus_watch_get_enabled_apiname return true if dbus_watch_get_enabled_apiparam_1 be enable']
['It must not be closed again with this function, or abandoned with dbus_message_iter_abandon_container_APIName .', 'must be close again function , or abandon dbus_message_iter_abandon_container_apiname']
['The returned dbus_bus_start_service_by_name_APIParam_4 will be one of be one of DBUS_START_REPLY_SUCCESS or DBUS_START_REPLY_ALREADY_RUNNING if successful.', 'return dbus_bus_start_service_by_name_apiparam_4 be one be one dbus_start_reply_success or dbus_start_reply_already_runn if successful']
['dbus_message_has_member_APIName returns TRUE if there is a dbus_message_has_member_APIParam_2 field in the header.', 'dbus_message_has_member_apiname return true if be dbus_message_has_member_apiparam_2 field header']
['dbus_connection_send_preallocated_APIParam_4 is return location for client serial assigned to the dbus_connection_send_preallocated_APIParam_3.', 'dbus_connection_send_preallocated_apiparam_4 be return location client serial assign dbus_connection_send_preallocated_apiparam_3']
['Sets the watch functions for the dbus_connection_set_watch_functions_APIParam_1.', 'set watch function dbus_connection_set_watch_functions_apiparam_1']
['dbus_server_set_auth_mechanisms_APIParam_2 is NULL -terminated array of dbus_server_set_auth_mechanisms_APIParam_2.', 'dbus_server_set_auth_mechanisms_apiparam_2 be null terminate array dbus_server_set_auth_mechanisms_apiparam_2']
['it will return FALSE for all types this implementation does not know, including invalid or reserved types.', 'return false type implementation do know , include invalid or reserve type']
['dbus_signature_iter_get_element_type_APIName returns current array element type.', 'dbus_signature_iter_get_element_type_apiname return current array element type']
['dbus_message_append_args_APIParam_1 is the dbus_message_append_args_APIParam_1.', 'dbus_message_append_args_apiparam_1 be dbus_message_append_args_apiparam_1']
['The dbus_message_set_data_APIParam_2 number must have been allocated with dbus_message_allocate_data_slot_APIName .', 'dbus_message_set_data_apiparam_2 number must have allocate dbus_message_allocate_data_slot_apiname']
['dbus_server_set_timeout_functions_APIParam_2 is function to add a timeout.', 'dbus_server_set_timeout_functions_apiparam_2 be function add timeout']
['dbus_setenv_APIParam_1 is name of environment variable.', 'dbus_setenv_apiparam_1 be name environment variable']
['dbus_message_iter_next_APIParam_1 is the message dbus_message_iter_next_APIParam_1.', 'dbus_message_iter_next_apiparam_1 be message dbus_message_iter_next_apiparam_1']
['For private connections, the creator of the dbus_connection_unref_APIParam_1 must arrange for dbus_connection_close_APIName to be called prior to dropping the last reference.', 'private connection , creator dbus_connection_unref_apiparam_1 must arrange dbus_connection_close_apiname be call prior drop last reference']
['dbus_connection_send_APIName returns TRUE on success.', 'dbus_connection_send_apiname return true success']
['As long as the dbus_connection_read_write_APIParam_1 is open, this function will block until it can read or write, then read or write, then return TRUE .', 'as long as dbus_connection_read_write_apiparam_1 be open , function block until can read or write , then read or write , then return true']
['Appends a block of fixed-length values to an array.', 'appends block fixed_length value array']
['Be careful about calling dbus_connection_dispatch_APIName from inside a message handler, i.e.', 'be careful about call dbus_connection_dispatch_apiname inside message handler , i']
["If you don't want to make up an error name just use DBUS_ERROR_FAILED .", 'if -PRON- want make up error name just dbus_error_faile']
['If a shared connection is open, calling dbus_shutdown_APIName will drain its queue of messages and disconnect it.', 'if share connection be open , call dbus_shutdown_apiname drain queue message disconnect']
['Always returns -1 on Windows.', 'always return # window']
['dbus_parse_address_APIParam_4 is dbus_parse_address_APIParam_1 where an dbus_parse_address_APIParam_4 can be returned.', 'dbus_parse_address_apiparam_4 be dbus_parse_address_apiparam_1 where dbus_parse_address_apiparam_4 can be return']
['If a connection to the bus already exists, then that connection is returned.', 'if connection bus already exist , then connection be return']
['dbus_message_iter_get_element_count_APIName returns the number of elements in the array.', 'dbus_message_iter_get_element_count_apiname return number element array']
['Demarshal a D-Bus message from the format described in the D-Bus specification.', 'demarshal d_bus message format describe d_bus specification']
['dbus_message_get_serial_APIParam_1 is the dbus_message_get_serial_APIParam_1.', 'dbus_message_get_serial_apiparam_1 be dbus_message_get_serial_apiparam_1']
['dbus_message_iter_open_container_APIParam_2 is the dbus_message_iter_open_container_APIParam_2 of the value.', 'dbus_message_iter_open_container_apiparam_2 be dbus_message_iter_open_container_apiparam_2 value']
['Other than its deficient error reporting, this function is the same as dbus_try_get_local_machine_id_APIName .', 'other than deficient error reporting , function be as dbus_try_get_local_machine_id_apiname']
['dbus_message_is_signal_APIParam_1 is the dbus_message_is_signal_APIParam_1.', 'dbus_message_is_signal_apiparam_1 be dbus_message_is_signal_apiparam_1']
['dbus_message_is_error_APIParam_2 is the name to check (must not be NULL ).', 'dbus_message_is_error_apiparam_2 be name check must be null']
['the bus does not persistently associate it with the connection-name pair.', 'bus do persistently associate connection_name pair']
['dbus_move_error_APIParam_2 is the destination error or NULL.', 'dbus_move_error_apiparam_2 be destination error or null']
['Free the returned array with dbus_free_string_array_APIName .', 'free return array dbus_free_string_array_apiname']
['dbus_address_entry_get_value_APIParam_1 is the dbus_address_entry_get_value_APIParam_1.', 'dbus_address_entry_get_value_apiparam_1 be dbus_address_entry_get_value_apiparam_1']
['The name is fully-qualified (namespaced).', 'name be fully_qualifi namespace']
['Processing has three steps.', 'processing have three step']
['dbus_error_init_APIParam_1 is the DBusError .', 'dbus_error_init_apiparam_1 be dbuserror']
['The returned UID is the UID the dbus_connection_get_unix_user_APIParam_1 authenticated as.', 'return uid be uid dbus_connection_get_unix_user_apiparam_1 authenticate as']
['dbus_connection_set_max_received_size_APIParam_2 is the maximum dbus_connection_set_max_received_size_APIParam_2 in bytes of all outstanding messages.', 'dbus_connection_set_max_received_size_apiparam_2 be maximum dbus_connection_set_max_received_size_apiparam_2 byte outstanding message']
['Right now the returned descriptor is always a socket, but that is not guaranteed.', 'right now return descriptor be always socket , but be guarantee']
['This function will always return an dbus_bus_get_unix_user_APIParam_3 on Windows.', 'function always return dbus_bus_get_unix_user_apiparam_3 window']
['For quick reference, the dbus_bus_request_name_APIParam_3 and result codes are discussed here, but the specification is the canonical version of this information.', 'quick reference , dbus_bus_request_name_apiparam_3 result code be discuss here , but specification be canonical version information']
['dbus_malloc0_APIParam_1 is number of dbus_malloc0_APIParam_1 to allocate.', 'dbus_malloc0_apiparam_1 be number dbus_malloc0_apiparam_1 allocate']
['The "rule" argument is the string form of a match dbus_bus_add_match_APIParam_2.', 'rule argument be stre form match dbus_bus_add_match_apiparam_2']
['The given dbus_connection_register_object_path_APIParam_3 handles messages sent to exactly the given dbus_connection_register_object_path_APIParam_2.', 'give dbus_connection_register_object_path_apiparam_3 handle message send exactly give dbus_connection_register_object_path_apiparam_2']
['dbus_connection_set_wakeup_main_function_APIParam_4 is function to be called to free the dbus_connection_set_wakeup_main_function_APIParam_3.', 'dbus_connection_set_wakeup_main_function_apiparam_4 be function be call free dbus_connection_set_wakeup_main_function_apiparam_3']
['Use dbus_message_iter_get_element_count_APIName instead.', 'dbus_message_iter_get_element_count_apiname instead']
["dbus_connection_try_register_fallback_APIParam_2 is a '/' delimited string of dbus_connection_try_register_fallback_APIParam_2 elements.", 'dbus_connection_try_register_fallback_apiparam_2 be delimit string dbus_connection_try_register_fallback_apiparam_2 element']
['Sets the authentication dbus_server_set_auth_mechanisms_APIParam_2 that this dbus_server_set_auth_mechanisms_APIParam_1 offers to clients, as a NULL -terminated array of mechanism names.', 'set authentication dbus_server_set_auth_mechanisms_apiparam_2 dbus_server_set_auth_mechanisms_apiparam_1 offer client , as null terminate array mechanism name']
['Unix file descriptors that are read with this function will have the FD_CLOEXEC flag set.', 'unix file descriptor be read function have fd_cloexec flag set']
['In general, each mode of connecting to a given server will have its own ID.', 'general , each mode connect give server have identifi']
['dbus_free_string_array_APIParam_1 is the array to be freed.', 'dbus_free_string_array_apiparam_1 be array be free']
['Instead, let the main loop invoke dbus_connection_dispatch_APIName .', 'instead , let main loop invoke dbus_connection_dispatch_apiname']
['dbus_connection_set_dispatch_status_function_APIParam_3 is dbus_connection_set_dispatch_status_function_APIParam_3 for dbus_connection_set_dispatch_status_function_APIParam_2.', 'dbus_connection_set_dispatch_status_function_apiparam_3 be dbus_connection_set_dispatch_status_function_apiparam_3 dbus_connection_set_dispatch_status_function_apiparam_2']
['DBUS_NAME_FLAG_ALLOW_REPLACEMENT and DBUS_NAME_FLAG_DO_NOT_QUEUE are properties stored by the bus for this dbus_bus_request_name_APIParam_1 with respect to each requested bus dbus_bus_request_name_APIParam_2.', 'dbus_name_flag_allow_replacement dbus_name_flag_do_not_queue be property store by bus dbus_bus_request_name_apiparam_1 respect each request bus dbus_bus_request_name_apiparam_2']
['Increments the reference count of a DBusMessage .', 'increment reference count dbusmessage']
['The MINOR is an odd number for development releases and an even number for stable releases.', 'minor be odd number development release even number stable release']
['Creates a new message that is an error reply to another message, allowing you to use printf formatting.', 'create message be error reply another message , allow -PRON- printf format']
['Note This function does not take the main thread lock on DBusConnection , which allows it to be used from inside watch and timeout functions.', 'note function do take main thread lock dbusconnection , which allow be use inside watch timeout function']
['Get the UNIX file descriptor of the dbus_connection_get_unix_fd_APIParam_1, if any.', 'get unix file descriptor dbus_connection_get_unix_fd_apiparam_1 , if']
['If it is called, D-Bus will do locking, at some cost in efficiency.', 'if be call , d_bus locking , cost efficiency']
['For example with Qt you might store the QSocketNotifier for this dbus_watch_set_data_APIParam_1 and with GLib you might store a GSource.', 'example qt -PRON- may store qsocketnotifi dbus_watch_set_data_apiparam_1 glib -PRON- may store gsource']
['dbus_connection_set_unix_user_function_APIParam_4 is dbus_connection_set_unix_user_function_APIParam_2 to free the dbus_connection_set_unix_user_function_APIParam_3.', 'dbus_connection_set_unix_user_function_apiparam_4 be dbus_connection_set_unix_user_function_apiparam_2 free dbus_connection_set_unix_user_function_apiparam_3']
['dbus_connection_set_max_received_size_APIParam_1 is the dbus_connection_set_max_received_size_APIParam_1.', 'dbus_connection_set_max_received_size_apiparam_1 be dbus_connection_set_max_received_size_apiparam_1']
['dbus_type_is_valid_APIParam_1 is a potential type-code.', 'dbus_type_is_valid_apiparam_1 be potential type_code']
['Check an interface dbus_validate_interface_APIParam_1 for validity.', 'check interface dbus_validate_interface_apiparam_1 validity']
["This function is suitable for validating C strings, but is not suitable for validating untrusted data from a network unless the string's length is also checked, since it assumes that the string ends at the first zero byte according to normal C conventions.", 'function be suitable validate c string , but be suitable validate untrusted datum network unless string length be check , since assume string end first zero byte accord normal c convention']
['dbus_connection_get_unix_fd_APIParam_1 is the dbus_connection_get_unix_fd_APIParam_1.', 'dbus_connection_get_unix_fd_apiparam_1 be dbus_connection_get_unix_fd_apiparam_1']
['This function must be called on the server side of a dbus_connection_set_allow_anonymous_APIParam_1 when the dbus_connection_set_allow_anonymous_APIParam_1 is first seen in the DBusNewConnectionFunction .', 'function must be call server side dbus_connection_set_allow_anonymous_apiparam_1 when dbus_connection_set_allow_anonymous_apiparam_1 be first see dbusnewconnectionfunction']
['This function is safe with untrusted data.', 'function be safe untrusted datum']
['dbus_connection_set_windows_user_function_APIParam_1 is the dbus_connection_set_windows_user_function_APIParam_1.', 'dbus_connection_set_windows_user_function_apiparam_1 be dbus_connection_set_windows_user_function_apiparam_1']
['dbus_server_set_timeout_functions_APIParam_1 is the dbus_server_set_timeout_functions_APIParam_1.', 'dbus_server_set_timeout_functions_apiparam_1 be dbus_server_set_timeout_functions_apiparam_1']
['Indeed, almost any reentrancy in this dbus_connection_set_dispatch_status_function_APIParam_2 is a bad idea.', 'indeed , almost reentrancy dbus_connection_set_dispatch_status_function_apiparam_2 be bad idea']
['dbus_message_get_data_APIParam_1 is the dbus_message_get_data_APIParam_1.', 'dbus_message_get_data_apiparam_1 be dbus_message_get_data_apiparam_1']
["There is one exception here: although DBUS_TYPE_UNIX_FD is considered a 'fixed' type arrays of this type may not be read with this function.", 'be one exception here : although dbus_type_unix_fd be consider fix type arrays type be read function']
['dbus_message_set_member_APIParam_1 is the dbus_message_set_member_APIParam_1.', 'dbus_message_set_member_apiparam_1 be dbus_message_set_member_apiparam_1']
['The allocated ID may then be used with dbus_connection_set_data_APIName and dbus_connection_get_data_APIName .', 'allocate identifier then be use dbus_connection_set_data_apiname dbus_connection_get_data_apiname']
['Registers a handler for a given dbus_connection_try_register_object_path_APIParam_2 in the object hierarchy.', 'register handler give dbus_connection_try_register_object_path_apiparam_2 object hierarchy']
['dbus_message_get_container_instance_APIName returns the path (should not be freed) or NULL.', 'dbus_message_get_container_instance_apiname return path or null']
['This should only be used to abandon creation of a message when you have open containers.', 'should only be use abandon creation message when -PRON- have open container']
['This function behaves exactly like dbus_connection_set_timeout_functions_APIName ; see the documentation for that routine.', 'function behave exactly like dbus_connection_set_timeout_functions_apiname ; see documentation routine']
['dbus_message_has_sender_APIName returns TRUE if the dbus_message_has_sender_APIParam_1 has the given sender.', 'dbus_message_has_sender_apiname return true if dbus_message_has_sender_apiparam_1 have give sender']
['dbus_connection_has_messages_to_send_APIParam_1 is the dbus_connection_has_messages_to_send_APIParam_1.', 'dbus_connection_has_messages_to_send_apiparam_1 be dbus_connection_has_messages_to_send_apiparam_1']
['dbus_move_error_APIParam_1 is the source error.', 'dbus_move_error_apiparam_1 be source error']
['dbus_connection_steal_borrowed_message_APIParam_1 is the dbus_connection_steal_borrowed_message_APIParam_1.', 'dbus_connection_steal_borrowed_message_apiparam_1 be dbus_connection_steal_borrowed_message_apiparam_1']
['dbus_watch_get_fd_APIName returns the file descriptor to dbus_watch_get_fd_APIParam_1.', 'dbus_watch_get_fd_apiname return file descriptor dbus_watch_get_fd_apiparam_1']
['Unlike dbus_bus_get_APIName , always creates a new connection.', 'unlike dbus_bus_get_apiname , always create connection']
['dbus_message_get_args_APIParam_3 is the first argument type ... location for first argument value, then list of type-location pairs.', 'dbus_message_get_args_apiparam_3 be first argument type ... location first argument value , then list type_location pair']
['dbus_message_set_path_APIParam_2 is the path or NULL to unset.', 'dbus_message_set_path_apiparam_2 be path or null unset']
['There is a lock that covers all ways of accessing the incoming message queue, so dbus_connection_dispatch_APIName , dbus_connection_pop_message_APIName , dbus_connection_borrow_message_APIName , etc.', 'be lock cover way access incoming message queue , so dbus_connection_dispatch_apiname , dbus_connection_pop_message_apiname , dbus_connection_borrow_message_apiname , etc']
['Gets data previously set with dbus_watch_set_data_APIName or NULL if none.', 'get datum previously set dbus_watch_set_data_apiname or null if none']
['The allocated slot is global, i.e.', 'allocate slot be global , i']
['The dbus_server_set_data_APIParam_2 number must have been allocated with dbus_server_allocate_data_slot_APIName .', 'dbus_server_set_data_apiparam_2 number must have allocate dbus_server_allocate_data_slot_apiname']
['dbus_connection_set_windows_user_function_APIParam_4 is dbus_connection_set_windows_user_function_APIParam_2 to free the dbus_connection_set_windows_user_function_APIParam_3.', 'dbus_connection_set_windows_user_function_apiparam_4 be dbus_connection_set_windows_user_function_apiparam_2 free dbus_connection_set_windows_user_function_apiparam_3']
['dbus_connection_open_private_APIParam_2 is dbus_connection_open_private_APIParam_1 where an dbus_connection_open_private_APIParam_2 can be returned.', 'dbus_connection_open_private_apiparam_2 be dbus_connection_open_private_apiparam_1 where dbus_connection_open_private_apiparam_2 can be return']
['You can ask the bus to tell you the UID of another dbus_connection_get_unix_user_APIParam_1 though if you like; this is done with dbus_bus_get_unix_user_APIName .', 'PRON- can ask bus tell -PRON- uid another dbus_connection_get_unix_user_apiparam_1 though if -PRON- like ; be do dbus_bus_get_unix_user_apiname']
['So check for errors and do something sensible if they happen.', 'so check error something sensible if happen']
['dbus_message_get_args_APIName returns FALSE if the dbus_message_get_args_APIParam_2 was set.', 'dbus_message_get_args_apiname return false if dbus_message_get_args_apiparam_2 be set']
['dbus_address_entry_get_value_APIName returns the dbus_address_entry_get_value_APIParam_2 value.', 'dbus_address_entry_get_value_apiname return dbus_address_entry_get_value_apiparam_2 value']
['Gets the unique name of the dbus_bus_get_unique_name_APIParam_1 as assigned by the message bus.', 'get unique name dbus_bus_get_unique_name_apiparam_1 as assign by message bus']
['(Note that if the dbus_connection_get_is_anonymous_APIParam_1 was authenticated as anonymous then disconnected, this function still returns TRUE .)', 'note if dbus_connection_get_is_anonymous_apiparam_1 be authenticate as anonymous then disconnect , function still return true']
['This version previously allowed user-specified threading primitives, but since D-Bus 1.6 it ignores them and behaves exactly like dbus_threads_init_default_APIName .', 'version previously allow user_specified threading primitive , but since d_bus # ignore -PRON- behave exactly like dbus_threads_init_default_apiname']
['the next field in a struct, the next value in an array.', 'next field struct , next value array']
['Generally, this function is only useful for encapsulating D-Bus messages in a different protocol.', 'generally , function be only useful encapsulating d_bus message different protocol']
['Namely, an auth mechanism such as ANONYMOUS that supports anonymous auth must be included in the list of available mechanisms for anonymous login to work.', 'namely , auth mechanism such as anonymous support anonymous auth must be include list available mechanism anonymous login work']
['dbus_bus_name_has_owner_APIParam_2 is the dbus_bus_name_has_owner_APIParam_2.', 'dbus_bus_name_has_owner_apiparam_2 be dbus_bus_name_has_owner_apiparam_2']
['See also dbus_message_get_path_APIName .', 'see dbus_message_get_path_apiname']
['Appendable types are basic types, and arrays of fixed-length basic types (except arrays of Unix file descriptors).', 'appendable type be basic type , arrays fixed_length basic type except arrays unix file descriptor']
['If the dbus_connection_get_socket_APIParam_1 is not socket-based, this function will return FALSE, even if the dbus_connection_get_socket_APIParam_1 does have a file descriptor of some kind.', 'if dbus_connection_get_socket_apiparam_1 be socket_based , function return false , even if dbus_connection_get_socket_apiparam_1 do have file descriptor kind']
['If the primary owner releases the dbus_bus_request_name_APIParam_2 or disconnects, then the next owner in the queue atomically takes over.', 'if primary owner release dbus_bus_request_name_apiparam_2 or disconnect , then next owner queue atomically take over']
['dbus_signature_validate_single_APIParam_2 is dbus_signature_validate_single_APIParam_2 return.', 'dbus_signature_validate_single_apiparam_2 be dbus_signature_validate_single_apiparam_2 return']
['dbus_connection_set_wakeup_main_function_APIParam_3 is dbus_connection_set_wakeup_main_function_APIParam_3 to pass dbus_connection_set_wakeup_main_function_APIParam_2.', 'dbus_connection_set_wakeup_main_function_apiparam_3 be dbus_connection_set_wakeup_main_function_apiparam_3 pass dbus_connection_set_wakeup_main_function_apiparam_2']
['Even if the dbus_connection_send_APIParam_1 is disconnected, no error will be returned.', 'even if dbus_connection_send_apiparam_1 be disconnected , no error be return']
['dbus_bus_remove_match_APIParam_3 is location to store any errors.', 'dbus_bus_remove_match_apiparam_3 be location store error']
['Removes a previously-added message filter.', 'remove previously_added message filter']
['dbus_bus_start_service_by_name_APIParam_4 is a place to store the dbus_bus_start_service_by_name_APIParam_4 or NULL.', 'dbus_bus_start_service_by_name_apiparam_4 be place store dbus_bus_start_service_by_name_apiparam_4 or null']
['Checks whether the dbus_message_has_destination_APIParam_1 was sent to the given dbus_message_has_destination_APIParam_2.', 'check whether dbus_message_has_destination_apiparam_1 be send give dbus_message_has_destination_apiparam_2']
["For the system message bus you're guaranteed to be on the same machine since it only listens on a UNIX domain socket (at least, as shipped by default).", 'system message bus -PRON- be guarantee be machine since only listen unix domain socket least , as ship by default']
['Used to return a dbus_connection_return_message_APIParam_2 after peeking at it using dbus_connection_borrow_message_APIName .', 'use return dbus_connection_return_message_apiparam_2 after peek use dbus_connection_borrow_message_apiname']
['dbus_message_iter_recurse_APIParam_2 is the sub-iterator to initialize.', 'dbus_message_iter_recurse_apiparam_2 be sub_iterator initialize']
['DBUS_MESSAGE_TYPE_METHOD_CALL -> "method_call" DBUS_MESSAGE_TYPE_METHOD_RETURN -> "method_return" DBUS_MESSAGE_TYPE_SIGNAL -> "signal" DBUS_MESSAGE_TYPE_ERROR -> "error" DBUS_MESSAGE_TYPE_INVALID -> "invalid"', 'dbus_message_type_method_call method_call dbus_message_type_method_return method_return dbus_message_type_signal signal dbus_message_type_error error dbus_message_type_invalid invalid']
['Frees a NULL -terminated array of strings.', 'free null terminate array string']
['dbus_connection_get_windows_user_APIParam_2 is return location for an allocated copy of the user ID, or NULL if no memory.', 'dbus_connection_get_windows_user_apiparam_2 be return location allocate copy user identifi , or null if no memory']
['Appends a container-typed value to the message.', 'append container_type value message']
['Sets the dbus_message_set_serial_APIParam_2 number of a dbus_message_set_serial_APIParam_1.', 'set dbus_message_set_serial_apiparam_2 number dbus_message_set_serial_apiparam_1']
['dbus_type_is_basic_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID.', 'dbus_type_is_basic_apiparam_1 be either valid type_code or dbus_type_invalid']
["DBUS_NAME_FLAG_DO_NOT_QUEUE means that if you aren't the primary owner, you don't want to be queued up - you only care about being the primary owner.", 'dbus_name_flag_do_not_queue mean if -PRON- be primary owner , -PRON- want be queue up -PRON- only care about primary owner']
['Checks if the dbus_message_has_interface_APIParam_1 has an interface.', 'check if dbus_message_has_interface_apiparam_1 have interface']
['dbus_connection_pop_message_APIName returns next message in the incoming queue.', 'dbus_connection_pop_message_apiname return next message incoming queue']
['Can only be used if you registered with the bus manually (i.e.', 'can only be use if -PRON- register bus manually i']
['Todo: We would like to be able to say "You can ask the bus to tell you the user of another dbus_connection_get_windows_user_APIParam_1 though if you like; this is done with dbus_bus_get_windows_user_APIName."', 'todo : -PRON- would like be able say -PRON- can ask bus tell -PRON- user another dbus_connection_get_windows_user_apiparam_1 though if -PRON- like ; be do dbus_bus_get_windows_user_apiname']
['If a container is an array of fixed-length types (except Unix file descriptors), it is much more efficient to use dbus_message_iter_get_fixed_array_APIName to get the whole array in one shot, rather than individually walking over the array elements.', 'if container be array fixed_length type , be much more efficient dbus_message_iter_get_fixed_array_apiname get whole array one shot , rather than individually walk over array element']
['Use dbus_connection_open_private_APIName to get a dedicated connection not shared with other callers of dbus_connection_open_APIName .', 'dbus_connection_open_private_apiname get dedicated connection share other caller dbus_connection_open_apiname']
['dbus_shutdown_APIName reverses the effects of this function when it resets all global state in libdbus.', 'dbus_shutdown_apiname reverse effect function when reset global state libdbus']
['dbus_message_new_method_call_APIParam_3 is interface to invoke.', 'dbus_message_new_method_call_apiparam_3 be interface invoke']
['Normally DBusConnection automatically handles all messages to the org.freedesktop.DBus.Peer interface.', 'normally dbusconnection automatically handle message interface']
['dbus_watch_get_data_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_data_apiparam_1 be dbuswatch object']
['Sets a flag indicating that an owner for the destination name will be automatically started before the dbus_message_set_auto_start_APIParam_1 is delivered.', 'set flag indicating owner destination name be automatically start before dbus_message_set_auto_start_apiparam_1 be deliver']
['If returning a newly-created connection, this function will block until authentication and bus registration are complete.', 'if return newly_created connection , function block until authentication bus registration be complete']
['dbus_shutdown_APIName does NOT free memory that was returned to the application.', 'dbus_shutdown_apiname do free memory be return application']
['dbus_message_set_auto_start_APIParam_2 is TRUE if auto-starting is desired.', 'dbus_message_set_auto_start_apiparam_2 be true if auto_starte be desire']
["dbus_connection_register_object_path_APIParam_2 is a '/' delimited string of dbus_connection_register_object_path_APIParam_2 elements.", 'dbus_connection_register_object_path_apiparam_2 be delimit string dbus_connection_register_object_path_apiparam_2 element']
['If the dbus_message_has_destination_APIParam_1 has no destination specified or has a different destination, returns FALSE .', 'if dbus_message_has_destination_apiparam_1 have no destination specify or have different destination , return false']
['Note, the returned sender is always the unique bus name.', 'note , return sender be always unique bus name']
['dbus_connection_get_data_APIName and dbus_connection_set_data_APIName may no longer be used with this slot.', 'dbus_connection_get_data_apiname dbus_connection_set_data_apiname no longer be use slot']
['dbus_type_is_valid_APIName returns TRUE if valid.', 'dbus_type_is_valid_apiname return true if valid']
['If a client-side dbus_connection_get_server_id_APIParam_1 is not authenticated yet, the ID may be available if it was included in the server address, but may not be available.', 'if client_side dbus_connection_get_server_id_apiparam_1 be authenticate yet , identifi be available if be include server address , but be available']
['dbus_connection_dispatch_APIName returns dispatch status, see dbus_connection_get_dispatch_status_APIName.', 'dbus_connection_dispatch_apiname return dispatch status , see dbus_connection_get_dispatch_status_apiname']
["A side effect of this is that you need to know there's a reference held on the dbus_connection_get_data_APIParam_1 while invoking dbus_connection_get_data_APIName , or the dbus_connection_get_data_APIParam_1 could be finalized during dbus_connection_get_data_APIName .", 'side effect be -PRON- need know reference hold dbus_connection_get_data_apiparam_1 while invoke dbus_connection_get_data_apiname , or dbus_connection_get_data_apiparam_1 could be finalize during dbus_connection_get_data_apiname']
['Registers a fallback handler for a given subsection of the object hierarchy.', 'register fallback handler give subsection object hierarchy']
['dbus_connection_set_dispatch_status_function_APIParam_4 is free the dbus_connection_set_dispatch_status_function_APIParam_2 dbus_connection_set_dispatch_status_function_APIParam_3.', 'dbus_connection_set_dispatch_status_function_apiparam_4 be free dbus_connection_set_dispatch_status_function_apiparam_2 dbus_connection_set_dispatch_status_function_apiparam_3']
['dbus_message_get_signature_APIName returns the type signature.', 'dbus_message_get_signature_apiname return type signature']
['dbus_message_set_interface_APIName returns FALSE if not enough memory.', 'dbus_message_set_interface_apiname return false if enough memory']
['Allocates an integer ID to be used for storing application-specific data on any DBusConnection .', 'allocate integer identifier be use store application_specific datum dbusconnection']
['dbus_server_ref_APIName returns the dbus_server_ref_APIParam_1.', 'dbus_server_ref_apiname return dbus_server_ref_apiparam_1']
['dbus_message_new_error_printf_APIName returns a new error message.', 'dbus_message_new_error_printf_apiname return error message']
['When using GLib, the DBusAddTimeoutFunction would call g_timeout_add.', 'when use glib , dbusaddtimeoutfunction would call g_timeout_add']
['Also, if we read say 1024 bytes off the wire in a single read_APIName, and that contains a half-dozen small messages, we may exceed the dbus_connection_set_max_received_size_APIParam_2 max by that amount.', 'if -PRON- read say # byte off wire single read_apiname , contain half_dozen small message , -PRON- exceed dbus_connection_set_max_received_size_apiparam_2 max by amount']
['So for integer, "dbus_int32_t**" is expected for example.', 'so integer , dbus_int32_t be expect example']
['dbus_message_get_args_valist_APIParam_4 is return location for first argument, followed by list of type/location pairs.', 'dbus_message_get_args_valist_apiparam_4 be return location first argument , follow by list pair']
['dbus_message_iter_has_next_APIName returns TRUE if there are more fields following.', 'dbus_message_iter_has_next_apiname return true if be more field follow']
['The connection here is private in the sense of dbus_connection_open_private_APIName , so if the new connection dbus_server_set_new_connection_function_APIParam_2 keeps a reference it must arrange for the connection to be closed.', 'connection here be private sense dbus_connection_open_private_apiname , so if connection dbus_server_set_new_connection_function_apiparam_2 keep reference must arrange connection be close']
['If this function fails, the sub-iterator remains invalid, and must not be closed with dbus_message_iter_close_container_APIName or abandoned with dbus_message_iter_abandon_container_APIName .', 'if function fail , sub_iterator remain invalid , must be close dbus_message_iter_close_container_apiname or abandon dbus_message_iter_abandon_container_apiname']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_error_name_APIParam_2 dbus_validate_error_name_APIParam_1 and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_error_name_apiparam_2 dbus_validate_error_name_apiparam_1 message']
['The returned string becomes invalid if the dbus_message_get_error_name_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_error_name_APIParam_1 data.', 'return string become invalid if dbus_message_get_error_name_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_error_name_apiparam_1 datum']
['If you need to parse messages with arrays of Unix file descriptors you need to recurse into the array manually.', 'if -PRON- need parse message arrays unix file descriptor -PRON- need recurse into array manually']
['The rule in a multithreaded app, then, is that dbus_bus_register_APIName must be used to register, or you need to have your own locks that all threads in the app will respect.', 'rule multithreade app , then , be dbus_bus_register_apiname must be use register , or -PRON- need have -PRON- lock thread app respect']
['This function bypasses any message handlers that are registered, and so using it is usually wrong.', 'function bypass message handler be register , so use be usually wrong']
['Connections may own multiple other bus names, but those are not found in the sender field.', 'connection multiple other bus name , but be find sender field']
['Sets a notification dbus_pending_call_set_notify_APIParam_2 to be called when the reply is received or the dbus_pending_call_set_notify_APIParam_1 call times out.', 'set notification dbus_pending_call_set_notify_apiparam_2 be call when reply be receive or dbus_pending_call_set_notify_apiparam_1 call time out']
["Then any editor that can be the user's editor should specify DBUS_NAME_FLAG_REPLACE_EXISTING to either take over (last-started-wins) or be queued up (first-started-wins) according to whether DBUS_NAME_FLAG_ALLOW_REPLACEMENT was given.", 'then editor can be user editor should specify dbus_name_flag_replace_existing either take over or be queue up accord whether dbus_name_flag_allow_replacement be give']
['The dbus_message_new_method_call_APIParam_1 may be NULL in which case no dbus_message_new_method_call_APIParam_1 is set; this is appropriate when using D-Bus in a peer-to-peer context (no message bus).', 'dbus_message_new_method_call_apiparam_1 be null which case no dbus_message_new_method_call_apiparam_1 be set ; be appropriate when use d_bus peer_to_peer context no message bus']
['DBUS_TYPE_STRING , DBUS_TYPE_ARRAY ).', 'dbus_type_string , dbus_type_array']
['Lists the registered fallback handlers and object path handlers at the given dbus_connection_list_registered_APIParam_2.', 'list register fallback handler object path handler give dbus_connection_list_registered_apiparam_2']
['The toggled function may be NULL if a main loop re-queries dbus_timeout_get_enabled_APIName every time anyway.', 'toggle function be null if main loop re_queries dbus_timeout_get_enabled_apiname every time anyway']
['If this function obtains a new connection object never before returned from dbus_bus_get_APIName , it will call dbus_connection_set_exit_on_disconnect_APIName , so the application will exit if the connection closes.', 'if function obtain connection object never before return dbus_bus_get_apiname , call dbus_connection_set_exit_on_disconnect_apiname , so application exit if connection close']
["There's really no point creating pain for yourself by doing things manually.", 'really no point create pain -PRON- by do thing manually']
['When an incoming dbus_connection_set_unix_user_function_APIParam_1 has authenticated with a particular user ID, this dbus_connection_set_unix_user_function_APIParam_2 is called; if it returns TRUE , the dbus_connection_set_unix_user_function_APIParam_1 is allowed to proceed, otherwise the dbus_connection_set_unix_user_function_APIParam_1 is disconnected.', 'when incoming dbus_connection_set_unix_user_function_apiparam_1 have authenticate particular user identifi , dbus_connection_set_unix_user_function_apiparam_2 be call ; if return true , dbus_connection_set_unix_user_function_apiparam_1 be allow proceed , otherwise dbus_connection_set_unix_user_function_apiparam_1 be disconnect']
['Always returns FALSE prior to authenticating the dbus_connection_get_unix_process_id_APIParam_1.', 'always return false prior authenticate dbus_connection_get_unix_process_id_apiparam_1']
['dbus_connection_set_watch_functions_APIParam_6 is function to be called to free the dbus_connection_set_watch_functions_APIParam_5.', 'dbus_connection_set_watch_functions_apiparam_6 be function be call free dbus_connection_set_watch_functions_apiparam_5']
['If the dbus_message_is_error_APIParam_1 is not DBUS_MESSAGE_TYPE_ERROR , or has a different name, returns FALSE .', 'if dbus_message_is_error_apiparam_1 be dbus_message_type_error , or have different name , return false']
['Calls the dbus_timeout_handle_APIParam_1 handler for this dbus_timeout_handle_APIParam_1.', 'call dbus_timeout_handle_apiparam_1 handler dbus_timeout_handle_apiparam_1']
['When this flag is set, the dbus_message_set_auto_start_APIParam_1 is held until a name owner finishes starting up, or fails to start up.', 'when flag be set , dbus_message_set_auto_start_apiparam_1 be hold until name owner finish start up , or fail start up']
['The returned block will be from the current position in the array until the end of the array.', 'return block be current position array until end array']
['const dbus_int32_t array[] = { 1, 2, 3 }; const dbus_int32_t *v_ARRAY = array; if (!', 'const dbus_int32_t array 1 , 2 , # ; const dbus_int32_t v_array array ; if']
['When using GLib, the DBusAddWatchFunction could call g_io_add_watch_APIName, or could be used as part of a more elaborate GSource.', 'when use glib , dbusaddwatchfunction could call g_io_add_watch_apiname , or could be use as part more elaborate gsource']
['For integer, dbus_int32_t*.', 'integer , dbus_int32_t']
['dbus_error_is_set_APIName returns TRUE if an dbus_error_is_set_APIParam_1 occurred.', 'dbus_error_is_set_apiname return true if dbus_error_is_set_apiparam_1 occur']
['dbus_connection_get_max_message_unix_fds_APIName returns the max numer of unix fds of a single message.', 'dbus_connection_get_max_message_unix_fds_apiname return max numer unix fds single message']
['Typically just letting the dbus_timeout_handle_APIParam_1 fire again next time it naturally times out is an adequate response to that problem, but you could try to do more if you wanted.', 'typically just let dbus_timeout_handle_apiparam_1 fire again next time naturally time out be adequate response problem , but -PRON- could try more if -PRON- want']
['Gets the value set by dbus_connection_set_max_received_unix_fds_APIName .', 'get value set by dbus_connection_set_max_received_unix_fds_apiname']
["Destination, dbus_message_new_method_call_APIParam_2, interface, and dbus_message_new_method_call_APIParam_4 name can't contain any invalid characters (see the D-Bus specification).", 'destination , dbus_message_new_method_call_apiparam_2 , interface , dbus_message_new_method_call_apiparam_4 name can contain invalid character see d_bus specification']
['dbus_message_set_serial_APIParam_1 is the dbus_message_set_serial_APIParam_1.', 'dbus_message_set_serial_apiparam_1 be dbus_message_set_serial_apiparam_1']
['Deallocates a global ID for message data slots.', 'deallocate global identifi message datum slot']
['Matching on interface is tricky because method call messages only optionally specify the interface.', 'match interface be tricky because method call message only optionally specify interface']
["Drops the dbus library's internal reference to the DBusPendingCall so will free the call if nobody else is holding a reference.", 'drop dbus library internal reference dbuspendingcall so free call if nobody else be hold reference']
['Because this connection is shared, no user of the connection may call dbus_connection_close_APIName .', 'because connection be share , no user connection call dbus_connection_close_apiname']
['dbus_connection_dispatch_APIName will block if called while a borrowed message is outstanding; only one piece of code can be playing with the incoming queue at a time.', 'dbus_connection_dispatch_apiname block if call while borrow message be outstanding ; only one piece code can be play incoming queue time']
['dbus_message_set_error_name_APIParam_2 is the name or NULL to unset.', 'dbus_message_set_error_name_apiparam_2 be name or null unset']
['Messages from the bus itself will have DBUS_SERVICE_DBUS as the sender.', 'message bus have dbus_service_dbus as sender']
['dbus_connection_set_data_APIName returns TRUE if there was enough memory to store the dbus_connection_set_data_APIParam_3.', 'dbus_connection_set_data_apiname return true if be enough memory store dbus_connection_set_data_apiparam_3']
['dbus_server_set_timeout_functions_APIParam_3 is function to remove a timeout.', 'dbus_server_set_timeout_functions_apiparam_3 be function remove timeout']
['Checks whether the dbus_pending_call_get_completed_APIParam_1 call has received a reply yet, or not.', 'check whether dbus_pending_call_get_completed_apiparam_1 call have receive reply yet , or']
['The passed-in slot must be initialized to -1, and is filled in with the slot ID.', 'passed_in slot must be initialize 1 , be fill slot identifier']
['Connects to a bus daemon and registers the client with it as with dbus_bus_register_APIName .', 'connect bus daemon register client as dbus_bus_register_apiname']
['If starting up without –replace, do not specify DBUS_NAME_FLAG_REPLACE_EXISTING , and exit if you fail to become the bus dbus_bus_request_name_APIParam_2 owner.', 'if start up without replace , specify dbus_name_flag_replace_existing , exit if -PRON- fail become bus dbus_bus_request_name_apiparam_2 owner']
['Except for string arrays, the returned values are constant; do not free them.', 'except stre arrays , return value be constant ; free -PRON']
["DBUS_DISPATCH_NEED_MEMORY indicates that there could be data, but we can't know for sure without more memory.", 'dbus_dispatch_need_memory indicate could be datum , but -PRON- can know sure without more memory']
['dbus_connection_try_register_fallback_APIParam_5 is address where an dbus_connection_try_register_fallback_APIParam_5 can be returned.', 'dbus_connection_try_register_fallback_apiparam_5 be address where dbus_connection_try_register_fallback_apiparam_5 can be return']
['Retrieves data previously set with dbus_pending_call_set_data_APIName .', 'retrieve datum previously set dbus_pending_call_set_data_apiname']
['a bus daemon can listen on multiple addresses which will mean it has multiple DBusServer each with their own ID.', 'bus daemon can listen multiple address which mean have multiple dbusserver each identifier']
['dbus_connection_send_with_reply_and_block_APIName returns the dbus_connection_send_with_reply_and_block_APIParam_2 that is the reply or NULL with an dbus_connection_send_with_reply_and_block_APIParam_4 code if the function fails.', 'dbus_connection_send_with_reply_and_block_apiname return dbus_connection_send_with_reply_and_block_apiparam_2 be reply or null dbus_connection_send_with_reply_and_block_apiparam_4 code if function fail']
['dbus_message_contains_unix_fds_APIParam_1 is the dbus_message_contains_unix_fds_APIParam_1.', 'dbus_message_contains_unix_fds_apiparam_1 be dbus_message_contains_unix_fds_apiparam_1']
['dbus_message_new_error_APIParam_3 is the error message string (or NULL for none, but please give a message).', 'dbus_message_new_error_apiparam_3 be error message string or null none , but please give message']
['dbus_bus_remove_match_APIParam_2 is textual form of match dbus_bus_remove_match_APIParam_2.', 'dbus_bus_remove_match_apiparam_2 be textual form match dbus_bus_remove_match_apiparam_2']
['Note: it is a bug to drop the last reference to a dbus_connection_unref_APIParam_1 that is still connected.', 'note : be bug drop last reference dbus_connection_unref_apiparam_1 be still connect']
['Sets the timeout functions for the dbus_server_set_timeout_functions_APIParam_1.', 'set timeout function dbus_server_set_timeout_functions_apiparam_1']
['The only way to be sure the server ID is available is to wait for authentication to complete.', 'only way be sure server identifier be available be wait authentication complete']
['Conventionally, single-instance applications often offer a command line option called –replace which means to replace the current instance.', 'conventionally , single_instance application often offer command line option call replace which mean replace current instance']
['Other than dbus_bus_get_APIName , there are two ways to set the unique name; one is dbus_bus_register_APIName , the other is dbus_bus_set_unique_name_APIName .', 'other than dbus_bus_get_apiname , be two way set unique name ; one be dbus_bus_register_apiname , other be dbus_bus_set_unique_name_apiname']
['dbus_message_has_path_APIParam_1 is the dbus_message_has_path_APIParam_1.', 'dbus_message_has_path_apiparam_1 be dbus_message_has_path_apiparam_1']
['For the session bus, this is useful as a way to uniquely identify each user session.', 'session bus , be useful as way uniquely identify each user session']
['When you are done with this connection, you must dbus_connection_close_APIName to disconnect it, and dbus_connection_unref_APIName to free the connection object.', 'when -PRON- be do connection , -PRON- must dbus_connection_close_apiname disconnect , dbus_connection_unref_apiname free connection object']
['Allocates an integer ID to be used for storing application-specific data on any DBusMessage .', 'allocate integer identifier be use store application_specific datum dbusmessage']
['libdbus keeps internal global variables, for example caches and thread locks, and it can be useful to free these internal data structures.', 'libdbus keep internal global variable , example cache thread lock , can be useful free internal data structure']
['dbus_bus_register_APIName returns TRUE on success.', 'dbus_bus_register_apiname return true success']
['You may call this function multiple times (and intermixed with calls to dbus_message_iter_append_basic_APIName ) for the same array.', 'PRON- call function multiple time array']
['dbus_message_is_method_call_APIParam_2 is the name to check (must not be NULL ).', 'dbus_message_is_method_call_apiparam_2 be name check must be null']
['dbus_connection_open_APIName can re-use an existing connection with the same ID instead of opening a new connection.', 'dbus_connection_open_apiname can re_use exist connection identifi instead open connection']
['dbus_watch_get_flags_APIName returns the conditions to dbus_watch_get_flags_APIParam_1.', 'dbus_watch_get_flags_apiname return condition dbus_watch_get_flags_apiparam_1']
['Always returns FALSE prior to authenticating the dbus_connection_get_windows_user_APIParam_1.', 'always return false prior authenticate dbus_connection_get_windows_user_apiparam_1']
['The flag is set to TRUE by default, i.e.', 'flag be set true by default , i']
['The returned dbus_message_iter_get_basic_APIParam_2 is by reference and should not be freed.', 'return dbus_message_iter_get_basic_apiparam_2 be by reference should be free']
['dbus_message_iter_recurse_APIParam_1 is the message iterator.', 'dbus_message_iter_recurse_apiparam_1 be message iterator']
['dbus_message_get_type_APIName returns the type of the dbus_message_get_type_APIParam_1.', 'dbus_message_get_type_apiname return type dbus_message_get_type_apiparam_1']
['dbus_message_iter_append_fixed_array_APIParam_2 is the type of the array elements.', 'dbus_message_iter_append_fixed_array_apiparam_2 be type array element']
['If the iterator is pointing at one of the "i" then just that "i" would be returned.', 'if iterator be point one i then just i would be return']
['dbus_message_is_method_call_APIName returns TRUE if the dbus_message_is_method_call_APIParam_1 is the specified dbus_message_is_method_call_APIParam_3 call.', 'dbus_message_is_method_call_apiname return true if dbus_message_is_method_call_apiparam_1 be specify dbus_message_is_method_call_apiparam_3 call']
['dbus_message_has_member_APIParam_2 is the dbus_message_has_member_APIParam_2 name.', 'dbus_message_has_member_apiparam_2 be dbus_message_has_member_apiparam_2 name']
['dbus_malloc_APIParam_1 is number of dbus_malloc_APIParam_1 to allocate.', 'dbus_malloc_apiparam_1 be number dbus_malloc_apiparam_1 allocate']
['dbus_threads_init_APIName returns TRUE on success, FALSE if no memory.', 'dbus_threads_init_apiname return true success , false if no memory']
['If you want to prevent non-anonymous authorization, use dbus_server_set_auth_mechanisms_APIName to remove the mechanisms that allow proving user identity (i.e.', 'if -PRON- want prevent non_anonymous authorization , dbus_server_set_auth_mechanisms_apiname remove mechanism allow prove user identity i']
['For instance omitting the member from a match dbus_bus_add_match_APIParam_2 but adding a sender would let all messages from that sender through regardless of the member.', 'instance omit member match dbus_bus_add_match_apiparam_2 but add sender would let message sender through regardless member']
['The DBusTimeoutToggledFunction notifies the application that the timeout has been enabled or disabled.', 'dbustimeouttoggledfunction notifie application timeout have enable or disable']
['The return value indicates whether reading or writing is still possible, i.e.', 'return value indicate whether read or writing be still possible , i']
['In this case the caller ends up in a queue to own the dbus_bus_request_name_APIParam_2 after the current owner gives it up.', 'case caller end up queue dbus_bus_request_name_apiparam_2 after current owner give up']
['dbus_bus_get_private_APIParam_2 is address where an dbus_bus_get_private_APIParam_2 can be returned.', 'dbus_bus_get_private_apiparam_2 be address where dbus_bus_get_private_apiparam_2 can be return']
['On UNIX, the dbus_connection_set_windows_user_function_APIParam_2 will be set and its dbus_connection_set_windows_user_function_APIParam_4 will be invoked when the dbus_connection_set_windows_user_function_APIParam_1 is freed or a new dbus_connection_set_windows_user_function_APIParam_2 is set.', 'unix , dbus_connection_set_windows_user_function_apiparam_2 be set dbus_connection_set_windows_user_function_apiparam_4 be invoke when dbus_connection_set_windows_user_function_apiparam_1 be free or dbus_connection_set_windows_user_function_apiparam_2 be set']
['Turn a DBusMessage into the marshalled form as described in the D-Bus specification.', 'turn dbusmessage into marshal form as describe d_bus specification']
['dbus_connection_set_max_message_size_APIParam_1 is a DBusConnection.', 'dbus_connection_set_max_message_size_apiparam_1 be dbusconnection']
['This can be used for SELinux access control checks with getpeercon_APIName for example.', 'can be use selinux access control check getpeercon_apiname example']
['The variable argument list should contain the type of the argument followed by a pointer to where the value should be stored.', 'variable argument list should contain type argument follow by pointer where value should be store']
['Sets the dbus_message_set_sender_APIParam_1 dbus_message_set_sender_APIParam_2.', 'set dbus_message_set_sender_apiparam_1 dbus_message_set_sender_apiparam_2']
['dbus_message_iter_open_container_APIParam_3 is the dbus_message_iter_open_container_APIParam_2 of container contents.', 'dbus_message_iter_open_container_apiparam_3 be dbus_message_iter_open_container_apiparam_2 container content']
['In other words, you can get either the runtime or the compile-time version.', 'other word , -PRON- can get either runtime or compile_time version']
['dbus_connection_open_APIName returns new connection, or NULL on failure.', 'dbus_connection_open_apiname return connection , or null failure']
['Sets the container instance this dbus_message_set_container_instance_APIParam_1 was sent from.', 'set container instance dbus_message_set_container_instance_apiparam_1 be send']
['dbus_message_append_args_valist_APIParam_1 is the dbus_message_append_args_valist_APIParam_1.', 'dbus_message_append_args_valist_apiparam_1 be dbus_message_append_args_valist_apiparam_1']
['Unlike dbus_connection_open_APIName , always creates a new connection.', 'unlike dbus_connection_open_apiname , always create connection']
['Only possible after the dbus_bus_get_unique_name_APIParam_1 has been registered with the message bus.', 'only possible after dbus_bus_get_unique_name_apiparam_1 have register message bus']
['dbus_connection_set_max_message_size_APIParam_2 is maximum message dbus_connection_set_max_message_size_APIParam_2 the dbus_connection_set_max_message_size_APIParam_1 can receive, in bytes.', 'dbus_connection_set_max_message_size_apiparam_2 be maximum message dbus_connection_set_max_message_size_apiparam_2 dbus_connection_set_max_message_size_apiparam_1 can receive , byte']
['dbus_connection_get_unix_user_APIName returns TRUE if dbus_connection_get_unix_user_APIParam_2 is filled in with a valid user ID.', 'dbus_connection_get_unix_user_apiname return true if dbus_connection_get_unix_user_apiparam_2 be fill valid user identifier']
['This function may result in a call to the DBusDispatchStatusFunction set with dbus_connection_set_dispatch_status_function_APIName , as the disconnect message it generates needs to be dispatched.', 'function result call dbusdispatchstatusfunction set dbus_connection_set_dispatch_status_function_apiname , as disconnect message generate need be dispatch']
['Locks a dbus_message_lock_APIParam_1.', 'lock dbus_message_lock_apiparam_1']
["Releases the server's address and stops listening for new clients.", 'release server address stop listen client']
['dbus_signature_iter_next_APIName returns FALSE at the end of the current container.', 'dbus_signature_iter_next_apiname return false end current container']
['Guaranteed to return NULL if dbus_malloc_APIParam_1 is zero on all platforms.', 'guarantee return null if dbus_malloc_apiparam_1 be zero platform']
['dbus_address_entries_free_APIParam_1 is the array.', 'dbus_address_entries_free_apiparam_1 be array']
['dbus_bus_get_private_APIParam_1 is bus dbus_bus_get_private_APIParam_1.', 'dbus_bus_get_private_apiparam_1 be bus dbus_bus_get_private_apiparam_1']
['Todo: when you start blocking, the timeout is reset, but it should really only use time remaining since the dbus_pending_call_block_APIParam_1 call was created.', 'todo : when -PRON- start block , timeout be reset , but should really only time remain since dbus_pending_call_block_apiparam_1 call be create']
['Checks whether the dbus_message_is_error_APIParam_1 is an error reply with the given error name.', 'check whether dbus_message_is_error_apiparam_1 be error reply give error name']
['dbus_timeout_get_enabled_APIParam_1 is the DBusTimeout object.', 'dbus_timeout_get_enabled_apiparam_1 be dbustimeout object']
['Reads a basic-typed dbus_message_iter_get_basic_APIParam_2 from the message iterator.', 'read basic_type dbus_message_iter_get_basic_apiparam_2 message iterator']
['dbus_message_set_data_APIParam_3 is the dbus_message_set_data_APIParam_3 to store.', 'dbus_message_set_data_apiparam_3 be dbus_message_set_data_apiparam_3 store']
['It works identically to dbus_connection_send_APIName in other respects.', 'work identically dbus_connection_send_apiname other respect']
['dbus_connection_try_register_fallback_APIName returns FALSE if an dbus_connection_try_register_fallback_APIParam_5 ( DBUS_ERROR_NO_MEMORY or DBUS_ERROR_OBJECT_PATH_IN_USE ) is reported.', 'dbus_connection_try_register_fallback_apiname return false if dbus_connection_try_register_fallback_apiparam_5 be report']
['(The dbus_connection_close_APIName can be skipped if the connection is already known to be disconnected, for example if you are inside a handler for the Disconnected signal.)', 'dbus_connection_close_apiname can be skip if connection be already know be disconnected , example if -PRON- be inside handler disconnected signal']
['Constructs a message that is a reply to a method call.', 'construct message be reply method call']
['Allocates the given number of dbus_malloc_APIParam_1, as with standard malloc_APIName.', 'allocate give number dbus_malloc_apiparam_1 , as standard malloc_apiname']
['dbus_message_get_serial_APIName returns the serial of a dbus_message_get_serial_APIParam_1 or 0 if none has been specified.', 'dbus_message_get_serial_apiname return serial dbus_message_get_serial_apiparam_1 or # if none have specify']
['On Windows, dbus_watch_get_unix_fd_APIName returns -1 but this function returns a Winsock socket (assuming the transport is socket-based, as it always is for now).', 'window , dbus_watch_get_unix_fd_apiname return # but function return winsock socket assume transport be socket_bas , as always be now']
['dbus_message_set_destination_APIParam_2 is the dbus_message_set_destination_APIParam_2 name or NULL to unset.', 'dbus_message_set_destination_apiparam_2 be dbus_message_set_destination_apiparam_2 name or null unset']
['this function always returns specifically a socket file descriptor.', 'function always return specifically socket file descriptor']
['Sets the interface this dbus_message_set_interface_APIParam_1 is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or the interface a signal is being emitted from (for DBUS_MESSAGE_TYPE_SIGNAL).', 'set interface dbus_message_set_interface_apiparam_1 be send or interface signal be emit dbus_message_type_signal']
["A DBusPendingCall will always see exactly one reply dbus_connection_send_with_reply_APIParam_2, unless it's cancelled with dbus_pending_call_cancel_APIName .", 'dbuspendingcall always see exactly one reply dbus_connection_send_with_reply_apiparam_2 , unless be cancel dbus_pending_call_cancel_apiname']
["dbus_watch_handle_APIName returns FALSE if there wasn't enough memory.", 'dbus_watch_handle_apiname return false if wasn t enough memory']
['"One complete type" means a single basic type, array, struct, or dictionary, though the struct or array may be arbitrarily recursive and complex.', 'one complete type mean single basic type , array , struct , or dictionary , though struct or array be arbitrarily recursive complex']
['When requesting a dbus_bus_request_name_APIParam_2, you can specify several dbus_bus_request_name_APIParam_3.', 'when request dbus_bus_request_name_apiparam_2 , -PRON- can specify several dbus_bus_request_name_apiparam_3']
['So for adding descriptors to the main loop, use dbus_watch_get_socket_APIName and so forth.', 'so add descriptor main loop , dbus_watch_get_socket_apiname so forth']
['dbus_message_get_signature_APIParam_1 is the dbus_message_get_signature_APIParam_1.', 'dbus_message_get_signature_apiparam_1 be dbus_message_get_signature_apiparam_1']
['The signature includes only "in" arguments for DBUS_MESSAGE_TYPE_METHOD_CALL and only "out" arguments for DBUS_MESSAGE_TYPE_METHOD_RETURN , so is slightly different from what you might expect (that is, it does not include the signature of the entire C++-style method).', 'signature include only argument dbus_message_type_method_call only out argument dbus_message_type_method_return , so be slightly different what -PRON- may expect be , do include signature entire c style method']
['Does nothing if dbus_set_error_APIParam_1 is NULL .', 'do nothing if dbus_set_error_apiparam_1 be null']
['dbus_connection_flush_APIParam_1 is the dbus_connection_flush_APIParam_1.', 'dbus_connection_flush_apiparam_1 be dbus_connection_flush_apiparam_1']
["dbus_message_new_method_call_APIName returns NULL if memory can't be allocated for the message.", 'dbus_message_new_method_call_apiname return null if memory can be allocate message']
['dbus_address_unescape_value_APIParam_2 is dbus_address_unescape_value_APIParam_2 to set if the unescaping fails.', 'dbus_address_unescape_value_apiparam_2 be dbus_address_unescape_value_apiparam_2 set if unescape fail']
['dbus_connection_set_watch_functions_APIParam_2 is function to begin monitoring a new descriptor.', 'dbus_connection_set_watch_functions_apiparam_2 be function begin monitor descriptor']
['Finalizes the dbus_server_unref_APIParam_1 if the reference count reaches zero.', 'finalize dbus_server_unref_apiparam_1 if reference count reach zero']
['It is a programming error to call this dbus_connection_remove_filter_APIParam_2 for a handler that has not been added as a filter.', 'be program error call dbus_connection_remove_filter_apiparam_2 handler have add as filter']
['For arrays, dbus_message_iter_open_container_APIParam_3 should be the dbus_message_iter_open_container_APIParam_2 of the array elements.', 'arrays , dbus_message_iter_open_container_apiparam_3 should be dbus_message_iter_open_container_apiparam_2 array element']
["If you don't set a dispatch status dbus_connection_set_dispatch_status_function_APIParam_2, you have to be sure to dispatch on every iteration of your main loop, especially if dbus_watch_handle_APIName or dbus_timeout_handle_APIName were called.", 'if -PRON- set dispatch status dbus_connection_set_dispatch_status_function_apiparam_2 , -PRON- have be sure dispatch every iteration -PRON- main loop , especially if dbus_watch_handle_apiname or dbus_timeout_handle_apiname be call']
['Wrapper for setenv_APIName.', 'wrapper setenv_apiname']
['Gets the current state of the incoming message queue.', 'get current state incoming message queue']
['dbus_connection_read_write_dispatch_APIName returns TRUE if the disconnect message has not been processed.', 'dbus_connection_read_write_dispatch_apiname return true if disconnect message have process']
['The variable argument list should contain the type of each argument followed by the value to append.', 'variable argument list should contain type each argument follow by value append']
['The allocated ID may then be used with dbus_pending_call_set_data_APIName and dbus_pending_call_get_data_APIName .', 'allocate identifier then be use dbus_pending_call_set_data_apiname dbus_pending_call_get_data_apiname']
['Allocates the given number of dbus_malloc0_APIParam_1, as with standard malloc_APIName, but all dbus_malloc0_APIParam_1 are initialized to zero as with calloc_APIName.', 'allocate give number dbus_malloc0_apiparam_1 , as standard malloc_apiname , but dbus_malloc0_apiparam_1 be initialize zero as calloc_apiname']
['dbus_parse_address_APIParam_3 is return location for array length.', 'dbus_parse_address_apiparam_3 be return location array length']
['The way to think of this function is that it either makes some sort of progress, or it blocks.', 'way think function be either make sort progress , or block']
['dbus_connection_send_with_reply_and_block_APIParam_3 is timeout in milliseconds, -1 (or DBUS_TIMEOUT_USE_DEFAULT ) for default or DBUS_TIMEOUT_INFINITE for no timeout.', 'dbus_connection_send_with_reply_and_block_apiparam_3 be timeout millisecond , # default or dbus_timeout_infinite no timeout']
['When using Qt, this typically results in a call to QEventLoop::wakeUp_APIName.', 'when use qt , typically result call qeventloop : : wakeup_apiname']
['The returned string becomes invalid if the dbus_message_get_member_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_member_APIParam_1 data.', 'return string become invalid if dbus_message_get_member_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_member_apiparam_1 datum']
['Increments the reference count of a DBusServer .', 'increment reference count dbusserver']
['However, when you are done with the connection you should call dbus_connection_unref_APIName .', 'however , when -PRON- be do connection -PRON- should call dbus_connection_unref_apiname']
['dbus_message_get_serial_APIName returns the serial.', 'dbus_message_get_serial_apiname return serial']
['The interface name is fully-qualified (namespaced).', 'interface name be fully_qualifi namespace']
['dbus_connection_list_registered_APIName returns FALSE if no memory to allocate the child entries.', 'dbus_connection_list_registered_apiname return false if no memory allocate child entry']
['dbus_message_new_error_APIParam_2 is the error name.', 'dbus_message_new_error_apiparam_2 be error name']
['dbus_signature_iter_init_APIParam_2 is the type dbus_signature_iter_init_APIParam_2.', 'dbus_signature_iter_init_apiparam_2 be type dbus_signature_iter_init_apiparam_2']
["These functions are responsible for making the application's main loop aware of file descriptors that need to be monitored for events.", 'function be responsible make application main loop aware file descriptor need be monitor event']
['dbus_connection_send_with_reply_and_block_APIParam_4 is return location for dbus_connection_send_with_reply_and_block_APIParam_4 dbus_connection_send_with_reply_and_block_APIParam_2.', 'dbus_connection_send_with_reply_and_block_apiparam_4 be return location dbus_connection_send_with_reply_and_block_apiparam_4 dbus_connection_send_with_reply_and_block_apiparam_2']
['Applications can know it is safe to unref these connections because libdbus will be holding a reference as long as the dbus_connection_close_APIParam_1 is open.', 'application can know be safe unref connection because libdbus be hold reference as long as dbus_connection_close_apiparam_1 be open']
['The dbus_message_set_destination_APIParam_2 name must contain only valid characters as defined in the D-Bus specification.', 'dbus_message_set_destination_apiparam_2 name must contain only valid character as define d_bus specification']
['dbus_connection_register_object_path_APIName returns FALSE if an error ( DBUS_ERROR_NO_MEMORY or DBUS_ERROR_OBJECT_PATH_IN_USE ) ocurred.', 'dbus_connection_register_object_path_apiname return false if error ocurre']
['Sets the mainloop wakeup function for the dbus_connection_set_wakeup_main_function_APIParam_1.', 'set mainloop wakeup function dbus_connection_set_wakeup_main_function_apiparam_1']
["This does imply that we can't call read_APIName with a buffer larger than we're willing to exceed this limit by.", 'do imply -PRON- can call read_apiname buffer large than -PRON- re willing exceed limit by']
['dbus_server_set_new_connection_function_APIName , dbus_server_set_watch_functions_APIName , and dbus_server_set_timeout_functions_APIName should be called immediately to render the server fully functional.', 'dbus_server_set_new_connection_function_apiname , dbus_server_set_watch_functions_apiname , dbus_server_set_timeout_functions_apiname should be call immediately render server fully functional']
['dbus_message_new_error_printf_APIParam_2 is the error name.', 'dbus_message_new_error_printf_apiparam_2 be error name']
['You can use this to establish a default message handling policy for a whole "subdirectory."', 'PRON- can establish default message handle policy whole subdirectory']
['dbus_get_version_APIParam_3 is pointer to return the micro version, or NULL.', 'dbus_get_version_apiparam_3 be pointer return micro version , or null']
['dbus_watch_get_data_APIName returns previously-set data.', 'dbus_watch_get_data_apiname return previously_set datum']
['This is because we can not rely on internal implementation details of the underlying libc library.', 'be because -PRON- can rely internal implementation detail underlie libc library']
['Sets dbus_watch_set_data_APIParam_2 which can be retrieved with dbus_watch_get_data_APIName .', 'set dbus_watch_set_data_apiparam_2 which can be retrieve dbus_watch_get_data_apiname']
['Assigns an dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_2 and dbus_set_error_const_APIParam_3 to a DBusError .', 'assign dbus_set_error_const_apiparam_1 dbus_set_error_const_apiparam_2 dbus_set_error_const_apiparam_3 dbuserror']
['So for example: const dbus_int32_t array[] = { 1, 2, 3 }; const dbus_int32_t *v_ARRAY = array; dbus_message_append_args_APIName (message, DBUS_TYPE_ARRAY , DBUS_TYPE_INT32 , &v_ARRAY, 3, DBUS_TYPE_INVALID ); This function does not support arrays of Unix file descriptors.', 'so example : const dbus_int32_t array 1 , 2 , # ; const dbus_int32_t v_array array ; dbus_message_append_args_apiname ; function do support arrays unix file descriptor']
['dbus_bus_name_has_owner_APIParam_1 is the dbus_bus_name_has_owner_APIParam_1.', 'dbus_bus_name_has_owner_apiparam_1 be dbus_bus_name_has_owner_apiparam_1']
['Call dbus_watch_get_enabled_APIName to check this.', 'call dbus_watch_get_enabled_apiname check']
['This can only be done once on a dbus_message_set_serial_APIParam_1.', 'can only be do once dbus_message_set_serial_apiparam_1']
['Only works on UNIX; only works for connections on the same machine as the bus.', 'only work unix ; only work connection machine as bus']
['dbus_bus_request_name_APIParam_3 is dbus_bus_request_name_APIParam_3.', 'dbus_bus_request_name_apiparam_3 be dbus_bus_request_name_apiparam_3']
['Use dbus_connection_try_register_object_path_APIName if this might be the case.', 'dbus_connection_try_register_object_path_apiname if may be case']
['This means a timeout error will occur if no reply arrives, unlike with dbus_connection_send_APIName .', 'mean timeout error occur if no reply arrive , unlike dbus_connection_send_apiname']
['For example, given the address dbus_address_entry_get_method_APIParam_1 "tcp:host=example.com" it would return the string "tcp"   dbus_address_entry_get_method_APIParam_1 is the dbus_address_entry_get_method_APIParam_1.', 'example , give address dbus_address_entry_get_method_apiparam_1 tcp : host would return stre tcp dbus_address_entry_get_method_apiparam_1 be dbus_address_entry_get_method_apiparam_1']
['By default, dbus_connection_set_exit_on_disconnect_APIParam_2 is FALSE ; but for message bus connections returned from dbus_bus_get_APIName it will be toggled on by default.', 'by default , dbus_connection_set_exit_on_disconnect_apiparam_2 be false ; but message bus connection return dbus_bus_get_apiname be toggle by default']
['dbus_server_set_auth_mechanisms_APIName returns FALSE if no memory.', 'dbus_server_set_auth_mechanisms_apiname return false if no memory']
['dbus_connection_get_outgoing_unix_fds_APIName returns the number of unix fds that have been queued up but not sent.', 'dbus_connection_get_outgoing_unix_fds_apiname return number unix fd have queue up but send']
['dbus_message_get_interface_APIName returns the dbus_message_get_interface_APIParam_1 interface (should not be freed) or NULL.', 'dbus_message_get_interface_apiname return dbus_message_get_interface_apiparam_1 interface or null']
['If no reply is received in the given dbus_connection_send_with_reply_APIParam_4, this function expires the pending reply and generates a synthetic error reply (generated in-process, not by the remote application) indicating that a timeout occurred.', 'if no reply be receive give dbus_connection_send_with_reply_apiparam_4 , function expire pende reply generate synthetic error reply indicating timeout occur']
['dbus_bus_release_name_APIParam_1 is the dbus_bus_release_name_APIParam_1.', 'dbus_bus_release_name_apiparam_1 be dbus_bus_release_name_apiparam_1']
['If any filter returns DBUS_HANDLER_RESULT_HANDLED then processing stops after that filter.', 'if filter return dbus_handler_result_handle then process stop after filter']
['dbus_connection_set_unix_user_function_APIParam_1 is the dbus_connection_set_unix_user_function_APIParam_1.', 'dbus_connection_set_unix_user_function_apiparam_1 be dbus_connection_set_unix_user_function_apiparam_1']
['dbus_timeout_get_data_APIName returns previously-set data.', 'dbus_timeout_get_data_apiname return previously_set datum']
['This function should be called when the dbus_timeout_handle_APIParam_1 occurs.', 'function should be call when dbus_timeout_handle_apiparam_1 occur']
['When the refcount on the passed-in slot reaches 0, it is set to -1.   dbus_pending_call_free_data_slot_APIParam_1 is address storing the slot to deallocate.', 'when refcount passed_in slot reach 0 , be set # dbus_pending_call_free_data_slot_apiparam_1 be address store slot deallocate']
['dbus_message_get_sender_APIName returns the unique name of the sender or NULL.', 'dbus_message_get_sender_apiname return unique name sender or null']
['dbus_message_iter_next_APIName returns TRUE if the iterator was moved to the next field.', 'dbus_message_iter_next_apiname return true if iterator be move next field']
['DBUS_MESSAGE_TYPE_INVALID will never be returned.', 'dbus_message_type_invalid never be return']
['dbus_set_error_from_message_APIParam_2 is the dbus_set_error_from_message_APIParam_2 to set it from.', 'dbus_set_error_from_message_apiparam_2 be dbus_set_error_from_message_apiparam_2 set']
['dbus_connection_set_dispatch_status_function_APIParam_1 is the dbus_connection_set_dispatch_status_function_APIParam_1.', 'dbus_connection_set_dispatch_status_function_apiparam_1 be dbus_connection_set_dispatch_status_function_apiparam_1']
['dbus_message_ref_APIName returns the dbus_message_ref_APIParam_1 See also dbus_message_unref.', 'dbus_message_ref_apiname return dbus_message_ref_apiparam_1 see dbus_message_unref']
['dbus_validate_path_APIParam_2 is dbus_validate_path_APIParam_2 return.', 'dbus_validate_path_apiparam_2 be dbus_validate_path_apiparam_2 return']
['String/signature/path arrays should be passed in as "const char*** address_of_array" and "int n_elements" Todo: support DBUS_TYPE_STRUCT and DBUS_TYPE_VARIANT and complex arrays Todo: If this fails due to lack of memory, the dbus_message_append_args_APIParam_1 is hosed and you have to start over building the whole dbus_message_append_args_APIParam_1.', 'arrays should be pass as const char address_of_array int n_element todo : support dbus_type_struct dbus_type_variant complex arrays todo : if fail due lack memory , dbus_message_append_args_apiparam_1 be hose -PRON- have start over build whole dbus_message_append_args_apiparam_1']
['dbus_server_get_id_APIParam_1 is the dbus_server_get_id_APIParam_1.', 'dbus_server_get_id_apiparam_1 be dbus_server_get_id_apiparam_1']
['Closes a container-typed value appended to the message; may write out more information to the message known only after the entire container is written, and may free resources created by dbus_message_iter_open_container_APIName .', 'close container_typed value append message ; write out more information message know only after entire container be write , free resource create by dbus_message_iter_open_container_apiname']
['dbus_message_has_sender_APIParam_2 is the dbus_message_has_sender_APIParam_2 to check (must not be NULL ).', 'dbus_message_has_sender_apiparam_2 be dbus_message_has_sender_apiparam_2 check must be null']
['You can, however, start over; call dbus_threads_init_APIName again, create new connections, and so forth.', 'PRON- can , however , start over ; call dbus_threads_init_apiname again , create connection , so forth']
['These connections are owned by libdbus, and applications should only unref them, never close them.', 'connection be own by libdbus , application should only unref -PRON- , never close -PRON']
["The return value indicates whether the user SID is available; if it's available but we don't have the memory to copy it, then the return value is TRUE and NULL is given as the SID.", 'return value indicate whether user sid be available ; if be available but -PRON- have memory copy , then return value be true null be give as sid']
['dbus_get_version_APIParam_2 is pointer to return the minor version, or NULL.', 'dbus_get_version_apiparam_2 be pointer return minor version , or null']
['If you are not on the same machine as the bus, then calling this is probably a bad idea, since the UID will mean little to your application.', 'if -PRON- be machine as bus , then call be probably bad idea , since uid mean little -PRON- application']
['dbus_connection_set_data_APIParam_3 is the dbus_connection_set_data_APIParam_3 to store.', 'dbus_connection_set_data_apiparam_3 be dbus_connection_set_data_apiparam_3 store']
['dbus_message_new_method_call_APIParam_4 is on, or NULL dbus_message_new_method_call_APIParam_4 method to invoke.', 'dbus_message_new_method_call_apiparam_4 be , or null dbus_message_new_method_call_apiparam_4 method invoke']
['It\'s impossible to "reopen" a dbus_connection_close_APIParam_1, a new dbus_connection_close_APIParam_1 must be created.', 'be impossible reopen dbus_connection_close_apiparam_1 , dbus_connection_close_apiparam_1 must be create']
['First, any method replies are passed to DBusPendingCall or dbus_connection_send_with_reply_and_block_APIName in order to complete the pending method call.', 'first , method reply be pass dbuspendingcall or dbus_connection_send_with_reply_and_block_apiname order complete pende method call']
['The flags returned will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR; all watches implicitly include a dbus_watch_get_flags_APIParam_1 for hangups, errors, and other exceptional conditions.', 'flag return only contain dbus_watch_readable dbus_watch_writable , never dbus_watch_hangup or dbus_watch_error ; watch implicitly include dbus_watch_get_flags_apiparam_1 hangup , error , other exceptional condition']
["dbus_message_get_no_reply_APIName returns TRUE if the dbus_message_get_no_reply_APIParam_1 sender isn't waiting for a reply.", 'dbus_message_get_no_reply_apiname return true if dbus_message_get_no_reply_apiparam_1 sender be wait reply']
['If the interface field is missing, then it will be assumed equal to the provided interface.', 'if interface field be miss , then be assume equal provide interface']
["Filters added during a filter callback won't be run on the message being processed.", 'filter add during filter callback be run message process']
["Pass NULL for the dbus_connection_open_APIParam_2 parameter if you aren't interested in the reason for failure.", 'pass null dbus_connection_open_apiparam_2 parameter if -PRON- be interested reason failure']
['dbus_try_get_local_machine_id_APIName returns a 32-byte-long hex-encoded UUID string, or NULL on failure', 'dbus_try_get_local_machine_id_apiname return 32_byte_long hex_encode uuid string , or null failure']
['For structs and dict entries, dbus_message_iter_open_container_APIParam_3 should be NULL ; it will be set to whatever types you write into the struct.', 'struct dict entry , dbus_message_iter_open_container_apiparam_3 should be null ; be set whatever type -PRON- write into struct']
['dbus_connection_send_with_reply_APIParam_1 is the dbus_connection_send_with_reply_APIParam_1.', 'dbus_connection_send_with_reply_apiparam_1 be dbus_connection_send_with_reply_apiparam_1']
['Starts a service that will request ownership of the given dbus_bus_start_service_by_name_APIParam_2.', 'start service request ownership give dbus_bus_start_service_by_name_apiparam_2']
['DBUS_TYPE_INVALID is not a basic type.', 'dbus_type_invalid be basic type']
['all DBusPendingCall objects will have a slot with the given integer ID reserved.', 'dbuspendingcall object have slot give integer identifier reserve']
['See also dbus_message_get_args   dbus_message_get_args_valist_APIParam_1 is the dbus_message_get_args_valist_APIParam_1.', 'see dbus_message_get_args dbus_message_get_args_valist_apiparam_1 be dbus_message_get_args_valist_apiparam_1']
['Initializes threads, like dbus_threads_init_default_APIName .', 'initialize thread , like dbus_threads_init_default_apiname']
['A disabled watch should have no effect, and enabled watch should be added to the main loop.', 'disabled watch should have no effect , enable watch should be add main loop']
['dbus_message_get_args_valist_APIParam_2 is dbus_message_get_args_valist_APIParam_2 to be filled in.', 'dbus_message_get_args_valist_apiparam_2 be dbus_message_get_args_valist_apiparam_2 be fill']
['dbus_message_new_APIName returns new message or NULL if no memory.', 'dbus_message_new_apiname return message or null if no memory']
['dbus_pending_call_set_notify_APIParam_3 is data to pass to notifier dbus_pending_call_set_notify_APIParam_2.', 'dbus_pending_call_set_notify_apiparam_3 be data pass notifi dbus_pending_call_set_notify_apiparam_2']
['If no dbus_bus_request_name_APIParam_3 are given, an application will receive the requested dbus_bus_request_name_APIParam_2 only if the dbus_bus_request_name_APIParam_2 is currently unowned; and it will NOT give up the dbus_bus_request_name_APIParam_2 if another application asks to take it over using DBUS_NAME_FLAG_REPLACE_EXISTING .', 'if no dbus_bus_request_name_apiparam_3 be give , application receive request dbus_bus_request_name_apiparam_2 only if dbus_bus_request_name_apiparam_2 be currently unowned ; give up dbus_bus_request_name_apiparam_2 if another application ask take over use dbus_name_flag_replace_existing']
['dbus_message_set_allow_interactive_authorization_APIParam_1 is the dbus_message_set_allow_interactive_authorization_APIParam_1.', 'dbus_message_set_allow_interactive_authorization_apiparam_1 be dbus_message_set_allow_interactive_authorization_apiparam_1']
["The UID is only read by servers from clients; clients can't usually get the UID of servers, because servers do not authenticate to clients.", 'uid be only read by server client ; client can usually get uid server , because server authenticate client']
['See dbus_connection_dispatch_APIName for details on when handlers are run.', 'see dbus_connection_dispatch_apiname detail when handler be run']
['dbus_signature_iter_get_element_type_APIParam_1 is pointer to an iterator.', 'dbus_signature_iter_get_element_type_apiparam_1 be pointer iterator']
['dbus_message_has_signature_APIParam_1 is the dbus_message_has_signature_APIParam_1.', 'dbus_message_has_signature_apiparam_1 be dbus_message_has_signature_apiparam_1']
['So for adding descriptors to the main loop, use dbus_watch_get_unix_fd_APIName and so forth.', 'so add descriptor main loop , dbus_watch_get_unix_fd_apiname so forth']
['dbus_connection_set_watch_functions_APIParam_1 is the dbus_connection_set_watch_functions_APIParam_1.', 'dbus_connection_set_watch_functions_apiparam_1 be dbus_connection_set_watch_functions_apiparam_1']
['The interval may change during the life of the dbus_timeout_get_interval_APIParam_1; if so, the dbus_timeout_get_interval_APIParam_1 will be disabled and re-enabled (calling the "timeout toggled function") to notify you of the change.', 'interval change during life dbus_timeout_get_interval_apiparam_1 ; if so , dbus_timeout_get_interval_apiparam_1 be disable re_enabled notify -PRON- change']
['dbus_timeout_handle_APIParam_1 is the DBusTimeout object.', 'dbus_timeout_handle_apiparam_1 be dbustimeout object']
['Pass NULL instead of an array to use all available dbus_server_set_auth_mechanisms_APIParam_2 (this is the default behavior).', 'pass null instead array available dbus_server_set_auth_mechanisms_apiparam_2 be default behavior']
['dbus_validate_member_APIParam_2 is dbus_validate_member_APIParam_2 return.', 'dbus_validate_member_apiparam_2 be dbus_validate_member_apiparam_2 return']
["Remember that NULL can always be passed instead of a DBusError *, if you don't care about having an dbus_validate_member_APIParam_2 dbus_validate_member_APIParam_1 and message.", 'remember null can always be pass instead dbuserror , if -PRON- care about have dbus_validate_member_apiparam_2 dbus_validate_member_apiparam_1 message']
['If you pass NULL for the dbus_bus_remove_match_APIParam_3, this function will not block; otherwise it will.', 'if -PRON- pass null dbus_bus_remove_match_apiparam_3 , function block ; otherwise']
['dbus_bus_set_unique_name_APIParam_2 is the unique name.', 'dbus_bus_set_unique_name_apiparam_2 be unique name']
['However, the dbus_connection_set_unix_user_function_APIParam_2 will never be called, because there are no UNIX user ids to pass to it, or at least none of the existing auth protocols would allow authenticating as a UNIX user on Windows.', 'however , dbus_connection_set_unix_user_function_apiparam_2 never be call , because be no unix user id pass , or least none exist auth protocol would allow authenticate as unix user window']
['dbus_message_iter_init_append_APIParam_1 is the dbus_message_iter_init_append_APIParam_1.', 'dbus_message_iter_init_append_apiparam_1 be dbus_message_iter_init_append_apiparam_1']
['Listens for new connections on the given dbus_server_listen_APIParam_1.', 'listen connection give dbus_server_listen_apiparam_1']
['dbus_bus_get_APIParam_1 is bus dbus_bus_get_APIParam_1.', 'dbus_bus_get_apiparam_1 be bus dbus_bus_get_apiparam_1']
['The error name must contain only valid characters as defined in the D-Bus specification.', 'error name must contain only valid character as define d_bus specification']
['dbus_connection_get_max_received_unix_fds_APIParam_1 is the dbus_connection_get_max_received_unix_fds_APIParam_1.', 'dbus_connection_get_max_received_unix_fds_apiparam_1 be dbus_connection_get_max_received_unix_fds_apiparam_1']
['dbus_connection_send_with_reply_APIParam_4 is timeout in milliseconds, -1 (or DBUS_TIMEOUT_USE_DEFAULT ) for default or DBUS_TIMEOUT_INFINITE for no timeout.', 'dbus_connection_send_with_reply_apiparam_4 be timeout millisecond , # default or dbus_timeout_infinite no timeout']
['The name of the dbus_set_error_from_message_APIParam_1 is set to the name of the dbus_set_error_from_message_APIParam_2, and the dbus_set_error_from_message_APIParam_1 dbus_set_error_from_message_APIParam_2 is set to the first argument if the argument exists and is a string.', 'name dbus_set_error_from_message_apiparam_1 be set name dbus_set_error_from_message_apiparam_2 , dbus_set_error_from_message_apiparam_1 dbus_set_error_from_message_apiparam_2 be set first argument if argument exist be stre']
['If there are messages to dispatch, this function will dbus_connection_dispatch_APIName once, and return.', 'if be message dispatch , function dbus_connection_dispatch_apiname once , return']
['dbus_message_iter_get_basic_APIParam_1 is the iterator.', 'dbus_message_iter_get_basic_apiparam_1 be iterator']
['Existing data stored on existing DBusMessage objects will be freed when the message is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot).', 'exist datum store exist dbusmessage object be free when message be finalize , but be retrieve only be replace if someone else reallocate slot']
['dbus_watch_handle_APIName cannot be called during the DBusAddWatchFunction, as the connection will not be ready to handle that dbus_watch_handle_APIParam_1 yet.', 'dbus_watch_handle_apiname can be call during dbusaddwatchfunction , as connection be ready handle dbus_watch_handle_apiparam_1 yet']
["The size is approximate in that you shouldn't use it to decide how many bytes to read off the network or anything of that nature, as optimizations may choose to tell small white lies to avoid performance overhead.", 'size be approximate -PRON- should decide how many byte read off network or anything nature , as optimization choose tell small white lie avoid performance overhead']
['Note that even after disconnection, messages may remain in the incoming queue that need to be processed.', 'note even after disconnection , message remain incoming queue nee be process']
['The AddMatch method is fully documented in the D-Bus specification.', 'addmatch method be fully document d_bus specification']
['dbus_connection_has_messages_to_send_APIName returns TRUE if the outgoing queue is non-empty.', 'dbus_connection_has_messages_to_send_apiname return true if outgoing queue be non_empty']
['all DBusMessage objects will have a slot with the given integer ID reserved.', 'dbusmessage object have slot give integer identifier reserve']
['If you need those you need to manually recurse into the array.', 'if -PRON- need -PRON- need manually recurse into array']
['dbus_connection_set_timeout_functions_APIParam_2 is function to add a timeout.', 'dbus_connection_set_timeout_functions_apiparam_2 be function add timeout']
['dbus_connection_close_APIParam_1 is the private (unshared) dbus_connection_close_APIParam_1 to close.', 'dbus_connection_close_apiparam_1 be private dbus_connection_close_apiparam_1 close']
['dbus_message_lock_APIParam_1 is the dbus_message_lock_APIParam_1 to lock.', 'dbus_message_lock_apiparam_1 be dbus_message_lock_apiparam_1 lock']
['Gets the DYNAMICALLY LINKED version of libdbus.', 'get dynamically link version libdbus']
['Even if this function fails due to lack of memory, the sub-iterator dbus_message_iter_close_container_APIParam_2 has been closed and invalidated.', 'even if function fail due lack memory , sub_iterator dbus_message_iter_close_container_apiparam_2 have close invalidate']
['libdbus does not own this connection once the new connection dbus_server_set_new_connection_function_APIParam_2 takes a reference.', 'libdbus do connection once connection dbus_server_set_new_connection_function_apiparam_2 take reference']
['dbus_watch_get_unix_fd_APIName returns a UNIX file descriptor to be watched, which may be a pipe, socket, or other type of descriptor.', 'dbus_watch_get_unix_fd_apiname return unix file descriptor be watch , which be pipe , socket , or other type descriptor']
['The first one to start up will receive messages sent to org.freedesktop.TextEditor, but if that one exits another will become the primary owner and receive messages.', 'first one start up receive message send , but if one exit another become primary owner receive message']
['dbus_connection_read_write_APIParam_2 is max time to block or -1 for infinite.', 'dbus_connection_read_write_apiparam_2 be max time block or # infinite']
['dbus_connection_register_fallback_APIParam_1 is the dbus_connection_register_fallback_APIParam_1.', 'dbus_connection_register_fallback_apiparam_1 be dbus_connection_register_fallback_apiparam_1']
['dbus_timeout_get_enabled_APIName returns TRUE if the dbus_timeout_get_enabled_APIParam_1 is enabled.', 'dbus_timeout_get_enabled_apiname return true if dbus_timeout_get_enabled_apiparam_1 be enable']
['The dbus_server_unref_APIParam_1 must be disconnected before the refcount reaches zero.', 'dbus_server_unref_apiparam_1 must be disconnect before refcount reach zero']
['An example usage would be: while ( dbus_connection_read_write_dispatch_APIName (connection, -1)) ; // empty loop body In this usage you would normally have set up a filter function to look at each message as it is dispatched.', 'example usage would be : while ; empty loop body usage -PRON- would normally have set up filter function look each message as be dispatch']
['To get a string array pass in "char ***array_location" and "int *n_elements".', 'get string array pass char array_location int n_element']
['dbus_message_set_data_APIParam_4 is finalizer function for the dbus_message_set_data_APIParam_3.', 'dbus_message_set_data_apiparam_4 be finalizer function dbus_message_set_data_apiparam_3']
['dbus_watch_get_flags_APIParam_1 is the DBusWatch object.', 'dbus_watch_get_flags_apiparam_1 be dbuswatch object']
['Container types are for example struct, variant, and array.', 'container type be example struct , variant , array']
['dbus_get_local_machine_id_APIName returns a 32-byte-long hex-encoded UUID string, or NULL on failure', 'dbus_get_local_machine_id_apiname return 32_byte_long hex_encode uuid string , or null failure']
['Does not allocate any memory; the dbus_error_init_APIParam_1 only needs to be freed if it is set at some point.', 'do allocate memory ; dbus_error_init_apiparam_1 only need be free if be set point']
['If routing peer messages is enabled, then messages with the org.freedesktop.DBus.Peer interface that also have a bus destination name set will not be automatically handled by the DBusConnection and instead will be dispatched normally to the application.', 'if rout peer message be enable , then message interface have bus destination name set be automatically handle by dbusconnection instead be dispatch normally application']
['dbus_message_set_serial_APIParam_2 is the dbus_message_set_serial_APIParam_2.', 'dbus_message_set_serial_apiparam_2 be dbus_message_set_serial_apiparam_2']
['dbus_error_free_APIParam_1 is memory where the dbus_error_free_APIParam_1 is stored.', 'dbus_error_free_apiparam_1 be memory where dbus_error_free_apiparam_1 be store']
['dbus_server_allocate_data_slot_APIParam_1 is address of global variable storing the slot ID.', 'dbus_server_allocate_data_slot_apiparam_1 be address global variable storing slot identifier']
['You must call dbus_message_iter_open_container_APIName to open an array of values before calling this function.', 'PRON- must call dbus_message_iter_open_container_apiname open array value before call function']
['Note that dbus_address_entry_get_value_APIName returns an already-unescaped dbus_address_unescape_value_APIParam_1.', 'note dbus_address_entry_get_value_apiname return already_unescape dbus_address_unescape_value_apiparam_1']
['Private connections come from dbus_connection_open_private_APIName or dbus_bus_get_private_APIName .', 'private connection come dbus_connection_open_private_apiname or dbus_bus_get_private_apiname']
['The signature is a string made up of type codes such as DBUS_TYPE_INT32 .', 'signature be stre make up type code such as dbus_type_int32']
['dbus_validate_interface_APIParam_2 is dbus_validate_interface_APIParam_2 return.', 'dbus_validate_interface_apiparam_2 be dbus_validate_interface_apiparam_2 return']
['dbus_message_get_type_APIParam_1 is the dbus_message_get_type_APIParam_1.', 'dbus_message_get_type_apiparam_1 be dbus_message_get_type_apiparam_1']
['dbus_message_iter_abandon_container_APIParam_1 is the append iterator.', 'dbus_message_iter_abandon_container_apiparam_1 be append iterator']
['This is an ID unique to each DBusServer .', 'be identifier unique each dbusserver']
['You probably want dbus_set_error_APIName instead, in most cases.', 'PRON- probably want dbus_set_error_apiname instead , most case']
['First you should know that for each bus dbus_bus_request_name_APIParam_2, the bus stores a queue of connections that would like to own it.', 'first -PRON- should know each bus dbus_bus_request_name_apiparam_2 , bus store queue connection would like']
['dbus_set_error_const_APIParam_3 is the dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_3 (not copied!!!).', 'dbus_set_error_const_apiparam_3 be dbus_set_error_const_apiparam_1 dbus_set_error_const_apiparam_3 copy']
['However you usually get a reference from dbus_connection_send_with_reply_APIName so probably your app owns a ref also.', 'however -PRON- usually get reference dbus_connection_send_with_reply_apiname so probably -PRON- app own ref']
['Allocates an integer ID to be used for storing application-specific data on any DBusPendingCall .', 'allocate integer identifier be use store application_specific datum dbuspendingcall']
['Both dbus_move_error_APIParam_1 and dbus_move_error_APIParam_2 must be initialized.', 'both dbus_move_error_apiparam_1 dbus_move_error_apiparam_2 must be initialize']
['This can cause performance problems such as draining batteries on embedded platforms.', 'can cause performance problem such as drain battery embed platform']
['When the refcount on the passed-in slot reaches 0, it is set to -1.   dbus_connection_free_data_slot_APIParam_1 is address storing the slot to deallocate.', 'when refcount passed_in slot reach 0 , be set # dbus_connection_free_data_slot_apiparam_1 be address store slot deallocate']
['The dbus_server_get_data_APIParam_2 must still be allocated (must not have been freed).', 'dbus_server_get_data_apiparam_2 must still be allocate must have free']
['Retrieves data previously set with dbus_connection_set_data_APIName .', 'retrieve datum previously set dbus_connection_set_data_apiname']
['Decrements the reference count of a DBusServer .', 'decrement reference count dbusserver']
['Sets the object path this dbus_message_set_path_APIParam_1 is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or the one a signal is being emitted from (for DBUS_MESSAGE_TYPE_SIGNAL).', 'set object path dbus_message_set_path_apiparam_1 be send or one signal be emit dbus_message_type_signal']
['dbus_server_set_data_APIParam_1 is the dbus_server_set_data_APIParam_1.', 'dbus_server_set_data_apiparam_1 be dbus_server_set_data_apiparam_1']
['dbus_validate_utf8_APIParam_1 is a string to be checked, which must not be NULL.', 'dbus_validate_utf8_apiparam_1 be string be check , which must be null']
['So all numbers and strings are basic types and structs, arrays, and variants are not basic types.', 'so number string be basic type struct , arrays , variant be basic type']
['dbus_connection_set_windows_user_function_APIParam_2 is the predicate.', 'dbus_connection_set_windows_user_function_apiparam_2 be predicate']
['Like dbus_message_get_args but takes a va_list for use by language bindings.', 'like dbus_message_get_args but take va_list by language binding']
["For messages you're sending, dbus_connection_send_APIName will assign a serial and return it to you.", 'message -PRON- be send , dbus_connection_send_apiname assign serial return -PRON']
['Appends fields to a dbus_message_append_args_APIParam_1 given a variable argument list.', 'appends field dbus_message_append_args_apiparam_1 give variable argument list']
['Increments the reference count of a DBusConnection .', 'increment reference count dbusconnection']
['You are responsible for calling dbus_bus_set_unique_name_APIName if you register by hand instead of using dbus_bus_register_APIName .', 'PRON- be responsible call dbus_bus_set_unique_name_apiname if -PRON- register by hand instead use dbus_bus_register_apiname']
['will all block while one of the others in the group is running.', 'block while one other group be run']
['dbus_message_demarshal_bytes_needed_APIName returns the number of bytes required to be in the buffer to demarshal a D-Bus message.', 'dbus_message_demarshal_bytes_needed_apiname return number byte require be buffer demarshal d_bus message']
['The message bus is a server and the apps connecting to the bus are clients.', 'message bus be server app connect bus be client']
['dbus_message_iter_append_fixed_array_APIParam_3 is the address of the array.', 'dbus_message_iter_append_fixed_array_apiparam_3 be address array']
['dbus_signature_iter_get_signature_APIName returns the signature of the single complete type starting at the given iterator.', 'dbus_signature_iter_get_signature_apiname return signature single complete type start give iterator']
['dbus_message_get_error_name_APIName returns the error name (should not be freed) or NULL.', 'dbus_message_get_error_name_apiname return error name or null']
['dbus_connection_get_object_path_data_APIParam_1 is the dbus_connection_get_object_path_data_APIParam_1.', 'dbus_connection_get_object_path_data_apiparam_1 be dbus_connection_get_object_path_data_apiparam_1']
['Initializes a DBusError structure.', 'initialize dbuserror structure']
['dbus_message_is_error_APIName returns TRUE if the dbus_message_is_error_APIParam_1 is the specified error.', 'dbus_message_is_error_apiname return true if dbus_message_is_error_apiparam_1 be specify error']
['So you can check for an dbus_set_error_from_message_APIParam_1 reply and convert it to DBusError in one go: if ( dbus_set_error_from_message_APIName (error, reply)) return dbus_set_error_from_message_APIParam_1; else process reply;   dbus_set_error_from_message_APIParam_1 is the dbus_set_error_from_message_APIParam_1 to set.', 'so -PRON- can check dbus_set_error_from_message_apiparam_1 reply convert dbuserror one go : if return dbus_set_error_from_message_apiparam_1 ; else process reply ; dbus_set_error_from_message_apiparam_1 be dbus_set_error_from_message_apiparam_1 set']
['Gets the process ID of the dbus_connection_get_unix_process_id_APIParam_1 if any.', 'get process identifi dbus_connection_get_unix_process_id_apiparam_1 if']
['dbus_message_demarshal_bytes_needed_APIParam_1 is data to be marshalled.', 'dbus_message_demarshal_bytes_needed_apiparam_1 be datum be marshal']
['dbus_message_iter_open_container_APIParam_4 is sub-iterator to initialize.', 'dbus_message_iter_open_container_apiparam_4 be sub_iterator initialize']
['dbus_validate_member_APIParam_1 is a potentially invalid member dbus_validate_member_APIParam_1, which must not be NULL.', 'dbus_validate_member_apiparam_1 be potentially invalid member dbus_validate_member_apiparam_1 , which must be null']
['Gets arguments from a dbus_message_get_args_APIParam_1 given a variable argument list.', 'get argument dbus_message_get_args_apiparam_1 give variable argument list']
['The dbus_pending_call_set_data_APIParam_2 number must have been allocated with dbus_pending_call_allocate_data_slot_APIName .', 'dbus_pending_call_set_data_apiparam_2 number must have allocate dbus_pending_call_allocate_data_slot_apiname']
['dbus_message_get_auto_start_APIName returns TRUE if the dbus_message_get_auto_start_APIParam_1 will use auto-start.', 'dbus_message_get_auto_start_apiname return true if dbus_message_get_auto_start_apiparam_1 auto_start']
['When the maximum is reached, the dbus_connection_set_max_received_size_APIParam_1 will not read more data until some messages are finalized.', 'when maximum be reach , dbus_connection_set_max_received_size_apiparam_1 read more datum until message be finalize']
['You can override the rules for connections authorized as a user identity with dbus_connection_set_unix_user_function_APIName and dbus_connection_set_windows_user_function_APIName .', 'PRON- can override rule connection authorize as user identity dbus_connection_set_unix_user_function_apiname dbus_connection_set_windows_user_function_apiname']
['This means match rules on method calls should not usually give an interface.', 'mean match rule method call should usually give interface']
['The name remains valid until the dbus_bus_get_unique_name_APIParam_1 is freed, and should not be freed by the caller.', 'name remain valid until dbus_bus_get_unique_name_apiparam_1 be free , should be free by caller']
['dbus_watch_handle_APIName cannot be called during the DBusAddWatchFunction, as the dbus_connection_set_watch_functions_APIParam_1 will not be ready to handle that watch yet.', 'dbus_watch_handle_apiname can be call during dbusaddwatchfunction , as dbus_connection_set_watch_functions_apiparam_1 be ready handle watch yet']
['The semantics of the maximum are: if outstanding messages are already above the maximum, additional messages will not be read.', 'semantic maximum be : if outstanding message be already above maximum , additional message be read']
['The returned string becomes invalid if the dbus_message_get_path_APIParam_1 is modified, since it points into the wire-marshaled dbus_message_get_path_APIParam_1 data.', 'return string become invalid if dbus_message_get_path_apiparam_1 be modify , since point into wire_marshaled dbus_message_get_path_apiparam_1 datum']
['Resizes a block of dbus_realloc_APIParam_1 previously allocated by dbus_malloc_APIName or dbus_malloc0_APIName .', 'resize block dbus_realloc_apiparam_1 previously allocate by dbus_malloc_apiname or dbus_malloc0_apiname']
['To read any container type (array, struct, dict) you will need to recurse into the container with dbus_message_iter_recurse_APIName .', 'read container type -PRON- need recurse into container dbus_message_iter_recurse_apiname']
['If registration succeeds, the unique name will be set, and can be obtained using dbus_bus_get_unique_name_APIName .', 'if registration succeed , unique name be set , can be obtain use dbus_bus_get_unique_name_apiname']
['If so, the dbus_connection_set_watch_functions_APIParam_2 may have been called successfully one or more times, but the dbus_connection_set_watch_functions_APIParam_3 will also have been called to remove any successful adds.', 'if so , dbus_connection_set_watch_functions_apiparam_2 have call successfully one or more time , but dbus_connection_set_watch_functions_apiparam_3 have call remove successful add']
['There is an unfixable memleak in that it is unsafe to free memory malloced for use with setenv.', 'be unfixable memleak be unsafe free memory malloce setenv']
['dbus_server_get_id_APIName returns the id of the dbus_server_get_id_APIParam_1 or NULL if no memory.', 'dbus_server_get_id_apiname return identifi dbus_server_get_id_apiparam_1 or null if no memory']
['Asks the bus to return its globally unique ID, as described in the D-Bus specification.', 'ask bus return globally unique identifi , as describe d_bus specification']
['dbus_address_unescape_value_APIName returns newly-allocated unescaped dbus_address_unescape_value_APIParam_1 or NULL if no memory.', 'dbus_address_unescape_value_apiname return newly_allocated unescaped dbus_address_unescape_value_apiparam_1 or null if no memory']
['dbus_bus_get_id_APIParam_2 is location to store the dbus_bus_get_id_APIParam_2.', 'dbus_bus_get_id_apiparam_2 be location store dbus_bus_get_id_apiparam_2']
['The dbus_message_set_destination_APIParam_2 is the name of another connection on the bus and may be either the unique name assigned by the bus to each connection, or a well-known name specified in advance.', 'dbus_message_set_destination_apiparam_2 be name another connection bus be either unique name assign by bus each connection , or well_known name specify advance']
['dbus_message_has_signature_APIParam_2 is typecode array.', 'dbus_message_has_signature_apiparam_2 be typecode array']
['DBUS_TYPE_INVALID is not a container type.', 'dbus_type_invalid be container type']
['dbus_signature_iter_get_signature_APIParam_1 is pointer to an iterator.', 'dbus_signature_iter_get_signature_apiparam_1 be pointer iterator']
['The D-Bus specification describes some of the supported dbus_server_set_auth_mechanisms_APIParam_2.', 'd_bus specification describe support dbus_server_set_auth_mechanisms_apiparam_2']
['Otherwise, the connection will be unreferenced and closed.', 'otherwise , connection be unreference closed']
["dbus_connection_send_APIParam_3 is return location for dbus_connection_send_APIParam_2 dbus_connection_send_APIParam_3, or NULL if you don't care.", 'dbus_connection_send_apiparam_3 be return location dbus_connection_send_apiparam_2 dbus_connection_send_apiparam_3 , or null if -PRON- care']
['The flags returned by dbus_watch_get_flags_APIName will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR; all watches implicitly include a watch for hangups, errors, and other exceptional conditions.', 'flag return by dbus_watch_get_flags_apiname only contain dbus_watch_readable dbus_watch_writable , never dbus_watch_hangup or dbus_watch_error ; watch implicitly include watch hangup , error , other exceptional condition']
['dbus_message_get_data_APIName returns the data, or NULL if not found.', 'dbus_message_get_data_apiname return datum , or null if find']
['Using dbus_bus_register_APIName manually is only useful if you have your own custom message bus not found in DBusBusType .', 'use dbus_bus_register_apiname manually be only useful if -PRON- have -PRON- custom message bus find dbusbustype']
['dbus_parse_address_APIName returns TRUE on success, FALSE otherwise.', 'dbus_parse_address_apiname return true success , false otherwise']
['Unregisters the handler registered with exactly the given dbus_connection_unregister_object_path_APIParam_2.', 'unregister handler register exactly give dbus_connection_unregister_object_path_apiparam_2']
['dbus_message_set_destination_APIParam_1 is the dbus_message_set_destination_APIParam_1.', 'dbus_message_set_destination_apiparam_1 be dbus_message_set_destination_apiparam_1']
['This string must not be freed.', 'string must be free']
["The semantics are not: if the next message would cause us to exceed the maximum, we don't read it.", 'semantic be : if next message would cause -PRON- exceed maximum , -PRON- read']
['When you lose ownership of your bus dbus_bus_request_name_APIParam_2, you need to exit.', 'when -PRON- lose ownership -PRON- bus dbus_bus_request_name_apiparam_2 , -PRON- need exit']
['The results are undefined when calling this if the current type is a non-container (i.e.', 'result be undefined when call if current type be non_container i']
['If threads have been initialized with a recursive mutex function, then this will not deadlock; however, it can certainly confuse your application.', 'if thread have initialize recursive mutex function , then deadlock ; however , can certainly confuse -PRON- application']
['It is not allowed to reference a DBusWatch after it has been passed to remove_function.', 'be allow reference dbuswatch after have pass remove_function']
['dbus_connection_set_timeout_functions_APIParam_4 is function to notify of enable/disable.', 'dbus_connection_set_timeout_functions_apiparam_4 be function notify']
['Results of this function are undefined if there is no container to recurse into at the current iterator position.', 'result function be undefined if be no container recurse into current iterator position']
['Gets whether the dbus_connection_get_is_anonymous_APIParam_1 is not authenticated as a specific user.', 'get whether dbus_connection_get_is_anonymous_apiparam_1 be authenticate as specific user']
['In particular this happens on initial dbus_connection_get_dispatch_status_APIParam_1, because all sorts of authentication protocol stuff has to be parsed before the first message arrives.', 'particular happen initial dbus_connection_get_dispatch_status_apiparam_1 , because sort authentication protocol stuff have be parse before first message arrive']
['So for string, const char**.', 'so stre , const char']
['dbus_connection_set_data_APIParam_4 is finalizer function for the dbus_connection_set_data_APIParam_3.', 'dbus_connection_set_data_apiparam_4 be finalizer function dbus_connection_set_data_apiparam_3']
['Checks whether the dbus_message_has_sender_APIParam_1 has the given unique dbus_message_has_sender_APIParam_2 as its sender.', 'check whether dbus_message_has_sender_apiparam_1 have give unique dbus_message_has_sender_apiparam_2 as sender']

