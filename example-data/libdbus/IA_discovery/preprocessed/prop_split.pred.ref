['Frees an dbus_error_free_APIParam_1 that been set , reinitializes the dbus_error_free_APIParam_1 as in dbus_error_init_APIName', 'free param be set , reinitialize param as api']
['dbus_error_free_APIParam_1 is memory where the dbus_error_free_APIParam_1 is stored', 'param be memory param be store']
['Checks whether the dbus_error_has_name_APIParam_1 is set and has the given dbus_error_has_name_APIParam_2', 'check whether param be set have give param']
['dbus_error_has_name_APIParam_1 is the dbus_error_has_name_APIParam_1', 'param be param']
["that is , you recurse into the array , and you call dbus_message_iter_get_fixed_array_APIName on the `` sub-iterator '' created by dbus_message_iter_recurse_APIName", 'PRON- array , -PRON- call api param create by api']
['dbus_error_has_name_APIParam_2 is the dbus_error_has_name_APIParam_2', 'param be param']
['dbus_error_has_name_APIName return TRUE if the given named dbus_error_has_name_APIParam_1 occurred', 'api return constant']
['Initializes a DBusError structure', 'initialize structure']
['dbus_error_init_APIParam_1 is the DBusError', 'param be']
['Does not allocate any memory', 'do not allocate memory']
['Checks whether an dbus_error_is_set_APIParam_1 occurred', 'check whether param occur']
['dbus_error_is_set_APIParam_1 is the dbus_error_is_set_APIParam_1 object', 'param be param object']
['dbus_error_is_set_APIName return TRUE if an dbus_error_is_set_APIParam_1 occurred', 'api return constant']
['Moves an error dbus_move_error_APIParam_1 into dbus_move_error_APIParam_2 , freeing dbus_move_error_APIParam_1 and overwriting dbus_move_error_APIParam_2', 'error param , free param overwriting param']
['Both dbus_move_error_APIParam_1 and dbus_move_error_APIParam_2 must be initialized', 'param must be initialize']
['dbus_move_error_APIParam_1 is reinitialized to an empty error', 'param be reinitialize empty error']
['dbus_move_error_APIParam_2 may not contain an existing error', 'param may not contain exist error']
['the dbus_error_init_APIParam_1 only needs to be freed', 'param only need be free']
['dbus_move_error_APIParam_1 is the source error', 'param be source error']
['dbus_move_error_APIParam_2 is the destination error or NULL', 'param be destination error null']
['Assigns an dbus_set_error_APIParam_1 dbus_set_error_APIParam_2 and message to a DBusError', 'assign param message']
['just frees and reinits the source error', 'free reinit source error']
['The dbus_set_error_APIParam_3 may be NULL , which means a default message will be deduced from the dbus_set_error_APIParam_2', 'param may be null , which mean default message be deduce param']
['It will not hurt you', 'not hurt -PRON']
['This is not a good idea , just go ahead and provide a useful dbus_set_error_APIParam_1 message', 'be not good idea , ahead provide useful param message']
['dbus_set_error_APIParam_1 is the dbus_set_error_APIParam_1', 'param be param']
['Does nothing', 'do nothing']
['dbus_set_error_APIParam_2 is the dbus_set_error_APIParam_1 dbus_set_error_APIParam_2', 'param be param']
['dbus_set_error_APIParam_3 is printf-style dbus_set_error_APIParam_3 string', 'param be param string']
['Assigns an dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_2 and dbus_set_error_const_APIParam_3 to a DBusError', 'assign param']
['The dbus_set_error_const_APIParam_3 may be NULL , which means a default dbus_set_error_const_APIParam_3 will be deduced from the dbus_set_error_const_APIParam_2', 'param may be null , which mean default param be deduce param']
['an out-of-memory dbus_set_error_APIParam_1 message will be set instead', 'param message be set instead']
['The default dbus_set_error_const_APIParam_3 will be totally useless , though , so using a NULL dbus_set_error_const_APIParam_3 is not recommended', 'default param be totally useless , though , use null param be not recommend']
['dbus_set_error_const_APIParam_1 is the dbus_set_error_const_APIParam_1 or NULL', 'param be param null']
['dbus_set_error_const_APIParam_2 is the dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_2', 'param be param']
['Does nothing', 'do nothing']
['You probably want dbus_set_error_APIName instead , in most cases', 'PRON- probably want api instead , case']
['you must ensure the dbus_set_error_const_APIParam_2 and dbus_set_error_const_APIParam_3 are global data that will not be freed', 'PRON- must ensure param be global datum not be free']
['dbus_set_error_const_APIParam_3 is the dbus_set_error_const_APIParam_1 dbus_set_error_const_APIParam_3 -LRB- not copied', 'param be param _ lrb _ not copy']
['dbus_free_APIParam_1 is block to be freed', 'param be block be free']
['Frees a block of dbus_free_APIParam_1 previously allocated by dbus_malloc_APIName or dbus_malloc0_APIName', 'free block param previously allocate by api']
['Frees a NULL - terminated array of strings', 'free null _ terminate array string']
['dbus_free_string_array_APIParam_1 is the array to be freed', 'param be array be free']
['NULL , does nothing', 'null , do nothing']
['Guaranteed to return NULL if dbus_malloc_APIParam_1 is zero on all platforms', 'guarantee return null']
['Allocates the given number of dbus_malloc_APIParam_1 , as with standard malloc_APIName', 'allocate give number param , as standard api']
['NULL , does nothing', 'null , do nothing']
['dbus_malloc_APIName memory is NOT safe to free with regular free_APIName from the C library', 'api memory be not safe free regular api library']
['dbus_malloc_APIParam_0 must be released with dbus_free_APIName', 'param must be release api']
['dbus_malloc_APIParam_1 is number of dbus_malloc_APIParam_1 to allocate', 'param be number param allocate']
['Returns NULL', 'return null']
['Guaranteed to return NULL if dbus_malloc0_APIParam_1 is zero on all platforms', 'guarantee return null']
['Free it with dbus_free_APIName only', 'free api only']
['Free dbus_malloc_APIName memory with dbus_free_APIName only', 'free api memory api only']
['dbus_malloc0_APIParam_1 is number of dbus_malloc0_APIParam_1 to allocate', 'param be number param allocate']
['Returns NULL', 'return null']
['dbus_malloc_APIName return allocated memory, or NULL if the allocation fails', 'api return allocate memory , null']
['dbus_malloc0_APIName return allocated memory, or NULL if the allocation fails', 'api return allocate memory , null']
['dbus_malloc0_APIName memory is NOT safe to free with regular free_APIName from the C library', 'api memory be not safe free regular api library']
['Guaranteed to free the dbus_realloc_APIParam_1 and return NULL if dbus_realloc_APIParam_2 is zero on all platforms', 'guarantee free param return null']
['Allocates the given number of dbus_malloc0_APIParam_1 , as with standard malloc_APIName , but all dbus_malloc0_APIParam_1 are initialized to zero as with calloc_APIName', 'allocate give number param , as standard api , but param be initialize constant as api']
['Resizes a block of dbus_realloc_APIParam_1 previously allocated by dbus_malloc_APIName or dbus_malloc0_APIName', 'block param previously allocate by api']
['dbus_realloc_APIParam_2 is new size of the dbus_realloc_APIParam_1 block', 'param be size param block']
['dbus_realloc_APIParam_1 is block to be resized', 'param be block be']
['dbus_realloc_APIName return allocated dbus_realloc_APIParam_1, or NULL if the resize fails', 'api return allocate param null']
['Returns NULL', 'return null']
['Frees all memory allocated internally by libdbus and reverses the effects of dbus_threads_init_APIName', 'free memory allocate internally by reverse effect api']
['dbus_shutdown_APIName does NOT free memory thatbe returned by dbus_shutdown_APIName to the application', 'api do not free memory thatbe return by api application']
['the dbus_realloc_APIParam_1 is not freed', 'param be not free']
['It only frees libdbus-internal data structures', 'only free param datum structure']
['libdbus keeps internal global variables , caches and thread locks , and it can be useful to free these internal data structures', 'keep internal global variable , cache thread lock , can be useful free internal data structure']
['You MUST free all memory and release all reference counts returned to you by libdbus prior to calling dbus_shutdown_APIName', 'PRON- must free memory release reference count return -PRON- by before call api']
['You can , however , start over', 'PRON- can , however , start']
['You can not continue to use any D-Bus objects , such as connections , that were allocated prior to dbus_shutdown_APIName', 'PRON- can not continue use param object , as connection , be allocate before api']
['call dbus_threads_init_APIName again , create new connections , and so forth', 'call api , create connection , forth']
['calling dbus_shutdown_APIName will drain its queue of messages and disconnect it', 'call api drain queue message']
['The purpose of dbus_shutdown_APIName is to allow applications to get clean output from memory leak checkers', 'purpose api be allow application get clean output memory leak']
['There is absolutely no requirement to call dbus_shutdown_APIName - in fact , most applications will not bother and should not feel guilty', 'be absolutely no requirement call api _ fact , application not bother should not feel guilty']
['dbus_shutdown_APIName is NOT thread safe , it must be called', 'api be not thread safe , must be call']
['You have to know that nobody is using libdbus in your application process before you can call dbus_shutdown_APIName', 'PRON- have know be use application process before -PRON- can call api']
['Obtains the machine UUID of the machine this process is running on', 'obtain machine machine process be run']
['dbus_get_local_machine_id_APIParam_0 must be freed with dbus_free_APIName', 'param must be free api']
['In the latter case , a warning is logged', 'latter case , warning be log']
['this will result in processing of the special Disconnected signal , which may result in a call to _exit_APIName , unless you have used dbus_connection_set_exit_on_disconnect_APIName to disable that behaviour', 'result processing special disconnected signal , which may result call api , unless -PRON- have use api disable behaviour']
['One implication of this is that calling dbus_shutdown_APIName from a library is almost certainly wrong', 'one be call api library be almost certainly wrong']
['Other than its deficient error reporting , dbus_get_local_machine_id_APIName is the same as dbus_try_get_local_machine_id_APIName', 'deficient error reporting , api be as api']
['Returns a 32-byte-long hex-encoded UUID string , or NULL on failure', 'return param string , null failure']
['Gets the DYNAMICALLY LINKED version of libdbus', 'get dynamically link version']
['dbus_shutdown_APIName may also be useful', 'api may be useful']
['you can get either the runtime or the compile-time version', 'PRON- can get either runtime param version']
['dbus_get_local_machine_id_APIName returns NULL if there was not enough memory to read the UUID, or if the UUID could not be read because the D-Bus library was installed incorrectly', 'api return null']
['dbus_get_version_APIParam_1 is pointer to return the major version, or NULL', 'param be pointer return version , null']
['Think carefully about which of these you want in a given case', 'think carefully which -PRON- want give case']
['Alternatively , there are macros #DBUS_MAJOR_VERSION , #DBUS_MINOR_VERSION , #DBUS_MICRO_VERSION , and #DBUS_VERSION which allow you to test the VERSION YOU ARE COMPILED AGAINST', 'alternatively , be macros constant which allow -PRON- test version -PRON- be compile against']
['dbus_get_version_APIParam_2 is pointer to return the minor version, or NULL', 'param be pointer return minor version , null']
['The MINOR is an odd number for development releases and an even number for stable releases', 'minor be odd number release even number stable release']
['dbus_get_version_APIParam_3 is pointer to return the micro version, or NULL', 'param be pointer return micro version , null']
['Wrapper for setenv_APIName', 'wrapper api']
['There is an unfixable memleak in that it is unsafe to free memory malloced for use with setenv', 'be unfixable be unsafe free memory malloce use']
['This is because we can not rely on internal implementation details of the underlying libc library', 'be because can not rely internal implementation detail underlie library']
['unsets the environment variable', 'unset environment variable']
['the MINOR changes is added', 'minor change be add']
["The libdbus full version number is `` MAJOR.MINOR.MICRO '' where , and the MICRO changes with each release of a MAJOR.MINOR series", 'full version number be param , micro change release param']
['dbus_setenv_APIParam_1 is name of environment variable', 'param be name environment variable']
['dbus_setenv_APIName is not thread-safe', 'api be not param']
['dbus_setenv_APIParam_2 is dbus_setenv_APIParam_2 of environment variable , or NULL to unset', 'param be param environment variable , null unset']
['dbus_setenv_APIName return TRUE on success, FALSE if not enough memory', 'api return constant success , constant if not enough memory']
['Obtains the machine UUID of the machine this process is running on', 'obtain machine machine process be run']
['dbus_try_get_local_machine_id_APIParam_0 must be freed with dbus_free_APIName', 'param must be free api']
['This UUID is guaranteed to remain the same until the next reboot', 'be guarantee remain until next']
['The machine ID can also be used to create unique per-machine instances', 'machine -PRON- would can be use create unique param instance']
['It will usually remain the same across reboots also , but hardware configuration changes or rebuilding the machine could break that', 'usually remain across , but configuration change rebuild machine could break']
['you could use it in bus names or X selection names', 'PRON- could use name selection name']
['Returns a 32-byte-long hex-encoded UUID string , or NULL on failure', 'return param string , null failure']
['You can get the machine ID of a remote application by invoking the method GetMachineId from interface org.freedesktop.DBus.Peer', 'PRON- can get machine -PRON- would remote application by invoke api param']
['The machine ID is preferred over the machine hostname , and may also change at runtime', 'machine -PRON- would be prefer machine hostname , may change runtime']
['The UUID is not a UUID in the sense of RFC4122', 'be not sense rfc constant']
['the details are explained in the D-Bus specification', 'detail be explain param specification']
['Allocates an integer ID to be used for storing application-specific data on any DBusPendingCall', 'allocate integer -PRON- would be use storing param datum']
['The allocated ID may be used with dbus_pending_call_set_data_APIName and dbus_pending_call_get_data_APIName', 'allocate -PRON- would may be use api']
['The allocated slot is global , i.e', 'allocate be global']
['The passed-in slot must be initialized to -1 , and is filled in with the slot ID', 'param must be initialize constant , be fill -PRON- would']
['If the remote application has the same machine ID as the one returned by this function, the remote application is on the same machine as your application', 'if remote application have machine -PRON- would as one return by function , remote application be machine as application']
['all DBusPendingCall objects will have a slot with the given integer ID reserved', 'object have give integer -PRON- would reserve']
['dbus_pending_call_allocate_data_slot_APIParam_1 is address of a global variable storing the slot', 'param be address global variable storing']
['dbus_pending_call_allocate_data_slot_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['Block until the dbus_pending_call_block_APIParam_1 call is completed', 'block until param call be complete']
['If the dbus_pending_call_block_APIParam_1 call is already completed, dbus_pending_call_block_APIName returns immediately', 'if param call be already complete , api return immediately']
['it is assumed to be already allocated', 'be assume be already allocate']
['and its refcount is incremented', 'be incremente']
['The blocking is as with dbus_connection_send_with_reply_and_block_APIName', 'block be as api']
['This requires storing timestamps instead of intervals in the timeout dbus_pending_call_block_APIParam_1 is the dbus_pending_call_block_APIParam_1 call', 'require storing instead timeout param be param call']
['it does not enter the main loop or process other messages , it simply waits for the reply in question', 'do not enter main loop process message , simply wait question']
['Cancels the dbus_pending_call_cancel_APIParam_1 call , such that any reply or error received will just be ignored', 'cancel param call , error receive be ignore']
['dbus_pending_call_cancel_APIParam_1 is the dbus_pending_call_cancel_APIParam_1 call', 'param be param call']
['However you usually get a reference from dbus_connection_send_with_reply_APIName so probably your app owns a ref also', 'however -PRON- usually get reference api probably own']
['Deallocates a global ID for DBusPendingCall data slots', 'deallocate global -PRON- would datum']
['the timeout is reset', 'timeout be reset']
['but it should really only use time remaining', 'but should really only use time remain']
['Note that canceling a dbus_pending_call_cancel_APIParam_1 call will not simulate a timed-out call', 'cancel param call not simulate param call']
['dbus_pending_call_get_data_APIName and dbus_pending_call_set_data_APIName may no longer be used with this slot', 'api may no longer be use']
['Drops the dbus library internal reference to the DBusPendingCall so will free the call', 'drop library internal reference free call']
['Checks whether the dbus_pending_call_get_completed_APIParam_1 call has received a reply yet , or not', 'check whether param call have receive yet , not']
['dbus_pending_call_get_completed_APIParam_1 is the dbus_pending_call_get_completed_APIParam_1 call', 'param be param call']
['no reply is received unless the the reply was already received before you canceled', 'no be receive unless be already receive before -PRON- cancel']
['dbus_pending_call_get_completed_APIName return TRUE if a reply has been received', 'api return constant']
['The idea is that two processes with the same machine ID should be able to use shared memory , UNIX domain sockets , process IDs , and other features of the OS that require both processes to be running on the same OS kernel instance', 'idea be two process machine -PRON- would should be able use share memory , unix domain socket , process id , feature os require process be run os kernel instance']
['Retrieves data previously set with dbus_pending_call_set_data_APIName', 'retrieve datum previously set api']
['a timeout error reply is received', 'timeout error be receive']
['The dbus_pending_call_get_data_APIParam_2 must still be allocated', 'param must still be allocate']
['dbus_pending_call_get_data_APIParam_1 is the pending_call', 'param be param']
['Existing data stored on existing DBusPendingCall objects will be freed', 'exist datum store exist object be free']
['it is set to -1', 'be set constant']
['dbus_pending_call_get_data_APIParam_2 is the dbus_pending_call_get_data_APIParam_2 to get data from', 'param be param get datum']
['dbus_pending_call_get_data_APIName return the data, or NULL if not found', 'api return datum , null']
['Increments the reference count on a dbus_pending_call_ref_APIParam_1 call', 'increment reference count param call']
['dbus_pending_call_ref_APIParam_1 is the dbus_pending_call_ref_APIParam_1 call object', 'param be param call object']
['dbus_pending_call_ref_APIName return the dbus_pending_call_ref_APIParam_1 call object', 'api return param call object']
['The dbus_pending_call_set_data_APIParam_2 number must have been allocated with dbus_pending_call_allocate_data_slot_APIName', 'param number must have be allocate api']
['dbus_pending_call_set_data_APIParam_1 is the pending_call', 'param be param']
['dbus_pending_call_set_data_APIParam_2 is the dbus_pending_call_set_data_APIParam_2 number', 'param be param number']
['dbus_pending_call_set_data_APIParam_3 is the dbus_pending_call_set_data_APIParam_3 to store', 'param be param store']
['dbus_pending_call_set_data_APIParam_4 is finalizer function for the dbus_pending_call_set_data_APIParam_3', 'param be finalizer function param']
['dbus_pending_call_set_data_APIName return TRUE if there was enough memory to store the dbus_pending_call_set_data_APIParam_3', 'api return constant']
['dbus_pending_call_set_notify_APIParam_1 is the dbus_pending_call_set_notify_APIParam_1 call', 'param be param call']
['dbus_pending_call_set_notify_APIParam_2 is notifier dbus_pending_call_set_notify_APIParam_2', 'param be notifi param']
['dbus_pending_call_set_notify_APIParam_3 is data to pass to notifier dbus_pending_call_set_notify_APIParam_2', 'param be data notifi param']
['dbus_pending_call_set_notify_APIParam_4 is dbus_pending_call_set_notify_APIParam_2 to free the user data', 'param be param free user datum']
['dbus_pending_call_set_notify_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['or when the dbus_pending_call_set_data_APIParam_1 call is finalized', 'param call be finalize']
['Stores a pointer on a DBusPendingCall , along with an optional function to be used for freeing the dbus_pending_call_set_data_APIParam_3', 'store pointer , along optional function be use freeing param']
['Gets the reply, or returns NULL if none has been received yet', 'get , return null']
['Sets a notification dbus_pending_call_set_notify_APIParam_2 to be called', 'set param be call']
['or the dbus_pending_call_set_notify_APIParam_1 call times out', 'param call time']
['Ownership of the reply message passes to the caller', 'message caller']
['dbus_pending_call_steal_reply_APIParam_1 is the dbus_pending_call_steal_reply_APIParam_1 call', 'param be param call']
['dbus_pending_call_steal_reply_APIName return the reply message or NULL', 'api return message null']
['dbus_pending_call_steal_reply_APIName can only be called once per dbus_pending_call_steal_reply_APIParam_1 call', 'api can only be call per param call']
['_dbus_message_get_n_unix_fds_APIParam_1 is the _dbus_message_get_n_unix_fds_APIParam_1', 'param be param']
['Gets the number of unix fds attached to this _dbus_message_get_n_unix_fds_APIParam_1', 'get number unix attach param']
['_dbus_message_get_n_unix_fds_APIName return the number of file descriptors', 'api return number file descriptor']
['Allocates an integer ID to be used for storing application-specific data on any DBusMessage', 'allocate integer -PRON- would be use storing param datum']
['The allocated ID may be used with dbus_message_set_data_APIName and dbus_message_get_data_APIName', 'allocate -PRON- would may be use api']
['The allocated slot is global , i.e', 'allocate be global']
['The passed-in slot must be initialized to -1 , and is filled in with the slot ID', 'param must be initialize constant , be fill -PRON- would']
['Decrements the reference count on a dbus_pending_call_unref_APIParam_1 call , freeing it', 'reference count param call , free']
['all DBusMessage objects will have a slot with the given integer ID reserved', 'object have give integer -PRON- would reserve']
['dbus_message_allocate_data_slot_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['dbus_message_allocate_data_slot_APIParam_1 is address of a global variable storing the slot', 'param be address global variable storing']
['Appends fields to a dbus_message_append_args_APIParam_1 given a variable argument list', 'field param give variable param list']
['The variable argument list should contain the type of each argument followed by the value to append', 'variable param list should contain type param follow by value']
['Appendable types are basic types , and arrays of fixed-length basic types', 'appendable type be basic type , param basic type']
['it is assumed to be already allocated', 'be assume be already allocate']
['and its refcount is incremented', 'be incremente']
['To append variable-length basic types , or any more complex value , you have to use an iterator rather than this function', 'param basic type , value , -PRON- have use rather function']
['To append a basic type , specify its type code followed by the address of the value', 'basic type , specify type code follow by address value']
['dbus_message_append_args_APIName does not support arrays of Unix file descriptors', 'api do not support unix file descriptor']
['For Unix file descriptors dbus_message_append_args_APIName will internally duplicate the descriptor you passed in', 'unix file descriptor api internally duplicate descriptor -PRON']
['Hence you may close the descriptor immediately after this call', 'hence -PRON- may close descriptor immediately after call']
["For strings it works to write const char * array = `` Hello '' and use & array though", 'string work const char array hello use array though']
['you need to manually recurse into the array', 'PRON- need manually array']
['The last argument to dbus_message_append_args_APIName must be DBUS_TYPE_INVALID , marking the end of the argument list', 'last param api must be constant , mark end param list']
['dbus_message_append_args_APIParam_1 is the dbus_message_append_args_APIParam_1', 'param be param']
['dbus_message_append_args_APIName return TRUE on success', 'api return constant success']
['Like dbus_message_append_args_APIName but takes a va_list for use by language bindings', 'like api but take param use by language']
['will not know to stop and will read invalid memory', 'not know read invalid memory']
['dbus_message_append_args_APIParam_2 is type of the first argument ... value of first argument , list of additional type-value pairs', 'param be type first param ... value first param , list additional param pair']
['support DBUS_TYPE_STRUCT and DBUS_TYPE_VARIANT and complex arrays Todo', 'support constant']
["String/signature/path arrays should be passed in as `` const char *** address_of_array '' and `` int n_elements '' Todo", 'should be as const char param int param']
['So you have to create a pointer variable , assign the array to it , take the address of the pointer variable', 'PRON- have create pointer variable , assign array , take address pointer variable']
['it will leave the dbus_message_append_args_valist_APIParam_1 half-written', 'leave param']
['the dbus_message_append_args_APIParam_1 is hosed', 'param be hose']
['for now , and you have to discard the dbus_message_append_args_valist_APIParam_1 and start over', 'PRON- have discard param start']
["Warning in C , given `` int array -LSB- -RSB- '' , '' & array == array ''", 'warn , give int array _ lsb _ _ rsb _ , array array']
['To append an array of fixed-length basic types , pass in the DBUS_TYPE_ARRAY typecode , the element typecode , the address of the array pointer , and a 32-bit integer giving the number of elements in the array', 'array param basic type , paramcode , element , address array pointer , param integer give number element array']
['and you have to start over building the whole dbus_message_append_args_APIParam_1', 'PRON- have start build whole param']
['dbus_message_append_args_valist_APIParam_1 is the dbus_message_append_args_valist_APIParam_1', 'param be param']
['dbus_message_append_args_valist_APIParam_2 is type of first argument', 'param be type first param']
['dbus_message_append_args_valist_APIName return TRUE on success', 'api return constant success']
['dbus_message_append_args_valist_APIParam_3 is value of first argument , list of type/value pairs', 'param be value first param , list pair']
['Checks whether a dbus_message_contains_unix_fds_APIParam_1 contains unix fds', 'check whether param contain unix']
['dbus_message_contains_unix_fds_APIParam_1 is the dbus_message_contains_unix_fds_APIParam_1', 'param be param']
['dbus_message_contains_unix_fds_APIName return TRUE if the dbus_message_contains_unix_fds_APIParam_1 contains unix fds', 'api return constant']
['dbus_message_copy_APIParam_1 is the dbus_message_copy_APIParam_1', 'param be param']
['dbus_message_copy_APIName can not be used in programs that try to recover from OOM errors', 'api can not be use program try recover oom error']
['dbus_message_copy_APIName return the new dbus_message_copy_APIParam_1.or NULL if not enough memory or Unix file descriptors  can be allocated', 'api return param null']
['Demarshal a D-Bus message from the format described in the D-Bus specification', 'param message format describe param specification']
['Generally , dbus_message_demarshal_APIName is only useful for encapsulating D-Bus messages in a different protocol', 'generally , api be only useful encapsulating param message different protocol']
['dbus_message_demarshal_APIParam_2 is the length of dbus_message_demarshal_APIParam_1', 'param be length param']
['dbus_message_demarshal_APIParam_1 is the marshalled DBusMessage', 'param be marshal']
['dbus_message_demarshal_APIParam_3 is the location to save errors to', 'param be location save error']
['dbus_message_demarshal_APIName return NULL if there was an dbus_message_demarshal_APIParam_3', 'api return null']
['Returns the number of bytes required to be in the buffer to demarshal a D-Bus message', 'return number byte require be buffer param message']
['Generally , dbus_message_demarshal_bytes_needed_APIName is only useful for encapsulating D-Bus messages in a different protocol', 'generally , api be only useful encapsulating param message different protocol']
['dbus_message_demarshal_bytes_needed_APIParam_1 is data to be marshalled', 'param be datum be marshal']
['dbus_message_demarshal_bytes_needed_APIParam_2 is the length of dbus_message_demarshal_bytes_needed_APIParam_1', 'param be length param']
['Otherwise returns the number of bytes to be demarshalled', 'otherwise return number byte be demarshalle']
['Deallocates a global ID for message data slots', 'deallocate global -PRON- would message datum']
['Returns has been set', 'return have be set']
["dbus_message_demarshal_bytes_needed_APIName return -1 if there was no valid data to be demarshalled, 0 if there wasn't enough data to determine how much should be demarshalled", 'api return constant']
['dbus_message_get_data_APIName and dbus_message_set_data_APIName may no longer be used with this slot', 'api may no longer be use']
['dbus_message_get_allow_interactive_authorization_APIParam_1 is the dbus_message_get_allow_interactive_authorization_APIParam_1', 'param be param']
['Gets arguments from a dbus_message_get_args_APIParam_1 given a variable argument list', 'get param give variable param list']
['The supported types include those supported by dbus_message_append_args_APIName', 'support type include support by api']
['that is , basic types and arrays of fixed-length basic types', 'basic type param basic type']
['The arguments are the same as they would be for dbus_message_iter_get_basic_APIName or dbus_message_iter_get_fixed_array_APIName', 'param be as would be api']
['Existing data stored on existing DBusMessage objects will be freed', 'exist datum store exist object be free']
['it is set to -1', 'be set constant']
["To get a string array pass in `` char *** array_location '' and `` int * n_elements ''", 'get string array char param int param']
['Similar to dbus_message_get_fixed_array_APIName dbus_message_get_args_APIName does not support arrays of type DBUS_TYPE_UNIX_FD', 'similar api do not support constant']
['except that its refcount is set to 1 , its dbus_message_copy_APIParam_1 serial is reset to 0 , and', 'except be set constant , param be reset constant']
['Creates a new dbus_message_copy_APIParam_1 that is an exact replica of the dbus_message_copy_APIParam_1 specified , the new dbus_message_copy_APIParam_1 will not be locked', 'create param exact param specify , param not be lock']
['The list is terminated with DBUS_TYPE_INVALID', 'list be terminate constant']
['Unix file descriptors that are read with dbus_message_get_args_APIName will have the FD_CLOEXEC flag set', 'unix file descriptor be read api have constant flag set']
['Except for string arrays , dbus_message_get_args_APIParam_0 values are constant', 'except stre , param value be constant']
['do not free them', 'not free']
['The variable argument list should contain the type of the argument followed by a pointer to where the value should be stored', 'variable param list should contain type param follow by pointer value should be store']
['make sure to unset it with fcntl_APIName', 'make sure unset api']
['you need to recurse into the array manually', 'PRON- need array manually']
['In addition to those types , arrays of string , object path , and signature are supported', 'addition type , string , object path , signature be support']
['support DBUS_TYPE_STRUCT and DBUS_TYPE_VARIANT and complex arrays dbus_message_get_args_APIParam_1 is the dbus_message_get_args_APIParam_1', 'support constant array param be param']
['If more arguments than requested are present, the requested argumentsbe returned by dbus_message_get_args_APIName and the extra arguments are ignored', 'by api extra param be ignore']
['but thesebe returned by dbus_message_get_args_APIName as allocated memory and must be freed with dbus_free_string_array_APIName , while the other typesbe returned by dbus_message_get_args_APIName as const references', 'but thesebe return by api as allocate memory must be free api , typesbe return by api as const reference']
['dbus_message_get_args_APIParam_2 is dbus_message_get_args_APIParam_2 to be filled in on failure', 'param be param be fill failure']
['dbus_message_get_args_APIName return FALSE if the dbus_message_get_args_APIParam_2 was set', 'api return constant']
['an dbus_message_get_args_APIParam_2 will be set', 'param be set']
['Like dbus_message_get_args but takes a va_list for use by language bindings', 'like api but take param use by language']
['dbus_message_get_args_APIParam_3 is the first argument type ... location for first argument value , list of type-location pairs', 'param be first param type ... location first param value , list param pair']
['dbus_message_get_args_valist_APIParam_2 is dbus_message_get_args_valist_APIParam_2 to be filled in', 'param be param be fill']
['dbus_message_get_args_valist_APIParam_3 is type of the first argument', 'param be type first param']
['dbus_message_get_args_valist_APIParam_4 is return location for first argument, followed by list of type/location pairs', 'param be return location first param , follow by list pair']
['dbus_message_get_args_valist_APIName return FALSE if dbus_message_get_args_valist_APIParam_2 was set', 'api return constant']
['dbus_message_get_auto_start_APIParam_1 is the dbus_message_get_auto_start_APIParam_1', 'param be param']
['dbus_message_get_container_instance_APIParam_1 is the dbus_message_get_container_instance_APIParam_1', 'param be param']
['dbus_message_get_auto_start_APIName return TRUE if the dbus_message_get_auto_start_APIParam_1 will use auto-start', 'api return constant']
['dbus_message_get_container_instance_APIName return the path  or NULL', 'api return path null']
['Returns TRUE', 'return constant']
['Retrieves data previously set with dbus_message_set_data_APIName', 'retrieve datum previously set api']
['The dbus_message_get_data_APIParam_2 must still be allocated', 'param must still be allocate']
['dbus_message_get_data_APIParam_1 is the dbus_message_get_data_APIParam_1', 'param be param']
['Gets the container instance this dbus_message_get_container_instance_APIParam_1 was sent from , or NULL', 'get container instance param be send , null']
['dbus_message_get_data_APIParam_2 is the dbus_message_get_data_APIParam_2 to get data from', 'param be param get datum']
['dbus_message_get_data_APIName return the data, or NULL if not found', 'api return datum , null']
['dbus_message_get_container_instance_APIParam_0 becomes', 'param become']
['dbus_message_get_destination_APIParam_1 is the dbus_message_get_destination_APIParam_1', 'param be param']
['dbus_message_get_error_name_APIParam_1 is the dbus_message_get_error_name_APIParam_1', 'param be param']
['dbus_message_get_destination_APIName return the dbus_message_get_destination_APIParam_1 destination  or NULL', 'api return param destination null']
['Gets the destination of a dbus_message_get_destination_APIParam_1 or NULL', 'get destination param null']
['dbus_message_get_error_name_APIName return the error name  or NULL', 'api return error name null']
['dbus_message_get_destination_APIParam_0 becomes', 'param become']
['Gets the interface this dbus_message_get_interface_APIParam_1 is being sent to or being emitted from', 'get api param be send emit']
['The interface name is fully-qualified', 'api name be param']
['Gets the error name or NULL', 'get error name null']
['dbus_message_get_interface_APIParam_1 is the dbus_message_get_interface_APIParam_1', 'param be param']
['dbus_message_get_error_name_APIParam_0 becomes', 'param become']
['dbus_message_get_interface_APIName return the dbus_message_get_interface_APIParam_1 interface  or NULL', 'api return param api null']
['Gets the interface member being invoked or emitted', 'get api member invoke emit']
['Returns NULL', 'return null']
['dbus_message_get_member_APIParam_1 is the dbus_message_get_member_APIParam_1', 'param be param']
['dbus_message_get_member_APIName return the member name  or NULL', 'api return member name null']
['dbus_message_get_interface_APIParam_0 becomes', 'param become']
['Returns NULL', 'return null']
['dbus_message_get_no_reply_APIParam_1 is the dbus_message_get_no_reply_APIParam_1', 'param be param']
['dbus_message_get_no_reply_APIName return TRUE if the dbus_message_get_no_reply_APIParam_1 sender is not waiting for a reply', 'api return constant']
['dbus_message_get_member_APIParam_0 becomes', 'param become']
['Gets the object path this dbus_message_get_path_APIParam_1 is being sent to or being emitted from', 'get object path param be send emit']
['dbus_message_get_path_APIParam_1 is the dbus_message_get_path_APIParam_1', 'param be param']
['Returns TRUE', 'return constant']
['dbus_message_get_path_APIName return the path  or NULL', 'api return path null']
['Free dbus_message_get_path_decomposed_APIParam_0 with dbus_free_string_array_APIName', 'free param api']
['Returns NULL', 'return null']
['Gets the object dbus_message_get_path_decomposed_APIParam_2 this dbus_message_get_path_decomposed_APIParam_1 is being sent to or being emitted from in a decomposed format', 'get object param be send emit decompose format']
['dbus_message_get_path_APIParam_0 becomes', 'param become']
['dbus_message_get_path_decomposed_APIName return FALSE if no memory to allocate the array', 'api return constant']
['this could be optimized by using the len from the dbus_message_get_path_decomposed_APIParam_1 instead of calling strlen_APIName again dbus_message_get_path_decomposed_APIParam_1 is the dbus_message_get_path_decomposed_APIParam_1', 'could be optimize by use param instead call api param be param']
['dbus_message_get_reply_serial_APIParam_1 is the dbus_message_get_reply_serial_APIParam_1', 'param be param']
['dbus_message_get_path_decomposed_APIParam_2 is place to store allocated array of dbus_message_get_path_decomposed_APIParam_2 components', 'param be place store allocate array param component']
["An empty but non-NULL dbus_message_get_path_decomposed_APIParam_2 array means the dbus_message_get_path_decomposed_APIParam_2 '' / ''", 'empty but param array mean param']
['NULL set here', 'null set']
['Returns the serial that the dbus_message_get_reply_serial_APIParam_1 is a reply to or 0', 'return param be constant']
['dbus_message_get_reply_serial_APIName return the reply serial', 'api return']
["So the dbus_message_get_path_decomposed_APIParam_2 '' / foo/bar '' becomes -LCB- `` foo '' , `` bar '' , NULL -RCB- and the dbus_message_get_path_decomposed_APIParam_2 '' / '' becomes -LCB- NULL -RCB-", 'param become _ lcb _ foo , , null _ rcb _ param become _ lcb _ null _ rcb']
['The sender is filled in by the dbus_message_get_sender_APIParam_1 bus', 'be fill by param']
['Note , dbus_message_get_sender_APIParam_0 sender is always the unique bus name', 'note , param be always unique name']
['dbus_message_get_sender_APIParam_1 is the dbus_message_get_sender_APIParam_1', 'param be param']
['Connections may own multiple other bus names , but those are not found in the sender field', 'connection may multiple name , but be not find field']
['Gets the unique name of the connection which originated this dbus_message_get_sender_APIParam_1 , or NULL', 'get unique name connection which originate param , null']
['dbus_message_get_sender_APIName return the unique name of the sender or NULL', 'api return unique name null']
['All messages received on a connection will have a serial provided by the remote application', 'message receive connection have provide by remote application']
['dbus_message_get_serial_APIParam_1 is the dbus_message_get_serial_APIParam_1', 'param be param']
['dbus_message_get_sender_APIParam_0 becomes', 'param become']
['For messages you are sending, dbus_connection_send_APIName will assign a serial and return it to you', 'message -PRON- be send , api assign return -PRON']
['dbus_message_get_serial_APIName return the serial', 'api return']
['The message serial number is provided by the application sending the dbus_message_get_serial_APIParam_1 and is used to identify replies to this dbus_message_get_serial_APIParam_1', 'message number be provide by application send param be use identify param']
['Returns the serial of a dbus_message_get_serial_APIParam_1 or 0 has been specified', 'return param constant have be specify']
['The string is terminated with nul', 'string be terminate nul']
['Gets the type signature of the dbus_message_get_signature_APIParam_1 , i.e', 'get type signature param']
['The signature is a string made up of type codes such as DBUS_TYPE_INT32', 'signature be stre make type code as constant']
['dbus_message_get_signature_APIParam_1 is the dbus_message_get_signature_APIParam_1', 'param be param']
['dbus_message_get_signature_APIName return the type signature', 'api return type signature']
["The signature includes only `` in '' arguments for DBUS_MESSAGE_TYPE_METHOD_CALL and only `` out '' arguments for DBUS_MESSAGE_TYPE_METHOD_RETURN , so is slightly different from what you might expect", 'signature include only param constant only param constant , be slightly different -PRON- may expect']
['DBUS_MESSAGE_TYPE_INVALID will never be returned', 'constant never be return']
['Gets the type of a dbus_message_get_type_APIParam_1', 'get type param']
['dbus_message_get_type_APIParam_1 is the dbus_message_get_type_APIParam_1', 'param be param']
['dbus_message_get_type_APIName return the type of the dbus_message_get_type_APIParam_1', 'api return type param']
['dbus_message_get_signature_APIParam_0 becomes', 'param become']
['Checks whether the dbus_message_has_destination_APIParam_1 was sent to the given dbus_message_has_destination_APIParam_2', 'check whether param be send give param']
['If the dbus_message_has_destination_APIParam_1 has no destination specified or has a different destination, returns FALSE', 'if param have no destination specify have different destination , return constant']
['dbus_message_has_destination_APIParam_1 is the dbus_message_has_destination_APIParam_1', 'param be param']
['dbus_message_has_destination_APIParam_2 is the dbus_message_has_destination_APIParam_2 to check', 'param be param check']
['Types include DBUS_MESSAGE_TYPE_METHOD_CALL , DBUS_MESSAGE_TYPE_METHOD_RETURN , DBUS_MESSAGE_TYPE_ERROR , DBUS_MESSAGE_TYPE_SIGNAL , but other types are allowed and all code must silently ignore messages of unknown type', 'type include constant , but type be allow code must silently ignore message unknown type']
['dbus_message_has_interface_APIParam_1 is the dbus_message_has_interface_APIParam_1', 'param be param']
['dbus_message_has_destination_APIName return TRUE if the dbus_message_has_destination_APIParam_1 has the given destination dbus_message_has_destination_APIParam_2', 'api return constant']
['dbus_message_has_interface_APIParam_2 is the interface name', 'param be api name']
['dbus_message_has_interface_APIName return TRUE if the interface field in the header matches', 'api return constant if api field header match']
['dbus_message_has_member_APIParam_1 is the dbus_message_has_member_APIParam_1', 'param be param']
['dbus_message_has_member_APIParam_2 is the dbus_message_has_member_APIParam_2 name', 'param be param name']
['dbus_message_has_member_APIName return TRUE if there is a dbus_message_has_member_APIParam_2 field in the header', 'api return constant']
['dbus_message_has_path_APIParam_1 is the dbus_message_has_path_APIParam_1', 'param be param']
['dbus_message_has_path_APIParam_2 is the dbus_message_has_path_APIParam_2 name', 'param be param name']
['dbus_message_has_path_APIName return TRUE if there is a dbus_message_has_path_APIParam_2 field in the header', 'api return constant']
['The object dbus_message_has_path_APIParam_2 is the destination object for a method call or the emitting object for a signal', 'object param be destination object api call emit object signal']
['If the dbus_message_has_sender_APIParam_1 has no sender specified or has a different sender, returns FALSE', 'if param have no specify have different , return constant']
['Checks whether the dbus_message_has_sender_APIParam_1 has the given unique dbus_message_has_sender_APIParam_2 as its sender', 'check whether param have give unique param as']
['So you can not use dbus_message_has_sender_APIName to see', 'PRON- can not use api see']
['Messages from the bus itself will have DBUS_SERVICE_DBUS as the sender', 'message have constant as']
['dbus_message_has_sender_APIParam_1 is the dbus_message_has_sender_APIParam_1', 'param be param']
['Note that a peer application will always have the unique dbus_message_has_sender_APIParam_2 of the connection as the sender', 'peer application always have unique param connection as']
['dbus_message_has_sender_APIParam_2 is the dbus_message_has_sender_APIParam_2 to check', 'param be param check']
['dbus_message_has_sender_APIName return TRUE if the dbus_message_has_sender_APIParam_1 has the given sender', 'api return constant']
['dbus_message_has_signature_APIParam_1 is the dbus_message_has_signature_APIParam_1', 'param be param']
['Checks for more details on what the dbus_message_has_signature_APIParam_2 looks like', 'check detail param look like']
['dbus_message_has_signature_APIParam_2 is typecode array', 'param be array']
['dbus_message_has_signature_APIName return TRUE if dbus_message_has_signature_APIParam_1 has the given dbus_message_has_signature_APIParam_2', 'api return constant']
['Checks whether the dbus_message_is_error_APIParam_1 is an error reply with the given error name', 'check whether param be error give error name']
['If the dbus_message_is_error_APIParam_1 is not DBUS_MESSAGE_TYPE_ERROR , or has a different name, returns FALSE', 'have different name , return constant']
['dbus_message_is_error_APIParam_1 is the dbus_message_is_error_APIParam_1', 'param be param']
['dbus_message_is_error_APIParam_2 is the name to check', 'param be name check']
['dbus_message_is_error_APIName return TRUE if the dbus_message_is_error_APIParam_1 is the specified error', 'api return constant']
['If the dbus_message_is_method_call_APIParam_1 is not DBUS_MESSAGE_TYPE_METHOD_CALL , or has a different interface or member field, returns FALSE', 'have different api member field , return constant']
['dbus_message_is_method_call_APIParam_1 is the dbus_message_is_method_call_APIParam_1', 'param be param']
['The D-Bus protocol allows dbus_message_is_method_call_APIParam_3 callers to leave out the interface name', 'param protocol allow param caller leave api name']
['Checks whether the dbus_message_is_method_call_APIParam_1 is a dbus_message_is_method_call_APIParam_3 call with the given interface and member fields', 'check whether param be param call give api member field']
['dbus_message_is_method_call_APIParam_3 is the name to check', 'param be name check']
['dbus_message_is_method_call_APIParam_2 is the name to check', 'param be name check']
['dbus_message_is_method_call_APIName return TRUE if the dbus_message_is_method_call_APIParam_1 is the specified dbus_message_is_method_call_APIParam_3 call', 'api return constant']
['it will be assumed equal to the provided interface', 'be assume equal provide api']
['dbus_message_is_signal_APIParam_1 is the dbus_message_is_signal_APIParam_1', 'param be param']
['Checks whether the dbus_message_is_signal_APIParam_1 is a signal with the given interface and member fields', 'check whether param be signal give api member field']
['dbus_message_is_signal_APIParam_2 is the name to check', 'param be name check']
['If the dbus_message_is_signal_APIParam_1 is not DBUS_MESSAGE_TYPE_SIGNAL , or has a different interface or member field, returns FALSE', 'have different api member field , return constant']
['dbus_message_is_signal_APIParam_3 is the name to check', 'param be name check']
['dbus_message_is_signal_APIName return TRUE if the dbus_message_is_signal_APIParam_1 is the specified signal', 'api return constant']
['Once this returns, the message is hosed and you have to start over building the whole message', 'return , message be hose -PRON- have start build whole message']
['dbus_message_iter_abandon_container_APIParam_1 is the append iterator', 'param be']
['Abandons creation of a contained-typed value and frees resources created by dbus_message_iter_open_container_APIName', 'abandon creation param value free resource create by api']
['dbus_message_iter_abandon_container_APIParam_2 is sub-iterator to close', 'param be param close']
['Once this returns, the message is hosed and you have to start over building the whole message', 'return , message be hose -PRON- have start build whole message']
['Abandons creation of a contained-typed value and frees resources created by dbus_message_iter_open_container_APIName', 'abandon creation param value free resource create by api']
['dbus_message_iter_abandon_container_if_open_APIParam_2 is sub-iterator to close', 'param be param close']
['However , it is not valid to call dbus_message_iter_abandon_container_if_open_APIName on uninitialized memory', 'however , be not valid call api uninitialized memory']
['Appends a basic-typed dbus_message_iter_append_basic_APIParam_3 to the message', 'param message']
['This should only be used to abandon creation of a message', 'should only be use abandon creation message']
['The basic types are the non-container types such as integer and string', 'basic type be param type as integer string']
["The `` value '' argument should be the address of a basic-typed dbus_message_iter_append_basic_APIParam_3", 'value param should be address param']
['Unlike dbus_message_iter_abandon_container_APIName , it is valid to call dbus_message_iter_abandon_container_if_open_APIName on an iterator that was initialized with DBUS_MESSAGE_ITER_INIT_CLOSED , or an iterator that was already closed or abandoned', 'unlike api , be valid call api be initialize api , be already close abandon']
['For integer , dbus_int32_t *', 'integer , param']
['So for string , const char **', 'string , const char']
['For Unix file descriptors dbus_message_iter_append_basic_APIName will internally duplicate the descriptor you passed in', 'unix file descriptor api internally duplicate descriptor -PRON']
['dbus_message_iter_append_basic_APIParam_1 is the append iterator', 'param be']
['Hence you may close the descriptor immediately after this call', 'hence -PRON- may close descriptor immediately after call']
['dbus_message_iter_append_basic_APIParam_2 is the dbus_message_iter_append_basic_APIParam_2 of the', 'param be param']
['dbus_message_iter_append_basic_APIParam_3 is dbus_message_iter_append_basic_APIParam_3 the address of the dbus_message_iter_append_basic_APIParam_3', 'param be param address param']
['This is intended to be used in error cleanup code paths , similar to this pattern', 'be intend be use error cleanup code path , similar pattern']
['dbus_message_iter_append_basic_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['DBusMessageIter outer = DBUS_MESSAGE_ITER_INIT_CLOSED', 'outer api']
['dbus_bool_t result = FALSE', 'param result constant']
['Appends a block of fixed-length values to an array', 'block param value array']
['The fixed-length types are all basic types that are not string-like', 'param type be basic type be not param']
['result = TRUE', 'result constant']
['return result', 'return result']
['dbus_message_iter_abandon_container_if_open_APIParam_1 is the append iterator', 'param be']
['the message is hosed', 'message be hose']
['So int32 , double , bool , etc', 'double , , etc']
['You must call dbus_message_iter_open_container_APIName to open an array of values before calling this function', 'PRON- must call api open array value before call function']
['and you have to start over building the whole message', 'PRON- have start build whole message']
['You may call dbus_message_iter_append_fixed_array_APIName multiple times for the same array', 'PRON- may call api multiple time array']
["The `` value '' argument should be the address of the array", 'value param should be address array']
['dbus_message_iter_append_fixed_array_APIParam_1 is the append iterator', 'param be']
['dbus_message_iter_append_fixed_array_APIParam_3 is the address of the array', 'param be address array']
["For strings it works to write const char * array = `` Hello '' and use & array though", 'string work const char array hello use array though']
['dbus_message_iter_append_fixed_array_APIParam_4 is the number of elements to append', 'param be number element']
['dbus_message_iter_append_fixed_array_APIParam_2 is the type of the array elements', 'param be type array element']
["So for integer , `` dbus_int32_t ** '' is expected", 'integer , param be expect']
['dbus_message_iter_append_fixed_array_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['It must not be closed again with this function , or abandoned with dbus_message_iter_abandon_container_APIName', 'must not be close function , abandon api']
['However , it remains valid to call dbus_message_iter_abandon_container_if_open_APIName', 'however , remain valid call api']
['the message is hosed', 'message be hose']
['dbus_message_iter_close_container_APIParam_1 is the append iterator', 'param be']
['Closes a container-typed value appended to the message', 'close param value message']
['and you have to start over building the whole message', 'PRON- have start build whole message']
['dbus_message_iter_close_container_APIParam_2 is sub-iterator to close', 'param be param close']
['the sub-iterator dbus_message_iter_close_container_APIParam_2 has been closed and invalidated', 'param have be close invalidate']
['dbus_message_iter_close_container_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['If the iterator is at the end of the message, returns DBUS_TYPE_INVALID', 'if be end message , return constant']
['may write out more information to the message known only after the entire container is written , and may free resources created by dbus_message_iter_open_container_APIName', 'may information message know only after entire container be , may free resource create by api']
['Returns the argument type of the argument that the message iterator points to', 'return param type param message point']
['dbus_message_iter_get_arg_type_APIName return the argument type', 'api return param type']
['So you have to create a pointer variable , assign the array to it , take the address of the pointer variable', 'PRON- have create pointer variable , assign array , take address pointer variable']
['dbus_message_iter_get_arg_type_APIParam_1 is the message dbus_message_iter_get_arg_type_APIParam_1', 'param be message param']
['You can thus write a loop as follows', 'PRON- can thus loop as follow']
['Returns the number of bytes in the array as marshaled in the wire protocol', 'return number byte array as marshal protocol']
['The iterator must currently be inside an array-typed value', 'must currently be inside param value']
['the message is hosed', 'message be hose']
['dbus_message_iter_get_array_len_APIName is deprecated on the grounds that it is stupid', 'api be deprecate be stupid']
['Use dbus_message_iter_get_element_count_APIName instead', 'use api instead']
['dbus_message_iter_get_array_len_APIParam_1 is the iterator', 'param be']
['and you have to start over building the whole message', 'PRON- have start build whole message']
["Warning in C , given `` int array -LSB- -RSB- '' , '' & array == array ''", 'warn , give int array _ lsb _ _ rsb _ , array array']
['dbus_message_iter_get_array_len_APIName return the number of bytes in the array', 'api return number byte array']
['Why would you want to know how many bytes are in the array as marshaled in the wire protocol ?', 'would -PRON- want know many byte be array as marshal protocol']
['Reads a basic-typed dbus_message_iter_get_basic_APIParam_2 from the message iterator', 'read param message']
['Basic types are the non-containers such as integer and string', 'basic type be param as integer string']
['The dbus_message_iter_get_basic_APIParam_2 argument should be the address of a location to store dbus_message_iter_get_basic_APIParam_0', 'param should be address location store param']
['dbus_message_iter_get_basic_APIParam_0 is by reference and should not be freed', 'param be by reference should not be free']
["So for int32 it should be a `` dbus_int32_t * '' and for string a `` const char ** ''", 'should be param stre const char']
['Unix file descriptors that are read with dbus_message_iter_get_basic_APIName will have the FD_CLOEXEC flag set', 'unix file descriptor be read api have constant flag set']
['To read any container type you will need to recurse into the container with dbus_message_iter_recurse_APIName', 'read container type -PRON- need container api']
['Unix file descriptors', 'unix file descriptor']
['Otherwise , you have to iterate over the container contents one dbus_message_iter_get_basic_APIParam_2 at a time', 'otherwise , -PRON- have iterate container content one param time']
['This call duplicates', 'call duplicate']
['dbus_message_iter_get_basic_APIParam_1 is the iterator', 'param be']
['It is your job to close them', 'be job close']
['dbus_message_iter_get_basic_APIParam_2 is location to store the dbus_message_iter_get_basic_APIParam_2', 'param be location store param']
['make sure to unset it with fcntl_APIName', 'make sure unset api']
['Returns the number of elements in the array-typed value pointed to by the iterator', 'return number element param value point by']
['dbus_message_iter_get_element_count_APIParam_1 is the iterator', 'param be']
['dbus_message_iter_get_element_count_APIName return the number of elements in the array', 'api return number element array']
['you can get all the array elements at once with dbus_message_iter_get_fixed_array_APIName', 'PRON- can get array element api']
['dbus_message_iter_get_element_type_APIParam_1 is the message dbus_message_iter_get_element_type_APIParam_1', 'param be message param']
['All basic-typed values are guaranteed to fit in a DBusBasicValue , so in versions of libdbus that have that type , you can write code like this', 'param value be guarantee fit , version have type , -PRON- can code like']
['Returns the element type of the array that the message iterator points to', 'return element type array message point']
['dbus_message_iter_get_element_type_APIName return the array element type', 'api return array element type']
["you 'll crash", 'PRON- crash']
['Note that you need to check that the iterator points to an array prior to using this function', 'PRON- need check point array before use function']
['Reads a block of fixed-length values from the message iterator', 'read block param value message']
['Be sure you have somehow checked that dbus_message_iter_get_arg_type_APIName matches the type you are expecting , or', 'be sure -PRON- have somehow check api match type -PRON- be expect']
["The message dbus_message_iter_get_fixed_array_APIParam_1 should be `` in '' the array", 'message param should be array']
['Fixed-length values are those basic types that are not string-like , such as integers , bool , double', 'param value be basic type be not param , as integer , , double']
['dbus_message_iter_get_fixed_array_APIParam_0 will be from the current position in the array until the end of the array', 'param be current position array until end array']
['The dbus_message_iter_get_fixed_array_APIParam_2 argument should be the address of a location to store dbus_message_iter_get_fixed_array_APIParam_0', 'param should be address location store param']
['There is one exception here', 'be one exception']
['Note that dbus_message_iter_get_element_count_APIName is O for arrays of fixed-size types but O for arrays of variable-length types such as strings , so it may be a bad idea to use it', 'api be param type but param type as string , may be bad idea use']
['dbus_message_iter_get_fixed_array_APIName should only be used if dbus_type_is_fixed_APIName returns TRUE for the element type', 'api should only be use']
["So for int32 it should be a `` const dbus_int32_t ** '' dbus_message_iter_get_fixed_array_APIParam_0 dbus_message_iter_get_fixed_array_APIParam_2 is by reference and should not be freed", 'should be const param be by reference should not be free']
['dbus_message_iter_get_fixed_array_APIParam_1 is the iterator', 'param be']
['dbus_message_iter_get_fixed_array_APIParam_2 is location to store the block', 'param be location store block']
['dbus_message_iter_get_fixed_array_APIParam_3 is number of elements in the block', 'param be number element block']
['it is much preferred over walking the entire array with an iterator', 'be much prefer walk entire array']
['Returns the current signature of a message iterator', 'return current signature message']
['dbus_message_iter_get_signature_APIParam_0 must be freed with dbus_free_APIName', 'param must be free api']
['dbus_message_iter_get_signature_APIParam_1 is the message iterator', 'param be message']
['dbus_message_iter_get_signature_APIName return the contained signature, or NULL if out of memory', 'api return contain signature , null']
['This is useful primarily for dealing with variants', 'be useful primarily variant']
['one can recurse into a variant and determine the signature of the variant value', 'one can variant determine signature variant value']
['dbus_message_iter_has_next_APIParam_1 is the message dbus_message_iter_has_next_APIParam_1', 'param be message param']
['dbus_message_iter_has_next_APIName return TRUE if there are more fields following', 'api return constant']
['Initializes a DBusMessageIter for reading the arguments of the dbus_message_iter_init_APIParam_1 passed in', 'initialize read param']
['you have to recurse into the array with dbus_message_iter_recurse_APIName and read the elements one by one', 'PRON- have array api read element one by one']
['Some types of argument can only be read with DBusMessageIter however', 'type param can only be read however']
['dbus_message_iter_init_APIParam_1 is the dbus_message_iter_init_APIParam_1', 'param be param']
['dbus_message_iter_init_APIName return FALSE if the dbus_message_iter_init_APIParam_1 has no arguments', 'api return constant']
['dbus_message_iter_init_APIParam_2 is pointer to an iterator to initialize', 'param be pointer initialize']
['The easiest way to iterate is like this', 'easy way iterate be like']
['dbus_message_get_args_APIName is much more convenient', 'api be much convenient']
['DBusMessageIter contains no allocated memory', 'contain no allocate memory']
['it need not be freed , and can be copied by assignment or memcpy_APIName', 'nee not be free , can be copy by api']
['Initializes a DBusMessageIter for appending arguments to the end of a dbus_message_iter_init_append_APIParam_1', 'initialize param end param']
['dbus_message_iter_init_append_APIParam_1 is the dbus_message_iter_init_append_APIParam_1', 'param be param']
['dbus_message_iter_init_append_APIParam_2 is pointer to an iterator to initialize', 'param be pointer initialize']
['If there no next field, returns FALSE', 'if no next field , return constant']
['The only valid operation for such an iterator is dbus_message_iter_abandon_container_if_open_APIName , which does nothing', 'only valid operation be api , which do nothing']
['If the iterator moves forward, returns TRUE', 'if forward , return constant']
['Initialize dbus_message_iter_init_closed_APIParam_1 as', 'initialize param as']
['dbus_message_iter_next_APIParam_1 is the message dbus_message_iter_next_APIParam_1', 'param be message param']
['dbus_message_iter_next_APIName return TRUE if the iterator was moved to the next field', 'api return constant']
['Appends a container-typed value to the message', 'param value message']
['Moves the iterator to the next field', 'next field']
['Container types are struct , variant , and array', 'container type be struct , variant , array']
['the dbus_message_iter_init_append_APIParam_1 is hosed', 'param be hose']
['On success , you are required to append the contents of the container using dbus_message_iter_open_container_APIParam_0 sub-iterator , and call dbus_message_iter_close_container_APIName', 'success , -PRON- be require content container use param , call api']
['For variants , the dbus_message_iter_open_container_APIParam_3 should be the dbus_message_iter_open_container_APIParam_2 of the single value inside the variant', 'variant , param should be param single value inside variant']
['For arrays , dbus_message_iter_open_container_APIParam_3 should be the dbus_message_iter_open_container_APIParam_2 of the array elements', 'param should be param array element']
['and you have to start over building the whole dbus_message_iter_init_append_APIParam_1', 'PRON- have start build whole param']
['For structs and dict entries , dbus_message_iter_open_container_APIParam_3 should be NULL', 'struct entry , param should be null']
['it will be set to whatever types you write into the struct', 'be set whatever type -PRON- struct']
['However , after dbus_message_iter_open_container_APIName has either succeeded or failed , it is valid to call dbus_message_iter_abandon_container_if_open_APIName', 'however , after api have either succeed fail , be valid call api']
['dbus_message_iter_open_container_APIParam_2 is the dbus_message_iter_open_container_APIParam_2 of the value', 'param be param value']
['dbus_message_iter_open_container_APIParam_1 is the append iterator', 'param be']
['dbus_message_iter_open_container_APIParam_3 is the dbus_message_iter_open_container_APIParam_2 of container contents', 'param be param container content']
['dbus_message_iter_open_container_APIParam_4 is sub-iterator to initialize', 'param be param initialize']
['dbus_message_iter_open_container_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['the sub-iterator remains invalid , and must not be closed with dbus_message_iter_close_container_APIName or abandoned with dbus_message_iter_abandon_container_APIName', 'param remain invalid , must not be close api abandon api']
['There no array of int32 to recurse into', 'no array']
['the message is hosed', 'message be hose']
['dbus_message_iter_recurse_APIParam_1 is the message iterator', 'param be message']
['dbus_message_iter_recurse_APIParam_2 is the sub-iterator to initialize', 'param be param initialize']
['Be sure you have somehow checked that dbus_message_iter_get_arg_type_APIName matches the type you are expecting to recurse into', 'be sure -PRON- have somehow check api match type -PRON- be expect']
['and you have to start over building the whole message', 'PRON- have start build whole message']
['Locks a dbus_message_lock_APIParam_1', 'lock param']
['you can only recurse', 'PRON- can only']
['Note that this recurses into a value , not a type , so', 'value , not type']
['dbus_message_lock_APIName may also called externally , for applications wrapping D-Bus in another protocol', 'api may call externally , application wrapping param another protocol']
['Recurses into a container value', 'container value']
['dbus_message_lock_APIParam_1 is the dbus_message_lock_APIParam_1 to lock', 'param be param lock']
['Allows checking that applications do not keep a reference to a dbus_message_lock_APIParam_1 in the outgoing queue and change it underneath us', 'allow check application not keep reference param outgoing queue change underneath -PRON']
['Results of dbus_message_iter_recurse_APIName are undefined', 'result api be undefined']
['Turn a DBusMessage into the marshalled form as described in the D-Bus specification', 'turn marshal form as describe param specification']
['dbus_message_marshal_APIParam_1 is the DBusMessage', 'param be']
['dbus_message_marshal_APIParam_2 is the location to save the marshalled form to', 'param be location save marshal form']
['Generally , dbus_message_marshal_APIName is only useful for encapsulating D-Bus messages in a different protocol', 'generally , api be only useful encapsulating param message different protocol']
['dbus_message_marshal_APIName return FALSE if there was not enough memory', 'api return constant']
['dbus_message_marshal_APIParam_3 is the location to save the length of the marshalled form to', 'param be location save length marshal form']
['Constructs a new message of the given message type', 'construct message give message type']
['Types include DBUS_MESSAGE_TYPE_METHOD_CALL , DBUS_MESSAGE_TYPE_SIGNAL , and so forth', 'type include constant , forth']
['dbus_message_new_APIParam_1 is type of message', 'param be type message']
['Usually you want to use dbus_message_new_method_call_APIName , dbus_message_new_method_return_APIName , dbus_message_new_signal_APIName , or dbus_message_new_error_APIName instead', 'usually -PRON- want use api instead']
['it is much more efficient to use dbus_message_iter_get_fixed_array_APIName to get the whole array in one shot , rather than individually walking over the array elements', 'be much efficient use api get whole array one shot , rather individually walk array element']
['dbus_message_new_APIName return new message or NULL if no memory', 'api return message null']
['Error replies are most common in response to method calls, but can be returned in reply to any message', 'error be common response api call , but can be return message']
['Creates a new message that is an error reply to another message', 'create message error another message']
['The error name must be a valid error name according to the syntax given in the D-Bus specification', 'error name must be valid error name accord syntax give param specification']
["dbus_message_new_error_APIParam_1 is the message we 're replying to", 'param be message']
['dbus_message_new_error_APIParam_2 is the error name', 'param be error name']
['dbus_message_new_error_APIParam_3 is the error message string', 'param be error message string']
['dbus_message_new_error_APIName return a new error message object, free with dbus_message_unref_APIName', 'api return error message object , free api']
['just use DBUS_ERROR_FAILED', 'use constant']
['See dbus_message_new_error_APIName for details - dbus_message_new_error_printf_APIName is the same aside from the printf formatting', 'see api detail _ api be aside printf formatting']
['Creates a new message that is an error reply to another message , allowing you to use printf formatting', 'create message error another message , allow -PRON- use printf formatting']
['add _ DBUS_GNUC_PRINTF to this dbus_message_new_error_printf_APIParam_1 is the original message', 'add _ constant param be original message']
['dbus_message_new_error_printf_APIParam_2 is the error name', 'param be error name']
['dbus_message_new_error_printf_APIName return a new error message', 'api return error message']
['you can recurse into the outermost array', 'PRON- can outermost array']
['dbus_message_new_error_printf_APIParam_3 is the error message format as with printf ... format string arguments', 'param be error message format as printf ... format string param']
['Constructs a new message to invoke a dbus_message_new_method_call_APIParam_4 on a remote object', 'construct message invoke param remote object']
['The main implication of this is that , but it will have no values , so you will not be able to recurse further', 'main be , but have no value , -PRON- not be able']
['The dbus_message_new_method_call_APIParam_2 and dbus_message_new_method_call_APIParam_4 names may not be NULL', 'param name may not be null']
['The dbus_message_new_method_call_APIParam_1 may be NULL in which case no dbus_message_new_method_call_APIParam_1 is set', 'param may be null which case no param be set']
['Destination , dbus_message_new_method_call_APIParam_2 , interface , and dbus_message_new_method_call_APIParam_4 name can not contain any invalid characters', 'destination , param , api , param name can not contain invalid character']
['Returns NULL', 'return null']
['dbus_message_new_method_call_APIParam_1 is name that the message should be sent to or NULL', 'param be name message should be send null']
['dbus_message_new_method_call_APIParam_2 is object dbus_message_new_method_call_APIParam_2 the message should be sent to', 'param be object param message should be send']
['dbus_message_new_method_call_APIParam_3 is interface to invoke', 'param be api invoke']
['dbus_message_new_method_call_APIParam_4 is on , or NULL dbus_message_new_method_call_APIParam_4 method to invoke', 'param be , null param api invoke']
['dbus_message_new_method_call_APIName return a new DBusMessage , free with dbus_message_unref_APIName', 'api return , free api']
['this is appropriate', 'be appropriate']
['Constructs a message that is a reply to a method call', 'construct message api call']
['The interface may be NULL , which', 'api may be null , which']
['dbus_message_new_method_return_APIParam_1 is the message being replied to', 'param be message']
['dbus_message_new_method_return_APIName return a new DBusMessage , free with dbus_message_unref_APIName', 'api return , free api']
['Constructs a new message representing a signal emission', 'construct message represent signal']
['Returns NULL', 'return null']
['Path , interface , and signal dbus_message_new_signal_APIParam_3 must all be valid', 'path , api , signal param must be valid']
['dbus_message_new_signal_APIParam_1 is the dbus_message_new_signal_APIParam_1 to the object emitting the signal', 'param be param object emit signal']
['A signal is identified by its originating object dbus_message_new_signal_APIParam_1 , interface , and the dbus_message_new_signal_APIParam_3 of the signal', 'signal be identify by originate object param , api , param signal']
['dbus_message_new_signal_APIParam_3 is dbus_message_new_signal_APIParam_3 of the signal', 'param be param signal']
['dbus_message_new_signal_APIParam_2 is the interface the signal is emitted from', 'param be api signal be emit']
['dbus_message_new_signal_APIName return a new DBusMessage , free with dbus_message_unref_APIName', 'api return , free api']
['Returns NULL', 'return null']
['Increments the reference count of a DBusMessage', 'increment reference count']
['dbus_message_ref_APIParam_1 is the dbus_message_ref_APIParam_1', 'param be param']
['dbus_message_ref_APIName return the dbus_message_ref_APIParam_1 See also dbus_message_unref', 'api return param see api']
['On the protocol level this toggles DBUS_HEADER_FLAG_ALLOW_INTERACTIVE_AUTHORIZATION', 'protocol level toggle constant']
['dbus_message_set_allow_interactive_authorization_APIParam_1 is the dbus_message_set_allow_interactive_authorization_APIParam_1', 'param be param']
['The flag is FALSE by default', 'flag be constant by default']
['For messages whose type is not DBUS_MESSAGE_TYPE_METHOD_CALL , this flag is meaningless and should not be set', 'message whose type be not constant , flag be meaningless should not be set']
['In case of failure , the reply will be an error', 'case failure , be error']
['that is , by default the other end is expected to make any authorization decisions non-interactively and promptly', 'by default end be expect make authorization decision param promptly']
['Sets a flag indicating that the caller of the method is prepared to wait for interactive authorization to take place before the actual method is processed', 'set flag indicating caller api be prepare wait interactive authorization take place before actual api be process']
['The flag is set to TRUE by default , i.e', 'flag be set constant by default']
['Sets a flag indicating that an owner for the destination name will be automatically started before the dbus_message_set_auto_start_APIParam_1 is delivered', 'set flag indicating destination name be automatically start before param be deliver']
['auto starting is the default', 'auto starting be default']
['authorization failed , but could have succeeded', 'authorization fail , but could have succeed']
['dbus_message_set_allow_interactive_authorization_APIParam_2 is TRUE', 'param be constant']
['It may use the error DBUS_ERROR_INTERACTIVE_AUTHORIZATION_REQUIRED to signal that', 'may use error constant signal']
['On the protocol level this toggles DBUS_HEADER_FLAG_NO_AUTO_START dbus_message_set_auto_start_APIParam_1 is the dbus_message_set_auto_start_APIParam_1', 'protocol level toggle constant param be param']
['Sets the container instance this dbus_message_set_container_instance_APIParam_1 was sent from', 'set container instance param be send']
['the dbus_message_set_auto_start_APIParam_1 is held until a name owner finishes starting up , or fails to start up', 'param be hold until name finish start , fail start']
['dbus_message_set_container_instance_APIParam_1 is the dbus_message_set_container_instance_APIParam_1', 'param be param']
['dbus_message_set_container_instance_APIParam_2 is the path or NULL to unset', 'param be path null unset']
['dbus_message_set_container_instance_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['The path must contain only valid characters for an object path as defined in the D-Bus specification', 'path must contain only valid character object path as define param specification']
['dbus_message_set_auto_start_APIParam_2 is TRUE', 'param be constant']
['The dbus_message_set_data_APIParam_2 number must have been allocated with dbus_message_allocate_data_slot_APIName', 'param number must have be allocate api']
['dbus_message_set_data_APIParam_1 is the dbus_message_set_data_APIParam_1', 'param be param']
['dbus_message_set_data_APIParam_2 is the dbus_message_set_data_APIParam_2 number', 'param be param number']
['dbus_message_set_data_APIParam_3 is the dbus_message_set_data_APIParam_3 to store', 'param be param store']
['dbus_message_set_data_APIParam_4 is finalizer function for the dbus_message_set_data_APIParam_3', 'param be finalizer function param']
['or when the dbus_message_set_data_APIParam_1 is finalized', 'param be finalize']
['dbus_message_set_data_APIName return TRUE if there was enough memory to store the dbus_message_set_data_APIParam_3', 'api return constant']
['Sets the message dbus_message_set_destination_APIParam_2', 'set message param']
['Stores a pointer on a DBusMessage , along with an optional function to be used for freeing the dbus_message_set_data_APIParam_3', 'store pointer , along optional function be use freeing param']
['dbus_message_set_destination_APIParam_1 is the dbus_message_set_destination_APIParam_1', 'param be param']
['Sets the name of the error', 'set name error']
['The dbus_message_set_destination_APIParam_2 name must contain only valid characters as defined in the D-Bus specification', 'param name must contain only valid character as define param specification']
['The name is fully-qualified', 'name be param']
['dbus_message_set_destination_APIParam_2 is the dbus_message_set_destination_APIParam_2 name or NULL to unset', 'param be param name null unset']
['dbus_message_set_destination_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['dbus_message_set_error_name_APIParam_1 is the dbus_message_set_error_name_APIParam_1', 'param be param']
['The error name must contain only valid characters as defined in the D-Bus specification', 'error name must contain only valid character as define param specification']
['dbus_message_set_error_name_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['dbus_message_set_error_name_APIParam_2 is the name or NULL to unset', 'param be name null unset']
['The dbus_message_set_destination_APIParam_2 is the name of another connection on the bus and may be either the unique name assigned by the bus to each connection , or a well-known name specified in advance', 'param be name another connection may be either unique name assign by connection , param name specify']
['Sets the interface this dbus_message_set_interface_APIParam_1 is being sent to or the interface a signal is being emitted from', 'set api param be send api signal be emit']
['dbus_message_set_interface_APIParam_1 is the dbus_message_set_interface_APIParam_1', 'param be param']
['The interface name must contain only valid characters as defined in the D-Bus specification', 'api name must contain only valid character as define param specification']
['dbus_message_set_interface_APIParam_2 is the interface or NULL to unset', 'param be api null unset']
['Sets the interface dbus_message_set_member_APIParam_2 being invoked or emitted', 'set api param invoke emit']
['The dbus_message_set_member_APIParam_2 name must contain only valid characters as defined in the D-Bus specification', 'param name must contain only valid character as define param specification']
['dbus_message_set_interface_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['dbus_message_set_member_APIParam_1 is the dbus_message_set_member_APIParam_1', 'param be param']
['dbus_message_set_member_APIParam_2 is the dbus_message_set_member_APIParam_2 or NULL to unset', 'param be param null unset']
['dbus_message_set_member_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['On the protocol level this toggles DBUS_HEADER_FLAG_NO_REPLY_EXPECTED dbus_message_set_no_reply_APIParam_1 is the dbus_message_set_no_reply_APIParam_1', 'protocol level toggle constant param be param']
['The flag is FALSE by default , that is by default the other end is required to reply', 'flag be constant by default , by default end be require']
['dbus_message_set_path_APIParam_1 is the dbus_message_set_path_APIParam_1', 'param be param']
['The path must contain only valid characters as defined in the D-Bus specification', 'path must contain only valid character as define param specification']
['a dbus_message_set_no_reply_APIParam_1 was received', 'param be receive']
['Normally you know', 'normally -PRON- know']
['there is no way to know', 'be no way know']
['Sets the object path this dbus_message_set_path_APIParam_1 is being sent to or the one a signal is being emitted from', 'set object path param be send one signal be emit']
['Sets a flag indicating that the dbus_message_set_no_reply_APIParam_1 does not want a reply', 'set flag indicating param do not want']
['dbus_message_set_path_APIParam_2 is the path or NULL to unset', 'param be path null unset']
['if this flag is set, the other end of the connection may  optimize by not sending method return or error replies', 'end connection may optimize by not send api return error']
['dbus_message_set_path_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['dbus_message_set_no_reply_APIParam_2 is TRUE', 'param be constant']
['Sets the reply serial of a dbus_message_set_reply_serial_APIParam_1', 'set param']
['dbus_message_set_reply_serial_APIParam_1 is the dbus_message_set_reply_serial_APIParam_1', 'param be param']
["dbus_message_set_reply_serial_APIParam_2 is the serial we 're replying to", 'param be']
['dbus_message_set_reply_serial_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['Sets the dbus_message_set_sender_APIParam_1 dbus_message_set_sender_APIParam_2', 'set param']
['The dbus_message_set_sender_APIParam_2 must be a valid bus name as defined in the D-Bus specification', 'param must be valid name as define param specification']
['Usually you do not want to call this', 'usually -PRON- not want call']
['The dbus_message_set_sender_APIParam_1 bus daemon will call it to set the origin of each dbus_message_set_sender_APIParam_1', 'param daemon call set origin param']
['dbus_message_set_sender_APIParam_1 is the dbus_message_set_sender_APIParam_1', 'param be param']
['dbus_message_set_sender_APIParam_2 is the dbus_message_set_sender_APIParam_2 or NULL to unset', 'param be param null unset']
['dbus_message_set_sender_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['Sets the dbus_message_set_serial_APIParam_2 number of a dbus_message_set_serial_APIParam_1', 'set param number param']
['This can only be done once on a dbus_message_set_serial_APIParam_1', 'can only be do param']
['dbus_message_set_serial_APIParam_1 is the dbus_message_set_serial_APIParam_1', 'param be param']
['dbus_message_set_serial_APIParam_2 is the dbus_message_set_serial_APIParam_2', 'param be param']
['daemon you should not need to set the dbus_message_set_sender_APIParam_2', 'daemon -PRON- should not need set param']
['Utility function to convert a machine-readable string into a D-Bus message type', 'utility function convert param string param message type']
['Sets a DBusError based on the contents of the given dbus_set_error_from_message_APIParam_2', 'set base content give param']
['The return value indicates', 'return value indicate']
['dbus_set_error_from_message_APIParam_2 is the dbus_set_error_from_message_APIParam_2 to set it from', 'param be param set']
['DBusConnection will automatically set the dbus_message_set_serial_APIParam_2 to an appropriate value', 'automatically set param appropriate value']
['dbus_message_set_serial_APIName is only needed', 'api be only need']
['dbus_set_error_from_message_APIName return TRUE if the dbus_set_error_from_message_APIParam_2 had type DBUS_MESSAGE_TYPE_ERROR', 'api return constant']
['Decrements the reference count of a DBusMessage , freeing the dbus_message_unref_APIParam_1', 'reference count , free param']
['Returns the current type pointed to by the iterator', 'return current type point by']
['The dbus_set_error_from_message_APIParam_1 is only set , as in DBUS_MESSAGE_TYPE_ERROR', 'param be only set , as constant']
['dbus_set_error_from_message_APIParam_1 is the dbus_set_error_from_message_APIParam_1 to set', 'param be param set']
['So you can check for an dbus_set_error_from_message_APIParam_1 reply and convert it to DBusError in one go', 'PRON- can check param convert one']
["DBUS_TYPE_STRUCT , not ' -LRB- '", 'constant , not _ lrb']
["If the iterator is pointing at a type code such as ', the iterator will be returned directly", 'if be point type code as , be return directly']
['dbus_signature_iter_get_current_type_APIParam_1 is pointer to an iterator', 'param be pointer']
['dbus_signature_iter_get_current_type_APIName return current type (e.g', 'api return current type']
['you should initialize a sub-iterator with dbus_signature_iter_recurse_APIName to parse the container type', 'PRON- should initialize param api parse container type']
['Utility function to convert a D-Bus message dbus_message_type_to_string_APIParam_1 into a machine-readable string -LRB- not translated', 'utility function convert param message param stre _ lrb _ not translate']
['dbus_signature_iter_get_element_type_APIParam_1 is pointer to an iterator', 'param be pointer']
['Convenience function for returning the element type of an array', 'convenience function return element type array']
['dbus_signature_iter_get_element_type_APIName return current array element type', 'api return current array element type']
['the dbus_set_error_from_message_APIParam_1 dbus_set_error_from_message_APIParam_2 is set to the first argument', 'param be set first param']
['The name of the dbus_set_error_from_message_APIParam_1 is set to the name of the dbus_set_error_from_message_APIParam_2 , and', 'name param be set name param']
['dbus_signature_iter_get_signature_APIParam_1 is pointer to an iterator', 'param be pointer']
['dbus_signature_iter_get_element_type_APIName allows you to avoid initializing a sub-iterator and getting its current type', 'api allow -PRON- avoid initialize param get current type']
['Returns the signature of the single complete type starting at the given iterator', 'return signature single complete type start give']
['If the iterator is pointing at one of the "i" just that "i" would be returned', 'if be point one would be return']
['dbus_signature_iter_get_signature_APIName return current signature', 'api return current signature']
['Undefined behavior results', 'undefined behavior result']
['Should be freed with dbus_free_APIName', 'should be free api']
['Initializes a DBusSignatureIter for reading a type dbus_signature_iter_init_APIParam_2', 'initialize read type param']
['dbus_signature_iter_init_APIParam_1 is pointer to an iterator to initialize', 'param be pointer initialize']
['dbus_signature_iter_init_APIParam_2 is the type dbus_signature_iter_init_APIParam_2', 'param be type param']
['dbus_signature_iter_init_APIName is not safe to use on invalid signatures', 'api be not safe use invalid signature']
["Skip to the next value on this `` level ''", 'skip next value level']
['be sure to validate potentially invalid signatures with dbus_signature_validate before using this function', 'be sure validate potentially invalid signature api before use function']
['the next field in a struct , the next value in an array', 'next field struct , next value array']
['Returns FALSE at the end of the current container', 'return constant end current container']
['dbus_signature_iter_next_APIParam_1 is the iterator', 'param be']
['dbus_signature_iter_next_APIName return FALSE if nothing more to read at or below this level', 'api return constant']
['if dbus_type_is_container_APIName returns FALSE for the result of dbus_signature_iter_get_current_type_APIName )', 'if api return constant result api']
['Initialize a new iterator pointing to the first type in the current container', 'initialize point first type current container']
['dbus_signature_iter_recurse_APIParam_1 is the current interator', 'param be current']
['dbus_signature_iter_recurse_APIParam_2 is an iterator to initialize pointing to the first child', 'param be initialize point first']
['Check a type dbus_signature_validate_APIParam_1 for validity', 'check type param validity']
['dbus_signature_validate_APIParam_1 is a potentially invalid type dbus_signature_validate_APIParam_1', 'param be potentially invalid type param']
['if the iterator is pointing at the start of "ii" , "" would be returned', 'if be point start ii , would be return']
['dbus_signature_validate_APIParam_2 is dbus_signature_validate_APIParam_2 return', 'param be param return']
["However, when the parser encounters a container type start character such as '(' for a structure, the corresponding type for the container will be returned, e.g", 'however , parser encounter container type start character as . structure , corresponding type container be return']
['dbus_signature_validate_APIName return TRUE if dbus_signature_validate_APIParam_1 is valid or FALSE if an dbus_signature_validate_APIParam_2 is set', 'api return constant']
['Check that a type dbus_signature_validate_single_APIParam_1 is both valid and contains exactly one complete type', 'check type param be valid contain exactly one complete type']
['dbus_signature_validate_single_APIParam_1 is a potentially invalid type dbus_signature_validate_single_APIParam_1', 'param be potentially invalid type param']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_signature_validate_single_APIParam_2 is dbus_signature_validate_single_APIParam_2 return', 'param be param return']
['The results are undefined if the current type is a non-container -LRB- i.e', 'result be undefined']
['dbus_signature_validate_single_APIName return TRUE if dbus_signature_validate_single_APIParam_1 is valid and has exactly one complete type', 'api return constant']
["`` One complete type '' means a single basic type , array , struct , or dictionary", 'one complete type mean single basic type , array , struct']
['DBUS_TYPE_INVALID is not a basic type', 'constant be not basic type']
['So all numbers and strings are basic types and structs , arrays , and variants are not basic types', 'number string be basic type struct , , variant be not basic type']
['dbus_type_is_basic_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID', 'param be either valid param constant']
['The valid type-codes are defined by dbus-protocol.h and can be checked with dbus_type_is_valid_APIName', 'valid param be define by param can be check api']
['dbus_type_is_basic_APIName return TRUE if type is basic', 'api return constant']
['It is an error to pass an invalid type-code , other than DBUS_TYPE_INVALID , to this function', 'be error invalid param , constant , function']
['DBUS_TYPE_INVALID is not a container type', 'constant be not container type']
["A `` container type '' can contain basic types , or nested container types", 'container type can contain basic type , nested container type']
['The valid type-codes are defined by dbus-protocol.h and can be checked with dbus_type_is_valid_APIName', 'valid param be define by param can be check api']
['It is an error to pass an invalid type-code , other than DBUS_TYPE_INVALID , to this function', 'be error invalid param , constant , function']
['dbus_type_is_container_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID', 'param be either valid param constant']
['dbus_type_is_container_APIName return TRUE if type is a container', 'api return constant']
['dbus_type_is_fixed_APIName is useful to determine', 'api be useful determine']
['Some structs are fixed-size but struct is not considered a fixed type for purposes of this function', 'struct be param but struct be not consider fix type purpose function']
['It is an error to pass an invalid type-code , other than DBUS_TYPE_INVALID , to this function', 'be error invalid param , constant , function']
["A `` basic type '' is a somewhat arbitrary concept , but the intent is to include those types that are fully-specified by a single dbus_type_is_basic_APIParam_1 , with no additional type information or nested values", 'basic type be somewhat arbitrary concept , but be include type be param by single param , no additional type information nest value']
['dbus_type_is_fixed_APIParam_1 is either a valid type-code or DBUS_TYPE_INVALID', 'param be either valid param constant']
['The valid type-codes are defined by dbus-protocol.h and can be checked with dbus_type_is_valid_APIName', 'valid param be define by param can be check api']
['values of this type can change length', 'value type can change length']
['dbus_type_is_fixed_APIName return FALSE if the type can occupy different lengths', 'api return constant']
['Tells you whether', 'tell -PRON- whether']
['dbus_type_is_valid_APIName is safe with untrusted data', 'api be safe untrusted datum']
["More than one complete type would mean `` ii '' or two integers in sequence", 'one complete type would mean ii two integer sequence']
['dbus_type_is_valid_APIParam_1 is a potential type-code', 'param be potential param']
['DBUS_TYPE_INVALID surprisingly enough is not considered valid , and random unknown bytes are not either', 'constant surprisingly enough be not consider valid , random unknown byte be not either']
['dbus_type_is_valid_APIName return TRUE if valid', 'api return constant if valid']
['Return TRUE', 'return constant']
['For this purpose , you assume that the first byte of the old and new value would be in the same location , so alignment padding is not a factor', 'purpose , -PRON- assume first byte old value would be location , padding be not']
['Allocates an integer ID to be used for storing application-specific data on any DBusServer', 'allocate integer -PRON- would be use storing param datum']
['The slot must be initialized with -1', 'must be initialize constant']
['The allocated ID may be used with dbus_server_set_data_APIName and dbus_server_get_data_APIName', 'allocate -PRON- would may be use api']
['The allocated slot is global , i.e', 'allocate be global']
['all DBusServer objects will have a slot with the given integer ID reserved', 'object have give integer -PRON- would reserve']
['dbus_server_allocate_data_slot_APIName return FALSE on no memory', 'api return constant no memory']
['dbus_server_allocate_data_slot_APIParam_1 is address of global variable storing the slot ID', 'param be address global variable storing -PRON- would']
['Releases the server address and stops listening for new clients', 'release server address listen client']
['Does not modify the server reference count', 'do not modify server reference count']
['dbus_server_disconnect_APIParam_1 is the dbus_server_disconnect_APIParam_1', 'param be param']
['the refcount is incremented on that slot , rather than creating a new slot', 'be incremente , rather create']
['Deallocates a global ID for server data slots', 'deallocate global -PRON- would server datum']
['dbus_server_get_data_APIName and dbus_server_set_data_APIName may no longer be used with this slot', 'api may no longer be use']
['dbus_server_free_data_slot_APIParam_1 is address of the slot to deallocate', 'param be address deallocate']
['only the first call has an effect', 'only first call have effect']
['dbus_server_get_address_APIParam_1 is the dbus_server_get_address_APIParam_1', 'param be param']
['dbus_server_get_address_APIName return the address or NULL if no memory', 'api return address null']
['Retrieves data previously set with dbus_server_set_data_APIName', 'retrieve datum previously set api']
['The dbus_server_get_data_APIParam_2 must still be allocated', 'param must still be allocate']
['Returns the address of the dbus_server_get_address_APIParam_1 , as a newly-allocated string which must be freed by the caller', 'return address param , as param string which must be free by caller']
['dbus_server_get_data_APIParam_1 is the dbus_server_get_data_APIParam_1', 'param be param']
['Existing data stored on existing DBusServer objects will be freed', 'exist datum store exist object be free']
['dbus_server_get_data_APIParam_2 is the dbus_server_get_data_APIParam_2 to get data from', 'param be param get datum']
['dbus_server_get_data_APIName return the data, or NULL if not found', 'api return datum , null']
['Returns the unique ID of the dbus_server_get_id_APIParam_1 , as a newly-allocated string which must be freed by the caller', 'return unique -PRON- would param , as param string which must be free by caller']
['This is an ID unique to each DBusServer', 'be -PRON- would unique']
['dbus_connection_open_APIName can re-use an existing connection with the same ID instead of opening a new connection', 'api can param exist connection -PRON- would instead open connection']
['dbus_server_get_id_APIParam_1 is the dbus_server_get_id_APIParam_1', 'param be param']
['Remember that a DBusServer represents only one mode of connecting , so e.g', 'remember represent only one mode connect']
['This ID is normally used by clients to tell', 'PRON- would be normally use by client tell']
['dbus_server_get_id_APIName return the id of the dbus_server_get_id_APIParam_1 or NULL if no memory', 'api return - PRON - would param null']
['The ID is not a UUID in the sense of RFC4122', 'PRON- would be not sense rfc constant']
['a bus daemon can listen on multiple addresses which will mean it has multiple DBusServer each with their own ID', 'daemon can listen multiple address which mean have multiple -PRON- would']
['the details are explained in the D-Bus specification', 'detail be explain param specification']
['dbus_server_get_is_connected_APIParam_1 is the dbus_server_get_is_connected_APIParam_1', 'param be param']
['Returns TRUE', 'return constant']
['Listens for new connections on the given dbus_server_listen_APIParam_1', 'listen connection give param']
['Otherwise returns a new DBusServer', 'otherwise return']
['dbus_server_set_new_connection_function_APIName , dbus_server_set_watch_functions_APIName , and dbus_server_set_timeout_functions_APIName should be called immediately to render the server fully functional', 'api should be call immediately render server fully functional']
['To free the server , applications must call first dbus_server_disconnect_APIName and dbus_server_unref_APIName', 'free server , application must call first api']
['dbus_server_listen_APIParam_1 is the dbus_server_listen_APIParam_1 of this server', 'param be param server']
['Returns NULL and sets dbus_server_listen_APIParam_2', 'return null set param']
['dbus_server_listen_APIParam_2 is location to store reason for failure', 'param be location store reason failure']
['Increments the reference count of a DBusServer', 'increment reference count']
['dbus_server_ref_APIParam_1 is the dbus_server_ref_APIParam_1', 'param be param']
['dbus_server_listen_APIName return a new DBusServer , or NULL on failure', 'api return , null failure']
['dbus_server_ref_APIName return the dbus_server_ref_APIParam_1', 'api return param']
['dbus_server_set_auth_mechanisms_APIName only affects connections created after it is called', 'api only affect connection create after be call']
['Pass NULL instead of an array to use all available dbus_server_set_auth_mechanisms_APIParam_2', 'null instead array use available param']
['Sets the authentication dbus_server_set_auth_mechanisms_APIParam_2 that this dbus_server_set_auth_mechanisms_APIParam_1 offers to clients , as a NULL - terminated array of mechanism names', 'set authentication param offer client , as null _ terminate array mechanism name']
['The D-Bus specification describes some of the supported dbus_server_set_auth_mechanisms_APIParam_2', 'param specification describe support param']
['dbus_server_set_auth_mechanisms_APIParam_1 is the dbus_server_set_auth_mechanisms_APIParam_1', 'param be param']
['dbus_server_set_auth_mechanisms_APIParam_2 is NULL - terminated array of dbus_server_set_auth_mechanisms_APIParam_2', 'param be null _ terminate array param']
['dbus_server_set_auth_mechanisms_APIName return FALSE if no memory', 'api return constant']
['The dbus_server_set_data_APIParam_2 number must have been allocated with dbus_server_allocate_data_slot_APIName', 'param number must have be allocate api']
['dbus_server_set_data_APIParam_1 is the dbus_server_set_data_APIParam_1', 'param be param']
['dbus_server_set_data_APIParam_2 is the dbus_server_set_data_APIParam_2 number', 'param be param number']
['dbus_server_set_data_APIParam_3 is the dbus_server_set_data_APIParam_3 to store', 'param be param store']
['dbus_server_set_data_APIParam_4 is finalizer function for the dbus_server_set_data_APIParam_3', 'param be finalizer function param']
['dbus_server_set_data_APIName return TRUE if there was enough memory to store the dbus_server_set_data_APIParam_3', 'api return constant']
['Sets a dbus_server_set_new_connection_function_APIParam_2 to be used for handling new connections', 'set param be use handling connection']
['Otherwise , the connection will be unreferenced and closed', 'otherwise , connection be unreference closed']
['The given dbus_server_set_new_connection_function_APIParam_2 is passed each new connection as the connection is created', 'give param be connection as connection be create']
['or when the dbus_server_set_data_APIParam_1 is finalized', 'param be finalize']
['Stores a pointer on a DBusServer , along with an optional function to be used for freeing the dbus_server_set_data_APIParam_3', 'store pointer , along optional function be use freeing param']
['dbus_server_set_new_connection_function_APIParam_1 is the dbus_server_set_new_connection_function_APIParam_1', 'param be param']
['the connection will stay alive', 'connection stay alive']
['dbus_server_set_new_connection_function_APIParam_2 is a dbus_server_set_new_connection_function_APIParam_2 to handle new connections', 'param be param handle connection']
['libdbus does not own this connection once the new connection dbus_server_set_new_connection_function_APIParam_2 takes a reference', 'do not connection connection param take reference']
['is considered good form', 'be consider good form']
['The new connection dbus_server_set_new_connection_function_APIParam_2 may also close the connection itself , which', 'connection param may close connection , which']
['The connection here is private in the sense of dbus_connection_open_private_APIName', 'connection be private sense api']
['dbus_server_set_new_connection_function_APIParam_3 is dbus_server_set_new_connection_function_APIParam_3 to pass to the new connection handler', 'param be param connection handler']
['dbus_server_set_new_connection_function_APIParam_4 is dbus_server_set_new_connection_function_APIParam_2 to free the dbus_server_set_new_connection_function_APIParam_3', 'param be param free param']
['Sets the timeout functions for the dbus_server_set_timeout_functions_APIParam_1', 'set timeout function param']
['These functions are responsible for making the application main loop aware of timeouts', 'function be responsible make application main loop aware timeout']
['dbus_server_set_timeout_functions_APIName behaves exactly like dbus_connection_set_timeout_functions_APIName', 'api behave exactly like api']
['see the documentation for that routine', 'see documentation api']
['dbus_server_set_timeout_functions_APIParam_1 is the dbus_server_set_timeout_functions_APIParam_1', 'param be param']
['dbus_server_set_timeout_functions_APIParam_2 is function to add a timeout', 'param be function add timeout']
['dbus_server_set_timeout_functions_APIParam_3 is function to remove a timeout', 'param be function remove timeout']
['dbus_server_set_timeout_functions_APIParam_5 is dbus_server_set_timeout_functions_APIParam_5 to pass to dbus_server_set_timeout_functions_APIParam_2 and dbus_server_set_timeout_functions_APIParam_3', 'param be param']
['dbus_server_set_timeout_functions_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['dbus_server_set_timeout_functions_APIParam_6 is function to be called to free the dbus_server_set_timeout_functions_APIParam_5', 'param be function be call free param']
['Sets the watch functions for the dbus_server_set_watch_functions_APIParam_1', 'set function param']
['dbus_server_set_watch_functions_APIName behaves exactly like dbus_connection_set_watch_functions_APIName', 'api behave exactly like api']
['dbus_server_set_timeout_functions_APIParam_4 is function to notify', 'param be function notify']
['see the documentation for that routine', 'see documentation api']
['dbus_server_set_watch_functions_APIParam_1 is the dbus_server_set_watch_functions_APIParam_1', 'param be param']
['dbus_server_set_watch_functions_APIParam_2 is function to begin monitoring a new descriptor', 'param be function begin monitor descriptor']
['dbus_server_set_watch_functions_APIParam_3 is function to stop monitoring a descriptor', 'param be function monitor descriptor']
['These functions are responsible for making the application main loop aware of file descriptors that need to be monitored for events', 'function be responsible make application main loop aware file descriptor need be monitor event']
['dbus_server_set_watch_functions_APIParam_5 is dbus_server_set_watch_functions_APIParam_5 to pass to dbus_server_set_watch_functions_APIParam_2 and dbus_server_set_watch_functions_APIParam_3', 'param be param']
['dbus_server_set_watch_functions_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['dbus_server_set_watch_functions_APIParam_6 is function to be called to free the dbus_server_set_watch_functions_APIParam_5', 'param be function be call free param']
['Decrements the reference count of a DBusServer', 'reference count']
['dbus_server_set_watch_functions_APIParam_4 is function to notify', 'param be function notify']
['The dbus_server_unref_APIParam_1 must be disconnected before the refcount reaches zero', 'param must be before reach constant']
['dbus_server_unref_APIParam_1 is the dbus_server_unref_APIParam_1', 'param be param']
['Check a bus dbus_validate_bus_name_APIParam_1 for validity', 'check param validity']
['dbus_validate_bus_name_APIParam_2 is dbus_validate_bus_name_APIParam_2 return', 'param be param return']
['dbus_validate_bus_name_APIParam_1 is a potentially invalid bus dbus_validate_bus_name_APIParam_1 , which must not be NULL', 'param be potentially invalid param , which must not be null']
['Finalizes the dbus_server_unref_APIParam_1', 'finalize param']
['dbus_validate_bus_name_APIName return TRUE if dbus_validate_bus_name_APIParam_1 is valid', 'api return constant']
['Check an dbus_validate_error_name_APIParam_2 dbus_validate_error_name_APIParam_1 for validity', 'check param validity']
['dbus_validate_error_name_APIParam_1 is a potentially invalid', 'param be potentially invalid']
['dbus_validate_error_name_APIParam_2 is dbus_validate_error_name_APIParam_1, which must not be NULL dbus_validate_error_name_APIParam_2 error return', 'param be param which must not be null param error return']
['dbus_validate_error_name_APIName return TRUE if dbus_validate_error_name_APIParam_1 is valid', 'api return constant']
['Check an interface dbus_validate_interface_APIParam_1 for validity', 'check api param validity']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_validate_interface_APIParam_2 is dbus_validate_interface_APIParam_2 return', 'param be param return']
['dbus_validate_interface_APIParam_1 is a potentially invalid interface dbus_validate_interface_APIParam_1 , which must not be NULL', 'param be potentially invalid api param , which must not be null']
['dbus_validate_interface_APIName return TRUE if dbus_validate_interface_APIParam_1 is valid', 'api return constant']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['Check a member dbus_validate_member_APIParam_1 for validity', 'check member param validity']
['dbus_validate_bus_name_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['dbus_validate_member_APIParam_2 is dbus_validate_member_APIParam_2 return', 'param be param return']
['dbus_validate_member_APIParam_1 is a potentially invalid member dbus_validate_member_APIParam_1 , which must not be NULL', 'param be potentially invalid member param , which must not be null']
['dbus_validate_member_APIName return TRUE if dbus_validate_member_APIParam_1 is valid', 'api return constant']
['Check an object dbus_validate_path_APIParam_1 for validity', 'check object param validity']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_validate_error_name_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['dbus_validate_path_APIParam_2 is dbus_validate_path_APIParam_2 return', 'param be param return']
['dbus_validate_path_APIParam_1 is a potentially invalid object dbus_validate_path_APIParam_1 , which must not be NULL', 'param be potentially invalid object param , which must not be null']
['dbus_validate_path_APIName return TRUE if dbus_validate_path_APIParam_1 is valid', 'api return constant']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_validate_interface_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['Check a string for validity', 'check string validity']
['Strings on D-Bus must be valid UTF-8', 'string param must be valid param']
['dbus_validate_utf8_APIParam_2 is dbus_validate_utf8_APIParam_2 return', 'param be param return']
['dbus_validate_utf8_APIParam_1 is a string to be checked , which must not be NULL', 'param be string be check , which must not be null']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_validate_utf8_APIName return TRUE if dbus_validate_utf8_APIParam_1 is valid UTF-8', 'api return constant']
['Adds a message filter', 'add message filter']
['dbus_validate_member_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['Filters are run in the order that they were added', 'filter be run order be add']
['Filters are handlers that are run on all incoming messages , prior to the objects registered with dbus_connection_register_object_path_APIName', 'filter be handler be run incoming message , before object register api']
['This is probably a feature , as filters could create arbitrary reentrancy', 'be probably feature , as filter could create arbitrary']
['dbus_connection_add_filter_APIParam_1 is the dbus_connection_add_filter_APIParam_1', 'param be param']
['NULL can always be passed instead of a DBusError *', 'null can always be instead']
['dbus_validate_path_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['Filters added', 'filter add']
['The same handler can be added as a filter more than once , in which case it will be run more than once', 'handler can be add as filter , which case be run']
['dbus_connection_add_filter_APIParam_2 is dbus_connection_add_filter_APIParam_2 to handle messages', 'param be param handle message']
['dbus_connection_add_filter_APIParam_3 is user data to pass to the dbus_connection_add_filter_APIParam_2', 'param be user data param']
['dbus_connection_add_filter_APIParam_4 is dbus_connection_add_filter_APIParam_2 to use for freeing user data', 'param be param use free user datum']
['But kind of sucks', 'but kind suck']
['dbus_connection_add_filter_APIName return TRUE on success, FALSE if not enough memory', 'api return constant success , constant if not enough memory']
['we do not run filters on messages', 'not run filter message']
['Allocates an integer ID to be used for storing application-specific data on any DBusConnection', 'allocate integer -PRON- would be use storing param datum']
['The allocated ID may be used with dbus_connection_set_data_APIName and dbus_connection_get_data_APIName', 'allocate -PRON- would may be use api']
['The allocated slot is global , i.e', 'allocate be global']
['dbus_validate_utf8_APIName is suitable for validating C strings , but is not suitable for validating untrusted data from a network unless the string length is also checked', 'api be suitable validate string , but be not suitable validate untrusted datum network unless string length be check']
['The passed-in slot must be initialized to -1 , and is filled in with the slot ID', 'param must be initialize constant , be fill -PRON- would']
['dbus_connection_allocate_data_slot_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['all DBusConnection objects will have a slot with the given integer ID reserved', 'object have give integer -PRON- would reserve']
['dbus_connection_allocate_data_slot_APIParam_1 is address of a global variable storing the slot', 'param be address global variable storing']
['If the queue is empty, returns NULL', 'if queue be empty , return null']
['Returns the first-received message from the incoming message queue , leaving it in the queue', 'return param message incoming message queue , leave queue']
['The caller does not own a reference to dbus_connection_borrow_message_APIParam_0, and must either return it using dbus_connection_return_message_APIName or keep it after calling dbus_connection_steal_borrowed_message_APIName', 'caller do not reference param must either return use api keep after call api']
['and its refcount is incremented', 'be incremente']
['No one can get at the message while its borrowed, so return it as quickly as possible and do not keep a reference to it after returning it', 'no one can get message borrow , return as quickly as possible not keep reference after return']
['dbus_connection_borrow_message_APIName return next message in the incoming queue', 'api return next message incoming queue']
['it is assumed to be already allocated', 'be assume be already allocate']
['dbus_connection_borrow_message_APIName will block', 'api block']
['make a copy of it', 'make copy']
['dbus_connection_borrow_message_APIParam_1 is the dbus_connection_borrow_message_APIParam_1', 'param be param']
['This will always return TRUE for all types, with the exception of DBUS_TYPE_UNIX_FD', 'always return constant type , exception constant']
['dbus_connection_can_send_type_APIName can be used to do runtime checking for types that might be unknown to the specific D-Bus client implementation version , i.e', 'api can be use runtime check type may be unknown specific param client implementation version']
['The function will return TRUE for DBUS_TYPE_UNIX_FD only on systems that know Unix file descriptors and can send them via the chosen transport and when the remote side supports this', 'function return constant only system know unix file descriptor can send via choose transport remote support']
['dbus_connection_dispatch_APIName will block', 'api block']
['dbus_connection_can_send_type_APIParam_1 is the dbus_connection_can_send_type_APIParam_1', 'param be param']
['Tests whether a certain dbus_connection_can_send_type_APIParam_2 can be send via the dbus_connection_can_send_type_APIParam_1', 'test whether certain param can be send via param']
['it will return FALSE for all types this implementation does not know, including invalid or reserved types', 'return constant type implementation do not know , include invalid reserve type']
['dbus_connection_can_send_type_APIParam_2 is the dbus_connection_can_send_type_APIParam_2 to check', 'param be param check']
['only one piece of code can be playing with the incoming queue at a time', 'only one piece code can be play incoming queue time']
['dbus_connection_can_send_type_APIName return TRUE if the dbus_connection_can_send_type_APIParam_2 may be send via the dbus_connection_can_send_type_APIParam_1', 'api return constant']
['Closes a private dbus_connection_close_APIParam_1 , so no further data can be sent or received', 'close private param , no datum can be send receive']
['This disconnects the transport underlying the dbus_connection_close_APIParam_1', 'transport underlie param']
['dbus_connection_close_APIName does not affect the connection reference count', 'api do not affect connection reference count']
['all calls after the first do nothing', 'call after first nothing']
['it is safe to close a dbus_connection_close_APIParam_1 more than once', 'be safe close param']
['Attempts to send messages after closing a dbus_connection_close_APIParam_1 are safe , but will result in error replies generated locally in libdbus', 'attempt send message after close param be safe , but result error generate locally']
['You must close a dbus_connection_close_APIParam_1 prior to releasing the last reference to the dbus_connection_close_APIParam_1', 'PRON- must close param before release last reference param']
['You may not close a shared dbus_connection_close_APIParam_1', 'PRON- may not close share param']
['Connections created with dbus_connection_open_APIName or dbus_bus_get_APIName are shared', 'connection create api be share']
["it is impossible to `` reopen '' a dbus_connection_close_APIParam_1 , a new dbus_connection_close_APIParam_1 must be created", 'be impossible reopen param must be create']
['dbus_connection_close_APIName may result in a call to the DBusDispatchStatusFunction set with dbus_connection_set_dispatch_status_function_APIName , as the disconnect message it generates needs to be dispatched', 'api may result call set api , as message generate need be']
['These connections are owned by libdbus , and applications should only unref them , never close them', 'connection be own by , application should only unref , never close']
['Connections created with dbus_connection_open_private_APIName or dbus_bus_get_private_APIName are not kept track of or referenced by libdbus', 'connection create api be not keep reference by']
['Applications can know it is safe to unref these connections as the dbus_connection_close_APIParam_1 is open', 'application can know be safe unref connection as param be open']
['dbus_connection_close_APIParam_1 is the private dbus_connection_close_APIParam_1 to close', 'param be private param close']
['Processes any incoming data', 'process incoming datum']
['the results are undefined', 'result be undefined']
['it is a bug in your program and libdbus will try to print a warning', 'be program try print warning']
['Reading usually happens in dbus_watch_handle_APIName or dbus_connection_read_write_APIName', 'read usually happen api']
['Processing has three steps', 'processing have three step']
['The incoming data buffer is filled', 'incoming data buffer be fill']
['Thus , either the dbus_connection_close_APIParam_1 is closed and it is OK to drop the last reference , or the dbus_connection_close_APIParam_1 is open and the app knows it does not have the last reference', 'thus , either param be close be ok drop last reference , param be open know do not have last reference']
['Second , any filters registered with dbus_connection_add_filter_APIName are run', 'second , filter register api be run']
['If any filter returns DBUS_HANDLER_RESULT_HANDLED processing stops after that filter', 'if filter return constant processing after filter']
['First , any method replies are passed to DBusPendingCall or dbus_connection_send_with_reply_and_block_APIName', 'first , api be api']
['The creator of these connections is responsible for calling dbus_connection_close_APIName prior to releasing the last reference', 'connection be responsible call api before release last reference']
['Be careful about calling dbus_connection_dispatch_APIName from inside a message handler , i.e', 'be careful call api inside message handler']
['dbus_connection_dispatch_APIName removes one message from the queue and processes it', 'api remove one message queue process']
['A single call to dbus_connection_dispatch_APIName will process at most one message', 'single call api process one message']
['calling dbus_connection_dispatch_APIName recursively', 'call api recursively']
['it will not clear the entire message queue', 'not clear entire message queue']
['it is parsed , which may or may not result in adding messages to the incoming queue', 'be parse , which may may not result add message incoming queue']
['some FIXME in here about handling DBUS_HANDLER_RESULT_NEED_MEMORY dbus_connection_dispatch_APIParam_1 is the dbus_connection_dispatch_APIParam_1', 'handle constant param be param']
['dbus_connection_dispatch_APIName dispatch status , see dbus_connection_get_dispatch_status_APIName', 'api status , see api']
['Blocks until the outgoing message queue is empty', 'block until outgoing message queue be empty']
['dbus_connection_flush_APIParam_1 is the dbus_connection_flush_APIParam_1', 'param be param']
['Third , path handlers added with dbus_connection_register_object_path_APIName or dbus_connection_register_fallback_APIName', 'third , path handler add api']
['Deallocates a global ID for connection data slots', 'deallocate global -PRON- would connection data']
['dbus_connection_get_data_APIName and dbus_connection_set_data_APIName may no longer be used with this slot', 'api may no longer be use']
['Frees dbus_connection_free_preallocated_send_APIParam_2 message-sending resources from dbus_connection_preallocate_send_APIName', 'free param resource api']
['this will not deadlock', 'not deadlock']
['however , it can certainly confuse your application', 'however , can certainly confuse application']
['dbus_connection_free_preallocated_send_APIParam_1 is the dbus_connection_free_preallocated_send_APIParam_1', 'param be param']
['dbus_connection_free_preallocated_send_APIParam_2 is the resources', 'param be resource']
['Returns TRUE if the structure pointerbe returned by dbus_connection_get_adt_audit_session_data_APIName', 'return constant if structure pointerbe return by api']
['Always returns FALSE prior to authenticating the dbus_connection_get_adt_audit_session_data_APIParam_1', 'always return constant before authenticate param']
['Existing data stored on existing DBusConnection objects will be freed', 'exist datum store exist object be free']
['dbus_connection_get_adt_audit_session_data_APIParam_1 is the dbus_connection_get_adt_audit_session_data_APIParam_1', 'param be param']
['it is set to -1', 'be set constant']
['dbus_connection_get_adt_audit_session_data_APIParam_2 is return location for audit dbus_connection_get_adt_audit_session_data_APIParam_2', 'param be return location param']
['Should only be called', 'should only be call']
['dbus_connection_get_adt_audit_session_data_APIParam_3 is return location for length of audit dbus_connection_get_adt_audit_session_data_APIParam_2', 'param be return location length param']
['dbus_connection_get_adt_audit_session_data_APIName return TRUE if audit dbus_connection_get_adt_audit_session_data_APIParam_2 is filled in with a valid ucred pointer', 'api return constant']
['Gets the ADT audit dbus_connection_get_adt_audit_session_data_APIParam_2 of the dbus_connection_get_adt_audit_session_data_APIParam_1', 'get adt param']
['Retrieves data previously set with dbus_connection_set_data_APIName', 'retrieve datum previously set api']
['The dbus_connection_get_data_APIParam_2 must still be allocated', 'param must still be allocate']
['dbus_connection_get_data_APIParam_1 is the dbus_connection_get_data_APIParam_1', 'param be param']
['dbus_connection_get_data_APIParam_2 is the dbus_connection_get_data_APIParam_2 to get data from', 'param be param get datum']
['dbus_connection_get_data_APIName return the data, or NULL if not found', 'api return datum , null']
['DBUS_DISPATCH_COMPLETE indicates that the incoming queue is empty', 'constant indicate incoming queue be empty']
['Gets the current state of the incoming message queue', 'get current state incoming message queue']
['DBUS_DISPATCH_DATA_REMAINS indicates that the message queue may contain messages', 'constant indicate message queue may contain message']
['Note dbus_connection_get_data_APIName does not take the main thread lock on DBusConnection , which allows it to be used from inside watch and timeout functions', 'note api do not take main thread lock , which allow be use inside timeout function']
['To process the incoming message queue , use dbus_connection_dispatch_APIName or dbus_connection_pop_message_APIName', 'process incoming message queue , use api']
['dbus_connection_get_dispatch_status_APIParam_1 is the dbus_connection_get_dispatch_status_APIParam_1', 'param be param']
['DBUS_DISPATCH_NEED_MEMORY indicates that there could be data , but we can not know for sure without more memory', 'constant indicate could be datum , but can not know sure without memory']
['dbus_connection_get_dispatch_status_APIName return current dispatch status', 'api return current status']
['Thus , it is possible to see a status of DBUS_DISPATCH_DATA_REMAINS but not have a message yet', 'thus , be possible see status constant but not have message yet']
['this happens on initial dbus_connection_get_dispatch_status_APIParam_1', 'happen initial param']
['Note , DBUS_DISPATCH_DATA_REMAINS really means that either we have messages in the queue , or we have raw bytes buffered up that need to be parsed', 'note , constant really mean either have message queue , have raw byte buffer need be parse']
['you need to know there a reference held on the dbus_connection_get_data_APIParam_1', 'PRON- need know reference hold param']
['A side effect of this is that , or the dbus_connection_get_data_APIParam_1 could be finalized during dbus_connection_get_data_APIName', 'effect be , param could be finalize during api']
['Gets whether the dbus_connection_get_is_anonymous_APIParam_1 is not authenticated as a specific user', 'get whether param be not authenticate as specific user']
['they may not add up to an entire message', 'may not add entire message']
['If it is authenticated as a specific user, this returns FALSE', 'if be authenticate as specific user , return constant']
['only allow the ANONYMOUS mechanism -RRB-', 'only allow anonymous mechanism _ rrb']
['dbus_connection_get_is_anonymous_APIParam_1 is the dbus_connection_get_is_anonymous_APIParam_1', 'param be param']
['If the dbus_connection_get_is_anonymous_APIParam_1 is not authenticated, dbus_connection_get_is_anonymous_APIName returns TRUE , and if it is authenticated but as an anonymous user, it returns TRUE', 'if param be not authenticate , api return constant , if be authenticate but as anonymous user , return constant']
['Gets whether the dbus_connection_get_is_authenticated_APIParam_1 was authenticated', 'get whether param be authenticate']
['dbus_connection_get_is_anonymous_APIName return TRUE if not authenticated or authenticated as anonymous', 'api return constant']
['dbus_connection_get_is_authenticated_APIParam_1 is the dbus_connection_get_is_authenticated_APIParam_1', 'param be param']
['dbus_connection_get_is_authenticated_APIName return TRUE if the dbus_connection_get_is_authenticated_APIParam_1 was ever authenticated', 'api return constant']
['Gets whether the dbus_connection_get_is_connected_APIParam_1 is currently open', 'get whether param be currently open']
['you can use dbus_connection_get_unix_user_APIName and dbus_connection_get_windows_user_APIName to see who it is authorized as', 'PRON- can use api see be authorize as']
["There are not separate states for `` closed '' and `` disconnected , '' the two terms are synonymous", 'be not separate state close disconnected , two term be synonymous']
['dbus_connection_get_is_connected_APIName should really be called get_is_open_APIName but for historical reasons is not', 'api should really be call api but historical reason be not']
['dbus_connection_get_is_connected_APIParam_1 is the dbus_connection_get_is_connected_APIParam_1', 'param be param']
['dbus_connection_get_is_connected_APIName return TRUE if the dbus_connection_get_is_connected_APIParam_1 is still alive', 'api return constant']
['Gets the value set by dbus_connection_set_max_message_size_APIName', 'get value set by api']
['dbus_connection_get_max_message_size_APIParam_1 is the dbus_connection_get_max_message_size_APIParam_1', 'param be param']
['dbus_connection_get_max_message_size_APIName return the max size of a single message', 'api return max size single message']
['A dbus_connection_get_is_connected_APIParam_1 may become disconnected', 'param may become disconnected']
['a dbus_connection_get_is_connected_APIParam_1 may also be disconnected with dbus_connection_close_APIName', 'param may be disconnected api']
['Gets the value set by dbus_connection_set_max_message_unix_fds_APIName', 'get value set by api']
['dbus_connection_get_max_message_unix_fds_APIParam_1 is the dbus_connection_get_max_message_unix_fds_APIParam_1', 'param be param']
['dbus_connection_get_max_message_unix_fds_APIName return the max numer of unix fds of a single message', 'api return max unix single message']
['dbus_connection_get_max_received_size_APIParam_1 is the dbus_connection_get_max_received_size_APIParam_1', 'param be param']
['Gets the value set by dbus_connection_set_max_received_size_APIName', 'get value set by api']
['dbus_connection_get_max_received_size_APIName return the max size of all live messages', 'api return max size live message']
['Gets the value set by dbus_connection_set_max_received_unix_fds_APIName', 'get value set by api']
['dbus_connection_get_max_received_unix_fds_APIParam_1 is the dbus_connection_get_max_received_unix_fds_APIParam_1', 'param be param']
['dbus_connection_get_max_received_unix_fds_APIName return the max unix fds of all live messages', 'api return max unix live message']
['dbus_connection_get_object_path_data_APIParam_1 is the dbus_connection_get_object_path_data_APIParam_1', 'param be param']
['Gets the user data passed to dbus_connection_register_object_path_APIName or dbus_connection_register_fallback_APIName', 'get user datum api']
['dbus_connection_get_object_path_data_APIParam_2 is the dbus_connection_get_object_path_data_APIParam_2 you registered with', 'param be param -PRON- register']
['dbus_connection_get_object_path_data_APIParam_3 is location to store the user data , or NULL', 'param be location store user datum , null']
['dbus_connection_get_outgoing_size_APIParam_1 is the dbus_connection_get_outgoing_size_APIParam_1', 'param be param']
['dbus_connection_get_object_path_data_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['Gets the approximate size in bytes of all messages in the outgoing message queue', 'get approximate size byte message outgoing message queue']
['the data is filled in with NULL', 'datum be fill null']
['dbus_connection_get_outgoing_size_APIName return the number of bytes that have been queued up but not sent', 'api return number byte have be queue but not send']
['dbus_connection_get_outgoing_unix_fds_APIParam_1 is the dbus_connection_get_outgoing_unix_fds_APIParam_1', 'param be param']
['dbus_connection_get_outgoing_unix_fds_APIName return the number of unix fds that have been queued up but not sent', 'api return number unix fd have be queue but not send']
['Gets the approximate number of uni fds of all messages in the outgoing message queue', 'get approximate number message outgoing message queue']
['The only way to be sure the server ID is available is to wait for authentication to complete', 'only way be sure server -PRON- would be available be wait authentication complete']
['In general , each mode of connecting to a given server will have its own ID', 'general , mode connect give server have -PRON- would']
['Gets the ID of the server address we are authenticated to', 'get -PRON- would server address be authenticate']
['You can also get a machine ID', 'PRON- can get machine -PRON- would']
['see dbus_try_get_local_machine_id_APIName to get the machine you are on', 'see api get machine -PRON- be']
['If the dbus_connection_get_server_id_APIParam_1 is on the server side, this will always return NULL - use dbus_server_get_id_APIName to get the ID of your own server, if you are the server side', 'if param be server , always return null _ use api get -PRON- would server , if -PRON- be server']
['dbus_connection_get_server_id_APIParam_1 is the dbus_connection_get_server_id_APIParam_1', 'param be param']
['The D-Bus specification describes the server ID and other IDs in a bit more detail', 'param specification describe server -PRON- would ids bit detail']
['look at dbus_bus_get_id_APIName instead', 'look api instead']
['dbus_connection_get_server_id_APIName return the server ID or NULL if no memory or the dbus_connection_get_server_id_APIParam_1 is server-side', 'api return server - PRON - would null']
['There is not a convenience wrapper , but you can invoke org.freedesktop.DBus.Peer.GetMachineId on any peer to get the machine ID on the other end', 'be not convenience wrapper , but -PRON- can invoke param peer get machine -PRON- would end']
['Not all connections will have a socket', 'not connection have socket']
['The size is approximate in that you should not use it to decide how many bytes to read off the network or anything of that nature , as optimizations may choose to tell small white lies to avoid performance overhead', 'size be approximate -PRON- should not use decide many byte read network anything , as optimization may choose tell small white avoid performance overhead']
['the ID may be available if it was included in the server address , but may not be available', 'PRON - would may be available  , but may not be available']
['DO NOT read or write to the file descriptor , or try to select_APIName on it', 'not read file descriptor , try api']
['use DBusWatch for main loop integration', 'use main loop']
['So for adding descriptors to the main loop , use dbus_watch_get_socket_APIName and so forth', 'add descriptor main loop , use api forth']
['dbus_connection_get_socket_APIName always returns specifically a socket file descriptor', 'api always return specifically socket file descriptor']
['dbus_connection_get_socket_APIParam_1 is the dbus_connection_get_socket_APIParam_1', 'param be param']
['If the dbus_connection_get_socket_APIParam_1 is not socket-based , dbus_connection_get_socket_APIName will return FALSE', 'if param be not param , api return constant']
['Gets the underlying Windows or UNIX socket file descriptor of the dbus_connection_get_socket_APIParam_1', 'get underlie window unix socket file descriptor param']
['So , , each of those modalities will have its own server ID', 'have server -PRON- would']
['dbus_connection_get_socket_APIParam_2 is return location for the file descriptor', 'param be return location file descriptor']
['dbus_connection_get_socket_APIName return TRUE if dbus_connection_get_socket_APIParam_2 is successfully obtained', 'api return constant']
['This can be used for SELinux access control checks with getpeercon_APIName', 'can be use access control check api']
['DO NOT read or write to the file descriptor , or try to select_APIName on it', 'not read file descriptor , try api']
['Not all connections will have a file descriptor', 'not connection have file descriptor']
['use DBusWatch for main loop integration', 'use main loop']
['So for adding descriptors to the main loop , use dbus_watch_get_unix_fd_APIName and so forth', 'add descriptor main loop , use api forth']
['dbus_connection_get_unix_fd_APIName always fails on Windows', 'api always fail window']
['Get the UNIX file descriptor of the dbus_connection_get_unix_fd_APIParam_1', 'get unix file descriptor param']
['dbus_connection_get_unix_fd_APIParam_1 is the dbus_connection_get_unix_fd_APIParam_1', 'param be param']
['Right now dbus_connection_get_unix_fd_APIParam_0 is always a socket , but that is not guaranteed', 'right param be always socket , but not guarantee']
['dbus_connection_get_unix_fd_APIParam_2 is return location for the file descriptor', 'param be return location file descriptor']
['dbus_connection_get_unix_fd_APIName return TRUE if dbus_connection_get_unix_fd_APIParam_2 is successfully obtained', 'api return constant']
['Always returns FALSE prior to authenticating the dbus_connection_get_unix_process_id_APIParam_1', 'always return constant before authenticate param']
['you can also use dbus_connection_get_socket_APIName , which will work on Windows too', 'PRON- can use api , which work window']
['dbus_connection_get_unix_process_id_APIParam_1 is the dbus_connection_get_unix_process_id_APIParam_1', 'param be param']
['dbus_connection_get_unix_process_id_APIParam_2 is return location for the process ID', 'param be return location process -PRON- would']
['Gets the process ID of the dbus_connection_get_unix_process_id_APIParam_1', 'get process -PRON- would param']
['Returns TRUE', 'return constant']
['dbus_connection_get_unix_process_id_APIName return TRUE if uid is filled in with a valid process ID', 'api return constant']
['Always returns FALSE prior to authenticating the dbus_connection_get_unix_user_APIParam_1', 'always return constant before authenticate param']
['Always returns FALSE on non-UNIX platforms for now', 'always return constant param platform']
['dbus_connection_get_unix_user_APIParam_0 is the UID the dbus_connection_get_unix_user_APIParam_1 authenticated as', 'param be param authenticate as']
['Returns TRUE', 'return constant']
['Gets the UNIX user ID of the dbus_connection_get_unix_user_APIParam_1', 'get unix user -PRON- would param']
['The message bus is a server and the apps connecting to the bus are clients', 'message be server connect be client']
['dbus_connection_get_unix_user_APIParam_1 is the dbus_connection_get_unix_user_APIParam_1', 'param be param']
['The UID is only read by servers from clients', 'be only read by server client']
['clients can not usually get the UID of servers', 'client can not usually get server']
['dbus_connection_get_unix_user_APIParam_2 is return location for the user ID', 'param be return location user -PRON- would']
['dbus_connection_get_unix_user_APIName return TRUE if dbus_connection_get_unix_user_APIParam_2 is filled in with a valid user ID', 'api return constant']
['this is done with dbus_bus_get_unix_user_APIName', 'be do api']
['You can ask the bus to tell you the UID of another dbus_connection_get_unix_user_APIParam_1 like', 'PRON- can ask tell -PRON- another param like']
['Always returns FALSE prior to authenticating the dbus_connection_get_windows_user_APIParam_1', 'always return constant before authenticate param']
['Always returns FALSE on non-Windows platforms for now', 'always return constant param platform']
['dbus_connection_get_windows_user_APIParam_0 is the user the dbus_connection_get_windows_user_APIParam_1 authenticated as', 'param be user param authenticate as']
['Gets the Windows user SID of the dbus_connection_get_windows_user_APIParam_1', 'get window user param']
['Returns TRUE', 'return constant']
['dbus_connection_get_windows_user_APIParam_0 has to be freed with dbus_free_APIName', 'param have be free api']
['The message bus is a server and the apps connecting to the bus are clients', 'message be server connect be client']
['dbus_connection_get_windows_user_APIParam_1 is the dbus_connection_get_windows_user_APIParam_1', 'param be param']
['clients can not usually get the user of servers', 'client can not usually get user server']
['The user is only read by servers from clients', 'user be only read by server client']
['dbus_connection_get_windows_user_APIParam_2 is return location for an allocated copy of the user ID, or NULL if no memory', 'param be return location allocate copy user - PRON - would , null']
['But this has to be implemented in bus/driver.c and dbus/dbus-bus.c , and is pointless anyway', 'but have be implement , be pointless anyway']
['Checks whether there are messages in the outgoing message queue', 'check whether be message outgoing message queue']
['dbus_connection_has_messages_to_send_APIParam_1 is the dbus_connection_has_messages_to_send_APIParam_1', 'param be param']
['We would like to be able to say `` You can ask the bus to tell you the user of another dbus_connection_get_windows_user_APIParam_1 like', 'would like be able say -PRON- can ask tell -PRON- user another param like']
["this is done with dbus_bus_get_windows_user_APIName . ''", 'be do api']
['dbus_connection_has_messages_to_send_APIName return TRUE if the outgoing queue is non-empty', 'api return constant']
['Use dbus_connection_flush_APIName to block until all outgoing messages have been written to the underlying transport', 'use api block until outgoing message have be underlie transport']
['The return value indicates', 'return value indicate']
['if it is available but we do not have the memory to copy it , the return value is TRUE and NULL is given as the SID', 'return value be constant null be give as']
['dbus_connection_list_registered_APIParam_0 should be freed with dbus_free_string_array_APIName', 'param should be free api']
['Lists the registered fallback handlers and object path handlers at the given dbus_connection_list_registered_APIParam_2', 'list register handler object path handler give param']
['dbus_connection_list_registered_APIParam_1 is the dbus_connection_list_registered_APIParam_1', 'param be param']
['dbus_connection_list_registered_APIParam_3 is returns NULL -terminated array of children', 'param be return null _ terminate array']
['dbus_connection_list_registered_APIParam_2 is the path to list the child handlers of', 'param be path list handler']
['dbus_connection_list_registered_APIName return FALSE if no memory to allocate the child entries', 'api return constant']
['Gets a connection to a remote dbus_connection_open_APIParam_1', 'get connection remote param']
['dbus_connection_get_windows_user_APIName return TRUE if user is available (returned value may be NULL anyway if no memory', 'api return constant']
['If a connection to the given dbus_connection_open_APIParam_1 already exists, returns the existing connection with its reference count incremented', 'return exist connection reference count incremente']
['Otherwise, returns a new connection and saves the new connection for possible re-use if a future call to dbus_connection_open_APIName asks to connect to the same server', 'otherwise , return connection save connection possible param']
['Use dbus_connection_open_private_APIName to get a dedicated connection not shared with other callers of dbus_connection_open_APIName', 'use api get dedicated connection not share caller api']
['If the open fails, the function returns NULL , and provides a reason for the failure in the dbus_connection_open_APIParam_2 parameter', 'if open fail , function return null , provide reason failure param']
['dbus_connection_open_APIParam_1 is the dbus_connection_open_APIParam_1', 'param be param']
['no user of the connection may call dbus_connection_close_APIName', 'no user connection may call api']
['dbus_connection_open_APIName return new connection, or NULL on failure', 'api return connection , null failure']
['dbus_connection_open_APIParam_2 is dbus_connection_open_APIParam_1 where an dbus_connection_open_APIParam_2 can be returned', 'param be param can be return']
['Note Prefer dbus_connection_open_APIName to dbus_connection_open_private_APIName unless you have good reason', 'note prefer api unless -PRON- have good reason']
['Pass NULL for the dbus_connection_open_APIParam_2 parameter', 'null param']
['Opens a new , dedicated connection to a remote dbus_connection_open_private_APIParam_1', 'open , dedicated connection remote param']
['However , you should call dbus_connection_unref_APIName', 'however , -PRON- should call api']
['connections are expensive enough that it is wasteful to create lots of connections to the same server', 'connection be expensive enough be wasteful create lot connection server']
['Unlike dbus_connection_open_APIName , always creates a new connection', 'unlike api , always create connection']
['This connection will not be saved or recycled by libdbus', 'connection not be save recycle by']
['dbus_connection_open_private_APIParam_1 is the dbus_connection_open_private_APIParam_1', 'param be param']
['If the open fails, the function returns NULL , and provides a reason for the failure in the dbus_connection_open_private_APIParam_2 parameter', 'if open fail , function return null , provide reason failure param']
['dbus_connection_open_private_APIParam_2 is dbus_connection_open_private_APIParam_1 where an dbus_connection_open_private_APIParam_2 can be returned', 'param be param can be return']
['dbus_connection_open_private_APIName return new connection, or NULL on failure', 'api return connection , null failure']
['Pass NULL for the dbus_connection_open_private_APIParam_2 parameter', 'null param']
['The caller owns a reference to dbus_connection_pop_message_APIParam_0', 'caller own reference param']
['connections are expensive enough that it is wasteful to create lots of connections to the same server', 'connection be expensive enough be wasteful create lot connection server']
['Note Prefer dbus_connection_open_APIName to dbus_connection_open_private_APIName unless you have good reason', 'note prefer api unless -PRON- have good reason']
['If the queue is empty, returns NULL', 'if queue be empty , return null']
['Returns the first-received message from the incoming message queue , removing it from the queue', 'return param message incoming message queue , remove queue']
['dbus_connection_pop_message_APIName bypasses any message handlers that are registered , and so using it is usually wrong', 'api bypass message handler be register , use be usually wrong']
['Instead , let the main loop invoke dbus_connection_dispatch_APIName', 'instead , let main loop invoke api']
['dbus_connection_pop_message_APIParam_1 is the dbus_connection_pop_message_APIParam_1', 'param be param']
['you must dbus_connection_close_APIName to disconnect it , and dbus_connection_unref_APIName to free the connection object', 'PRON- must api free connection object']
['dbus_connection_pop_message_APIName return next message in the incoming queue', 'api return next message incoming queue']
['Popping messages manually is only useful in very simple programs that do not share a DBusConnection with any libraries or other modules', 'pop message manually be only useful simple program not share library module']
['There is a lock that covers all ways of accessing the incoming message queue , so dbus_connection_dispatch_APIName , dbus_connection_pop_message_APIName , dbus_connection_borrow_message_APIName , etc', 'be lock cover way access incoming message queue , api , etc']
["dbus_connection_preallocate_send_APIParam_1 is the dbus_connection_preallocate_send_APIParam_1 we 're preallocating for", 'param be param']
['dbus_connection_preallocate_send_APIName return the preallocated resources, or NULL', 'api return resource , null']
['Preallocates resources needed to send a message , allowing the message to be sent without the possibility of memory allocation failure', 'resource need send message , allow message be send without memory allocation failure']
['Allows apps to create a future guarantee that they can send a message regardless of memory shortages', 'allow create future guarantee can send message']
['If the dbus_connection_read_write_APIParam_1 is closed, the function returns FALSE', 'if param be closed , function return constant']
['The return value indicates  , i.e', 'return value indicate']
['whether the dbus_connection_read_write_APIParam_1 is connected', 'whether param be connect']
['dbus_connection_read_write_APIName is intended for use with applications that do not want to write a main loop and deal with DBusWatch and DBusTimeout', 'api be intend use application not want main loop']
['dbus_connection_read_write_APIParam_1 is the dbus_connection_read_write_APIParam_1', 'param be param']
['As long as the dbus_connection_read_write_APIParam_1 is open, dbus_connection_read_write_APIName will block until it can read or write, read or write, return TRUE', 'as long as param be open , api block until can read , read , return constant']
['dbus_connection_read_write_dispatch_APIName dispatches incoming messages for you', 'api incoming message -PRON']
['Note that even after disconnection , messages may remain in the incoming queue that need to be processed', 'even after , message may remain incoming queue nee be process']
['dbus_connection_read_write_APIName return TRUE if still connected', 'api return constant']
['dbus_connection_read_write_APIParam_2 is max time to block or -1 for infinite', 'param be max time block constant']
['with dbus_connection_read_write_APIName you have to arrange to drain the incoming queue yourself', 'api -PRON- have arrange drain incoming queue']
['If there are messages to dispatch, dbus_connection_read_write_dispatch_APIName will dbus_connection_dispatch_APIName once, and return', 'if be message , api , return']
['dbus_connection_read_write_dispatch_APIName is intended for use with applications that do not want to write a main loop and deal with DBusWatch and DBusTimeout', 'api be intend use application not want main loop']
['An example usage would be', 'example usage would be']
['If there are no messages to dispatch, dbus_connection_read_write_dispatch_APIName will block until it can read or write, read or write, return', 'if be no message , api block until can read , read , return']
['The return value indicates', 'return value indicate']
['The way to think of dbus_connection_read_write_dispatch_APIName is that it either makes some sort of progress , or it blocks', 'way think api be either make sort progress , block']
['In this usage you would normally have set up a filter function to look at each message as it is dispatched', 'usage -PRON- would normally have set filter function look message as be']
['The loop terminates', 'loop terminate']
['dbus_connection_read_write_dispatch_APIParam_1 is the dbus_connection_read_write_dispatch_APIParam_1', 'param be param']
['This is important', 'be important']
['dbus_connection_read_write_dispatch_APIParam_2 is max time to block or -1 for infinite', 'param be max time block constant']
['dbus_connection_read_write_dispatch_APIName return TRUE if the disconnect message has not been processed', 'api return constant']
['dbus_connection_ref_APIParam_1 is the dbus_connection_ref_APIParam_1', 'param be param']
['Increments the reference count of a DBusConnection', 'increment reference count']
['dbus_connection_ref_APIName return the dbus_connection_ref_APIParam_1', 'api return param']
['The given dbus_connection_register_fallback_APIParam_3 handles messages at or below the given dbus_connection_register_fallback_APIParam_2', 'give param handle message give param']
['Registers a fallback handler for a given subsection of the object hierarchy', 'register handler give object']
["You can use this to establish a default message handling policy for a whole `` subdirectory . ''", 'PRON- can use establish default message handle policy whole']
['It is a bug to call dbus_connection_register_fallback_APIName for object paths which already have a handler', 'be call api object path which already have handler']
['dbus_connection_register_fallback_APIParam_1 is the dbus_connection_register_fallback_APIParam_1', 'param be param']
['Note that , react to received messages', 'react receive message']
['it can not be interrupted , which makes dbus_connection_read_write_dispatch_APIName unsuitable for applications that do more than just', 'can not be interrupt , which make api unsuitable application']
['dbus_connection_register_fallback_APIParam_3 is the virtual table', 'param be virtual table']
['dbus_connection_register_fallback_APIName return FALSE if an error  occured', 'api return constant']
['dbus_connection_register_fallback_APIParam_4 is data to pass to functions in the dbus_connection_register_fallback_APIParam_3', 'param be data function param']
['Use dbus_connection_try_register_fallback_APIName', 'use api']
['Registers a handler for a given dbus_connection_register_object_path_APIParam_2 in the object hierarchy', 'register handler give param object']
['The given dbus_connection_register_object_path_APIParam_3 handles messages sent to exactly the given dbus_connection_register_object_path_APIParam_2', 'give param handle message send exactly give param']
['dbus_connection_register_object_path_APIParam_1 is the dbus_connection_register_object_path_APIParam_1', 'param be param']
["dbus_connection_register_fallback_APIParam_2 is a ' / ' delimited string of dbus_connection_register_fallback_APIParam_2 elements", 'param be delimit string param element']
['It is a bug to call dbus_connection_register_object_path_APIName for object paths which already have a handler', 'be call api object path which already have handler']
['dbus_connection_register_object_path_APIParam_4 is data to pass to functions in the dbus_connection_register_object_path_APIParam_3', 'param be data function param']
['dbus_connection_register_object_path_APIParam_3 is the virtual table', 'param be virtual table']
['dbus_connection_register_object_path_APIName return FALSE if an error  ocurred', 'api return constant']
['Use dbus_connection_try_register_object_path_APIName', 'use api']
['dbus_connection_remove_filter_APIParam_1 is the dbus_connection_remove_filter_APIParam_1', 'param be param']
['Removes a previously-added message filter', 'remove param message filter']
['It is a programming error to call dbus_connection_remove_filter_APIName for a handler that has not been added as a filter', 'be program error call api handler have not be add as filter']
['dbus_connection_remove_filter_APIParam_2 is the handler to remove', 'param be handler remove']
["dbus_connection_register_object_path_APIParam_2 is a ' / ' delimited string of dbus_connection_register_object_path_APIParam_2 elements", 'param be delimit string param element']
['Used to return a dbus_connection_return_message_APIParam_2 after peeking at a dbus_connection_return_message_APIParam_2 using dbus_connection_borrow_message_APIName', 'use return param after peek param use api']
['dbus_connection_return_message_APIParam_1 is the dbus_connection_return_message_APIParam_1', 'param be param']
['dbus_connection_remove_filter_APIParam_3 is user data for the handler to remove', 'param be user datum handler remove']
['only one instance of it will be removed', 'only one instance be remove']
['dbus_connection_return_message_APIParam_2 is the dbus_connection_return_message_APIParam_2 from dbus_connection_borrow_message_APIName', 'param be param api']
['Adds a dbus_connection_send_APIParam_2 to the outgoing dbus_connection_send_APIParam_2 queue', 'add param outgoing param queue']
['Does not block to write the dbus_connection_send_APIParam_2 to the network', 'do not block param network']
['Only called', 'only call']
['no error will be returned', 'no error be return']
['that happens asynchronously', 'happen asynchronously']
['If the function fails due to lack of memory, it returns FALSE', 'if function fail due lack memory , return constant']
['dbus_connection_send_APIParam_1 is the dbus_connection_send_APIParam_1', 'param be param']
['Because this only queues the dbus_connection_send_APIParam_2 , the only reason it can fail is lack of memory', 'because only queue param , only reason can fail be lack memory']
['the dbus_connection_send_APIParam_2 will be sent the next time the main loop is run', 'param be send next time main loop be run']
['To force the dbus_connection_send_APIParam_2 to be written , call dbus_connection_flush_APIName however it is not necessary to call dbus_connection_flush_APIName by hand', 'force param be , call api however be not necessary call api by hand']
['The dbus_connection_send_APIParam_2 dbus_connection_send_APIParam_3 is used by the remote application to send a reply', 'param be use by remote application send']
['dbus_connection_send_APIParam_2 is the dbus_connection_send_APIParam_2 to write', 'param be param']
['see dbus_message_get_serial_APIName or the D-Bus specification', 'see api param specification']
['dbus_message_unref_APIName can be called as soon as this method returns as the dbus_connection_send_APIParam_2 queue will hold its own ref until the dbus_connection_send_APIParam_2 is sent', 'api can be call as soon as api return as param queue hold until param be send']
['The function will never fail for other reasons', 'function never fail reason']
['dbus_connection_flush_APIName should only be used', 'api should only be use']
['dbus_connection_send_APIName return TRUE on success', 'api return constant success']
['dbus_connection_send_APIParam_3 is return location for dbus_connection_send_APIParam_2 dbus_connection_send_APIParam_3, or NULL if you do not care', 'param be return location param null if -PRON- not care']
['you can queue an outgoing dbus_connection_send_APIParam_2', 'PRON- can queue outgoing param']
['Sends a dbus_connection_send_preallocated_APIParam_3 using dbus_connection_send_preallocated_APIParam_2 resources', 'send param use param resource']
['dbus_connection_send_preallocated_APIName can not fail', 'api can not fail']
['It works identically to dbus_connection_send_APIName in other respects', 'work identically api respect']
['Preallocated resources comes from dbus_connection_preallocate_send_APIName', 'resource come api']
["dbus_connection_send_preallocated_APIName `` consumes '' the dbus_connection_send_preallocated_APIParam_2 resources , they need not be freed separately", 'api consume param resource , nee not be free separately']
['dbus_connection_send_preallocated_APIParam_1 is the dbus_connection_send_preallocated_APIParam_1', 'param be param']
['dbus_connection_send_preallocated_APIParam_2 is the dbus_connection_send_preallocated_APIParam_2 resources', 'param be param resource']
['dbus_connection_send_preallocated_APIParam_3 is the dbus_connection_send_preallocated_APIParam_3 to send', 'param be param send']
['dbus_connection_send_preallocated_APIParam_4 is return location for client serial assigned to the dbus_connection_send_preallocated_APIParam_3', 'param be return location client assign param']
['A DBusPendingCall will see a reply dbus_connection_send_with_reply_APIParam_2 before any filters or registered object path handlers', 'see param before filter register object path handler']
['Queues a dbus_connection_send_with_reply_APIParam_2 to send, as with dbus_connection_send_APIName , but also returns a DBusPendingCall used to receive a reply to the dbus_connection_send_with_reply_APIParam_2', 'queue param send , as api , but return use receive param']
['A DBusPendingCall will always see exactly one reply dbus_connection_send_with_reply_APIParam_2 , unless it is cancelled with dbus_pending_call_cancel_APIName', 'always see exactly one param , unless be cancel api']
['See dbus_connection_dispatch_APIName for details on', 'see api detail']
['dbus_connection_send_with_reply_APIParam_1 is the dbus_connection_send_with_reply_APIParam_1', 'param be param']
['a timeout error will occur , unlike with dbus_connection_send_APIName', 'timeout error occur , unlike api']
['dbus_connection_send_with_reply_APIParam_2 is the dbus_connection_send_with_reply_APIParam_2 to send', 'param be param send']
['dbus_connection_send_with_reply_APIName expires the pending reply and generates a synthetic error reply indicating that a timeout occurred', 'api expire pende generate synthetic error indicating timeout occur']
['dbus_connection_send_with_reply_APIName return FALSE if no memory, TRUE otherwise', 'api return constant otherwise']
['dbus_connection_send_with_reply_APIParam_4 is timeout in milliseconds , -1 for default or DBUS_TIMEOUT_INFINITE for no timeout', 'param be timeout millisecond , constant default constant no timeout']
['a sane default timeout is used', 'sane default timeout be use']
['-1 is typically the best value for the timeout , unless you want a very short or very long timeout', 'constant be typically good value timeout , unless -PRON- want short long timeout']
['the DBusPendingCall will still be generated internally , and used to track the dbus_connection_send_with_reply_APIParam_2 reply timeout', 'still be generate internally , use param timeout']
['no timeout will be set', 'no timeout be set']
['and the call will block forever', 'call block forever']
['dbus_connection_send_with_reply_and_block_APIName does not reenter the main loop , i.e', 'api do not reenter main loop']
['messages other than the reply are queued up but not processed', 'message be queue but not process']
['dbus_connection_send_with_reply_APIParam_3 is return location for a DBusPendingCall object, or NULL if dbus_connection_send_with_reply_APIParam_1 is disconnected or when you try to send Unix file descriptors on a dbus_connection_send_with_reply_APIParam_1 that does not support them', 'param be return location object , null']
['If a normal reply is received, itbe returned by dbus_connection_send_with_reply_and_block_APIName, and removed from the incoming dbus_connection_send_with_reply_and_block_APIParam_2 queue', 'if normal be receive , itbe return by api , remove incoming param queue']
['dbus_connection_send_with_reply_and_block_APIName is used to invoke method calls on a remote object', 'api be use invoke api call remote object']
['If it is not received, NULLbe returned by dbus_connection_send_with_reply_and_block_APIName and the dbus_connection_send_with_reply_and_block_APIParam_4 is set to DBUS_ERROR_NO_REPLY', 'if be not receive , nullbe return by api param be set constant']
['dbus_connection_send_with_reply_and_block_APIParam_1 is the dbus_connection_send_with_reply_and_block_APIParam_1', 'param be param']
['the DBusPendingCall will be set to NULL , so be careful with this', 'be set null , be careful']
['dbus_connection_send_with_reply_and_block_APIParam_4 is return location for dbus_connection_send_with_reply_and_block_APIParam_4 dbus_connection_send_with_reply_and_block_APIParam_2', 'param be return location param']
['Warning will not be processing the incoming dbus_connection_send_with_reply_and_block_APIParam_2 queue', 'warn not be process incoming param queue']
['Sends a dbus_connection_send_with_reply_and_block_APIParam_2 and blocks a certain time period', 'send param block certain time']
['dbus_connection_send_with_reply_and_block_APIParam_2 is the dbus_connection_send_with_reply_and_block_APIParam_2 to send', 'param be param send']
['dbus_connection_send_with_reply_and_block_APIName return the dbus_connection_send_with_reply_and_block_APIParam_2 that is the reply or NULL with an dbus_connection_send_with_reply_and_block_APIParam_4 code if the function fails', 'api return param null param code']
['result is set to whatever is appropriate , such as DBUS_ERROR_NO_MEMORY or DBUS_ERROR_DISCONNECTED', 'result be set whatever be appropriate , as constant']
['If an dbus_connection_send_with_reply_and_block_APIParam_4 reply is received, it is converted to a DBusError and returned as an dbus_connection_send_with_reply_and_block_APIParam_4, the reply dbus_connection_send_with_reply_and_block_APIParam_2 is deleted and NULLbe returned by dbus_connection_send_with_reply_and_block_APIName', 'if param be receive , be convert return as param be delete nullbe return by api']
['dbus_connection_send_with_reply_and_block_APIParam_3 is timeout in milliseconds , -1 for default or DBUS_TIMEOUT_INFINITE for no timeout', 'param be timeout millisecond , constant default constant no timeout']
['To solve this , either avoid the situation , block in a separate thread from the main connection-dispatching thread , or use dbus_pending_call_set_notify_APIName to avoid blocking', 'solve , either avoid situation , block separate thread main param thread , use api avoid block']
['clients can connect anonymously', 'client can connect anonymously']
['This means you can end up', 'mean -PRON- can end']
['dbus_connection_set_allow_anonymous_APIParam_1 is the dbus_connection_set_allow_anonymous_APIParam_1', 'param be param']
['This setting interacts with the available authorization mechanisms', 'set interact available authorization mechanism']
['the dbus_connection_set_allow_anonymous_APIParam_1 can proceed', 'param can proceed']
['dbus_connection_set_allow_anonymous_APIName must be called on the server side of a dbus_connection_set_allow_anonymous_APIParam_1', 'api must be call server param']
['dbus_connection_set_allow_anonymous_APIParam_2 is whether to allow authentication as an anonymous user', 'param be whether allow authentication as anonymous user']
['dbus_connection_set_change_sigpipe_APIName sets a global flag for', 'api set global flag']
['however , any user identity is allowed', 'however , user identity be allow']
['You can override the rules for connections authorized as a user identity with dbus_connection_set_unix_user_function_APIName and dbus_connection_set_windows_user_function_APIName', 'PRON- can override rule connection authorize as user identity api']
['Namely , an auth mechanism such as ANONYMOUS that supports anonymous auth must be included in the list of available mechanisms for anonymous login to work', 'namely , mechanism as anonymous support anonymous must be include list available mechanism anonymous work']
['dbus_connection_set_change_sigpipe_APIParam_1 is TRUE to allow sigpipe to be set to SIG_IGN', 'param be constant allow be set constant']
['The dbus_connection_set_data_APIParam_2 number must have been allocated with dbus_connection_allocate_data_slot_APIName', 'param number must have be allocate api']
['dbus_connection_set_data_APIParam_1 is the dbus_connection_set_data_APIParam_1', 'param be param']
['dbus_connection_set_data_APIParam_2 is the dbus_connection_set_data_APIParam_2 number', 'param be param number']
['dbus_connection_set_data_APIParam_3 is the dbus_connection_set_data_APIParam_3 to store', 'param be param store']
['Note dbus_connection_set_data_APIName does not take the main thread lock on DBusConnection , which allows it to be used from inside watch and timeout functions', 'note api do not take main thread lock , which allow be use inside timeout function']
['dbus_connection_set_data_APIParam_4 is finalizer function for the dbus_connection_set_data_APIParam_3', 'param be finalizer function param']
['dbus_connection_set_data_APIName return TRUE if there was enough memory to store the dbus_connection_set_data_APIParam_3', 'api return constant']
['or when the dbus_connection_set_data_APIParam_1 is finalized', 'param be finalize']
['Stores a pointer on a DBusConnection , along with an optional function to be used for freeing the dbus_connection_set_data_APIParam_3', 'store pointer , along optional function be use freeing param']
['This setting also changes the default rule for connections authorized as a user', 'set change default rule connection authorize as user']
['However , dbus_connection_dispatch_APIName MUST NOT BE CALLED from inside the DBusDispatchStatusFunction', 'however , api must not be call inside']
['dbus_connection_set_dispatch_status_function_APIParam_1 is the dbus_connection_set_dispatch_status_function_APIParam_1', 'param be param']
['Indeed , almost any reentrancy in dbus_connection_set_dispatch_status_function_APIName is a bad idea', 'indeed , almost api be bad idea']
['Set a dbus_connection_set_dispatch_status_function_APIParam_2 to be invoked', 'set param be invoke']
['dbus_connection_set_dispatch_status_function_APIParam_2 is dbus_connection_set_dispatch_status_function_APIParam_2 to call on dispatch status changes', 'param be param call status change']
['dbus_connection_set_dispatch_status_function_APIParam_3 is dbus_connection_set_dispatch_status_function_APIParam_3 for dbus_connection_set_dispatch_status_function_APIParam_2', 'param be param']
['you need to know there a reference held on the dbus_connection_set_data_APIParam_1', 'PRON- need know reference hold param']
['A side effect of this is that , or the dbus_connection_set_data_APIParam_1 could be finalized during dbus_connection_set_data_APIName', 'effect be , param could be finalize during api']
['dbus_connection_dispatch_APIName needs to be called to process incoming messages', 'api need be call process incoming message']
['dbus_connection_set_dispatch_status_function_APIParam_4 is free the dbus_connection_set_dispatch_status_function_APIParam_2 dbus_connection_set_dispatch_status_function_APIParam_3', 'param be free param']
['dbus_connection_set_exit_on_disconnect_APIParam_1 is the dbus_connection_set_exit_on_disconnect_APIParam_1', 'param be param']
['messages should be dispatched later', 'message should be later']
['The call to _exit_APIName comes after any handlers for the disconnect signal run', 'call api come after handler signal run']
['normally , , it is permitted if the user identity is root or the user identity matches the user identity of the server process', 'normally , be permit  identity match user identity server process']
['Instead , the DBusDispatchStatusFunction should simply save an indication that', 'instead , should simply save indication']
['By default , dbus_connection_set_exit_on_disconnect_APIParam_2 is FALSE', 'by default , param be constant']
['handlers can cancel the exit by calling this function', 'handler can cancel exit by call function']
['but for message bus connections returned from dbus_bus_get_APIName it will be toggled on by default', 'but message connection return api be toggle by default']
['Specifies the maximum dbus_connection_set_max_message_size_APIParam_2 message this dbus_connection_set_max_message_size_APIParam_1 is allowed to receive', 'specifie maximum param message param be allow receive']
['_exit_APIName should be called', 'api should be call']
['Set whether', 'set whether']
['Larger messages will result in disconnecting the dbus_connection_set_max_message_size_APIParam_1', 'large message result param']
['dbus_connection_set_max_message_size_APIParam_1 is a DBusConnection', 'param be']
['dbus_connection_set_max_message_size_APIParam_2 is maximum message dbus_connection_set_max_message_size_APIParam_2 the dbus_connection_set_max_message_size_APIParam_1 can receive , in bytes', 'param be maximum message param can receive , byte']
['dbus_connection_set_exit_on_disconnect_APIParam_2 is TRUE', 'param be constant']
['you have to be sure to dispatch on every iteration of your main loop , especially if dbus_watch_handle_APIName or dbus_timeout_handle_APIName were called', 'PRON - have be sure every iteration main loop , especially  be call']
['Specifies the maximum number of unix fds a message on this dbus_connection_set_max_message_unix_fds_APIParam_1 is allowed to receive', 'specifie maximum number unix message param be allow receive']
['Messages with more unix fds will result in disconnecting the dbus_connection_set_max_message_unix_fds_APIParam_1', 'message unix result disconnecting param']
['Sets the maximum total number of bytes that can be used for all messages received on this dbus_connection_set_max_received_size_APIParam_1', 'set maximum total number byte can be use message receive param']
['Messages count toward the maximum until they are finalized', 'message count toward maximum until be finalize']
['The semantics of the maximum are', 'semantic maximum be']
['The semantics are not', 'semantic be not']
['But this should be inconsequential', 'but should be inconsequential']
['The reason is that we do not know the dbus_connection_set_max_received_size_APIParam_2 of a message until after we read it', 'reason be not know param message until after read']
['dbus_connection_set_max_received_size_APIParam_1 is the dbus_connection_set_max_received_size_APIParam_1', 'param be param']
['the dbus_connection_set_max_received_size_APIParam_1 will not read more data until some messages are finalized', 'param not read datum until message be finalize']
['we do not read it', 'not read']
['Thus , the max live messages dbus_connection_set_max_received_size_APIParam_2 can actually be exceeded by up to the maximum dbus_connection_set_max_received_size_APIParam_2 of a single message', 'thus , max live message param can actually be exceed by maximum param single message']
['additional messages will not be read', 'additional message not be read']
['dbus_connection_set_max_received_size_APIParam_2 is the maximum dbus_connection_set_max_received_size_APIParam_2 in bytes of all outstanding messages', 'param be maximum param byte outstanding message']
['Messages count toward the maximum until they are finalized', 'message count toward maximum until be finalize']
['The semantics are analogous to those of dbus_connection_set_max_received_size_APIName', 'semantic be analogous api']
["This does imply that we can not call read_APIName with a buffer larger than we 're willing to exceed this limit by", 'do imply can not call api buffer large willing exceed limit by']
['Sets the maximum total number of unix fds that can be used for all messages received on this dbus_connection_set_max_received_unix_fds_APIParam_1', 'set maximum total number unix fd can be use message receive param']
['Normally DBusConnection automatically handles all messages to the org.freedesktop.DBus.Peer interface', 'normally automatically handle message param api']
['and that contains a half-dozen small messages', 'contain param small message']
['So do not set this unless you are the message bus', 'not set unless -PRON- be message']
['Also , , we may exceed the dbus_connection_set_max_received_size_APIParam_2 max by that amount', 'may exceed param max by amount']
['dbus_connection_set_route_peer_messages_APIParam_1 is the dbus_connection_set_route_peer_messages_APIParam_1', 'param be param']
['the dbus_connection_set_max_received_unix_fds_APIParam_1 will not read more data until some messages are finalized', 'param not read datum until message be finalize']
['However , the message bus wants to be able to route methods on that interface through the bus and to other applications', 'however , message want be able api application']
['Sets the timeout functions for the dbus_connection_set_timeout_functions_APIParam_1', 'set timeout function param']
['dbus_connection_set_route_peer_messages_APIParam_2 is TRUE to pass through org.freedesktop.DBus.Peer messages with a bus name set', 'param be constant param message name set']
['it can break things badly', 'can break thing badly']
['typically the DBusAddTimeoutFunction would create a QTimer', 'typically would create']
['These functions are responsible for making the application main loop aware of timeouts', 'function be responsible make application main loop aware timeout']
['The DBusTimeoutToggledFunction notifies the application that the timeout has been enabled or disabled', 'notifie application timeout have be enable disabled']
['messages with the org.freedesktop.DBus.Peer interface that also have a bus destination name set will not be automatically handled by the DBusConnection and instead will be dispatched normally to the application', 'message param api have destination name set not be automatically handle by instead be normally application']
['Call dbus_timeout_get_enabled_APIName to check this', 'call api check']
['A disabled timeout should have no effect , and enabled timeout should be added to the main loop', 'disabled timeout should have no effect , enable timeout should be add main loop']
['the DBusAddTimeoutFunction would call g_timeout_add', 'would call param']
['This feature is used instead of simply adding/removing the timeout', 'feature be use instead simply timeout']
['With Qt , QTimer::start_APIName and QTimer::stop_APIName can be used to enable and disable', 'api can be use enable disable']
['The DBusTimeout can be queried for the timer interval using dbus_timeout_get_interval_APIName', 'can be query use api']
['dbus_connection_set_timeout_functions_APIParam_1 is the dbus_connection_set_timeout_functions_APIParam_1', 'param be param']
['dbus_timeout_handle_APIName should be called repeatedly , each time the interval elapses , starting after it has elapsed once', 'api should be call repeatedly , time elapse , start after have elapse']
['is toggled', 'be toggle']
['its interval may change', 'may change']
['The toggled function may be NULL', 'toggle function may be null']
['See the comments in the code or http', 'see comment code http']
['dbus_connection_set_timeout_functions_APIParam_2 is function to add a timeout', 'param be function add timeout']
['dbus_connection_set_timeout_functions_APIParam_3 is function to remove a timeout', 'param be function remove timeout']
['The timer interval may change', 'may change']
['dbus_connection_set_timeout_functions_APIParam_4 is function to notify of enable/disable', 'param be function notify']
['dbus_connection_set_timeout_functions_APIParam_5 is dbus_connection_set_timeout_functions_APIParam_5 to pass to dbus_connection_set_timeout_functions_APIParam_2 and dbus_connection_set_timeout_functions_APIParam_3', 'param be param']
['dbus_connection_set_timeout_functions_APIParam_6 is function to be called to free the dbus_connection_set_timeout_functions_APIParam_5', 'param be function be call free param']
['dbus_connection_set_timeout_functions_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['Sets a predicate dbus_connection_set_unix_user_function_APIParam_2 used to determine', 'set param use determine']
['Also , root is always allowed to connect', 'root be always allow connect']
['dbus_connection_set_unix_user_function_APIParam_1 is the dbus_connection_set_unix_user_function_APIParam_1', 'param be param']
['Note The thread lock on DBusConnection is held', 'note thread lock be hold']
['dbus_connection_set_unix_user_function_APIParam_2 is the predicate', 'param be']
['so inside these functions you may not invoke any methods on DBusConnection or it will deadlock', 'inside function -PRON- may not invoke api deadlock']
['dbus_connection_set_unix_user_function_APIParam_3 is dbus_connection_set_unix_user_function_APIParam_3 to pass to the predicate', 'param be param']
['dbus_connection_set_unix_user_function_APIParam_4 is dbus_connection_set_unix_user_function_APIParam_2 to free the dbus_connection_set_unix_user_function_APIParam_3', 'param be param free param']
['Sets the mainloop wakeup function for the dbus_connection_set_wakeup_main_function_APIParam_1', 'set function param']
['only the same UID as the server process will be allowed to connect', 'only as server process be allow connect']
['a message has been queued for writing -RRB-', 'message have be queue _ rrb']
['its dbus_connection_set_unix_user_function_APIParam_4 will be invoked', 'param be invoke']
['On Windows , the dbus_connection_set_unix_user_function_APIParam_2 will be set and', 'window , param be set']
['dbus_connection_set_unix_user_function_APIName is called', 'api be call']
['if it returns TRUE , the dbus_connection_set_unix_user_function_APIParam_1 is allowed to proceed, otherwise the dbus_connection_set_unix_user_function_APIParam_1 is disconnected', 'if return constant , param be allow proceed , otherwise param be']
['dbus_connection_set_wakeup_main_function_APIParam_1 is the dbus_connection_set_wakeup_main_function_APIParam_1', 'param be param']
['However , the dbus_connection_set_unix_user_function_APIParam_2 will never be called , protocols would allow authenticating as a UNIX user on Windows', 'however , param never be call , protocol would allow authenticate as unix user window']
['dbus_connection_set_wakeup_main_function_APIParam_2 is function to wake up the mainloop', 'param be function wake']
['dbus_connection_set_wakeup_main_function_APIParam_3 is dbus_connection_set_wakeup_main_function_APIParam_3 to pass dbus_connection_set_wakeup_main_function_APIParam_2', 'param be param']
['dbus_connection_set_wakeup_main_function_APIParam_4 is function to be called to free the dbus_connection_set_wakeup_main_function_APIParam_3', 'param be function be call free param']
['this typically results in a call to QEventLoop::wakeUp_APIName', 'typically result call api']
['it would call g_main_context_wakeup_APIName', 'would call api']
['Sets the watch functions for the dbus_connection_set_watch_functions_APIParam_1', 'set function param']
['waking up the main loop', 'wake main loop']
['dbus_connection_set_wakeup_main_function_APIName is responsible for', 'api be responsible']
['Call dbus_watch_get_enabled_APIName to check this', 'call api check']
['typically the DBusAddWatchFunction would create a QSocketNotifier', 'typically would create']
['The DBusWatchToggledFunction notifies the application that the watch has been enabled or disabled', 'notifie application have be enable disabled']
['it may not be enabled', 'may not be enable']
['This feature is used instead of simply adding/removing the watch', 'feature be use instead simply']
['These functions are responsible for making the application main loop aware of file descriptors that need to be monitored for events , using select_APIName or poll_APIName', 'function be responsible make application main loop aware file descriptor need be monitor event , use api']
['A disabled watch should have no effect , and enabled watch should be added to the main loop', 'disabled should have no effect , enable should be add main loop']
['the DBusAddWatchFunction could call g_io_add_watch_APIName , or could be used as part of a more elaborate GSource', 'could call api , could be use as part elaborate']
['It is not allowed to reference a DBusWatch after it has been passed to dbus_connection_set_watch_functions_APIParam_3', 'be not allow reference after have be param']
['The DBusWatch can be queried for the file descriptor to watch using dbus_watch_get_unix_fd_APIName or dbus_watch_get_socket_APIName , and for the events to watch for using dbus_watch_get_flags_APIName', 'can be query file descriptor use api , event use api']
['The toggled function may be NULL', 'toggle function may be null']
['The flags returned by dbus_watch_get_flags_APIName will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR', 'flag return by api only contain constant , never constant']
['all watches implicitly include a watch for hangups , errors , and other exceptional conditions', 'implicitly include , error , exceptional condition']
['If FALSEbe returned by dbus_connection_set_watch_functions_APIName due to lack of memory, the failure may be due to a FALSE return from the new dbus_connection_set_watch_functions_APIParam_2', 'if constantbe return by api due lack memory , failure may be due constant return param']
['dbus_connection_set_watch_functions_APIParam_1 is the dbus_connection_set_watch_functions_APIParam_1', 'param be param']
['Once a file descriptor becomes readable or writable , or an exception occurs , dbus_watch_handle_APIName should be called to notify the dbus_connection_set_watch_functions_APIParam_1 of the file descriptor condition', 'file descriptor become readable writable , exception occur , api should be call notify param file descriptor condition']
['dbus_watch_handle_APIName can not be called , as the dbus_connection_set_watch_functions_APIParam_1 will not be ready to handle that watch yet', 'api can not be call , as param not be ready handle yet']
['dbus_connection_set_watch_functions_APIParam_2 is function to begin monitoring a new descriptor', 'param be function begin monitor descriptor']
['if FALSEbe returned by dbus_connection_set_watch_functions_APIName the net result should be that dbus_connection_set_watch_functions_APIName has no effect, but the dbus_connection_set_watch_functions_APIParam_2 and dbus_connection_set_watch_functions_APIParam_3 may have been called', 'if constantbe return by api net result should be api have no effect , but param may have be call']
['See the comments in the code or http', 'see comment code http']
['dbus_connection_set_watch_functions_APIParam_3 is function to stop monitoring a descriptor', 'param be function monitor descriptor']
['dbus_connection_set_watch_functions_APIParam_4 is function to notify of enable/disable', 'param be function notify']
['dbus_connection_set_watch_functions_APIName return FALSE on failure (no memory', 'api return constant failure memory']
['dbus_connection_set_watch_functions_APIParam_5 is dbus_connection_set_watch_functions_APIParam_5 to pass to dbus_connection_set_watch_functions_APIParam_2 and dbus_connection_set_watch_functions_APIParam_3', 'param be param']
['dbus_connection_set_watch_functions_APIParam_6 is function to be called to free the dbus_connection_set_watch_functions_APIParam_5', 'param be function be call free param']
['dbus_connection_set_windows_user_function_APIParam_1 is the dbus_connection_set_windows_user_function_APIParam_1', 'param be param']
['Sets a predicate dbus_connection_set_windows_user_function_APIParam_2 used to determine', 'set param use determine']
['dbus_connection_set_windows_user_function_APIParam_2 is the predicate', 'param be']
['However , the dbus_connection_set_windows_user_function_APIParam_2 will never be called', 'however , param never be call']
['Note The thread lock on DBusConnection is held', 'note thread lock be hold']
['so inside these functions you may not invoke any methods on DBusConnection or it will deadlock', 'inside function -PRON- may not invoke api deadlock']
['dbus_connection_set_windows_user_function_APIParam_3 is dbus_connection_set_windows_user_function_APIParam_3 to pass to the predicate', 'param be param']
['only the same user owning the server process will be allowed to connect', 'only user owning server process be allow connect']
['dbus_connection_set_windows_user_function_APIParam_4 is dbus_connection_set_windows_user_function_APIParam_2 to free the dbus_connection_set_windows_user_function_APIParam_3', 'param be param free param']
['dbus_connection_steal_borrowed_message_APIParam_1 is the dbus_connection_steal_borrowed_message_APIParam_1', 'param be param']
['Used to keep a dbus_connection_steal_borrowed_message_APIParam_2 after peeking at a dbus_connection_steal_borrowed_message_APIParam_2 using dbus_connection_borrow_message_APIName', 'use keep param after peek param use api']
['Before using this function , see the caveats/warnings in the documentation for dbus_connection_pop_message_APIName', 'before use function , see documentation api']
['its dbus_connection_set_windows_user_function_APIParam_4 will be invoked', 'param be invoke']
['On UNIX , the dbus_connection_set_windows_user_function_APIParam_2 will be set and', 'unix , param be set']
['dbus_connection_steal_borrowed_message_APIParam_2 is the dbus_connection_steal_borrowed_message_APIParam_2 from dbus_connection_borrow_message_APIName', 'param be param api']
['dbus_connection_set_windows_user_function_APIName is called', 'api be call']
['if it returns TRUE , the dbus_connection_set_windows_user_function_APIParam_1 is allowed to proceed, otherwise the dbus_connection_set_windows_user_function_APIParam_1 is disconnected', 'if return constant , param be allow proceed , otherwise param be']
['Registers a fallback handler for a given subsection of the object hierarchy', 'register handler give object']
['The given dbus_connection_try_register_fallback_APIParam_3 handles messages at or below the given dbus_connection_try_register_fallback_APIParam_2', 'give param handle message give param']
['dbus_connection_try_register_fallback_APIParam_1 is the dbus_connection_try_register_fallback_APIParam_1', 'param be param']
['dbus_connection_try_register_fallback_APIParam_3 is the virtual table', 'param be virtual table']
["You can use this to establish a default message handling policy for a whole `` subdirectory . ''", 'PRON- can use establish default message handle policy whole']
['dbus_connection_try_register_fallback_APIParam_5 is address where an dbus_connection_try_register_fallback_APIParam_5 can be returned', 'param be address param can be return']
['dbus_connection_try_register_fallback_APIParam_4 is data to pass to functions in the dbus_connection_try_register_fallback_APIParam_3', 'param be data function param']
['dbus_connection_try_register_fallback_APIName return FALSE if an dbus_connection_try_register_fallback_APIParam_5  is reported', 'api return constant']
['Registers a handler for a given dbus_connection_try_register_object_path_APIParam_2 in the object hierarchy', 'register handler give param object']
['The given dbus_connection_try_register_object_path_APIParam_3 handles messages sent to exactly the given dbus_connection_try_register_object_path_APIParam_2', 'give param handle message send exactly give param']
['dbus_connection_try_register_object_path_APIParam_1 is the dbus_connection_try_register_object_path_APIParam_1', 'param be param']
['dbus_connection_try_register_object_path_APIParam_3 is the virtual table', 'param be virtual table']
["dbus_connection_try_register_fallback_APIParam_2 is a ' / ' delimited string of dbus_connection_try_register_fallback_APIParam_2 elements", 'param be delimit string param element']
['dbus_connection_try_register_object_path_APIParam_4 is data to pass to functions in the dbus_connection_try_register_object_path_APIParam_3', 'param be data function param']
['dbus_connection_try_register_object_path_APIParam_5 is address where an dbus_connection_try_register_object_path_APIParam_5 can be returned', 'param be address param can be return']
['dbus_connection_try_register_object_path_APIName return FALSE if an dbus_connection_try_register_object_path_APIParam_5  is reported', 'api return constant']
["dbus_connection_try_register_object_path_APIParam_2 is a ' / ' delimited string of dbus_connection_try_register_object_path_APIParam_2 elements", 'param be delimit string param element']
['Most connections are shared', 'connection be share']
['it is a bug to drop the last reference to a dbus_connection_unref_APIParam_1 that is still connected', 'be drop last reference param still connect']
['Decrements the reference count of a DBusConnection , and finalizes it', 'reference count , finalize']
['dbus_connection_open_APIName and dbus_bus_get_APIName return shared connections', 'api return share connection']
['Private connections come from dbus_connection_open_private_APIName or dbus_bus_get_private_APIName', 'private connection come api']
['dbus_connection_unref_APIParam_1 is the dbus_connection_unref_APIParam_1', 'param be param']
['Unregisters the handler registered with exactly the given dbus_connection_unregister_object_path_APIParam_2', 'unregister handler register exactly give param']
['Can unregister both fallback paths and object paths', 'can unregister path object path']
['it is a bug to call dbus_connection_unregister_object_path_APIName for a dbus_connection_unregister_object_path_APIParam_2 that is not registered', 'be call api param not register']
['dbus_connection_unregister_object_path_APIParam_1 is the dbus_connection_unregister_object_path_APIParam_1', 'param be param']
['For private connections , the creator of the dbus_connection_unref_APIParam_1 must arrange for dbus_connection_close_APIName to be called prior to dropping the last reference', 'private connection , param must arrange api be call before drop last reference']
['dbus_connection_unregister_object_path_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['Initializes threads , like dbus_threads_init_default_APIName', 'initialize thread , like api']
['dbus_threads_init_APIParam_1 is ignored , formerly dbus_threads_init_APIParam_1 for using threads', 'param be ignore , formerly param use thread']
['dbus_threads_init_APIName return TRUE on success, FALSE if no memory', 'api return constant success , constant']
['Initializes threads', 'initialize thread']
["dbus_connection_unregister_object_path_APIParam_2 is a ' / ' delimited string of dbus_connection_unregister_object_path_APIParam_2 elements", 'param be delimit string param element']
['This version previously allowed user-specified threading primitives , but since D-Bus 1.6 it ignores them and behaves exactly like dbus_threads_init_default_APIName', 'version previously allow param threading , but since param constant ignore behave exactly like api']
['Since D-Bus 1.7 it is safe to call dbus_threads_init_default_APIName from any thread , any number of times', 'since param constant be safe call api thread , number time']
['In D-Bus 1.6 or older , dbus_threads_init_default_APIName must be called in the main thread before any other thread starts', 'param constant old , api must be call main thread before thread start']
['Adds a match dbus_bus_add_match_APIParam_2 to match messages going through the message bus', 'add match param match message message']
['the D-Bus library will not lock any data structures', 'param library not lock data structure']
['D-Bus will do locking , at some cost in efficiency', 'param locking , efficiency']
['For shared connections , libdbus will own a reference as long as the dbus_connection_unref_APIParam_1 is connected , so you can know that either you do not have the last reference , or it is OK to drop the last reference', 'share connection , reference as long as param be connect , -PRON- can know either -PRON- not have last reference , be ok drop last reference']
["The `` rule '' argument is the string form of a match dbus_bus_add_match_APIParam_2", 'rule param be stre form match param']
['This is generally acceptable', 'be generally acceptable']
['dbus_shutdown_APIName reverses the effects of dbus_threads_init_default_APIName', 'api reverse effect api']
['Returns TRUE on success , FALSE enough memory', 'return constant success , constant enough memory']
['The AddMatch method is fully documented in the D-Bus specification', 'api be fully document param specification']
['Rules are specified as a string of comma separated key/value pairs', 'rule be specify as string separate pair']
['Normal API conventions would have the function return a boolean value indicating  , but that would require blocking always to determine the return value', 'normal api would have function return boolean value indicating , but would require block always determine return value']
['Omitting a key from the dbus_bus_add_match_APIParam_2 indicates a wildcard match', 'omit key param indicate wildcard match']
['As a result , it is not sufficient to call dbus_threads_init_default_APIName in a library or plugin , unless the library or plugin imposes a similar requirement on its callers', 'as result , be not sufficient call api library , unless library impose similar requirement caller']
['- NULL for the dbus_bus_add_match_APIParam_3 dbus_bus_add_match_APIName will block until it gets a reply', '_ null param api block until get']
['For quick reference , the format of the match rules is discussed here , but the specification is the canonical version of this information', 'quick reference , format match rule be discuss , but specification be canonical version information']
['This can cause performance problems such as draining batteries on embedded platforms', 'can cause performance problem as drain embed platform']
['Matches are inclusive not exclusive so as long as one dbus_bus_add_match_APIParam_2 matches the message will get through', 'match be inclusive not exclusive as long as one param match message get']
['It is important to note this', 'be important note']
['dbus_bus_add_match_APIName will not block', 'api not block']
['omitting the member from a match dbus_bus_add_match_APIParam_2 but adding a sender would let all messages from that sender through regardless of the member', 'omit member match param but add would let message']
["That is , arg0 = ' 5 ' means match the string `` 5 '' not the integer 5", 'be , constant mean match stre constant not integer constant']
['Currently there is no way to match against non-string arguments', 'currently be no way match against param']
['A specialised form of wildcard matching on arguments is supported for path-like namespaces', 'specialised form wildcard matching param be support param']
['Matching on interface is tricky', 'match api be tricky']
['you will not find out about it', 'PRON- not find']
['the match thus will not be added until you flush the dbus_bus_add_match_APIParam_1 , and', 'match thus not be add until -PRON- flush param']
['string arguments will match', 'string param match']
['This means match rules on method calls should not usually give an interface', 'mean match rule api call should not usually give api']
['For security reasons , you can match arguments only up to DBUS_MAXIMUM_MATCH_RULE_ARG_NUMBER', 'security reason , -PRON- can match param only constant']
['Match rules have a maximum length of DBUS_MAXIMUM_MATCH_RULE_LENGTH bytes', 'match rule have maximum length constant byte']
['dbus_bus_add_match_APIParam_1 is dbus_bus_add_match_APIParam_1 to the message bus', 'param be param message']
['dbus_bus_add_match_APIParam_2 is textual form of match dbus_bus_add_match_APIParam_2', 'param be textual form match param']
['dbus_bus_add_match_APIParam_3 is location to store any errors', 'param be location store error']
['it will NOT match if the dbus_bus_add_match_APIParam_2 specifies an interface name', 'not match if param specifie api name']
['Connects to a bus daemon and registers the client with it', 'connect daemon register client']
['If a connection to the bus already exists, that connectionbe returned by dbus_bus_get_APIName', 'if connection already exist , connectionbe return by api']
['However , signal messages are required to include the interface so', 'however , signal message be require include api']
['Both of these maximums are much higher than you are likely to need , they only exist', 'maximum be much high -PRON- be likely need , only exist']
['The caller of dbus_bus_get_APIName owns a reference to the bus', 'caller api own reference']
['The caller may NOT call dbus_connection_close_APIName on this connection', 'caller may not call api connection']
['see dbus_connection_open_APIName and dbus_connection_close_APIName for details on that', 'see api detail']
['You can undo this by calling dbus_connection_set_exit_on_disconnect_APIName yourself after you get the connection', 'PRON- can undo by call api after -PRON- get connection']
['dbus_bus_get_APIName calls dbus_bus_register_APIName for you', 'api call api -PRON']
['dbus_bus_get_APIParam_1 is bus dbus_bus_get_APIParam_1', 'param be param']
['If dbus_bus_get_APIName obtains a new connection object never before returned from dbus_bus_get_APIName , it will call dbus_connection_set_exit_on_disconnect_APIName , so the application will exit if the connection closes', 'if api obtain connection object never before return api , call api , application exit if connection close']
['dbus_bus_get_APIParam_2 is address where an dbus_bus_get_APIParam_2 can be returned', 'param be address param can be return']
['If returning a newly-created connection, dbus_bus_get_APIName will block until authentication and bus registration are complete', 'if return param connection , api block until authentication registration be complete']
["An example is `` type = ignal ' , sender = ` org.freedesktop.DBus ' , interface = ` org.freedesktop.DBus ' , member = ` Foo ' , path = ' / bar/foo ' , destination = '", 'example be type ignal , param , api param , member foo , path , destination']
['dbus_bus_get_APIName return a DBusConnection with new ref or NULL on dbus_bus_get_APIParam_2', 'api return null param']
['See dbus_try_get_local_machine_id_APIName', 'see api']
['Asks the bus to return its globally unique ID, as described in the D-Bus specification', 'ask return globally unique -PRON- would , as describe param specification']
['For the session bus , this is useful as a way to uniquely identify each user session', 'session , be useful as way uniquely identify user session']
['dbus_bus_get_id_APIParam_2 is location to store the dbus_bus_get_id_APIParam_2', 'param be location store param']
['dbus_bus_get_id_APIParam_1 is the dbus_bus_get_id_APIParam_1', 'param be param']
['dbus_bus_get_id_APIName return the bus ID or NULL if dbus_bus_get_id_APIParam_2 is set', 'api return - PRON - would null']
['This may be useful', 'may be useful']
['Connects to a bus daemon and registers the client with it as with dbus_bus_register_APIName', 'connect daemon register client as api']
['Unlike dbus_bus_get_APIName , always creates a new connection', 'unlike api , always create connection']
['This connection will not be saved or recycled by libdbus', 'connection not be save recycle by']
['For the system bus , probably the bus ID is not useful', 'system , probably -PRON- would be not useful']
['or compile time', 'compile time']
['instead , use the machine ID and may be persistent beyond a single bus instance', 'instead , use machine -PRON- would may be persistent beyond single instance']
['Caller owns a reference to the bus and must either close it or know it to be closed prior to releasing this reference', 'caller own reference must either close know be close before release reference']
['dbus_bus_get_private_APIName calls dbus_bus_register_APIName for you', 'api call api -PRON']
['dbus_bus_get_private_APIName will block until authentication and bus registration are complete', 'api block until authentication registration be complete']
['You can undo this by calling dbus_connection_set_exit_on_disconnect_APIName yourself after you get the connection', 'PRON- can undo by call api after -PRON- get connection']
['See dbus_connection_open_private_APIName for more details on', 'see api detail']
['dbus_bus_get_private_APIParam_1 is bus dbus_bus_get_private_APIParam_1', 'param be param']
['dbus_bus_get_private_APIName return a DBusConnection with new ref', 'api return']
['dbus_bus_get_private_APIParam_2 is address where an dbus_bus_get_private_APIParam_2 can be returned', 'param be address param can be return']
['the application will exit', 'application exit']
['dbus_bus_get_private_APIName calls dbus_connection_set_exit_on_disconnect_APIName on the new connection , so', 'api call api connection']
['Gets the unique name of the dbus_bus_get_unique_name_APIParam_1 as assigned by the message bus', 'get unique name param as assign by message']
['All connections returned by dbus_bus_get_APIName or dbus_bus_get_private_APIName have been successfully registered', 'connection return by api have be successfully register']
['Only possible after the dbus_bus_get_unique_name_APIParam_1 has been registered with the message bus', 'only possible after param have be register message']
['dbus_bus_get_unique_name_APIParam_1 is the dbus_bus_get_unique_name_APIParam_1', 'param be param']
['The name remains valid until the dbus_bus_get_unique_name_APIParam_1 is freed , and should not be freed by the caller', 'name remain valid until param be free , should not be free by caller']
['that can be retrieved with dbus_connection_get_server_id_APIName', 'can be retrieve api']
['In addition to an ID for each bus and an ID for each machine , there is an ID for each address that the bus is listening on', 'addition -PRON- would -PRON- would machine , be -PRON- would address be listen']
['Other than dbus_bus_get_APIName , there are two ways to set the unique name', 'api , be two way set unique name']
['one is dbus_bus_register_APIName , the other is dbus_bus_set_unique_name_APIName', 'one be api , be api']
['dbus_bus_get_unique_name_APIName return the unique name or NULL on error', 'api return unique name null error']
['Only works on UNIX', 'only work unix']
['only works for connections on the same machine as the bus', 'only work connection machine as']
['calling dbus_bus_set_unique_name_APIName instead of using dbus_bus_register_APIName', 'call api instead use api']
['You are responsible for', 'PRON- be responsible']
['Asks the bus to return the UID the named dbus_bus_get_unix_user_APIParam_1 authenticated as, if any', 'ask return name param authenticate as , if']
['dbus_bus_get_unix_user_APIName will always return an dbus_bus_get_unix_user_APIParam_3 on Windows', 'api always return param window']
['For the system message bus you are guaranteed to be on the same machine', 'system message -PRON- be guarantee be machine']
['dbus_bus_get_unix_user_APIParam_1 is the dbus_bus_get_unix_user_APIParam_1', 'param be param']
['dbus_bus_get_unix_user_APIParam_2 is a dbus_bus_get_unix_user_APIParam_2 owned by the dbus_bus_get_unix_user_APIParam_1', 'param be param own by param']
['something sensible', 'something sensible']
['So check for errors and do', 'check error']
['dbus_bus_get_unix_user_APIParam_3 is location to store the dbus_bus_get_unix_user_APIParam_3', 'param be location store param']
["it is considered a match if the argument exactly matches the given string or if one of them ends in a ' / ' and is a prefix of the other", 'be consider match']
["452345.34 ' '' Possible keys you can match on are type , sender , interface , member , path , destination and numbered keys to match message args", 'param possible key -PRON- can match be type , , api , member , path , destination number key match message arg']
['dbus_bus_get_unix_user_APIName return the unix user id, or -1) if dbus_bus_get_unix_user_APIParam_3 is set', 'api return unix user - PRON - would , constant']
['dbus_bus_name_has_owner_APIParam_2 is the dbus_bus_name_has_owner_APIParam_2', 'param be param']
['dbus_bus_name_has_owner_APIParam_1 is the dbus_bus_name_has_owner_APIParam_1', 'param be param']
['Using this can easily result in a race condition', 'use can easily result condition']
['dbus_bus_name_has_owner_APIParam_3 is location to store any errors', 'param be location store error']
['dbus_bus_get_unix_user_APIName only works for connections that authenticated as a UNIX user , right now that includes all bus connections , but it is very possible to have connections with no associated UID', 'api only work connection authenticate as unix user , right include connection , but be possible have connection no associated']
['Registers a dbus_bus_register_APIParam_1 with the bus', 'register param']
['dbus_bus_name_has_owner_APIName return TRUE if the dbus_bus_name_has_owner_APIParam_2 exists, FALSE if not or on dbus_bus_name_has_owner_APIParam_3', 'api return constant']
['an application does', 'application do']
['dbus_bus_register_APIName will block until registration is complete', 'api block until registration be complete']
['This must be the first thing', 'must be first thing']
['Note Just use dbus_bus_get_APIName or dbus_bus_get_private_APIName instead of dbus_bus_register_APIName and save yourself some pain', 'note use api instead api save']
['the unique name will be set , and can be obtained using dbus_bus_get_unique_name_APIName', 'unique name be set , can be obtain use api']
['dbus_bus_register_APIName does nothing', 'api do nothing']
['will be called for you', 'be call -PRON']
['dbus_bus_register_APIParam_2 is place to store errors', 'param be place store error']
['do not specify DBUS_NAME_FLAG_REPLACE_EXISTING and you will get an dbus_bus_name_has_owner_APIParam_3 if there already an owner', 'not specify constant - PRON - get param']
['dbus_bus_register_APIParam_1 is the dbus_bus_register_APIParam_1', 'param be param']
['Using dbus_bus_register_APIName manually is only useful', 'use api manually be only useful']
['dbus_bus_register_APIName return TRUE on success', 'api return constant success']
["The `` ReleaseName '' method is canonically documented in the D-Bus specification", 'api be canonically document param specification']
['there is a lock that keeps both apps from registering at the same time', 'be lock keep register time']
['Asks the bus to unassign the given dbus_bus_release_name_APIParam_2 from this dbus_bus_release_name_APIParam_1 by invoking the ReleaseName method on the bus', 'ask unassign give param by invoke api']
['you get from the bus', 'PRON- get']
['DBUS_RELEASE_NAME_REPLY_NON_EXISTENT which means nobody owned the dbus_bus_release_name_APIParam_2', 'constant which mean own param']
['DBUS_RELEASE_NAME_REPLY_NOT_OWNER which means someone else owns the dbus_bus_release_name_APIParam_2 so you can not release it', 'constant which mean else own param -PRON- can not release']
['dbus_bus_release_name_APIParam_1 is the dbus_bus_release_name_APIParam_1', 'param be param']
['dbus_bus_release_name_APIParam_3 is location to store the dbus_bus_release_name_APIParam_3', 'param be location store param']
['you will have to dbus_bus_register_APIName yourself , or make the appropriate registration method', 'PRON- have api , make appropriate registration api']
['dbus_bus_release_name_APIParam_2 is the dbus_bus_release_name_APIParam_2 to remove', 'param be param remove']
['Possible results are', 'possible result be']
['The rule in a multithreaded app , , is that dbus_bus_register_APIName must be used to register , or you need to have your own locks that all threads in the app will respect', 'rule multithreade , be api must be use register , -PRON- need have lock thread respect']
["Removes a previously-added match dbus_bus_remove_match_APIParam_2 `` by value ''", 'remove param match param by value']
['dbus_bus_release_name_APIName return a result code, -1 if dbus_bus_release_name_APIParam_3 is set', 'api return result code , constant']
["The `` rule '' argument is the string form of a match dbus_bus_remove_match_APIParam_2", 'rule param be stre form match param']
['See detailed explanation in docs for dbus_bus_add_match_APIName', 'see detailed explanation api']
['DBUS_RELEASE_NAME_REPLY_RELEASED which means you owned the dbus_bus_release_name_APIParam_2 or were in the queue to own it , and and now you do not own it and are not in the queue', 'constant which mean -PRON- own param be queue , -PRON- not be not queue']
['dbus_bus_remove_match_APIParam_1 is dbus_bus_remove_match_APIParam_1 to the message bus', 'param be param message']
['dbus_bus_remove_match_APIParam_3 is location to store any errors', 'param be location store error']
['dbus_bus_remove_match_APIParam_2 is textual form of match dbus_bus_remove_match_APIParam_2', 'param be textual form match param']
['dbus_bus_remove_match_APIName will not block', 'api not block']
['you check dbus_bus_get_unique_name_APIName to see', 'PRON- check api see']
['In a single-threaded application you can register by hand instead of using dbus_bus_register_APIName , as long as', 'param application -PRON- can register by hand instead use api , as long as']
['This method is fully documented in the D-Bus specification', 'api be fully document param specification']
['the bus will kick you off', 'kick -PRON']
['For shared connections in a multithreaded application , you can not really make the registration calls yourself , , and', 'share connection multithreade application , -PRON- can not really make registration call']
['Only one owns it at a time - called the primary owner', 'only one own time _ call primary']
['The bus compares match rules semantically , not textually , so whitespace and ordering do not have to be identical to the dbus_bus_remove_match_APIParam_2 you passed to dbus_bus_add_match_APIName', 'compare match rule semantically , not textually , whitespace ordering not have be identical param -PRON- api']
['Asks the bus to assign the given dbus_bus_request_name_APIParam_2 to this dbus_bus_request_name_APIParam_1 by invoking the RequestName method on the bus', 'ask assign give param by invoke api']
['For quick reference , the dbus_bus_request_name_APIParam_3 and result codes are discussed here , but the specification is the canonical version of this information', 'quick reference , param result code be discuss , but specification be canonical version information']
['First you should know that for each bus dbus_bus_request_name_APIParam_2 , the bus stores a queue of connections that would like to own it', 'first -PRON- should know param , store queue connection would like']
['The queue means you do not need to manually watch for the current owner to disappear and request the dbus_bus_request_name_APIParam_2 again', 'queue mean -PRON- not need manually current disappear request param']
['You can update these dbus_bus_request_name_APIParam_3 by calling RequestName again', 'PRON- can update param by call']
['sent to org.freedesktop.TextEditor , but', 'send param , but']
['you can specify several dbus_bus_request_name_APIParam_3', 'PRON- can specify several param']
['The first one to start up will receive messages', 'first one start receive message']
['These properties are stored and does not become the primary owner', 'property be store do not become primary']
['the next owner in the queue atomically takes over', 'next queue atomically take']
['DBUS_NAME_FLAG_ALLOW_REPLACEMENT and DBUS_NAME_FLAG_DO_NOT_QUEUE are properties stored by the bus for this dbus_bus_request_name_APIParam_1 with respect to each requested bus dbus_bus_request_name_APIParam_2', 'constant be property store by param respect request param']
['DBUS_NAME_FLAG_ALLOW_REPLACEMENT means that another requestor of the dbus_bus_request_name_APIParam_2 can take it away from you by specifying DBUS_NAME_FLAG_REPLACE_EXISTING', 'constant mean another param can take away -PRON- by specify constant']
['Unlike the other two dbus_bus_request_name_APIParam_3 , DBUS_NAME_FLAG_REPLACE_EXISTING is a property of the individual RequestName call , i.e', 'unlike two param , constant be property individual call']
['the bus does not persistently associate it with the connection-name pair', 'do not persistently associate param pair']
['dbus_bus_request_name_APIName returns a result code', 'api return result code']
['The possible result codes are as follows', 'possible result code be as follow']
['you can have all of them sitting in the queue', 'PRON- can have sit queue']
['the caller ends up in a queue to own the dbus_bus_request_name_APIParam_2 after the current owner gives it up', 'caller end queue param after current give']
['you do not want to be queued up', 'PRON- not want be queue']
['DBUS_NAME_FLAG_DO_NOT_QUEUE means that - you only care about being the primary owner', 'constant mean _ -PRON- only care primary']
['an application will receive the requested dbus_bus_request_name_APIParam_2 only if the dbus_bus_request_name_APIParam_2 is currently unowned', 'application receive request param only if param be currently unowned']
['Conventionally , single-instance applications often offer a command line option called -- replace which means to replace the current instance', 'conventionally , param application often offer command line option call _ _ replace which mean replace current instance']
['DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER happens a dbus_bus_request_name_APIParam_2 it already owns', 'constant happen param already own']
['the current primary owner will be kicked off', 'current primary be kick']
['any editor that can be the user editor should specify DBUS_NAME_FLAG_REPLACE_EXISTING to either take over or be queued up according to', 'can be user should specify constant either take be queue accord']
['and it will NOT give up the dbus_bus_request_name_APIParam_2', 'not give param']
["Look for the signal `` NameLost '' from DBUS_SERVICE_DBUS and DBUS_INTERFACE_DBUS", 'look signal namelost constant']
['DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER means that the dbus_bus_request_name_APIParam_2 had no existing owner , and the caller is now the primary owner', 'constant mean param have no exist , caller be primary']
['To implement this , always set DBUS_NAME_FLAG_ALLOW_REPLACEMENT', 'implement , always set constant']
['DBUS_REQUEST_NAME_REPLY_IN_QUEUE happens', 'constant happen']
['and either the current owner did NOT specify DBUS_NAME_FLAG_ALLOW_REPLACEMENT or the caller did NOT specify DBUS_NAME_FLAG_REPLACE_EXISTING', 'either current do not specify constant caller do not specify constant']
['dbus_bus_request_name_APIParam_1 is the dbus_bus_request_name_APIParam_1', 'param be param']
['or that the dbus_bus_request_name_APIParam_2 had an owner , and the caller specified DBUS_NAME_FLAG_REPLACE_EXISTING , and the current owner specified DBUS_NAME_FLAG_ALLOW_REPLACEMENT', 'param have , caller specify constant , current specify constant']
['you need to exit', 'PRON- need exit']
['DBUS_REQUEST_NAME_REPLY_EXISTS happens', 'constant happen']
['dbus_bus_request_name_APIParam_2 is the dbus_bus_request_name_APIParam_2 to request', 'param be param request']
['and either the current owner has NOT specified DBUS_NAME_FLAG_ALLOW_REPLACEMENT or the caller did NOT specify DBUS_NAME_FLAG_REPLACE_EXISTING', 'either current have not specify constant caller do not specify constant']
['dbus_bus_request_name_APIParam_3 is dbus_bus_request_name_APIParam_3', 'param be param']
['dbus_bus_request_name_APIParam_4 is location to store the dbus_bus_request_name_APIParam_4', 'param be location store param']
['dbus_bus_request_name_APIName return a result code, -1 if dbus_bus_request_name_APIParam_4 is set', 'api return result code , constant']
['Sets the unique name of the dbus_bus_set_unique_name_APIParam_1 , as assigned by the message bus', 'set unique name param , as assign by message']
['Can only be called once per dbus_bus_set_unique_name_APIParam_1', 'can only be call per param']
['replace , do not specify DBUS_NAME_FLAG_REPLACE_EXISTING , and exit if you fail to become the bus dbus_bus_request_name_APIParam_2 owner', 'replace , not specify constant , exit']
["say `` text editor , '' it should specify DBUS_NAME_FLAG_ALLOW_REPLACEMENT if it wants the last editor started to be the user editor vs. the first one started", 'say text , should specify constant  one start']
['After the unique name is set , you can get it with dbus_bus_get_unique_name_APIName', 'after unique name be set , -PRON- can get api']
['The only reason to use dbus_bus_set_unique_name_APIName is to re-implement the equivalent of dbus_bus_register_APIName yourself', 'only reason use api be param equivalent api']
['One reason to do that might be to do the bus registration call asynchronously instead of synchronously', 'one reason may be registration call asynchronously instead synchronously']
['Note Just use dbus_bus_get_APIName or dbus_bus_get_private_APIName , or worst case dbus_bus_register_APIName , instead of messing with this function', 'note use api , bad case api , instead mess function']
['There really no point creating pain for yourself by doing things manually', 'really no point create by do thing manually']
['it is hard to use dbus_bus_set_unique_name_APIName safely on shared connections in a multithreaded application', 'be hard use api safely share connection multithreade application']
['dbus_bus_set_unique_name_APIParam_1 is the dbus_bus_set_unique_name_APIParam_1', 'param be param']
['Thus , you need a way to coordinate which thread sends the registration attempt', 'thus , -PRON- need way coordinate which thread send registration attempt']
['which also means you know which thread will call dbus_bus_set_unique_name_APIName', 'which mean -PRON- know which thread call api']
['dbus_bus_set_unique_name_APIParam_2 is the unique name', 'param be unique name']
['dbus_bus_set_unique_name_APIName return FALSE if not enough memory', 'api return constant if not enough memory']
['Can only be used', 'can only be use']
['Starts a service that will request ownership of the given dbus_bus_start_service_by_name_APIParam_2', 'start service request give param']
['there is no mechanism in libdbus itself to avoid sending it twice', 'be no mechanism avoid send twice']
['you need to avoid using dbus_bus_set_unique_name_APIName on shared connections', 'PRON- need avoid use api share connection']
['dbus_bus_start_service_by_name_APIParam_1 is the dbus_bus_start_service_by_name_APIParam_1', 'param be param']
['Method calls start a service to handle them by default unless you call dbus_message_set_auto_start_APIName to disable this behavior', 'method call start service handle by default unless -PRON- call api disable behavior']
['dbus_bus_start_service_by_name_APIParam_0 will be one of be one of DBUS_START_REPLY_SUCCESS or DBUS_START_REPLY_ALREADY_RUNNING', 'param be one be one constant']
['dbus_bus_start_service_by_name_APIParam_2 is the dbus_bus_start_service_by_name_APIParam_2 we want the new service to request', 'param be param want service request']
['dbus_bus_start_service_by_name_APIParam_3 is the dbus_bus_start_service_by_name_APIParam_3', 'param be param']
['dbus_bus_start_service_by_name_APIParam_4 is a place to store the dbus_bus_start_service_by_name_APIParam_4 or NULL', 'param be place store param null']
['dbus_bus_start_service_by_name_APIParam_5 is location to store any errors', 'param be location store error']
['The dbus_bus_start_service_by_name_APIParam_3 parameter is for future expansion , currently you should specify 0', 'param be future , currently -PRON- should specify constant']
['dbus_bus_start_service_by_name_APIName return TRUE if the activation succeeded, FALSE if not', 'api return constant']
['dbus_timeout_get_data_APIParam_1 is the DBusTimeout object', 'param be object']
['dbus_timeout_get_data_APIName return previously-set data', 'api return param datum']
['dbus_timeout_get_enabled_APIParam_1 is the DBusTimeout object', 'param be object']
['Returns whether a dbus_timeout_get_enabled_APIParam_1 is enabled or not', 'return whether param be enable not']
['Gets data previously set with dbus_timeout_set_data_APIName or NULL', 'get datum previously set api null']
['dbus_timeout_get_enabled_APIName return TRUE if the dbus_timeout_get_enabled_APIParam_1 is enabled', 'api return constant']
['Gets the dbus_timeout_get_interval_APIParam_1 interval', 'get param']
['dbus_timeout_get_interval_APIParam_1 is the DBusTimeout object', 'param be object']
['dbus_timeout_get_interval_APIName return the interval in milliseconds', 'api return millisecond']
['The dbus_timeout_handle_APIName should be called each time this interval elapses , starting after The dbus_timeout_handle_APIName elapses once', 'api should be call time elapse , start after api elapse']
['it should not be polled by the main loop', 'should not be by main loop']
['Calls the dbus_timeout_handle_APIParam_1 handler for this dbus_timeout_handle_APIParam_1', 'call param handler param']
['dbus_timeout_handle_APIParam_1 is the DBusTimeout object', 'param be object']
["If dbus_timeout_handle_APIName returns FALSE , there wasn't enough memory to handle the dbus_timeout_handle_APIParam_1", 'if api return constant , enough memory handle param']
["dbus_timeout_handle_APIName return FALSE if there wasn't enough memory", 'api return constant']
['The interval may change', 'may change']
['Sets dbus_timeout_set_data_APIParam_2 which can be retrieved with dbus_timeout_get_data_APIName', 'set param which can be retrieve api']
['dbus_timeout_handle_APIName should be called', 'api should be call']
['the dbus_timeout_get_interval_APIParam_1 will be disabled and re-enabled to notify you of the change', 'param be disabled param notify -PRON- change']
['Intended for use by the DBusAddTimeoutFunction and DBusRemoveTimeoutFunction to store the DBusAddTimeoutFunction and DBusRemoveTimeoutFunction own dbus_timeout_set_data_APIParam_2', 'intend use by store param']
['dbus_timeout_set_data_APIParam_1 is the DBusTimeout object', 'param be object']
['dbus_timeout_set_data_APIParam_2 is the dbus_timeout_set_data_APIParam_2', 'param be param']
['dbus_timeout_set_data_APIParam_3 is function to be called to free the dbus_timeout_set_data_APIParam_2', 'param be function be call free param']
['Frees a NULL - terminated array of address dbus_address_entries_free_APIParam_1', 'free null _ terminate array address param']
['dbus_address_entries_free_APIParam_1 is the array', 'param be array']
['with Qt you might store the QTimer for this dbus_timeout_set_data_APIParam_1 and with GLib you might store a g_timeout_add result id', 'PRON- may store param glib -PRON- may store param result -PRON- would']
['Returns the method string of an address dbus_address_entry_get_method_APIParam_1', 'return api string address param']
['dbus_address_entry_get_method_APIName return a string describing the method', 'api return string describe api']
['given the address dbus_address_entry_get_method_APIParam_1 `` tcp', 'give address param']
['This string must not be freed', 'string must not be free']
['host=example.com" it would return the string "tcp" dbus_address_entry_get_method_APIParam_1 is the dbus_address_entry_get_method_APIParam_1', 'host param would return stre param be param']
['you could try to do more', 'PRON- could try']
['Returns a value from a dbus_address_entry_get_value_APIParam_2 of an dbus_address_entry_get_value_APIParam_1', 'return value param']
['Typically just letting the dbus_timeout_handle_APIParam_1 fire again next time it naturally times out is an adequate response to that problem , but', 'typically let param next time naturally time be adequate response problem , but']
['dbus_address_entry_get_value_APIParam_1 is the dbus_address_entry_get_value_APIParam_1', 'param be param']
['dbus_address_entry_get_value_APIParam_2 is the dbus_address_entry_get_value_APIParam_2', 'param be param']
['dbus_address_entry_get_value_APIName return the dbus_address_entry_get_value_APIParam_2 value', 'api return param value']
['This string must not be freed', 'string must not be free']
['dbus_address_escape_value_APIParam_1 is the unescaped dbus_address_escape_value_APIParam_1', 'param be unescaped param']
['dbus_address_escape_value_APIName return newly-allocated escaped dbus_address_escape_value_APIParam_1 or NULL if no memory', 'api return param escape param null']
['given the address `` tcp', 'give address']
['Escapes the given string as a dbus_address_escape_value_APIParam_1 in a key = value pair for a D-Bus address', 'escape give string as param key value pair param address']
['Note that dbus_address_entry_get_value_APIName returns an already-unescaped dbus_address_unescape_value_APIParam_1', 'api return param']
['dbus_address_unescape_value_APIParam_1 is the escaped dbus_address_unescape_value_APIParam_1', 'param be escape param']
['Unescapes the given string as a dbus_address_unescape_value_APIParam_1 in a key = value pair for a D-Bus address', 'give string as param key value pair param address']
['dbus_address_unescape_value_APIName return newly-allocated unescaped dbus_address_unescape_value_APIParam_1 or NULL if no memory', 'api return param unescaped param null']
['dbus_parse_address_APIParam_1 is the dbus_parse_address_APIParam_1', 'param be param']
['dbus_parse_address_APIParam_2 is return location to an array of entries', 'param be return location array entry']
['dbus_parse_address_APIParam_3 is return location for array length', 'param be return location array length']
['dbus_parse_address_APIParam_4 is dbus_parse_address_APIParam_1 where an dbus_parse_address_APIParam_4 can be returned', 'param be param can be return']
['dbus_address_unescape_value_APIParam_2 is dbus_address_unescape_value_APIParam_2 to set', 'param be param set']
["host = example.com , port = 8073 ''", 'host param , port constant']
['dbus_parse_address_APIName return TRUE on success, FALSE otherwise', 'api return constant success , constant otherwise']
['Parses an dbus_parse_address_APIParam_1 string of the form', 'parse param string form']
['key = value See the D-Bus specification for complete docs on the format', 'key value see param specification complete format']
['dbus_watch_get_data_APIParam_1 is the DBusWatch object', 'param be object']
['the first dbus_parse_address_APIParam_1 entries in the semicolon-separated list should be tried first', 'first param entry param list should be try first']
['dbus_watch_get_data_APIName return previously-set data', 'api return param datum']
['Returns whether a dbus_watch_get_enabled_APIParam_1 is enabled or not', 'return whether param be enable not']
['dbus_watch_get_enabled_APIParam_1 is the DBusWatch object', 'param be object']
['Gets data previously set with dbus_watch_set_data_APIName or NULL', 'get datum previously set api null']
['dbus_watch_get_enabled_APIName return TRUE if the dbus_watch_get_enabled_APIParam_1 is enabled', 'api return constant']
['Deprecated former name of dbus_watch_get_unix_fd_APIName', 'deprecate former name api']
['dbus_watch_get_fd_APIParam_1 is the DBusWatch object', 'param be object']
['dbus_watch_get_fd_APIName return the file descriptor to dbus_watch_get_fd_APIParam_1', 'api return file descriptor param']
['it should not be polled by the main loop', 'should not be by main loop']
['dbus_watch_get_flags_APIParam_1 is the DBusWatch object', 'param be object']
['Gets flags from DBusWatchFlags indicating what conditions should be monitored on the file descriptor', 'get flag indicate condition should be monitor file descriptor']
['dbus_watch_get_flags_APIName return the conditions to dbus_watch_get_flags_APIParam_1', 'api return condition param']
['On Windows, dbus_watch_get_unix_fd_APIName returns -1 but dbus_watch_get_socket_APIName returns a Winsock socket', 'window , api return constant but api return socket']
['The flags returned will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR', 'flag return only contain constant , never constant']
['dbus_watch_get_socket_APIParam_1 is the DBusWatch object', 'param be object']
['all watches implicitly include a dbus_watch_get_flags_APIParam_1 for hangups , errors , and other exceptional conditions', 'implicitly include param , error , exceptional condition']
['dbus_watch_get_socket_APIName return the socket to dbus_watch_get_socket_APIParam_1', 'api return socket param']
['Returns a socket to be watched, on UNIX this will return -1 if our transport is not socket-based so dbus_watch_get_unix_fd_APIName is preferred', 'return socket be , unix return constant  prefer']
['Always returns -1 on Windows', 'always return constant window']
['On UNIX this is preferred to dbus_watch_get_socket_APIName', 'unix be preferred api']
['dbus_watch_get_unix_fd_APIParam_1 is the DBusWatch object', 'param be object']
['On Windows you use dbus_watch_get_socket_APIName to get a Winsock socket to dbus_watch_get_unix_fd_APIParam_1', 'window -PRON- use api get socket param']
['dbus_watch_get_unix_fd_APIName return the file descriptor to dbus_watch_get_unix_fd_APIParam_1', 'api return file descriptor param']
['dbus_watch_handle_APIParam_1 is the DBusWatch object', 'param be object']
['Returns a UNIX file descriptor to be watched , which may be a pipe , socket , or other type of descriptor', 'return unix file descriptor be , which may be , socket , type descriptor']
['It is not allowed to reference a DBusWatch after it has been passed to remove_function', 'be not allow reference after have be param']
['If dbus_watch_handle_APIName returns FALSE , the file descriptor may still be ready for reading or writing, but more memory is needed in order to do the reading or writing', 'file descriptor may still be ready reading writing , but memory be need order read writing']
['dbus_watch_handle_APIParam_2 is the poll condition using DBusWatchFlags values', 'param be condition use value']
["dbus_watch_handle_APIName return FALSE if there wasn't enough memory", 'api return constant']
['Sets dbus_watch_set_data_APIParam_2 which can be retrieved with dbus_watch_get_data_APIName', 'set param which can be retrieve api']
['If you ignore the FALSE return, your application may spin in a busy loop on the file descriptor until memory becomes available, but nothing more catastrophic should happen', 'if -PRON- ignore constant return , application may spin busy loop file descriptor until memory become available , but nothing catastrophic should happen']
['dbus_watch_handle_APIName can not be called , as the connection will not be ready to handle that dbus_watch_handle_APIParam_1 yet', 'api can not be call , as connection not be ready handle param yet']
['Intended for use by the DBusAddWatchFunction and DBusRemoveWatchFunction to store their own dbus_watch_set_data_APIParam_2', 'intend use by store param']
['Called to notify the D-Bus library , or has an exception such as a hangup', 'call notify param library , have exception as']
['with Qt you might store the QSocketNotifier for this dbus_watch_set_data_APIParam_1 and with GLib you might store a GSource', 'PRON- may store qsocketnotifi param glib -PRON- may store']
['dbus_watch_set_data_APIParam_1 is the DBusWatch object', 'param be object']
['dbus_watch_set_data_APIParam_2 is the dbus_watch_set_data_APIParam_2', 'param be param']
['dbus_watch_set_data_APIParam_3 is function to be called to free the dbus_watch_set_data_APIParam_2', 'param be function be call free param']
